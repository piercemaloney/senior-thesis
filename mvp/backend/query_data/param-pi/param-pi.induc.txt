
Require Import processus.
(* processus:
Inductive capa : Set :=
  | Read : capa
  | Write : capa
  | Both : capa
  | Nil : capa.

Inductive capst : capa -> capa -> Prop :=
  | capst_refl : forall c : capa, capst c c
  | capst_nil : forall c : capa, capst c Nil
  | capst_both : forall c : capa, capst Both c.

Parameter type : Set.

Parameter getcap : type -> capa.

Parameter getobj : type -> type.

Parameter typest : type -> type -> Prop.

Axiom typest_refl : forall t : type, typest t t.

Axiom
  typest_trans :
    forall t t' : type,
    typest t t' -> forall t'' : type, typest t' t'' -> typest t t''.

Theorem capst_trans :
 forall c c' c'' : capa, capst c c' -> capst c' c'' -> capst c c''.

Parameter PP : Set.
Parameter VV : Set.

Axiom PP_decidable : forall p q : PP, {p = q} + {p <> q}.
Axiom VV_decidable : forall x y : VV, {x = y} + {x <> y}.

Inductive name : Set :=
  | pname : PP -> name
  | vname : VV -> name.

Inductive proc : Set :=
  | nil : proc
  | inp : name -> VV -> proc -> proc
  | out : name -> name -> proc -> proc
  | par : proc -> proc -> proc
  | res : VV -> type -> proc -> proc
  | ban : proc -> proc
  | sum : proc -> proc -> proc
  | mat : name -> name -> proc -> proc.

Definition subs_var_name (n m : name) (x : VV) : name :=
  match n with
  | pname p => n
  | vname v => match VV_decidable x v with
               | left _ => m
               | right _ => n
               end
  end.

Fixpoint subs_var_proc (P : proc) : name -> VV -> proc :=
  fun (n : name) (x : VV) =>
  match P with
  | nil => nil
  | inp m v qq =>
      inp (subs_var_name m n x) v
        match VV_decidable x v with
        | left _ => qq
        | right _ => subs_var_proc qq n x
        end
  | out m1 m2 qq =>
      out (subs_var_name m1 n x) (subs_var_name m2 n x)
        (subs_var_proc qq n x)
  | par qq rr => par (subs_var_proc qq n x) (subs_var_proc rr n x)
  | res v t qq =>
      res v t
        match VV_decidable x v with
        | left _ => qq
        | right _ => subs_var_proc qq n x
        end
  | ban qq => ban (subs_var_proc qq n x)
  | sum qq rr => sum (subs_var_proc qq n x) (subs_var_proc rr n x)
  | mat m1 m2 qq =>
      mat (subs_var_name m1 n x) (subs_var_name m2 n x)
        (subs_var_proc qq n x)
  end.

Definition subs_par_name (n m : name) (p : PP) : name :=
  match n with
  | pname q => match PP_decidable p q with
               | left _ => m
               | right _ => n
               end
  | vname v => n
  end.

Fixpoint subs_par_proc (P : proc) : name -> PP -> proc :=
  fun (n : name) (p : PP) =>
  match P with
  | nil => nil
  | inp m v qq => inp (subs_par_name m n p) v (subs_par_proc qq n p)
  | out m1 m2 qq =>
      out (subs_par_name m1 n p) (subs_par_name m2 n p)
        (subs_par_proc qq n p)
  | par qq rr => par (subs_par_proc qq n p) (subs_par_proc rr n p)
  | res v t qq => res v t (subs_par_proc qq n p)
  | ban qq => ban (subs_par_proc qq n p)
  | sum qq rr => sum (subs_par_proc qq n p) (subs_par_proc rr n p)
  | mat m1 m2 qq =>
      mat (subs_par_name m1 n p) (subs_par_name m2 n p)
        (subs_par_proc qq n p)
  end.

Inductive freshname (p : PP) : name -> Prop :=
  | freshp : forall q : PP, p <> q -> freshname p (pname q)
  | freshv : forall v : VV, freshname p (vname v).

Inductive fresh (p : PP) : proc -> Prop :=
  | frnil : fresh p nil
  | frinp :
      forall (m : name) (v : VV) (Q : proc),
      freshname p m -> fresh p Q -> fresh p (inp m v Q)
  | frout :
      forall (m1 m2 : name) (Q : proc),
      freshname p m1 -> freshname p m2 -> fresh p Q -> fresh p (out m1 m2 Q)
  | frpar : forall P Q : proc, fresh p P -> fresh p Q -> fresh p (par P Q)
  | frres :
      forall (v : VV) (t : type) (Q : proc), fresh p Q -> fresh p (res v t Q)
  | frban : forall Q : proc, fresh p Q -> fresh p (ban Q)
  | frsum : forall P Q : proc, fresh p P -> fresh p Q -> fresh p (sum P Q)
  | frmat :
      forall (m1 m2 : name) (Q : proc),
      freshname p m1 -> freshname p m2 -> fresh p Q -> fresh p (mat m1 m2 Q).

Inductive freshvarname (v : VV) : name -> Prop :=
  | freshvp : forall p : PP, freshvarname v (pname p)
  | freshvv : forall x : VV, v <> x -> freshvarname v (vname x).

Inductive freshvar (v : VV) : proc -> Prop :=
  | fvnil : freshvar v nil
  | fvinp :
      forall (m : name) (x : VV) (Q : proc),
      freshvarname v m -> v <> x -> freshvar v Q -> freshvar v (inp m x Q)
  | fvout :
      forall (m1 m2 : name) (Q : proc),
      freshvarname v m1 ->
      freshvarname v m2 -> freshvar v Q -> freshvar v (out m1 m2 Q)
  | fvpar :
      forall P Q : proc, freshvar v P -> freshvar v Q -> freshvar v (par P Q)
  | fvres :
      forall (x : VV) (t : type) (Q : proc),
      v <> x -> freshvar v Q -> freshvar v (res x t Q)
  | fvban : forall Q : proc, freshvar v Q -> freshvar v (ban Q)
  | fvsum :
      forall P Q : proc, freshvar v P -> freshvar v Q -> freshvar v (sum P Q)
  | fvmat :
      forall (m1 m2 : name) (Q : proc),
      freshvarname v m1 ->
      freshvarname v m2 -> freshvar v Q -> freshvar v (mat m1 m2 Q).

Inductive act : Set :=
  | aout : PP -> PP -> act
  | ainp : PP -> PP -> act
  | about : PP -> PP -> type -> act
  | tau : act.

Inductive freshact (p : PP) : act -> Prop :=
  | faout : forall q1 q2 : PP, p <> q1 -> p <> q2 -> freshact p (aout q1 q2)
  | fainp : forall q1 q2 : PP, p <> q1 -> p <> q2 -> freshact p (ainp q1 q2)
  | fabout :
      forall (q1 q2 : PP) (t : type),
      p <> q1 -> p <> q2 -> freshact p (about q1 q2 t)
  | ftau : freshact p tau.

Inductive sem : proc -> act -> proc -> Prop :=
  | sinp :
      forall (p q : PP) (x : VV) (Q : proc),
      sem (inp (pname p) x Q) (ainp p q) (subs_var_proc Q (pname q) x)
  | sout :
      forall (p q : PP) (Q : proc),
      sem (out (pname p) (pname q) Q) (aout p q) Q
  | scoml :
      forall (P P' Q Q' : proc) (p q : PP),
      sem P (ainp p q) P' ->
      sem Q (aout p q) Q' -> sem (par P Q) tau (par P' Q')
  | scomr :
      forall (P P' Q Q' : proc) (p q : PP),
      sem P (aout p q) P' ->
      sem Q (ainp p q) Q' -> sem (par P Q) tau (par P' Q')
  | sopen :
      forall (P P' : proc) (p q : PP) (x : VV) (t : type),
      fresh q P ->
      p <> q ->
      sem (subs_var_proc P (pname q) x) (aout p q) P' ->
      sem (res x t P) (about p q t) P'
  | sclosel :
      forall (P P' Q Q' : proc) (p q r : PP) (t : type) (x : VV),
      fresh q P ->
      freshvar x P' ->
      freshvar x Q' ->
      sem P (ainp p q) P' ->
      sem Q (about p r t) Q' ->
      sem (par P Q) tau
        (res x t
           (par (subs_par_proc P' (vname x) q) (subs_par_proc Q' (vname x) r)))
  | scloser :
      forall (P P' Q Q' : proc) (p q r : PP) (t : type) (x : VV),
      fresh q P ->
      freshvar x P' ->
      freshvar x Q' ->
      sem P (ainp p q) P' ->
      sem Q (about p r t) Q' ->
      sem (par Q P) tau
        (res x t
           (par (subs_par_proc Q' (vname x) r) (subs_par_proc P' (vname x) q)))
  | sres :
      forall (P P' : proc) (mu : act) (x y : VV) (t : type),
      (forall q : PP,
       sem (subs_var_proc P (pname q) x) mu (subs_var_proc P' (pname q) y)) ->
      sem (res x t P) mu (res y t P')
  | sban :
      forall (P P' : proc) (mu : act),
      sem (par (ban P) P) mu P' -> sem (ban P) mu P'
  | sparl :
      forall (P P' Q : proc) (mu : act),
      (forall (p q : PP) (t : type), mu = about p q t -> fresh q Q) ->
      sem P mu P' -> sem (par P Q) mu (par P' Q)
  | sparr :
      forall (P P' Q : proc) (mu : act),
      (forall (p q : PP) (t : type), mu = about p q t -> fresh q Q) ->
      sem P mu P' -> sem (par Q P) mu (par Q P')
  | ssuml :
      forall (P P' Q : proc) (mu : act), sem P mu P' -> sem (sum P Q) mu P'
  | ssumr :
      forall (P P' Q : proc) (mu : act), sem P mu P' -> sem (sum Q P) mu P'
  | smat :
      forall (P P' : proc) (p : PP) (mu : act),
      sem P mu P' -> sem (mat (pname p) (pname p) P) mu P'.

Definition env : Type := PP -> type.

Definition addenv (G : env) (p : PP) (t : type) : env :=
  fun q : PP =>
  match PP_decidable p q with
  | left _ => t
  | right _ => G q
  end.

Definition envst (G D : env) : Prop := forall p : PP, typest (G p) (D p).

Definition eqvenv (G D : env) : Prop := forall p : PP, G p = D p.

Inductive typing : env -> proc -> Prop :=
  | tnil : forall G : env, typing G nil
  | tinp :
      forall (G : env) (p : PP) (x : VV) (P : proc),
      capst (getcap (G p)) Read ->
      (forall q : PP,
       fresh q P ->
       typing (addenv G q (getobj (G p))) (subs_var_proc P (pname q) x)) ->
      typing G (inp (pname p) x P)
  | tout :
      forall (G : env) (p q : PP) (P : proc),
      capst (getcap (G p)) Write ->
      typest (G q) (getobj (G p)) ->
      typing G P -> typing G (out (pname p) (pname q) P)
  | tpar :
      forall (G : env) (P Q : proc),
      typing G P -> typing G Q -> typing G (par P Q)
  | tres :
      forall (G : env) (x : VV) (t : type) (P : proc),
      (forall q : PP,
       fresh q P -> typing (addenv G q t) (subs_var_proc P (pname q) x)) ->
      typing G (res x t P)
  | tban : forall (G : env) (P : proc), typing G P -> typing G (ban P)
  | tsum :
      forall (G : env) (P Q : proc),
      typing G P -> typing G Q -> typing G (sum P Q)
  | tmat :
      forall (G : env) (p q : PP) (P : proc),
      getcap (G p) = Both ->
      getcap (G q) = Both ->
      typing G P -> typing G (mat (pname p) (pname q) P).

Definition swap_par (r p q : PP) : PP :=
  match PP_decidable r p with
  | left _ => q
  | right _ => match PP_decidable r q with
               | left _ => p
               | right _ => r
               end
  end.

Definition swap_name (n : name) (p q : PP) : name :=
  match n with
  | pname r =>
      match PP_decidable r p with
      | left _ => pname q
      | right _ =>
          match PP_decidable r q with
          | left _ => pname p
          | right _ => pname r
          end
      end
  | vname x => vname x
  end.

Fixpoint swap_proc (P : proc) : PP -> PP -> proc :=
  fun p q : PP =>
  match P with
  | inp n x p1 => inp (swap_name n p q) x (swap_proc p1 p q)
  | out n1 n2 p1 =>
      out (swap_name n1 p q) (swap_name n2 p q) (swap_proc p1 p q)
  | res x t p1 => res x t (swap_proc p1 p q)
  | par p1 p2 => par (swap_proc p1 p q) (swap_proc p2 p q)
  | ban p1 => ban (swap_proc p1 p q)
  | sum p1 p2 => sum (swap_proc p1 p q) (swap_proc p2 p q)
  | mat n1 n2 p1 =>
      mat (swap_name n1 p q) (swap_name n2 p q) (swap_proc p1 p q)
  | nil => nil
  end.

Definition swap_env (G : env) (p q : PP) : env :=
  fun r : PP =>
  match PP_decidable p r with
  | left _ => G q
  | right _ =>
      match PP_decidable q r with
      | left _ => G p
      | right _ => G r
      end
  end.
         
Axiom different : forall p : PP, exists s : PP, p <> s.

Axiom
  fresh_and_different :
    forall (p : PP) (P : proc), exists r : PP, fresh r P /\ p <> r.

Axiom
  fresh_and_two_different :
    forall (p q : PP) (P : proc),
    exists r : PP, fresh r P /\ p <> r /\ q <> r.

Axiom
  fresh_and_three_different :
    forall (p q r : PP) (P : proc),
    exists s : PP, fresh s P /\ p <> s /\ q <> s /\ r <> s. *)

Theorem inp_ind :
 forall Pr : proc -> proc -> PP -> PP -> Prop,
 (forall (p q : PP) (x : VV) (P : proc),
  Pr (inp (pname p) x P) (subs_var_proc P (pname q) x) p q) ->
 (forall (P P' : proc) (p q : PP) (x y : VV) (t : type),
  (forall r : PP,
   sem (subs_var_proc P (pname r) x) (ainp p q)
     (subs_var_proc P' (pname r) y)) ->
  (forall r : PP,
   Pr (subs_var_proc P (pname r) x) (subs_var_proc P' (pname r) y) p q) ->
  Pr (res x t P) (res y t P') p q) ->
 (forall (P P' : proc) (p q : PP),
  sem (par (ban P) P) (ainp p q) P' ->
  Pr (par (ban P) P) P' p q -> Pr (ban P) P' p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (ainp p q) P' -> Pr P P' p q -> Pr (par P Q) (par P' Q) p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (ainp p q) P' -> Pr P P' p q -> Pr (par Q P) (par Q P') p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (ainp p q) P' -> Pr P P' p q -> Pr (sum P Q) P' p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (ainp p q) P' -> Pr P P' p q -> Pr (sum Q P) P' p q) ->
 (forall (P P' : proc) (p q r : PP),
  sem P (ainp p q) P' -> Pr P P' p q -> Pr (mat (pname r) (pname r) P) P' p q) ->
 forall (P P' : proc) (p q : PP), sem P (ainp p q) P' -> Pr P P' p q.
Proof.
intros Pr ok_inp ok_res ok_ban ok_parl ok_parr ok_suml ok_sumr ok_mat.
cut
 (forall (P : proc) (mu : act) (P' : proc),
  sem P mu P' -> forall p q : PP, mu = ainp p q -> Pr P P' p q).
intros cond P P' p q reduction.
apply cond with (mu := ainp p q).
exact reduction.
reflexivity.
intros P mu P' reduction.
apply
 sem_ind
  with
    (P := fun (P : proc) (mu : act) (P' : proc) =>
          forall p q : PP, mu = ainp p q -> Pr P P' p q).
intros pp qq xx QQ ppp qqq inp_is_inp.
injection inp_is_inp.
intros qq_is_qqq pp_is_ppp; rewrite qq_is_qqq; rewrite pp_is_ppp.
apply ok_inp.
intros p q Q pp qq absurd.
discriminate absurd.
intros until q0.
intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros PP PP' nu x y t cond_sem cond_pr.
intros p q nu_is.
apply ok_res.
intro r.
rewrite nu_is in cond_sem.
apply cond_sem.
intro r.
rewrite nu_is in cond_pr.
apply cond_pr.
reflexivity.
intros PP PP' mu' reduction' cond_pr p q mu_is_inp.
apply ok_ban.
rewrite mu_is_inp in reduction'.
assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' cond_fresh reduction' cond_pr p q mu_is_inp.
apply ok_parl.
rewrite mu_is_inp in reduction'; assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' cond_fresh reduction' cond_pr p q mu_is_inp.
apply ok_parr.
rewrite mu_is_inp in reduction'.
assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' reduction' cond_pr.
intros p q mu_is_inp; apply ok_suml.
rewrite mu_is_inp in reduction'.
assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' reduction' cond_pr p q mu_is_inp.
rewrite mu_is_inp in reduction'.
apply ok_sumr.
assumption.
apply cond_pr.
assumption.
intros PP PP' p mu' reduction' cond_pr p' q mu_is_inp.
rewrite mu_is_inp in reduction'.
apply ok_mat.
assumption.
apply cond_pr.
assumption.
assumption.
Qed.

Theorem out_ind :
 forall Pr : proc -> proc -> PP -> PP -> Prop,
 (forall (p q : PP) (P : proc), Pr (out (pname p) (pname q) P) P p q) ->
 (forall (P P' : proc) (p q : PP) (x y : VV) (t : type),
  (forall r : PP,
   sem (subs_var_proc P (pname r) x) (aout p q)
     (subs_var_proc P' (pname r) y)) ->
  (forall r : PP,
   Pr (subs_var_proc P (pname r) x) (subs_var_proc P' (pname r) y) p q) ->
  Pr (res x t P) (res y t P') p q) ->
 (forall (P P' : proc) (p q : PP),
  sem (par (ban P) P) (aout p q) P' ->
  Pr (par (ban P) P) P' p q -> Pr (ban P) P' p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (aout p q) P' -> Pr P P' p q -> Pr (par P Q) (par P' Q) p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (aout p q) P' -> Pr P P' p q -> Pr (par Q P) (par Q P') p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (aout p q) P' -> Pr P P' p q -> Pr (sum P Q) P' p q) ->
 (forall (P P' Q : proc) (p q : PP),
  sem P (aout p q) P' -> Pr P P' p q -> Pr (sum Q P) P' p q) ->
 (forall (P P' : proc) (p q r : PP),
  sem P (aout p q) P' -> Pr P P' p q -> Pr (mat (pname r) (pname r) P) P' p q) ->
 forall (P P' : proc) (p q : PP), sem P (aout p q) P' -> Pr P P' p q.
Proof.
intros Pr ok_inp ok_res ok_ban ok_parl ok_parr ok_suml ok_sumr ok_mat.
cut
 (forall (P : proc) (mu : act) (P' : proc),
  sem P mu P' -> forall p q : PP, mu = aout p q -> Pr P P' p q).
intros cond P P' p q reduction.
apply cond with (mu := aout p q).
exact reduction.
reflexivity.
intros P mu P' reduction.
apply
 sem_ind
  with
    (P := fun (P : proc) (mu : act) (P' : proc) =>
          forall p q : PP, mu = aout p q -> Pr P P' p q).
intros until q0; intro absurd; discriminate absurd.
intros p q Q p0 q0 out_is_out.
injection out_is_out.
intros q_is_q0 p_is_p0.
rewrite q_is_q0.
rewrite p_is_p0.
apply ok_inp.
intros until q0.
intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros until q0; intro absurd; discriminate absurd.
intros PP PP' mu' x y t cond_red cond_pr p q mu_is.
apply ok_res.
intro r.		
rewrite mu_is in cond_red.
apply cond_red.
intro r.
rewrite mu_is in cond_pr.
apply cond_pr.
reflexivity.
intros PP PP' mu' red cond_pr p q mu_is.
apply ok_ban.
rewrite mu_is in red.
exact red.
apply cond_pr.
assumption.
intros PP PP' Q mu' cond red cond_pr p q mu_is.
apply ok_parl.
rewrite mu_is in red; exact red.
apply cond_pr.
assumption.
intros PP PP' Q mu' cond red cond_pr p q mu_is.
apply ok_parr.
rewrite mu_is in red; exact red.
apply cond_pr.
assumption.
intros PP PP' Q mu' red cond_pr p q mu_is.
apply ok_suml.
rewrite mu_is in red.
assumption.
apply cond_pr; assumption.
intros PP PP' Q mu' red cond_pr p q mu_is.
apply ok_sumr.
rewrite mu_is in red; exact red.
apply cond_pr; assumption.
intros PP PP' p mu' red cond_pr p' q mu_is.
apply ok_mat.
rewrite mu_is in red.
assumption.
apply cond_pr.
assumption.
assumption.
Qed.

Theorem bout_ind :
 forall Pr : proc -> proc -> PP -> PP -> type -> Prop,
 (forall (p q : PP) (x : VV) (t : type) (P P' : proc),
  fresh q P ->
  q <> p ->
  sem (subs_var_proc P (pname q) x) (aout p q) P' -> Pr (res x t P) P' p q t) ->
 (forall (p q : PP) (x y : VV) (t t' : type) (P P' : proc),
  (forall r : PP,
   sem (subs_var_proc P (pname r) x) (about p q t)
     (subs_var_proc P' (pname r) y)) ->
  (forall r : PP,
   Pr (subs_var_proc P (pname r) x) (subs_var_proc P' (pname r) y) p q t) ->
  Pr (res x t' P) (res y t' P') p q t) ->
 (forall (P P' : proc) (p q : PP) (t : type),
  sem (par (ban P) P) (about p q t) P' ->
  Pr (par (ban P) P) P' p q t -> Pr (ban P) P' p q t) ->
 (forall (P P' Q : proc) (p q : PP) (t : type),
  fresh q Q ->
  sem P (about p q t) P' -> Pr P P' p q t -> Pr (par P Q) (par P' Q) p q t) ->
 (forall (P P' Q : proc) (p q : PP) (t : type),
  fresh q Q ->
  sem P (about p q t) P' -> Pr P P' p q t -> Pr (par Q P) (par Q P') p q t) ->
 (forall (P P' Q : proc) (p q : PP) (t : type),
  sem P (about p q t) P' -> Pr P P' p q t -> Pr (sum P Q) P' p q t) ->
 (forall (P P' Q : proc) (p q : PP) (t : type),
  sem P (about p q t) P' -> Pr P P' p q t -> Pr (sum Q P) P' p q t) ->
 (forall (P P' : proc) (p q r : PP) (t : type),
  sem P (about p q t) P' ->
  Pr P P' p q t -> Pr (mat (pname r) (pname r) P) P' p q t) ->
 forall (P P' : proc) (p q : PP) (t : type),
 sem P (about p q t) P' -> Pr P P' p q t.
Proof.
intros Pr ok_bout ok_res ok_ban ok_parl ok_parr ok_suml ok_sumr ok_mat.
cut
 (forall (P : proc) (mu : act) (P' : proc),
  sem P mu P' ->
  forall (p q : PP) (t : type), mu = about p q t -> Pr P P' p q t).
intros cond P P' p q t reduction.
apply cond with (mu := about p q t).
exact reduction.
reflexivity.
intros P mu P' reduction.
apply
 sem_ind
  with
    (P := fun (P : proc) (mu : act) (P' : proc) =>
          forall (p q : PP) (t : type), mu = about p q t -> Pr P P' p q t).
intros until t; intro absurd; discriminate absurd.
intros until t; intro absurd; discriminate absurd.
intros until t; intro absurd; discriminate absurd.
intros until t; intro absurd; discriminate absurd.
intros PP PP' p q x t fresh_q p_not_q reduction' cond_pr p0 q0 t0
 bout_is_bout.
injection bout_is_bout.
intros t_is_t0 q_is_q0 p_is_p0.
rewrite t_is_t0.
apply ok_bout.
rewrite <- q_is_q0.
assumption.
rewrite <- q_is_q0; rewrite <- p_is_p0.
red in |- *; intro; elim p_not_q; symmetry  in |- *; assumption.
rewrite p_is_p0 in reduction'; rewrite q_is_q0 in reduction'.
assumption.
intros until t0; intro absurd; discriminate absurd.
intros until t0; intro absurd; discriminate absurd.
intros PP PP' mu' x y t cond_red cond_pr p q t' mu_is.
apply ok_res.
intro r.		
rewrite mu_is in cond_red.
apply cond_red.
intro r.
rewrite mu_is in cond_pr.
apply cond_pr.
reflexivity.
intros PP PP' mu' red cond_pr p q t mu''.
apply ok_ban.
rewrite mu'' in red; assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' cond red cond_pr p q t mu_is.
apply ok_parl.
apply cond with (p := p) (t := t).
assumption.
rewrite mu_is in red.
assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' cond red cond_pr p q t mu_is.
apply ok_parr.
apply cond with (p := p) (t := t).
assumption.
rewrite mu_is in red.
assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' red cond_pr p q t mu_is.
apply ok_suml.
rewrite mu_is in red; assumption.
apply cond_pr.
assumption.
intros PP PP' Q mu' red cond_pr p q t mu_is.
apply ok_sumr.
rewrite mu_is in red; assumption.
apply cond_pr; assumption.
intros PP PP' q mu' red cond_pr p0 q' t mu''.
apply ok_mat.
rewrite mu'' in red; assumption.
apply cond_pr; assumption.
assumption.
Qed.

Theorem tau_ind :
 forall Pr : proc -> proc -> Prop,
 (forall (P P' Q Q' : proc) (p q : PP),
  sem P (ainp p q) P' -> sem Q (aout p q) Q' -> Pr (par P Q) (par P' Q')) ->
 (forall (P P' Q Q' : proc) (p q : PP),
  sem P (ainp p q) P' -> sem Q (aout p q) Q' -> Pr (par Q P) (par Q' P')) ->
 (forall (P P' Q Q' : proc) (p q r : PP) (t : type) (x : VV),
  fresh q P ->
  freshvar x P' ->
  freshvar x Q' ->
  sem P (ainp p q) P' ->
  sem Q (about p r t) Q' ->
  Pr (par P Q)
    (res x t
       (par (subs_par_proc P' (vname x) q) (subs_par_proc Q' (vname x) r)))) ->
 (forall (P P' Q Q' : proc) (p q r : PP) (t : type) (x : VV),
  fresh q P ->
  freshvar x P' ->
  freshvar x Q' ->
  sem P (ainp p q) P' ->
  sem Q (about p r t) Q' ->
  Pr (par Q P)
    (res x t
       (par (subs_par_proc Q' (vname x) r) (subs_par_proc P' (vname x) q)))) ->
 (forall (x y : VV) (t' : type) (P P' : proc),
  (forall r : PP,
   sem (subs_var_proc P (pname r) x) tau (subs_var_proc P' (pname r) y)) ->
  (forall r : PP,
   Pr (subs_var_proc P (pname r) x) (subs_var_proc P' (pname r) y)) ->
  Pr (res x t' P) (res y t' P')) ->
 (forall P P' : proc,
  sem (par (ban P) P) tau P' -> Pr (par (ban P) P) P' -> Pr (ban P) P') ->
 (forall P P' Q : proc, sem P tau P' -> Pr P P' -> Pr (par P Q) (par P' Q)) ->
 (forall P P' Q : proc, sem P tau P' -> Pr P P' -> Pr (par Q P) (par Q P')) ->
 (forall P P' Q : proc, sem P tau P' -> Pr P P' -> Pr (sum P Q) P') ->
 (forall P P' Q : proc, sem P tau P' -> Pr P P' -> Pr (sum Q P) P') ->
 (forall (P P' : proc) (r : PP),
  sem P tau P' -> Pr P P' -> Pr (mat (pname r) (pname r) P) P') ->
 forall P P' : proc, sem P tau P' -> Pr P P'.
Proof.
intros Pr ok_coml ok_comr ok_closel ok_closer ok_res ok_ban ok_parl ok_parr
 ok_suml ok_sumr ok_mat.
cut
 (forall (P : proc) (mu : act) (P' : proc),
  sem P mu P' -> mu = tau -> Pr P P').
intros cond P P' reduction.
apply cond with (mu := tau).
exact reduction.
reflexivity.
intros P mu P' reduction.
apply
 sem_ind
  with (P := fun (P : proc) (mu : act) (P' : proc) => mu = tau -> Pr P P').
intros until Q; intro absurd; discriminate absurd.
intros until Q; intro absurd; discriminate absurd.
intros PP PP' Q Q' p q redinp boom redout bam ok.
apply ok_coml with (p := p) (q := q).
assumption.
assumption.
intros PP PP' Q Q' p q redout boom redinp bam ok.
apply ok_comr with (p := p) (q := q).
assumption.
assumption.
intros z0 z1 z2 z3 z4 z5 z6 z7 z8 absurd.
intro absurd'; discriminate absurd'.
intros PP PP' Q Q' p q r t x fresh_q fresh_P' fresh_Q' redinp boom redout bam
 ok.
apply ok_closel with (p := p) (q := q) (r := r) (t := t) (x := x).
assumption.
assumption.
assumption.
assumption.
assumption.
intros PP PP' Q Q' p q r t x fresh_q fresh_P' fresh_Q' redinp boom redout bam
 ok.
apply ok_closer with (p := p).
assumption.
assumption.
assumption.
assumption.
assumption.
intros PP PP' mu' x y t cond_red cond_pr mu_is.
apply ok_res.
intro r.
rewrite mu_is in cond_red; apply cond_red.
intro; apply cond_pr.
assumption. intros PP PP' mu' red cond mu_is.
apply ok_ban.
rewrite mu_is in red; exact red.
apply cond; assumption.
intros PP PP' Q mu' cond red cond2 mu_is.
apply ok_parl.
rewrite mu_is in red.
assumption.
apply cond2; assumption.
intros PP PP' Q mu' cond red cond_pr mu_is.
apply ok_parr.
rewrite mu_is in red; apply red.
apply cond_pr; assumption.
intros PP PP' Q mu' red cond mu_is.
apply ok_suml.
rewrite mu_is in red; assumption.
apply cond; assumption.
intros PP PP' Q mu' red cond mu_is.
apply ok_sumr.
rewrite mu_is in red; assumption.
apply cond; assumption.
intros PP PP' p mu' red cond mu_is.
apply ok_mat.
rewrite mu_is in red; assumption.
apply cond; assumption.
assumption.
Qed.
