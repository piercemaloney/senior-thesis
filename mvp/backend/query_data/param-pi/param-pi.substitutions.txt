

Require Import processus.
(* processus:
Inductive capa : Set :=
  | Read : capa
  | Write : capa
  | Both : capa
  | Nil : capa.

Inductive capst : capa -> capa -> Prop :=
  | capst_refl : forall c : capa, capst c c
  | capst_nil : forall c : capa, capst c Nil
  | capst_both : forall c : capa, capst Both c.

Parameter type : Set.

Parameter getcap : type -> capa.

Parameter getobj : type -> type.

Parameter typest : type -> type -> Prop.

Axiom typest_refl : forall t : type, typest t t.

Axiom
  typest_trans :
    forall t t' : type,
    typest t t' -> forall t'' : type, typest t' t'' -> typest t t''.

Theorem capst_trans :
 forall c c' c'' : capa, capst c c' -> capst c' c'' -> capst c c''.

Parameter PP : Set.
Parameter VV : Set.

Axiom PP_decidable : forall p q : PP, {p = q} + {p <> q}.
Axiom VV_decidable : forall x y : VV, {x = y} + {x <> y}.

Inductive name : Set :=
  | pname : PP -> name
  | vname : VV -> name.

Inductive proc : Set :=
  | nil : proc
  | inp : name -> VV -> proc -> proc
  | out : name -> name -> proc -> proc
  | par : proc -> proc -> proc
  | res : VV -> type -> proc -> proc
  | ban : proc -> proc
  | sum : proc -> proc -> proc
  | mat : name -> name -> proc -> proc.

Definition subs_var_name (n m : name) (x : VV) : name :=
  match n with
  | pname p => n
  | vname v => match VV_decidable x v with
               | left _ => m
               | right _ => n
               end
  end.

Fixpoint subs_var_proc (P : proc) : name -> VV -> proc :=
  fun (n : name) (x : VV) =>
  match P with
  | nil => nil
  | inp m v qq =>
      inp (subs_var_name m n x) v
        match VV_decidable x v with
        | left _ => qq
        | right _ => subs_var_proc qq n x
        end
  | out m1 m2 qq =>
      out (subs_var_name m1 n x) (subs_var_name m2 n x)
        (subs_var_proc qq n x)
  | par qq rr => par (subs_var_proc qq n x) (subs_var_proc rr n x)
  | res v t qq =>
      res v t
        match VV_decidable x v with
        | left _ => qq
        | right _ => subs_var_proc qq n x
        end
  | ban qq => ban (subs_var_proc qq n x)
  | sum qq rr => sum (subs_var_proc qq n x) (subs_var_proc rr n x)
  | mat m1 m2 qq =>
      mat (subs_var_name m1 n x) (subs_var_name m2 n x)
        (subs_var_proc qq n x)
  end.

Definition subs_par_name (n m : name) (p : PP) : name :=
  match n with
  | pname q => match PP_decidable p q with
               | left _ => m
               | right _ => n
               end
  | vname v => n
  end.

Fixpoint subs_par_proc (P : proc) : name -> PP -> proc :=
  fun (n : name) (p : PP) =>
  match P with
  | nil => nil
  | inp m v qq => inp (subs_par_name m n p) v (subs_par_proc qq n p)
  | out m1 m2 qq =>
      out (subs_par_name m1 n p) (subs_par_name m2 n p)
        (subs_par_proc qq n p)
  | par qq rr => par (subs_par_proc qq n p) (subs_par_proc rr n p)
  | res v t qq => res v t (subs_par_proc qq n p)
  | ban qq => ban (subs_par_proc qq n p)
  | sum qq rr => sum (subs_par_proc qq n p) (subs_par_proc rr n p)
  | mat m1 m2 qq =>
      mat (subs_par_name m1 n p) (subs_par_name m2 n p)
        (subs_par_proc qq n p)
  end.

Inductive freshname (p : PP) : name -> Prop :=
  | freshp : forall q : PP, p <> q -> freshname p (pname q)
  | freshv : forall v : VV, freshname p (vname v).

Inductive fresh (p : PP) : proc -> Prop :=
  | frnil : fresh p nil
  | frinp :
      forall (m : name) (v : VV) (Q : proc),
      freshname p m -> fresh p Q -> fresh p (inp m v Q)
  | frout :
      forall (m1 m2 : name) (Q : proc),
      freshname p m1 -> freshname p m2 -> fresh p Q -> fresh p (out m1 m2 Q)
  | frpar : forall P Q : proc, fresh p P -> fresh p Q -> fresh p (par P Q)
  | frres :
      forall (v : VV) (t : type) (Q : proc), fresh p Q -> fresh p (res v t Q)
  | frban : forall Q : proc, fresh p Q -> fresh p (ban Q)
  | frsum : forall P Q : proc, fresh p P -> fresh p Q -> fresh p (sum P Q)
  | frmat :
      forall (m1 m2 : name) (Q : proc),
      freshname p m1 -> freshname p m2 -> fresh p Q -> fresh p (mat m1 m2 Q).

Inductive freshvarname (v : VV) : name -> Prop :=
  | freshvp : forall p : PP, freshvarname v (pname p)
  | freshvv : forall x : VV, v <> x -> freshvarname v (vname x).

Inductive freshvar (v : VV) : proc -> Prop :=
  | fvnil : freshvar v nil
  | fvinp :
      forall (m : name) (x : VV) (Q : proc),
      freshvarname v m -> v <> x -> freshvar v Q -> freshvar v (inp m x Q)
  | fvout :
      forall (m1 m2 : name) (Q : proc),
      freshvarname v m1 ->
      freshvarname v m2 -> freshvar v Q -> freshvar v (out m1 m2 Q)
  | fvpar :
      forall P Q : proc, freshvar v P -> freshvar v Q -> freshvar v (par P Q)
  | fvres :
      forall (x : VV) (t : type) (Q : proc),
      v <> x -> freshvar v Q -> freshvar v (res x t Q)
  | fvban : forall Q : proc, freshvar v Q -> freshvar v (ban Q)
  | fvsum :
      forall P Q : proc, freshvar v P -> freshvar v Q -> freshvar v (sum P Q)
  | fvmat :
      forall (m1 m2 : name) (Q : proc),
      freshvarname v m1 ->
      freshvarname v m2 -> freshvar v Q -> freshvar v (mat m1 m2 Q).

Inductive act : Set :=
  | aout : PP -> PP -> act
  | ainp : PP -> PP -> act
  | about : PP -> PP -> type -> act
  | tau : act.

Inductive freshact (p : PP) : act -> Prop :=
  | faout : forall q1 q2 : PP, p <> q1 -> p <> q2 -> freshact p (aout q1 q2)
  | fainp : forall q1 q2 : PP, p <> q1 -> p <> q2 -> freshact p (ainp q1 q2)
  | fabout :
      forall (q1 q2 : PP) (t : type),
      p <> q1 -> p <> q2 -> freshact p (about q1 q2 t)
  | ftau : freshact p tau.

Inductive sem : proc -> act -> proc -> Prop :=
  | sinp :
      forall (p q : PP) (x : VV) (Q : proc),
      sem (inp (pname p) x Q) (ainp p q) (subs_var_proc Q (pname q) x)
  | sout :
      forall (p q : PP) (Q : proc),
      sem (out (pname p) (pname q) Q) (aout p q) Q
  | scoml :
      forall (P P' Q Q' : proc) (p q : PP),
      sem P (ainp p q) P' ->
      sem Q (aout p q) Q' -> sem (par P Q) tau (par P' Q')
  | scomr :
      forall (P P' Q Q' : proc) (p q : PP),
      sem P (aout p q) P' ->
      sem Q (ainp p q) Q' -> sem (par P Q) tau (par P' Q')
  | sopen :
      forall (P P' : proc) (p q : PP) (x : VV) (t : type),
      fresh q P ->
      p <> q ->
      sem (subs_var_proc P (pname q) x) (aout p q) P' ->
      sem (res x t P) (about p q t) P'
  | sclosel :
      forall (P P' Q Q' : proc) (p q r : PP) (t : type) (x : VV),
      fresh q P ->
      freshvar x P' ->
      freshvar x Q' ->
      sem P (ainp p q) P' ->
      sem Q (about p r t) Q' ->
      sem (par P Q) tau
        (res x t
           (par (subs_par_proc P' (vname x) q) (subs_par_proc Q' (vname x) r)))
  | scloser :
      forall (P P' Q Q' : proc) (p q r : PP) (t : type) (x : VV),
      fresh q P ->
      freshvar x P' ->
      freshvar x Q' ->
      sem P (ainp p q) P' ->
      sem Q (about p r t) Q' ->
      sem (par Q P) tau
        (res x t
           (par (subs_par_proc Q' (vname x) r) (subs_par_proc P' (vname x) q)))
  | sres :
      forall (P P' : proc) (mu : act) (x y : VV) (t : type),
      (forall q : PP,
       sem (subs_var_proc P (pname q) x) mu (subs_var_proc P' (pname q) y)) ->
      sem (res x t P) mu (res y t P')
  | sban :
      forall (P P' : proc) (mu : act),
      sem (par (ban P) P) mu P' -> sem (ban P) mu P'
  | sparl :
      forall (P P' Q : proc) (mu : act),
      (forall (p q : PP) (t : type), mu = about p q t -> fresh q Q) ->
      sem P mu P' -> sem (par P Q) mu (par P' Q)
  | sparr :
      forall (P P' Q : proc) (mu : act),
      (forall (p q : PP) (t : type), mu = about p q t -> fresh q Q) ->
      sem P mu P' -> sem (par Q P) mu (par Q P')
  | ssuml :
      forall (P P' Q : proc) (mu : act), sem P mu P' -> sem (sum P Q) mu P'
  | ssumr :
      forall (P P' Q : proc) (mu : act), sem P mu P' -> sem (sum Q P) mu P'
  | smat :
      forall (P P' : proc) (p : PP) (mu : act),
      sem P mu P' -> sem (mat (pname p) (pname p) P) mu P'.

Definition env : Type := PP -> type.

Definition addenv (G : env) (p : PP) (t : type) : env :=
  fun q : PP =>
  match PP_decidable p q with
  | left _ => t
  | right _ => G q
  end.

Definition envst (G D : env) : Prop := forall p : PP, typest (G p) (D p).

Definition eqvenv (G D : env) : Prop := forall p : PP, G p = D p.

Inductive typing : env -> proc -> Prop :=
  | tnil : forall G : env, typing G nil
  | tinp :
      forall (G : env) (p : PP) (x : VV) (P : proc),
      capst (getcap (G p)) Read ->
      (forall q : PP,
       fresh q P ->
       typing (addenv G q (getobj (G p))) (subs_var_proc P (pname q) x)) ->
      typing G (inp (pname p) x P)
  | tout :
      forall (G : env) (p q : PP) (P : proc),
      capst (getcap (G p)) Write ->
      typest (G q) (getobj (G p)) ->
      typing G P -> typing G (out (pname p) (pname q) P)
  | tpar :
      forall (G : env) (P Q : proc),
      typing G P -> typing G Q -> typing G (par P Q)
  | tres :
      forall (G : env) (x : VV) (t : type) (P : proc),
      (forall q : PP,
       fresh q P -> typing (addenv G q t) (subs_var_proc P (pname q) x)) ->
      typing G (res x t P)
  | tban : forall (G : env) (P : proc), typing G P -> typing G (ban P)
  | tsum :
      forall (G : env) (P Q : proc),
      typing G P -> typing G Q -> typing G (sum P Q)
  | tmat :
      forall (G : env) (p q : PP) (P : proc),
      getcap (G p) = Both ->
      getcap (G q) = Both ->
      typing G P -> typing G (mat (pname p) (pname q) P).

Definition swap_par (r p q : PP) : PP :=
  match PP_decidable r p with
  | left _ => q
  | right _ => match PP_decidable r q with
               | left _ => p
               | right _ => r
               end
  end.

Definition swap_name (n : name) (p q : PP) : name :=
  match n with
  | pname r =>
      match PP_decidable r p with
      | left _ => pname q
      | right _ =>
          match PP_decidable r q with
          | left _ => pname p
          | right _ => pname r
          end
      end
  | vname x => vname x
  end.

Fixpoint swap_proc (P : proc) : PP -> PP -> proc :=
  fun p q : PP =>
  match P with
  | inp n x p1 => inp (swap_name n p q) x (swap_proc p1 p q)
  | out n1 n2 p1 =>
      out (swap_name n1 p q) (swap_name n2 p q) (swap_proc p1 p q)
  | res x t p1 => res x t (swap_proc p1 p q)
  | par p1 p2 => par (swap_proc p1 p q) (swap_proc p2 p q)
  | ban p1 => ban (swap_proc p1 p q)
  | sum p1 p2 => sum (swap_proc p1 p q) (swap_proc p2 p q)
  | mat n1 n2 p1 =>
      mat (swap_name n1 p q) (swap_name n2 p q) (swap_proc p1 p q)
  | nil => nil
  end.

Definition swap_env (G : env) (p q : PP) : env :=
  fun r : PP =>
  match PP_decidable p r with
  | left _ => G q
  | right _ =>
      match PP_decidable q r with
      | left _ => G p
      | right _ => G r
      end
  end.
         
Axiom different : forall p : PP, exists s : PP, p <> s.

Axiom
  fresh_and_different :
    forall (p : PP) (P : proc), exists r : PP, fresh r P /\ p <> r.

Axiom
  fresh_and_two_different :
    forall (p q : PP) (P : proc),
    exists r : PP, fresh r P /\ p <> r /\ q <> r.

Axiom
  fresh_and_three_different :
    forall (p q r : PP) (P : proc),
    exists s : PP, fresh s P /\ p <> s /\ q <> s /\ r <> s. *)

Require Import fresh.
(* fresh:
Require Import processus.
Require Import induc.

Theorem freshname_is :
 forall (p : PP) (n : name), freshname p n -> n <> pname p.

Theorem freshvarname_is :
 forall (x : VV) (n : name), freshvarname x n -> n <> vname x.

Theorem fresh_after_subs_name :
 forall (p q : PP) (x : VV) (n : name),
 p <> q -> freshname p n -> freshname p (subs_var_name n (pname q) x).

Theorem fresh_after_subs :
 forall (p q : PP) (x : VV) (P : proc),
 p <> q -> fresh p P -> fresh p (subs_var_proc P (pname q) x).

Theorem fresh_after_subs_par_name :
 forall (p q r : PP) (n : name),
 r <> p -> freshname r n -> freshname r (subs_par_name n (pname p) q).

Theorem fresh_after_subs_par :
 forall (p q r : PP) (P : proc),
 r <> p -> fresh r P -> fresh r (subs_par_proc P (pname p) q).

Theorem fresh_after_subs_by_var_name :
 forall (n : name) (p q : PP) (x : VV),
 freshname p n -> freshname p (subs_par_name n (vname x) q).

Theorem fresh_after_subs_by_var :
 forall (P : proc) (p q : PP) (x : VV),
 fresh p P -> fresh p (subs_par_proc P (vname x) q).
 
Theorem fresh_before_subs_name :
 forall (p q : PP) (x : VV) (n : name),
 freshname p (subs_var_name n (pname q) x) -> freshname p n.

Theorem fresh_before_subs :
 forall (p q : PP) (x : VV) (P : proc),
 fresh p (subs_var_proc P (pname q) x) -> fresh p P.

Theorem out_known_name :
 forall (P P' : proc) (p q : PP), sem P (aout p q) P' -> ~ fresh q P.

Theorem inp_on_known_name :
 forall (P P' : proc) (p q : PP), sem P (ainp p q) P' -> ~ fresh p P.

Theorem fresh_masked_by_var_name :
 forall (n : name) (p : PP) (x : VV),
 freshname p (subs_par_name n (vname x) p).

Theorem fresh_masked_by_var :
 forall (P : proc) (p : PP) (x : VV), fresh p (subs_par_proc P (vname x) p).

Theorem fresh_after_trans :
 forall (P P' : proc) (mu : act),
 sem P mu P' -> forall q : PP, fresh q P -> freshact q mu -> fresh q P'.

Theorem fresh_mask_name :
 forall (n : name) (p q : PP),
 p <> q -> freshname q (subs_par_name n (pname p) q).

Theorem fresh_mask :
 forall (P : proc) (p q : PP),
 p <> q -> fresh q (subs_par_proc P (pname p) q). *)



Theorem subs_fresh_par_name :

 forall (n m : name) (p : PP), n <> pname p -> subs_par_name n m p = n.

Proof.

intro n; case n.

intros; simpl in |- *.

case (PP_decidable p0 p).

intro foo; rewrite foo in H; elim H; reflexivity.

intro; reflexivity.

intros.

simpl in |- *.

reflexivity.

Qed.



Theorem subs_fresh_par :

 forall (P : proc) (n : name) (p : PP), fresh p P -> subs_par_proc P n p = P.

Proof.

simple induction P.

intros; simpl in |- *; reflexivity.

intros.

inversion_clear H0.

simpl in |- *.

cut (subs_par_name n n0 p0 = n).

intro foo; rewrite foo.

cut (subs_par_proc p n0 p0 = p).

intro bar; rewrite bar; reflexivity.

apply H.

assumption.

apply subs_fresh_par_name.

apply freshname_is; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut (subs_par_name n n1 p0 = n).

intro foo; rewrite foo.

cut (subs_par_name n0 n1 p0 = n0).

intro bar; rewrite bar.

cut (subs_par_proc p n1 p0 = p).

intro joe; rewrite joe; reflexivity.

apply H.

assumption.

apply subs_fresh_par_name.

apply freshname_is.

assumption.

apply subs_fresh_par_name.

apply freshname_is; assumption.

intros.

inversion_clear H1.

simpl in |- *.

cut (subs_par_proc p n p1 = p).

intro foo; rewrite foo.

cut (subs_par_proc p0 n p1 = p0).

intro bar; rewrite bar.

reflexivity.

apply H0.

assumption.

apply H.

assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut (subs_par_proc p n p0 = p).

intro foo; rewrite foo; reflexivity.

apply H.

assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut (subs_par_proc p n p0 = p).

intro foo; rewrite foo.

reflexivity.

apply H.

assumption.

intros.

inversion_clear H1.

simpl in |- *.

cut (subs_par_proc p n p1 = p).

intros foo; rewrite foo.

cut (subs_par_proc p0 n p1 = p0).

intro bar; rewrite bar.

reflexivity.

apply H0; assumption.

apply H; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut (subs_par_name n n1 p0 = n).

intro foo; rewrite foo.

cut (subs_par_name n0 n1 p0 = n0).

intro bar; rewrite bar.

cut (subs_par_proc p n1 p0 = p).

intro joe; rewrite joe.

reflexivity.

apply H.

assumption.

apply subs_fresh_par_name.

apply freshname_is; assumption.

apply subs_fresh_par_name.

apply freshname_is; assumption.

Qed.



Theorem subs_par_after_subs_var_name :

 forall (n : name) (p q : PP) (x : VV),

 n <> pname q ->

 subs_par_name (subs_var_name n (pname q) x) (pname p) q =

 subs_var_name n (pname p) x.

Proof.

intro n.

case n.

intros.

simpl in |- *.

case (PP_decidable q p).

intro foo; rewrite foo in H; elim H; reflexivity.

intro; reflexivity.

intros; simpl in |- *.

case (VV_decidable x v).

intro foo; simpl in |- *.

case (PP_decidable q q).

intro ok; reflexivity.

intro absurd; elim absurd; reflexivity.

intro; simpl in |- *.

reflexivity.

Qed.



Theorem subs_par_after_subs_var :

 forall (P : proc) (p q : PP) (x : VV),

 fresh q P ->

 subs_par_proc (subs_var_proc P (pname q) x) (pname p) q =

 subs_var_proc P (pname p) x.

Proof.

simple induction P.

intros.

simpl in |- *; reflexivity.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_par_name (subs_var_name n (pname q) x) (pname p0) q =

  subs_var_name n (pname p0) x).

intro foo; rewrite foo.

case (VV_decidable x v).

intro.

cut (subs_par_proc p (pname p0) q = p).

intro bar; rewrite bar.

reflexivity.

apply subs_fresh_par.

assumption.

intros.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p0) q =

  subs_var_proc p (pname p0) x).

intro bar; rewrite bar.

reflexivity.

apply H.

assumption.

apply subs_par_after_subs_var_name.

apply freshname_is; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_par_name (subs_var_name n (pname q) x) (pname p0) q =

  subs_var_name n (pname p0) x).

intro foo; rewrite foo.

cut

 (subs_par_name (subs_var_name n0 (pname q) x) (pname p0) q =

  subs_var_name n0 (pname p0) x).

intro bar; rewrite bar.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p0) q =

  subs_var_proc p (pname p0) x).

intro joe; rewrite joe.

reflexivity.

apply H.

assumption.

apply subs_par_after_subs_var_name.

apply freshname_is; assumption.

apply subs_par_after_subs_var_name.

apply freshname_is; assumption.

intros.

inversion_clear H1.

simpl in |- *.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p1) q =

  subs_var_proc p (pname p1) x).

intro foo; rewrite foo.

cut

 (subs_par_proc (subs_var_proc p0 (pname q) x) (pname p1) q =

  subs_var_proc p0 (pname p1) x).

intro bar; rewrite bar.

reflexivity.

apply H0.

assumption.

apply H; assumption.

intros.

inversion_clear H0.

simpl in |- *.

case (VV_decidable x v).

intro.

cut (subs_par_proc p (pname p0) q = p).

intro foo; rewrite foo.

reflexivity.

apply subs_fresh_par.

assumption.

intros.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p0) q =

  subs_var_proc p (pname p0) x).

intro foo; rewrite foo.

reflexivity.

apply H.

assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p0) q =

  subs_var_proc p (pname p0) x).

intro foo; rewrite foo.

reflexivity.

apply H.

assumption.

intros.

inversion_clear H1.

simpl in |- *.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p1) q =

  subs_var_proc p (pname p1) x).

intro foo; rewrite foo.

cut

 (subs_par_proc (subs_var_proc p0 (pname q) x) (pname p1) q =

  subs_var_proc p0 (pname p1) x).

intro bar; rewrite bar.

reflexivity.

apply H0.

assumption.

apply H; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_par_name (subs_var_name n (pname q) x) (pname p0) q =

  subs_var_name n (pname p0) x).

intro foo; rewrite foo.

cut

 (subs_par_name (subs_var_name n0 (pname q) x) (pname p0) q =

  subs_var_name n0 (pname p0) x).

intro bar; rewrite bar.

cut

 (subs_par_proc (subs_var_proc p (pname q) x) (pname p0) q =

  subs_var_proc p (pname p0) x).

intro joe; rewrite joe.

reflexivity.

apply H; assumption.

apply subs_par_after_subs_var_name.

apply freshname_is; assumption.

apply subs_par_after_subs_var_name.

apply freshname_is; assumption.

Qed.



Theorem subs_var_after_subs_par_name :

 forall (n : name) (p q : PP) (x : VV),

 n <> vname x ->

 subs_var_name (subs_par_name n (vname x) p) (pname q) x =

 subs_par_name n (pname q) p.

Proof.

intro n.

case n.

intros.

simpl in |- *.

case (PP_decidable p0 p).

intro; simpl in |- *.

case (VV_decidable x x).

intro ok; reflexivity.

intro absurd; elim absurd; reflexivity.

intro; simpl in |- *.

reflexivity.

intros; simpl in |- *.

case (VV_decidable x v).

intro absurd; rewrite absurd in H.

elim H; reflexivity.

intro; reflexivity.

Qed.



Theorem subs_var_after_subs_par :

 forall (P : proc) (p q : PP) (x : VV),

 freshvar x P ->

 subs_var_proc (subs_par_proc P (vname x) p) (pname q) x =

 subs_par_proc P (pname q) p.

Proof.

simple induction P.

intros; simpl in |- *; reflexivity.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_var_name (subs_par_name n (vname x) p0) (pname q) x =

  subs_par_name n (pname q) p0).

intro foo; rewrite foo.

case (VV_decidable x v).

intro eq; simpl in |- *.

elim H2; assumption.

intro neq.

cut

 (subs_var_proc (subs_par_proc p (vname x) p0) (pname q) x =

  subs_par_proc p (pname q) p0).

intro bar; rewrite bar.

reflexivity.

apply H; assumption.

apply subs_var_after_subs_par_name.

apply freshvarname_is; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_var_name (subs_par_name n (vname x) p0) (pname q) x =

  subs_par_name n (pname q) p0).

intro foo; rewrite foo.

cut

 (subs_var_name (subs_par_name n0 (vname x) p0) (pname q) x =

  subs_par_name n0 (pname q) p0).

intro bar; rewrite bar.

cut

 (subs_var_proc (subs_par_proc p (vname x) p0) (pname q) x =

  subs_par_proc p (pname q) p0).

intro joe; rewrite joe.

reflexivity.

apply H; assumption.

apply subs_var_after_subs_par_name.

apply freshvarname_is; assumption.

apply subs_var_after_subs_par_name; apply freshvarname_is; assumption.

intros.

inversion_clear H1; simpl in |- *.

cut

 (subs_var_proc (subs_par_proc p (vname x) p1) (pname q) x =

  subs_par_proc p (pname q) p1).

intro foo; rewrite foo.

cut

 (subs_var_proc (subs_par_proc p0 (vname x) p1) (pname q) x =

  subs_par_proc p0 (pname q) p1).

intro bar; rewrite bar.

reflexivity.

apply H0; assumption.

apply H; assumption.

intros.

inversion_clear H0.

simpl in |- *.

case (VV_decidable x v).

intro absurd; elim H1; assumption.

intro neq.

cut

 (subs_var_proc (subs_par_proc p (vname x) p0) (pname q) x =

  subs_par_proc p (pname q) p0).

intro foo; rewrite foo.

reflexivity.

apply H; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_var_proc (subs_par_proc p (vname x) p0) (pname q) x =

  subs_par_proc p (pname q) p0).

intro foo; rewrite foo.

reflexivity.

apply H; assumption.

intros.

inversion_clear H1.

simpl in |- *.

cut

 (subs_var_proc (subs_par_proc p (vname x) p1) (pname q) x =

  subs_par_proc p (pname q) p1).

intro foo; rewrite foo.

cut

 (subs_var_proc (subs_par_proc p0 (vname x) p1) (pname q) x =

  subs_par_proc p0 (pname q) p1).

intro bar; rewrite bar; reflexivity.

apply H0; assumption.

apply H; assumption.

intros.

inversion_clear H0.

simpl in |- *.

cut

 (subs_var_name (subs_par_name n (vname x) p0) (pname q) x =

  subs_par_name n (pname q) p0).

intro foo; rewrite foo.

cut

 (subs_var_name (subs_par_name n0 (vname x) p0) (pname q) x =

  subs_par_name n0 (pname q) p0).

intro bar; rewrite bar.

cut

 (subs_var_proc (subs_par_proc p (vname x) p0) (pname q) x =

  subs_par_proc p (pname q) p0).

intro joe; rewrite joe.

reflexivity.

apply H; assumption.

apply subs_var_after_subs_par_name; apply freshvarname_is; assumption.

apply subs_var_after_subs_par_name; apply freshvarname_is; assumption.

Qed.



Theorem inefficient_subs_par_name :

 forall (n : name) (p : PP), subs_par_name n (pname p) p = n.

Proof.

intro n; case n.

intros p q.

simpl in |- *.

case (PP_decidable q p).

intro same; rewrite same; reflexivity.

intro; reflexivity.

intros; simpl in |- *.

reflexivity.

Qed.



Theorem inefficient_subs_par :

 forall (P : proc) (p : PP), subs_par_proc P (pname p) p = P.

Proof.

simple induction P.

intro p; simpl in |- *; reflexivity.

intros n v p hyprec.

intros q; simpl in |- *.

cut (subs_par_name n (pname q) q = n).

intro same; rewrite same.

cut (subs_par_proc p (pname q) q = p).

intro sameagain; rewrite sameagain.

reflexivity.

apply hyprec.

apply inefficient_subs_par_name.

intros n m p hyprec q; simpl in |- *.

cut (subs_par_name n (pname q) q = n).

intro foo; rewrite foo.

cut (subs_par_name m (pname q) q = m).

intro bar; rewrite bar.

cut (subs_par_proc p (pname q) q = p).

intro joe; rewrite joe.

reflexivity.

apply hyprec.

apply inefficient_subs_par_name.

apply inefficient_subs_par_name.

intros Q hyprec R hyprec2 q.

simpl in |- *.

cut (subs_par_proc Q (pname q) q = Q).

intro foo; rewrite foo.

cut (subs_par_proc R (pname q) q = R).

intro bar; rewrite bar.

reflexivity.

apply hyprec2.

apply hyprec.

intros.

simpl in |- *.

cut (subs_par_proc p (pname p0) p0 = p).

intro foo; rewrite foo; reflexivity.

apply H.

intros.

simpl in |- *.

cut (subs_par_proc p (pname p0) p0 = p).

intro foo; rewrite foo.

reflexivity.

apply H.

intros.

simpl in |- *.

cut (subs_par_proc p (pname p1) p1 = p).

intro foo; rewrite foo.

cut (subs_par_proc p0 (pname p1) p1 = p0).

intro bar; rewrite bar.

reflexivity.

apply H0.

apply H.

intros.

simpl in |- *.

cut (subs_par_name n (pname p0) p0 = n).

intro foo; rewrite foo.

cut (subs_par_name n0 (pname p0) p0 = n0).

intro bar; rewrite bar.

cut (subs_par_proc p (pname p0) p0 = p).

intro joe; rewrite joe.

reflexivity.

apply H.

apply inefficient_subs_par_name.

apply inefficient_subs_par_name.

Qed.



Theorem switch_subs_name :

 forall (n n1 n2 : name) (p : PP) (x : VV),

 pname p <> n1 ->

 vname x <> n2 ->

 subs_var_name (subs_par_name n n2 p) n1 x =

 subs_par_name (subs_var_name n n1 x) n2 p.

Proof.

intros n n1 n2.

case n.

intros p q.

intro x.

case n1.

intros r q_not_r.

case n2.

intros s triv.

simpl in |- *.

case (PP_decidable q p).

intro eg.

unfold subs_var_name in |- *.

reflexivity.

intro q_not_p.

unfold subs_var_name in |- *.

reflexivity.

intros v x_not_v.

simpl in |- *.

case (PP_decidable q p).

intro eg.

unfold subs_var_name in |- *.

case (VV_decidable x v).

intro absurd; rewrite absurd in x_not_v; elim x_not_v; reflexivity.

intro; reflexivity.

intro q_not_p; unfold subs_var_name in |- *.

reflexivity.

intros v triv.

case n2.

intros r triv0.

simpl in |- *.

case (PP_decidable q p).

intro q_is_p.

unfold subs_var_name in |- *.

reflexivity.

intros q_not_p.

unfold subs_var_name in |- *.

reflexivity.

intros w x_not_w.

simpl in |- *.

case (PP_decidable q p).

intro; unfold subs_var_name in |- *.

case (VV_decidable x w).

intro x_w.

rewrite x_w in x_not_w; elim x_not_w; reflexivity.

intros; reflexivity.

intros; unfold subs_var_name in |- *.

reflexivity.

intros v p x.

case n1.

intros q p_not_q.

case n2.

intros r triv; simpl in |- *.

case (VV_decidable x v).

intros x_v; unfold subs_par_name in |- *.

case (PP_decidable p q).

intros p_q; rewrite p_q in p_not_q; elim p_not_q; reflexivity.

intros; reflexivity.

intros; unfold subs_par_name in |- *.

reflexivity.

intros w x_not_w; simpl in |- *.

case (VV_decidable x v).

intros x_v; unfold subs_par_name in |- *.

case (PP_decidable p q).

intros p_q; rewrite p_q in p_not_q; elim p_not_q; reflexivity.

intros; reflexivity.

intros x_not_v; unfold subs_par_name in |- *.

reflexivity.

intros w triv.

case n2.

intros q x_not_q; simpl in |- *.

case (VV_decidable x v).

intros x_v; unfold subs_par_name in |- *.

reflexivity.

intros x_not_v; unfold subs_par_name in |- *.

reflexivity.

intros z x_not_z; simpl in |- *.

case (VV_decidable x v).

intros x_v; unfold subs_par_name in |- *.

reflexivity.

intros x_not_v; unfold subs_par_name in |- *; reflexivity.

Qed.



Theorem switch_subs :

 forall (P : proc) (n1 n2 : name) (p : PP) (x : VV),

 pname p <> n1 ->

 vname x <> n2 ->

 subs_var_proc (subs_par_proc P n2 p) n1 x =

 subs_par_proc (subs_var_proc P n1 x) n2 p.

Proof.

simple induction P.

intros; simpl in |- *.

reflexivity.

intros n v Q hr n1 n2 p x h1 h2.

simpl in |- *.

cut

 (subs_var_proc (subs_par_proc Q n2 p) n1 x =

  subs_par_proc (subs_var_proc Q n1 x) n2 p).

intros same; rewrite same.

cut

 (subs_var_name (subs_par_name n n2 p) n1 x =

  subs_par_name (subs_var_name n n1 x) n2 p).

intros same2; rewrite same2.

case (VV_decidable x v).

intros x_v.

reflexivity.

intros x_not_v.

reflexivity.

apply switch_subs_name; assumption.

apply hr; assumption.

intros n1 n2 Q hr m1 m2 R x h1 h2.

simpl in |- *.

cut

 (subs_var_name (subs_par_name n1 m2 R) m1 x =

  subs_par_name (subs_var_name n1 m1 x) m2 R).

intros same; rewrite same.

cut

 (subs_var_name (subs_par_name n2 m2 R) m1 x =

  subs_par_name (subs_var_name n2 m1 x) m2 R).

intros same2; rewrite same2.

cut

 (subs_var_proc (subs_par_proc Q m2 R) m1 x =

  subs_par_proc (subs_var_proc Q m1 x) m2 R).

intros same3; rewrite same3; reflexivity.

apply hr; assumption.

apply switch_subs_name; assumption.

apply switch_subs_name; assumption.

intros Q hrQ R hrR n1 n2 p x h1 h2.

simpl in |- *.

cut

 (subs_var_proc (subs_par_proc Q n2 p) n1 x =

  subs_par_proc (subs_var_proc Q n1 x) n2 p).

intros same; rewrite same.

cut

 (subs_var_proc (subs_par_proc R n2 p) n1 x =

  subs_par_proc (subs_var_proc R n1 x) n2 p).

intros same2; rewrite same2.

reflexivity.

apply hrR; assumption.

apply hrQ; assumption.

intros v t Q hr n1 n2 p x h1 h2.

simpl in |- *.

cut

 (subs_var_proc (subs_par_proc Q n2 p) n1 x =

  subs_par_proc (subs_var_proc Q n1 x) n2 p).

intros same; rewrite same.

case (VV_decidable x v).

intros x_v; reflexivity.

intros x_not_v; reflexivity.

apply hr; assumption.

intros P0 hr n1 n2 p x h1 h2; simpl in |- *.

cut

 (subs_var_proc (subs_par_proc P0 n2 p) n1 x =

  subs_par_proc (subs_var_proc P0 n1 x) n2 p).

intros same; rewrite same; reflexivity.

apply hr; assumption.

intros Q hrQ R hrR n1 n2 p x h1 h2; simpl in |- *.

cut

 (subs_var_proc (subs_par_proc Q n2 p) n1 x =

  subs_par_proc (subs_var_proc Q n1 x) n2 p).

intros same; rewrite same.

cut

 (subs_var_proc (subs_par_proc R n2 p) n1 x =

  subs_par_proc (subs_var_proc R n1 x) n2 p).

intros same2; rewrite same2.

reflexivity.

apply hrR; assumption.

apply hrQ; assumption.

intros n1 n2 P0 hr m1 m2 p x h1 h2.

simpl in |- *.

cut

 (subs_var_name (subs_par_name n1 m2 p) m1 x =

  subs_par_name (subs_var_name n1 m1 x) m2 p).

intros same; rewrite same.

cut

 (subs_var_name (subs_par_name n2 m2 p) m1 x =

  subs_par_name (subs_var_name n2 m1 x) m2 p).

intros same2; rewrite same2.

cut

 (subs_var_proc (subs_par_proc P0 m2 p) m1 x =

  subs_par_proc (subs_var_proc P0 m1 x) m2 p).

intros same3; rewrite same3.

reflexivity.

apply hr; assumption.

apply switch_subs_name; assumption.

apply switch_subs_name; assumption.

Qed.
