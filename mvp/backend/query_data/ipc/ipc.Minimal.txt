
Require Export Forces_Gamma.
(* Forces_Gamma:
Require Export In_Gamma.
Require Export Forces_NGamma.

Definition forces_gamma (gamma : flist) (work : nf_list) 
  (k : kripke_tree) := forall a : form, in_gamma gamma work a -> forces_t k a.

Lemma forces_gamma_cons_gamma :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a : form),
 forces_t k a ->
 forces_gamma gamma work k -> forces_gamma (a :: gamma) work k.

Lemma forces_gamma_cons_gamma_tail :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a : form),
 forces_gamma (a :: gamma) work k -> forces_gamma gamma work k.

Lemma forces_gamma_cons_gamma_head :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a : form),
 forces_gamma (a :: gamma) work k -> forces_t k a.

Lemma forces_gamma_shift_gamma_work :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (k : kripke_tree),
 forces_gamma (nf2form a :: gamma) work k -> forces_gamma gamma (a :: work) k.

Lemma forces_gamma_shift_work_gamma :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (k : kripke_tree),
 forces_gamma gamma (a :: work) k -> forces_gamma (nf2form a :: gamma) work k.

Lemma forces_gamma_cons_gamma_weak :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a b : form),
 (forces_t k a -> forces_t k b) ->
 forces_gamma (a :: gamma) work k -> forces_gamma (b :: gamma) work k.

Lemma forces_gamma_cons_gamma_weak2 :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a b c : form),
 (forces_t k a -> forces_t k b -> forces_t k c) ->
 forces_gamma (a :: b :: gamma) work k -> forces_gamma (c :: gamma) work k. *)
Require Export Derivable_Tools.
(* Derivable_Tools:
Require Export Derivable_Def.

Lemma derivable_eq :
 forall (context context' : flist) (a a' : form),
 context = context' -> a = a' -> Derivable context a -> Derivable context' a'.

Lemma derivable_subst :
 forall (i : Int) (g : form) (context : flist) (a : form),
 Derivable context a -> Derivable (subst_list i g context) (subst_form i g a).

Lemma snd_order_inst :
 forall (context : flist) (i : Int),
 Derivable context (Atom i) ->
 below_list context i -> forall b : form, Derivable context b.

Lemma derivable_weak :
 forall (context : flist) (a b : form),
 Derivable context a -> Derivable (b :: context) a.

Lemma derivable_weak_list :
 forall (context1 context2 : flist) (a : form),
 Derivable context1 a -> Derivable (context2 ++ context1) a.

Lemma derivable_cut_aux :
 forall (context : flist) (t : proof_term) (b : form),
 derives context t b ->
 forall (a : form) (l1 l2 : flist),
 context = l1 ++ a :: l2 -> Derivable fnil a -> Derivable (l1 ++ l2) b.

Lemma derivable_cut :
 forall (context : flist) (a b : form),
 Derivable fnil a -> Derivable (a :: context) b -> Derivable context b.

Lemma derivable_cut_merge :
 forall (context : flist) (a b : form),
 Derivable context a -> Derivable (a :: context) b -> Derivable context b.

Lemma derivable_a_imp_a : forall a : form, Derivable fnil (Imp a a).

Lemma derivable_a_and_b__derivable_a :
 forall (a b : form) (context : flist),
 Derivable context (AndF a b) -> Derivable context a.

Lemma derivable_a_and_b__derivable_b :
 forall (a b : form) (context : flist),
 Derivable context (AndF a b) -> Derivable context b.

Lemma derivable_falsum_or_a__derivable_a :
 forall (a : form) (context : flist),
 Derivable context (OrF Falsum a) -> Derivable context a.

Lemma derivable_a_or_falsum__derivable_a :
 forall (a : form) (context : flist),
 Derivable context (OrF a Falsum) -> Derivable context a.

Lemma derivable_a_imp_falsum_or_b__derivable_a_imp_b :
 forall (context : flist) (a b : form),
 Derivable context (Imp a (OrF Falsum b)) -> Derivable context (Imp a b).

Lemma derivable_a_imp_b_or_falsum__derivable_a_imp_b :
 forall (context : flist) (a b : form),
 Derivable context (Imp a (OrF b Falsum)) -> Derivable context (Imp a b).

Lemma derivable_a0_and_a1_imp_b__derivable_a0_imp_a1_imp_b :
 forall (a0 a1 b : form) (context : flist),
 Derivable context (Imp (AndF a0 a1) b) ->
 Derivable context (Imp a0 (Imp a1 b)).

Lemma derivable_a0_or_a1_imp_b__derivable_a0_imp_b :
 forall (context : flist) (a0 a1 b : form),
 Derivable context (Imp (OrF a0 a1) b) -> Derivable context (Imp a0 b).

Lemma derivable_a0_or_a1_imp_b__derivable_a1_imp_b :
 forall (context : flist) (a0 a1 b : form),
 Derivable context (Imp (OrF a0 a1) b) -> Derivable context (Imp a1 b).

Lemma derivable_falsum_imp_b_imp_c__derivable_c :
 forall (context : flist) (b c : form),
 Derivable context (Imp (Imp Falsum b) c) -> Derivable context c.

Lemma derivable_b__derivable_a_imp_b :
 forall (a b : form) (context : flist),
 Derivable context b -> Derivable context (Imp a b).

Lemma derivable_a_a_imp_b__derivable_b :
 forall (a b : form) (context : flist),
 Derivable context a -> Derivable context (Imp a b) -> Derivable context b.

Lemma derivable_a_context_b__derivable_a_imp_b :
 forall (a b : form) (context : flist),
 Derivable (a :: context) b -> Derivable context (Imp a b).

Lemma derivable_vimp :
 forall (context : flist) (l : list Int) (a b : form),
 (forall context : flist, Derivable context a -> Derivable context b) ->
 Derivable context (vimp l a) -> Derivable context (vimp l b).

Lemma derivable_vimp2 :
 forall (context : flist) (l : list Int) (a b c : form),
 (forall context : flist,
  Derivable context a -> Derivable context b -> Derivable context c) ->
 Derivable context (vimp l a) ->
 Derivable context (vimp l b) -> Derivable context (vimp l c).

Lemma derivable_vimp0 :
 forall (context : flist) (l : list Int) (a : form),
 (forall context : flist, Derivable context a) ->
 Derivable context (vimp l a). *)

Definition minimal (gamma : flist) (work : nf_list) 
  (context : flist) :=
  forall (a : form) (k : kripke_tree),
  Is_Monotone_kripke_tree k ->
  forces_gamma gamma work k -> In a context -> forces_t k a.

Lemma minimal_derivable_forces :
 forall (gamma : flist) (work : nf_list) (context : flist) (k : kripke_tree),
 Is_Monotone_kripke_tree k ->
 forces_gamma gamma work k ->
 minimal gamma work context ->
 forall a : form, Derivable context a -> forces_t k a.
intros gamma work context k k_is_mon k_forces_gamma minimal0 a der_a.
elim der_a; clear der_a.
intros t der_t.
apply soundness_t with t context; try assumption.
intros c in_c.
apply minimal0; assumption.
Qed.

Lemma minimal_shift_gamma_work :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (context : flist),
 minimal (nf2form a :: gamma) work context ->
 minimal gamma (a :: work) context.
intros a gamma work context minimal0.
unfold minimal in |- *.
intros b k k_is_mon k_forces_gamma in_b.
apply minimal0; try assumption.
apply forces_gamma_shift_work_gamma; assumption.
Qed.

Lemma minimal_shift_work_gamma :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (context : flist),
 minimal gamma (a :: work) context ->
 minimal (nf2form a :: gamma) work context.
intros a gamma work context minimal0.
unfold minimal in |- *.
intros b k k_is_mon k_forces_gamma in_b.
apply minimal0; try assumption.
apply forces_gamma_shift_gamma_work; assumption.
Qed.

Lemma minimal_cons_gamma_cons_context :
 forall (gamma : flist) (work : nf_list) (context : flist) (a : form),
 minimal gamma work context -> minimal (a :: gamma) work (a :: context).
intros gamma work context a minimal0.
unfold minimal in |- *.
intros b k k_is_mon k_forces_gamma in_b.
inversion_clear in_b.
apply k_forces_gamma.
 rewrite H.
apply in_gamma_cons_gamma_head.
apply minimal0.
assumption.
apply forces_gamma_cons_gamma_tail with a; assumption.
assumption.
Qed.

Lemma minimal_cons_gamma_weak :
 forall (gamma : flist) (work : nf_list) (context : flist) (a b : form),
 (forall k : kripke_tree,
  Is_Monotone_kripke_tree k -> forces_t k b -> forces_t k a) ->
 minimal (a :: gamma) work context -> minimal (b :: gamma) work context.
intros gamma work context a b forces_ba minimal0.
unfold minimal in |- *.
intros c k k_is_mon k_forces_gamma in_c.
apply minimal0; try assumption.
apply forces_gamma_cons_gamma_weak with b; try assumption.
intros; apply forces_ba; assumption.
Qed.

Lemma minimal_cons_gamma_weak2 :
 forall (gamma : flist) (work : nf_list) (context : flist) (a b c : form),
 (forall k : kripke_tree,
  Is_Monotone_kripke_tree k -> forces_t k b -> forces_t k c -> forces_t k a) ->
 minimal (a :: gamma) work context -> minimal (b :: c :: gamma) work context.
intros gamma work context a b c forces_bca minimal0.
unfold minimal in |- *.
intros d k k_is_mon k_forces_gamma in_d.
apply minimal0; try assumption.
apply forces_gamma_cons_gamma_weak2 with b c; try assumption.
intros; apply forces_bca; assumption.
Qed.

