
Require Export In_Gamma.
(* In_Gamma:
Require Export In_NGamma.

Inductive in_gamma (gamma : flist) (work : nf_list) : form -> Set :=
  | In_Gamma :
      forall (n : nat) (a : form),
      my_nth form n gamma a -> in_gamma gamma work a
  | In_Work1 :
      forall (n : nat) (a : normal_form),
      my_nth normal_form n work a -> in_gamma gamma work (nf2form a).

Lemma in_gamma_cons_gamma_tail :
 forall (a : form) (gamma : flist) (work : nf_list) (c : form),
 in_gamma gamma work c -> in_gamma (a :: gamma) work c.

Lemma in_gamma_cons_gamma_head :
 forall (a : form) (gamma : flist) (work : nf_list),
 in_gamma (a :: gamma) work a.

Lemma in_gamma_cons_gamma_rev :
 forall (a : form) (gamma : flist) (work : nf_list) (c : form),
 in_gamma (a :: gamma) work c -> in_gamma gamma work c + {c = a}.

Lemma in_gamma_cons_work_tail :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (c : form),
 in_gamma gamma work c -> in_gamma gamma (a :: work) c.

Lemma in_gamma_cons_work_head :
 forall (a : normal_form) (gamma : flist) (work : nf_list),
 in_gamma gamma (a :: work) (nf2form a).

Lemma in_gamma_cons_work_rev :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (c : form),
 in_gamma gamma (a :: work) c -> in_gamma gamma work c + {c = nf2form a}.

Lemma in_gamma_shift_gamma_work :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (c : form),
 in_gamma (nf2form a :: gamma) work c -> in_gamma gamma (a :: work) c.

Lemma in_gamma_shift_work_gamma :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (c : form),
 in_gamma gamma (a :: work) c -> in_gamma (nf2form a :: gamma) work c. *)
Require Export Forces_NGamma.
(* Forces_NGamma:
Require Export Le_Ks.

Definition forces_ngamma (work : nf_list) (ds : disjs) 
  (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
  (k : kripke_tree) :=
  forall c : normal_form,
  in_ngamma work ds ni ai a c -> forces_t k (nf2form c).

Lemma forces_ngamma_cons_work :
 forall (c : normal_form) (work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_t k (nf2form c) ->
 forces_ngamma work ds ni ai a k -> forces_ngamma (c :: work) ds ni ai a k.

Lemma forces_ngamma_cons_work_tail :
 forall (c : normal_form) (work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_ngamma (c :: work) ds ni ai a k -> forces_ngamma work ds ni ai a k.

Remark forces_ngamma_app_work :
 forall (bs work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a : atoms) (k : kripke_tree),
 (forall (n : nat) (b : normal_form),
  my_nth normal_form n bs b -> forces_t k (nf2form b)) ->
 forces_ngamma work ds ni ai a k -> forces_ngamma (bs ++ work) ds ni ai a k.

Lemma forces_ngamma_app_work_tail :
 forall (bs work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a : atoms) (k : kripke_tree),
 forces_ngamma (bs ++ work) ds ni ai a k -> forces_ngamma work ds ni ai a k.

Lemma forces_ngamma_cons_ds_tail :
 forall (work : nf_list) (i j : Int) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a : atoms) (k : kripke_tree),
 forces_ngamma work ((i, j) :: ds) ni ai a k ->
 forces_ngamma work ds ni ai a k.

Lemma forces_ngamma_cons_ni_tail :
 forall (work : nf_list) (ds : disjs) (x : nested_imp) 
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_ngamma work ds (x :: ni) ai a k -> forces_ngamma work ds ni ai a k.

Remark forces_ngamma_del_ai :
 forall (i : Int) (work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai ai' : atomic_imps) (a : atoms) (k : kripke_tree),
 EQUIV_DEL nf_list i ai ai' ->
 forces_ngamma work ds ni ai a k -> forces_ngamma work ds ni ai' a k.

Lemma forces_ngamma_del_ai_rev :
 forall (i : Int) (bs work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai ai' : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 LOOKUP nf_list i ai bs ->
 (forall (n : nat) (b : normal_form),
  my_nth normal_form n bs b -> forces_t k (nf2form (AImp i b))) ->
 EQUIV_DEL nf_list i ai ai' ->
 forces_ngamma work ds ni ai' a k -> forces_ngamma work ds ni ai a k.

Lemma forces_ngamma_eqv :
 forall (ni1 ni2 : nested_imps) (work : nf_list) (ds : disjs)
   (ai : atomic_imps) (a : atoms) (k : kripke_tree),
 eqv_ni ni1 ni2 ->
 forces_ngamma work ds ni2 ai a k -> forces_ngamma work ds ni1 ai a k.

Lemma forces_ngamma_shift_ds_work :
 forall (i j : Int) (work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a : atoms) (k : kripke_tree),
 forces_ngamma work ((i, j) :: ds) ni ai a k ->
 forces_ngamma (NDisj i j :: work) ds ni ai a k.

Lemma forces_ngamma_shift_work_ds :
 forall (i j : Int) (work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a : atoms) (k : kripke_tree),
 forces_ngamma (NDisj i j :: work) ds ni ai a k ->
 forces_ngamma work ((i, j) :: ds) ni ai a k.

Lemma forces_ngamma_shift_ni_work :
 forall (x : nested_imp) (work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_ngamma work ds (x :: ni) ai a k ->
 forces_ngamma (NImp_NF (nested_imp2nimp x) :: work) ds ni ai a k.

Lemma forces_ngamma_shift_work_ni :
 forall (x : nested_imp) (work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_ngamma (NImp_NF (nested_imp2nimp x) :: work) ds ni ai a k ->
 forces_ngamma work ds (x :: ni) ai a k.

Lemma forces_ngamma_shift_ai_work_new :
 forall (i : Int) (b : normal_form) (work : nf_list) 
   (ds : disjs) (ni : nested_imps) (ai ai' : atomic_imps) 
   (a : atoms) (k : kripke_tree),
 (forall bs : nf_list, LOOKUP nf_list i ai bs -> False) ->
 EQUIV_INS nf_list i (cons b) nf_nil ai ai' ->
 forces_ngamma work ds ni ai' a k ->
 forces_ngamma (AImp i b :: work) ds ni ai a k.

Lemma forces_ngamma_shift_ai_work_old :
 forall (i : Int) (b : normal_form) (work : nf_list) 
   (ds : disjs) (ni : nested_imps) (bs : nf_list) (ai ai' : atomic_imps)
   (a : atoms) (k : kripke_tree),
 LOOKUP nf_list i ai bs ->
 EQUIV_INS nf_list i (cons b) nf_nil ai ai' ->
 forces_ngamma work ds ni ai' a k ->
 forces_ngamma (AImp i b :: work) ds ni ai a k.

Lemma forces_ngamma_shift_work_ai :
 forall (i : Int) (b : normal_form) (work : nf_list) 
   (ds : disjs) (ni : nested_imps) (ai ai' : atomic_imps) 
   (a : atoms) (k : kripke_tree),
 EQUIV_INS nf_list i (cons b) nf_nil ai ai' ->
 forces_ngamma (AImp i b :: work) ds ni ai a k ->
 forces_ngamma work ds ni ai' a k.

Lemma forces_ngamma_shift_a_work :
 forall (i : Int) (work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a a' : atoms) (k : kripke_tree),
 EQUIV_INS unit i (fun _ : unit => tt) tt a a' ->
 forces_ngamma work ds ni ai a' k ->
 forces_ngamma (NAtom i :: work) ds ni ai a k.

Lemma forces_ngamma_shift_work_a :
 forall (i : Int) (work : nf_list) (ds : disjs) (ni : nested_imps)
   (ai : atomic_imps) (a a' : atoms) (k : kripke_tree),
 EQUIV_INS unit i (fun _ : unit => tt) tt a a' ->
 forces_ngamma (NAtom i :: work) ds ni ai a k ->
 forces_ngamma work ds ni ai a' k.

Lemma forces_ngamma_shift_work_ni_x_ni :
 forall (x : nested_imp) (work : nf_list) (ds : disjs)
   (ni1 ni2 : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_ngamma (NImp_NF (nested_imp2nimp x) :: work) ds (ni1 ++ ni2) ai a k ->
 forces_ngamma work ds (ni1 ++ x :: ni2) ai a k.

Lemma forces_ngamma_shift_ni_x_ni_work :
 forall (x : nested_imp) (work : nf_list) (ds : disjs)
   (ni1 ni2 : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 forces_ngamma work ds (ni1 ++ x :: ni2) ai a k ->
 forces_ngamma (NImp_NF (nested_imp2nimp x) :: work) ds (ni1 ++ ni2) ai a k.

Lemma forces_ngamma_cons_work_weak :
 forall (b c : normal_form) (work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 Is_Monotone_kripke_tree k ->
 (forces_t k (nf2form b) -> forces_t k (nf2form c)) ->
 forces_ngamma (b :: work) ds ni ai a k ->
 forces_ngamma (c :: work) ds ni ai a k.

Lemma forces_ngamma_cons_work_weak2 :
 forall (b c d : normal_form) (work : nf_list) (ds : disjs)
   (ni : nested_imps) (ai : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 Is_Monotone_kripke_tree k ->
 (forces_t k (nf2form b) -> forces_t k (nf2form c) -> forces_t k (nf2form d)) ->
 forces_ngamma (b :: c :: work) ds ni ai a k ->
 forces_ngamma (d :: work) ds ni ai a k.
 
Lemma forces_ngamma_shift_work_ai_weak :
 forall (i : Int) (bs work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai ai' : atomic_imps) (a : atoms) 
   (k : kripke_tree),
 Is_Monotone_kripke_tree k ->
 LOOKUP nf_list i ai bs ->
 EQUIV_DEL nf_list i ai ai' ->
 forces_ngamma (bs ++ work) ds ni ai' a k -> forces_ngamma work ds ni ai a k.

Lemma forces_ngamma_shift_work_ai_strength :
 forall (i : Int) (bs work : nf_list) (ds : disjs) 
   (ni : nested_imps) (ai ai' : atomic_imps) (a a' : atoms) 
   (k : kripke_tree),
 Is_Monotone_kripke_tree k ->
 EQUIV_INS unit i (fun _ : unit => tt) tt a a' ->
 LOOKUP nf_list i ai bs ->
 EQUIV_DEL nf_list i ai ai' ->
 forces_ngamma work ds ni ai a' k ->
 forces_ngamma (bs ++ work) ds ni ai' a' k. *)

Definition forces_gamma (gamma : flist) (work : nf_list) 
  (k : kripke_tree) := forall a : form, in_gamma gamma work a -> forces_t k a.

Lemma forces_gamma_cons_gamma :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a : form),
 forces_t k a ->
 forces_gamma gamma work k -> forces_gamma (a :: gamma) work k.
intros gamma work k a forces_a forces_gamma0.
unfold forces_gamma in |- *.
intros c in_gamma0.
elim (in_gamma_cons_gamma_rev a gamma work c in_gamma0); clear in_gamma0.
intros in_gamma0.
apply forces_gamma0; assumption.
intros eq_c;  rewrite eq_c; assumption.
Qed.

Lemma forces_gamma_cons_gamma_tail :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a : form),
 forces_gamma (a :: gamma) work k -> forces_gamma gamma work k.
intros gamma work k a forces_gamma0.
unfold forces_gamma in |- *.
intros c in_gamma0.
apply forces_gamma0.
apply in_gamma_cons_gamma_tail; assumption.
Qed.

Lemma forces_gamma_cons_gamma_head :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a : form),
 forces_gamma (a :: gamma) work k -> forces_t k a.
intros gamma work k a forces_gamma0.
apply forces_gamma0.
apply in_gamma_cons_gamma_head; assumption.
Qed.

Lemma forces_gamma_shift_gamma_work :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (k : kripke_tree),
 forces_gamma (nf2form a :: gamma) work k -> forces_gamma gamma (a :: work) k.
intros a gamma work k forces_gamma0.
unfold forces_gamma in |- *.
intros c in_gamma.
apply forces_gamma0.
apply in_gamma_shift_work_gamma; assumption.
Qed.

Lemma forces_gamma_shift_work_gamma :
 forall (a : normal_form) (gamma : flist) (work : nf_list) (k : kripke_tree),
 forces_gamma gamma (a :: work) k -> forces_gamma (nf2form a :: gamma) work k.
intros a gamma work k forces_gamma0.
unfold forces_gamma in |- *.
intros c in_gamma.
apply forces_gamma0.
apply in_gamma_shift_gamma_work; assumption.
Qed.

Lemma forces_gamma_cons_gamma_weak :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a b : form),
 (forces_t k a -> forces_t k b) ->
 forces_gamma (a :: gamma) work k -> forces_gamma (b :: gamma) work k.
intros gamma work k a b forces_ab forces_gamma0.
apply forces_gamma_cons_gamma.
apply forces_ab.
apply forces_gamma_cons_gamma_head with gamma work; assumption.
apply forces_gamma_cons_gamma_tail with a; assumption.
Qed.

Lemma forces_gamma_cons_gamma_weak2 :
 forall (gamma : flist) (work : nf_list) (k : kripke_tree) (a b c : form),
 (forces_t k a -> forces_t k b -> forces_t k c) ->
 forces_gamma (a :: b :: gamma) work k -> forces_gamma (c :: gamma) work k.
intros gamma work k a b c forces_abc forces_gamma0.
apply forces_gamma_cons_gamma.
apply forces_abc.
apply forces_gamma_cons_gamma_head with (b :: gamma) work; assumption.
apply forces_gamma_cons_gamma_head with gamma work.
apply forces_gamma_cons_gamma_tail with a; assumption.
apply forces_gamma_cons_gamma_tail with b.
apply forces_gamma_cons_gamma_tail with a; assumption.
Qed.
