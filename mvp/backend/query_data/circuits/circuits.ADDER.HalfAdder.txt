
Require Export Arith_compl.
(* Arith_compl:
Require Export Plus.
Require Export Mult.
Require Import Minus.
Require Export Lt.
Require Export Le.
Require Export Gt.

Lemma plus_n_SO : forall x : nat, x + 1 = S x.

Lemma plus_permute2 : forall x y z : nat, x + y + z = x + z + y.

Lemma mult_sym : forall a b : nat, a * b = b * a.

Lemma mult_permute : forall a b c : nat, a * b * c = a * c * b.

Lemma plus_O_O : forall n m : nat, n + m = 0 -> n = 0.

Lemma mult_plus_distr2 : forall n m p : nat, n * (m + p) = n * m + n * p.

Fixpoint power2 (n : nat) : nat :=
  match n with
  | O => 1
  | S x => power2 x + power2 x
  end.

Lemma power2_eq2 : forall x : nat, power2 (S x) = power2 x + power2 x.

Lemma power2_plus : forall x y : nat, power2 (x + y) = power2 x * power2 y.

Theorem le_plus_n_m : forall n m : nat, n <= m -> n + n <= m + m.

Theorem lt_plus_n_m : forall n m : nat, n < m -> S (n + n) < m + m.

Lemma le_plus_lem1 : forall a b c : nat, a <= b -> c + a <= c + b.

Lemma le_plus_lem2 : forall a b c : nat, c + a <= c + b -> a <= b.

Lemma gt_double : forall a b : nat, a + a > b + b -> a > b. 

Lemma gt_double_inv : forall a b : nat, a > b -> a + a > b + b.

Lemma gt_double_n_S : forall a b : nat, a > b -> a + a > S (b + b).

Lemma gt_double_S_n : forall a b : nat, a > b -> S (a + a) > b + b.

Lemma minus_le_O : forall a b : nat, a <= b -> a - b = 0.

Lemma minus_n_SO : forall n : nat, n - 1 = pred n.

Lemma minus_le_lem2c : forall a b : nat, a - S b <= a - b.

Lemma minus_le_lem2 : forall a b : nat, a - b <= a.

Lemma minus_minus_lem1 : forall a b : nat, a - b - a = 0.

Lemma minus_minus_lem2 : forall a b : nat, b <= a -> a - (a - b) = b.

Lemma le_minus_minus : forall a b c : nat, c <= b -> a - b <= a - c. *)
Require Export Bool_compl.
(* Bool_compl:
Require Export Bool.

Lemma neg_eq : forall a b : bool, negb a = negb b -> a = b.

Lemma false_to_true : false = negb true.

Lemma true_to_false : true = negb false.

Definition xorb (b1 b2 : bool) : bool := b1 && negb b2 || negb b1 && b2.

Lemma xorb_b_b : forall b : bool, xorb b b = false.

Lemma xorb_b_false : forall b : bool, xorb b false = b.

Lemma xorb_b_true : forall b : bool, xorb b true = negb b.

Definition bool_to_nat (b : bool) :=
  match b with
  | true => 1
  | false => 0
  end.

Lemma bool_to_nat_all :
 forall b : bool, bool_to_nat b = 0 \/ bool_to_nat b = 1.

Definition If (T : Set) (b : bool) (x y : T) :=
  match b with
  | true => x
  | false => y
  end.

Lemma If_neg :
 forall (T : Set) (b : bool) (x y : T), If T (negb b) x y = If T b y x.

Lemma If_eq : forall (T : Set) (b : bool) (x : T), If T b x x = x.

Lemma IfIf :
 forall (T : Set) (b1 b2 : bool) (x x' y y' : T),
 If T b1 (If T b2 x y) (If T b2 x' y') =
 If T b2 (If T b1 x x') (If T b1 y y').

Lemma If_cond_true :
 forall (T : Set) (a : bool) (x y : T), x <> y -> If T a x y = x -> a = true.

Lemma If_cond_false :
 forall (T : Set) (a : bool) (x y : T), x <> y -> If T a x y = y -> a = false.

Lemma F_If :
 forall (T T' : Set) (a : bool) (x y : T) (F : T -> T'),
 F (If T a x y) = If T' a (F x) (F y). *)

Definition half_adder_sum (a b : bool) := xorb a b.
Definition half_adder_carry (a b : bool) := a && b.

Lemma half_adder_sum_sym :
 forall a b : bool, half_adder_sum a b = half_adder_sum b a.
simple induction a; simple induction b; auto.
Qed. Hint Resolve half_adder_sum_sym.

Lemma half_adder_carry_sym :
 forall a b : bool, half_adder_carry a b = half_adder_carry b a.
simple induction a; simple induction b; auto.
Qed. Hint Resolve half_adder_carry_sym.

Lemma half_adder_sum_false : forall a : bool, half_adder_sum a false = a.
simple induction a; auto.
Qed. Hint Resolve half_adder_sum_false.

Lemma half_adder_carry_false :
 forall a : bool, half_adder_carry a false = false.
simple induction a; auto.
Qed. Hint Resolve half_adder_carry_false.

Lemma half_adder_sum_true : forall a : bool, half_adder_sum a true = negb a.
auto.
Qed. Hint Resolve half_adder_sum_true.

Lemma half_adder_carry_true : forall a : bool, half_adder_carry a true = a.
simple induction a; auto.
Qed. Hint Resolve half_adder_carry_true.

Theorem half_adder_ok :
 forall a b : bool,
 bool_to_nat (half_adder_sum a b) +
 (bool_to_nat (half_adder_carry a b) + bool_to_nat (half_adder_carry a b)) =
 bool_to_nat a + bool_to_nat b.
simple induction a; simple induction b; auto.
Qed.
