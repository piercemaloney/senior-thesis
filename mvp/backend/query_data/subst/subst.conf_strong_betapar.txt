

Require Import TS.

Require Import sur_les_relations.
(* sur_les_relations:
Section Rels.

Variable A : Set.

Inductive explicit_star (R : A -> A -> Prop) : A -> A -> Prop :=
  | star_refl : forall x : A, explicit_star R x x
  | star_trans1 :
      forall x y z : A, R x y -> explicit_star R y z -> explicit_star R x z.

Inductive explicit_comp_rel (R1 R2 : A -> A -> Prop) : A -> A -> Prop :=
    comp_2rel :
      forall x y z : A, R1 x y -> R2 y z -> explicit_comp_rel R1 R2 x z.

Inductive explicit_rel_plus (R : A -> A -> Prop) : A -> A -> Prop :=
  | relplus_1step : forall x y : A, R x y -> explicit_rel_plus R x y
  | relplus_trans1 :
      forall x y z : A,
      R x y -> explicit_rel_plus R y z -> explicit_rel_plus R x z. 

End Rels.

Hint Resolve star_refl.
Hint Resolve relplus_1step.

Notation star := (explicit_star _) (only parsing).

Notation comp_rel := (explicit_comp_rel _) (only parsing).

Notation rel_plus := (explicit_rel_plus _) (only parsing).

Section rels_prop.

Variable A : Set.
Variable R : A -> A -> Prop.

Definition confluence_en (x : A) :=
  forall y z : A,
  explicit_star _ R x y ->
  explicit_star _ R x z ->
  exists u : A, explicit_star _ R y u /\ explicit_star _ R z u.

Definition explicit_confluence := forall x : A, confluence_en x.

Definition local_confluence_en (x : A) :=
  forall y z : A,
  R x y ->
  R x z -> exists u : A, explicit_star _ R y u /\ explicit_star _ R z u.

Definition explicit_local_confluence := forall x : A, local_confluence_en x.

Definition strong_confluence_en (x : A) :=
  forall y z : A, R x y -> R x z -> exists u : A, R y u /\ R z u.

Definition explicit_strong_confluence := forall x : A, strong_confluence_en x.

End rels_prop.

Notation confluence := (explicit_confluence _) (only parsing).

Notation local_confluence := (explicit_local_confluence _) (only parsing).

Notation strong_confluence := (explicit_strong_confluence _) (only parsing).

Definition explicit_inclus (A : Set) (R1 R2 : A -> A -> Prop) :=
  forall x y : A, R1 x y -> R2 x y.

Notation inclus := (explicit_inclus _) (only parsing).

Section relations_noetherian.

Variable U : Set.

Variable R : U -> U -> Prop.

Definition a_set := U -> Prop.

Definition sub (A B : a_set) := forall x : U, A x -> B x.

Definition universal (A : a_set) := forall x : U, A x.

Definition adjoint (A : a_set) : a_set := fun x : U => sub (R x) A.

Definition hereditary (A : a_set) := sub (adjoint A) A.

Definition explicit_noetherian :=
  forall A : a_set, hereditary A -> universal A.

End relations_noetherian.

Notation noetherian := (explicit_noetherian _) (only parsing).

Goal
forall (A : Set) (P Q : A -> Prop),
(exists u : A, P u /\ Q u) -> exists u : A, Q u /\ P u.
simple induction 1; intros u1 H1.
elim H1; intros H2 H3.
exists u1; split; assumption.
Save Ex_PQ.
Hint Resolve Ex_PQ.
 
Lemma star_trans :
 forall (A : Set) (R : A -> A -> Prop) (x y z : A),
 explicit_star _ R x y -> explicit_star _ R y z -> explicit_star _ R x z.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y : A),
R x y -> explicit_star _ R x y.
intros; apply star_trans1 with y.
assumption.
apply star_refl.
Save star_step1.

Hint Resolve star_step1.

Goal
forall (A : Set) (R1 R2 : A -> A -> Prop) (M N : A),
explicit_comp_rel _ R1 R2 M N -> exists u : A, R1 M u /\ R2 u N.  
intros A R1 R2 M N H; elim H.
intros x y z H1 H2; exists y; split; assumption.
Save comp_case.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y : A),
explicit_comp_rel _ R (explicit_star _ R) x y -> explicit_rel_plus _ R x y.
intros A R x y H; elim H.
intros a b c H1 H2; generalize H1; generalize a.
elim H2.
intros; apply relplus_1step; assumption.
intros x0 y0 z H3 H4 H5 a0 H6; apply relplus_trans1 with x0.
assumption.
apply H5; assumption.
Save comp_relplus.

Goal
forall (A : Set) (R : A -> A -> Prop) (M N : A),
explicit_star _ R M N ->
M = N \/ (exists u : A, R M u /\ explicit_star _ R u N).
intros A R M N H; elim H.
intros x; left; trivial.
intros x y z H1 H2 H3; right; exists y; split; trivial.
Save star_case.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y z : A),
explicit_rel_plus _ R x y ->
explicit_rel_plus _ R y z -> explicit_rel_plus _ R x z.
simple induction 1.
intros; apply relplus_trans1 with y0; trivial.
intros; apply relplus_trans1 with y0; auto.
Save Rplus_transitive.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y : A),
explicit_rel_plus _ R x y -> explicit_star _ R x y.
simple induction 1; intros.
auto.
apply star_trans1 with y0; auto.
Save Rplus_Rstar.

Hint Resolve Rplus_Rstar.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y z : A),
explicit_star _ R x y ->
explicit_rel_plus _ R y z -> exists u : A, R x u /\ explicit_star _ R u z.
simple induction 1; intros.
elim H0; intros.
exists y0; auto.
exists y0; auto.
exists y0; split; trivial.
apply star_trans with z0; auto.
Save Rstar_Rplus_R.

Goal
forall (A : Set) (R : A -> A -> Prop),
explicit_noetherian _ R ->
forall A1 : a_set A,
hereditary A (explicit_rel_plus _ R) A1 ->
universal A (adjoint A (explicit_star _ R) A1).
unfold explicit_noetherian in |- *; unfold hereditary in |- *;
 unfold universal in |- *; unfold sub in |- *; intros A R N A1 H x.
apply (N (adjoint A (explicit_star _ R) A1)).
unfold adjoint in |- *; unfold sub in |- *; intros.
apply H; unfold adjoint in |- *; unfold sub in |- *; intros.
elim Rstar_Rplus_R with A R x0 x1 x2; trivial.
intro z; simple induction 1; intros C1 C2; apply H0 with z; trivial.
Save noetherian_course_of_values.

Lemma plus_preserves_noetherian :
 forall (A : Set) (R : A -> A -> Prop),
 explicit_noetherian _ R -> explicit_noetherian _ (explicit_rel_plus _ R).

Lemma noetherian_induction1 :
 forall (A : Set) (R : A -> A -> Prop),
 explicit_noetherian _ R ->
 forall (x : A) (P : A -> Prop),
 (forall y : A, (forall z : A, R y z -> P z) -> P y) -> P x.

Lemma noetherian_induction :
 forall (A : Set) (R : A -> A -> Prop),
 explicit_noetherian _ R ->
 forall (x : A) (P : A -> Prop),
 (forall y : A, (forall z : A, explicit_rel_plus _ R y z -> P z) -> P y) ->
 P x.

Lemma noether_inclus :
 forall (A : Set) (R R' : A -> A -> Prop),
 explicit_noetherian _ R ->
 (forall x y : A, R' x y -> R x y) -> explicit_noetherian _ R'.

Goal
forall (A : Set) (R S : A -> A -> Prop),
explicit_inclus _ R (explicit_star _ S) ->
explicit_inclus _ (explicit_star _ R) (explicit_star _ S).
intros A R S H; red in |- *; simple induction 1.
auto.
intros x0 y0 z H1 H2 H3; apply star_trans with y0; auto.
Save inclus_star.

Goal
forall (A : Set) (R S : A -> A -> Prop),
explicit_inclus _ R S ->
explicit_inclus _ (explicit_star _ R) (explicit_star _ S).
unfold explicit_inclus in |- *; simple induction 2.
auto.
intros x0 y0 z H1 H2 H3; apply star_trans1 with y0.
apply (H x0 y0 H1).
assumption.
Save inclus_reg_star.
Hint Resolve inclus_reg_star.

Goal
forall (A : Set) (R1 R2 S : A -> A -> Prop),
explicit_inclus _ R1 S ->
explicit_inclus _ R2 S ->

(forall x y z : A, S x y -> S y z -> S x z) ->
explicit_inclus _ (explicit_comp_rel _ R1 R2) S.   
intros A R1 R2 S H H0 H1; red in |- *; simple induction 1.
intros x0 y0 z H3 H4; apply H1 with y0; auto.
Save inclus_comp.
Hint Resolve inclus_comp.

Goal
forall (A : Set) (R : A -> A -> Prop),
explicit_strong_confluence _ R -> explicit_confluence _ R.
intros A R H; red in |- *; red in |- *.
intros x y z H1; generalize z; elim H1.
intros x0 z0 H2; exists z0; split; auto.
intros x0 y0 y1 H2 H3 H4 z0 H5.
cut (exists u : A, explicit_star _ R y0 u /\ R z0 u).
intro H6; elim H6; intros z1 H7; elim H7; intros H8 H9.
elim (H4 z1 H8); intros u H10; elim H10; intros H11 H12.
exists u; split.
assumption.
apply star_trans1 with z1; assumption.
generalize H2; generalize y0; elim H5.
intros x1 y2 H6; exists y2; split; auto.
intros x1 y2 z1 H6 H7 H8 y3 H9; elim (H x1 y3 y2).
intros x2 H10; elim H10; intros H11 H12.
elim (H8 x2 H12); intros u H13; elim H13; intros H14 H15.
exists u; split; [ apply star_trans1 with x2; assumption | assumption ];
 trivial.
assumption.
assumption.
Save strong_conf_conf.

Goal
forall (A : Set) (R S : A -> A -> Prop),
explicit_inclus _ R S ->
explicit_inclus _ S (explicit_star _ R) ->
explicit_confluence _ S -> explicit_confluence _ R.
red in |- *; red in |- *; intros A R S H H0 H1 x y z H2 H3.
cut (explicit_inclus _ (explicit_star _ R) (explicit_star _ S)).
2: auto.
intro H4; elim (H1 x y z (H4 x y H2) (H4 x z H3)).
intros x' H5; elim H5; intros H6 H7.
exists x'; split.
exact (inclus_star A S R H0 y x' H6).
exact (inclus_star A S R H0 z x' H7).
Save inclus_conf. *)

Require Import betapar.
(* betapar:
Require Import TS.
Require Import sur_les_relations.
Require Import betapar.
Require Import egaliteTS.

Definition sconf (b : wsort) (N N' : TS b) :=
  forall z : TS b,
  e_beta_par _ N z -> exists u : TS b, e_beta_par _ N' u /\ e_beta_par _ z u.

Goal forall M M' : terms, sconf wt (lambda M) (lambda M') -> sconf wt M M'.
unfold sconf in |- *; intros M M' H z H0.
elim (H (lambda z)).
2: auto.
intros M_ H1; elim H1; intros H2 H3.
cut (M_ = M_).
2: trivial.
pattern M_ at 1 in |- *; apply case_blambda with M'.
2: assumption.
intros u1 H4.
pattern M_ in |- *; apply case_blambda with z.
2: assumption.
intros u2 H5 H6.
exists u1; split.
assumption.
rewrite (proj_lambda u1 u2 H6); assumption.
Save sconf_lambda_bpar.

Theorem sconf_betapar :
 forall b : wsort, explicit_strong_confluence _ (e_beta_par b). *)

Require Import egaliteTS.
(* egaliteTS:
Require Import TS.

Goal forall (n : nat) (a b : terms), var n <> app a b.
intros; discriminate.
Save diff_var_app.

Goal forall (n : nat) (a : terms), var n <> lambda a.
intros; discriminate.
Save diff_var_lambda.

Goal forall (n : nat) (a : terms) (s : sub_explicits), var n <> env a s.
intros; discriminate.
Save diff_var_env.

Goal forall a b c : terms, app a b <> lambda c.
intros; discriminate.
Save diff_app_lambda.

Goal forall (a b c : terms) (s : sub_explicits), app a b <> env c s.
intros; discriminate.
Save diff_app_env.

Goal forall (a b : terms) (s : sub_explicits), lambda a <> env b s.
intros; discriminate.
Save diff_lambda_env.

Goal id <> shift.
intros; discriminate.
Save diff_id_shift.

Goal forall (a : terms) (s : sub_explicits), id <> cons a s.
intros; discriminate.
Save diff_id_cons.

Goal forall s t : sub_explicits, id <> comp s t.
intros; discriminate.
Save diff_id_comp.

Goal forall s : sub_explicits, id <> lift s.
intros; discriminate.
Save diff_id_lift.

Goal forall (a : terms) (s : sub_explicits), shift <> cons a s.
intros; discriminate.
Save diff_shift_cons.

Goal forall s t : sub_explicits, shift <> comp s t.
intros; discriminate.
Save diff_shift_comp.

Goal forall s : sub_explicits, shift <> lift s.
intros; discriminate.
Save diff_shift_lift.

Goal forall (a : terms) (s t u : sub_explicits), cons a s <> comp t u.
intros; discriminate.
Save diff_cons_comp.

Goal forall (a : terms) (s t : sub_explicits), cons a s <> lift t.
intros; discriminate.
Save diff_cons_lift.

Goal forall s t u : sub_explicits, comp s t <> lift u.
intros; discriminate.
Save diff_comp_lift.

Goal forall n1 n2 : nat, var n1 = var n2 -> n1 = n2. 
intros n1 n2 H; injection H; trivial. 
Save proj_var.

Goal forall a1 b1 a2 b2 : terms, app a1 b1 = app a2 b2 -> a1 = a2.
intros a1 b1 a2 b2 H; injection H; trivial. 
Save proj_app1.

Goal forall a1 b1 a2 b2 : terms, app a1 b1 = app a2 b2 -> b1 = b2.
intros a1 b1 a2 b2 H; injection H; trivial. 
Save proj_app2.

Goal forall a b : terms, lambda a = lambda b -> a = b.
intros a b H; injection H; trivial. 
Save proj_lambda.

Goal forall (a b : terms) (s t : sub_explicits), env a s = env b t -> a = b.
intros a b s t H; injection H; trivial. 
Save proj_env1.

Goal forall (a b : terms) (s t : sub_explicits), env a s = env b t -> s = t.
intros a b s t H; injection H; trivial. 
Save proj_env2.

Goal
forall (a b : terms) (s t : sub_explicits), cons a s = cons b t -> a = b.
intros a b s t H; injection H; trivial. 
Save proj_cons1.

Goal
forall (a b : terms) (s t : sub_explicits), cons a s = cons b t -> s = t.
intros a b s t H; injection H; trivial. 
Save proj_cons2.

Goal forall s1 s2 t1 t2 : sub_explicits, comp s1 t1 = comp s2 t2 -> s1 = s2.
intros s1 s2 t1 t2 H; injection H; trivial. 
Save proj_comp1.

Goal forall s1 s2 t1 t2 : sub_explicits, comp s1 t1 = comp s2 t2 -> t1 = t2.
intros s1 s2 t1 t2 H; injection H; trivial. 
Save proj_comp2.

Goal forall s t : sub_explicits, lift s = lift t -> s = t.
intros s t H; injection H; trivial. 
Save proj_lift. *)



Definition sconf (b : wsort) (N N' : TS b) :=

  forall z : TS b,

  e_beta_par _ N z -> exists u : TS b, e_beta_par _ N' u /\ e_beta_par _ z u.



Goal forall M M' : terms, sconf wt (lambda M) (lambda M') -> sconf wt M M'.

unfold sconf in |- *; intros M M' H z H0.

elim (H (lambda z)).

2: auto.

intros M_ H1; elim H1; intros H2 H3.

cut (M_ = M_).

2: trivial.

pattern M_ at 1 in |- *; apply case_blambda with M'.

2: assumption.

intros u1 H4.

pattern M_ in |- *; apply case_blambda with z.

2: assumption.

intros u2 H5 H6.

exists u1; split.

assumption.

rewrite (proj_lambda u1 u2 H6); assumption.

Save sconf_lambda_bpar.



Theorem sconf_betapar :

 forall b : wsort, explicit_strong_confluence _ (e_beta_par b).

red in |- *; red in |- *; intros b x y z H; generalize z; elim H.



intros n z0 H1; pattern z0 in |- *; apply case_bvar with n.

2: assumption.

exists (var n); auto.



intros z0 H1; pattern z0 in |- *; apply case_bid.

2: assumption.

exists id; auto.



intros z0 H1; pattern z0 in |- *; apply case_bshift.

2: assumption.

exists shift; auto.



intros M N M' N' H0 H1 H2 H3 z0 H4.

generalize H0 H1; pattern z0 in |- *; apply case_bapp with M N.

3: assumption.



intros M'' N'' H5 H6 H7 H8.

elim (H3 N'' H6); intros N_ H9; elim H9; intros H10 H11.

elim (H1 M'' H5); intros M_ H12; elim H12; intros H13 H14.

exists (app M_ N_); auto.



intros M1 M1'' N'' H5 H6 H7; rewrite H5; intros H8.

pattern M' in |- *; apply case_blambda with M1.

2: assumption.

intros M1' H9 H10.

elim (sconf_lambda_bpar M1 M1' H10 M1'' H6); intros M1_ H11.

elim H11; intros H12 H13.

elim (H3 N'' H7); intros N_ H14; elim H14; intros H15 H16.

exists (env M1_ (cons N_ id)); auto.



intros M M' H0 H1 z0 H2; pattern z0 in |- *; apply case_blambda with M.

2: assumption.

intros M'' H3; elim (H1 M'' H3); intros M_ H4; elim H4; intros H5 H6.

exists (lambda M_); auto.



intros M M' s s' H0 H1 H2 H3 z0 H4.

pattern z0 in |- *; apply case_benv with M s.

2: assumption.

intros M'' s'' H5 H6.

elim (H1 M'' H5); intros M_ H7; elim H7; intros H8 H9.

elim (H3 s'' H6); intros s_ H10; elim H10; intros H11 H12.

exists (env M_ s_); auto.



intros M N M' N' H0 H1 H2 H3 z0 H4.

pattern z0 in |- *; apply case_bapp with (lambda M) N.

3: assumption.



intros M1'' N'' H5 H6.

pattern M1'' in |- *; apply case_blambda with M.

2: assumption.

intros M'' H7.

elim (H1 M'' H7); intros M_ H8; elim H8; intros H9 H10.

elim (H3 N'' H6); intros N_ H11; elim H11; intros H12 H13.

exists (env M_ (cons N_ id)); auto.



intros M1 M1'' N'' H5 H6 H7; generalize H6; elim (proj_lambda M M1 H5);

 intro H8.

elim (H1 M1'' H8); intros M_ H9; elim H9; intros H10 H11.

elim (H3 N'' H7); intros N_ H12; elim H12; intros H13 H14.

exists (env M_ (cons N_ id)); auto.



intros M M' s s' H0 H1 H2 H3 z0 H4.

pattern z0 in |- *; apply case_bcons with M s.

2: assumption.

intros M'' s'' H5 H6.

elim (H1 M'' H5); intros M_ H7; elim H7; intros H8 H9.

elim (H3 s'' H6); intros s_ H10; elim H10; intros H11 H12.

exists (cons M_ s_); auto.



intros s s' H0 H1 z0 H2.

pattern z0 in |- *; apply case_blift with s.

2: assumption.

intros s'' H3.

elim (H1 s'' H3); intros s_ H4; elim H4; intros H5 H6.

exists (lift s_); auto.



intros s s' t t' H0 H1 H2 H3 z0 H4.

pattern z0 in |- *; apply case_bcomp with s t.

2: assumption.

intros s'' t'' H5 H6.

elim (H1 s'' H5); intros s_ H7; elim H7; intros H8 H9.

elim (H3 t'' H6); intros t_ H10; elim H10; intros H11 H12.

exists (comp s_ t_); auto.



intros n z0 H1; pattern z0 in |- *; apply case_bmetaX with n.

2: assumption.

exists (meta_X n); auto.



intros n z0 H1; pattern z0 in |- *; apply case_bmetax with n.

2: assumption.

exists (meta_x n); auto.

Qed.

