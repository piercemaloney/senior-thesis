

Require Import Le.

Require Import Lt.

Require Import Plus.

Require Import Gt.

Require Import Minus.

Require Import Mult.

Require Import TS. 

Require Import sigma_lift.  

Require Import comparith.
(* comparith:
Require Import Le.
Require Import Lt.
Require Import Plus.
Require Import Gt.
Require Import Minus.
Require Import Mult.

Hint Resolve mult_n_O mult_n_Sm plus_le_compat. 

Goal forall n m : nat, n > m -> S n > m.
auto with arith.
Save gt_S_l.
Hint Resolve gt_S_l.

Goal forall n m : nat, n > S m -> n > m.
auto with arith.
Save gt_S_r.
Hint Resolve gt_S_r.
 
Goal forall n m p : nat, n = m -> p + n = p + m.
intros; elim p; elim H; auto with arith.
Save eq_plus_reg_r.
Hint Resolve eq_plus_reg_r.

Goal forall n m p : nat, n = m -> n + p = m + p.
intros; elim p; elim H; auto with arith.
Save eq_plus_reg_l.
Hint Resolve eq_plus_reg_l.

Goal forall n m p : nat, n > m -> n + p > m + p.
intros; elim (plus_comm p m); elim (plus_comm p n); auto with arith.
Save gt_reg_r.
Hint Resolve gt_reg_r.

Goal forall n m p q : nat, n > m -> p > q -> n + p > m + q.
simple induction 1; intros; simpl in |- *; auto with arith.
Save gt_plus_plus.
Hint Resolve gt_plus_plus.

Goal forall p : nat, p > 0 -> forall n : nat, p + n > n.
simple induction 1; intros.
auto with arith.
simpl in |- *; auto with arith.
Save gt_plus_l.
Hint Resolve gt_plus_l.

Goal forall p : nat, p > 0 -> forall n : nat, n + p > n.
intros; elim (plus_comm p n); auto with arith.
Save gt_plus_r.
Hint Resolve gt_plus_r.

Goal forall n m p : nat, n > m -> n + p > m.
auto with arith.
Save gt_plus_trans_r.
Hint Resolve gt_plus_trans_r.

Goal forall n m p : nat, n > m -> p + n > m.
intros; elim (plus_comm n p); auto with arith.
Save gt_plus_trans_l.
Hint Resolve gt_plus_trans_l.

Goal forall n : nat, S n = n + 1.
simple induction n.
auto with arith.
simpl in |- *; auto with arith.
Save S_plus.
Hint Resolve S_plus.
 
Goal forall n m : nat, n * m = m * n.
simple induction n; intros.
auto with arith.
simpl in |- *; elim mult_n_Sm; elim H; auto with arith.
Save mult_sym.
Hint Resolve mult_sym.

Goal forall n m p : nat, n * (m * p) = n * m * p.
intros n m p; elim n; simpl in |- *.
auto with arith.
intros y H; rewrite mult_plus_distr_r; elim H; auto with arith.
Save mult_assoc_l.
Hint Resolve mult_assoc_l.

Goal forall n m p : nat, n * (m * p) = m * (n * p).
intros; rewrite (mult_assoc_l m n p); rewrite (mult_sym m n); auto with arith.
Save mult_permut.
Hint Resolve mult_permut. 

Goal forall n m p : nat, p * (n + m) = p * n + p * m.
intros n m p; elim p.
auto with arith.
simpl in |- *; intros y H; rewrite H; elim plus_assoc; elim plus_assoc.
pattern (y * n + (m + y * m)) in |- *; elim plus_permute; trivial with arith.
Save mult_plus_distr_r.
Hint Resolve comparith.mult_plus_distr_r.

Goal forall n : nat, n * 2 = n + n.
simple induction n.
auto with arith.
intros; simpl in |- *; rewrite H; auto with arith.
Save mult_n_2. 
Hint Resolve mult_n_2.
 
Goal forall n : nat, n = n * 1.  
simple induction n.
auto with arith.
simpl in |- *; auto with arith.
Save mult_n_1. 
Hint Resolve mult_n_1.

Goal forall n m p : nat, n = m -> p * n = p * m.
intros; elim p; elim H; auto with arith.
Save eq_mult_reg_r.
Hint Resolve eq_mult_reg_r.

Goal forall n m p : nat, n = m -> n * p = m * p.
intros; elim p; elim H; auto with arith.
Save eq_mult_reg_l.
Hint Resolve eq_mult_reg_l.

Goal forall p : nat, p > 0 -> forall n m : nat, n > m -> p * n > p * m.
simple induction p.
intros H n m H0; absurd (0 > 0); auto with arith.
intros y H H0 n m H1; elim (gt_O_eq y); intros.
simpl in |- *; auto with arith.
elim H2; simpl in |- *; elim (plus_n_O n); elim (plus_n_O m);
 trivial with arith.
Save gt_mult_reg_l.
Hint Resolve gt_mult_reg_l.

Goal forall p : nat, p > 0 -> forall n m : nat, n > m -> n * p > m * p.
intros; elim (mult_sym p n); elim (mult_sym p m); auto with arith.
Save gt_mult_reg_r.
Hint Resolve gt_mult_reg_r.

Goal forall p : nat, p > 1 -> forall n : nat, n > 0 -> p * n > n.
simple induction p.
intros H n H0; absurd (0 > 1); auto with arith.
intros y H H0 n H1; simpl in |- *; apply gt_plus_r; replace 0 with (y * 0);
 auto with arith.
Save gt_mult_l.
Hint Resolve gt_mult_l.

Goal forall p : nat, p > 1 -> forall n : nat, n > 0 -> n * p > n.
intros; elim (mult_sym p n); auto with arith.
Save gt_mult_r.
Hint Resolve gt_mult_r.

Goal forall p : nat, p > 0 -> forall n m : nat, n > m -> p * n > m.
simple induction p.
intros H n m H0; simpl in |- *; absurd (0 > 0); auto with arith.
intros y H H0 n m H1; simpl in |- *; elim (gt_O_eq y); intro H2.
auto with arith.
elim H2; simpl in |- *; elim plus_n_O; assumption.
Save gt_mult_trans_r.
Hint Resolve gt_mult_trans_r.

Goal forall p : nat, p > 0 -> forall n m : nat, n > m -> n * p > m.
intros; elim (mult_sym p n); auto with arith.
Save gt_mult_trans_l.
Hint Resolve gt_mult_trans_l.

Fixpoint power2 (n : nat) : nat :=
  match n with
  | O => 1
  | S p => 2 * power2 p
  end.

Goal forall n : nat, power2 n > 0.
simple induction n; simpl in |- *; intros.
auto with arith.
elim plus_n_O; auto with arith.
Save gt_power2_O.
Hint Resolve gt_power2_O. *)



Definition e_P1 (b : wsort) (U : TS b) : nat :=

  (fix F (w : wsort) (t : TS w) {struct t} : nat :=

     match t with

     | var n => power2 (S n)

     | app t0 t1 => F wt t0 + F wt t1

     | lambda t0 => F wt t0 + 2

     | env t0 t1 => F wt t0 * F ws t1

     | id => 2

     | shift => 2

     | cons t0 t1 => F wt t0 + F ws t1

     | comp t0 t1 => F ws t0 * F ws t1

     | lift t0 => F ws t0

     | meta_X _ => 2

     | meta_x _ => 2

     end) b U.

 

Notation P1 := (e_P1 _) (only parsing).



Theorem gt_P1_1 : forall (b : wsort) (M : TS b), e_P1 _ M > 1.

Proof.

simple induction M; intros; simpl in |- *; auto with arith.



elim plus_n_O; elim n; simpl in |- *.

auto with arith.

intros; elim plus_n_O; auto with arith.

Qed.

Hint Resolve gt_P1_1.



Theorem P1_app : forall M N : terms, reg_app M N -> e_P1 _ M = e_P1 _ N.

Proof. 

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_app.



Theorem P1_lambda : forall M N : terms, reg_lambda M N -> e_P1 _ M > e_P1 _ N.

Proof. 

simple induction 1; intros; simpl in |- *; rewrite Mult.mult_plus_distr_r;

 auto with arith.

Qed.

Hint Resolve P1_lambda.



Theorem P1_clos : forall M N : terms, reg_clos M N -> e_P1 _ M = e_P1 _ N.

Proof. 

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_clos.

 

Theorem P1_varshift1 :

 forall M N : terms, reg_varshift1 M N -> e_P1 _ M = e_P1 _ N.

Proof. 

simple induction 1; intros.

change (power2 (S n) * 2 = 2 * power2 (S n)) in |- *.

auto with arith.

Qed.

Hint Resolve P1_varshift1.



Theorem P1_varshift2 :

 forall M N : terms, reg_varshift2 M N -> e_P1 _ M = e_P1 _ N.

Proof. 

simple induction 1; intros.

change (power2 (S n) * (2 * e_P1 _ s) = 2 * power2 (S n) * e_P1 _ s) in |- *.

elim mult_permut; auto with arith.

Qed.

Hint Resolve P1_varshift2.



Theorem P1_fvarcons :

 forall M N : terms, reg_fvarcons M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; elim plus_n_O; auto with arith.

Qed.

Hint Resolve P1_fvarcons.



Theorem P1_fvarlift1 :

 forall M N : terms, reg_fvarlift1 M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros.

change (2 * e_P1 _ s > 2) in |- *.

auto with arith.

Qed.

Hint Resolve P1_fvarlift1.



Theorem P1_fvarlift2 :

 forall M N : terms, reg_fvarlift2 M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros.

change (2 * (e_P1 _ s * e_P1 _ t) > 2 * e_P1 _ t) in |- *.

auto with arith.

Qed.

Hint Resolve P1_fvarlift2.



Theorem P1_rvarcons :

 forall M N : terms, reg_rvarcons M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros.

change (2 * power2 (S n) * (e_P1 _ a + e_P1 _ s) > power2 (S n) * e_P1 _ s)

 in |- *.

rewrite comparith.mult_plus_distr_r; auto with arith.

Qed.

Hint Resolve P1_rvarcons.



Theorem P1_rvarlift1 :

 forall M N : terms, reg_rvarlift1 M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros.

change (2 * power2 (S n) * e_P1 _ s = power2 (S n) * (e_P1 _ s * 2)) in |- *.

elim mult_assoc_l; elim (mult_permut (power2 (S n)) 2 (e_P1 _ s)).

auto with arith.

Qed.

Hint Resolve P1_rvarlift1.



Theorem P1_rvarlift2 :

 forall M N : terms, reg_rvarlift2 M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros.

change

  (2 * power2 (S n) * (e_P1 _ s * e_P1 _ t) =

   power2 (S n) * (e_P1 _ s * (2 * e_P1 _ t))) in |- *.

elim (mult_sym (power2 (S n)) 2); elim mult_assoc_l; auto with arith.

Qed.

Hint Resolve P1_rvarlift2.



Theorem P1_assenv :

 forall M N : sub_explicits, reg_assenv M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_assenv.



Theorem P1_mapenv :

 forall M N : sub_explicits, reg_mapenv M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_mapenv.



Theorem P1_shiftcons :

 forall M N : sub_explicits, reg_shiftcons M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; elim plus_n_O; auto with arith.

Qed.

Hint Resolve P1_shiftcons.



Theorem P1_shiftlift1 :

 forall M N : sub_explicits, reg_shiftlift1 M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; elim plus_n_O; auto with arith.

Qed.

Hint Resolve P1_shiftlift1.



Theorem P1_shiftlift2 :

 forall M N : sub_explicits, reg_shiftlift2 M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; do 2 elim plus_n_O;

 auto with arith.

Qed.

Hint Resolve P1_shiftlift2.



Theorem P1_lift1 :

 forall M N : sub_explicits, reg_lift1 M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_lift1.



Theorem P1_lift2 :

 forall M N : sub_explicits, reg_lift2 M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_lift2.



Theorem P1_liftenv :

 forall M N : sub_explicits, reg_liftenv M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *;

 rewrite comparith.mult_plus_distr_r; auto with arith.

Qed.

Hint Resolve P1_liftenv.



Theorem P1_idl :

 forall M N : sub_explicits, reg_idl M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; elim plus_n_O; auto with arith.

Qed.

Hint Resolve P1_idl.



Theorem P1_idr :

 forall M N : sub_explicits, reg_idr M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_idr.



Theorem P1_liftid :

 forall M N : sub_explicits, reg_liftid M N -> e_P1 _ M = e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_liftid.



Theorem P1_id : forall M N : terms, reg_id M N -> e_P1 _ M > e_P1 _ N.

Proof.

simple induction 1; intros; simpl in |- *; auto with arith.

Qed.

Hint Resolve P1_id.

