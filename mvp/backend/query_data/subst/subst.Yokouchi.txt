

Require Import sur_les_relations.
(* sur_les_relations:
Section Rels.

Variable A : Set.

Inductive explicit_star (R : A -> A -> Prop) : A -> A -> Prop :=
  | star_refl : forall x : A, explicit_star R x x
  | star_trans1 :
      forall x y z : A, R x y -> explicit_star R y z -> explicit_star R x z.

Inductive explicit_comp_rel (R1 R2 : A -> A -> Prop) : A -> A -> Prop :=
    comp_2rel :
      forall x y z : A, R1 x y -> R2 y z -> explicit_comp_rel R1 R2 x z.

Inductive explicit_rel_plus (R : A -> A -> Prop) : A -> A -> Prop :=
  | relplus_1step : forall x y : A, R x y -> explicit_rel_plus R x y
  | relplus_trans1 :
      forall x y z : A,
      R x y -> explicit_rel_plus R y z -> explicit_rel_plus R x z. 

End Rels.

Hint Resolve star_refl.
Hint Resolve relplus_1step.

Notation star := (explicit_star _) (only parsing).

Notation comp_rel := (explicit_comp_rel _) (only parsing).

Notation rel_plus := (explicit_rel_plus _) (only parsing).

Section rels_prop.

Variable A : Set.
Variable R : A -> A -> Prop.

Definition confluence_en (x : A) :=
  forall y z : A,
  explicit_star _ R x y ->
  explicit_star _ R x z ->
  exists u : A, explicit_star _ R y u /\ explicit_star _ R z u.

Definition explicit_confluence := forall x : A, confluence_en x.

Definition local_confluence_en (x : A) :=
  forall y z : A,
  R x y ->
  R x z -> exists u : A, explicit_star _ R y u /\ explicit_star _ R z u.

Definition explicit_local_confluence := forall x : A, local_confluence_en x.

Definition strong_confluence_en (x : A) :=
  forall y z : A, R x y -> R x z -> exists u : A, R y u /\ R z u.

Definition explicit_strong_confluence := forall x : A, strong_confluence_en x.

End rels_prop.

Notation confluence := (explicit_confluence _) (only parsing).

Notation local_confluence := (explicit_local_confluence _) (only parsing).

Notation strong_confluence := (explicit_strong_confluence _) (only parsing).

Definition explicit_inclus (A : Set) (R1 R2 : A -> A -> Prop) :=
  forall x y : A, R1 x y -> R2 x y.

Notation inclus := (explicit_inclus _) (only parsing).

Section relations_noetherian.

Variable U : Set.

Variable R : U -> U -> Prop.

Definition a_set := U -> Prop.

Definition sub (A B : a_set) := forall x : U, A x -> B x.

Definition universal (A : a_set) := forall x : U, A x.

Definition adjoint (A : a_set) : a_set := fun x : U => sub (R x) A.

Definition hereditary (A : a_set) := sub (adjoint A) A.

Definition explicit_noetherian :=
  forall A : a_set, hereditary A -> universal A.

End relations_noetherian.

Notation noetherian := (explicit_noetherian _) (only parsing).

Goal
forall (A : Set) (P Q : A -> Prop),
(exists u : A, P u /\ Q u) -> exists u : A, Q u /\ P u.
simple induction 1; intros u1 H1.
elim H1; intros H2 H3.
exists u1; split; assumption.
Save Ex_PQ.
Hint Resolve Ex_PQ.
 
Lemma star_trans :
 forall (A : Set) (R : A -> A -> Prop) (x y z : A),
 explicit_star _ R x y -> explicit_star _ R y z -> explicit_star _ R x z.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y : A),
R x y -> explicit_star _ R x y.
intros; apply star_trans1 with y.
assumption.
apply star_refl.
Save star_step1.

Hint Resolve star_step1.

Goal
forall (A : Set) (R1 R2 : A -> A -> Prop) (M N : A),
explicit_comp_rel _ R1 R2 M N -> exists u : A, R1 M u /\ R2 u N.  
intros A R1 R2 M N H; elim H.
intros x y z H1 H2; exists y; split; assumption.
Save comp_case.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y : A),
explicit_comp_rel _ R (explicit_star _ R) x y -> explicit_rel_plus _ R x y.
intros A R x y H; elim H.
intros a b c H1 H2; generalize H1; generalize a.
elim H2.
intros; apply relplus_1step; assumption.
intros x0 y0 z H3 H4 H5 a0 H6; apply relplus_trans1 with x0.
assumption.
apply H5; assumption.
Save comp_relplus.

Goal
forall (A : Set) (R : A -> A -> Prop) (M N : A),
explicit_star _ R M N ->
M = N \/ (exists u : A, R M u /\ explicit_star _ R u N).
intros A R M N H; elim H.
intros x; left; trivial.
intros x y z H1 H2 H3; right; exists y; split; trivial.
Save star_case.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y z : A),
explicit_rel_plus _ R x y ->
explicit_rel_plus _ R y z -> explicit_rel_plus _ R x z.
simple induction 1.
intros; apply relplus_trans1 with y0; trivial.
intros; apply relplus_trans1 with y0; auto.
Save Rplus_transitive.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y : A),
explicit_rel_plus _ R x y -> explicit_star _ R x y.
simple induction 1; intros.
auto.
apply star_trans1 with y0; auto.
Save Rplus_Rstar.

Hint Resolve Rplus_Rstar.

Goal
forall (A : Set) (R : A -> A -> Prop) (x y z : A),
explicit_star _ R x y ->
explicit_rel_plus _ R y z -> exists u : A, R x u /\ explicit_star _ R u z.
simple induction 1; intros.
elim H0; intros.
exists y0; auto.
exists y0; auto.
exists y0; split; trivial.
apply star_trans with z0; auto.
Save Rstar_Rplus_R.

Goal
forall (A : Set) (R : A -> A -> Prop),
explicit_noetherian _ R ->
forall A1 : a_set A,
hereditary A (explicit_rel_plus _ R) A1 ->
universal A (adjoint A (explicit_star _ R) A1).
unfold explicit_noetherian in |- *; unfold hereditary in |- *;
 unfold universal in |- *; unfold sub in |- *; intros A R N A1 H x.
apply (N (adjoint A (explicit_star _ R) A1)).
unfold adjoint in |- *; unfold sub in |- *; intros.
apply H; unfold adjoint in |- *; unfold sub in |- *; intros.
elim Rstar_Rplus_R with A R x0 x1 x2; trivial.
intro z; simple induction 1; intros C1 C2; apply H0 with z; trivial.
Save noetherian_course_of_values.

Lemma plus_preserves_noetherian :
 forall (A : Set) (R : A -> A -> Prop),
 explicit_noetherian _ R -> explicit_noetherian _ (explicit_rel_plus _ R).

Lemma noetherian_induction1 :
 forall (A : Set) (R : A -> A -> Prop),
 explicit_noetherian _ R ->
 forall (x : A) (P : A -> Prop),
 (forall y : A, (forall z : A, R y z -> P z) -> P y) -> P x.

Lemma noetherian_induction :
 forall (A : Set) (R : A -> A -> Prop),
 explicit_noetherian _ R ->
 forall (x : A) (P : A -> Prop),
 (forall y : A, (forall z : A, explicit_rel_plus _ R y z -> P z) -> P y) ->
 P x.

Lemma noether_inclus :
 forall (A : Set) (R R' : A -> A -> Prop),
 explicit_noetherian _ R ->
 (forall x y : A, R' x y -> R x y) -> explicit_noetherian _ R'.

Goal
forall (A : Set) (R S : A -> A -> Prop),
explicit_inclus _ R (explicit_star _ S) ->
explicit_inclus _ (explicit_star _ R) (explicit_star _ S).
intros A R S H; red in |- *; simple induction 1.
auto.
intros x0 y0 z H1 H2 H3; apply star_trans with y0; auto.
Save inclus_star.

Goal
forall (A : Set) (R S : A -> A -> Prop),
explicit_inclus _ R S ->
explicit_inclus _ (explicit_star _ R) (explicit_star _ S).
unfold explicit_inclus in |- *; simple induction 2.
auto.
intros x0 y0 z H1 H2 H3; apply star_trans1 with y0.
apply (H x0 y0 H1).
assumption.
Save inclus_reg_star.
Hint Resolve inclus_reg_star.

Goal
forall (A : Set) (R1 R2 S : A -> A -> Prop),
explicit_inclus _ R1 S ->
explicit_inclus _ R2 S ->

(forall x y z : A, S x y -> S y z -> S x z) ->
explicit_inclus _ (explicit_comp_rel _ R1 R2) S.   
intros A R1 R2 S H H0 H1; red in |- *; simple induction 1.
intros x0 y0 z H3 H4; apply H1 with y0; auto.
Save inclus_comp.
Hint Resolve inclus_comp.

Goal
forall (A : Set) (R : A -> A -> Prop),
explicit_strong_confluence _ R -> explicit_confluence _ R.
intros A R H; red in |- *; red in |- *.
intros x y z H1; generalize z; elim H1.
intros x0 z0 H2; exists z0; split; auto.
intros x0 y0 y1 H2 H3 H4 z0 H5.
cut (exists u : A, explicit_star _ R y0 u /\ R z0 u).
intro H6; elim H6; intros z1 H7; elim H7; intros H8 H9.
elim (H4 z1 H8); intros u H10; elim H10; intros H11 H12.
exists u; split.
assumption.
apply star_trans1 with z1; assumption.
generalize H2; generalize y0; elim H5.
intros x1 y2 H6; exists y2; split; auto.
intros x1 y2 z1 H6 H7 H8 y3 H9; elim (H x1 y3 y2).
intros x2 H10; elim H10; intros H11 H12.
elim (H8 x2 H12); intros u H13; elim H13; intros H14 H15.
exists u; split; [ apply star_trans1 with x2; assumption | assumption ];
 trivial.
assumption.
assumption.
Save strong_conf_conf.

Goal
forall (A : Set) (R S : A -> A -> Prop),
explicit_inclus _ R S ->
explicit_inclus _ S (explicit_star _ R) ->
explicit_confluence _ S -> explicit_confluence _ R.
red in |- *; red in |- *; intros A R S H H0 H1 x y z H2 H3.
cut (explicit_inclus _ (explicit_star _ R) (explicit_star _ S)).
2: auto.
intro H4; elim (H1 x y z (H4 x y H2) (H4 x z H3)).
intros x' H5; elim H5; intros H6 H7.
exists x'; split.
exact (inclus_star A S R H0 y x' H6).
exact (inclus_star A S R H0 z x' H7).
Save inclus_conf. *)



Section YokouchiS.

 Variable A : Set.

 Variable R S : A -> A -> Prop.

 Hypothesis C : explicit_confluence _ R.

 Hypothesis N : explicit_noetherian _ R.

 Hypothesis SC : explicit_strong_confluence _ S.

 Definition Rstar_S_Rstar :=

   explicit_comp_rel _ (explicit_star _ R)

     (explicit_comp_rel _ S (explicit_star _ R)).

 Hypothesis

   commut1 :

     forall f g h : A,

     R f h ->

     S f g -> exists k : A, explicit_star _ R g k /\ Rstar_S_Rstar h k.



   Goal

forall f g h : A,

explicit_star _ R f g -> Rstar_S_Rstar g h -> Rstar_S_Rstar f h.

   intros f g h H1 H2.

   elim

    (comp_case A (explicit_star _ R)

       (explicit_comp_rel _ S (explicit_star _ R)) g h H2).

   intros f' H3; elim H3; intros H4 H5.

   red in |- *; apply comp_2rel with f'.

   apply star_trans with g; assumption.

   assumption.

   Save comp_l.



   Goal

forall f g h : A,

Rstar_S_Rstar f g -> explicit_star _ R g h -> Rstar_S_Rstar f h.

   intros f g h H1 H2.

   elim

    (comp_case A (explicit_star _ R)

       (explicit_comp_rel _ S (explicit_star _ R)) f g H1).

   intros f' H3; elim H3; intros H4 H5.

   elim (comp_case A S (explicit_star _ R) f' g H5).

   intros f'' H6; elim H6; intros H7 H8.

   red in |- *; apply comp_2rel with f'.

   assumption.

   apply comp_2rel with f''.

   assumption.

   apply star_trans with g; assumption.

   Save comp_r.



   Goal

forall f g h : A,

explicit_star _ R f h ->

S f g -> exists k : A, explicit_star _ R g k /\ Rstar_S_Rstar h k.

   intro f; pattern f in |- *; apply (noetherian_induction A R N);

    intros f0 H g h H1 H2.

   elim (star_case A R f0 h H1); intro H3.

   

   exists g; split. 

   apply star_refl.

   elim H3; red in |- *; apply comp_2rel with f0.

   apply star_refl.

   apply comp_2rel with g; [ assumption | apply star_refl ].

   

   elim H3; intros f1 H4; elim H4; intros H5 H6. 

   cut (exists k : A, explicit_star _ R g k /\ Rstar_S_Rstar f1 k).

   intro H7; elim H7; intros g1 H8; elim H8; intros H9 H10.

   2: apply commut1 with f0; assumption.

   cut

    (exists f2 : A,

       explicit_star _ R f1 f2 /\

       explicit_comp_rel _ S (explicit_star _ R) f2 g1).

   2: apply comp_case; assumption.

   intro H11; elim H11; intros f2 H12; elim H12; intros H13 H14.

   cut (exists f3 : A, S f2 f3 /\ explicit_star _ R f3 g1).

   2: apply comp_case; assumption.

   intro H15; elim H15; intros f3 H16; elim H16; intros H17 H18.

   elim (C f1 h f2 H6 H13); intros h1 H19; elim H19; intros H20 H21.

   elim (H f2) with f3 h1.

   2: apply comp_relplus; apply comp_2rel with f1; assumption.

   2: assumption.

   2: assumption.

   intros h2 H22; elim H22; intros H23 H24.

   elim (C f3 h2 g1 H23 H18); intros k H25; elim H25; intros H26 H27.

   exists k; split.

   apply star_trans with g1; assumption.

   apply comp_l with h1.

   assumption.

   apply comp_r with h2; assumption.

   Save commut2.



   Theorem Yokouchi : explicit_strong_confluence _ Rstar_S_Rstar.

   unfold explicit_strong_confluence in |- *; intro f; pattern f in |- *;

    apply (noetherian_induction1 A R N).

   intros f0 H; unfold strong_confluence_en in |- *; intros g h H1 H2.

   cut

    (exists u : A,

       explicit_star _ R f0 u /\

       explicit_comp_rel _ S (explicit_star _ R) u h).

   2: apply comp_case; assumption.

   intro H3; elim H3; intros f1 H4; elim H4; intros H5 H6.

   cut

    (exists u : A,

       explicit_star _ R f0 u /\

       explicit_comp_rel _ S (explicit_star _ R) u g).

   2: apply comp_case; assumption.

   intro H7; elim H7; intros g1 H8; elim H8; intros H9 H10.

   elim (star_case A R f0 f1 H5); intro H11.

   elim (star_case A R f0 g1 H9); intro H12.

   

   generalize H6; elim H11; intro H6'.

   generalize H10; elim H12; intro H10'.

   elim (comp_case A S (explicit_star _ R) f0 h H6'); intros f2 H13.

   elim H13; intros H14 H15.

   elim (comp_case A S (explicit_star _ R) f0 g H10'); intros g2 H16.

   elim H16; intros H17 H18.

   elim (SC f0 f2 g2 H14 H17); intros k1 H19; elim H19; intros H20 H21.

   elim (commut2 g2 k1 g H18 H21); intros k2 H22; elim H22; intros H23 H24.

   elim (commut2 f2 k1 h H15 H20); intros h1 H25; elim H25; intros H26 H27.

   elim (C k1 h1 k2 H26 H23); intros k H28; elim H28; intros H29 H30.

   exists k; split.

   apply comp_r with k2; assumption.

   apply comp_r with h1; assumption.

   

   elim H12; intros g2 H13; elim H13; intros H14 H15.   

   generalize H6; elim H11; intro H6'.

   elim (comp_case A S (explicit_star _ R) f0 h H6'); intros f2 H16.

   elim H16; intros H17 H18. 

   elim (commut1 f0 f2 g2 H14 H17); intros k1 H19; elim H19; intros H20 H21.

   elim (C f2 h k1 H18 H20); intros h1 H22; elim H22; intros H23 H24.

   elim (H g2 H14 g h1).

   2: red in |- *; apply comp_2rel with g1; assumption. 

   2: apply comp_r with k1; assumption.

   intros k H25; elim H25; intros H26 H27.

   exists k; split.

   assumption.

   apply comp_l with h1; assumption.

   

   elim H11; intros f2 H12; elim H12; intros H13 H14. 

   elim (C f0 f2 g1).

   2: apply star_trans1 with f2.

   2: assumption.

   2: apply star_refl.

   2: assumption.

   intros k1 H15; elim H15; intros H16 H17.

   elim (comp_case A S (explicit_star _ R) g1 g H10); intros g2 H18.

   elim H18; intros H19 H20.

   elim (commut2 g1 g2 k1 H17 H19); intros k2 H21; elim H21; intros H22 H23.

   elim (C g2 k2 g H22 H20); intros k3 H24; elim H24; intros H25 H26.

   elim (H f2 H13 h k3).

   2: red in |- *; apply comp_2rel with f1; assumption.

   2: apply comp_l with k1.

   2: assumption.

   2: apply comp_r with k2; assumption.

   intros k H27; elim H27; intros H28 H29.

   exists k; split.

   apply comp_l with k3; assumption.

   assumption.

   Qed.



End YokouchiS.

