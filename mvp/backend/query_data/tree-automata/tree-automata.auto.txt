
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
(* bases:
Require Import Bool.
Require Import Arith.
Require Import ZArith.
Require Import NArith.
Require Import Ndec.
From IntMap Require Import Allmaps.
Require Import EqNat.
Require Export Max.

Lemma nat_sum : forall n : nat, n = 0 \/ (exists m : nat, n = S m).

Lemma le_n_n : forall n : nat, n <= n.

Lemma le_l_or_r : forall n m : nat, n <= m \/ m <= n.

Lemma plus_n_O : forall n : nat, n + 0 = n.
 
 Lemma S_plus_l : forall n m : nat, S (n + m) = S n + m.
 
 Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.

Lemma max_le_Sr_0 :
 forall n m : nat, max n m <= max n (S m) /\ max (S n) m <= max (S n) (S m).

Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).

Lemma plus_O_r : forall n : nat, n + 0 = n.

Lemma plus_O_l : forall n : nat, n + 0 = n.

Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.

Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.

Lemma le_disj : forall n m : nat, n <= m -> n = m \/ S n <= m.

Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.

Lemma le_mult_r : forall n m p : nat, n <= m -> p * n <= p * m.

Lemma le_mult_mult : forall n m p q : nat, n <= m -> p <= q -> n * p <= m * q.

Lemma Sn_eq_Sm_n_eq_m : forall n m : nat, S n = S m -> n = m.

Lemma bool_dec_eq : forall a b : bool, {a = b} + {a <> b}.

Lemma bool_is_false_or_true : forall a : bool, a = false \/ a = true.

Lemma bool_is_true_or_false : forall a : bool, a = true \/ a = false.

Lemma in_M0_false :
 forall (A : Set) (a : A), ~ (exists e : ad, MapGet A (M0 A) e = Some a).

Lemma in_M1_id :
 forall (A : Set) (a : A) (x : ad) (e : A),
 (exists c : ad, MapGet A (M1 A x e) c = Some a) -> a = e.

Lemma in_M2_disj :
 forall (A : Set) (a : A) (m0 m1 : Map A),
 (exists c : ad, MapGet A (M2 A m0 m1) c = Some a) ->
 (exists c : ad, MapGet A m0 c = Some a) \/
 (exists c : ad, MapGet A m1 c = Some a).

Lemma aux_Neqb_1_0 : forall p : positive, Peqb p p = true.

Lemma aux_Neqb_1_1 : forall p p0 : positive, Peqb p p0 = true -> p = p0.

Lemma aux_Neqb_trans :
 forall a b c : ad, Neqb a b = true -> Neqb b c = true -> Neqb a c = true.

Lemma indprinciple_nat_gen :
 forall P : nat -> Prop,
 (forall n : nat, (forall m : nat, m < n -> P m) -> P n) ->
 forall n m : nat, m <= n -> P m.

Lemma beq_nat_complete : forall n m : nat, beq_nat n m = true -> n = m.

Lemma beq_nat_correct : forall n : nat, beq_nat n n = true. *)
Require Import defs.
(* defs:
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import EqNat.
Require Import bases.

Inductive term : Set :=
    app : ad -> term_list -> term
with term_list : Set :=
  | tnil : term_list
  | tcons : term -> term_list -> term_list.

Scheme term_term_list_rec := Induction for term
  Sort Set
  with term_list_term_rec := Induction for term_list 
  Sort Set.

Scheme term_term_list_ind := Induction for term
  Sort Prop
  with term_list_term_ind := Induction for term_list 
  Sort Prop.

Lemma term_list_disj :
 forall l : term_list,
 l = tnil \/ (exists hd : term, (exists tl : term_list, l = tcons hd tl)).

Fixpoint lst_length (l : term_list) : nat :=
  match l with
  | tnil => 0
  | tcons _ l' => S (lst_length l')
  end.

Fixpoint term_high (t : term) : nat :=
  match t with
  | app a l => S (term_high_0 l)
  end
 
 with term_high_0 (l : term_list) : nat :=
  match l with
  | tnil => 0
  | tcons hd tl => max (term_high hd) (term_high_0 tl)
  end.

Lemma high_aux_0 :
 forall (a : ad) (l : term_list), S (term_high_0 l) <= term_high (app a l).

Lemma high_aux_1 :
 forall (a : ad) (l : term_list), S (term_high_0 l) = term_high (app a l).

Lemma high_aux_2 : forall (l : term_list) (c : ad), 1 <= term_high (app c l).

Lemma high_aux_3 :
 forall (t : term) (tl : term_list), term_high t <= term_high_0 (tcons t tl).

Lemma high_aux_4 :
 forall (t : term) (tl : term_list),
 term_high_0 tl <= term_high_0 (tcons t tl).

Fixpoint taille_term (t : term) : nat :=
  match t with
  | app c l => S (mtaille_term_list l)
  end
 
 with mtaille_term_list (l : term_list) : nat :=
  match l with
  | tnil => 0
  | tcons hd tl => max (taille_term hd) (mtaille_term_list tl)
  end.

Inductive prec_list : Set :=
  | prec_cons : ad -> prec_list -> prec_list -> prec_list
  | prec_empty : prec_list.

Lemma pl_sum :
 forall pl : prec_list,
 pl = prec_empty \/
 (exists a : ad,
    (exists la : prec_list, (exists ls : prec_list, pl = prec_cons a la ls))).

Definition state := Map prec_list.

Definition preDTA := Map state.

Inductive DTA : Set :=
    dta : preDTA -> ad -> DTA.

Fixpoint taille_0 (l : prec_list) : nat :=
  match l with
  | prec_empty => 0
  | prec_cons x y z => S (taille_0 y + taille_0 z)
  end.

Fixpoint taille_1 (s : state) : nat :=
  match s with
  | M0 => 0
  | M1 x y => taille_0 y
  | M2 x y => max (taille_1 x) (taille_1 y)
  end.

Fixpoint DTA_taille (d : preDTA) : nat :=
  match d with
  | M0 => 0
  | M1 x y => taille_1 y
  | M2 x y => max (DTA_taille x) (DTA_taille y)
  end.

Lemma taille_aux_0 :
 forall (a : ad) (la ls : prec_list),
 S (taille_0 la) <= taille_0 (prec_cons a la ls).

Lemma taille_aux_1 :
 forall (a : ad) (la ls : prec_list), 1 <= taille_0 (prec_cons a la ls).

Lemma taille_aux_2 :
 forall (a : ad) (la ls : prec_list),
 S (taille_0 ls) <= taille_0 (prec_cons a la ls).

Inductive prec_occur : prec_list -> ad -> Prop :=
  | prec_hd :
      forall (a : ad) (pl0 pl1 : prec_list),
      prec_occur (prec_cons a pl0 pl1) a
  | prec_int0 :
      forall (a b : ad) (pl0 pl1 : prec_list),
      prec_occur pl0 b -> prec_occur (prec_cons a pl0 pl1) b
  | prec_int1 :
      forall (a b : ad) (pl0 pl1 : prec_list),
      prec_occur pl1 b -> prec_occur (prec_cons a pl0 pl1) b.

Inductive prec_contained : prec_list -> prec_list -> Prop :=
  | prec_id : forall p : prec_list, prec_contained p p
  | prec_c_int0 :
      forall (p p0 p1 : prec_list) (a : ad),
      prec_contained p p0 -> prec_contained p (prec_cons a p0 p1)
  | prec_c_int1 :
      forall (p p0 p1 : prec_list) (a : ad),
      prec_contained p p1 -> prec_contained p (prec_cons a p0 p1).

Definition state_in_dta (d : preDTA) (s : state) : Prop :=
  exists a : ad, MapGet state d a = Some s.

Definition state_in_dta_diff (d : preDTA) (s : state) 
  (a : ad) : Prop := exists b : ad, MapGet state d b = Some s /\ a <> b.

Definition prec_in_dta (d : preDTA) (p : prec_list) : Prop :=
  exists s : state,
    (exists a : ad,
       (exists c : ad,
          MapGet state d a = Some s /\
          MapGet prec_list s c = Some p)).

Definition prec_in_dta_cont (d : preDTA) (p : prec_list) : Prop :=
  exists s : state,
    (exists b : ad,
       (exists c : ad,
          (exists p0 : prec_list,
             MapGet state d b = Some s /\
             MapGet prec_list s c = Some p0 /\ prec_contained p p0))).

Definition prec_in_dta_diff (d : preDTA) (p : prec_list) 
  (a : ad) : Prop :=
  exists s : state,
    (exists b : ad,
       (exists c : ad,
          MapGet state d b = Some s /\
          MapGet prec_list s c = Some p /\ a <> b)).

Definition prec_in_dta_diff_cont (d : preDTA) (p : prec_list) 
  (a : ad) : Prop :=
  exists s : state,
    (exists b : ad,
       (exists c : ad,
          (exists p0 : prec_list,
             MapGet state d b = Some s /\
             MapGet prec_list s c = Some p0 /\
             prec_contained p p0 /\ a <> b))).

Definition prec_in_state (s : state) (p : prec_list) : Prop :=
  exists c : ad, MapGet prec_list s c = Some p.

Lemma prec_in_state_M0_false :
 forall p : prec_list, ~ prec_in_state (M0 prec_list) p.

Lemma state_in_dta_M0_false : forall s : state, ~ state_in_dta (M0 state) s.

Lemma prec_occur_1 :
 forall (a : ad) (p0 p1 p2 : prec_list),
 prec_contained (prec_cons a p0 p1) p2 -> prec_occur p2 a.

Lemma prec_contained_0 :
 forall (a : ad) (p0 p1 p2 : prec_list),
 prec_contained (prec_cons a p0 p1) p2 -> prec_contained p0 p2.

Lemma prec_contained_1 :
 forall (a : ad) (p0 p1 p2 : prec_list),
 prec_contained (prec_cons a p0 p1) p2 -> prec_contained p1 p2.

Inductive term_occur : term -> term -> Prop :=
  | to_eq : forall t : term, term_occur t t
  | to_st :
      forall (t : term) (a : ad) (tl : term_list),
      term_list_occur t tl -> term_occur t (app a tl)
with term_list_occur : term -> term_list -> Prop :=
  | tlo_head :
      forall (t hd : term) (tl : term_list),
      term_occur t hd -> term_list_occur t (tcons hd tl)
  | tlo_tail :
      forall (t hd : term) (tl : term_list),
      term_list_occur t tl -> term_list_occur t (tcons hd tl).

Definition term_occur_def_0 (t : term) :=
  forall u : term, term_occur u t -> term_high u <= term_high t.

Definition term_occur_def_1 (t : term_list) :=
  forall u : term, term_list_occur u t -> term_high u <= term_high_0 t.

Lemma term_occur_0_0 :
 forall (a : ad) (t : term_list),
 term_occur_def_1 t -> term_occur_def_0 (app a t).

Lemma term_occur_0_1 : term_occur_def_1 tnil.

Lemma term_occur_0_2 :
 forall t : term,
 term_occur_def_0 t ->
 forall t0 : term_list, term_occur_def_1 t0 -> term_occur_def_1 (tcons t t0).

Lemma term_occur_0 :
 forall t u : term, term_occur u t -> term_high u <= term_high t.

Lemma term_occur_1 :
 forall (t : term_list) (u : term),
 term_list_occur u t -> term_high u <= term_high_0 t.

Definition indprinciple_3_aux (n : nat) :=
  forall P : term -> Prop,
  (forall (a : ad) (tl : term_list),
   (forall u : term, term_list_occur u tl -> P u) -> P (app a tl)) ->
  forall t : term, term_high t <= n -> P t.

Lemma indprinciple_3_0 : indprinciple_3_aux 0.

Lemma indprinciple_3_1 :
 forall n : nat, indprinciple_3_aux n -> indprinciple_3_aux (S n).

Lemma indprinciple_3_2 :
 forall (n : nat) (P : term -> Prop),
 (forall (a : ad) (tl : term_list),
  (forall u : term, term_list_occur u tl -> P u) -> P (app a tl)) ->
 forall t : term, term_high t <= n -> P t.

Lemma indprinciple_term :
 forall P : term -> Prop,
 (forall (a : ad) (tl : term_list),
  (forall u : term, term_list_occur u tl -> P u) -> P (app a tl)) ->
 forall t : term, P t.

Lemma Ndouble_inv_N0 : forall x : ad, Ndouble x = N0 -> x = N0.

Lemma Ndouble_inv_xO :
 forall (x : ad) (p : positive), Ndouble x = Npos (xO p) -> x = Npos p.

Lemma Ndouble_plus_one_inv_xH :
 forall x : ad, Ndouble_plus_one x = Npos 1 -> x = N0.

Lemma Ndouble_plus_one_inv_xI :
 forall (x : ad) (p : positive),
 Ndouble_plus_one x = Npos (xI p) -> x = Npos p. *)
Require Import empty_test.
(* empty_test:
Require Import Bool.
Require Import Arith.
Require Import NArith.
Require Import Ndec.
Require Import ZArith.
Require Import Classical_Prop.
From IntMap Require Import Allmaps.
Require Import lattice_fixpoint.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import pl_path.

Fixpoint pl_non_empty (m : Map bool) (p : prec_list) {struct p} : bool :=
  match p with
  | prec_empty => true
  | prec_cons a la ls =>
      match ls with
      | prec_empty =>
          match MapGet bool m a with
          | Some b => b && pl_non_empty m la
          | None => false
          end
      | prec_cons _ _ _ =>
          match MapGet bool m a with
          | Some b => pl_non_empty m ls || b && pl_non_empty m la
          | None => pl_non_empty m ls
          end
      end
  end.

Fixpoint st_non_empty (m : Map bool) (s : state) {struct s} : bool :=
  match s with
  | M0 => false
  | M1 _ p => pl_non_empty m p
  | M2 a b => st_non_empty m a || st_non_empty m b
  end.

Fixpoint dta_app_ne_aux (d : preDTA) (m r : Map bool) {struct r} :
 Map bool :=
  match d, r with
  | M0, _ => M0 bool
  | M1 a s, M0 => M0 bool
  | M1 a s, M1 a' b =>
      if Neqb a a' then M1 bool a (b || st_non_empty m s) else M0 bool
  | M1 a s, M2 _ _ => M0 bool
  | M2 d0 d1, M0 => M0 bool
  | M2 d0 d1, M1 _ _ => M0 bool
  | M2 d0 d1, M2 r0 r1 =>
      M2 bool (dta_app_ne_aux d0 m r0) (dta_app_ne_aux d1 m r1)
  end.

Definition dta_app_ne (d : preDTA) (m : Map bool) : 
  Map bool := dta_app_ne_aux d m m.

Definition dta_non_empty_states (d : preDTA) : Map bool :=
  power (Map bool) (dta_app_ne d) (map_mini state d) (S (MapCard state d)).

Definition dta_states_non_empty (d : DTA) : Map bool :=
  match d with
  | dta p a => dta_non_empty_states p
  end.

Definition dta_non_empty_states_lazy (d : preDTA) : 
  Map bool :=
  lazy_power bool eqm_bool (dta_app_ne d) (map_mini state d)
    (S (MapCard state d)).

Definition dta_states_non_empty_lazy (d : DTA) : Map bool :=
  match d with
  | dta p a => dta_non_empty_states_lazy p
  end.

Lemma dta_states_non_empty_lazy_eg_dta_states_non_empty :
 forall d : DTA, dta_states_non_empty_lazy d = dta_states_non_empty d.

Lemma dta_app_ne_aux_def_ok :
 forall (d : preDTA) (m : Map bool),
 def_ok_app bool (ensemble_base state d) (dta_app_ne_aux d m).

Lemma dta_app_ne_def_ok :
 forall d : preDTA, def_ok_app bool (ensemble_base state d) (dta_app_ne d).

Lemma dta_app_ne_inc_0 :
 forall (p : prec_list) (m0 m1 : Map bool),
 lem m0 m1 -> leb (pl_non_empty m0 p) (pl_non_empty m1 p).

Lemma dta_app_ne_inc_1 :
 forall (s : state) (m0 m1 : Map bool),
 lem m0 m1 -> leb (st_non_empty m0 s) (st_non_empty m1 s).

Lemma dta_app_ne_inc_2 :
 forall (d : preDTA) (m0 m1 m : Map bool),
 lem m0 m1 -> lem (dta_app_ne_aux d m0 m) (dta_app_ne_aux d m1 m).

Lemma dta_app_ne_inc_3 :
 forall (m0 m1 m : Map bool) (d : preDTA),
 lem m0 m1 -> lem (dta_app_ne_aux d m m0) (dta_app_ne_aux d m m1).

Lemma dta_app_ne_inc :
 forall d : preDTA, increasing_app bool lem (dta_app_ne d).

Inductive pl_path_true : pl_path -> Map bool -> Prop :=
  | plp_true_nil : forall m : Map bool, pl_path_true pl_path_nil m
  | plp_true_cons :
      forall (m : Map bool) (a : ad) (pl : pl_path),
      pl_path_true pl m ->
      MapGet bool m a = Some true -> pl_path_true (pl_path_cons a pl) m.

Definition pl_non_empty_path_true_def_0 (pl : pl_path) 
  (p : prec_list) : Prop :=
  forall m : Map bool,
  pl_path_incl pl p -> pl_path_true pl m -> pl_non_empty m p = true.

Lemma pl_non_empty_path_true_0 :
 pl_non_empty_path_true_def_0 pl_path_nil prec_empty.

Lemma pl_non_empty_path_true_1 :
 forall (plp : pl_path) (a : ad) (la ls : prec_list),
 pl_path_incl plp la ->
 pl_non_empty_path_true_def_0 plp la ->
 pl_non_empty_path_true_def_0 (pl_path_cons a plp) (prec_cons a la ls).

Lemma pl_non_empty_path_true_2 :
 forall (plp : pl_path) (a : ad) (la ls : prec_list),
 pl_path_incl plp ls ->
 pl_non_empty_path_true_def_0 plp ls ->
 plp <> pl_path_nil -> pl_non_empty_path_true_def_0 plp (prec_cons a la ls).

Lemma pl_non_empty_path_true :
 forall (pl : pl_path) (p : prec_list) (m : Map bool),
 pl_path_incl pl p -> pl_path_true pl m -> pl_non_empty m p = true.

Lemma pl_non_empty_path_true_rev :
 forall (p : prec_list) (m : Map bool),
 pl_non_empty m p = true ->
 exists plp : pl_path, pl_path_incl plp p /\ pl_path_true plp m.

Lemma st_non_empty_0 :
 forall (m : Map bool) (s : state) (p : prec_list) (a : ad),
 MapGet prec_list s a = Some p ->
 pl_non_empty m p = true -> st_non_empty m s = true.

Lemma st_non_empty_1 :
 forall (d : preDTA) (m r : Map bool) (a : ad) (l : state),
 MapGet state d a = Some l ->
 domain_equal state bool d r ->
 st_non_empty m l = true ->
 MapGet bool (dta_app_ne_aux d m r) a = Some true.

Definition dt_non_empty_def_0 (d : preDTA) (a : ad) 
  (t : term) (pr : reconnaissance d a t) :=
  forall n : nat,
  term_high t <= n ->
  MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
  Some true.

Definition dt_non_empty_def_1 (d : preDTA) (s : state) 
  (t : term) (pr : state_reconnait d s t) :=
  forall n : nat,
  term_high t <= S n ->
  st_non_empty (power (Map bool) (dta_app_ne d) (map_mini state d) n) s =
  true.

Definition dt_non_empty_def_2 (d : preDTA) (p : prec_list) 
  (t : term_list) (pr : liste_reconnait d p t) :=
  forall n : nat,
  term_high_0 t <= n ->
  pl_non_empty (power (Map bool) (dta_app_ne d) (map_mini state d) n) p =
  true.

Lemma dt_non_empty_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 dt_non_empty_def_1 d ladj t s ->
 dt_non_empty_def_0 d a t (rec_dta d a t ladj e s).

Lemma dt_non_empty_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 dt_non_empty_def_2 d l tl l0 ->
 dt_non_empty_def_1 d s (app c tl) (rec_st d s c tl l e l0).

Lemma dt_non_empty_2 :
 forall d : preDTA, dt_non_empty_def_2 d prec_empty tnil (rec_empty d).

Lemma dt_non_empty_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 dt_non_empty_def_0 d a hd r ->
 forall l : liste_reconnait d la tl,
 dt_non_empty_def_2 d la tl l ->
 dt_non_empty_def_2 d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma dt_non_empty_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 dt_non_empty_def_2 d ls (tcons hd tl) l ->
 dt_non_empty_def_2 d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma dt_non_empty_5 :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance d a t ->
 forall n : nat,
 term_high t <= n ->
 MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
 Some true.

Lemma dt_non_empty_6 :
 forall (p : preDTA) (p0 : prec_list) (t : term_list)
   (l : liste_reconnait p p0 t), dt_non_empty_def_2 p p0 t l.

Lemma dt_non_empty_d :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance d a t ->
 exists n : nat,
   MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
   Some true.

Lemma dt_non_empty_7 :
 forall (d : preDTA) (p : prec_list) (t : term_list),
 liste_reconnait d p t ->
 pl_non_empty
   (power (Map bool) (dta_app_ne d) (map_mini state d) (term_high_0 t)) p =
 true.

Lemma dt_non_empty_r_0 :
 forall (d : preDTA) (m r : Map bool) (a : ad) (l : state),
 MapGet state d a = Some l ->
 domain_equal state bool d r ->
 MapGet bool (dta_app_ne_aux d m r) a = Some true ->
 MapGet bool r a = Some true \/ st_non_empty m l = true.

Lemma dt_non_empty_r_1 :
 forall (s : state) (m : Map bool),
 st_non_empty m s = true ->
 exists c : ad,
   (exists p : prec_list,
      MapGet prec_list s c = Some p /\ pl_non_empty m p = true).

Lemma dt_non_empty_r_2 :
 forall (p : prec_list) (m : Map bool),
 pl_non_empty m p = true ->
 exists pl : pl_path, pl_path_true pl m /\ pl_path_incl pl p.

Definition dt_non_empty_r_def_0 (n : nat) : Prop :=
  forall (d : preDTA) (a : ad),
  MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
  Some true -> exists t : term, reconnaissance d a t.

Lemma dt_non_empty_r_3 : dt_non_empty_r_def_0 0.

Lemma dt_non_empty_r_4 :
 forall (p : prec_list) (n : nat) (d : preDTA) (pl : pl_path),
 dt_non_empty_r_def_0 n ->
 pl_path_true pl (power (Map bool) (dta_app_ne d) (map_mini state d) n) ->
 pl_path_incl pl p -> exists tl : term_list, liste_reconnait d p tl.

Lemma dt_non_empty_r_5 :
 forall n : nat, dt_non_empty_r_def_0 n -> dt_non_empty_r_def_0 (S n).

Lemma dt_non_empty_r :
 forall (n : nat) (d : preDTA) (a : ad),
 MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
 Some true -> exists t : term, reconnaissance d a t.

Lemma dt_non_empty_fix_0 :
 forall d : preDTA,
 lower_fix_point bool (ensemble_base state d) lem (dta_app_ne d)
   (dta_non_empty_states d).

Lemma dt_non_empty_fix_1 :
 forall (d : preDTA) (a : ad) (n : nat),
 MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
 Some true -> MapGet bool (dta_non_empty_states d) a = Some true.

Lemma dt_non_empty_fix_2 :
 forall (d : preDTA) (a : ad),
 MapGet bool (dta_non_empty_states d) a = Some true ->
 exists n : nat,
   MapGet bool (power (Map bool) (dta_app_ne d) (map_mini state d) n) a =
   Some true.

Lemma dt_non_empty_fix :
 forall (d : preDTA) (a : ad),
 MapGet bool (dta_non_empty_states d) a = Some true <->
 (exists t : term, reconnaissance d a t).

Lemma dt_non_empty_lazy_fix :
 forall (d : preDTA) (a : ad),
 MapGet bool (dta_non_empty_states_lazy d) a = Some true <->
 (exists t : term, reconnaissance d a t). *)
Require Import inter.
(* inter:
Require Import Arith.
Require Import NArith Ndec.
Require Import ZArith.
Require Import Bool.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import pl_path.
Require Import signature.

Fixpoint iad_conv_aux_0 (p : positive) : positive :=
  match p with
  | xH => 2%positive
  | xO p' => xO (xO (iad_conv_aux_0 p'))
  | xI p' => xO (xI (iad_conv_aux_0 p'))
  end.

Fixpoint iad_conv_aux_1 (p : positive) : positive :=
  match p with
  | xH => 1%positive
  | xO p' => xO (xO (iad_conv_aux_1 p'))
  | xI p' => xI (xO (iad_conv_aux_1 p'))
  end.

Fixpoint iad_conv_aux_2 (p0 p1 : positive) {struct p1} : positive :=
  match p0, p1 with
  | xH, xH => 3%positive
  | xH, xO p1' => xI (xO (iad_conv_aux_0 p1'))
  | xH, xI p1' => xI (xI (iad_conv_aux_0 p1'))
  | xO p0', xH => xO (xI (iad_conv_aux_1 p0'))
  | xO p0', xO p1' => xO (xO (iad_conv_aux_2 p0' p1'))
  | xO p0', xI p1' => xO (xI (iad_conv_aux_2 p0' p1'))
  | xI p0', xH => xI (xI (iad_conv_aux_1 p0'))
  | xI p0', xO p1' => xI (xO (iad_conv_aux_2 p0' p1'))
  | xI p0', xI p1' => xI (xI (iad_conv_aux_2 p0' p1'))
  end.

Definition iad_conv (a0 a1 : ad) : ad :=
  match a0, a1 with
  | N0, N0 => N0
  | N0, Npos p1 => Npos (iad_conv_aux_0 p1)
  | Npos p0, N0 => Npos (iad_conv_aux_1 p0)
  | Npos p0, Npos p1 => Npos (iad_conv_aux_2 p0 p1)
  end.

Lemma iad_conv_aux_0_inj :
 forall p0 p1 : positive, iad_conv_aux_0 p0 = iad_conv_aux_0 p1 -> p0 = p1.

Lemma iad_conv_aux_1_inj :
 forall p0 p1 : positive, iad_conv_aux_1 p0 = iad_conv_aux_1 p1 -> p0 = p1.

Lemma iad_conv_aux_0_1_img_disj :
 forall p0 p1 : positive, iad_conv_aux_0 p0 <> iad_conv_aux_1 p1.

Lemma iad_conv_aux_img_disj :
 forall p0 p1 p2 : positive,
 iad_conv_aux_0 p0 <> iad_conv_aux_2 p1 p2 /\
 iad_conv_aux_1 p0 <> iad_conv_aux_2 p1 p2.

Lemma iad_conv_aux_0_2_img_disj :
 forall p0 p1 p2 : positive, iad_conv_aux_0 p0 <> iad_conv_aux_2 p1 p2.

Lemma iad_conv_aux_1_2_img_disj :
 forall p0 p1 p2 : positive, iad_conv_aux_1 p0 <> iad_conv_aux_2 p1 p2.

Lemma iad_conv_aux_2_inj :
 forall p0 p1 p2 p3 : positive,
 iad_conv_aux_2 p0 p1 = iad_conv_aux_2 p2 p3 -> p0 = p2 /\ p1 = p3.

Lemma iad_conv_inj :
 forall a0 a1 a2 a3 : ad,
 iad_conv a0 a1 = iad_conv a2 a3 -> a0 = a2 /\ a1 = a3.

Definition iad_conv_prop (p : positive) : Prop :=
  (exists q : positive, p = iad_conv_aux_0 q) \/
  (exists q : positive, p = iad_conv_aux_1 q) \/
  (exists q : positive, (exists r : positive, p = iad_conv_aux_2 q r)).

Lemma iad_conv_surj_0 :
 forall p : positive, iad_conv_prop p -> iad_conv_prop (xO (xO p)).

Lemma iad_conv_surj_1 :
 forall p : positive, iad_conv_prop p -> iad_conv_prop (xO (xI p)).

Lemma iad_conv_surj_2 :
 forall p : positive, iad_conv_prop p -> iad_conv_prop (xI (xO p)).

Lemma iad_conv_surj_3 :
 forall p : positive, iad_conv_prop p -> iad_conv_prop (xI (xI p)).

Lemma iad_conv_surj_4 :
 forall p : positive,
 iad_conv_prop p /\ iad_conv_prop (xO p) /\ iad_conv_prop (xI p).

Lemma iad_conv_surj_5 : forall p : positive, iad_conv_prop p.

Lemma iad_conv_surj :
 forall a : ad, exists b : ad, (exists c : ad, a = iad_conv b c).

Inductive ad_couple : Set :=
    cpla : ad -> ad -> ad_couple.

Fixpoint iad_conv_inv_0 (p : positive) : ad_couple :=
  match p with
  | xH => cpla (Npos 1) N0
  | xO xH => cpla N0 (Npos 1)
  | xI xH => cpla (Npos 1) (Npos 1)
  | xO (xO p') =>
      match iad_conv_inv_0 p' with
      | cpla N0 N0 => cpla N0 N0
      | cpla N0 (Npos p1) => cpla N0 (Npos (xO p1))
      | cpla (Npos p0) N0 => cpla (Npos (xO p0)) N0
      | cpla (Npos p0) (Npos p1) => cpla (Npos (xO p0)) (Npos (xO p1))
      end
  | xO (xI p') =>
      match iad_conv_inv_0 p' with
      | cpla N0 N0 => cpla N0 (Npos 1)
      | cpla N0 (Npos p1) => cpla N0 (Npos (xI p1))
      | cpla (Npos p0) N0 => cpla (Npos (xO p0)) (Npos 1)
      | cpla (Npos p0) (Npos p1) => cpla (Npos (xO p0)) (Npos (xI p1))
      end
  | xI (xO p') =>
      match iad_conv_inv_0 p' with
      | cpla N0 N0 => cpla (Npos 1) N0
      | cpla N0 (Npos p1) => cpla (Npos 1) (Npos (xO p1))
      | cpla (Npos p0) N0 => cpla (Npos (xI p0)) N0
      | cpla (Npos p0) (Npos p1) => cpla (Npos (xI p0)) (Npos (xO p1))
      end
  | xI (xI p') =>
      match iad_conv_inv_0 p' with
      | cpla N0 N0 => cpla (Npos 1) (Npos 1)
      | cpla N0 (Npos p1) => cpla (Npos 1) (Npos (xI p1))
      | cpla (Npos p0) N0 => cpla (Npos (xI p0)) (Npos 1)
      | cpla (Npos p0) (Npos p1) => cpla (Npos (xI p0)) (Npos (xI p1))
      end
  end.

Definition iad_conv_inv (a : ad) : ad_couple :=
  match a with
  | N0 => cpla N0 N0
  | Npos p => iad_conv_inv_0 p
  end.

Lemma iad_inv_0 :
 forall p : positive, iad_conv_inv_0 (iad_conv_aux_0 p) = cpla N0 (Npos p).

Lemma iad_inv_1 :
 forall p : positive, iad_conv_inv_0 (iad_conv_aux_1 p) = cpla (Npos p) N0.

Lemma iad_inv_2 :
 forall p0 p1 : positive,
 iad_conv_inv_0 (iad_conv_aux_2 p0 p1) = cpla (Npos p0) (Npos p1).

Lemma iad_inv_inv_0 :
 forall a0 a1 : ad, iad_conv_inv (iad_conv a0 a1) = cpla a0 a1.

Lemma iad_inv_inv_1 :
 forall a a0 a1 : ad, iad_conv_inv a = cpla a0 a1 -> iad_conv a0 a1 = a.

Fixpoint pl_produit_0 (a : ad) (la pl : prec_list) 
 (n : nat) {struct n} : prec_list -> prec_list :=
  fun l : prec_list =>
  match n with
  | O => prec_empty
  | S m =>
      match pl with
      | prec_empty => l
      | prec_cons a0 la0 ls0 =>
          prec_cons (iad_conv a a0) (pl_produit_1 la m la0)
            (pl_produit_0 a la ls0 m l)
      end
  end
 
 with pl_produit_1 (pl0 : prec_list) (n : nat) {struct n} :
 prec_list -> prec_list :=
  fun pl1 : prec_list =>
  match n with
  | O => prec_empty
  | S m =>
      match pl0, pl1 with
      | prec_empty, prec_empty => prec_empty
      | prec_empty, prec_cons a1 la1 ls1 => prec_empty
      | prec_cons a0 la0 ls0, prec_empty => prec_empty
      | prec_cons a0 la0 ls0, prec_cons a1 la1 ls1 =>
          pl_produit_0 a0 la0 (prec_cons a1 la1 ls1) m
            (pl_produit_1 ls0 m (prec_cons a1 la1 ls1))
      end
  end.

Fixpoint pl_card (pl : prec_list) : nat :=
  match pl with
  | prec_empty => 1
  | prec_cons a la ls => S (pl_card la + pl_card ls)
  end.

Definition pl_essence (pl0 pl1 : prec_list) : nat :=
  pl_card pl0 + pl_card pl1.

Definition pl_produit (pl0 pl1 : prec_list) : prec_list :=
  pl_produit_1 pl0 (pl_essence pl0 pl1) pl1.

Lemma pl_card_0 : forall pl : prec_list, 1 <= pl_card pl.

Lemma pl_ess_aux_0 : forall pl : prec_list, 1 <= pl_card pl.

Lemma pl_ess_aux_1 :
 forall (a : ad) (la ls : prec_list),
 S (pl_card la) <= pl_card (prec_cons a la ls).

Lemma pl_ess_aux_2 :
 forall (a : ad) (la ls : prec_list),
 S (pl_card ls) <= pl_card (prec_cons a la ls).

Lemma pl_ess_invar_0 : forall pl0 pl1 : prec_list, 1 <= pl_essence pl0 pl1.

Lemma pl_ess_invar_1 :
 forall (a a' : ad) (la ls la' ls' : prec_list),
 S (pl_essence la (prec_cons a' la' ls')) <=
 pl_essence (prec_cons a la ls) (prec_cons a' la' ls').

Lemma pl_ess_invar_2 :
 forall (a a' : ad) (la ls la' ls' : prec_list),
 S (pl_essence ls (prec_cons a' la' ls')) <=
 pl_essence (prec_cons a la ls) (prec_cons a' la' ls').

Lemma pl_ess_invar_3 :
 forall (a' : ad) (la la' ls' : prec_list),
 S (pl_essence la la') <= pl_essence la (prec_cons a' la' ls').

Lemma pl_ess_invar_4 :
 forall (a' : ad) (la la' ls' : prec_list),
 S (pl_essence la ls') <= pl_essence la (prec_cons a' la' ls').

Lemma pl_ess_invar_5 : forall pl0 pl1 : prec_list, 2 <= pl_essence pl0 pl1.

Fixpoint pl_prof (pl : prec_list) : nat :=
  match pl with
  | prec_empty => 0
  | prec_cons a la ls => S (max (pl_prof la) (pl_prof ls))
  end.

Lemma indprinciple_0 :
 forall P0 P1 : prec_list -> prec_list -> Prop,
 (forall p : prec_list, P0 p prec_empty) ->
 (forall p : prec_list, P1 p prec_empty) ->
 (forall p : prec_list, P1 prec_empty p) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 p ls -> P1 p la -> P0 p (prec_cons a la ls)) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 la p -> P1 ls p -> P1 (prec_cons a la ls) p) ->
 forall n : nat,
 (forall p p' : prec_list,
  pl_prof p <= n -> pl_prof p' <= n -> P0 p p' /\ P1 p p') ->
 forall p p' : prec_list,
 pl_prof p <= S n -> pl_prof p' <= S n -> P0 p p' /\ P1 p p'.

Lemma indprinciple_1 :
 forall P0 P1 : prec_list -> prec_list -> Prop,
 (forall p : prec_list, P0 p prec_empty) ->
 (forall p : prec_list, P1 p prec_empty) ->
 (forall p : prec_list, P1 prec_empty p) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 p ls -> P1 p la -> P0 p (prec_cons a la ls)) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 la p -> P1 ls p -> P1 (prec_cons a la ls) p) ->
 forall p p' : prec_list,
 pl_prof p <= 0 -> pl_prof p' <= 0 -> P0 p p' /\ P1 p p'.

Lemma indprinciple_2 :
 forall P0 P1 : prec_list -> prec_list -> Prop,
 (forall p : prec_list, P0 p prec_empty) ->
 (forall p : prec_list, P1 p prec_empty) ->
 (forall p : prec_list, P1 prec_empty p) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 p ls -> P1 p la -> P0 p (prec_cons a la ls)) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 la p -> P1 ls p -> P1 (prec_cons a la ls) p) ->
 forall (n : nat) (p p' : prec_list),
 pl_prof p <= n -> pl_prof p' <= n -> P0 p p' /\ P1 p p'.

Lemma indprinciple_pl :
 forall P0 P1 : prec_list -> prec_list -> Prop,
 (forall p : prec_list, P0 p prec_empty) ->
 (forall p : prec_list, P1 p prec_empty) ->
 (forall p : prec_list, P1 prec_empty p) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 p ls -> P1 p la -> P0 p (prec_cons a la ls)) ->
 (forall (a : ad) (la ls p : prec_list),
  P0 la p -> P1 ls p -> P1 (prec_cons a la ls) p) ->
 forall p p' : prec_list, P0 p p' /\ P1 p p'.

Definition pl_produit_0_incr (p0 p1 : prec_list) : Prop :=
  forall (a : ad) (l : prec_list) (n : nat),
  pl_essence p0 p1 <= n ->
  pl_produit_0 a p0 p1 (pl_essence p0 p1) l = pl_produit_0 a p0 p1 n l.

Definition pl_produit_1_incr (p0 p1 : prec_list) : Prop :=
  forall n : nat,
  pl_essence p0 p1 <= n ->
  pl_produit_1 p0 (pl_essence p0 p1) p1 = pl_produit_1 p0 n p1.

Lemma pl_product_0_0 : forall p : prec_list, pl_produit_0_incr p prec_empty.

Lemma pl_product_0_1 : forall p : prec_list, pl_produit_1_incr p prec_empty.

Lemma pl_product_0_2 : forall p : prec_list, pl_produit_1_incr prec_empty p.

Lemma pl_product_0_3 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_0_incr p ls ->
 pl_produit_1_incr p la -> pl_produit_0_incr p (prec_cons a la ls).

Lemma pl_product_0_4 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_0_incr la p ->
 pl_produit_1_incr ls p -> pl_produit_1_incr (prec_cons a la ls) p.

Lemma pl_product_0_5 :
 forall p p' : prec_list, pl_produit_0_incr p p' /\ pl_produit_1_incr p p'.

Lemma pl_product_0 :
 forall p0 p1 : prec_list,
 (forall (a : ad) (l : prec_list) (n : nat),
  pl_essence p0 p1 <= n ->
  pl_produit_0 a p0 p1 (pl_essence p0 p1) l = pl_produit_0 a p0 p1 n l) /\
 (forall n : nat,
  pl_essence p0 p1 <= n ->
  pl_produit_1 p0 (pl_essence p0 p1) p1 = pl_produit_1 p0 n p1).

Lemma pl_product_0_invar_essence :
 forall (p0 p1 : prec_list) (n : nat),
 pl_essence p0 p1 <= n ->
 pl_produit_1 p0 (pl_essence p0 p1) p1 = pl_produit_1 p0 n p1.

Lemma pl_product_1 :
 forall (a : ad) (la pl l : prec_list) (n : nat),
 pl_essence la pl <= n ->
 pl_produit_0 a la pl n l = prec_empty -> pl = prec_empty.

Definition pl_tl_length_prod_def_0 (pl0 pl1 : prec_list) : Prop :=
  forall (l : prec_list) (a : ad) (n m : nat),
  pl_essence pl0 pl1 <= m ->
  pl_tl_length pl0 n ->
  pl_tl_length l (S n) \/ l = prec_empty ->
  (pl_tl_length pl1 (S n) -> pl_tl_length (pl_produit_0 a pl0 pl1 m l) (S n)) /\
  (pl1 = prec_empty ->
   (pl_tl_length l (S n) -> pl_tl_length (pl_produit_0 a pl0 pl1 m l) (S n)) /\
   (l = prec_empty -> pl_produit_0 a pl0 pl1 m l = prec_empty)).

Definition pl_tl_length_prod_def_1 (pl0 pl1 : prec_list) : Prop :=
  forall n m : nat,
  pl_tl_length pl0 n ->
  pl_tl_length pl1 n ->
  pl_essence pl0 pl1 <= m -> pl_tl_length (pl_produit_1 pl0 m pl1) n.

Lemma pl_tl_length_prod_0 :
 forall p : prec_list, pl_tl_length_prod_def_0 p prec_empty.

Lemma pl_tl_length_prod_1 :
 forall p : prec_list, pl_tl_length_prod_def_1 p prec_empty.

Lemma pl_tl_length_prod_2 :
 forall p : prec_list, pl_tl_length_prod_def_1 prec_empty p.

Lemma pl_tl_length_prod_3 :
 forall (a : ad) (la ls p : prec_list),
 pl_tl_length_prod_def_0 p ls ->
 pl_tl_length_prod_def_1 p la ->
 pl_tl_length_prod_def_0 p (prec_cons a la ls).

Lemma pl_tl_length_prod_4 :
 forall (a : ad) (la ls p : prec_list),
 pl_tl_length_prod_def_0 la p ->
 pl_tl_length_prod_def_1 ls p ->
 pl_tl_length_prod_def_1 (prec_cons a la ls) p.

Lemma pl_tl_length_prod_5 :
 forall p p' : prec_list,
 pl_tl_length_prod_def_0 p p' /\ pl_tl_length_prod_def_1 p p'.

Lemma pl_tl_length_prod :
 forall (pl0 pl1 : prec_list) (n : nat),
 pl_tl_length pl0 n ->
 pl_tl_length pl1 n -> pl_tl_length (pl_produit pl0 pl1) n.

Lemma pl_produit_path_incl_0 :
 forall (n : nat) (a : ad) (la pl l : prec_list) (plp : pl_path),
 pl_path_incl plp l ->
 plp <> pl_path_nil ->
 pl_essence la pl <= n -> pl_path_incl plp (pl_produit_0 a la pl n l).

Fixpoint pl_path_product (p0 p1 : pl_path) {struct p1} : pl_path :=
  match p0, p1 with
  | pl_path_nil, pl_path_nil => pl_path_nil
  | pl_path_nil, pl_path_cons a b => pl_path_nil
  | pl_path_cons a b, pl_path_nil => pl_path_nil
  | pl_path_cons a0 b0, pl_path_cons a1 b1 =>
      pl_path_cons (iad_conv a0 a1) (pl_path_product b0 b1)
  end.

Lemma pl_path_product_n :
 forall (n : nat) (p0 p1 : pl_path),
 pl_path_length p0 = n ->
 pl_path_length p1 = n -> pl_path_length (pl_path_product p0 p1) = n.

Lemma pl_produit_path_incl_inj :
 forall (plp0 plp1 plp2 plp3 : pl_path) (n : nat),
 pl_path_length plp0 = n ->
 pl_path_length plp1 = n ->
 pl_path_length plp2 = n ->
 pl_path_length plp3 = n ->
 pl_path_product plp0 plp1 = pl_path_product plp2 plp3 ->
 plp0 = plp2 /\ plp1 = plp3.

Definition pl_produit_path_incl_def_0 (pl0 pl1 : prec_list) :=
  forall (n m : nat) (plp0 plp1 : pl_path) (a : ad) (l : prec_list),
  pl_path_incl plp0 (prec_cons a pl0 prec_empty) ->
  pl_tl_length pl0 n ->
  pl_path_incl plp1 pl1 ->
  pl_tl_length pl1 (S n) ->
  pl_essence pl0 pl1 <= m ->
  pl_path_incl (pl_path_product plp0 plp1) (pl_produit_0 a pl0 pl1 m l).

Definition pl_produit_path_incl_def_1 (pl0 pl1 : prec_list) :=
  forall (n m : nat) (plp0 plp1 : pl_path),
  pl_path_incl plp0 pl0 ->
  pl_tl_length pl0 n ->
  pl_path_incl plp1 pl1 ->
  pl_tl_length pl1 n ->
  pl_essence pl0 pl1 <= m ->
  pl_path_incl (pl_path_product plp0 plp1) (pl_produit_1 pl0 m pl1).

Lemma pl_produit_path_incl_1_0 :
 forall p : prec_list, pl_produit_path_incl_def_0 p prec_empty.

Lemma pl_produit_path_incl_1_1 :
 forall p : prec_list, pl_produit_path_incl_def_1 p prec_empty.

Lemma pl_produit_path_incl_1_2 :
 forall p : prec_list, pl_produit_path_incl_def_1 prec_empty p.

Lemma pl_produit_path_incl_1_3 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_path_incl_def_0 p ls ->
 pl_produit_path_incl_def_1 p la ->
 pl_produit_path_incl_def_0 p (prec_cons a la ls).

Lemma pl_produit_path_incl_1_4 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_path_incl_def_0 la p ->
 pl_produit_path_incl_def_1 ls p ->
 pl_produit_path_incl_def_1 (prec_cons a la ls) p.

Lemma pl_produit_path_incl_1_5 :
 forall p p' : prec_list,
 pl_produit_path_incl_def_0 p p' /\ pl_produit_path_incl_def_1 p p'.

Lemma pl_produit_path_incl_1 :
 forall (pl0 pl1 : prec_list) (n m : nat) (plp0 plp1 : pl_path),
 pl_path_incl plp0 pl0 ->
 pl_tl_length pl0 n ->
 pl_path_incl plp1 pl1 ->
 pl_tl_length pl1 n ->
 pl_essence pl0 pl1 <= m ->
 pl_path_incl (pl_path_product plp0 plp1) (pl_produit_1 pl0 m pl1).

Lemma pl_produit_path_incl_2 :
 forall (pl0 pl1 : prec_list) (n : nat) (plp0 plp1 : pl_path),
 pl_path_incl plp0 pl0 ->
 pl_tl_length pl0 n ->
 pl_path_incl plp1 pl1 ->
 pl_tl_length pl1 n ->
 pl_path_incl (pl_path_product plp0 plp1) (pl_produit pl0 pl1).

Definition pl_produit_path_incl_def_2 (pl0 pl1 : prec_list) :=
  forall (n m : nat) (plp : pl_path) (a : ad) (l : prec_list),
  pl_path_incl plp (pl_produit_0 a pl0 pl1 m l) ->
  pl_tl_length pl0 n ->
  pl_tl_length pl1 (S n) ->
  pl_essence pl0 pl1 <= m ->
  (exists plp0 : pl_path,
     (exists plp1 : pl_path,
        plp = pl_path_product plp0 plp1 /\
        pl_path_incl plp0 (prec_cons a pl0 prec_empty) /\
        pl_path_incl plp1 pl1)) \/ pl_path_incl plp l.

Definition pl_produit_path_incl_def_3 (pl0 pl1 : prec_list) :=
  forall (n m : nat) (plp : pl_path),
  pl_path_incl plp (pl_produit_1 pl0 m pl1) ->
  pl_tl_length pl0 n ->
  pl_tl_length pl1 n ->
  pl_essence pl0 pl1 <= m ->
  exists plp0 : pl_path,
    (exists plp1 : pl_path,
       plp = pl_path_product plp0 plp1 /\
       pl_path_incl plp0 pl0 /\ pl_path_incl plp1 pl1).

Lemma pl_produit_path_incl_3_0 :
 forall p : prec_list, pl_produit_path_incl_def_2 p prec_empty.

Lemma pl_produit_path_incl_3_1 :
 forall p : prec_list, pl_produit_path_incl_def_3 p prec_empty.

Lemma pl_produit_path_incl_3_2 :
 forall p : prec_list, pl_produit_path_incl_def_3 prec_empty p.

Lemma pl_produit_path_incl_3_3 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_path_incl_def_2 p ls ->
 pl_produit_path_incl_def_3 p la ->
 pl_produit_path_incl_def_2 p (prec_cons a la ls).

Lemma pl_produit_path_incl_3_4 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_path_incl_def_2 la p ->
 pl_produit_path_incl_def_3 ls p ->
 pl_produit_path_incl_def_3 (prec_cons a la ls) p.

Lemma pl_produit_path_incl_3_5 :
 forall p p' : prec_list,
 pl_produit_path_incl_def_2 p p' /\ pl_produit_path_incl_def_3 p p'.

Lemma pl_produit_path_incl_3 :
 forall (pl0 pl1 : prec_list) (n m : nat) (plp : pl_path),
 pl_path_incl plp (pl_produit_1 pl0 m pl1) ->
 pl_tl_length pl0 n ->
 pl_tl_length pl1 n ->
 pl_essence pl0 pl1 <= m ->
 exists plp0 : pl_path,
   (exists plp1 : pl_path,
      plp = pl_path_product plp0 plp1 /\
      pl_path_incl plp0 pl0 /\ pl_path_incl plp1 pl1).

Lemma pl_produit_path_incl_4 :
 forall (pl0 pl1 : prec_list) (n : nat) (plp : pl_path),
 pl_path_incl plp (pl_produit pl0 pl1) ->
 pl_tl_length pl0 n ->
 pl_tl_length pl1 n ->
 exists plp0 : pl_path,
   (exists plp1 : pl_path,
      plp = pl_path_product plp0 plp1 /\
      pl_path_incl plp0 pl0 /\ pl_path_incl plp1 pl1).

Fixpoint s_produit_l (a : ad) (p : prec_list) (s : state) {struct s} :
 state :=
  match s with
  | M0 => M0 prec_list
  | M1 a' p' =>
      if Neqb a a' then M1 prec_list a (pl_produit p p') else M0 prec_list
  | M2 s0 s1 =>
      match a with
      | N0 => M2 prec_list (s_produit_l N0 p s0) (M0 prec_list)
      | Npos q =>
          match q with
          | xH => M2 prec_list (M0 prec_list) (s_produit_l N0 p s1)
          | xO q' => M2 prec_list (s_produit_l (Npos q') p s0) (M0 prec_list)
          | xI q' => M2 prec_list (M0 prec_list) (s_produit_l (Npos q') p s1)
          end
      end
  end.

Definition sproductl_0_def (s : state) : Prop :=
  forall (a : ad) (p : prec_list) (c : ad) (r0 r1 : prec_list),
  MapGet prec_list (M1 prec_list a p) c = Some r0 ->
  MapGet prec_list s c = Some r1 ->
  MapGet prec_list (s_produit_l a p s) c = Some (pl_produit r0 r1).

Lemma sproductl_0_0 : sproductl_0_def (M0 prec_list).

Lemma sproductl_0_1 :
 forall (a : ad) (a0 : prec_list), sproductl_0_def (M1 prec_list a a0).

Lemma sproductl_0_2 :
 forall m : state,
 sproductl_0_def m ->
 forall m0 : state, sproductl_0_def m0 -> sproductl_0_def (M2 prec_list m m0).

Lemma sproductl_0_3 : forall m : state, sproductl_0_def m.

Lemma sproductl_0 :
 forall (s : state) (a : ad) (p : prec_list) (c : ad) (r0 r1 : prec_list),
 MapGet prec_list (M1 prec_list a p) c = Some r0 ->
 MapGet prec_list s c = Some r1 ->
 MapGet prec_list (s_produit_l a p s) c = Some (pl_produit r0 r1).

Definition sproductl_1_def (s : state) : Prop :=
  forall (a : ad) (p : prec_list) (c : ad) (r : prec_list),
  MapGet prec_list (s_produit_l a p s) c = Some r ->
  exists r0 : prec_list,
    (exists r1 : prec_list,
       MapGet prec_list (M1 prec_list a p) c = Some r0 /\
       MapGet prec_list s c = Some r1).

Lemma sproductl_1_0 : sproductl_1_def (M0 prec_list).

Lemma sproductl_1_1 :
 forall (a : ad) (a0 : prec_list), sproductl_1_def (M1 prec_list a a0).

Lemma sproductl_1_2 :
 forall m : state,
 sproductl_1_def m ->
 forall m0 : state, sproductl_1_def m0 -> sproductl_1_def (M2 prec_list m m0).

Lemma sproductl_1_3 : forall m : state, sproductl_1_def m.

Lemma sproductl_1 :
 forall (s : state) (a : ad) (p : prec_list) (c : ad) (r : prec_list),
 MapGet prec_list (s_produit_l a p s) c = Some r ->
 exists r0 : prec_list,
   (exists r1 : prec_list,
      MapGet prec_list (M1 prec_list a p) c = Some r0 /\
      MapGet prec_list s c = Some r1).

Fixpoint s_produit_r (a : ad) (p : prec_list) (s : state) {struct s} :
 state :=
  match s with
  | M0 => M0 prec_list
  | M1 a' p' =>
      if Neqb a a' then M1 prec_list a (pl_produit p' p) else M0 prec_list
  | M2 s0 s1 =>
      match a with
      | N0 => M2 prec_list (s_produit_r N0 p s0) (M0 prec_list)
      | Npos q =>
          match q with
          | xH => M2 prec_list (M0 prec_list) (s_produit_r N0 p s1)
          | xO q' => M2 prec_list (s_produit_r (Npos q') p s0) (M0 prec_list)
          | xI q' => M2 prec_list (M0 prec_list) (s_produit_r (Npos q') p s1)
          end
      end
  end.

Definition sproductr_0_def (s : state) : Prop :=
  forall (a : ad) (p : prec_list) (c : ad) (r0 r1 : prec_list),
  MapGet prec_list (M1 prec_list a p) c = Some r0 ->
  MapGet prec_list s c = Some r1 ->
  MapGet prec_list (s_produit_r a p s) c = Some (pl_produit r1 r0).

Lemma sproductr_0_0 : sproductr_0_def (M0 prec_list).

Lemma sproductr_0_1 :
 forall (a : ad) (a0 : prec_list), sproductr_0_def (M1 prec_list a a0).

Lemma sproductr_0_2 :
 forall m : state,
 sproductr_0_def m ->
 forall m0 : state, sproductr_0_def m0 -> sproductr_0_def (M2 prec_list m m0).

Lemma sproductr_0_3 : forall m : state, sproductr_0_def m.

Lemma sproductr_0 :
 forall (s : state) (a : ad) (p : prec_list) (c : ad) (r0 r1 : prec_list),
 MapGet prec_list (M1 prec_list a p) c = Some r0 ->
 MapGet prec_list s c = Some r1 ->
 MapGet prec_list (s_produit_r a p s) c = Some (pl_produit r1 r0).

Definition sproductr_1_def (s : state) : Prop :=
  forall (a : ad) (p : prec_list) (c : ad) (r : prec_list),
  MapGet prec_list (s_produit_r a p s) c = Some r ->
  exists r0 : prec_list,
    (exists r1 : prec_list,
       MapGet prec_list (M1 prec_list a p) c = Some r0 /\
       MapGet prec_list s c = Some r1).

Lemma sproductr_1_0 : sproductr_1_def (M0 prec_list).

Lemma sproductr_1_1 :
 forall (a : ad) (a0 : prec_list), sproductr_1_def (M1 prec_list a a0).

Lemma sproductr_1_2 :
 forall m : state,
 sproductr_1_def m ->
 forall m0 : state, sproductr_1_def m0 -> sproductr_1_def (M2 prec_list m m0).

Lemma sproductr_1_3 : forall m : state, sproductr_1_def m.

Lemma sproductr_1 :
 forall (s : state) (a : ad) (p : prec_list) (c : ad) (r : prec_list),
 MapGet prec_list (s_produit_r a p s) c = Some r ->
 exists r0 : prec_list,
   (exists r1 : prec_list,
      MapGet prec_list (M1 prec_list a p) c = Some r0 /\
      MapGet prec_list s c = Some r1).

Fixpoint s_produit (s0 s1 : state) {struct s1} : state :=
  match s0, s1 with
  | M0, M0 => M0 prec_list
  | M0, M1 a1 p1 => M0 prec_list
  | M0, M2 s10 s11 => M0 prec_list
  | M1 a0 p0, M0 => M0 prec_list
  | M1 a0 p0, M1 a1 p1 => s_produit_l a0 p0 (M1 prec_list a1 p1)
  | M1 a0 p0, M2 s10 s11 => s_produit_l a0 p0 (M2 prec_list s10 s11)
  | M2 s00 s01, M0 => M0 prec_list
  | M2 s00 s01, M1 a1 p1 => s_produit_r a1 p1 (M2 prec_list s00 s01)
  | M2 s00 s01, M2 s10 s11 =>
      M2 prec_list (s_produit s00 s10) (s_produit s01 s11)
  end.

Lemma s_produit_0 :
 forall (s0 s1 : state) (c : ad) (p0 p1 : prec_list),
 MapGet prec_list s0 c = Some p0 ->
 MapGet prec_list s1 c = Some p1 ->
 MapGet prec_list (s_produit s0 s1) c = Some (pl_produit p0 p1).

Lemma s_produit_1 :
 forall (s0 s1 : state) (c : ad) (p : prec_list),
 MapGet prec_list (s_produit s0 s1) c = Some p ->
 exists p0 : prec_list,
   (exists p1 : prec_list,
      MapGet prec_list s0 c = Some p0 /\
      MapGet prec_list s1 c = Some p1).

Fixpoint preDTA_produit_l (a : ad) (s : state) (d : preDTA) {struct d} :
 preDTA :=
  match d with
  | M0 => M0 state
  | M1 a' s' => M1 state (iad_conv a a') (s_produit s s')
  | M2 s0 s1 =>
      match a with
      | N0 =>
          M2 state
            (M2 state (preDTA_produit_l N0 s s0)
               (preDTA_produit_l N0 s s1)) (M0 state)
      | Npos p =>
          match p with
          | xH =>
              M2 state (M0 state)
                (M2 state (preDTA_produit_l N0 s s0)
                   (preDTA_produit_l N0 s s1))
          | xO p' =>
              M2 state
                (M2 state (preDTA_produit_l (Npos p') s s0)
                   (preDTA_produit_l (Npos p') s s1)) 
                (M0 state)
          | xI p' =>
              M2 state (M0 state)
                (M2 state (preDTA_produit_l (Npos p') s s0)
                   (preDTA_produit_l (Npos p') s s1))
          end
      end
  end.

Fixpoint preDTA_produit_r (a : ad) (s : state) (d : preDTA) {struct d} :
 preDTA :=
  match d with
  | M0 => M0 state
  | M1 a' s' => M1 state (iad_conv a' a) (s_produit s' s)
  | M2 s0 s1 =>
      match a with
      | N0 =>
          M2 state (M2 state (preDTA_produit_r N0 s s0) (M0 state))
            (M2 state (preDTA_produit_r N0 s s1) (M0 state))
      | Npos p =>
          match p with
          | xH =>
              M2 state (M2 state (M0 state) (preDTA_produit_r N0 s s0))
                (M2 state (M0 state) (preDTA_produit_r N0 s s1))
          | xO p' =>
              M2 state
                (M2 state (preDTA_produit_r (Npos p') s s0) (M0 state))
                (M2 state (preDTA_produit_r (Npos p') s s1) (M0 state))
          | xI p' =>
              M2 state
                (M2 state (M0 state) (preDTA_produit_r (Npos p') s s0))
                (M2 state (M0 state) (preDTA_produit_r (Npos p') s s1))
          end
      end
  end.

Fixpoint preDTA_produit (d0 d1 : preDTA) {struct d1} : preDTA :=
  match d0, d1 with
  | M0, M0 => M0 state
  | M0, M1 a1 s1 => M0 state
  | M0, M2 s10 s11 => M0 state
  | M1 a0 s0, M0 => M0 state
  | M1 a0 s0, M1 a1 s1 => preDTA_produit_l a0 s0 (M1 state a1 s1)
  | M1 a0 s0, M2 s10 s11 => preDTA_produit_l a0 s0 (M2 state s10 s11)
  | M2 s00 s01, M0 => M0 state
  | M2 s00 s01, M1 a1 s1 => preDTA_produit_r a1 s1 (M2 state s00 s01)
  | M2 s00 s01, M2 s10 s11 =>
      M2 state (M2 state (preDTA_produit s00 s10) (preDTA_produit s00 s11))
        (M2 state (preDTA_produit s01 s10) (preDTA_produit s01 s11))
  end.

Definition predta_produit_0d_def (d : preDTA) : Prop :=
  forall (a : ad) (s : state) (a0 a1 : ad) (s0 s1 : state),
  MapGet state (M1 state a s) a0 = Some s0 ->
  MapGet state d a1 = Some s1 ->
  MapGet state (preDTA_produit_l a s d) (iad_conv a0 a1) =
  Some (s_produit s0 s1).

Lemma predta_produit_0_0 : predta_produit_0d_def (M0 state).

Lemma predta_produit_0_1 :
 forall (a : ad) (a0 : state), predta_produit_0d_def (M1 state a a0).

Lemma predta_produit_0_2 :
 forall m : preDTA,
 predta_produit_0d_def m ->
 forall m0 : preDTA,
 predta_produit_0d_def m0 -> predta_produit_0d_def (M2 state m m0).

Lemma predta_produit_0_3 : forall m : preDTA, predta_produit_0d_def m.

Lemma predta_produit_0 :
 forall (a : ad) (s : state) (d : preDTA) (a0 a1 : ad) (s0 s1 : state),
 MapGet state (M1 state a s) a0 = Some s0 ->
 MapGet state d a1 = Some s1 ->
 MapGet state (preDTA_produit_l a s d) (iad_conv a0 a1) =
 Some (s_produit s0 s1).

Definition predta_produit_1_def (d : preDTA) : Prop :=
  forall (a : ad) (s : state) (a0 a1 : ad) (s0 s1 : state),
  MapGet state (M1 state a s) a0 = Some s0 ->
  MapGet state d a1 = Some s1 ->
  MapGet state (preDTA_produit_r a s d) (iad_conv a1 a0) =
  Some (s_produit s1 s0).

Lemma predta_produit_1_0 : predta_produit_1_def (M0 state).

Lemma predta_produit_1_1 :
 forall (a : ad) (a0 : state), predta_produit_1_def (M1 state a a0).

Lemma predta_produit_1_2 :
 forall m : preDTA,
 predta_produit_1_def m ->
 forall m0 : preDTA,
 predta_produit_1_def m0 -> predta_produit_1_def (M2 state m m0).

Lemma predta_produit_1_3 : forall m : preDTA, predta_produit_1_def m.

Lemma predta_produit_1 :
 forall (a : ad) (s : state) (d : preDTA) (a0 a1 : ad) (s0 s1 : state),
 MapGet state (M1 state a s) a0 = Some s0 ->
 MapGet state d a1 = Some s1 ->
 MapGet state (preDTA_produit_r a s d) (iad_conv a1 a0) =
 Some (s_produit s1 s0).

Lemma predta_produit_2 :
 forall (d0 d1 : preDTA) (a0 a1 : ad) (s0 s1 : state),
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (preDTA_produit d0 d1) (iad_conv a0 a1) =
 Some (s_produit s0 s1).

Definition predta_produit_3_def (d0 : preDTA) : Prop :=
  forall (a a0 : ad) (s s0 : state),
  MapGet state (preDTA_produit_l a0 s0 d0) a = Some s ->
  exists a1 : ad,
    (exists a2 : ad,
       (exists s1 : state,
          (exists s2 : state,
             a = iad_conv a1 a2 /\
             MapGet state (M1 state a0 s0) a1 = Some s1 /\
             MapGet state d0 a2 = Some s2))).

Lemma predta_produit_3_0 : predta_produit_3_def (M0 state).

Lemma predta_produit_3_1 :
 forall (a : ad) (a0 : state), predta_produit_3_def (M1 state a a0).

Lemma predta_produit_3_2 :
 forall m : preDTA,
 predta_produit_3_def m ->
 forall m0 : preDTA,
 predta_produit_3_def m0 -> predta_produit_3_def (M2 state m m0).

Lemma predta_produit_3_3 : forall m : preDTA, predta_produit_3_def m.

Lemma predta_produit_3 :
 forall (d0 : preDTA) (a a0 : ad) (s s0 : state),
 MapGet state (preDTA_produit_l a0 s0 d0) a = Some s ->
 exists a1 : ad,
   (exists a2 : ad,
      (exists s1 : state,
         (exists s2 : state,
            a = iad_conv a1 a2 /\
            MapGet state (M1 state a0 s0) a1 = Some s1 /\
            MapGet state d0 a2 = Some s2))).

Definition predta_produit_4_def (d0 : preDTA) : Prop :=
  forall (a a0 : ad) (s s0 : state),
  MapGet state (preDTA_produit_r a0 s0 d0) a = Some s ->
  exists a1 : ad,
    (exists a2 : ad,
       (exists s1 : state,
          (exists s2 : state,
             a = iad_conv a1 a2 /\
             MapGet state (M1 state a0 s0) a2 = Some s1 /\
             MapGet state d0 a1 = Some s2))).

Lemma predta_produit_4_0 : predta_produit_4_def (M0 state).

Lemma predta_produit_4_1 :
 forall (a : ad) (a0 : state), predta_produit_4_def (M1 state a a0).

Lemma predta_produit_4_2 :
 forall m : preDTA,
 predta_produit_4_def m ->
 forall m0 : preDTA,
 predta_produit_4_def m0 -> predta_produit_4_def (M2 state m m0).

Lemma predta_produit_4_3 : forall m : preDTA, predta_produit_4_def m.

Lemma predta_produit_4 :
 forall (d0 : preDTA) (a a0 : ad) (s s0 : state),
 MapGet state (preDTA_produit_r a0 s0 d0) a = Some s ->
 exists a1 : ad,
   (exists a2 : ad,
      (exists s1 : state,
         (exists s2 : state,
            a = iad_conv a1 a2 /\
            MapGet state (M1 state a0 s0) a2 = Some s1 /\
            MapGet state d0 a1 = Some s2))).

Lemma predta_produit_5 :
 forall (d0 d1 : preDTA) (a : ad) (s : state),
 MapGet state (preDTA_produit d0 d1) a = Some s ->
 exists a0 : ad,
   (exists a1 : ad,
      (exists s0 : state,
         (exists s1 : state,
            a = iad_conv a0 a1 /\
            MapGet state d0 a0 = Some s0 /\
            MapGet state d1 a1 = Some s1))).

Lemma pl_produit_rec_0 :
 forall tl : term_list,
 (forall u : term,
  term_list_occur u tl ->
  forall (d0 d1 : preDTA) (a0 a1 : ad),
  predta_compatible d0 d1 ->
  reconnaissance d0 a0 u ->
  reconnaissance d1 a1 u ->
  reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) u) ->
 forall (d0 d1 : preDTA) (plp0 plp1 : pl_path),
 predta_compatible d0 d1 ->
 pl_path_recon d0 tl plp0 ->
 pl_path_recon d1 tl plp1 ->
 pl_path_recon (preDTA_produit d0 d1) tl (pl_path_product plp0 plp1).

Lemma pl_produit_rec_1 :
 forall (d0 d1 : preDTA) (tl : term_list) (pl0 pl1 : prec_list),
 liste_reconnait d0 pl0 tl ->
 liste_reconnait d1 pl1 tl ->
 pl_tl_length pl0 (lst_length tl) ->
 pl_tl_length pl1 (lst_length tl) ->
 predta_compatible d0 d1 ->
 (forall u : term,
  term_list_occur u tl ->
  forall (d0 d1 : preDTA) (a0 a1 : ad),
  predta_compatible d0 d1 ->
  reconnaissance d0 a0 u ->
  reconnaissance d1 a1 u ->
  reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) u) ->
 liste_reconnait (preDTA_produit d0 d1) (pl_produit pl0 pl1) tl.

Lemma pl_produit_rec_2 :
 forall tl : term_list,
 (forall u : term,
  term_list_occur u tl ->
  forall (d0 d1 : preDTA) (a0 a1 : ad),
  predta_compatible d0 d1 ->
  reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) u ->
  reconnaissance d0 a0 u /\ reconnaissance d1 a1 u) ->
 forall (d0 d1 : preDTA) (plp : pl_path),
 predta_compatible d0 d1 ->
 pl_path_recon (preDTA_produit d0 d1) tl plp ->
 exists plp0 : pl_path,
   (exists plp1 : pl_path,
      plp = pl_path_product plp0 plp1 /\
      pl_path_recon d0 tl plp0 /\ pl_path_recon d1 tl plp1).

Lemma pl_produit_rec_3 :
 forall (d0 d1 : preDTA) (tl : term_list) (pl0 pl1 : prec_list) (n : nat),
 liste_reconnait (preDTA_produit d0 d1) (pl_produit pl0 pl1) tl ->
 predta_compatible d0 d1 ->
 pl_tl_length pl0 n ->
 pl_tl_length pl1 n ->
 (forall u : term,
  term_list_occur u tl ->
  forall (d0 d1 : preDTA) (a0 a1 : ad),
  predta_compatible d0 d1 ->
  reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) u ->
  reconnaissance d0 a0 u /\ reconnaissance d1 a1 u) ->
 liste_reconnait d0 pl0 tl /\ liste_reconnait d1 pl1 tl.

Definition predta_inter_def_0 (t : term) : Prop :=
  forall (d0 d1 : preDTA) (a0 a1 : ad),
  predta_compatible d0 d1 ->
  reconnaissance d0 a0 t ->
  reconnaissance d1 a1 t ->
  reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) t.

Definition predta_inter_def_1 (t : term) : Prop :=
  forall (d0 d1 : preDTA) (a0 a1 : ad),
  predta_compatible d0 d1 ->
  reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) t ->
  reconnaissance d0 a0 t /\ reconnaissance d1 a1 t.

Lemma predta_inter_0 :
 forall (a : ad) (tl : term_list),
 (forall u : term, term_list_occur u tl -> predta_inter_def_0 u) ->
 predta_inter_def_0 (app a tl).

Lemma predta_inter_1 :
 forall (a : ad) (tl : term_list),
 (forall u : term, term_list_occur u tl -> predta_inter_def_1 u) ->
 predta_inter_def_1 (app a tl).

Lemma predta_inter_direct :
 forall (d0 d1 : preDTA) (a0 a1 : ad) (t : term),
 predta_compatible d0 d1 ->
 reconnaissance d0 a0 t ->
 reconnaissance d1 a1 t ->
 reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) t.

Lemma predta_inter_reciproque :
 forall (d0 d1 : preDTA) (a0 a1 : ad) (t : term),
 predta_compatible d0 d1 ->
 reconnaissance (preDTA_produit d0 d1) (iad_conv a0 a1) t ->
 reconnaissance d0 a0 t /\ reconnaissance d1 a1 t.

Definition inter (d0 d1 : DTA) : DTA :=
  match d0, d1 with
  | dta p0 a0, dta p1 a1 => dta (preDTA_produit p0 p1) (iad_conv a0 a1)
  end.

Lemma inter_semantics_0 :
 forall (d0 d1 : DTA) (t : term),
 dta_compatible d0 d1 ->
 (reconnait d0 t /\ reconnait d1 t <-> reconnait (inter d0 d1) t).

Lemma inter_semantics :
 forall (d0 d1 : DTA) (sigma : signature) (t : term),
 dta_correct_wrt_sign d0 sigma ->
 dta_correct_wrt_sign d1 sigma ->
 (reconnait d0 t /\ reconnait d1 t <-> reconnait (inter d0 d1) t). *)
Require Import lattice_fixpoint.
(* lattice_fixpoint:
Require Import Classical_Prop.
Require Import Bool.
Require Import Arith.
Require Import NArith.
Require Import Ndec.
From IntMap Require Import Allmaps.
Require Import bases.

Fixpoint domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} :
 Prop :=
  match m0, m1 with
  | M0, M0 => True
  | M0, M1 _ _ => False
  | M0, M2 _ _ => False
  | M1 _ _, M0 => False
  | M1 a _, M1 b _ => a = b
  | M1 _ _, M2 _ _ => False
  | M2 _ _, M0 => False
  | M2 _ _, M1 _ _ => False
  | M2 a b, M2 c d => domain_equal A B a c /\ domain_equal A B b d
  end.

Lemma domain_equal_mapget :
 forall (A B : Set) (m0 : Map A) (m1 : Map B) (a : ad) (x : A),
 domain_equal A B m0 m1 ->
 MapGet A m0 a = Some x -> exists y : B, MapGet B m1 a = Some y.

Lemma domain_equal_reflexive :
 forall (A : Set) (m : Map A), domain_equal A A m m.

Lemma domain_equal_symmetric :
 forall (A B : Set) (m0 : Map A) (m1 : Map B),
 domain_equal A B m0 m1 -> domain_equal B A m1 m0.

Lemma domain_equal_transitive :
 forall (A0 A1 A2 : Set) (m0 : Map A0) (m1 : Map A1) (m2 : Map A2),
 domain_equal A0 A1 m0 m1 ->
 domain_equal A1 A2 m1 m2 -> domain_equal A0 A2 m0 m2.

Lemma map_sum :
 forall (A : Set) (m : Map A),
 m = M0 A \/
 (exists a : ad, (exists x : A, m = M1 A a x)) \/
 (exists x : Map A, (exists y : Map A, m = M2 A x y)).

Definition mEnsemble (A : Set) := Map A -> Prop.

Definition mRelation (A : Set) := Map A -> Map A -> Prop.

Definition r_symmetric (A : Set) (r : mRelation A) :=
  forall x y : Map A, r x y -> r y x.

Definition r_antisymmetric (A : Set) (r : mRelation A) :=
  forall x y : Map A, r x y -> r y x -> x = y.

Definition r_transitive (A : Set) (r : mRelation A) :=
  forall x y z : Map A, r x y -> r y z -> r x z.

Definition r_reflexive (A : Set) (r : mRelation A) := forall x : Map A, r x x.

Definition r_order (A : Set) (r : mRelation A) :=
  r_reflexive A r /\ r_antisymmetric A r /\ r_transitive A r.

Definition mini (A : Set) (r : mRelation A) (T : mEnsemble A) 
  (e : Map A) := T e /\ (forall x : Map A, T x -> r e x).

Definition maxi (A : Set) (r : mRelation A) (T : mEnsemble A) 
  (e : Map A) := T e /\ (forall x : Map A, T x -> r x e).

Definition mLattice (A : Set) (r : mRelation A) (T : mEnsemble A)
  (e f : Map A) := r_order A r /\ mini A r T e /\ maxi A r T f.

Inductive prechain (A : Set) : Set :=
  | single : Map A -> prechain A
  | concat : prechain A -> Map A -> prechain A.

Lemma prechain_sum :
 forall (A : Set) (p : prechain A),
 (exists x : Map A, p = single A x) \/
 (exists x : Map A, (exists y : prechain A, p = concat A y x)).

Inductive prechain_dom_ok (A : Set) : mEnsemble A -> prechain A -> Prop :=
  | domok_single :
      forall (x : Map A) (T : mEnsemble A),
      T x -> prechain_dom_ok A T (single A x)
  | domok_concat :
      forall (x : Map A) (T : mEnsemble A) (p : prechain A),
      T x -> prechain_dom_ok A T p -> prechain_dom_ok A T (concat A p x).

Fixpoint chain_length (A : Set) (p : prechain A) {struct p} : nat :=
  match p with
  | single x => 1
  | concat x y => S (chain_length A x)
  end.

Definition prechain_last (A : Set) (p : prechain A) : 
  Map A := match p with
           | single x => x
           | concat z x => x
           end.

Inductive prechain_incr (A : Set) : mRelation A -> prechain A -> Prop :=
  | incr_single :
      forall (x : Map A) (r : mRelation A), prechain_incr A r (single A x)
  | incr_concat :
      forall (x : Map A) (r : mRelation A) (p : prechain A),
      r (prechain_last A p) x ->
      prechain_incr A r p -> prechain_incr A r (concat A p x).

Inductive chain (A : Set) :
mEnsemble A -> mRelation A -> prechain A -> Prop :=
  | chain_single :
      forall (x : Map A) (T : mEnsemble A) (r : mRelation A),
      T x -> chain A T r (single A x)
  | chain_concat_s :
      forall (x y : Map A) (T : mEnsemble A) (r : mRelation A),
      T x -> T y -> r x y -> chain A T r (concat A (single A x) y)
  | chain_concat_m :
      forall (x y : Map A) (z : prechain A) (T : mEnsemble A)
        (r : mRelation A),
      T y ->
      r x y ->
      chain A T r (concat A z x) -> chain A T r (concat A (concat A z x) y).

Lemma chain_def_ok :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) (p : prechain A),
 chain A T r p -> prechain_dom_ok A T p.

Lemma chain_incr :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) (p : prechain A),
 chain A T r p -> prechain_incr A r p.

Definition pre_domok_incr_chain_def (A : Set) (p : prechain A) :=
  forall (T : mEnsemble A) (r : mRelation A),
  prechain_dom_ok A T p /\ prechain_incr A r p -> chain A T r p.

Lemma pre_domok_incr_chain_0 :
 forall (A : Set) (m : Map A), pre_domok_incr_chain_def A (single A m).

Lemma pre_domok_incr_chain_1 :
 forall (A : Set) (p : prechain A),
 pre_domok_incr_chain_def A p ->
 forall m : Map A, pre_domok_incr_chain_def A (concat A p m).

Lemma pre_domok_incr_chain_2 :
 forall (A : Set) (p : prechain A), pre_domok_incr_chain_def A p.

Lemma pre_domok_incr_chain :
 forall (A : Set) (p : prechain A) (T : mEnsemble A) (r : mRelation A),
 prechain_dom_ok A T p /\ prechain_incr A r p -> chain A T r p.

Inductive dist_chain (A : Set) : prechain A -> Prop :=
  | dist_single : forall x : Map A, dist_chain A (single A x)
  | dist_concat_s :
      forall x y : Map A, x <> y -> dist_chain A (concat A (single A x) y)
  | dist_concat_m :
      forall (x y : Map A) (z : prechain A),
      x <> y ->
      dist_chain A (concat A z x) -> dist_chain A (concat A (concat A z x) y).

Inductive non_dist_chain (A : Set) : prechain A -> Prop :=
  | non_dist_concat_s :
      forall x : Map A, non_dist_chain A (concat A (single A x) x)
  | non_dist_concat_m_hd :
      forall (x : Map A) (z : prechain A),
      non_dist_chain A (concat A (concat A z x) x)
  | non_dist_concat_m_tl :
      forall (x y : Map A) (z : prechain A),
      non_dist_chain A (concat A z x) ->
      non_dist_chain A (concat A (concat A z x) y).

Definition sas_chain (A : Set) (T : mEnsemble A) (r : mRelation A)
  (p : prechain A) : Prop := chain A T r p /\ dist_chain A p.

Definition dist_compl_def_0 (A : Set) (p : prechain A) : Prop :=
  dist_chain A p \/ non_dist_chain A p.

Lemma dist_compl_0 :
 forall (A : Set) (m : Map A), dist_compl_def_0 A (single A m).

Definition dist_compl_def_1 (A : Set) (p : prechain A) : Prop :=
  dist_compl_def_0 A p -> forall m : Map A, dist_compl_def_0 A (concat A p m).

Lemma dist_compl_1 :
 forall (A : Set) (m : Map A), dist_compl_def_1 A (single A m).

Lemma dist_compl_2 :
 forall (A : Set) (p : prechain A),
 dist_compl_def_1 A p -> forall m : Map A, dist_compl_def_1 A (concat A p m).

Lemma dist_compl_3 :
 forall (A : Set) (p : prechain A),
 dist_compl_def_0 A p -> forall m : Map A, dist_compl_def_0 A (concat A p m).

Lemma dist_compl_4 :
 forall (A : Set) (p : prechain A), dist_chain A p \/ non_dist_chain A p.

Lemma dist_compl_5 :
 forall (A : Set) (x : Map A), ~ dist_chain A (concat A (single A x) x).

Lemma dist_compl_6 :
 forall (A : Set) (x : Map A) (z : prechain A),
 ~ dist_chain A (concat A (concat A z x) x).

Lemma dist_compl_7 :
 forall (A : Set) (x y : Map A) (z : prechain A),
 non_dist_chain A (concat A z x) ->
 ~ dist_chain A (concat A z x) -> ~ dist_chain A (concat A (concat A z x) y).

Lemma dist_compl_8 :
 forall (A : Set) (p : prechain A), non_dist_chain A p -> ~ dist_chain A p.

Lemma dist_compl :
 forall (A : Set) (p : prechain A), ~ dist_chain A p <-> non_dist_chain A p.

Definition bounded_sas_chain (A : Set) (T : mEnsemble A) 
  (r : mRelation A) (n : nat) : Prop :=
  forall p : prechain A, sas_chain A T r p -> chain_length A p <= n.

Definition def_ok_app (A : Set) (T : mEnsemble A) (f : Map A -> Map A) :
  Prop := forall x : Map A, T x -> T (f x).

Definition increasing_app (A : Set) (r : mRelation A) 
  (f : Map A -> Map A) : Prop := forall x y : Map A, r x y -> r (f x) (f y).

Definition fix_point (A : Set) (T : mEnsemble A) (f : Map A -> Map A)
  (x : Map A) : Prop := T x /\ f x = x.

Definition inf_fix_points (A : Set) (T : mEnsemble A) 
  (r : mRelation A) (f : Map A -> Map A) (x : Map A) : Prop :=
  forall y : Map A, fix_point A T f y -> r x y.

Definition lower_fix_point (A : Set) (T : mEnsemble A) 
  (r : mRelation A) (f : Map A -> Map A) (x : Map A) : Prop :=
  fix_point A T f x /\ inf_fix_points A T r f x.

Fixpoint iteres (A : Set) (f : Map A -> Map A) (x : Map A) 
 (n : nat) {struct n} : prechain A :=
  match n with
  | O => single A x
  | S p =>
      match iteres A f x p with
      | single y => concat A (single A y) (f y)
      | concat z y => concat A (concat A z y) (f y)
      end
  end.

Fixpoint power (A : Set) (f : A -> A) (x : A) (n : nat) {struct n} : A :=
  match n with
  | O => x
  | S n => f (power A f x n)
  end.

Inductive MapFlag (A : Set) : Set :=
  | flag_true : Map A -> MapFlag A
  | flag_false : Map A -> MapFlag A.

Lemma MapFlag_sum :
 forall (A : Set) (f : MapFlag A),
 exists x : Map A, f = flag_true A x \/ f = flag_false A x.

Fixpoint lazy_power_aux (A : Set) (egalite : Map A -> Map A -> bool)
 (f : Map A -> Map A) (x : Map A) (n : nat) {struct n} : 
 MapFlag A :=
  match n with
  | O => flag_false A x
  | S p =>
      match lazy_power_aux A egalite f x p with
      | flag_true y => flag_true A y
      | flag_false y =>
          match f y with
          | z => if egalite y z then flag_true A y else flag_false A z
          end
      end
  end.

Definition lazy_power (A : Set) (egalite : Map A -> Map A -> bool)
  (f : Map A -> Map A) (x : Map A) (n : nat) : Map A :=
  match lazy_power_aux A egalite f x n with
  | flag_false z => z
  | flag_true z => z
  end.
 
Lemma lazy_power_eg_power_0 :
 forall (A : Set) (egalite : Map A -> Map A -> bool) 
   (f : Map A -> Map A) (x : Map A) (n : nat),
 (forall a b : Map A, egalite a b = true <-> a = b) ->
 forall z : Map A,
 (lazy_power_aux A egalite f x n = flag_true A z ->
  z = power (Map A) f x n /\ z = f z) /\
 (lazy_power_aux A egalite f x n = flag_false A z -> z = power (Map A) f x n).

Lemma lazy_power_eg_power :
 forall (A : Set) (egalite : Map A -> Map A -> bool) 
   (f : Map A -> Map A) (x : Map A) (n : nat),
 (forall a b : Map A, egalite a b = true <-> a = b) ->
 lazy_power A egalite f x n = power (Map A) f x n.

Fixpoint iteres_0 (A : Set) (f : Map A -> Map A) (x : Map A) 
 (n : nat) {struct n} : prechain A :=
  match n with
  | O => single A x
  | S p =>
      match iteres_0 A f x p with
      | single y => concat A (single A y) (power (Map A) f x (S p))
      | concat z y => concat A (concat A z y) (power (Map A) f x (S p))
      end
  end.

Lemma iteres_eq_0 :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 prechain_last A (iteres A f x n) = power (Map A) f x n.

Lemma iteres_eq :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 iteres A f x n = iteres_0 A f x n.

Lemma iteres_def_ok :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (n k : nat),
 def_ok_app A T f -> T (power (Map A) f x n) -> T (power (Map A) f x (n + k)).

Lemma power_def_ok :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (n : nat), def_ok_app A T f -> T x -> T (power (Map A) f x n).

Definition iteres_ult_const_def_0 (A : Set) (p : prechain A) : Prop :=
  forall (f : Map A -> Map A) (x : Map A) (n : nat),
  p = iteres A f x n ->
  non_dist_chain A p ->
  exists q : nat, S q <= n /\ power (Map A) f x q = power (Map A) f x (S q).

Lemma iteres_ult_const_0 :
 forall (A : Set) (x : Map A),
 iteres_ult_const_def_0 A (concat A (single A x) x).

Lemma iteres_ult_const_1 :
 forall (A : Set) (x : Map A) (z : prechain A),
 iteres_ult_const_def_0 A (concat A (concat A z x) x).

Lemma iteres_ult_const_2 :
 forall (A : Set) (x y : Map A) (z : prechain A),
 non_dist_chain A (concat A z x) ->
 iteres_ult_const_def_0 A (concat A z x) ->
 iteres_ult_const_def_0 A (concat A (concat A z x) y).

Lemma iteres_ult_const_3 :
 forall (A : Set) (p : prechain A),
 non_dist_chain A p -> iteres_ult_const_def_0 A p.

Lemma iteres_ult_const_4 :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 non_dist_chain A (iteres A f x n) ->
 exists p : nat, S p <= n /\ power (Map A) f x p = power (Map A) f x (S p).

Lemma iteres_last :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) 
   (n : nat) (y : prechain A) (z : Map A),
 iteres A f x n = concat A y z -> z = f (prechain_last A y).

Lemma iteres_dom_ok :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (n : nat),
 T x -> def_ok_app A T f -> prechain_dom_ok A T (iteres A f x n).

Lemma iteres_incr :
 forall (A : Set) (r : mRelation A) (f : Map A -> Map A) 
   (x : Map A) (n : nat),
 r x (f x) -> increasing_app A r f -> prechain_incr A r (iteres A f x n).

Lemma iteres_increasing_chain :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f -> r x (f x) -> chain A T r (iteres A f x n).

Lemma iteres_length :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 chain_length A (iteres A f x n) = S n.

Lemma iteres_non_sas_chain :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n m : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f ->
 r x (f x) ->
 bounded_sas_chain A T r m ->
 m <= n -> chain A T r (iteres A f x n) /\ ~ dist_chain A (iteres A f x n).

Lemma iteres_non_sas_chain_fp_0 :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n m : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f ->
 r x (f x) ->
 bounded_sas_chain A T r m ->
 m <= n ->
 exists p : nat, S p <= n /\ power (Map A) f x p = power (Map A) f x (S p).

Lemma iteres_non_sas_chain_fp_1 :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (k p : nat),
 def_ok_app A T f ->
 fix_point A T f (power (Map A) f x p) ->
 fix_point A T f (power (Map A) f x (p + k)).

Lemma iteres_non_sas_chain_fp_2 :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n m : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f ->
 r x (f x) ->
 bounded_sas_chain A T r m -> m <= n -> fix_point A T f (power (Map A) f x n).

Lemma iteres_inf_fps :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (e x : Map A) (n : nat),
 mini A r T e ->
 fix_point A T f x -> increasing_app A r f -> r (power (Map A) f e n) x.

Lemma iteres_lower_fix_point :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (e : Map A) (n m : nat),
 mini A r T e ->
 def_ok_app A T f ->
 increasing_app A r f ->
 bounded_sas_chain A T r m ->
 m <= n -> lower_fix_point A T r f (power (Map A) f e n).

Definition leb (b0 b1 : bool) : Prop :=
  match b0, b1 with
  | false, false => True
  | false, true => True
  | true, false => False
  | true, true => True
  end.

Lemma leb_reflexive : forall b : bool, leb b b.

Lemma leb_antisymmetric : forall b c : bool, leb b c -> leb c b -> b = c.

Lemma leb_transitive : forall a b c : bool, leb a b -> leb b c -> leb a c.

Fixpoint lem (m0 m1 : Map bool) {struct m1} : Prop :=
  match m0, m1 with
  | M0, M0 => True
  | M0, M1 _ _ => False
  | M0, M2 _ _ => False
  | M1 _ _, M0 => False
  | M1 a b, M1 a' b' => if Neqb a a' then leb b b' else False
  | M1 _ _, M2 _ _ => False
  | M2 _ _, M0 => False
  | M2 _ _, M1 _ _ => False
  | M2 a b, M2 c d => lem a c /\ lem b d
  end.

Lemma lem_reflexive : r_reflexive bool lem.

Lemma lem_antisymmetric : r_antisymmetric bool lem.

Lemma lem_transitive : r_transitive bool lem.

Lemma lem_order : r_order bool lem.

Definition ensemble_base (A : Set) (m : Map A) (x : Map bool) :=
  domain_equal A bool m x.

Fixpoint map_fill (A : Set) (m : Map A) {struct m} : 
 bool -> Map bool :=
  fun b : bool =>
  match m with
  | M0 => M0 bool
  | M1 a _ => M1 bool a b
  | M2 m0 m1 => M2 bool (map_fill A m0 b) (map_fill A m1 b)
  end.

Definition map_mini (A : Set) (m : Map A) : Map bool := map_fill A m false.

Definition map_maxi (A : Set) (m : Map A) : Map bool := map_fill A m true.

Lemma map_mini_appartient :
 forall (A : Set) (x : Map A), ensemble_base A x (map_mini A x).

Lemma map_maxi_appartient :
 forall (A : Set) (x : Map A), ensemble_base A x (map_maxi A x).

Lemma map_mini_mini :
 forall (A : Set) (x : Map A),
 mini bool lem (ensemble_base A x) (map_mini A x).

Lemma map_maxi_maxi :
 forall (A : Set) (x : Map A),
 maxi bool lem (ensemble_base A x) (map_maxi A x).

Lemma map_mini_mapget_false :
 forall (A : Set) (x : Map A) (a : ad) (b : bool),
 MapGet bool (map_mini A x) a = Some b -> b = false.

Lemma map_mini_mapget_true :
 forall (A : Set) (x : Map A) (a : ad),
 MapGet bool (map_mini A x) a = Some true -> False.

Lemma mlattice :
 forall (A : Set) (x : Map A),
 mLattice bool lem (ensemble_base A x) (map_mini A x) (map_maxi A x).

Definition lattice_bounded_def_0 (p : prechain bool) : Prop :=
  forall (A : Set) (m0 m1 : Map A),
  sas_chain bool (ensemble_base A (M2 A m0 m1)) lem p ->
  exists p0 : prechain bool,
    (exists p1 : prechain bool,
       sas_chain bool (ensemble_base A m0) lem p0 /\
       sas_chain bool (ensemble_base A m1) lem p1 /\
       lem (M2 bool (prechain_last bool p0) (prechain_last bool p1))
         (prechain_last bool p) /\
       chain_length bool p0 + chain_length bool p1 = S (chain_length bool p)).

Lemma lattice_bounded_0 :
 forall m : Map bool, lattice_bounded_def_0 (single bool m).

Definition lattice_bounded_def_1 (p : prechain bool) : Prop :=
  lattice_bounded_def_0 p ->
  forall m : Map bool, lattice_bounded_def_0 (concat bool p m).

Lemma lattice_bounded_1 :
 forall m : Map bool, lattice_bounded_def_1 (single bool m).

Lemma lattice_bounded_2 :
 forall p : prechain bool,
 lattice_bounded_def_1 p ->
 forall m : Map bool, lattice_bounded_def_1 (concat bool p m).

Lemma lattice_bounded_3 :
 forall p : prechain bool,
 lattice_bounded_def_0 p ->
 forall m : Map bool, lattice_bounded_def_0 (concat bool p m).

Lemma lattice_bounded_4 : forall p : prechain bool, lattice_bounded_def_0 p.

Lemma lattice_bounded_5 :
 forall (p : prechain bool) (A : Set) (m0 m1 : Map A),
 sas_chain bool (ensemble_base A (M2 A m0 m1)) lem p ->
 exists p0 : prechain bool,
   (exists p1 : prechain bool,
      sas_chain bool (ensemble_base A m0) lem p0 /\
      sas_chain bool (ensemble_base A m1) lem p1 /\
      lem (M2 bool (prechain_last bool p0) (prechain_last bool p1))
        (prechain_last bool p) /\
      chain_length bool p0 + chain_length bool p1 = S (chain_length bool p)).

Definition lattice_bounded_def_2 (A : Set) (m : Map A) : Prop :=
  forall p : prechain bool,
  sas_chain bool (ensemble_base A m) lem p ->
  chain_length bool p <= S (MapCard A m).

Lemma lattice_bounded_6 : forall A : Set, lattice_bounded_def_2 A (M0 A).

Lemma lattice_bounded_7 :
 forall (A : Set) (a : ad) (a0 : A), lattice_bounded_def_2 A (M1 A a a0).

Lemma lattice_bounded_8 :
 forall (A : Set) (m : Map A),
 lattice_bounded_def_2 A m ->
 forall m0 : Map A,
 lattice_bounded_def_2 A m0 -> lattice_bounded_def_2 A (M2 A m m0).

Lemma lattice_bounded_9 :
 forall (A : Set) (m : Map A), lattice_bounded_def_2 A m.

Lemma lattice_bounded_10 :
 forall (A : Set) (m : Map A) (p : prechain bool),
 sas_chain bool (ensemble_base A m) lem p ->
 chain_length bool p <= S (MapCard A m).

Lemma lattice_bounded :
 forall (A : Set) (x : Map A),
 bounded_sas_chain bool (ensemble_base A x) lem (S (MapCard A x)).

Definition eq_bool (b0 b1 : bool) : bool :=
  match b0, b1 with
  | false, false => true
  | false, true => false
  | true, false => false
  | true, true => true
  end.

Lemma eq_bool_equal : forall b0 b1 : bool, eq_bool b0 b1 = true -> b0 = b1.

Lemma equal_eq_bool : forall b : bool, eq_bool b b = true.

Fixpoint eqm_bool (x y : Map bool) {struct y} : bool :=
  match x, y with
  | M0, M0 => true
  | M0, M1 _ _ => false
  | M0, M2 _ _ => false
  | M1 _ _, M0 => false
  | M1 a b, M1 c d => Neqb a c && eq_bool b d
  | M1 _ _, M2 _ _ => false
  | M2 _ _, M0 => false
  | M2 _ _, M1 _ _ => false
  | M2 a b, M2 c d => eqm_bool a c && eqm_bool b d
  end.

Lemma eqm_bool_equal : forall x y : Map bool, eqm_bool x y = true -> x = y.

Lemma equal_eqm_bool : forall x : Map bool, eqm_bool x x = true.

Lemma lem_get_leb :
 forall (m0 m1 : Map bool) (a : ad) (b0 b1 : bool),
 lem m0 m1 ->
 MapGet bool m0 a = Some b0 ->
 MapGet bool m1 a = Some b1 -> leb b0 b1.

Lemma lem_domain_equal :
 forall m0 m1 : Map bool, lem m0 m1 -> domain_equal bool bool m0 m1.

Lemma andb_inc_r :
 forall b b0 b1 : bool, leb b0 b1 -> leb (b && b0) (b && b1).

Lemma andb_inc_l :
 forall b b0 b1 : bool, leb b0 b1 -> leb (b0 && b) (b1 && b).

Lemma orb_inc_r : forall b b0 b1 : bool, leb b0 b1 -> leb (b || b0) (b || b1).

Lemma orb_inc_l : forall b b0 b1 : bool, leb b0 b1 -> leb (b0 || b) (b1 || b).

Lemma andb_incr :
 forall b0 b1 b2 b3 : bool,
 leb b0 b1 -> leb b2 b3 -> leb (b0 && b2) (b1 && b3).

Lemma orb_incr :
 forall b0 b1 b2 b3 : bool,
 leb b0 b1 -> leb b2 b3 -> leb (b0 || b2) (b1 || b3). *)
Require Import pl_path.
(* pl_path:
Require Import Arith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import signature.

Inductive pl_path : Set :=
  | pl_path_nil : pl_path
  | pl_path_cons : ad -> pl_path -> pl_path.

Inductive pl_path_incl : pl_path -> prec_list -> Prop :=
  | pl_path_incl_nil : pl_path_incl pl_path_nil prec_empty
  | pl_path_incl_cons :
      forall (plp : pl_path) (a : ad) (la ls : prec_list),
      pl_path_incl plp la ->
      pl_path_incl (pl_path_cons a plp) (prec_cons a la ls)
  | pl_path_incl_next :
      forall (plp : pl_path) (a : ad) (la ls : prec_list),
      pl_path_incl plp ls ->
      plp <> pl_path_nil -> pl_path_incl plp (prec_cons a la ls).

Inductive pl_path_recon : preDTA -> term_list -> pl_path -> Prop :=
  | pl_path_rec_nil : forall d : preDTA, pl_path_recon d tnil pl_path_nil
  | pl_path_rec_cons :
      forall (d : preDTA) (a : ad) (t : term) (plp : pl_path)
        (tl : term_list),
      reconnaissance d a t ->
      pl_path_recon d tl plp ->
      pl_path_recon d (tcons t tl) (pl_path_cons a plp).

Definition pl_path_rec_equiv_0_def (d : preDTA) (pl : prec_list)
  (tl : term_list) :=
  liste_reconnait d pl tl ->
  exists plp : pl_path, pl_path_incl plp pl /\ pl_path_recon d tl plp.

Fixpoint pl_path_length (plp : pl_path) : nat :=
  match plp with
  | pl_path_nil => 0
  | pl_path_cons _ p => S (pl_path_length p)
  end.

Lemma pl_path_exists :
 forall pl : prec_list, exists p : pl_path, pl_path_incl p pl.

Lemma non_empty_pl_path_exists :
 forall pl : prec_list,
 pl <> prec_empty ->
 exists p : pl_path, pl_path_incl p pl /\ 1 <= pl_path_length p.

Lemma pl_path_rec_equiv_0_0 :
 forall d : preDTA, pl_path_rec_equiv_0_def d prec_empty tnil.

Lemma pl_path_rec_equiv_0_1 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 reconnaissance d a hd ->
 liste_reconnait d la tl ->
 pl_path_rec_equiv_0_def d la tl ->
 pl_path_rec_equiv_0_def d (prec_cons a la ls) (tcons hd tl).

Lemma pl_path_rec_equiv_0_2 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 liste_reconnait d ls (tcons hd tl) ->
 pl_path_rec_equiv_0_def d ls (tcons hd tl) ->
 pl_path_rec_equiv_0_def d (prec_cons a la ls) (tcons hd tl).

Lemma pl_path_rec_equiv_0_3 :
 forall (p : preDTA) (p0 : prec_list) (t : term_list),
 liste_reconnait p p0 t -> pl_path_rec_equiv_0_def p p0 t.

Lemma pl_path_rec_equiv_0 :
 forall (d : preDTA) (pl : prec_list) (tl : term_list),
 liste_reconnait d pl tl ->
 exists plp : pl_path, pl_path_incl plp pl /\ pl_path_recon d tl plp.

Definition pl_path_rec_equiv_1_def (plp : pl_path) 
  (pl : prec_list) :=
  pl_path_incl plp pl ->
  forall (d : preDTA) (tl : term_list) (n : nat),
  pl_path_recon d tl plp -> pl_tl_length pl n -> liste_reconnait d pl tl.

Lemma pl_path_rec_equiv_1_0 : pl_path_rec_equiv_1_def pl_path_nil prec_empty.

Lemma pl_path_rec_equiv_1_1 :
 forall (plp : pl_path) (a : ad) (la ls : prec_list),
 pl_path_incl plp la ->
 pl_path_rec_equiv_1_def plp la ->
 pl_path_rec_equiv_1_def (pl_path_cons a plp) (prec_cons a la ls).

Lemma pl_path_rec_equiv_1_2 :
 forall (plp : pl_path) (a : ad) (la ls : prec_list),
 pl_path_incl plp ls ->
 pl_path_rec_equiv_1_def plp ls ->
 plp <> pl_path_nil -> pl_path_rec_equiv_1_def plp (prec_cons a la ls).

Lemma pl_path_rec_equiv_1_3 :
 forall (p : pl_path) (p0 : prec_list),
 pl_path_incl p p0 -> pl_path_rec_equiv_1_def p p0.

Lemma pl_path_rec_equiv_1 :
 forall (plp : pl_path) (pl : prec_list),
 pl_path_incl plp pl ->
 forall (d : preDTA) (tl : term_list) (n : nat),
 pl_path_recon d tl plp -> pl_tl_length pl n -> liste_reconnait d pl tl.

Lemma pl_path_rec_length :
 forall (plp : pl_path) (tl : term_list) (d : preDTA),
 pl_path_recon d tl plp -> pl_path_length plp = lst_length tl.

Definition liste_rec_length_def (d : preDTA) (pl : prec_list)
  (tl : term_list) : Prop :=
  forall n : nat,
  liste_reconnait d pl tl -> pl_tl_length pl n -> n = lst_length tl.

Lemma liste_rec_length_0 :
 forall d : preDTA, liste_rec_length_def d prec_empty tnil.

Lemma liste_rec_length_1 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 reconnaissance d a hd ->
 liste_reconnait d la tl ->
 liste_rec_length_def d la tl ->
 liste_rec_length_def d (prec_cons a la ls) (tcons hd tl).

Lemma liste_rec_length_2 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 liste_reconnait d ls (tcons hd tl) ->
 liste_rec_length_def d ls (tcons hd tl) ->
 liste_rec_length_def d (prec_cons a la ls) (tcons hd tl).

Lemma liste_rec_length_3 :
 forall (p : preDTA) (p0 : prec_list) (t : term_list),
 liste_reconnait p p0 t -> liste_rec_length_def p p0 t.

Lemma liste_rec_length :
 forall (pl : prec_list) (tl : term_list) (d : preDTA) (n : nat),
 liste_reconnait d pl tl -> pl_tl_length pl n -> n = lst_length tl.

Definition pl_path_incl_length_def (plp : pl_path) 
  (pl : prec_list) : Prop :=
  forall n : nat,
  pl_path_incl plp pl -> pl_tl_length pl n -> pl_path_length plp = n.

Lemma pl_path_incl_length_0 : pl_path_incl_length_def pl_path_nil prec_empty.

Lemma pl_path_incl_length_1 :
 forall (plp : pl_path) (a : ad) (la ls : prec_list),
 pl_path_incl plp la ->
 pl_path_incl_length_def plp la ->
 pl_path_incl_length_def (pl_path_cons a plp) (prec_cons a la ls).

Lemma pl_path_incl_length_2 :
 forall (plp : pl_path) (a : ad) (la ls : prec_list),
 pl_path_incl plp ls ->
 pl_path_incl_length_def plp ls ->
 plp <> pl_path_nil -> pl_path_incl_length_def plp (prec_cons a la ls).

Lemma pl_path_incl_length_3 :
 forall (p : pl_path) (p0 : prec_list),
 pl_path_incl p p0 -> pl_path_incl_length_def p p0.

Lemma pl_path_incl_length :
 forall (plp : pl_path) (pl : prec_list) (n : nat),
 pl_path_incl plp pl -> pl_tl_length pl n -> pl_path_length plp = n.

Lemma forall_incl_length :
 forall (pl : prec_list) (n : nat),
 (forall p : pl_path, pl_path_incl p pl -> pl_path_length p = n) ->
 pl_tl_length pl n. *)
Require Import refcorrect.
(* refcorrect:
Require Import Bool.
Require Import NArith Ndec.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.

Definition prec_list_ref_ok (p : prec_list) (d : preDTA) : Prop :=
  forall a : ad,
  prec_occur p a -> exists s : state, MapGet state d a = Some s.

Definition state_ref_ok (s : state) (d : preDTA) : Prop :=
  forall (a : ad) (p : prec_list),
  MapGet prec_list s a = Some p -> prec_list_ref_ok p d.

Definition preDTA_ref_ok (d : preDTA) : Prop :=
  forall (a : ad) (s : state) (c : ad) (pl : prec_list) (b : ad),
  MapGet state d a = Some s ->
  MapGet prec_list s c = Some pl ->
  prec_occur pl b -> exists s0 : state, MapGet state d b = Some s0.

Definition preDTA_ref_ok_distinct (d d' : preDTA) : Prop :=
  forall (a : ad) (s : state),
  MapGet state d a = Some s -> state_ref_ok s d'.

Definition DTA_ref_ok (d : DTA) : Prop :=
  match d with
  | dta p a => preDTA_ref_ok p
  end.

Lemma prec_list_ref_ok_destr :
 forall (a : ad) (la ls : prec_list) (d : preDTA),
 prec_list_ref_ok (prec_cons a la ls) d ->
 prec_list_ref_ok la d /\ prec_list_ref_ok ls d.

Lemma state_ref_ok_M2_destr :
 forall (s0 s1 : state) (d : preDTA),
 state_ref_ok (M2 prec_list s0 s1) d ->
 state_ref_ok s0 d /\ state_ref_ok s1 d.

Lemma preDTA_ref_ok_def :
 forall d : preDTA,
 preDTA_ref_ok d <->
 (forall (a : ad) (s : state),
  MapGet state d a = Some s -> state_ref_ok s d).

Lemma preDTA_ref_ok_distinct_dest :
 forall d0 d1 d : preDTA,
 preDTA_ref_ok_distinct (M2 state d0 d1) d ->
 preDTA_ref_ok_distinct d0 d /\ preDTA_ref_ok_distinct d1 d.

Definition addr_in_dta_check (d : preDTA) (a : ad) : bool :=
  match MapGet state d a with
  | None => false
  | Some _ => true
  end.

Fixpoint prec_list_ref_ok_check (p : prec_list) : preDTA -> bool :=
  fun d : preDTA =>
  match p with
  | prec_empty => true
  | prec_cons a la ls =>
      addr_in_dta_check d a &&
      (prec_list_ref_ok_check la d && prec_list_ref_ok_check ls d)
  end.

Lemma prec_list_ref_ok_check_correct :
 forall (p : prec_list) (d : preDTA),
 prec_list_ref_ok p d -> prec_list_ref_ok_check p d = true.

Lemma prec_list_ref_ok_check_complete :
 forall (p : prec_list) (d : preDTA),
 prec_list_ref_ok_check p d = true -> prec_list_ref_ok p d.

Fixpoint state_ref_ok_check (s : state) : preDTA -> bool :=
  fun d : preDTA =>
  match s with
  | M0 => true
  | M1 a p => prec_list_ref_ok_check p d
  | M2 x y => state_ref_ok_check x d && state_ref_ok_check y d
  end.

Lemma state_ref_ok_check_correct :
 forall (s : state) (d : preDTA),
 state_ref_ok s d -> state_ref_ok_check s d = true.

Lemma state_ref_ok_check_complete :
 forall (s : state) (d : preDTA),
 state_ref_ok_check s d = true -> state_ref_ok s d.

Fixpoint predta_ref_ok_check_0 (d : preDTA) : preDTA -> bool :=
  fun d' : preDTA =>
  match d with
  | M0 => true
  | M1 a s => state_ref_ok_check s d'
  | M2 x y => predta_ref_ok_check_0 x d' && predta_ref_ok_check_0 y d'
  end.

Definition predta_ref_ok_check (d : preDTA) : bool :=
  predta_ref_ok_check_0 d d.

Lemma predta_ref_ok_check_correct_0 :
 forall d d' : preDTA,
 preDTA_ref_ok_distinct d d' -> predta_ref_ok_check_0 d d' = true.

Lemma predta_ref_ok_check_complete_0 :
 forall d d' : preDTA,
 predta_ref_ok_check_0 d d' = true -> preDTA_ref_ok_distinct d d'.

Lemma predta_ref_ok_check_correct :
 forall d : preDTA, preDTA_ref_ok d -> predta_ref_ok_check d = true.

Lemma predta_ref_ok_check_complete :
 forall d : preDTA, predta_ref_ok_check d = true -> preDTA_ref_ok d.

Definition dta_ref_ok_check (d : DTA) : bool :=
  match d with
  | dta p a => predta_ref_ok_check p
  end.

Lemma dta_ref_ok_check_correct :
 forall d : DTA, DTA_ref_ok d -> dta_ref_ok_check d = true.

Lemma dta_ref_ok_check_complete :
 forall d : DTA, dta_ref_ok_check d = true -> DTA_ref_ok d.

Definition addr_in_preDTA (d : preDTA) (a : ad) : Prop :=
  exists s : state, MapGet state d a = Some s.

Definition DTA_main_state_correct (d : DTA) : Prop :=
  match d with
  | dta p a => addr_in_preDTA p a
  end.

Definition DTA_main_state_correct_check (d : DTA) : bool :=
  match d with
  | dta p a =>
      match MapGet state p a with
      | None => false
      | Some _ => true
      end
  end.

Lemma DTA_main_state_correct_check_correct :
 forall d : DTA,
 DTA_main_state_correct d -> DTA_main_state_correct_check d = true.

Lemma DTA_main_state_correct_check_complete :
 forall d : DTA,
 DTA_main_state_correct_check d = true -> DTA_main_state_correct d. *)
Require Import semantics.
(* semantics:
Require Import Bool.
Require Import Arith.
Require Import Classical_Prop.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.

Unset Standard Proposition Elimination Names.

Fixpoint rec_term (d : preDTA) (a : ad) (t : term) 
 (n : nat) {struct n} : bool :=
  match n with
  | O => false
  | S k =>
      match t with
      | app c l =>
          match MapGet _ d a with
          | None => false
          | Some lts =>
              match MapGet _ lts c with
              | None => false
              | Some pre => rec_list_terms d pre l k
              end
          end
      end
  end
 
 with rec_list_terms (d : preDTA) (pre : prec_list) 
 (l : term_list) (n : nat) {struct n} : bool :=
  match n with
  | O => false
  | S k =>
      match pre with
      | prec_empty => match l with
                      | tnil => true
                      | _ => false
                      end
      | prec_cons st stp pre' =>
          match l with
          | tnil => false
          | tcons hd tl =>
              rec_list_terms d pre' l k
              || rec_term d st hd k && rec_list_terms d stp tl k
          end
      end
  end.

Lemma borne_0_0 :
 forall p : prec_list,
 prec_in_state (M0 prec_list) p -> taille_0 p <= taille_1 (M0 prec_list).

Lemma borne_0_1 :
 forall (a : ad) (p' p : prec_list),
 prec_in_state (M1 prec_list a p') p ->
 taille_0 p <= taille_1 (M1 prec_list a p').

Lemma borne_0_2 :
 forall (m0 m1 : Map prec_list) (p : prec_list),
 (prec_in_state m0 p -> taille_0 p <= taille_1 m0) ->
 (prec_in_state m1 p -> taille_0 p <= taille_1 m1) ->
 prec_in_state (M2 prec_list m0 m1) p ->
 taille_0 p <= taille_1 (M2 prec_list m0 m1).

Lemma borne_0 :
 forall (s : state) (p : prec_list),
 prec_in_state s p -> taille_0 p <= taille_1 s.

Lemma borne_1_0 :
 forall s : state,
 state_in_dta (M0 state) s -> taille_1 s <= DTA_taille (M0 state).

Lemma borne_1_1 :
 forall (a : ad) (s' s : state),
 state_in_dta (M1 state a s') s -> taille_1 s <= DTA_taille (M1 state a s').

Lemma borne_1_2 :
 forall (m0 m1 : Map state) (s : state),
 (state_in_dta m0 s -> taille_1 s <= DTA_taille m0) ->
 (state_in_dta m1 s -> taille_1 s <= DTA_taille m1) ->
 state_in_dta (M2 state m0 m1) s -> taille_1 s <= DTA_taille (M2 state m0 m1).

Lemma borne_1 :
 forall (d : preDTA) (s : state),
 state_in_dta d s -> taille_1 s <= DTA_taille d.

Lemma borne_2 :
 forall (d : preDTA) (p : prec_list),
 prec_in_dta d p -> taille_0 p <= DTA_taille d.

Definition essence (t : term) (d : preDTA) : nat :=
  S (term_high t) * S (DTA_taille d).

Definition essence_list (l : term_list) (d : preDTA) 
  (pl : prec_list) : nat :=
  match l, pl with
  | tnil, _ => 1
  | _, prec_empty => 1
  | _, prec_cons a la ls =>
      taille_0 pl + S (term_high_0 l) * S (DTA_taille d)
  end.

Lemma conservation_0_0 : forall n n0 : nat, S n * S n0 = S (n0 + n * S n0).

Lemma conservation_0 :
 forall (d : preDTA) (p : prec_list) (c : ad) (l : term_list),
 prec_in_dta d p -> S (essence_list l d p) <= essence (app c l) d.

Lemma conservation_1 :
 forall (d : preDTA) (l : term_list), 1 <= essence_list l d prec_empty.

Lemma conservation_2 :
 forall (d : preDTA) (p : prec_list), 1 <= essence_list tnil d p.

Lemma conservation_3 :
 forall (d : preDTA) (hd : term) (tl : term_list) (a : ad)
   (la ls : prec_list),
 S (essence_list (tcons hd tl) d ls) <=
 essence_list (tcons hd tl) d (prec_cons a la ls).

Lemma conservation_4 :
 forall (d : preDTA) (hd : term) (tl : term_list) (a : ad)
   (la ls : prec_list),
 S (essence_list tl d la) <= essence_list (tcons hd tl) d (prec_cons a la ls).

Lemma conservation_5_0 :
 forall (a : ad) (la ls : prec_list), 1 <= taille_0 (prec_cons a la ls).

Lemma conservation_5 :
 forall (d : preDTA) (hd : term) (tl : term_list) (a : ad)
   (la ls : prec_list),
 S (essence hd d) <= essence_list (tcons hd tl) d (prec_cons a la ls).

Definition dta_rec_term (d : DTA) (t : term) : bool :=
  match d with
  | dta p a => rec_term p a t (essence t p)
  end.

Inductive reconnaissance : preDTA -> ad -> term -> Prop :=
    rec_dta :
      forall (d : preDTA) (a : ad) (t : term) (ladj : state),
      MapGet state d a = Some ladj ->
      state_reconnait d ladj t -> reconnaissance d a t
with state_reconnait : preDTA -> state -> term -> Prop :=
    rec_st :
      forall (d : preDTA) (s : state) (c : ad) (tl : term_list)
        (l : prec_list),
      MapGet prec_list s c = Some l ->
      liste_reconnait d l tl -> state_reconnait d s (app c tl)
with liste_reconnait : preDTA -> prec_list -> term_list -> Prop :=
  | rec_empty : forall d : preDTA, liste_reconnait d prec_empty tnil
  | rec_consi :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (tl : term_list),
      reconnaissance d a hd ->
      liste_reconnait d la tl ->
      liste_reconnait d (prec_cons a la ls) (tcons hd tl)
  | rec_consn :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (tl : term_list),
      liste_reconnait d ls (tcons hd tl) ->
      liste_reconnait d (prec_cons a la ls) (tcons hd tl).

Definition reconnait (d : DTA) (t : term) : Prop :=
  match d with
  | dta p a => reconnaissance p a t
  end.

Scheme mreconnaissance_ind := Induction for reconnaissance
  Sort Prop
  with mstrec_ind := Induction for state_reconnait 
  Sort Prop
  with mlrec_ind := Induction for liste_reconnait Sort Prop.

Lemma sem_listes_0 :
 forall (d : preDTA) (p : prec_list) (hd : term) (tl : term_list),
 liste_reconnait d p (tcons hd tl) -> p <> prec_empty.

Lemma sem_listes_1 :
 forall (d : preDTA) (hd : term) (tl : term_list),
 ~ liste_reconnait d prec_empty (tcons hd tl).

Lemma sem_listes_2 :
 forall (d : preDTA) (pl : prec_list),
 liste_reconnait d pl tnil -> pl = prec_empty.

Definition sem_equiv_prop_t (t : term) :=
  forall (d : preDTA) (a : ad) (n : nat),
  rec_term d a t n = true -> reconnaissance d a t.
Definition sem_equiv_prop_l (l : term_list) :=
  forall (d : preDTA) (p : prec_list) (n : nat),
  rec_list_terms d p l n = true -> liste_reconnait d p l.

Lemma semantic_equiv_0_0 :
 forall (d : preDTA) (p : prec_list) (n : nat),
 rec_list_terms d p tnil n = true -> p = prec_empty.

Lemma semantic_equiv_0_1 : sem_equiv_prop_l tnil.

Lemma semantic_equiv_0_2 :
 forall (d : preDTA) (a a' : ad) (l : term_list) (n : nat) 
   (s : state) (p : prec_list),
 rec_term d a (app a' l) (S n) = true ->
 MapGet state d a = Some s ->
 MapGet prec_list s a' = Some p -> rec_list_terms d p l n = true.

Lemma semantic_equiv_0_3 :
 forall (d : preDTA) (a a' : ad) (l : term_list) (n : nat),
 rec_term d a (app a' l) (S n) = true ->
 exists s : state, MapGet state d a = Some s.

Lemma semantic_equiv_0_4 :
 forall (d : preDTA) (a a' : ad) (l : term_list) (n : nat) (s : state),
 MapGet state d a = Some s ->
 rec_term d a (app a' l) (S n) = true ->
 exists p : prec_list, MapGet prec_list s a' = Some p.

Lemma semantic_equiv_0_5 :
 forall (a : ad) (t : term_list),
 sem_equiv_prop_l t -> sem_equiv_prop_t (app a t).

Lemma semantic_equiv_0_6 :
 forall (n : nat) (t : term) (t0 : term_list),
 (forall (d : preDTA) (a : ad) (m : nat),
  rec_term d a t m = true -> reconnaissance d a t) ->
 (forall (d : preDTA) (p : prec_list) (m : nat),
  rec_list_terms d p t0 m = true -> liste_reconnait d p t0) ->
 forall (d : preDTA) (p : prec_list),
 rec_list_terms d p (tcons t t0) n = true -> liste_reconnait d p (tcons t t0).

Lemma semantic_equiv_0_7 :
 forall t : term,
 sem_equiv_prop_t t ->
 forall t0 : term_list, sem_equiv_prop_l t0 -> sem_equiv_prop_l (tcons t t0).

Lemma semantic_equiv_0 :
 forall (d : preDTA) (a : ad) (t : term) (n : nat),
 rec_term d a t n = true -> reconnaissance d a t.

Definition invar_term (t : term) : Prop :=
  forall (n m : nat) (d : preDTA) (a : ad),
  rec_term d a t n = true -> n <= m -> rec_term d a t m = true.

Definition invar_list (tl : term_list) : Prop :=
  forall (n m : nat) (d : preDTA) (p : prec_list),
  rec_list_terms d p tl n = true -> n <= m -> rec_list_terms d p tl m = true.

Lemma invar_0 : invar_list tnil.

Lemma invar_1_0 :
 forall (d : preDTA) (a c : ad) (t : term_list) (n : nat) 
   (s : state) (p : prec_list),
 MapGet state d a = Some s ->
 MapGet prec_list s c = Some p ->
 rec_list_terms d p t n = true -> rec_term d a (app c t) (S n) = true.

Lemma invar_1_1 :
 forall (d : preDTA) (a c : ad) (t : term_list) (n : nat),
 rec_term d a (app c t) (S n) = true ->
 exists p : prec_list, rec_list_terms d p t n = true.

Lemma invar_1 :
 forall (a : ad) (t : term_list), invar_list t -> invar_term (app a t).

Lemma invar_2_0 :
 forall (d : preDTA) (p : prec_list) (n : nat),
 rec_list_terms d p tnil n = true -> p = prec_empty.

Lemma invar_2_1 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (n : nat),
 rec_list_terms d (prec_cons a la ls) (tcons hd tl) (S n) = true ->
 rec_list_terms d ls (tcons hd tl) n = true \/
 rec_term d a hd n = true /\ rec_list_terms d la tl n = true.

Lemma invar_2_2 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (n : nat),
 rec_list_terms d ls (tcons hd tl) n = true \/
 rec_term d a hd n = true /\ rec_list_terms d la tl n = true ->
 rec_list_terms d (prec_cons a la ls) (tcons hd tl) (S n) = true.
 
Lemma invar_2 :
 forall t : term,
 invar_term t ->
 forall t0 : term_list, invar_list t0 -> invar_list (tcons t t0).

Lemma invar : forall t : term, invar_term t.

Lemma invarl : forall tl : term_list, invar_list tl.

Definition dta_reconnait (d : preDTA) (a : ad) (t : term)
  (pr : reconnaissance d a t) := rec_term d a t (essence t d) = true.

Definition st_reconnait (d : preDTA) (s : state) (t : term)
  (pr : state_reconnait d s t) :=
  match t with
  | app c l =>
      exists p : prec_list,
        MapGet prec_list s c = Some p /\
        rec_list_terms d p l (essence_list l d p) = true
  end.

Definition pre_reconnait (d : preDTA) (p : prec_list) 
  (t : term_list) (pr : liste_reconnait d p t) :=
  rec_list_terms d p t (essence_list t d p) = true.

Lemma semantic_equiv_1_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 st_reconnait d ladj t s -> dta_reconnait d a t (rec_dta d a t ladj e s).

Lemma semantic_equiv_1_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 pre_reconnait d l tl l0 ->
 st_reconnait d s (app c tl) (rec_st d s c tl l e l0).

Lemma semantic_equiv_1_2 :
 forall d : preDTA, pre_reconnait d prec_empty tnil (rec_empty d).

Lemma semantic_equiv_1_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 dta_reconnait d a hd r ->
 forall l : liste_reconnait d la tl,
 pre_reconnait d la tl l ->
 pre_reconnait d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma semantic_equiv_1_4_0 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (l : term_list) (n : nat),
 l <> tnil ->
 rec_list_terms d ls l n = true ->
 rec_list_terms d (prec_cons a la ls) l (S n) = true.

Lemma semantic_equiv_1_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 pre_reconnait d ls (tcons hd tl) l ->
 pre_reconnait d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma semantic_equiv_1 :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance d a t -> rec_term d a t (essence t d) = true. *)
Require Import signature.
(* signature:
Require Import Bool.
Require Import NArith.
Require Import Ndec.
Require Import ZArith.
Require Import EqNat.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.

Definition pl_compat (pl0 pl1 : prec_list) : Prop :=
  pl0 = prec_empty /\ pl1 = prec_empty \/
  pl0 <> prec_empty /\ pl1 <> prec_empty.

Definition mpl_compat (s0 s1 : state) : Prop :=
  forall (c : ad) (p0 p1 : prec_list),
  MapGet prec_list s0 c = Some p0 ->
  MapGet prec_list s1 c = Some p1 -> pl_compat p0 p1.

Definition dta_correct (d : preDTA) : Prop :=
  forall (s0 s1 : state) (a0 a1 : ad),
  MapGet state d a0 = Some s0 ->
  MapGet state d a1 = Some s1 -> mpl_compat s0 s1.

Definition dta_compat (d0 d1 : preDTA) : Prop :=
  forall (s0 s1 : state) (a0 a1 : ad),
  MapGet state d0 a0 = Some s0 ->
  MapGet state d1 a1 = Some s1 -> mpl_compat s0 s1.

Definition DTA_compat (d0 d1 : DTA) : Prop :=
  match d0, d1 with
  | dta p0 a0, dta p1 a1 => dta_compat p0 p1
  end.

Lemma pl_compat_sym :
 forall pl0 pl1 : prec_list, pl_compat pl0 pl1 -> pl_compat pl1 pl0.

Lemma mpl_compat_0 :
 forall (c : ad) (pl0 pl1 : prec_list),
 mpl_compat (M1 prec_list c pl0) (M1 prec_list c pl1) -> pl_compat pl0 pl1.

Lemma mpl_compat_1 :
 forall s0 s1 s2 s3 : state,
 mpl_compat (M2 prec_list s0 s1) (M2 prec_list s2 s3) -> mpl_compat s0 s2.

Lemma mpl_compat_2 :
 forall s0 s1 s2 s3 : state,
 mpl_compat (M2 prec_list s0 s1) (M2 prec_list s2 s3) -> mpl_compat s1 s3.

Lemma mpl_compat_3 :
 forall (s0 s1 : state) (pl : prec_list),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list N0 pl) ->
 mpl_compat s0 (M1 prec_list N0 pl).

Lemma mpl_compat_4 :
 forall (s0 s1 : state) (pl : prec_list),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list (Npos 1) pl) ->
 mpl_compat s1 (M1 prec_list N0 pl).

Lemma mpl_compat_5 :
 forall (s0 s1 : state) (pl : prec_list) (p : positive),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list (Npos (xO p)) pl) ->
 mpl_compat s0 (M1 prec_list (Npos p) pl).

Lemma mpl_compat_6 :
 forall (s0 s1 : state) (pl : prec_list) (p : positive),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list (Npos (xI p)) pl) ->
 mpl_compat s1 (M1 prec_list (Npos p) pl).

Lemma mpl_compat_sym :
 forall s0 s1 : state, mpl_compat s0 s1 -> mpl_compat s1 s0.

Inductive pl_tl_length : prec_list -> nat -> Prop :=
  | pl_tl_O : pl_tl_length prec_empty 0
  | pl_tl_S :
      forall (a : ad) (pl : prec_list) (n : nat),
      pl_tl_length pl n -> pl_tl_length (prec_cons a pl prec_empty) (S n)
  | pl_tl_propag :
      forall (a : ad) (la ls : prec_list) (n : nat),
      pl_tl_length la n ->
      pl_tl_length ls (S n) -> pl_tl_length (prec_cons a la ls) (S n).

Lemma pl_tl_length_pl_compat :
 forall (p0 p1 : prec_list) (n : nat),
 pl_tl_length p0 n -> pl_tl_length p1 n -> pl_compat p0 p1.

Definition pl_tl_length_rec_def_0 (n : nat) :=
  forall (d : preDTA) (pl : prec_list) (tl : term_list),
  pl_tl_length pl n -> liste_reconnait d pl tl -> n = lst_length tl.

Definition pl_tl_length_rec_def_1 (d : preDTA) (pl : prec_list)
  (tl : term_list) :=
  forall n : nat,
  pl_tl_length_rec_def_0 n ->
  pl_tl_length pl (S n) -> liste_reconnait d pl tl -> S n = lst_length tl.

Lemma pl_tl_length_rec_0 : pl_tl_length_rec_def_0 0.

Lemma pl_tl_length_rec_1 :
 forall d : preDTA, pl_tl_length_rec_def_1 d prec_empty tnil.

Lemma pl_tl_length_rec_2 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 reconnaissance d a hd ->
 liste_reconnait d la tl ->
 pl_tl_length_rec_def_1 d la tl ->
 pl_tl_length_rec_def_1 d (prec_cons a la ls) (tcons hd tl).

Lemma pl_tl_length_rec_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 liste_reconnait d ls (tcons hd tl) ->
 pl_tl_length_rec_def_1 d ls (tcons hd tl) ->
 pl_tl_length_rec_def_1 d (prec_cons a la ls) (tcons hd tl).

Lemma pl_tl_length_rec_4 :
 forall (p : preDTA) (p0 : prec_list) (t : term_list),
 liste_reconnait p p0 t -> pl_tl_length_rec_def_1 p p0 t.

Lemma pl_tl_length_rec_5 :
 forall n : nat, pl_tl_length_rec_def_0 n -> pl_tl_length_rec_def_0 (S n).

Lemma pl_tl_length_rec_6 :
 forall (d : preDTA) (pl : prec_list) (tl : term_list) (n : nat),
 pl_tl_length pl n -> liste_reconnait d pl tl -> n = lst_length tl.

Definition pl_compatible (pl0 pl1 : prec_list) : Prop :=
  exists n : nat, pl_tl_length pl0 n /\ pl_tl_length pl1 n.

Definition st_compatible (s0 s1 : state) : Prop :=
  forall (c : ad) (pl0 pl1 : prec_list),
  MapGet prec_list s0 c = Some pl0 ->
  MapGet prec_list s1 c = Some pl1 -> pl_compatible pl0 pl1.

Definition predta_compatible (d0 d1 : preDTA) : Prop :=
  forall s0 s1 : state,
  state_in_dta d0 s0 -> state_in_dta d1 s1 -> st_compatible s0 s1.

Definition dta_compatible (d0 d1 : DTA) : Prop :=
  match d0, d1 with
  | dta p0 a0, dta p1 a1 => predta_compatible p0 p1
  end.

Lemma pl_compatible_sym :
 forall pl0 pl1 : prec_list, pl_compatible pl0 pl1 -> pl_compatible pl1 pl0.

Lemma pl_compatible_empt_r :
 forall p : prec_list, pl_compatible p prec_empty -> p = prec_empty.

Lemma pl_compatible_empt_l :
 forall p : prec_list, pl_compatible prec_empty p -> p = prec_empty.

Lemma pl_compatible_cons_r :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 pl_compatible p (prec_cons a la ls) ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list, p = prec_cons a0 la0 ls0)).

Lemma pl_compatible_cons_l :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 pl_compatible (prec_cons a la ls) p ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list, p = prec_cons a0 la0 ls0)).

Lemma pl_compatible_compat :
 forall p0 p1 : prec_list, pl_compatible p0 p1 -> pl_compat p0 p1.

Definition st_compatible_compat_def (s0 : state) : Prop :=
  forall s1 : state, st_compatible s0 s1 -> mpl_compat s0 s1.

Lemma st_compatible_compat_0 : st_compatible_compat_def (M0 prec_list).

Lemma st_compatible_compat_1 :
 forall (a : ad) (a0 : prec_list),
 st_compatible_compat_def (M1 prec_list a a0).

Lemma st_compatible_compat_2 :
 forall m : Map prec_list,
 st_compatible_compat_def m ->
 forall m0 : Map prec_list,
 st_compatible_compat_def m0 -> st_compatible_compat_def (M2 prec_list m m0).

Lemma st_compatible_compat :
 forall s0 s1 : state, st_compatible s0 s1 -> mpl_compat s0 s1.

Definition predta_compatible_compat_def (d0 : preDTA) : Prop :=
  forall d1 : preDTA, predta_compatible d0 d1 -> dta_compat d0 d1.

Lemma predta_compatible_compat_0 : predta_compatible_compat_def (M0 state).

Lemma predta_compatible_compat_1 :
 forall (a : ad) (a0 : state), predta_compatible_compat_def (M1 state a a0).

Lemma predta_compatible_compat_2 :
 forall m : Map state,
 predta_compatible_compat_def m ->
 forall m0 : Map state,
 predta_compatible_compat_def m0 ->
 predta_compatible_compat_def (M2 state m m0).

Lemma predta_compatible_compat :
 forall d0 d1 : preDTA, predta_compatible d0 d1 -> dta_compat d0 d1.

Lemma dta_compatible_compat :
 forall d0 d1 : DTA, dta_compatible d0 d1 -> DTA_compat d0 d1.

Definition signature : Set := Map nat.

Definition state_correct_wrt_sign (s : state) (sigma : signature) : Prop :=
  forall (a : ad) (p : prec_list),
  MapGet prec_list s a = Some p ->
  exists n : nat, MapGet nat sigma a = Some n /\ pl_tl_length p n.

Definition predta_correct_wrt_sign (d : preDTA) (sigma : signature) : Prop :=
  forall (a : ad) (s : state),
  MapGet state d a = Some s -> state_correct_wrt_sign s sigma.

Definition dta_correct_wrt_sign (d : DTA) (sigma : signature) : Prop :=
  match d with
  | dta d a => predta_correct_wrt_sign d sigma
  end.

Lemma states_correct_wrt_sign_compatibles :
 forall (sigma : signature) (s s' : state),
 state_correct_wrt_sign s sigma ->
 state_correct_wrt_sign s' sigma -> st_compatible s s'.

Lemma predtas_correct_wrt_sign_compatibles :
 forall (sigma : signature) (d d' : preDTA),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign d' sigma -> predta_compatible d d'.

Lemma dtas_correct_wrt_sign_compatibles :
 forall (sigma : signature) (d d' : DTA),
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign d' sigma -> dta_compatible d d'.

Fixpoint pl_compat_check (p : prec_list) : option nat :=
  match p with
  | prec_empty => Some 0
  | prec_cons a la ls =>
      match ls with
      | prec_empty =>
          match pl_compat_check la with
          | None => None
          | Some n => Some (S n)
          end
      | prec_cons _ _ _ =>
          match pl_compat_check la, pl_compat_check ls with
          | None, _ => None
          | _, None => None
          | Some n, Some m =>
              if beq_nat (S n) m then Some m else None
          end
      end
  end.

Lemma pl_compat_check_correct :
 forall (p : prec_list) (n : nat),
 pl_tl_length p n -> pl_compat_check p = Some n.

Lemma pl_compat_check_complete :
 forall (p : prec_list) (n : nat),
 pl_compat_check p = Some n -> pl_tl_length p n.

Inductive pre_ad : Set :=
  | pre_ad_empty : pre_ad
  | pre_ad_O : pre_ad -> pre_ad
  | pre_ad_I : pre_ad -> pre_ad.

Fixpoint pre_ad_concat (pa : pre_ad) : ad -> ad :=
  fun a : ad =>
  match pa with
  | pre_ad_empty => a
  | pre_ad_O pa' => pre_ad_concat pa' (Ndouble a)
  | pre_ad_I pa' => pre_ad_concat pa' (Ndouble_plus_one a)
  end.

Fixpoint st_compat_check_0 (pa : pre_ad) (sigma : signature) 
 (s : state) {struct s} : bool :=
  match s with
  | M0 => true
  | M1 a p =>
      match pl_compat_check p, MapGet nat sigma (pre_ad_concat pa a) with
      | None, _ => false
      | _, None => false
      | Some n, Some m => beq_nat n m
      end
  | M2 x y =>
      st_compat_check_0 (pre_ad_O pa) sigma x &&
      st_compat_check_0 (pre_ad_I pa) sigma y
  end.

Definition st_compat_check (s : state) (sigma : signature) : bool :=
  st_compat_check_0 pre_ad_empty sigma s.

Fixpoint predta_compat_check (d : preDTA) : signature -> bool :=
  fun sigma : signature =>
  match d with
  | M0 => true
  | M1 a s => st_compat_check s sigma
  | M2 x y => predta_compat_check x sigma && predta_compat_check y sigma
  end.

Definition dta_compat_check (d : DTA) (sigma : signature) : bool :=
  match d with
  | dta p a => predta_compat_check p sigma
  end.

Definition state_correct_wrt_sign_with_offset (s : state) 
  (sigma : signature) (pa : pre_ad) : Prop :=
  forall (a : ad) (p : prec_list),
  MapGet prec_list s a = Some p ->
  exists n : nat,
    MapGet nat sigma (pre_ad_concat pa a) = Some n /\ pl_tl_length p n.

Lemma state_correct_wrt_sign_with_offset_M2 :
 forall (s0 s1 : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset (M2 prec_list s0 s1) sigma pa ->
 state_correct_wrt_sign_with_offset s0 sigma (pre_ad_O pa) /\
 state_correct_wrt_sign_with_offset s1 sigma (pre_ad_I pa).

Lemma predta_correct_wrt_sign_M2 :
 forall (d0 d1 : preDTA) (sigma : signature),
 predta_correct_wrt_sign (M2 state d0 d1) sigma ->
 predta_correct_wrt_sign d0 sigma /\ predta_correct_wrt_sign d1 sigma.

Lemma st_compat_check_0_correct :
 forall (s : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset s sigma pa ->
 st_compat_check_0 pa sigma s = true.

Lemma st_compat_check_0_complete :
 forall (s : state) (sigma : signature) (pa : pre_ad),
 st_compat_check_0 pa sigma s = true ->
 state_correct_wrt_sign_with_offset s sigma pa.

Lemma st_compat_check_correct :
 forall (s : state) (sigma : signature),
 state_correct_wrt_sign s sigma -> st_compat_check s sigma = true.

Lemma st_compat_check_complete :
 forall (s : state) (sigma : signature),
 st_compat_check s sigma = true -> state_correct_wrt_sign s sigma.

Lemma predta_compat_check_correct :
 forall (d : preDTA) (sigma : signature),
 predta_correct_wrt_sign d sigma -> predta_compat_check d sigma = true.

Lemma predta_compat_check_complete :
 forall (d : preDTA) (sigma : signature),
 predta_compat_check d sigma = true -> predta_correct_wrt_sign d sigma.

Lemma dta_compat_check_correct :
 forall (d : DTA) (sigma : signature),
 dta_correct_wrt_sign d sigma -> dta_compat_check d sigma = true.

Lemma dta_compat_check_complete :
 forall (d : DTA) (sigma : signature),
 dta_compat_check d sigma = true -> dta_correct_wrt_sign d sigma. *)
Require Import states_kill_empty.
(* states_kill_empty:
Require Import ZArith.
Require Import NArith Ndec.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import lattice_fixpoint.
Require Import signature.
Require Import pl_path.
Require Import empty_test.

Lemma pl_path_recon_true :
 forall (d : preDTA) (plp : pl_path) (tl : term_list),
 pl_path_recon d tl plp -> pl_path_true plp (dta_non_empty_states d).

Fixpoint prec_list_kill (m : Map bool) (p : prec_list) {struct p} :
 option prec_list :=
  match p with
  | prec_empty => Some prec_empty
  | prec_cons a la ls =>
      match ls with
      | prec_empty =>
          match MapGet bool m a with
          | None => None
          | Some b =>
              if b
              then
               match prec_list_kill m la with
               | None => None
               | Some la' => Some (prec_cons a la' prec_empty)
               end
              else None
          end
      | prec_cons _ _ _ =>
          match MapGet bool m a with
          | None => prec_list_kill m ls
          | Some b =>
              if b
              then
               match prec_list_kill m la, prec_list_kill m ls with
               | None, None => None
               | None, Some ls' => Some ls'
               | Some la', None =>
                   Some (prec_cons a la' prec_empty)
               | Some la', Some ls' => Some (prec_cons a la' ls')
               end
              else prec_list_kill m ls
          end
      end
  end.

Fixpoint states_kill_aux (m : Map bool) (s : state) {struct s} : state :=
  match s with
  | M0 => M0 prec_list
  | M1 a p =>
      match prec_list_kill m p with
      | None => M0 prec_list
      | Some p' => M1 prec_list a p'
      end
  | M2 s0 s1 =>
      match states_kill_aux m s0, states_kill_aux m s1 with
      | M0, M0 => M0 prec_list
      | M0, M1 a p => M1 prec_list (Ndouble_plus_one a) p
      | M1 a p, M0 => M1 prec_list (Ndouble a) p
      | s0', s1' => M2 prec_list s0' s1'
      end
  end.

Definition states_kill (m : Map bool) (s : state) : 
  option state :=
  match states_kill_aux m s with
  | M0 => None
  | x => Some x
  end.

Fixpoint preDTA_kill (m : Map bool) (d : preDTA) {struct d} : preDTA :=
  match d with
  | M0 => M0 state
  | M1 a s =>
      match states_kill m s with
      | None => M0 state
      | Some s' => M1 state a s'
      end
  | M2 d0 d1 =>
      match preDTA_kill m d0, preDTA_kill m d1 with
      | M0, M0 => M0 state
      | M0, M1 a s' => M1 state (Ndouble_plus_one a) s'
      | M1 a s', M0 => M1 state (Ndouble a) s'
      | d0', d1' => M2 state d0' d1'
      end
  end.

Definition DTA_simpl (d : DTA) : DTA :=
  match d with
  | dta p a =>
      match MapGet state p a with
      | None => dta (M1 state N0 (M0 prec_list)) N0
      | _ => dta p a
      end
  end.

Definition DTA_kill (m : Map bool) (d : DTA) : DTA :=
  match d with
  | dta p a => DTA_simpl (dta (preDTA_kill m p) a)
  end.

Definition DTA_kill_empty_states (d : DTA) : DTA :=
  DTA_kill (dta_states_non_empty d) d.

Definition DTA_kill_empty_states_lazy (d : DTA) : DTA :=
  DTA_kill (dta_states_non_empty_lazy d) d.

Lemma kill_empty_states_lazy_eg_kill_empty_states :
 forall d : DTA, DTA_kill_empty_states_lazy d = DTA_kill_empty_states d.

Lemma pl_kill_0 :
 forall (p : prec_list) (m : Map bool) (plp : pl_path),
 pl_path_incl plp p ->
 pl_path_true plp m ->
 exists pl : prec_list,
   prec_list_kill m p = Some pl /\ pl_path_incl plp pl.

Lemma pl_kill_1 :
 forall (p p' : prec_list) (m : Map bool) (pl : pl_path),
 prec_list_kill m p = Some p' ->
 pl_path_incl pl p' -> pl_path_incl pl p /\ pl_path_true pl m.

Lemma pl_kill_prec_empty :
 forall (p : prec_list) (m : Map bool),
 prec_list_kill m p = Some prec_empty -> p = prec_empty.

Lemma st_kill_0 :
 forall (s : state) (m : Map bool) (a : ad) (p p' : prec_list),
 prec_list_kill m p = Some p' ->
 MapGet prec_list s a = Some p ->
 MapGet prec_list (states_kill_aux m s) a = Some p'.

Lemma st_kill_1 :
 forall (s : state) (m : Map bool) (a : ad) (p p' : prec_list),
 prec_list_kill m p = Some p' ->
 MapGet prec_list s a = Some p ->
 exists s' : state,
   states_kill m s = Some s' /\
   MapGet prec_list s' a = Some p'.

Lemma st_kill_2 :
 forall (s : state) (m : Map bool) (a : ad) (p : prec_list),
 MapGet prec_list (states_kill_aux m s) a = Some p ->
 exists p' : prec_list,
   MapGet prec_list s a = Some p' /\
   prec_list_kill m p' = Some p.

Lemma st_kill_3 :
 forall (s' s : state) (m : Map bool),
 states_kill_aux m s = s' ->
 s' <> M0 prec_list ->
 exists p : prec_list,
   (exists a : ad, MapGet prec_list s' a = Some p).

Lemma st_kill_4 :
 forall (s s' : state) (m : Map bool),
 states_kill m s = Some s' ->
 exists p : prec_list,
   (exists a : ad, MapGet prec_list s' a = Some p).

Lemma dt_kill_0 :
 forall (d : preDTA) (m : Map bool) (a : ad) (s s' : state),
 states_kill m s = Some s' ->
 MapGet state d a = Some s ->
 MapGet state (preDTA_kill m d) a = Some s'.

Lemma dt_kill_1 :
 forall (d : preDTA) (m : Map bool) (a : ad) (s : state),
 MapGet state (preDTA_kill m d) a = Some s ->
 exists s' : state,
   MapGet state d a = Some s' /\ states_kill m s' = Some s.

Definition dt_kill_empty_def_0 (n : nat) : Prop :=
  forall (d : preDTA) (a : ad) (t : term),
  term_high t <= n ->
  reconnaissance d a t ->
  reconnaissance (preDTA_kill (dta_non_empty_states d) d) a t.

Lemma dt_kill_empty_d_0 : dt_kill_empty_def_0 0.

Lemma dt_kill_empty_d_1 :
 forall (n : nat) (d : preDTA) (p : prec_list) (tl : term_list),
 dt_kill_empty_def_0 n ->
 term_high_0 tl <= n ->
 liste_reconnait d p tl ->
 exists p' : prec_list,
   prec_list_kill (dta_non_empty_states d) p = Some p' /\
   liste_reconnait (preDTA_kill (dta_non_empty_states d) d) p' tl.

Lemma dt_kill_empty_d_2 :
 forall n : nat, dt_kill_empty_def_0 n -> dt_kill_empty_def_0 (S n).

Lemma dt_kill_empty_d_3 : forall n : nat, dt_kill_empty_def_0 n.

Lemma dt_kill_empty_d :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance d a t ->
 reconnaissance (preDTA_kill (dta_non_empty_states d) d) a t.

Definition dt_kill_empty_def_1 (n : nat) : Prop :=
  forall (d : preDTA) (a : ad) (t : term),
  term_high t <= n ->
  reconnaissance (preDTA_kill (dta_non_empty_states d) d) a t ->
  reconnaissance d a t.

Lemma dt_kill_empty_r_0 : dt_kill_empty_def_1 0.

Lemma dt_kill_empty_r_1 :
 forall (p' : prec_list) (n : nat) (d : preDTA) (p : prec_list)
   (tl : term_list),
 dt_kill_empty_def_1 n ->
 term_high_0 tl <= n ->
 liste_reconnait (preDTA_kill (dta_non_empty_states d) d) p tl ->
 prec_list_kill (dta_non_empty_states d) p' = Some p ->
 liste_reconnait d p' tl.

Lemma dt_kill_empty_r_2 :
 forall n : nat, dt_kill_empty_def_1 n -> dt_kill_empty_def_1 (S n).

Lemma dt_kill_empty_r_3 : forall n : nat, dt_kill_empty_def_1 n.

Lemma dt_kill_empty_r :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance (preDTA_kill (dta_non_empty_states d) d) a t ->
 reconnaissance d a t.

Lemma dt_kill_empty_semantics :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance d a t <->
 reconnaissance (preDTA_kill (dta_non_empty_states d) d) a t.

Lemma dta_kill_empty_states_semantics :
 forall (d : DTA) (t : term),
 reconnait d t <-> reconnait (DTA_kill_empty_states d) t.

Lemma dta_kill_empty_states_lazy_semantics :
 forall (d : DTA) (t : term),
 reconnait d t <-> reconnait (DTA_kill_empty_states_lazy d) t.

Lemma kill_empty_correct_wrt_sign_invar_0 :
 forall (p p' : prec_list) (m : Map bool) (n : nat),
 pl_tl_length p n ->
 prec_list_kill m p = Some p' -> pl_tl_length p' n.

Lemma kill_empty_correct_wrt_sign_invar_1 :
 forall (s : state) (sigma : signature) (m : Map bool),
 state_correct_wrt_sign s sigma ->
 state_correct_wrt_sign (states_kill_aux m s) sigma.

Lemma kill_empty_correct_wrt_sign_invar :
 forall (d : preDTA) (sigma : signature) (m : Map bool),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (preDTA_kill m d) sigma.

Lemma dt_kill_empty_kill_empty_0 :
 forall (d : preDTA) (p p' : prec_list),
 prec_list_kill (dta_non_empty_states d) p = Some p' ->
 exists plp : pl_path, pl_path_incl plp p'.

Lemma dt_kill_empty_kill_empty_1 :
 forall (d : preDTA) (plp : pl_path) (tl : term_list),
 pl_path_recon d tl plp <->
 pl_path_recon (preDTA_kill (dta_non_empty_states d) d) tl plp.

Lemma dt_kill_empty_kill_empty_2 :
 forall (d : preDTA) (p : prec_list) (plp : pl_path),
 pl_path_incl plp p ->
 pl_path_true plp (dta_non_empty_states d) ->
 exists tl : term_list, pl_path_recon d tl plp.

Lemma dt_kill_empty_kill_empty_3 :
 forall (d : preDTA) (a : ad) (s : state) (sigma : signature),
 MapGet state (preDTA_kill (dta_non_empty_states d) d) a = Some s ->
 predta_correct_wrt_sign d sigma ->
 exists t : term, reconnaissance (preDTA_kill (dta_non_empty_states d) d) a t.

Lemma dt_kill_empty_kill_empty :
 forall (d : preDTA) (a : ad) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 ((exists s : state,
     MapGet state (preDTA_kill (dta_non_empty_states d) d) a = Some s) <->
  (exists t : term, reconnaissance d a t)). *)
Require Import union.
(* union:
Require Import Bool.
Require Import NArith Ndec Ndigits.
Require Import ZArith.
Require Import Classical_Prop.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import signature.
Require Import refcorrect.

Definition uad_conv_0 (a : ad) : ad :=
  match a with
  | N0 => N0
  | Npos p => Npos (xO p)
  end.

Definition uad_conv_1 (a : ad) : ad :=
  match a with
  | N0 => Npos 1
  | Npos p => Npos (xI p)
  end.

Lemma adcnv_inj0 : forall a b : ad, uad_conv_0 a = uad_conv_0 b -> a = b.

Lemma adcnv_inj1 : forall a b : ad, uad_conv_1 a = uad_conv_1 b -> a = b.

Lemma adcnv_ok : forall a b : ad, uad_conv_0 a <> uad_conv_1 b.

Lemma adcnv_disj :
 forall a : ad, exists b : ad, a = uad_conv_0 b \/ a = uad_conv_1 b.

Fixpoint upl_conv_0 (p : prec_list) : prec_list :=
  match p with
  | prec_empty => prec_empty
  | prec_cons a p0 p1 =>
      prec_cons (uad_conv_0 a) (upl_conv_0 p0) (upl_conv_0 p1)
  end.

Fixpoint upl_conv_1 (p : prec_list) : prec_list :=
  match p with
  | prec_empty => prec_empty
  | prec_cons a p0 p1 =>
      prec_cons (uad_conv_1 a) (upl_conv_1 p0) (upl_conv_1 p1)
  end.

Fixpoint umpl_conv_0 (s : state) : state :=
  match s with
  | M0 => M0 prec_list
  | M1 a p => M1 prec_list a (upl_conv_0 p)
  | M2 p0 p1 => M2 prec_list (umpl_conv_0 p0) (umpl_conv_0 p1)
  end.

Fixpoint umpl_conv_1 (s : state) : state :=
  match s with
  | M0 => M0 prec_list
  | M1 a p => M1 prec_list a (upl_conv_1 p)
  | M2 p0 p1 => M2 prec_list (umpl_conv_1 p0) (umpl_conv_1 p1)
  end.

Fixpoint udta_conv_0_aux (d : preDTA) : preDTA :=
  match d with
  | M0 => M0 state
  | M1 a s => M1 state a (umpl_conv_0 s)
  | M2 s0 s1 => M2 state (udta_conv_0_aux s0) (udta_conv_0_aux s1)
  end.

Fixpoint udta_conv_1_aux (d : preDTA) : preDTA :=
  match d with
  | M0 => M0 state
  | M1 a s => M1 state a (umpl_conv_1 s)
  | M2 s0 s1 => M2 state (udta_conv_1_aux s0) (udta_conv_1_aux s1)
  end.

Definition udta_conv_0 (d : preDTA) : preDTA :=
  M2 state (udta_conv_0_aux d) (M0 state).

Definition udta_conv_1 (d : preDTA) : preDTA :=
  M2 state (M0 state) (udta_conv_1_aux d).

Lemma upl_conv_0_inj :
 forall p0 p1 : prec_list, upl_conv_0 p0 = upl_conv_0 p1 -> p0 = p1.

Lemma upl_conv_1_inj :
 forall p0 p1 : prec_list, upl_conv_1 p0 = upl_conv_1 p1 -> p0 = p1.

Lemma umpl_conv_0_inj :
 forall s0 s1 : state, umpl_conv_0 s0 = umpl_conv_0 s1 -> s0 = s1.

Lemma umpl_conv_1_inj :
 forall s0 s1 : state, umpl_conv_1 s0 = umpl_conv_1 s1 -> s0 = s1.

Lemma upl_conv_0_img :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 upl_conv_0 p = prec_cons a la ls ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list, p = prec_cons a0 la0 ls0)).

Lemma upl_conv_0_img_0 :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 upl_conv_0 p = prec_cons a la ls ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list,
         p = prec_cons a0 la0 ls0 /\
         a = uad_conv_0 a0 /\ la = upl_conv_0 la0 /\ ls = upl_conv_0 ls0)).

Lemma upl_conv_0_img_1 :
 forall p : prec_list, upl_conv_0 p = prec_empty -> p = prec_empty.

Lemma upl_conv_1_img :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 upl_conv_1 p = prec_cons a la ls ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list, p = prec_cons a0 la0 ls0)).

Lemma upl_conv_1_img_0 :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 upl_conv_1 p = prec_cons a la ls ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list,
         p = prec_cons a0 la0 ls0 /\
         a = uad_conv_1 a0 /\ la = upl_conv_1 la0 /\ ls = upl_conv_1 ls0)).

Lemma upl_conv_1_img_1 :
 forall p : prec_list, upl_conv_1 p = prec_empty -> p = prec_empty.

Lemma u_conv_0_invar_0 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state d a = Some ladj ->
 MapGet state (udta_conv_0 d) (uad_conv_0 a) = Some (umpl_conv_0 ladj).

Lemma u_conv_0_invar_1 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list s c = Some p ->
 MapGet prec_list (umpl_conv_0 s) c = Some (upl_conv_0 p).

Lemma u_conv_0_invar_2 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state (udta_conv_0 d) (uad_conv_0 a) = Some (umpl_conv_0 ladj) ->
 MapGet state d a = Some ladj.

Lemma u_conv_0_invar_3 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list (umpl_conv_0 s) c = Some (upl_conv_0 p) ->
 MapGet prec_list s c = Some p.

Lemma u_conv_0_invar_4 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state (udta_conv_0 d) (uad_conv_0 a) = Some ladj ->
 exists ladj0 : _, ladj = umpl_conv_0 ladj0.

Lemma u_conv_0_invar_5 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state (udta_conv_0 d) (uad_conv_0 a) = Some ladj ->
 exists ladj0 : _,
   ladj = umpl_conv_0 ladj0 /\ MapGet state d a = Some ladj0.

Lemma u_conv_0_invar_6 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list (umpl_conv_0 s) c = Some p ->
 exists p0 : prec_list, p = upl_conv_0 p0.

Lemma u_conv_0_invar_7 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list (umpl_conv_0 s) c = Some p ->
 exists p0 : prec_list,
   p = upl_conv_0 p0 /\ MapGet prec_list s c = Some p0.

Lemma u_conv_0_invar_8 :
 forall (p0 : preDTA) (a0 : ad) (s0 : state),
 MapGet state (udta_conv_0 p0) a0 = Some s0 ->
 exists a1 : ad, a0 = uad_conv_0 a1.

Definition u_conv_rec_0 (p : preDTA) (a : ad) (t : term)
  (pr : reconnaissance p a t) :=
  reconnaissance (udta_conv_0 p) (uad_conv_0 a) t.

Definition u_conv_str_0 (p : preDTA) (s : state) (t : term)
  (pr : state_reconnait p s t) :=
  state_reconnait (udta_conv_0 p) (umpl_conv_0 s) t.

Definition u_conv_lr_0 (p : preDTA) (p0 : prec_list) 
  (t : term_list) (pr : liste_reconnait p p0 t) :=
  liste_reconnait (udta_conv_0 p) (upl_conv_0 p0) t.

Lemma u_conv0_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_conv_str_0 d ladj t s -> u_conv_rec_0 d a t (rec_dta d a t ladj e s).

Lemma u_conv0_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_conv_lr_0 d l tl l0 ->
 u_conv_str_0 d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_conv0_2 :
 forall d : preDTA, u_conv_lr_0 d prec_empty tnil (rec_empty d).

Lemma u_conv0_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_conv_rec_0 d a hd r ->
 forall l : liste_reconnait d la tl,
 u_conv_lr_0 d la tl l ->
 u_conv_lr_0 d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_conv0_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_conv_lr_0 d ls (tcons hd tl) l ->
 u_conv_lr_0 d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_conv0_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_conv_rec_0 p a t r.

Lemma u_conv0 :
 forall (p : preDTA) (a : ad) (t : term),
 reconnaissance p a t -> reconnaissance (udta_conv_0 p) (uad_conv_0 a) t.

Definition u_conv_rec_0_r (p0 : preDTA) (a0 : ad) (t : term)
  (pr0 : reconnaissance p0 a0 t) :=
  forall (p : preDTA) (a : ad),
  p0 = udta_conv_0 p -> a0 = uad_conv_0 a -> reconnaissance p a t.

Definition u_conv_str_0_r (p0 : preDTA) (s0 : state) 
  (t : term) (pr : state_reconnait p0 s0 t) :=
  forall (p : preDTA) (s : state),
  p0 = udta_conv_0 p -> s0 = umpl_conv_0 s -> state_reconnait p s t.

Definition u_conv_lr_0_r (p0 : preDTA) (pl0 : prec_list) 
  (t : term_list) (pr : liste_reconnait p0 pl0 t) :=
  forall (p : preDTA) (pl : prec_list),
  p0 = udta_conv_0 p -> pl0 = upl_conv_0 pl -> liste_reconnait p pl t.

Lemma u_conv0_0r :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_conv_str_0_r d ladj t s -> u_conv_rec_0_r d a t (rec_dta d a t ladj e s).

Lemma u_conv0_1r :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_conv_lr_0_r d l tl l0 ->
 u_conv_str_0_r d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_conv0_2r :
 forall d : preDTA, u_conv_lr_0_r d prec_empty tnil (rec_empty d).

Lemma u_conv0_3r :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_conv_rec_0_r d a hd r ->
 forall l : liste_reconnait d la tl,
 u_conv_lr_0_r d la tl l ->
 u_conv_lr_0_r d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_conv0_4r :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_conv_lr_0_r d ls (tcons hd tl) l ->
 u_conv_lr_0_r d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_conv0_5r :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_conv_rec_0_r p a t r.

Lemma u_conv0_r :
 forall (p : preDTA) (a : ad) (t : term),
 reconnaissance (udta_conv_0 p) (uad_conv_0 a) t -> reconnaissance p a t.

Lemma u_conv_1_invar_0 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state d a = Some ladj ->
 MapGet state (udta_conv_1 d) (uad_conv_1 a) = Some (umpl_conv_1 ladj).

Lemma u_conv_1_invar_1 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list s c = Some p ->
 MapGet prec_list (umpl_conv_1 s) c = Some (upl_conv_1 p).

Lemma u_conv_1_invar_2 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state (udta_conv_1 d) (uad_conv_1 a) = Some (umpl_conv_1 ladj) ->
 MapGet state d a = Some ladj.

Lemma u_conv_1_invar_3 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list (umpl_conv_1 s) c = Some (upl_conv_1 p) ->
 MapGet prec_list s c = Some p.

Lemma u_conv_1_invar_4 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state (udta_conv_1 d) (uad_conv_1 a) = Some ladj ->
 exists ladj0 : _, ladj = umpl_conv_1 ladj0.

Lemma u_conv_1_invar_5 :
 forall (d : preDTA) (a : ad) (ladj : state),
 MapGet state (udta_conv_1 d) (uad_conv_1 a) = Some ladj ->
 exists ladj0 : _,
   ladj = umpl_conv_1 ladj0 /\ MapGet state d a = Some ladj0.

Lemma u_conv_1_invar_6 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list (umpl_conv_1 s) c = Some p ->
 exists p0 : prec_list, p = upl_conv_1 p0.

Lemma u_conv_1_invar_7 :
 forall (s : state) (c : ad) (p : prec_list),
 MapGet prec_list (umpl_conv_1 s) c = Some p ->
 exists p0 : prec_list,
   p = upl_conv_1 p0 /\ MapGet prec_list s c = Some p0.

Lemma u_conv_1_invar_8 :
 forall (p0 : preDTA) (a0 : ad) (s0 : state),
 MapGet state (udta_conv_1 p0) a0 = Some s0 ->
 exists a1 : ad, a0 = uad_conv_1 a1.

Definition u_conv_rec_1 (p : preDTA) (a : ad) (t : term)
  (pr : reconnaissance p a t) :=
  reconnaissance (udta_conv_1 p) (uad_conv_1 a) t.

Definition u_conv_str_1 (p : preDTA) (s : state) (t : term)
  (pr : state_reconnait p s t) :=
  state_reconnait (udta_conv_1 p) (umpl_conv_1 s) t.

Definition u_conv_lr_1 (p : preDTA) (p0 : prec_list) 
  (t : term_list) (pr : liste_reconnait p p0 t) :=
  liste_reconnait (udta_conv_1 p) (upl_conv_1 p0) t.

Lemma u_conv1_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_conv_str_1 d ladj t s -> u_conv_rec_1 d a t (rec_dta d a t ladj e s).

Lemma u_conv1_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_conv_lr_1 d l tl l0 ->
 u_conv_str_1 d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_conv1_2 :
 forall d : preDTA, u_conv_lr_1 d prec_empty tnil (rec_empty d).

Lemma u_conv1_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_conv_rec_1 d a hd r ->
 forall l : liste_reconnait d la tl,
 u_conv_lr_1 d la tl l ->
 u_conv_lr_1 d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_conv1_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_conv_lr_1 d ls (tcons hd tl) l ->
 u_conv_lr_1 d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_conv1_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_conv_rec_1 p a t r.

Lemma u_conv1 :
 forall (p : preDTA) (a : ad) (t : term),
 reconnaissance p a t -> reconnaissance (udta_conv_1 p) (uad_conv_1 a) t.

Definition u_conv_rec_1_r (p0 : preDTA) (a0 : ad) (t : term)
  (pr0 : reconnaissance p0 a0 t) :=
  forall (p : preDTA) (a : ad),
  p0 = udta_conv_1 p -> a0 = uad_conv_1 a -> reconnaissance p a t.

Definition u_conv_str_1_r (p0 : preDTA) (s0 : state) 
  (t : term) (pr : state_reconnait p0 s0 t) :=
  forall (p : preDTA) (s : state),
  p0 = udta_conv_1 p -> s0 = umpl_conv_1 s -> state_reconnait p s t.

Definition u_conv_lr_1_r (p0 : preDTA) (pl0 : prec_list) 
  (t : term_list) (pr : liste_reconnait p0 pl0 t) :=
  forall (p : preDTA) (pl : prec_list),
  p0 = udta_conv_1 p -> pl0 = upl_conv_1 pl -> liste_reconnait p pl t.

Lemma u_conv1_0r :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_conv_str_1_r d ladj t s -> u_conv_rec_1_r d a t (rec_dta d a t ladj e s).

Lemma u_conv1_1r :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_conv_lr_1_r d l tl l0 ->
 u_conv_str_1_r d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_conv1_2r :
 forall d : preDTA, u_conv_lr_1_r d prec_empty tnil (rec_empty d).

Lemma u_conv1_3r :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_conv_rec_1_r d a hd r ->
 forall l : liste_reconnait d la tl,
 u_conv_lr_1_r d la tl l ->
 u_conv_lr_1_r d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_conv1_4r :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_conv_lr_1_r d ls (tcons hd tl) l ->
 u_conv_lr_1_r d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_conv1_5r :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_conv_rec_1_r p a t r.

Lemma u_conv1_r :
 forall (p : preDTA) (a : ad) (t : term),
 reconnaissance (udta_conv_1 p) (uad_conv_1 a) t -> reconnaissance p a t.

Lemma u_conv_disj :
 forall (p0 p1 : preDTA) (a0 a1 : ad) (s0 s1 : state),
 MapGet state (udta_conv_0 p0) a0 = Some s0 ->
 MapGet state (udta_conv_1 p1) a1 = Some s1 -> a0 <> a1.

Definition u_merge (p0 p1 : preDTA) : preDTA :=
  MapMerge state (udta_conv_0 p0) (udta_conv_1 p1).

Lemma u_merge_0 :
 forall (p0 p1 : preDTA) (a : ad) (s : state),
 MapGet state (udta_conv_0 p0) a = Some s ->
 MapGet state (u_merge p0 p1) a = Some s.

Lemma u_merge_1 :
 forall (p0 p1 : preDTA) (a : ad) (s : state),
 MapGet state (udta_conv_1 p1) a = Some s ->
 MapGet state (u_merge p0 p1) a = Some s.

Lemma u_merge_0r :
 forall (p0 p1 : preDTA) (a : ad) (s : state),
 MapGet state (u_merge p0 p1) a = Some s ->
 forall b : ad,
 a = uad_conv_0 b -> MapGet state (udta_conv_0 p0) a = Some s.

Lemma u_merge_1r :
 forall (p0 p1 : preDTA) (a : ad) (s : state),
 MapGet state (u_merge p0 p1) a = Some s ->
 forall b : ad,
 a = uad_conv_1 b -> MapGet state (udta_conv_1 p1) a = Some s.

Definition u_merge_inv_0_dta (p0 : preDTA) (a : ad) 
  (t : term) (pr : reconnaissance p0 a t) :=
  forall p1 : preDTA, reconnaissance (u_merge p0 p1) (uad_conv_0 a) t.

Definition u_merge_inv_0_st (p0 : preDTA) (s : state) 
  (t : term) (pr : state_reconnait p0 s t) :=
  forall p1 : preDTA, state_reconnait (u_merge p0 p1) (umpl_conv_0 s) t.

Definition u_merge_inv_0_lst (p0 : preDTA) (pl : prec_list) 
  (lt : term_list) (pr : liste_reconnait p0 pl lt) :=
  forall p1 : preDTA, liste_reconnait (u_merge p0 p1) (upl_conv_0 pl) lt.

Lemma u_merge_2_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_merge_inv_0_st d ladj t s ->
 u_merge_inv_0_dta d a t (rec_dta d a t ladj e s).

Lemma u_merge_2_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_merge_inv_0_lst d l tl l0 ->
 u_merge_inv_0_st d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_merge_2_2 :
 forall d : preDTA, u_merge_inv_0_lst d prec_empty tnil (rec_empty d).

Lemma u_merge_2_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_merge_inv_0_dta d a hd r ->
 forall l : liste_reconnait d la tl,
 u_merge_inv_0_lst d la tl l ->
 u_merge_inv_0_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_merge_2_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_merge_inv_0_lst d ls (tcons hd tl) l ->
 u_merge_inv_0_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_merge_2_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_merge_inv_0_dta p a t r.

Lemma u_merge_2 :
 forall (p0 p1 : preDTA) (a : ad) (t : term),
 reconnaissance p0 a t -> reconnaissance (u_merge p0 p1) (uad_conv_0 a) t.

Definition u_merge_inv_1_dta (p1 : preDTA) (a : ad) 
  (t : term) (pr : reconnaissance p1 a t) :=
  forall p0 : preDTA, reconnaissance (u_merge p0 p1) (uad_conv_1 a) t.

Definition u_merge_inv_1_st (p1 : preDTA) (s : state) 
  (t : term) (pr : state_reconnait p1 s t) :=
  forall p0 : preDTA, state_reconnait (u_merge p0 p1) (umpl_conv_1 s) t.

Definition u_merge_inv_1_lst (p1 : preDTA) (pl : prec_list) 
  (lt : term_list) (pr : liste_reconnait p1 pl lt) :=
  forall p0 : preDTA, liste_reconnait (u_merge p0 p1) (upl_conv_1 pl) lt.

Lemma u_merge_3_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_merge_inv_1_st d ladj t s ->
 u_merge_inv_1_dta d a t (rec_dta d a t ladj e s).

Lemma u_merge_3_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_merge_inv_1_lst d l tl l0 ->
 u_merge_inv_1_st d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_merge_3_2 :
 forall d : preDTA, u_merge_inv_1_lst d prec_empty tnil (rec_empty d).

Lemma u_merge_3_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_merge_inv_1_dta d a hd r ->
 forall l : liste_reconnait d la tl,
 u_merge_inv_1_lst d la tl l ->
 u_merge_inv_1_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_merge_3_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_merge_inv_1_lst d ls (tcons hd tl) l ->
 u_merge_inv_1_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_merge_3_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_merge_inv_1_dta p a t r.

Lemma u_merge_3 :
 forall (p0 p1 : preDTA) (a : ad) (t : term),
 reconnaissance p1 a t -> reconnaissance (u_merge p0 p1) (uad_conv_1 a) t.

Definition u_merge_invr_0_dta (p : preDTA) (a : ad) 
  (t : term) (pr : reconnaissance p a t) :=
  forall p0 p1 : preDTA,
  p = u_merge p0 p1 ->
  forall a0 : ad, a = uad_conv_0 a0 -> reconnaissance (udta_conv_0 p0) a t.

Definition u_merge_invr_0_st (p : preDTA) (s : state) 
  (t : term) (pr : state_reconnait p s t) :=
  forall p0 p1 : preDTA,
  p = u_merge p0 p1 ->
  forall s0 : state,
  s = umpl_conv_0 s0 -> state_reconnait (udta_conv_0 p0) s t.

Definition u_merge_invr_0_lst (p : preDTA) (pl : prec_list) 
  (lt : term_list) (pr : liste_reconnait p pl lt) :=
  forall p0 p1 : preDTA,
  p = u_merge p0 p1 ->
  forall pl0 : prec_list,
  pl = upl_conv_0 pl0 -> liste_reconnait (udta_conv_0 p0) pl lt.

Lemma u_merge_4_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_merge_invr_0_st d ladj t s ->
 u_merge_invr_0_dta d a t (rec_dta d a t ladj e s).

Lemma u_merge_4_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_merge_invr_0_lst d l tl l0 ->
 u_merge_invr_0_st d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_merge_4_2 :
 forall d : preDTA, u_merge_invr_0_lst d prec_empty tnil (rec_empty d).

Lemma u_merge_4_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_merge_invr_0_dta d a hd r ->
 forall l : liste_reconnait d la tl,
 u_merge_invr_0_lst d la tl l ->
 u_merge_invr_0_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_merge_4_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_merge_invr_0_lst d ls (tcons hd tl) l ->
 u_merge_invr_0_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_merge_4_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_merge_invr_0_dta p a t r.

Lemma u_merge_4 :
 forall (p0 p1 : preDTA) (a : ad) (t : term),
 reconnaissance (u_merge p0 p1) (uad_conv_0 a) t -> reconnaissance p0 a t.

Definition u_merge_invr_1_dta (p : preDTA) (a : ad) 
  (t : term) (pr : reconnaissance p a t) :=
  forall p0 p1 : preDTA,
  p = u_merge p0 p1 ->
  forall a0 : ad, a = uad_conv_1 a0 -> reconnaissance (udta_conv_1 p1) a t.

Definition u_merge_invr_1_st (p : preDTA) (s : state) 
  (t : term) (pr : state_reconnait p s t) :=
  forall p0 p1 : preDTA,
  p = u_merge p0 p1 ->
  forall s0 : state,
  s = umpl_conv_1 s0 -> state_reconnait (udta_conv_1 p1) s t.

Definition u_merge_invr_1_lst (p : preDTA) (pl : prec_list) 
  (lt : term_list) (pr : liste_reconnait p pl lt) :=
  forall p0 p1 : preDTA,
  p = u_merge p0 p1 ->
  forall pl0 : prec_list,
  pl = upl_conv_1 pl0 -> liste_reconnait (udta_conv_1 p1) pl lt.

Lemma u_merge_5_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 u_merge_invr_1_st d ladj t s ->
 u_merge_invr_1_dta d a t (rec_dta d a t ladj e s).

Lemma u_merge_5_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 u_merge_invr_1_lst d l tl l0 ->
 u_merge_invr_1_st d s (app c tl) (rec_st d s c tl l e l0).

Lemma u_merge_5_2 :
 forall d : preDTA, u_merge_invr_1_lst d prec_empty tnil (rec_empty d).

Lemma u_merge_5_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 u_merge_invr_1_dta d a hd r ->
 forall l : liste_reconnait d la tl,
 u_merge_invr_1_lst d la tl l ->
 u_merge_invr_1_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma u_merge_5_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 u_merge_invr_1_lst d ls (tcons hd tl) l ->
 u_merge_invr_1_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma u_merge_5_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 u_merge_invr_1_dta p a t r.

Lemma u_merge_5 :
 forall (p0 p1 : preDTA) (a : ad) (t : term),
 reconnaissance (u_merge p0 p1) (uad_conv_1 a) t -> reconnaissance p1 a t.

Fixpoint union_pl (pl0 : prec_list) : prec_list -> prec_list :=
  fun pl1 : prec_list =>
  match pl0 with
  | prec_empty => pl1
  | prec_cons a pl00 pl01 => prec_cons a pl00 (union_pl pl01 pl1)
  end.

Fixpoint union_mpl_0 (c : ad) (pl : prec_list) (s : state) {struct s} :
 state :=
  match s with
  | M0 => M1 prec_list c pl
  | M1 c0 pl0 =>
      if Neqb c c0
      then M1 prec_list c (union_pl pl pl0)
      else MapMerge prec_list (M1 prec_list c pl) (M1 prec_list c0 pl0)
  | M2 s0 s1 =>
      match c with
      | N0 => M2 prec_list (union_mpl_0 N0 pl s0) s1
      | Npos p =>
          match p with
          | xH => M2 prec_list s0 (union_mpl_0 N0 pl s1)
          | xO p' => M2 prec_list (union_mpl_0 (Npos p') pl s0) s1
          | xI p' => M2 prec_list s0 (union_mpl_0 (Npos p') pl s1)
          end
      end
  end.

Fixpoint union_mpl (s0 : state) : state -> state :=
  fun s1 : state =>
  match s0, s1 with
  | M0, M0 => M0 prec_list
  | M0, M2 s10 s11 => M2 prec_list s10 s11
  | _, M1 c1 pl1 => union_mpl_0 c1 pl1 s0
  | M1 c0 pl0, _ => union_mpl_0 c0 pl0 s1
  | M2 s00 s01, M0 => M2 prec_list s00 s01
  | M2 s00 s01, M2 s10 s11 =>
      M2 prec_list (union_mpl s00 s10) (union_mpl s01 s11)
  end.

Lemma union_pl_0 : forall pl : prec_list, union_pl pl prec_empty = pl.

Lemma union_pl_1 : forall pl : prec_list, union_pl prec_empty pl = pl.

Lemma union_pl_2 :
 forall pl0 pl1 : prec_list,
 union_pl pl0 pl1 = prec_empty -> pl0 = prec_empty.

Lemma union_pl_3 :
 forall pl0 pl1 : prec_list,
 pl0 <> prec_empty -> union_pl pl0 pl1 <> prec_empty.

Lemma union_pl_0d_0 :
 forall (d : preDTA) (pl0 : prec_list) (tl : term_list),
 liste_reconnait d pl0 tl -> liste_reconnait d (union_pl pl0 prec_empty) tl.

Lemma union_pl_0d_1 :
 forall (d : preDTA) (pl0 : prec_list) (tl : term_list) 
   (a : ad) (la ls : prec_list),
 liste_reconnait d pl0 tl ->
 pl0 <> prec_empty -> liste_reconnait d (union_pl pl0 (prec_cons a la ls)) tl.

Lemma union_pl_0d :
 forall (d : preDTA) (pl0 pl1 : prec_list) (tl : term_list),
 pl_compat pl0 pl1 ->
 liste_reconnait d pl0 tl -> liste_reconnait d (union_pl pl0 pl1) tl.

Lemma union_pl_1d_0 :
 forall (d : preDTA) (pl1 : prec_list) (tl : term_list),
 liste_reconnait d pl1 tl -> liste_reconnait d (union_pl prec_empty pl1) tl.

Lemma union_pl_1d_1 :
 forall (d : preDTA) (pl1 : prec_list) (tl : term_list) pl0,
 liste_reconnait d pl1 tl ->
 pl1 <> prec_empty -> liste_reconnait d (union_pl pl0 pl1) tl.

Lemma union_pl_1d :
 forall (d : preDTA) (pl0 pl1 : prec_list) (tl : term_list),
 pl_compat pl0 pl1 ->
 liste_reconnait d pl1 tl -> liste_reconnait d (union_pl pl0 pl1) tl.

Lemma union_pl_r_0 :
 forall (d : preDTA) (pl0 pl1 : prec_list) (hd : term) (tl : term_list),
 liste_reconnait d (union_pl pl0 pl1) (tcons hd tl) ->
 liste_reconnait d pl0 (tcons hd tl) \/ liste_reconnait d pl1 (tcons hd tl).

Lemma union_pl_r_1 :
 forall (d : preDTA) (pl0 pl1 : prec_list),
 pl_compat pl0 pl1 ->
 liste_reconnait d (union_pl pl0 pl1) tnil ->
 liste_reconnait d pl0 tnil \/ liste_reconnait d pl1 tnil.

Lemma union_pl_r :
 forall (d : preDTA) (pl0 pl1 : prec_list) (tl : term_list),
 pl_compat pl0 pl1 ->
 liste_reconnait d (union_pl pl0 pl1) tl ->
 liste_reconnait d pl0 tl \/ liste_reconnait d pl1 tl.

Definition mpl_compat_7_def (s : state) : Prop :=
  forall (c : ad) (pl l : prec_list),
  MapGet prec_list s c = Some l ->
  MapGet prec_list (union_mpl_0 c pl s) c = Some (union_pl pl l).

Lemma mpl_compat_7_0 : mpl_compat_7_def (M0 prec_list).

Lemma mpl_compat_7_1 :
 forall (a : ad) (a0 : prec_list), mpl_compat_7_def (M1 prec_list a a0).

Lemma mpl_compat_7_2 :
 forall m : Map prec_list,
 mpl_compat_7_def m ->
 forall m0 : Map prec_list,
 mpl_compat_7_def m0 -> mpl_compat_7_def (M2 prec_list m m0).

Lemma mpl_compat_7_3 : forall m : state, mpl_compat_7_def m.

Lemma mpl_compat_7 :
 forall (s : state) (c : ad) (pl l : prec_list),
 MapGet prec_list s c = Some l ->
 MapGet prec_list (union_mpl_0 c pl s) c = Some (union_pl pl l).

Definition mpl_compat_8_def (s : state) : Prop :=
  forall (a c : ad) (pl l : prec_list),
  MapGet prec_list s c = Some l ->
  a <> c -> MapGet prec_list (union_mpl_0 a pl s) c = Some l.

Lemma mpl_compat_8_0 : mpl_compat_8_def (M0 prec_list).

Lemma mpl_compat_8_1 :
 forall (a : ad) (a0 : prec_list), mpl_compat_8_def (M1 prec_list a a0).

Lemma mpl_compat_8_2 :
 forall m : state,
 mpl_compat_8_def m ->
 forall m0 : state,
 mpl_compat_8_def m0 -> mpl_compat_8_def (M2 prec_list m m0).

Lemma mpl_compat_8_3 : forall m : state, mpl_compat_8_def m.

Lemma mpl_compat_8 :
 forall (s : state) (a c : ad) (pl l : prec_list),
 MapGet prec_list s c = Some l ->
 a <> c -> MapGet prec_list (union_mpl_0 a pl s) c = Some l.

Lemma union_s0d_0 :
 forall (d : preDTA) (c : ad) (pl : prec_list) (tl : term_list),
 mpl_compat (M1 prec_list c pl) (M0 prec_list) ->
 state_reconnait d (M1 prec_list c pl) (app c tl) ->
 state_reconnait d (union_mpl_0 c pl (M0 prec_list)) (app c tl).

Lemma union_s0d_1_0 :
 forall (d : preDTA) (c : ad) (pl pl0 : prec_list) (tl : term_list),
 mpl_compat (M1 prec_list c pl) (M1 prec_list c pl0) ->
 state_reconnait d (M1 prec_list c pl) (app c tl) ->
 state_reconnait d (union_mpl_0 c pl (M1 prec_list c pl0)) (app c tl).

Lemma union_s0d_1_1 :
 forall (d : preDTA) (c : ad) (pl : prec_list) (c0 : ad) 
   (pl0 : prec_list) (tl : term_list),
 mpl_compat (M1 prec_list c pl) (M1 prec_list c0 pl0) ->
 c <> c0 ->
 state_reconnait d (M1 prec_list c pl) (app c tl) ->
 state_reconnait d (union_mpl_0 c pl (M1 prec_list c0 pl0)) (app c tl).

Lemma union_s0d_2_0 :
 forall (d : preDTA) (pl : prec_list) (s0 s1 : state) (tl : term_list),
 mpl_compat (M1 prec_list N0 pl) (M2 prec_list s0 s1) ->
 state_reconnait d (M1 prec_list N0 pl) (app N0 tl) ->
 state_reconnait d (union_mpl_0 N0 pl (M2 prec_list s0 s1)) (app N0 tl).

Lemma union_s0d_2_1 :
 forall (d : preDTA) (pl : prec_list) (s0 s1 : state) (tl : term_list),
 mpl_compat (M1 prec_list (Npos 1) pl) (M2 prec_list s0 s1) ->
 state_reconnait d (M1 prec_list (Npos 1) pl) (app (Npos 1) tl) ->
 state_reconnait d (union_mpl_0 (Npos 1) pl (M2 prec_list s0 s1))
   (app (Npos 1) tl).

Definition union_s_prd0 (s : state) : Prop :=
  forall (d : preDTA) (c : ad) (pl : prec_list) (tl : term_list),
  mpl_compat (M1 prec_list c pl) s ->
  state_reconnait d (M1 prec_list c pl) (app c tl) ->
  state_reconnait d (union_mpl_0 c pl s) (app c tl).

Lemma union_s0d_2 :
 forall m : Map prec_list,
 union_s_prd0 m ->
 forall m0 : Map prec_list,
 union_s_prd0 m0 -> union_s_prd0 (M2 prec_list m m0).

Lemma union_s0d_3 : union_s_prd0 (M0 prec_list).

Lemma union_s0d_1 :
 forall (a : ad) (a0 : prec_list), union_s_prd0 (M1 prec_list a a0).

Lemma union_s_0d : forall m : state, union_s_prd0 m.

Lemma union_s0d :
 forall (s : state) (d : preDTA) (c : ad) (pl : prec_list) (tl : term_list),
 mpl_compat (M1 prec_list c pl) s ->
 state_reconnait d (M1 prec_list c pl) (app c tl) ->
 state_reconnait d (union_mpl_0 c pl s) (app c tl).

Definition union_s_prd1 (s : state) : Prop :=
  forall (d : preDTA) (a : ad) (pl : prec_list) (c : ad) (tl : term_list),
  mpl_compat (M1 prec_list a pl) s ->
  state_reconnait d s (app c tl) ->
  state_reconnait d (union_mpl_0 a pl s) (app c tl).

Lemma union_s1d_0 : union_s_prd1 (M0 prec_list).

Lemma union_s1d_1_0 :
 forall (d : preDTA) (a : ad) (pl pl0 : prec_list) (c : ad) (tl : term_list),
 mpl_compat (M1 prec_list a pl) (M1 prec_list c pl0) ->
 a <> c ->
 state_reconnait d (M1 prec_list c pl0) (app c tl) ->
 state_reconnait d (union_mpl_0 a pl (M1 prec_list c pl0)) (app c tl).

Lemma union_s1d_1_1 :
 forall (d : preDTA) (pl pl0 : prec_list) (c : ad) (tl : term_list),
 mpl_compat (M1 prec_list c pl) (M1 prec_list c pl0) ->
 state_reconnait d (M1 prec_list c pl0) (app c tl) ->
 state_reconnait d (union_mpl_0 c pl (M1 prec_list c pl0)) (app c tl).

Lemma union_s1d_1 :
 forall (a : ad) (a0 : prec_list), union_s_prd1 (M1 prec_list a a0).

Lemma union_s1d_2 :
 forall m : state,
 union_s_prd1 m ->
 forall m0 : state, union_s_prd1 m0 -> union_s_prd1 (M2 prec_list m m0).

Lemma union_s1d_3 : forall m : state, union_s_prd1 m.

Lemma union_s1d :
 forall (s : state) (d : preDTA) (a : ad) (pl : prec_list) 
   (c : ad) (tl : term_list),
 mpl_compat (M1 prec_list a pl) s ->
 state_reconnait d s (app c tl) ->
 state_reconnait d (union_mpl_0 a pl s) (app c tl).

Definition union_std_def (s0 : state) : Prop :=
  forall (s1 : state) (d : preDTA) (c : ad) (tl : term_list),
  mpl_compat s0 s1 ->
  state_reconnait d s0 (app c tl) ->
  state_reconnait d (union_mpl s0 s1) (app c tl) /\
  state_reconnait d (union_mpl s1 s0) (app c tl).

Lemma union_std_0 : union_std_def (M0 prec_list).

Lemma union_std_1 :
 forall (a : ad) (a0 : prec_list), union_std_def (M1 prec_list a a0).

Lemma union_std_2 :
 forall m : state,
 union_std_def m ->
 forall m0 : state, union_std_def m0 -> union_std_def (M2 prec_list m m0).

Lemma union_std : forall m : state, union_std_def m.

Lemma union_sd :
 forall (s0 s1 : state) (d : preDTA) (c : ad) (tl : term_list),
 mpl_compat s0 s1 ->
 state_reconnait d s0 (app c tl) ->
 state_reconnait d (union_mpl s0 s1) (app c tl) /\
 state_reconnait d (union_mpl s1 s0) (app c tl).

Definition union_s_rpl_def (s : state) : Prop :=
  forall (d : preDTA) (a : ad) (pl : prec_list) (c : ad) (tl : term_list),
  mpl_compat (M1 prec_list a pl) s ->
  state_reconnait d (union_mpl_0 a pl s) (app c tl) ->
  state_reconnait d (M1 prec_list a pl) (app c tl) \/
  state_reconnait d s (app c tl).

Lemma union_s_rpl_0 : union_s_rpl_def (M0 prec_list).

Lemma union_s_rpl_1 :
 forall (a : ad) (a0 : prec_list), union_s_rpl_def (M1 prec_list a a0).

Lemma union_s_rpl_2 :
 forall m : state,
 union_s_rpl_def m ->
 forall m0 : state, union_s_rpl_def m0 -> union_s_rpl_def (M2 prec_list m m0).

Lemma union_s_rpl_3 : forall m : state, union_s_rpl_def m.

Lemma union_s_rpl :
 forall (s : state) (d : preDTA) (a : ad) (pl : prec_list) 
   (c : ad) (tl : term_list),
 mpl_compat (M1 prec_list a pl) s ->
 state_reconnait d (union_mpl_0 a pl s) (app c tl) ->
 state_reconnait d (M1 prec_list a pl) (app c tl) \/
 state_reconnait d s (app c tl).

Definition union_str_def (s0 : state) : Prop :=
  forall (s1 : state) (d : preDTA) (c : ad) (tl : term_list),
  mpl_compat s0 s1 ->
  state_reconnait d (union_mpl s0 s1) (app c tl) \/
  state_reconnait d (union_mpl s1 s0) (app c tl) ->
  state_reconnait d s0 (app c tl) \/ state_reconnait d s1 (app c tl).

Lemma union_str_0 : union_str_def (M0 prec_list).

Lemma union_str_1 :
 forall (a : ad) (a0 : prec_list), union_str_def (M1 prec_list a a0).

Lemma union_str_2 :
 forall m : state,
 union_str_def m ->
 forall m0 : state, union_str_def m0 -> union_str_def (M2 prec_list m m0).

Lemma union_str_3 : forall m : state, union_str_def m.

Lemma union_str :
 forall (s0 s1 : state) (d : preDTA) (c : ad) (tl : term_list),
 mpl_compat s0 s1 ->
 state_reconnait d (union_mpl s0 s1) (app c tl) \/
 state_reconnait d (union_mpl s1 s0) (app c tl) ->
 state_reconnait d s0 (app c tl) \/ state_reconnait d s1 (app c tl).

Lemma union_state :
 forall (s0 s1 : state) (d : preDTA) (t : term),
 mpl_compat s0 s1 ->
 (state_reconnait d (union_mpl s0 s1) t <->
  state_reconnait d s0 t \/ state_reconnait d s1 t).

Definition new_preDTA_ad : preDTA -> ad := ad_alloc_opt state.

Definition new_state_insd_def_dta (d : preDTA) (a0 : ad) 
  (t0 : term) (pr : reconnaissance d a0 t0) :=
  forall (a : ad) (s : state),
  MapGet state d a = None -> reconnaissance (MapPut state d a s) a0 t0.

Definition new_state_insd_def_st (d : preDTA) (s0 : state) 
  (t0 : term) (pr : state_reconnait d s0 t0) :=
  forall (a : ad) (s : state),
  MapGet state d a = None -> state_reconnait (MapPut state d a s) s0 t0.

Definition new_state_insd_def_lst (d : preDTA) (pl0 : prec_list)
  (tl0 : term_list) (pr : liste_reconnait d pl0 tl0) :=
  forall (a : ad) (s : state),
  MapGet state d a = None ->
  liste_reconnait (MapPut state d a s) pl0 tl0.

Lemma new_state_insd_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 new_state_insd_def_st d ladj t s ->
 new_state_insd_def_dta d a t (rec_dta d a t ladj e s).

Lemma new_state_insd_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 new_state_insd_def_lst d l tl l0 ->
 new_state_insd_def_st d s (app c tl) (rec_st d s c tl l e l0).

Lemma new_state_insd_2 :
 forall d : preDTA, new_state_insd_def_lst d prec_empty tnil (rec_empty d).

Lemma new_state_insd_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 new_state_insd_def_dta d a hd r ->
 forall l : liste_reconnait d la tl,
 new_state_insd_def_lst d la tl l ->
 new_state_insd_def_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma new_state_insd_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 new_state_insd_def_lst d ls (tcons hd tl) l ->
 new_state_insd_def_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma new_state_insd_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 new_state_insd_def_dta p a t r.

Lemma new_state_ins_d :
 forall (d : preDTA) (a : ad) (s : state) (a0 : ad) (t : term),
 reconnaissance d a0 t ->
 MapGet state d a = None -> reconnaissance (MapPut state d a s) a0 t.

Definition new_state_insr_def_dta (d0 : preDTA) (a0 : ad) 
  (t0 : term) (pr : reconnaissance d0 a0 t0) :=
  forall (d : preDTA) (a : ad) (s : state),
  preDTA_ref_ok d ->
  d0 = MapPut state d a s ->
  MapGet state d a = None -> a <> a0 -> reconnaissance d a0 t0.

Definition new_state_insr_def_st (d0 : preDTA) (s0 : state) 
  (t0 : term) (pr : state_reconnait d0 s0 t0) :=
  forall (d : preDTA) (a : ad) (s : state),
  preDTA_ref_ok d ->
  state_in_dta_diff d0 s0 a ->
  d0 = MapPut state d a s ->
  MapGet state d a = None -> state_reconnait d s0 t0.

Definition new_state_insr_def_lst (d0 : preDTA) (pl0 : prec_list)
  (tl0 : term_list) (pr : liste_reconnait d0 pl0 tl0) :=
  forall (d : preDTA) (a : ad) (s : state),
  preDTA_ref_ok d ->
  d0 = MapPut state d a s ->
  MapGet state d a = None ->
  prec_in_dta_diff_cont d0 pl0 a ->
  liste_reconnait d pl0 tl0 /\ prec_in_dta_diff_cont d pl0 a.

Lemma new_state_insr_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 new_state_insr_def_st d ladj t s ->
 new_state_insr_def_dta d a t (rec_dta d a t ladj e s).

Lemma new_state_insr_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 new_state_insr_def_lst d l tl l0 ->
 new_state_insr_def_st d s (app c tl) (rec_st d s c tl l e l0).

Lemma new_state_insr_2 :
 forall d : preDTA, new_state_insr_def_lst d prec_empty tnil (rec_empty d).

Lemma new_state_insr_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 new_state_insr_def_dta d a hd r ->
 forall l : liste_reconnait d la tl,
 new_state_insr_def_lst d la tl l ->
 new_state_insr_def_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma new_state_insr_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 new_state_insr_def_lst d ls (tcons hd tl) l ->
 new_state_insr_def_lst d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma new_state_insr_5 :
 forall (p : preDTA) (a : ad) (t : term) (r : reconnaissance p a t),
 new_state_insr_def_dta p a t r.

Lemma new_state_ins_r :
 forall (d0 : preDTA) (a0 : ad) (t0 : term) (d : preDTA) (a : ad) (s : state),
 reconnaissance d0 a0 t0 ->
 preDTA_ref_ok d ->
 d0 = MapPut state d a s ->
 MapGet state d a = None -> a <> a0 -> reconnaissance d a0 t0.

Definition insert_state (d : preDTA) (a : ad) (s : state) : preDTA :=
  MapPut state d a s.

Definition insert_main_state_0 (d : preDTA) (a : ad) 
  (s : state) : DTA := dta (insert_state d a s) a.

Definition insert_main_state (d : preDTA) (s : state) : DTA :=
  insert_main_state_0 d (new_preDTA_ad d) s.

Definition insert_ostate (d : preDTA) (a : ad) (o : option state) : preDTA :=
  match o with
  | None => d
  | Some s => MapPut state d a s
  end.

Definition insert_main_ostate_0 (d : preDTA) (a : ad) 
  (o : option state) : DTA := dta (insert_ostate d a o) a.

Lemma insert_ostate_0 :
 forall (d : preDTA) (a : ad) (s : state) (a0 : ad) (t : term),
 preDTA_ref_ok d ->
 MapGet state d a = None ->
 a <> a0 ->
 (reconnaissance d a0 t <->
  reconnaissance (insert_ostate d a (Some s)) a0 t).

Lemma insert_ostate_1 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s s0 s1 s0' s1' : state) (t : term),
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_0 a0 ->
 (reconnaissance d0 a0 t <->
  reconnaissance (insert_ostate (u_merge d0 d1) a (Some s))
    (uad_conv_0 a0) t).

Lemma insert_ostate_2 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s s0 s1 s0' s1' : state) (t : term),
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_1 a1 ->
 (reconnaissance d1 a1 t <->
  reconnaissance (insert_ostate (u_merge d0 d1) a (Some s))
    (uad_conv_1 a1) t).

Lemma insert_ostate_3 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s s0 s1 s0' s1' : state) (t : term),
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_0 a0 ->
 (reconnaissance (insert_ostate (u_merge d0 d1) a (Some s))
    (uad_conv_0 a0) t <->
  state_reconnait (insert_ostate (u_merge d0 d1) a (Some s)) s0' t).

Lemma insert_ostate_4 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s s0 s1 s0' s1' : state) (t : term),
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_1 a1 ->
 (reconnaissance (insert_ostate (u_merge d0 d1) a (Some s))
    (uad_conv_1 a1) t <->
  state_reconnait (insert_ostate (u_merge d0 d1) a (Some s)) s1' t).

Lemma insert_ostate_5 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s0 s1 s0' s1' : state) (t : term),
 mpl_compat s0' s1' ->
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_0 a0 ->
 a <> uad_conv_1 a1 ->
 (state_reconnait
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1')))
    (union_mpl s0' s1') t <->
  state_reconnait
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) s0' t \/
  state_reconnait
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) s1' t).

Lemma insert_ostate_6 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s0 s1 s0' s1' : state) (t : term),
 mpl_compat s0' s1' ->
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_0 a0 ->
 a <> uad_conv_1 a1 ->
 (state_reconnait
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1')))
    (union_mpl s0' s1') t <->
  reconnaissance
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) a t).

Lemma insert_ostate_7 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s0 s1 s0' s1' : state) (t : term),
 mpl_compat s0' s1' ->
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 MapGet state (u_merge d0 d1) a = None ->
 a <> uad_conv_0 a0 ->
 a <> uad_conv_1 a1 ->
 (reconnaissance d0 a0 t \/ reconnaissance d1 a1 t <->
  reconnaissance
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) a t).

Lemma insert_ostate_8 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s0 s1 s0' s1' : state) (t : term),
 mpl_compat s0' s1' ->
 MapGet state d0 a0 = Some s0 ->
 MapGet state d1 a1 = Some s1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 preDTA_ref_ok (u_merge d0 d1) ->
 a = new_preDTA_ad (u_merge d0 d1) ->
 (reconnaissance d0 a0 t \/ reconnaissance d1 a1 t <->
  reconnaissance
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) a t).

Lemma upl_conv_0_occur :
 forall (pl : prec_list) (a : ad),
 prec_occur (upl_conv_0 pl) (uad_conv_0 a) -> prec_occur pl a.

Lemma upl_conv_1_occur :
 forall (pl : prec_list) (a : ad),
 prec_occur (upl_conv_1 pl) (uad_conv_1 a) -> prec_occur pl a.

Lemma upl_conv_0_occur_in_img :
 forall (pl : prec_list) (a : ad),
 prec_occur (upl_conv_0 pl) a -> exists b : ad, a = uad_conv_0 b.

Lemma upl_conv_1_occur_in_img :
 forall (pl : prec_list) (a : ad),
 prec_occur (upl_conv_1 pl) a -> exists b : ad, a = uad_conv_1 b.

Lemma u_conv_0_ref_ok :
 forall d : preDTA, preDTA_ref_ok d -> preDTA_ref_ok (udta_conv_0 d).

Lemma u_conv_1_ref_ok :
 forall d : preDTA, preDTA_ref_ok d -> preDTA_ref_ok (udta_conv_1 d).

Lemma u_merge_ref_ok :
 forall d0 d1 : preDTA,
 preDTA_ref_ok d0 -> preDTA_ref_ok d1 -> preDTA_ref_ok (u_merge d0 d1).

Lemma upl_conv_compat_0_0 :
 forall p0 p1 : prec_list,
 pl_compat p0 p1 -> pl_compat (upl_conv_0 p0) (upl_conv_0 p1).

Lemma upl_conv_compat_0_1 :
 forall p0 p1 : prec_list,
 pl_compat p0 p1 -> pl_compat (upl_conv_0 p0) (upl_conv_1 p1).

Lemma upl_conv_compat_1_0 :
 forall p0 p1 : prec_list,
 pl_compat p0 p1 -> pl_compat (upl_conv_1 p0) (upl_conv_0 p1).

Lemma upl_conv_compat_1_1 :
 forall p0 p1 : prec_list,
 pl_compat p0 p1 -> pl_compat (upl_conv_1 p0) (upl_conv_1 p1).

Lemma umpl_conv_0_compat :
 forall s0 s1 : state,
 mpl_compat s0 s1 -> mpl_compat (umpl_conv_0 s0) (umpl_conv_0 s1).

Lemma umpl_conv_1_compat :
 forall s0 s1 : state,
 mpl_compat s0 s1 -> mpl_compat (umpl_conv_1 s0) (umpl_conv_1 s1).

Lemma umpl_conv_0_1_compat :
 forall s0 s1 : state,
 mpl_compat s0 s1 -> mpl_compat (umpl_conv_0 s0) (umpl_conv_1 s1).

Lemma udta_conv_0_compat :
 forall d : preDTA, dta_correct d -> dta_correct (udta_conv_0 d).

Lemma udta_conv_1_compat :
 forall d : preDTA, dta_correct d -> dta_correct (udta_conv_1 d).

Lemma udta_conv_0_1_compat :
 forall d0 d1 : preDTA,
 dta_compat d0 d1 -> dta_compat (udta_conv_0 d0) (udta_conv_1 d1).

Lemma insert_ostate_9 :
 forall (d0 d1 : preDTA) (a0 a1 a : ad) (s0' s1' : state) (t : term),
 preDTA_ref_ok d0 ->
 preDTA_ref_ok d1 ->
 dta_compat d0 d1 ->
 MapGet state (u_merge d0 d1) (uad_conv_0 a0) = Some s0' ->
 MapGet state (u_merge d0 d1) (uad_conv_1 a1) = Some s1' ->
 a = new_preDTA_ad (u_merge d0 d1) ->
 (reconnaissance d0 a0 t \/ reconnaissance d1 a1 t <->
  reconnaissance
    (insert_ostate (u_merge d0 d1) a (Some (union_mpl s0' s1'))) a t).

Definition insert_main_ostate (d : preDTA) (o : option state) : DTA :=
  insert_main_ostate_0 d (new_preDTA_ad d) o.

Definition union_opt_state (o0 o1 : option state) : 
  option state :=
  match o0, o1 with
  | None, None => None
  | None, Some s1 => Some s1
  | Some s0, None => Some s0
  | Some s0, Some s1 => Some (union_mpl s0 s1)
  end.

Definition union_0 (d : preDTA) (a0 a1 : ad) : option state :=
  union_opt_state (MapGet state d (uad_conv_0 a0))
    (MapGet state d (uad_conv_1 a1)).

Definition union_1 (d : preDTA) (a0 a1 : ad) : DTA :=
  insert_main_ostate d (union_0 d a0 a1).

Definition union (dt0 dt1 : DTA) : DTA :=
  match dt0, dt1 with
  | dta d0 a0, dta d1 a1 => union_1 (u_merge d0 d1) a0 a1
  end.

Lemma union_semantics_0 :
 forall (d0 d1 : DTA) (t : term),
 DTA_main_state_correct d0 ->
 DTA_main_state_correct d1 ->
 DTA_ref_ok d0 ->
 DTA_ref_ok d1 ->
 DTA_compat d0 d1 ->
 (reconnait d0 t \/ reconnait d1 t <-> reconnait (union d0 d1) t).

Lemma union_semantics :
 forall (d0 d1 : DTA) (sigma : signature) (t : term),
 DTA_main_state_correct d0 ->
 DTA_main_state_correct d1 ->
 DTA_ref_ok d0 ->
 DTA_ref_ok d1 ->
 dta_correct_wrt_sign d0 sigma ->
 dta_correct_wrt_sign d1 sigma ->
 (reconnait d0 t \/ reconnait d1 t <-> reconnait (union d0 d1) t). *)
Require Import union_correct.
(* union_correct:
Require Import Bool.
Require Import NArith Ndec Ndigits.
Require Import ZArith.
Require Import Classical_Prop.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import signature.
Require Import refcorrect.
Require Import union.

Lemma upl_conv_0_correct_wrt_sign_invar :
 forall (p : prec_list) (n : nat),
 pl_tl_length p n -> pl_tl_length (upl_conv_0 p) n.

Lemma upl_conv_1_correct_wrt_sign_invar :
 forall (p : prec_list) (n : nat),
 pl_tl_length p n -> pl_tl_length (upl_conv_1 p) n.

Lemma umpl_conv_0_correct_wrt_sign_invar_0 :
 forall (s : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset s sigma pa ->
 state_correct_wrt_sign_with_offset (umpl_conv_0 s) sigma pa.

Lemma umpl_conv_0_correct_wrt_sign_invar :
 forall (s : state) (sigma : signature),
 state_correct_wrt_sign s sigma ->
 state_correct_wrt_sign (umpl_conv_0 s) sigma.

Lemma umpl_conv_1_correct_wrt_sign_invar_0 :
 forall (s : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset s sigma pa ->
 state_correct_wrt_sign_with_offset (umpl_conv_1 s) sigma pa.

Lemma umpl_conv_1_correct_wrt_sign_invar :
 forall (s : state) (sigma : signature),
 state_correct_wrt_sign s sigma ->
 state_correct_wrt_sign (umpl_conv_1 s) sigma.

Lemma udta_conv_0_correct_wrt_sign_invar_0 :
 forall (d : preDTA) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (udta_conv_0_aux d) sigma.

Lemma udta_conv_0_correct_wrt_sign_invar :
 forall (d : preDTA) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (udta_conv_0 d) sigma.

Lemma udta_conv_1_correct_wrt_sign_invar_0 :
 forall (d : preDTA) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (udta_conv_1_aux d) sigma.

Lemma udta_conv_1_correct_wrt_sign_invar :
 forall (d : preDTA) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (udta_conv_1 d) sigma.

Lemma umerge_correct_wrt_sign_invar :
 forall (d0 d1 : preDTA) (sigma : signature),
 predta_correct_wrt_sign d0 sigma ->
 predta_correct_wrt_sign d1 sigma ->
 predta_correct_wrt_sign (u_merge d0 d1) sigma.

Lemma union_pl_correct_wrt_sign_invar :
 forall (p0 p1 : prec_list) (n : nat),
 pl_tl_length p0 n -> pl_tl_length p1 n -> pl_tl_length (union_pl p0 p1) n.

Lemma union_mpl_correct_wrt_sign_invar_0 :
 forall (s : state) (a : ad) (p : prec_list) (pa : pre_ad)
   (sigma : signature),
 state_correct_wrt_sign_with_offset s sigma pa ->
 state_correct_wrt_sign_with_offset (M1 prec_list a p) sigma pa ->
 state_correct_wrt_sign_with_offset (union_mpl_0 a p s) sigma pa.

Lemma union_mpl_correct_wrt_sign_invar_1 :
 forall (s0 s1 : state) (pa : pre_ad) (sigma : signature),
 state_correct_wrt_sign_with_offset s0 sigma pa ->
 state_correct_wrt_sign_with_offset s1 sigma pa ->
 state_correct_wrt_sign_with_offset (union_mpl s0 s1) sigma pa.

Lemma union_mpl_correct_wrt_sign_invar :
 forall (s0 s1 : state) (sigma : signature),
 state_correct_wrt_sign s0 sigma ->
 state_correct_wrt_sign s1 sigma ->
 state_correct_wrt_sign (union_mpl s0 s1) sigma.

Lemma union_0_correct_wrt_sign_invar :
 forall (d : preDTA) (a0 a1 : ad) (s : state) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 union_0 d a0 a1 = Some s -> state_correct_wrt_sign s sigma.

Lemma insert_ostate_correct_wrt_sign_invar :
 forall (d : preDTA) (a : ad) (s : state) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 state_correct_wrt_sign s sigma ->
 predta_correct_wrt_sign (insert_ostate d a (Some s)) sigma.

Lemma union_correct_wrt_sign_invar :
 forall (d0 d1 : DTA) (sigma : signature),
 dta_correct_wrt_sign d0 sigma ->
 dta_correct_wrt_sign d1 sigma -> dta_correct_wrt_sign (union d0 d1) sigma.

Lemma upl_conv_0_ref_ok_invar :
 forall (p : prec_list) (a : ad),
 prec_occur (upl_conv_0 p) a ->
 exists b : ad, a = uad_conv_0 b /\ prec_occur p b.

Lemma upl_conv_1_ref_ok_invar :
 forall (p : prec_list) (a : ad),
 prec_occur (upl_conv_1 p) a ->
 exists b : ad, a = uad_conv_1 b /\ prec_occur p b.

Lemma udta_conv_0_ref_ok_invar_0 :
 forall (d : preDTA) (a : ad) (s : state) (c : ad) (p : prec_list) (b : ad),
 MapGet state (udta_conv_0 d) (uad_conv_0 a) = Some s ->
 MapGet prec_list s c = Some p ->
 prec_occur p b ->
 exists s' : state,
   (exists p' : prec_list,
      (exists b' : ad,
         MapGet state d a = Some s' /\
         MapGet prec_list s' c = Some p' /\
         p = upl_conv_0 p' /\
         s = umpl_conv_0 s' /\ b = uad_conv_0 b' /\ prec_occur p' b')).

Lemma udta_conv_1_ref_ok_invar_0 :
 forall (d : preDTA) (a : ad) (s : state) (c : ad) (p : prec_list) (b : ad),
 MapGet state (udta_conv_1 d) (uad_conv_1 a) = Some s ->
 MapGet prec_list s c = Some p ->
 prec_occur p b ->
 exists s' : state,
   (exists p' : prec_list,
      (exists b' : ad,
         MapGet state d a = Some s' /\
         MapGet prec_list s' c = Some p' /\
         p = upl_conv_1 p' /\
         s = umpl_conv_1 s' /\ b = uad_conv_1 b' /\ prec_occur p' b')).

Lemma udta_conv_0_ref_ok_invar :
 forall d : preDTA, preDTA_ref_ok d -> preDTA_ref_ok (udta_conv_0 d).

Lemma udta_conv_1_ref_ok_invar :
 forall d : preDTA, preDTA_ref_ok d -> preDTA_ref_ok (udta_conv_1 d).

Lemma MapMerge_ref_ok_invar :
 forall d0 d1 : preDTA,
 preDTA_ref_ok d0 -> preDTA_ref_ok d1 -> preDTA_ref_ok (MapMerge state d0 d1).

Lemma u_merge_ref_ok_invar :
 forall d0 d1 : preDTA,
 preDTA_ref_ok d0 -> preDTA_ref_ok d1 -> preDTA_ref_ok (u_merge d0 d1).

Lemma union_pl_ref_ok_invar :
 forall (p p' : prec_list) (d : preDTA),
 prec_list_ref_ok p d ->
 prec_list_ref_ok p' d -> prec_list_ref_ok (union_pl p p') d.

Lemma union_mpl_0_ref_ok_invar :
 forall (s : state) (a : ad) (p : prec_list) (d : preDTA),
 state_ref_ok (M1 prec_list a p) d ->
 state_ref_ok s d -> state_ref_ok (union_mpl_0 a p s) d.

Lemma union_mpl_correct_ref_ok_invar :
 forall (s0 s1 : state) (d : preDTA),
 state_ref_ok s0 d -> state_ref_ok s1 d -> state_ref_ok (union_mpl s0 s1) d.

Lemma union_ref_ok :
 forall d0 d1 : DTA,
 DTA_ref_ok d0 -> DTA_ref_ok d1 -> DTA_ref_ok (union d0 d1).

Lemma union_DTA_main_state_correct_invar :
 forall d0 d1 : DTA,
 DTA_main_state_correct d0 ->
 DTA_main_state_correct d1 -> DTA_main_state_correct (union d0 d1). *)
Require Import inter_correct.
(* inter_correct:
Require Import Bool.
Require Import NArith Ndec Ndigits.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import signature.
Require Import refcorrect.
Require Import inter.

Lemma pl_produit_correct_wrt_sign_invar :
 forall (p0 p1 : prec_list) (n : nat),
 pl_tl_length p0 n -> pl_tl_length p1 n -> pl_tl_length (pl_produit p0 p1) n.

Lemma st_produit_l_correct_wrt_sign_invar_with_offset :
 forall (s0 : state) (a : ad) (p : prec_list) (sigma : signature)
   (pa : pre_ad),
 state_correct_wrt_sign_with_offset s0 sigma pa ->
 state_correct_wrt_sign_with_offset (M1 prec_list a p) sigma pa ->
 state_correct_wrt_sign_with_offset (s_produit_l a p s0) sigma pa.

Lemma st_produit_r_correct_wrt_sign_invar_with_offset :
 forall (s0 : state) (a : ad) (p : prec_list) (sigma : signature)
   (pa : pre_ad),
 state_correct_wrt_sign_with_offset s0 sigma pa ->
 state_correct_wrt_sign_with_offset (M1 prec_list a p) sigma pa ->
 state_correct_wrt_sign_with_offset (s_produit_r a p s0) sigma pa.

Lemma st_produit_correct_wrt_sign_invar_with_offset :
 forall (s0 s1 : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset s0 sigma pa ->
 state_correct_wrt_sign_with_offset s1 sigma pa ->
 state_correct_wrt_sign_with_offset (s_produit s0 s1) sigma pa.

Lemma st_produit_correct_wrt_sign_invar :
 forall (s0 s1 : state) (sigma : signature),
 state_correct_wrt_sign s0 sigma ->
 state_correct_wrt_sign s1 sigma ->
 state_correct_wrt_sign (s_produit s0 s1) sigma.

Lemma positive_sum :
 forall p : positive,
 p = 1%positive \/
 (exists q : positive, p = xO q) \/ (exists q : positive, p = xI q).

Lemma preDTA_produit_l_correct_wrt_sign_invar :
 forall (d : preDTA) (a : ad) (s : state) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (M1 state a s) sigma ->
 predta_correct_wrt_sign (preDTA_produit_l a s d) sigma.

Lemma preDTA_produit_r_correct_wrt_sign_invar :
 forall (d : preDTA) (a : ad) (s : state) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (M1 state a s) sigma ->
 predta_correct_wrt_sign (preDTA_produit_r a s d) sigma.

Lemma preDTA_produit_correct_wrt_sign_invar :
 forall (d0 d1 : preDTA) (sigma : signature),
 predta_correct_wrt_sign d0 sigma ->
 predta_correct_wrt_sign d1 sigma ->
 predta_correct_wrt_sign (preDTA_produit d0 d1) sigma.

Lemma inter_correct_wrt_sign_invar :
 forall (d0 d1 : DTA) (sigma : signature),
 dta_correct_wrt_sign d0 sigma ->
 dta_correct_wrt_sign d1 sigma -> dta_correct_wrt_sign (inter d0 d1) sigma.

Definition pl_produit_ref_ok_0 (la pl : prec_list) : Prop :=
  forall (a b : ad) (l : prec_list) (n : nat),
  prec_occur (pl_produit_0 a la pl n l) b ->
  (exists a0 : ad,
     (exists a1 : ad,
        b = iad_conv a0 a1 /\ prec_occur la a0 /\ prec_occur pl a1)) \/
  (exists a1 : ad, b = iad_conv a a1 /\ prec_occur pl a1) \/ prec_occur l b.

Definition pl_produit_ref_ok_1 (p0 p1 : prec_list) : Prop :=
  forall (b : ad) (n : nat),
  prec_occur (pl_produit_1 p0 n p1) b ->
  exists a0 : ad,
    (exists a1 : ad,
       b = iad_conv a0 a1 /\ prec_occur p0 a0 /\ prec_occur p1 a1).

Lemma pl_produit_ref_ok_lem_0 :
 forall p : prec_list, pl_produit_ref_ok_0 p prec_empty.

Lemma pl_produit_ref_ok_lem_1 :
 forall p : prec_list, pl_produit_ref_ok_1 p prec_empty.

Lemma pl_produit_ref_ok_lem_2 :
 forall p : prec_list, pl_produit_ref_ok_1 prec_empty p.

Lemma pl_produit_ref_ok_lem_3 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_ref_ok_0 p ls ->
 pl_produit_ref_ok_1 p la -> pl_produit_ref_ok_0 p (prec_cons a la ls).

Lemma pl_produit_ref_ok_lem_4 :
 forall (a : ad) (la ls p : prec_list),
 pl_produit_ref_ok_0 la p ->
 pl_produit_ref_ok_1 ls p -> pl_produit_ref_ok_1 (prec_cons a la ls) p.

Lemma pl_produit_ref_ok_lem_5 :
 forall p p' : prec_list,
 pl_produit_ref_ok_0 p p' /\ pl_produit_ref_ok_1 p p'.

Lemma pl_produit_ref_ok_lem_6 :
 forall (p0 p1 : prec_list) (b : ad),
 prec_occur (pl_produit p0 p1) b ->
 exists a0 : ad,
   (exists a1 : ad,
      b = iad_conv a0 a1 /\ prec_occur p0 a0 /\ prec_occur p1 a1).

Lemma pl_produit_ref_ok :
 forall (p0 p1 : prec_list) (d0 d1 : preDTA),
 prec_list_ref_ok p0 d0 ->
 prec_list_ref_ok p1 d1 ->
 prec_list_ref_ok (pl_produit p0 p1) (preDTA_produit d0 d1).

Lemma s_produit_l_ref_ok :
 forall (s : state) (a : ad) (p : prec_list) (d0 d1 : preDTA),
 state_ref_ok s d1 ->
 state_ref_ok (M1 prec_list a p) d0 ->
 state_ref_ok (s_produit_l a p s) (preDTA_produit d0 d1).

Lemma s_produit_r_ref_ok :
 forall (s : state) (a : ad) (p : prec_list) (d0 d1 : preDTA),
 state_ref_ok s d1 ->
 state_ref_ok (M1 prec_list a p) d0 ->
 state_ref_ok (s_produit_r a p s) (preDTA_produit d1 d0).

Lemma st_M0_ref_ok : forall d : preDTA, state_ref_ok (M0 prec_list) d.

Lemma s_produit_ref_ok :
 forall (s0 s1 : state) (d0 d1 : preDTA),
 state_ref_ok s0 d0 ->
 state_ref_ok s1 d1 -> state_ref_ok (s_produit s0 s1) (preDTA_produit d0 d1).

Lemma preDTA_produit_l_ref_ok :
 forall (d d0 d1 : preDTA) (s : state) (a : ad),
 preDTA_ref_ok_distinct d d1 ->
 preDTA_ref_ok_distinct (M1 state a s) d0 ->
 preDTA_ref_ok_distinct (preDTA_produit_l a s d) (preDTA_produit d0 d1).

Lemma preDTA_produit_r_ref_ok :
 forall (d d0 d1 : preDTA) (s : state) (a : ad),
 preDTA_ref_ok_distinct d d0 ->
 preDTA_ref_ok_distinct (M1 state a s) d1 ->
 preDTA_ref_ok_distinct (preDTA_produit_r a s d) (preDTA_produit d0 d1).

Lemma preDTA_produit_ref_okd :
 forall d0 d1 d0' d1' : preDTA,
 preDTA_ref_ok_distinct d0 d0' ->
 preDTA_ref_ok_distinct d1 d1' ->
 preDTA_ref_ok_distinct (preDTA_produit d0 d1) (preDTA_produit d0' d1').

Lemma preDTA_produit_ref_ok :
 forall d0 d1 : preDTA,
 preDTA_ref_ok d0 -> preDTA_ref_ok d1 -> preDTA_ref_ok (preDTA_produit d0 d1).

Lemma DTA_inter_ref_ok_invar :
 forall d0 d1 : DTA,
 DTA_ref_ok d0 -> DTA_ref_ok d1 -> DTA_ref_ok (inter d0 d1).

Lemma inter_DTA_main_state_correct_invar :
 forall d0 d1 : DTA,
 DTA_main_state_correct d0 ->
 DTA_main_state_correct d1 -> DTA_main_state_correct (inter d0 d1). *)
Require Import states_kill_correct.
(* states_kill_correct:
Require Import Bool.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import signature.
Require Import pl_path.
Require Import refcorrect.
Require Import states_kill_empty.
Require Import lattice_fixpoint.
Require Import empty_test.

Lemma prec_list_kill_correct_wrt_sign_invar :
 forall (m : Map bool) (p p' : prec_list) (n : nat),
 pl_tl_length p n ->
 prec_list_kill m p = Some p' -> pl_tl_length p' n.

Lemma states_kill_aux_correct_wrt_sign_invar :
 forall (s : state) (m : Map bool) (sigma : signature),
 state_correct_wrt_sign s sigma ->
 state_correct_wrt_sign (states_kill_aux m s) sigma.

Lemma states_kill_correct_wrt_sign_invar :
 forall (s s' : state) (m : Map bool) (sigma : signature),
 state_correct_wrt_sign s sigma ->
 states_kill m s = Some s' -> state_correct_wrt_sign s' sigma.

Lemma preDTA_kill_correct_wrt_sign_invar :
 forall (d : preDTA) (m : Map bool) (sigma : signature),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (preDTA_kill m d) sigma.

Lemma DTA_kill_correct_wrt_sign_invar :
 forall (d : DTA) (m : Map bool) (sigma : signature),
 dta_correct_wrt_sign d sigma -> dta_correct_wrt_sign (DTA_kill m d) sigma.

Lemma DTA_kill_empty_states_lazy_correct_wrt_sign_invar :
 forall (d : DTA) (sigma : signature),
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (DTA_kill_empty_states_lazy d) sigma.

Lemma kill_empty_correct_wrt_sign_invar :
 forall (d : DTA) (sigma : signature),
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (DTA_kill_empty_states d) sigma.

Lemma kill_empty_lazy_correct_wrt_sign_invar :
 forall (d : DTA) (sigma : signature),
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (DTA_kill_empty_states_lazy d) sigma.

Lemma prec_list_kill_occur :
 forall (p p' : prec_list) (b : ad) (m : Map bool),
 prec_list_kill m p = Some p' ->
 prec_occur p' b -> MapGet bool m b = Some true.

Lemma prec_list_kill_ref_ok_invar :
 forall (d : preDTA) (p p' : prec_list) (sigma : signature),
 prec_list_ref_ok p d ->
 predta_correct_wrt_sign d sigma ->
 prec_list_kill (dta_non_empty_states d) p = Some p' ->
 prec_list_ref_ok p' (preDTA_kill (dta_non_empty_states d) d).

Lemma states_kill_aux_ref_ok_invar :
 forall (d : preDTA) (s : state) (sigma : signature),
 state_ref_ok s d ->
 predta_correct_wrt_sign d sigma ->
 state_ref_ok (states_kill_aux (dta_non_empty_states d) s)
   (preDTA_kill (dta_non_empty_states d) d).

Lemma states_kill_ref_ok_invar :
 forall (d : preDTA) (s s' : state) (sigma : signature),
 state_ref_ok s d ->
 predta_correct_wrt_sign d sigma ->
 states_kill (dta_non_empty_states d) s = Some s' ->
 state_ref_ok s' (preDTA_kill (dta_non_empty_states d) d).

Lemma preDTA_kill_ref_ok_distinct_invar :
 forall (d : preDTA) (sigma : signature),
 preDTA_ref_ok_distinct d d ->
 predta_correct_wrt_sign d sigma ->
 preDTA_ref_ok_distinct (preDTA_kill (dta_non_empty_states d) d)
   (preDTA_kill (dta_non_empty_states d) d).

Lemma preDTA_kill_ref_ok_invar :
 forall (d : preDTA) (sigma : signature),
 preDTA_ref_ok d ->
 predta_correct_wrt_sign d sigma ->
 preDTA_ref_ok (preDTA_kill (dta_non_empty_states d) d).

Lemma DTA_kill_ref_ok_invar :
 forall (d : DTA) (sigma : signature),
 DTA_ref_ok d ->
 dta_correct_wrt_sign d sigma ->
 DTA_ref_ok (DTA_kill (dta_states_non_empty d) d).

Lemma DTA_kill_ref_ok_invar_lazy :
 forall (d : DTA) (sigma : signature),
 DTA_ref_ok d ->
 dta_correct_wrt_sign d sigma -> DTA_ref_ok (DTA_kill_empty_states_lazy d).

Lemma inter_DTA_main_state_correct_invar :
 forall d : DTA,
 DTA_main_state_correct d ->
 DTA_main_state_correct (DTA_kill (dta_states_non_empty d) d).

Lemma inter_DTA_main_state_correct_invar_lazy :
 forall d : DTA,
 DTA_main_state_correct d ->
 DTA_main_state_correct (DTA_kill_empty_states_lazy d). *)
Require Import coacc_test.
(* coacc_test:
Require Import Bool.
Require Import Arith.
Require Import NArith Ndec.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import refcorrect.
Require Import lattice_fixpoint.

Inductive coacc : preDTA -> ad -> ad -> Prop :=
  | coacc_id :
      forall (d : preDTA) (a : ad) (s : state),
      MapGet state d a = Some s -> coacc d a a
  | coacc_nxt :
      forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
        (pl : prec_list) (c : ad),
      MapGet state d a2 = Some s2 ->
      MapGet state d a1 = Some s1 ->
      MapGet prec_list s1 c = Some pl ->
      prec_occur pl a2 -> coacc d a0 a1 -> coacc d a0 a2.

Definition coacc_transitive_def (d : preDTA) (a0 a1 : ad) : Prop :=
  forall a2 : ad, coacc d a0 a1 -> coacc d a2 a0 -> coacc d a2 a1.

Lemma coacc_transitive_0 :
 forall (d : preDTA) (a : ad) (s : state),
 MapGet state d a = Some s -> coacc_transitive_def d a a.

Lemma coacc_transitive_1 :
 forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
   (pl : prec_list) (c : ad),
 MapGet state d a2 = Some s2 ->
 MapGet state d a1 = Some s1 ->
 MapGet prec_list s1 c = Some pl ->
 prec_occur pl a2 ->
 coacc d a0 a1 ->
 coacc_transitive_def d a0 a1 -> coacc_transitive_def d a0 a2.

Lemma coacc_transitive :
 forall (d : preDTA) (a0 a1 a2 : ad),
 coacc d a0 a1 -> coacc d a1 a2 -> coacc d a0 a2.

Fixpoint map_replace (A : Set) (m : Map A) {struct m} : 
 ad -> A -> Map A :=
  fun (a : ad) (x : A) =>
  match m with
  | M0 => M0 A
  | M1 b y => if Neqb a b then M1 A b x else M1 A b y
  | M2 m n =>
      match a with
      | N0 => M2 A (map_replace A m N0 x) n
      | Npos q =>
          match q with
          | xH => M2 A m (map_replace A n N0 x)
          | xO p => M2 A (map_replace A m (Npos p) x) n
          | xI p => M2 A m (map_replace A n (Npos p) x)
          end
      end
  end.

Fixpoint map_or (m0 m1 : Map bool) {struct m1} : Map bool :=
  match m0, m1 with
  | M0, _ => M0 bool
  | _, M0 => M0 bool
  | M1 a0 b0, M1 a1 b1 =>
      if Neqb a0 a1 then M1 bool a0 (b0 || b1) else M0 bool
  | M1 _ _, M2 _ _ => M0 bool
  | M2 _ _, M1 _ _ => M0 bool
  | M2 x0 y0, M2 x1 y1 => M2 bool (map_or x0 x1) (map_or y0 y1)
  end.

Fixpoint pl_coacc (d : preDTA) (pl : prec_list) {struct pl} : 
 Map bool :=
  match pl with
  | prec_empty => map_mini state d
  | prec_cons a la ls =>
      map_replace bool (map_or (pl_coacc d la) (pl_coacc d ls)) a true
  end.

Fixpoint st_coacc (d : preDTA) (s : state) {struct s} : 
 Map bool :=
  match s with
  | M0 => map_mini state d
  | M1 a pl => pl_coacc d pl
  | M2 x y => map_or (st_coacc d x) (st_coacc d y)
  end.

Fixpoint predta_coacc_0 (d d' : preDTA) {struct d'} : 
 Map bool -> Map bool :=
  fun m : Map bool =>
  match d', m with
  | M0, M0 => map_mini state d
  | M1 a s, M1 a' b =>
      if Neqb a a' && b then st_coacc d s else map_mini state d
  | M2 x y, M2 z t => map_or (predta_coacc_0 d x z) (predta_coacc_0 d y t)
  | _, _ => map_mini state d
  end.

Definition predta_coacc (d : preDTA) (a : ad) (m : Map bool) : 
  Map bool := map_replace bool (predta_coacc_0 d d m) a true.

Definition predta_coacc_states (d : preDTA) (a : ad) : 
  Map bool :=
  power (Map bool) (predta_coacc d a) (map_mini state d)
    (S (MapCard state d)).

Definition predta_coacc_states_0 (d : preDTA) (a : ad) : 
  Map bool :=
  lazy_power bool eqm_bool (predta_coacc d a) (map_mini state d)
    (S (MapCard state d)).

Lemma map_or_mapget_true_l :
 forall (m0 m1 : Map bool) (a : ad),
 domain_equal bool bool m0 m1 ->
 MapGet bool m0 a = Some true ->
 MapGet bool (map_or m0 m1) a = Some true.

Lemma map_or_mapget_true_ld :
 forall (d : preDTA) (m0 m1 : Map bool) (a : ad),
 ensemble_base state d m0 ->
 ensemble_base state d m1 ->
 MapGet bool m0 a = Some true ->
 MapGet bool (map_or m0 m1) a = Some true.

Lemma map_or_mapget_true_r :
 forall (m0 m1 : Map bool) (a : ad),
 domain_equal bool bool m0 m1 ->
 MapGet bool m0 a = Some true ->
 MapGet bool (map_or m1 m0) a = Some true.

Lemma map_or_mapget_true_rd :
 forall (d : preDTA) (m0 m1 : Map bool) (a : ad),
 ensemble_base state d m0 ->
 ensemble_base state d m1 ->
 MapGet bool m1 a = Some true ->
 MapGet bool (map_or m0 m1) a = Some true.

Lemma map_or_mapget_true_inv :
 forall (m0 m1 : Map bool) (a : ad),
 MapGet bool (map_or m0 m1) a = Some true ->
 MapGet bool m0 a = Some true \/ MapGet bool m1 a = Some true.

Lemma map_replace_mapget_ins_true_0 :
 forall (m : Map bool) (a : ad) (b : bool),
 MapGet bool m a = Some b ->
 MapGet bool (map_replace bool m a true) a = Some true.

Lemma map_replace_mapget_ins_true_1 :
 forall (m : Map bool) (a a' : ad),
 MapGet bool m a = Some true ->
 MapGet bool (map_replace bool m a' true) a = Some true.

Lemma map_replace_mapget_true_inv :
 forall (m : Map bool) (a b : ad),
 MapGet bool (map_replace bool m a true) b = Some true ->
 b = a \/ MapGet bool m b = Some true.

Lemma map_or_def_ok :
 forall m0 m1 : Map bool,
 domain_equal bool bool m0 m1 -> domain_equal bool bool m0 (map_or m0 m1).

Lemma map_or_def_ok_d :
 forall (d : preDTA) (m0 m1 : Map bool),
 ensemble_base state d m0 ->
 ensemble_base state d m1 -> ensemble_base state d (map_or m0 m1).

Lemma map_replace_def_ok :
 forall (A : Set) (m : Map A) (a : ad) (x : A),
 domain_equal A A m (map_replace A m a x).

Lemma map_replace_def_ok_d :
 forall (d : preDTA) (m : Map bool) (a : ad) (x : bool),
 ensemble_base state d m -> ensemble_base state d (map_replace bool m a x).

Lemma pl_coacc_def_ok :
 forall (d : preDTA) (pl : prec_list), ensemble_base state d (pl_coacc d pl).

Lemma st_coacc_def_ok :
 forall (d : preDTA) (s : state), ensemble_base state d (st_coacc d s).

Lemma predta_coacc_0_def_ok :
 forall (d d' : preDTA) (m : Map bool),
 ensemble_base state d (predta_coacc_0 d d' m).

Lemma predta_coacc_def_ok :
 forall (d : preDTA) (a : ad) (m : Map bool),
 ensemble_base state d (predta_coacc d a m).

Definition lemd (d : preDTA) : mRelation bool :=
  fun m0 m1 : Map bool =>
  ensemble_base state d m0 /\ ensemble_base state d m1 /\ lem m0 m1.

Lemma lemd_reflexive :
 forall (d : preDTA) (m : Map bool), ensemble_base state d m -> lemd d m m.

Lemma lemd_antisymmetric :
 forall (d : preDTA) (m0 m1 : Map bool),
 lemd d m0 m1 -> lemd d m1 m0 -> m0 = m1.

Lemma lemd_transitive :
 forall (d : preDTA) (m0 m1 m2 : Map bool),
 lemd d m0 m1 -> lemd d m1 m2 -> lemd d m0 m2.

Lemma map_or_inc_ld :
 forall (d : preDTA) (m m0 m1 : Map bool),
 ensemble_base state d m ->
 lemd d m0 m1 -> lemd d (map_or m0 m) (map_or m1 m).

Lemma map_or_inc_rd :
 forall (d : preDTA) (m m0 m1 : Map bool),
 ensemble_base state d m ->
 lemd d m0 m1 -> lemd d (map_or m m0) (map_or m m1).

Lemma map_or_inc_d :
 forall (d : preDTA) (m0 m1 m2 m3 : Map bool),
 lemd d m0 m1 -> lemd d m2 m3 -> lemd d (map_or m0 m2) (map_or m1 m3).

Lemma predta_coacc_0_incr :
 forall (d d' : preDTA) (m0 m1 : Map bool),
 lemd d' m0 m1 -> lemd d (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m1).

Lemma map_replace_inc :
 forall (m0 m1 : Map bool) (a : ad) (b : bool),
 lem m0 m1 -> lem (map_replace bool m0 a b) (map_replace bool m1 a b).

Lemma map_replace_inc_d :
 forall (d : preDTA) (m0 m1 : Map bool) (a : ad) (b : bool),
 lemd d m0 m1 -> lemd d (map_replace bool m0 a b) (map_replace bool m1 a b).

Lemma predta_coacc_increasing :
 forall (d : preDTA) (a : ad),
 increasing_app bool (lemd d) (predta_coacc d a).

Definition lattice_lemd_bounded_0_def (p : prechain bool) : Prop :=
  forall d : preDTA,
  chain bool (ensemble_base state d) (lemd d) p ->
  chain bool (ensemble_base state d) lem p.

Lemma lattice_lemd_bounded_0 :
 forall m : Map bool, lattice_lemd_bounded_0_def (single bool m).

Definition lattice_lemd_bounded_1_def (p : prechain bool) : Prop :=
  lattice_lemd_bounded_0_def p ->
  forall m : Map bool, lattice_lemd_bounded_0_def (concat bool p m).

Lemma lattice_lemd_bounded_1 :
 forall m : Map bool, lattice_lemd_bounded_1_def (single bool m).

Lemma lattice_lemd_bounded_2 :
 forall p : prechain bool,
 lattice_lemd_bounded_1_def p ->
 forall m : Map bool, lattice_lemd_bounded_1_def (concat bool p m).

Lemma lattice_lemd_bounded_3 :
 forall (p : prechain bool) (d : preDTA),
 chain bool (ensemble_base state d) (lemd d) p ->
 chain bool (ensemble_base state d) lem p.

Lemma lattice_lemd_bounded :
 forall (p : prechain bool) (d : preDTA),
 sas_chain bool (ensemble_base state d) (lemd d) p ->
 sas_chain bool (ensemble_base state d) lem p.

Lemma lattice_bounded :
 forall d : preDTA,
 bounded_sas_chain bool (ensemble_base state d) (lemd d)
   (S (MapCard state d)).

Lemma pl_coacc_contain_coacc_ads :
 forall (d : preDTA) (p : prec_list) (a : ad),
 prec_occur p a ->
 prec_list_ref_ok p d -> MapGet bool (pl_coacc d p) a = Some true.

Lemma st_coacc_contain_coacc_ads :
 forall (d : preDTA) (s : state) (c : ad) (p : prec_list) (a : ad),
 state_ref_ok s d ->
 MapGet prec_list s c = Some p ->
 prec_occur p a -> MapGet bool (st_coacc d s) a = Some true.

Lemma predta_coacc_0_contain_coacc_ads :
 forall (d d' : preDTA) (a : ad) (s : state) (c : ad) 
   (p : prec_list) (b : ad) (m : Map bool),
 preDTA_ref_ok_distinct d' d ->
 MapGet state d' a = Some s ->
 MapGet prec_list s c = Some p ->
 prec_occur p b ->
 ensemble_base state d' m ->
 MapGet bool m a = Some true ->
 MapGet bool (predta_coacc_0 d d' m) b = Some true.

Lemma predta_coacc_contain_coacc_ads_0 :
 forall (d : preDTA) (a0 a : ad) (s : state) (c : ad) 
   (p : prec_list) (b : ad) (m : Map bool),
 preDTA_ref_ok d ->
 MapGet state d a = Some s ->
 MapGet prec_list s c = Some p ->
 prec_occur p b ->
 ensemble_base state d m ->
 MapGet bool m a = Some true ->
 MapGet bool (predta_coacc d a0 m) b = Some true.

Definition predta_coacc_contain_coacc_ads_def_0 (d : preDTA) 
  (a0 a1 : ad) : Prop :=
  coacc d a0 a1 ->
  preDTA_ref_ok d ->
  exists n : nat,
    MapGet bool (power (Map bool) (predta_coacc d a0) (map_mini state d) n)
      a1 = Some true.

Lemma predta_coacc_contain_coacc_ads_1 :
 forall (d : preDTA) (a : ad) (s : state),
 MapGet state d a = Some s ->
 predta_coacc_contain_coacc_ads_def_0 d a a.

Lemma predta_coacc_contain_coacc_ads_2 :
 forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
   (pl : prec_list) (c : ad),
 MapGet state d a2 = Some s2 ->
 MapGet state d a1 = Some s1 ->
 MapGet prec_list s1 c = Some pl ->
 prec_occur pl a2 ->
 coacc d a0 a1 ->
 predta_coacc_contain_coacc_ads_def_0 d a0 a1 ->
 predta_coacc_contain_coacc_ads_def_0 d a0 a2.

Lemma predta_coacc_contain_coacc_ads_3 :
 forall (d : preDTA) (a0 a1 : ad),
 coacc d a0 a1 ->
 preDTA_ref_ok d ->
 exists n : nat,
   MapGet bool (power (Map bool) (predta_coacc d a0) (map_mini state d) n) a1 =
   Some true.

Lemma pl_coacc_rev :
 forall (d : preDTA) (pl : prec_list) (a : ad),
 MapGet bool (pl_coacc d pl) a = Some true -> prec_occur pl a.

Lemma st_coacc_rev :
 forall (d : preDTA) (s : state) (a : ad),
 MapGet bool (st_coacc d s) a = Some true ->
 exists c : ad,
   (exists p : prec_list,
      MapGet prec_list s c = Some p /\ prec_occur p a).

Lemma predta_coacc_0_rev :
 forall (d d' : preDTA) (b : ad) (m : Map bool),
 MapGet bool (predta_coacc_0 d d' m) b = Some true ->
 ensemble_base state d' m ->
 exists a : ad,
   (exists s : state,
      (exists c : ad,
         (exists p : prec_list,
            MapGet state d' a = Some s /\
            MapGet prec_list s c = Some p /\
            prec_occur p b /\ MapGet bool m a = Some true))).

Lemma predta_coacc_rev :
 forall (d : preDTA) (a : ad) (m : Map bool) (b : ad),
 MapGet bool (predta_coacc d a m) b = Some true ->
 ensemble_base state d m ->
 (exists a0 : ad,
    (exists s : state,
       (exists c : ad,
          (exists p : prec_list,
             MapGet state d a0 = Some s /\
             MapGet prec_list s c = Some p /\
             prec_occur p b /\ MapGet bool m a0 = Some true)))) \/ 
 a = b.

Lemma predta_coacc_reverse :
 forall (n : nat) (d : preDTA) (a b : ad),
 MapGet bool (power (Map bool) (predta_coacc d a) (map_mini state d) n) b =
 Some true -> coacc d a b.

Lemma predta_coacc_fix_0 :
 forall (d : preDTA) (a : ad),
 lower_fix_point bool (ensemble_base state d) (lemd d) 
   (predta_coacc d a) (predta_coacc_states d a).

Lemma predta_coacc_fix_1 :
 forall (d : preDTA) (a a0 : ad) (n : nat),
 MapGet bool (power (Map bool) (predta_coacc d a) (map_mini state d) n) a0 =
 Some true -> MapGet bool (predta_coacc_states d a) a0 = Some true.

Lemma predta_coacc_fix_2 :
 forall (d : preDTA) (a a0 : ad),
 MapGet bool (predta_coacc_states d a) a0 = Some true ->
 exists n : nat,
   MapGet bool (power (Map bool) (predta_coacc d a) (map_mini state d) n) a0 =
   Some true.

Lemma predta_coacc_fix :
 forall (d : preDTA) (a a0 : ad),
 preDTA_ref_ok d ->
 (MapGet bool (predta_coacc_states d a) a0 = Some true <-> coacc d a a0).

Lemma predta_coacc_0_fix :
 forall (d : preDTA) (a a0 : ad),
 preDTA_ref_ok d ->
 (MapGet bool (predta_coacc_states_0 d a) a0 = Some true <->
  coacc d a a0). *)
Require Import non_coacc_kill.
(* non_coacc_kill:
Require Import Bool.
Require Import Arith.
Require Import NArith Ndec.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import refcorrect.
Require Import lattice_fixpoint.
Require Import coacc_test.

Fixpoint non_coacc_kill (d : preDTA) (m : Map bool) {struct m} : preDTA :=
  match d, m with
  | M0, M0 => M0 state
  | M1 a s, M1 a' b => if Neqb a a' && b then M1 state a s else M0 state
  | M2 x y, M2 z t => M2 state (non_coacc_kill x z) (non_coacc_kill y t)
  | _, _ => M0 state
  end.

Definition predta_kill_non_coacc (d : preDTA) (a : ad) : preDTA :=
  non_coacc_kill d (predta_coacc_states d a).

Definition dta_kill_non_coacc (d : DTA) : DTA :=
  match d with
  | dta p a => dta (predta_kill_non_coacc p a) a
  end.

Definition predta_kill_non_coacc_lazy (d : preDTA) 
  (a : ad) : preDTA := non_coacc_kill d (predta_coacc_states_0 d a).

Definition dta_kill_non_coacc_lazy (d : DTA) : DTA :=
  match d with
  | dta p a => dta (predta_kill_non_coacc_lazy p a) a
  end.

Lemma kill_non_coacc_lazy_eq_kill_non_coacc :
 forall d : DTA, dta_kill_non_coacc_lazy d = dta_kill_non_coacc d.

Lemma non_coacc_kill_0 :
 forall (d : preDTA) (a : ad) (s : state) (m : Map bool),
 ensemble_base state d m ->
 MapGet state d a = Some s ->
 MapGet bool m a = Some true ->
 MapGet state (non_coacc_kill d m) a = Some s.

Lemma non_coacc_kill_1 :
 forall (d : preDTA) (a : ad) (s : state) (m : Map bool),
 ensemble_base state d m ->
 MapGet state (non_coacc_kill d m) a = Some s ->
 MapGet state d a = Some s /\ MapGet bool m a = Some true.

Lemma predta_kill_non_coacc_0 :
 forall (d : preDTA) (a a0 : ad) (s : state),
 preDTA_ref_ok d ->
 (MapGet state d a0 = Some s /\ coacc d a a0 <->
  MapGet state (predta_kill_non_coacc d a) a0 = Some s).

Definition predta_kill_non_coacc_def_0 (d : preDTA) 
  (a0 a1 : ad) : Prop :=
  preDTA_ref_ok d ->
  coacc d a0 a1 -> coacc (predta_kill_non_coacc d a0) a0 a1.

Lemma predta_kill_non_coacc_1 :
 forall (d : preDTA) (a : ad) (s : state),
 MapGet state d a = Some s -> predta_kill_non_coacc_def_0 d a a.

Lemma predta_kill_non_coacc_2 :
 forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
   (pl : prec_list) (c : ad),
 MapGet state d a2 = Some s2 ->
 MapGet state d a1 = Some s1 ->
 MapGet prec_list s1 c = Some pl ->
 prec_occur pl a2 ->
 coacc d a0 a1 ->
 predta_kill_non_coacc_def_0 d a0 a1 -> predta_kill_non_coacc_def_0 d a0 a2.

Lemma predta_kill_non_coacc_3 :
 forall (d : preDTA) (a0 a1 : ad),
 preDTA_ref_ok d -> coacc d a0 a1 -> coacc (predta_kill_non_coacc d a0) a0 a1.

Definition predta_kill_non_coacc_rec_def_0 (p : preDTA) 
  (a : ad) (t : term) (pr : reconnaissance p a t) :=
  forall (p0 : preDTA) (m : Map bool),
  p = non_coacc_kill p0 m ->
  ensemble_base state p0 m -> reconnaissance p0 a t.

Definition predta_kill_non_coacc_rec_def_1 (p : preDTA) 
  (s : state) (t : term) (pr : state_reconnait p s t) :=
  forall (p0 : preDTA) (m : Map bool),
  p = non_coacc_kill p0 m ->
  ensemble_base state p0 m -> state_reconnait p0 s t.

Definition predta_kill_non_coacc_rec_def_2 (p : preDTA) 
  (pl : prec_list) (lt : term_list) (pr : liste_reconnait p pl lt) :=
  forall (p0 : preDTA) (m : Map bool),
  p = non_coacc_kill p0 m ->
  ensemble_base state p0 m -> liste_reconnait p0 pl lt.

Lemma predta_kill_non_coacc_rec_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 predta_kill_non_coacc_rec_def_1 d ladj t s ->
 predta_kill_non_coacc_rec_def_0 d a t (rec_dta d a t ladj e s).

Lemma predta_kill_non_coacc_rec_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 predta_kill_non_coacc_rec_def_2 d l tl l0 ->
 predta_kill_non_coacc_rec_def_1 d s (app c tl) (rec_st d s c tl l e l0).

Lemma predta_kill_non_coacc_rec_2 :
 forall d : preDTA,
 predta_kill_non_coacc_rec_def_2 d prec_empty tnil (rec_empty d).

Lemma predta_kill_non_coacc_rec_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 predta_kill_non_coacc_rec_def_0 d a hd r ->
 forall l : liste_reconnait d la tl,
 predta_kill_non_coacc_rec_def_2 d la tl l ->
 predta_kill_non_coacc_rec_def_2 d (prec_cons a la ls) 
   (tcons hd tl) (rec_consi d a la ls hd tl r l).

Lemma predta_kill_non_coacc_rec_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 predta_kill_non_coacc_rec_def_2 d ls (tcons hd tl) l ->
 predta_kill_non_coacc_rec_def_2 d (prec_cons a la ls) 
   (tcons hd tl) (rec_consn d a la ls hd tl l).

Lemma predta_kill_non_coacc_rev :
 forall (p : preDTA) (a : ad) (t : term) (m : Map bool),
 reconnaissance (non_coacc_kill p m) a t ->
 ensemble_base state p m -> reconnaissance p a t.

Inductive reconnaissance_co : preDTA -> ad -> ad -> term -> Prop :=
    rec_co_dta :
      forall (d : preDTA) (a b : ad) (t : term) (ladj : state),
      MapGet state d a = Some ladj ->
      state_reconnait_co d ladj b t ->
      coacc d b a -> reconnaissance_co d a b t
with state_reconnait_co : preDTA -> state -> ad -> term -> Prop :=
    rec_co_st :
      forall (d : preDTA) (s : state) (c b : ad) (tl : term_list)
        (l : prec_list),
      MapGet prec_list s c = Some l ->
      liste_reconnait_co d l b tl -> state_reconnait_co d s b (app c tl)
with liste_reconnait_co : preDTA -> prec_list -> ad -> term_list -> Prop :=
  | rec_co_empty :
      forall (d : preDTA) (b : ad), liste_reconnait_co d prec_empty b tnil
  | rec_co_consi :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (b : ad) (tl : term_list),
      reconnaissance_co d a b hd ->
      liste_reconnait_co d la b tl ->
      liste_reconnait_co d (prec_cons a la ls) b (tcons hd tl)
  | rec_co_consn :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (b : ad) (tl : term_list),
      liste_reconnait_co d ls b (tcons hd tl) ->
      liste_reconnait_co d (prec_cons a la ls) b (tcons hd tl).

Scheme mreconnaissance_co_ind := Induction for reconnaissance_co
  Sort Prop
  with mstrec_co_ind := Induction for state_reconnait_co
  Sort Prop
  with mlrec_co_ind := Induction for liste_reconnait_co 
  Sort Prop.

Definition rec_co_def_0 (d : preDTA) (a a1 : ad) (t : term)
  (pr : reconnaissance_co d a a1 t) :=
  forall a0 : ad, coacc d a0 a1 -> reconnaissance_co d a a0 t.

Definition rec_co_def_1 (d : preDTA) (s : state) (a1 : ad) 
  (t : term) (pr : state_reconnait_co d s a1 t) :=
  forall a0 : ad, coacc d a0 a1 -> state_reconnait_co d s a0 t.

Definition rec_co_def_2 (d : preDTA) (p : prec_list) 
  (a1 : ad) (tl : term_list) (pr : liste_reconnait_co d p a1 tl) :=
  forall a0 : ad, coacc d a0 a1 -> liste_reconnait_co d p a0 tl.

Lemma rec_co_0 :
 forall (d : preDTA) (a b : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj)
   (s : state_reconnait_co d ladj b t),
 rec_co_def_1 d ladj b t s ->
 forall c : coacc d b a, rec_co_def_0 d a b t (rec_co_dta d a b t ladj e s c).

Lemma rec_co_1 :
 forall (d : preDTA) (s : state) (c b : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait_co d l b tl),
 rec_co_def_2 d l b tl l0 ->
 rec_co_def_1 d s b (app c tl) (rec_co_st d s c b tl l e l0).

Lemma rec_co_2 :
 forall (d : preDTA) (b : ad),
 rec_co_def_2 d prec_empty b tnil (rec_co_empty d b).

Lemma rec_co_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (r : reconnaissance_co d a b hd),
 rec_co_def_0 d a b hd r ->
 forall l : liste_reconnait_co d la b tl,
 rec_co_def_2 d la b tl l ->
 rec_co_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consi d a la ls hd b tl r l).

Lemma rec_co_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (l : liste_reconnait_co d ls b (tcons hd tl)),
 rec_co_def_2 d ls b (tcons hd tl) l ->
 rec_co_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consn d a la ls hd b tl l).

Lemma rec_co_5 :
 forall (d : preDTA) (a a0 a1 : ad) (t : term),
 reconnaissance_co d a a1 t -> coacc d a0 a1 -> reconnaissance_co d a a0 t.

Definition rec_co_def_3 (t : term) : Prop :=
  forall (d : preDTA) (a : ad),
  preDTA_ref_ok d -> reconnaissance d a t -> reconnaissance_co d a a t.

Definition rec_co_def_4 (d : preDTA) (l : prec_list) 
  (tl : term_list) : Prop :=
  forall a : ad,
  preDTA_ref_ok d ->
  liste_reconnait d l tl ->
  (forall u : term,
   term_list_occur u tl ->
   forall (d : preDTA) (a : ad),
   preDTA_ref_ok d -> reconnaissance d a u -> reconnaissance_co d a a u) ->
  (forall b : ad, prec_occur l b -> coacc d a b) ->
  liste_reconnait_co d l a tl.

Lemma rec_co_6 : forall d : preDTA, rec_co_def_4 d prec_empty tnil.

Lemma rec_co_7 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 reconnaissance d a hd ->
 liste_reconnait d la tl ->
 rec_co_def_4 d la tl -> rec_co_def_4 d (prec_cons a la ls) (tcons hd tl).

Lemma rec_co_8 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 liste_reconnait d ls (tcons hd tl) ->
 rec_co_def_4 d ls (tcons hd tl) ->
 rec_co_def_4 d (prec_cons a la ls) (tcons hd tl).

Lemma rec_co_9 :
 forall (d : preDTA) (tl : term_list) (a : ad) (l : prec_list),
 liste_reconnait d l tl ->
 (forall u : term,
  term_list_occur u tl ->
  forall (d : preDTA) (a : ad),
  preDTA_ref_ok d -> reconnaissance d a u -> reconnaissance_co d a a u) ->
 (forall b : ad, prec_occur l b -> coacc d a b) ->
 preDTA_ref_ok d -> liste_reconnait_co d l a tl.

Lemma rec_co_10 :
 forall (a : ad) (tl : term_list),
 (forall u : term, term_list_occur u tl -> rec_co_def_3 u) ->
 rec_co_def_3 (app a tl).

Lemma rec_co :
 forall (d : preDTA) (a : ad) (t : term),
 preDTA_ref_ok d -> reconnaissance d a t -> reconnaissance_co d a a t.

Definition rec_co_rec_def_0 (d : preDTA) (a a0 : ad) 
  (t : term) (pr : reconnaissance_co d a a0 t) := reconnaissance d a t.

Definition rec_co_rec_def_1 (d : preDTA) (s : state) 
  (a0 : ad) (t : term) (pr : state_reconnait_co d s a0 t) :=
  state_reconnait d s t.

Definition rec_co_rec_def_2 (d : preDTA) (p : prec_list) 
  (a0 : ad) (tl : term_list) (pr : liste_reconnait_co d p a0 tl) :=
  liste_reconnait d p tl.

Lemma rec_co_rec_0 :
 forall (d : preDTA) (a b : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj)
   (s : state_reconnait_co d ladj b t),
 rec_co_rec_def_1 d ladj b t s ->
 forall c : coacc d b a,
 rec_co_rec_def_0 d a b t (rec_co_dta d a b t ladj e s c).

Lemma rec_co_rec_1 :
 forall (d : preDTA) (s : state) (c b : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait_co d l b tl),
 rec_co_rec_def_2 d l b tl l0 ->
 rec_co_rec_def_1 d s b (app c tl) (rec_co_st d s c b tl l e l0).

Lemma rec_co_rec_2 :
 forall (d : preDTA) (b : ad),
 rec_co_rec_def_2 d prec_empty b tnil (rec_co_empty d b).

Lemma rec_co_rec_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (r : reconnaissance_co d a b hd),
 rec_co_rec_def_0 d a b hd r ->
 forall l : liste_reconnait_co d la b tl,
 rec_co_rec_def_2 d la b tl l ->
 rec_co_rec_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consi d a la ls hd b tl r l).

Lemma rec_co_rec_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (l : liste_reconnait_co d ls b (tcons hd tl)),
 rec_co_rec_def_2 d ls b (tcons hd tl) l ->
 rec_co_rec_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consn d a la ls hd b tl l).

Lemma rec_co_rec :
 forall (d : preDTA) (a a0 : ad) (t : term),
 reconnaissance_co d a a0 t -> reconnaissance d a t.

Definition rec_nonco_kill_def_0 (d : preDTA) (a a0 : ad) 
  (t : term) (pr : reconnaissance_co d a a0 t) :=
  preDTA_ref_ok d -> reconnaissance_co (predta_kill_non_coacc d a0) a a0 t.

Definition rec_nonco_kill_def_1 (d : preDTA) (s : state) 
  (a0 : ad) (t : term) (pr : state_reconnait_co d s a0 t) :=
  preDTA_ref_ok d -> state_reconnait_co (predta_kill_non_coacc d a0) s a0 t.

Definition rec_nonco_kill_def_2 (d : preDTA) (p : prec_list) 
  (a0 : ad) (tl : term_list) (pr : liste_reconnait_co d p a0 tl) :=
  preDTA_ref_ok d -> liste_reconnait_co (predta_kill_non_coacc d a0) p a0 tl.

Lemma rec_nonco_kill_0 :
 forall (d : preDTA) (a b : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj)
   (s : state_reconnait_co d ladj b t),
 rec_nonco_kill_def_1 d ladj b t s ->
 forall c : coacc d b a,
 rec_nonco_kill_def_0 d a b t (rec_co_dta d a b t ladj e s c).

Lemma rec_nonco_kill_1 :
 forall (d : preDTA) (s : state) (c b : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait_co d l b tl),
 rec_nonco_kill_def_2 d l b tl l0 ->
 rec_nonco_kill_def_1 d s b (app c tl) (rec_co_st d s c b tl l e l0).

Lemma rec_nonco_kill_2 :
 forall (d : preDTA) (b : ad),
 rec_nonco_kill_def_2 d prec_empty b tnil (rec_co_empty d b).

Lemma rec_nonco_kill_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (r : reconnaissance_co d a b hd),
 rec_nonco_kill_def_0 d a b hd r ->
 forall l : liste_reconnait_co d la b tl,
 rec_nonco_kill_def_2 d la b tl l ->
 rec_nonco_kill_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consi d a la ls hd b tl r l).

Lemma rec_nonco_kill_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (l : liste_reconnait_co d ls b (tcons hd tl)),
 rec_nonco_kill_def_2 d ls b (tcons hd tl) l ->
 rec_nonco_kill_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consn d a la ls hd b tl l).

Lemma rec_nonco_kill :
 forall (d : preDTA) (a a0 : ad) (t : term),
 reconnaissance_co d a a0 t ->
 preDTA_ref_ok d -> reconnaissance_co (predta_kill_non_coacc d a0) a a0 t.

Lemma predta_kill_non_coacc_dir :
 forall (d : preDTA) (a : ad) (t : term),
 preDTA_ref_ok d ->
 reconnaissance d a t ->
 reconnaissance (non_coacc_kill d (predta_coacc_states d a)) a t.

Lemma predta_kill_non_coacc_semantics :
 forall (d : DTA) (t : term),
 DTA_ref_ok d -> (reconnait d t <-> reconnait (dta_kill_non_coacc d) t).

Lemma predta_kill_non_coacc_lazy_semantics :
 forall (d : DTA) (t : term),
 DTA_ref_ok d -> (reconnait d t <-> reconnait (dta_kill_non_coacc_lazy d) t). *)
Require Import non_coacc_kill_correct.(* non_coacc_kill_correct:
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import refcorrect.
Require Import signature.
Require Import lattice_fixpoint.
Require Import coacc_test.
Require Import non_coacc_kill.

Lemma predta_kill_non_coacc_correct_wrt_sign :
 forall (d : preDTA) (a : ad) (sigma : signature),
 preDTA_ref_ok d ->
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (predta_kill_non_coacc d a) sigma.

Lemma dta_kill_non_coacc_correct_wrt_sign :
 forall (d : DTA) (sigma : signature),
 DTA_ref_ok d ->
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (dta_kill_non_coacc d) sigma.

Lemma dta_kill_non_coacc_lazy_correct_wrt_sign :
 forall (d : DTA) (sigma : signature),
 DTA_ref_ok d ->
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (dta_kill_non_coacc_lazy d) sigma.

Lemma predta_kill_non_coacc_correct_ref_ok :
 forall (d : preDTA) (a : ad),
 preDTA_ref_ok d -> preDTA_ref_ok (predta_kill_non_coacc d a).

Lemma dta_kill_non_coacc_correct_ref_ok :
 forall d : DTA, DTA_ref_ok d -> DTA_ref_ok (dta_kill_non_coacc d).

Lemma dta_kill_non_coacc_lazy_correct_ref_ok :
 forall d : DTA, DTA_ref_ok d -> DTA_ref_ok (dta_kill_non_coacc_lazy d).

Lemma dta_kill_non_coacc_correct_main_state :
 forall d : DTA,
 DTA_ref_ok d ->
 DTA_main_state_correct d -> DTA_main_state_correct (dta_kill_non_coacc d).

Lemma dta_kill_non_coacc_lazy_correct_main_state :
 forall d : DTA,
 DTA_ref_ok d ->
 DTA_main_state_correct d ->
 DTA_main_state_correct (dta_kill_non_coacc_lazy d). *)
