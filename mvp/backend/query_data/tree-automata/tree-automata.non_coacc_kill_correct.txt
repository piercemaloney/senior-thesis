
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
(* bases:
Require Import Bool.
Require Import Arith.
Require Import ZArith.
Require Import NArith.
Require Import Ndec.
From IntMap Require Import Allmaps.
Require Import EqNat.
Require Export Max.

Lemma nat_sum : forall n : nat, n = 0 \/ (exists m : nat, n = S m).

Lemma le_n_n : forall n : nat, n <= n.

Lemma le_l_or_r : forall n m : nat, n <= m \/ m <= n.

Lemma plus_n_O : forall n : nat, n + 0 = n.
 
 Lemma S_plus_l : forall n m : nat, S (n + m) = S n + m.
 
 Lemma S_plus_r : forall n m : nat, S (n + m) = n + S m.

Lemma max_le_Sr_0 :
 forall n m : nat, max n m <= max n (S m) /\ max (S n) m <= max (S n) (S m).

Lemma max_le_Sr : forall n m : nat, max n m <= max n (S m).

Lemma plus_O_r : forall n : nat, n + 0 = n.

Lemma plus_O_l : forall n : nat, n + 0 = n.

Lemma le_mult_lS : forall n m : nat, n * m <= S n * m.

Lemma le_mult_rS : forall n m : nat, n * m <= n * S m.

Lemma le_disj : forall n m : nat, n <= m -> n = m \/ S n <= m.

Lemma le_mult_l : forall n m p : nat, n <= m -> n * p <= m * p.

Lemma le_mult_r : forall n m p : nat, n <= m -> p * n <= p * m.

Lemma le_mult_mult : forall n m p q : nat, n <= m -> p <= q -> n * p <= m * q.

Lemma Sn_eq_Sm_n_eq_m : forall n m : nat, S n = S m -> n = m.

Lemma bool_dec_eq : forall a b : bool, {a = b} + {a <> b}.

Lemma bool_is_false_or_true : forall a : bool, a = false \/ a = true.

Lemma bool_is_true_or_false : forall a : bool, a = true \/ a = false.

Lemma in_M0_false :
 forall (A : Set) (a : A), ~ (exists e : ad, MapGet A (M0 A) e = Some a).

Lemma in_M1_id :
 forall (A : Set) (a : A) (x : ad) (e : A),
 (exists c : ad, MapGet A (M1 A x e) c = Some a) -> a = e.

Lemma in_M2_disj :
 forall (A : Set) (a : A) (m0 m1 : Map A),
 (exists c : ad, MapGet A (M2 A m0 m1) c = Some a) ->
 (exists c : ad, MapGet A m0 c = Some a) \/
 (exists c : ad, MapGet A m1 c = Some a).

Lemma aux_Neqb_1_0 : forall p : positive, Peqb p p = true.

Lemma aux_Neqb_1_1 : forall p p0 : positive, Peqb p p0 = true -> p = p0.

Lemma aux_Neqb_trans :
 forall a b c : ad, Neqb a b = true -> Neqb b c = true -> Neqb a c = true.

Lemma indprinciple_nat_gen :
 forall P : nat -> Prop,
 (forall n : nat, (forall m : nat, m < n -> P m) -> P n) ->
 forall n m : nat, m <= n -> P m.

Lemma beq_nat_complete : forall n m : nat, beq_nat n m = true -> n = m.

Lemma beq_nat_correct : forall n : nat, beq_nat n n = true. *)
Require Import defs.
(* defs:
Require Import Bool.
Require Import Arith.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import EqNat.
Require Import bases.

Inductive term : Set :=
    app : ad -> term_list -> term
with term_list : Set :=
  | tnil : term_list
  | tcons : term -> term_list -> term_list.

Scheme term_term_list_rec := Induction for term
  Sort Set
  with term_list_term_rec := Induction for term_list 
  Sort Set.

Scheme term_term_list_ind := Induction for term
  Sort Prop
  with term_list_term_ind := Induction for term_list 
  Sort Prop.

Lemma term_list_disj :
 forall l : term_list,
 l = tnil \/ (exists hd : term, (exists tl : term_list, l = tcons hd tl)).

Fixpoint lst_length (l : term_list) : nat :=
  match l with
  | tnil => 0
  | tcons _ l' => S (lst_length l')
  end.

Fixpoint term_high (t : term) : nat :=
  match t with
  | app a l => S (term_high_0 l)
  end
 
 with term_high_0 (l : term_list) : nat :=
  match l with
  | tnil => 0
  | tcons hd tl => max (term_high hd) (term_high_0 tl)
  end.

Lemma high_aux_0 :
 forall (a : ad) (l : term_list), S (term_high_0 l) <= term_high (app a l).

Lemma high_aux_1 :
 forall (a : ad) (l : term_list), S (term_high_0 l) = term_high (app a l).

Lemma high_aux_2 : forall (l : term_list) (c : ad), 1 <= term_high (app c l).

Lemma high_aux_3 :
 forall (t : term) (tl : term_list), term_high t <= term_high_0 (tcons t tl).

Lemma high_aux_4 :
 forall (t : term) (tl : term_list),
 term_high_0 tl <= term_high_0 (tcons t tl).

Fixpoint taille_term (t : term) : nat :=
  match t with
  | app c l => S (mtaille_term_list l)
  end
 
 with mtaille_term_list (l : term_list) : nat :=
  match l with
  | tnil => 0
  | tcons hd tl => max (taille_term hd) (mtaille_term_list tl)
  end.

Inductive prec_list : Set :=
  | prec_cons : ad -> prec_list -> prec_list -> prec_list
  | prec_empty : prec_list.

Lemma pl_sum :
 forall pl : prec_list,
 pl = prec_empty \/
 (exists a : ad,
    (exists la : prec_list, (exists ls : prec_list, pl = prec_cons a la ls))).

Definition state := Map prec_list.

Definition preDTA := Map state.

Inductive DTA : Set :=
    dta : preDTA -> ad -> DTA.

Fixpoint taille_0 (l : prec_list) : nat :=
  match l with
  | prec_empty => 0
  | prec_cons x y z => S (taille_0 y + taille_0 z)
  end.

Fixpoint taille_1 (s : state) : nat :=
  match s with
  | M0 => 0
  | M1 x y => taille_0 y
  | M2 x y => max (taille_1 x) (taille_1 y)
  end.

Fixpoint DTA_taille (d : preDTA) : nat :=
  match d with
  | M0 => 0
  | M1 x y => taille_1 y
  | M2 x y => max (DTA_taille x) (DTA_taille y)
  end.

Lemma taille_aux_0 :
 forall (a : ad) (la ls : prec_list),
 S (taille_0 la) <= taille_0 (prec_cons a la ls).

Lemma taille_aux_1 :
 forall (a : ad) (la ls : prec_list), 1 <= taille_0 (prec_cons a la ls).

Lemma taille_aux_2 :
 forall (a : ad) (la ls : prec_list),
 S (taille_0 ls) <= taille_0 (prec_cons a la ls).

Inductive prec_occur : prec_list -> ad -> Prop :=
  | prec_hd :
      forall (a : ad) (pl0 pl1 : prec_list),
      prec_occur (prec_cons a pl0 pl1) a
  | prec_int0 :
      forall (a b : ad) (pl0 pl1 : prec_list),
      prec_occur pl0 b -> prec_occur (prec_cons a pl0 pl1) b
  | prec_int1 :
      forall (a b : ad) (pl0 pl1 : prec_list),
      prec_occur pl1 b -> prec_occur (prec_cons a pl0 pl1) b.

Inductive prec_contained : prec_list -> prec_list -> Prop :=
  | prec_id : forall p : prec_list, prec_contained p p
  | prec_c_int0 :
      forall (p p0 p1 : prec_list) (a : ad),
      prec_contained p p0 -> prec_contained p (prec_cons a p0 p1)
  | prec_c_int1 :
      forall (p p0 p1 : prec_list) (a : ad),
      prec_contained p p1 -> prec_contained p (prec_cons a p0 p1).

Definition state_in_dta (d : preDTA) (s : state) : Prop :=
  exists a : ad, MapGet state d a = Some s.

Definition state_in_dta_diff (d : preDTA) (s : state) 
  (a : ad) : Prop := exists b : ad, MapGet state d b = Some s /\ a <> b.

Definition prec_in_dta (d : preDTA) (p : prec_list) : Prop :=
  exists s : state,
    (exists a : ad,
       (exists c : ad,
          MapGet state d a = Some s /\
          MapGet prec_list s c = Some p)).

Definition prec_in_dta_cont (d : preDTA) (p : prec_list) : Prop :=
  exists s : state,
    (exists b : ad,
       (exists c : ad,
          (exists p0 : prec_list,
             MapGet state d b = Some s /\
             MapGet prec_list s c = Some p0 /\ prec_contained p p0))).

Definition prec_in_dta_diff (d : preDTA) (p : prec_list) 
  (a : ad) : Prop :=
  exists s : state,
    (exists b : ad,
       (exists c : ad,
          MapGet state d b = Some s /\
          MapGet prec_list s c = Some p /\ a <> b)).

Definition prec_in_dta_diff_cont (d : preDTA) (p : prec_list) 
  (a : ad) : Prop :=
  exists s : state,
    (exists b : ad,
       (exists c : ad,
          (exists p0 : prec_list,
             MapGet state d b = Some s /\
             MapGet prec_list s c = Some p0 /\
             prec_contained p p0 /\ a <> b))).

Definition prec_in_state (s : state) (p : prec_list) : Prop :=
  exists c : ad, MapGet prec_list s c = Some p.

Lemma prec_in_state_M0_false :
 forall p : prec_list, ~ prec_in_state (M0 prec_list) p.

Lemma state_in_dta_M0_false : forall s : state, ~ state_in_dta (M0 state) s.

Lemma prec_occur_1 :
 forall (a : ad) (p0 p1 p2 : prec_list),
 prec_contained (prec_cons a p0 p1) p2 -> prec_occur p2 a.

Lemma prec_contained_0 :
 forall (a : ad) (p0 p1 p2 : prec_list),
 prec_contained (prec_cons a p0 p1) p2 -> prec_contained p0 p2.

Lemma prec_contained_1 :
 forall (a : ad) (p0 p1 p2 : prec_list),
 prec_contained (prec_cons a p0 p1) p2 -> prec_contained p1 p2.

Inductive term_occur : term -> term -> Prop :=
  | to_eq : forall t : term, term_occur t t
  | to_st :
      forall (t : term) (a : ad) (tl : term_list),
      term_list_occur t tl -> term_occur t (app a tl)
with term_list_occur : term -> term_list -> Prop :=
  | tlo_head :
      forall (t hd : term) (tl : term_list),
      term_occur t hd -> term_list_occur t (tcons hd tl)
  | tlo_tail :
      forall (t hd : term) (tl : term_list),
      term_list_occur t tl -> term_list_occur t (tcons hd tl).

Definition term_occur_def_0 (t : term) :=
  forall u : term, term_occur u t -> term_high u <= term_high t.

Definition term_occur_def_1 (t : term_list) :=
  forall u : term, term_list_occur u t -> term_high u <= term_high_0 t.

Lemma term_occur_0_0 :
 forall (a : ad) (t : term_list),
 term_occur_def_1 t -> term_occur_def_0 (app a t).

Lemma term_occur_0_1 : term_occur_def_1 tnil.

Lemma term_occur_0_2 :
 forall t : term,
 term_occur_def_0 t ->
 forall t0 : term_list, term_occur_def_1 t0 -> term_occur_def_1 (tcons t t0).

Lemma term_occur_0 :
 forall t u : term, term_occur u t -> term_high u <= term_high t.

Lemma term_occur_1 :
 forall (t : term_list) (u : term),
 term_list_occur u t -> term_high u <= term_high_0 t.

Definition indprinciple_3_aux (n : nat) :=
  forall P : term -> Prop,
  (forall (a : ad) (tl : term_list),
   (forall u : term, term_list_occur u tl -> P u) -> P (app a tl)) ->
  forall t : term, term_high t <= n -> P t.

Lemma indprinciple_3_0 : indprinciple_3_aux 0.

Lemma indprinciple_3_1 :
 forall n : nat, indprinciple_3_aux n -> indprinciple_3_aux (S n).

Lemma indprinciple_3_2 :
 forall (n : nat) (P : term -> Prop),
 (forall (a : ad) (tl : term_list),
  (forall u : term, term_list_occur u tl -> P u) -> P (app a tl)) ->
 forall t : term, term_high t <= n -> P t.

Lemma indprinciple_term :
 forall P : term -> Prop,
 (forall (a : ad) (tl : term_list),
  (forall u : term, term_list_occur u tl -> P u) -> P (app a tl)) ->
 forall t : term, P t.

Lemma Ndouble_inv_N0 : forall x : ad, Ndouble x = N0 -> x = N0.

Lemma Ndouble_inv_xO :
 forall (x : ad) (p : positive), Ndouble x = Npos (xO p) -> x = Npos p.

Lemma Ndouble_plus_one_inv_xH :
 forall x : ad, Ndouble_plus_one x = Npos 1 -> x = N0.

Lemma Ndouble_plus_one_inv_xI :
 forall (x : ad) (p : positive),
 Ndouble_plus_one x = Npos (xI p) -> x = Npos p. *)
Require Import semantics.
(* semantics:
Require Import Bool.
Require Import Arith.
Require Import Classical_Prop.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.

Unset Standard Proposition Elimination Names.

Fixpoint rec_term (d : preDTA) (a : ad) (t : term) 
 (n : nat) {struct n} : bool :=
  match n with
  | O => false
  | S k =>
      match t with
      | app c l =>
          match MapGet _ d a with
          | None => false
          | Some lts =>
              match MapGet _ lts c with
              | None => false
              | Some pre => rec_list_terms d pre l k
              end
          end
      end
  end
 
 with rec_list_terms (d : preDTA) (pre : prec_list) 
 (l : term_list) (n : nat) {struct n} : bool :=
  match n with
  | O => false
  | S k =>
      match pre with
      | prec_empty => match l with
                      | tnil => true
                      | _ => false
                      end
      | prec_cons st stp pre' =>
          match l with
          | tnil => false
          | tcons hd tl =>
              rec_list_terms d pre' l k
              || rec_term d st hd k && rec_list_terms d stp tl k
          end
      end
  end.

Lemma borne_0_0 :
 forall p : prec_list,
 prec_in_state (M0 prec_list) p -> taille_0 p <= taille_1 (M0 prec_list).

Lemma borne_0_1 :
 forall (a : ad) (p' p : prec_list),
 prec_in_state (M1 prec_list a p') p ->
 taille_0 p <= taille_1 (M1 prec_list a p').

Lemma borne_0_2 :
 forall (m0 m1 : Map prec_list) (p : prec_list),
 (prec_in_state m0 p -> taille_0 p <= taille_1 m0) ->
 (prec_in_state m1 p -> taille_0 p <= taille_1 m1) ->
 prec_in_state (M2 prec_list m0 m1) p ->
 taille_0 p <= taille_1 (M2 prec_list m0 m1).

Lemma borne_0 :
 forall (s : state) (p : prec_list),
 prec_in_state s p -> taille_0 p <= taille_1 s.

Lemma borne_1_0 :
 forall s : state,
 state_in_dta (M0 state) s -> taille_1 s <= DTA_taille (M0 state).

Lemma borne_1_1 :
 forall (a : ad) (s' s : state),
 state_in_dta (M1 state a s') s -> taille_1 s <= DTA_taille (M1 state a s').

Lemma borne_1_2 :
 forall (m0 m1 : Map state) (s : state),
 (state_in_dta m0 s -> taille_1 s <= DTA_taille m0) ->
 (state_in_dta m1 s -> taille_1 s <= DTA_taille m1) ->
 state_in_dta (M2 state m0 m1) s -> taille_1 s <= DTA_taille (M2 state m0 m1).

Lemma borne_1 :
 forall (d : preDTA) (s : state),
 state_in_dta d s -> taille_1 s <= DTA_taille d.

Lemma borne_2 :
 forall (d : preDTA) (p : prec_list),
 prec_in_dta d p -> taille_0 p <= DTA_taille d.

Definition essence (t : term) (d : preDTA) : nat :=
  S (term_high t) * S (DTA_taille d).

Definition essence_list (l : term_list) (d : preDTA) 
  (pl : prec_list) : nat :=
  match l, pl with
  | tnil, _ => 1
  | _, prec_empty => 1
  | _, prec_cons a la ls =>
      taille_0 pl + S (term_high_0 l) * S (DTA_taille d)
  end.

Lemma conservation_0_0 : forall n n0 : nat, S n * S n0 = S (n0 + n * S n0).

Lemma conservation_0 :
 forall (d : preDTA) (p : prec_list) (c : ad) (l : term_list),
 prec_in_dta d p -> S (essence_list l d p) <= essence (app c l) d.

Lemma conservation_1 :
 forall (d : preDTA) (l : term_list), 1 <= essence_list l d prec_empty.

Lemma conservation_2 :
 forall (d : preDTA) (p : prec_list), 1 <= essence_list tnil d p.

Lemma conservation_3 :
 forall (d : preDTA) (hd : term) (tl : term_list) (a : ad)
   (la ls : prec_list),
 S (essence_list (tcons hd tl) d ls) <=
 essence_list (tcons hd tl) d (prec_cons a la ls).

Lemma conservation_4 :
 forall (d : preDTA) (hd : term) (tl : term_list) (a : ad)
   (la ls : prec_list),
 S (essence_list tl d la) <= essence_list (tcons hd tl) d (prec_cons a la ls).

Lemma conservation_5_0 :
 forall (a : ad) (la ls : prec_list), 1 <= taille_0 (prec_cons a la ls).

Lemma conservation_5 :
 forall (d : preDTA) (hd : term) (tl : term_list) (a : ad)
   (la ls : prec_list),
 S (essence hd d) <= essence_list (tcons hd tl) d (prec_cons a la ls).

Definition dta_rec_term (d : DTA) (t : term) : bool :=
  match d with
  | dta p a => rec_term p a t (essence t p)
  end.

Inductive reconnaissance : preDTA -> ad -> term -> Prop :=
    rec_dta :
      forall (d : preDTA) (a : ad) (t : term) (ladj : state),
      MapGet state d a = Some ladj ->
      state_reconnait d ladj t -> reconnaissance d a t
with state_reconnait : preDTA -> state -> term -> Prop :=
    rec_st :
      forall (d : preDTA) (s : state) (c : ad) (tl : term_list)
        (l : prec_list),
      MapGet prec_list s c = Some l ->
      liste_reconnait d l tl -> state_reconnait d s (app c tl)
with liste_reconnait : preDTA -> prec_list -> term_list -> Prop :=
  | rec_empty : forall d : preDTA, liste_reconnait d prec_empty tnil
  | rec_consi :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (tl : term_list),
      reconnaissance d a hd ->
      liste_reconnait d la tl ->
      liste_reconnait d (prec_cons a la ls) (tcons hd tl)
  | rec_consn :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (tl : term_list),
      liste_reconnait d ls (tcons hd tl) ->
      liste_reconnait d (prec_cons a la ls) (tcons hd tl).

Definition reconnait (d : DTA) (t : term) : Prop :=
  match d with
  | dta p a => reconnaissance p a t
  end.

Scheme mreconnaissance_ind := Induction for reconnaissance
  Sort Prop
  with mstrec_ind := Induction for state_reconnait 
  Sort Prop
  with mlrec_ind := Induction for liste_reconnait Sort Prop.

Lemma sem_listes_0 :
 forall (d : preDTA) (p : prec_list) (hd : term) (tl : term_list),
 liste_reconnait d p (tcons hd tl) -> p <> prec_empty.

Lemma sem_listes_1 :
 forall (d : preDTA) (hd : term) (tl : term_list),
 ~ liste_reconnait d prec_empty (tcons hd tl).

Lemma sem_listes_2 :
 forall (d : preDTA) (pl : prec_list),
 liste_reconnait d pl tnil -> pl = prec_empty.

Definition sem_equiv_prop_t (t : term) :=
  forall (d : preDTA) (a : ad) (n : nat),
  rec_term d a t n = true -> reconnaissance d a t.
Definition sem_equiv_prop_l (l : term_list) :=
  forall (d : preDTA) (p : prec_list) (n : nat),
  rec_list_terms d p l n = true -> liste_reconnait d p l.

Lemma semantic_equiv_0_0 :
 forall (d : preDTA) (p : prec_list) (n : nat),
 rec_list_terms d p tnil n = true -> p = prec_empty.

Lemma semantic_equiv_0_1 : sem_equiv_prop_l tnil.

Lemma semantic_equiv_0_2 :
 forall (d : preDTA) (a a' : ad) (l : term_list) (n : nat) 
   (s : state) (p : prec_list),
 rec_term d a (app a' l) (S n) = true ->
 MapGet state d a = Some s ->
 MapGet prec_list s a' = Some p -> rec_list_terms d p l n = true.

Lemma semantic_equiv_0_3 :
 forall (d : preDTA) (a a' : ad) (l : term_list) (n : nat),
 rec_term d a (app a' l) (S n) = true ->
 exists s : state, MapGet state d a = Some s.

Lemma semantic_equiv_0_4 :
 forall (d : preDTA) (a a' : ad) (l : term_list) (n : nat) (s : state),
 MapGet state d a = Some s ->
 rec_term d a (app a' l) (S n) = true ->
 exists p : prec_list, MapGet prec_list s a' = Some p.

Lemma semantic_equiv_0_5 :
 forall (a : ad) (t : term_list),
 sem_equiv_prop_l t -> sem_equiv_prop_t (app a t).

Lemma semantic_equiv_0_6 :
 forall (n : nat) (t : term) (t0 : term_list),
 (forall (d : preDTA) (a : ad) (m : nat),
  rec_term d a t m = true -> reconnaissance d a t) ->
 (forall (d : preDTA) (p : prec_list) (m : nat),
  rec_list_terms d p t0 m = true -> liste_reconnait d p t0) ->
 forall (d : preDTA) (p : prec_list),
 rec_list_terms d p (tcons t t0) n = true -> liste_reconnait d p (tcons t t0).

Lemma semantic_equiv_0_7 :
 forall t : term,
 sem_equiv_prop_t t ->
 forall t0 : term_list, sem_equiv_prop_l t0 -> sem_equiv_prop_l (tcons t t0).

Lemma semantic_equiv_0 :
 forall (d : preDTA) (a : ad) (t : term) (n : nat),
 rec_term d a t n = true -> reconnaissance d a t.

Definition invar_term (t : term) : Prop :=
  forall (n m : nat) (d : preDTA) (a : ad),
  rec_term d a t n = true -> n <= m -> rec_term d a t m = true.

Definition invar_list (tl : term_list) : Prop :=
  forall (n m : nat) (d : preDTA) (p : prec_list),
  rec_list_terms d p tl n = true -> n <= m -> rec_list_terms d p tl m = true.

Lemma invar_0 : invar_list tnil.

Lemma invar_1_0 :
 forall (d : preDTA) (a c : ad) (t : term_list) (n : nat) 
   (s : state) (p : prec_list),
 MapGet state d a = Some s ->
 MapGet prec_list s c = Some p ->
 rec_list_terms d p t n = true -> rec_term d a (app c t) (S n) = true.

Lemma invar_1_1 :
 forall (d : preDTA) (a c : ad) (t : term_list) (n : nat),
 rec_term d a (app c t) (S n) = true ->
 exists p : prec_list, rec_list_terms d p t n = true.

Lemma invar_1 :
 forall (a : ad) (t : term_list), invar_list t -> invar_term (app a t).

Lemma invar_2_0 :
 forall (d : preDTA) (p : prec_list) (n : nat),
 rec_list_terms d p tnil n = true -> p = prec_empty.

Lemma invar_2_1 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (n : nat),
 rec_list_terms d (prec_cons a la ls) (tcons hd tl) (S n) = true ->
 rec_list_terms d ls (tcons hd tl) n = true \/
 rec_term d a hd n = true /\ rec_list_terms d la tl n = true.

Lemma invar_2_2 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (n : nat),
 rec_list_terms d ls (tcons hd tl) n = true \/
 rec_term d a hd n = true /\ rec_list_terms d la tl n = true ->
 rec_list_terms d (prec_cons a la ls) (tcons hd tl) (S n) = true.
 
Lemma invar_2 :
 forall t : term,
 invar_term t ->
 forall t0 : term_list, invar_list t0 -> invar_list (tcons t t0).

Lemma invar : forall t : term, invar_term t.

Lemma invarl : forall tl : term_list, invar_list tl.

Definition dta_reconnait (d : preDTA) (a : ad) (t : term)
  (pr : reconnaissance d a t) := rec_term d a t (essence t d) = true.

Definition st_reconnait (d : preDTA) (s : state) (t : term)
  (pr : state_reconnait d s t) :=
  match t with
  | app c l =>
      exists p : prec_list,
        MapGet prec_list s c = Some p /\
        rec_list_terms d p l (essence_list l d p) = true
  end.

Definition pre_reconnait (d : preDTA) (p : prec_list) 
  (t : term_list) (pr : liste_reconnait d p t) :=
  rec_list_terms d p t (essence_list t d p) = true.

Lemma semantic_equiv_1_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 st_reconnait d ladj t s -> dta_reconnait d a t (rec_dta d a t ladj e s).

Lemma semantic_equiv_1_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 pre_reconnait d l tl l0 ->
 st_reconnait d s (app c tl) (rec_st d s c tl l e l0).

Lemma semantic_equiv_1_2 :
 forall d : preDTA, pre_reconnait d prec_empty tnil (rec_empty d).

Lemma semantic_equiv_1_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 dta_reconnait d a hd r ->
 forall l : liste_reconnait d la tl,
 pre_reconnait d la tl l ->
 pre_reconnait d (prec_cons a la ls) (tcons hd tl)
   (rec_consi d a la ls hd tl r l).

Lemma semantic_equiv_1_4_0 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (l : term_list) (n : nat),
 l <> tnil ->
 rec_list_terms d ls l n = true ->
 rec_list_terms d (prec_cons a la ls) l (S n) = true.

Lemma semantic_equiv_1_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 pre_reconnait d ls (tcons hd tl) l ->
 pre_reconnait d (prec_cons a la ls) (tcons hd tl)
   (rec_consn d a la ls hd tl l).

Lemma semantic_equiv_1 :
 forall (d : preDTA) (a : ad) (t : term),
 reconnaissance d a t -> rec_term d a t (essence t d) = true. *)
Require Import refcorrect.
(* refcorrect:
Require Import Bool.
Require Import NArith Ndec.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.

Definition prec_list_ref_ok (p : prec_list) (d : preDTA) : Prop :=
  forall a : ad,
  prec_occur p a -> exists s : state, MapGet state d a = Some s.

Definition state_ref_ok (s : state) (d : preDTA) : Prop :=
  forall (a : ad) (p : prec_list),
  MapGet prec_list s a = Some p -> prec_list_ref_ok p d.

Definition preDTA_ref_ok (d : preDTA) : Prop :=
  forall (a : ad) (s : state) (c : ad) (pl : prec_list) (b : ad),
  MapGet state d a = Some s ->
  MapGet prec_list s c = Some pl ->
  prec_occur pl b -> exists s0 : state, MapGet state d b = Some s0.

Definition preDTA_ref_ok_distinct (d d' : preDTA) : Prop :=
  forall (a : ad) (s : state),
  MapGet state d a = Some s -> state_ref_ok s d'.

Definition DTA_ref_ok (d : DTA) : Prop :=
  match d with
  | dta p a => preDTA_ref_ok p
  end.

Lemma prec_list_ref_ok_destr :
 forall (a : ad) (la ls : prec_list) (d : preDTA),
 prec_list_ref_ok (prec_cons a la ls) d ->
 prec_list_ref_ok la d /\ prec_list_ref_ok ls d.

Lemma state_ref_ok_M2_destr :
 forall (s0 s1 : state) (d : preDTA),
 state_ref_ok (M2 prec_list s0 s1) d ->
 state_ref_ok s0 d /\ state_ref_ok s1 d.

Lemma preDTA_ref_ok_def :
 forall d : preDTA,
 preDTA_ref_ok d <->
 (forall (a : ad) (s : state),
  MapGet state d a = Some s -> state_ref_ok s d).

Lemma preDTA_ref_ok_distinct_dest :
 forall d0 d1 d : preDTA,
 preDTA_ref_ok_distinct (M2 state d0 d1) d ->
 preDTA_ref_ok_distinct d0 d /\ preDTA_ref_ok_distinct d1 d.

Definition addr_in_dta_check (d : preDTA) (a : ad) : bool :=
  match MapGet state d a with
  | None => false
  | Some _ => true
  end.

Fixpoint prec_list_ref_ok_check (p : prec_list) : preDTA -> bool :=
  fun d : preDTA =>
  match p with
  | prec_empty => true
  | prec_cons a la ls =>
      addr_in_dta_check d a &&
      (prec_list_ref_ok_check la d && prec_list_ref_ok_check ls d)
  end.

Lemma prec_list_ref_ok_check_correct :
 forall (p : prec_list) (d : preDTA),
 prec_list_ref_ok p d -> prec_list_ref_ok_check p d = true.

Lemma prec_list_ref_ok_check_complete :
 forall (p : prec_list) (d : preDTA),
 prec_list_ref_ok_check p d = true -> prec_list_ref_ok p d.

Fixpoint state_ref_ok_check (s : state) : preDTA -> bool :=
  fun d : preDTA =>
  match s with
  | M0 => true
  | M1 a p => prec_list_ref_ok_check p d
  | M2 x y => state_ref_ok_check x d && state_ref_ok_check y d
  end.

Lemma state_ref_ok_check_correct :
 forall (s : state) (d : preDTA),
 state_ref_ok s d -> state_ref_ok_check s d = true.

Lemma state_ref_ok_check_complete :
 forall (s : state) (d : preDTA),
 state_ref_ok_check s d = true -> state_ref_ok s d.

Fixpoint predta_ref_ok_check_0 (d : preDTA) : preDTA -> bool :=
  fun d' : preDTA =>
  match d with
  | M0 => true
  | M1 a s => state_ref_ok_check s d'
  | M2 x y => predta_ref_ok_check_0 x d' && predta_ref_ok_check_0 y d'
  end.

Definition predta_ref_ok_check (d : preDTA) : bool :=
  predta_ref_ok_check_0 d d.

Lemma predta_ref_ok_check_correct_0 :
 forall d d' : preDTA,
 preDTA_ref_ok_distinct d d' -> predta_ref_ok_check_0 d d' = true.

Lemma predta_ref_ok_check_complete_0 :
 forall d d' : preDTA,
 predta_ref_ok_check_0 d d' = true -> preDTA_ref_ok_distinct d d'.

Lemma predta_ref_ok_check_correct :
 forall d : preDTA, preDTA_ref_ok d -> predta_ref_ok_check d = true.

Lemma predta_ref_ok_check_complete :
 forall d : preDTA, predta_ref_ok_check d = true -> preDTA_ref_ok d.

Definition dta_ref_ok_check (d : DTA) : bool :=
  match d with
  | dta p a => predta_ref_ok_check p
  end.

Lemma dta_ref_ok_check_correct :
 forall d : DTA, DTA_ref_ok d -> dta_ref_ok_check d = true.

Lemma dta_ref_ok_check_complete :
 forall d : DTA, dta_ref_ok_check d = true -> DTA_ref_ok d.

Definition addr_in_preDTA (d : preDTA) (a : ad) : Prop :=
  exists s : state, MapGet state d a = Some s.

Definition DTA_main_state_correct (d : DTA) : Prop :=
  match d with
  | dta p a => addr_in_preDTA p a
  end.

Definition DTA_main_state_correct_check (d : DTA) : bool :=
  match d with
  | dta p a =>
      match MapGet state p a with
      | None => false
      | Some _ => true
      end
  end.

Lemma DTA_main_state_correct_check_correct :
 forall d : DTA,
 DTA_main_state_correct d -> DTA_main_state_correct_check d = true.

Lemma DTA_main_state_correct_check_complete :
 forall d : DTA,
 DTA_main_state_correct_check d = true -> DTA_main_state_correct d. *)
Require Import signature.
(* signature:
Require Import Bool.
Require Import NArith.
Require Import Ndec.
Require Import ZArith.
Require Import EqNat.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.

Definition pl_compat (pl0 pl1 : prec_list) : Prop :=
  pl0 = prec_empty /\ pl1 = prec_empty \/
  pl0 <> prec_empty /\ pl1 <> prec_empty.

Definition mpl_compat (s0 s1 : state) : Prop :=
  forall (c : ad) (p0 p1 : prec_list),
  MapGet prec_list s0 c = Some p0 ->
  MapGet prec_list s1 c = Some p1 -> pl_compat p0 p1.

Definition dta_correct (d : preDTA) : Prop :=
  forall (s0 s1 : state) (a0 a1 : ad),
  MapGet state d a0 = Some s0 ->
  MapGet state d a1 = Some s1 -> mpl_compat s0 s1.

Definition dta_compat (d0 d1 : preDTA) : Prop :=
  forall (s0 s1 : state) (a0 a1 : ad),
  MapGet state d0 a0 = Some s0 ->
  MapGet state d1 a1 = Some s1 -> mpl_compat s0 s1.

Definition DTA_compat (d0 d1 : DTA) : Prop :=
  match d0, d1 with
  | dta p0 a0, dta p1 a1 => dta_compat p0 p1
  end.

Lemma pl_compat_sym :
 forall pl0 pl1 : prec_list, pl_compat pl0 pl1 -> pl_compat pl1 pl0.

Lemma mpl_compat_0 :
 forall (c : ad) (pl0 pl1 : prec_list),
 mpl_compat (M1 prec_list c pl0) (M1 prec_list c pl1) -> pl_compat pl0 pl1.

Lemma mpl_compat_1 :
 forall s0 s1 s2 s3 : state,
 mpl_compat (M2 prec_list s0 s1) (M2 prec_list s2 s3) -> mpl_compat s0 s2.

Lemma mpl_compat_2 :
 forall s0 s1 s2 s3 : state,
 mpl_compat (M2 prec_list s0 s1) (M2 prec_list s2 s3) -> mpl_compat s1 s3.

Lemma mpl_compat_3 :
 forall (s0 s1 : state) (pl : prec_list),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list N0 pl) ->
 mpl_compat s0 (M1 prec_list N0 pl).

Lemma mpl_compat_4 :
 forall (s0 s1 : state) (pl : prec_list),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list (Npos 1) pl) ->
 mpl_compat s1 (M1 prec_list N0 pl).

Lemma mpl_compat_5 :
 forall (s0 s1 : state) (pl : prec_list) (p : positive),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list (Npos (xO p)) pl) ->
 mpl_compat s0 (M1 prec_list (Npos p) pl).

Lemma mpl_compat_6 :
 forall (s0 s1 : state) (pl : prec_list) (p : positive),
 mpl_compat (M2 prec_list s0 s1) (M1 prec_list (Npos (xI p)) pl) ->
 mpl_compat s1 (M1 prec_list (Npos p) pl).

Lemma mpl_compat_sym :
 forall s0 s1 : state, mpl_compat s0 s1 -> mpl_compat s1 s0.

Inductive pl_tl_length : prec_list -> nat -> Prop :=
  | pl_tl_O : pl_tl_length prec_empty 0
  | pl_tl_S :
      forall (a : ad) (pl : prec_list) (n : nat),
      pl_tl_length pl n -> pl_tl_length (prec_cons a pl prec_empty) (S n)
  | pl_tl_propag :
      forall (a : ad) (la ls : prec_list) (n : nat),
      pl_tl_length la n ->
      pl_tl_length ls (S n) -> pl_tl_length (prec_cons a la ls) (S n).

Lemma pl_tl_length_pl_compat :
 forall (p0 p1 : prec_list) (n : nat),
 pl_tl_length p0 n -> pl_tl_length p1 n -> pl_compat p0 p1.

Definition pl_tl_length_rec_def_0 (n : nat) :=
  forall (d : preDTA) (pl : prec_list) (tl : term_list),
  pl_tl_length pl n -> liste_reconnait d pl tl -> n = lst_length tl.

Definition pl_tl_length_rec_def_1 (d : preDTA) (pl : prec_list)
  (tl : term_list) :=
  forall n : nat,
  pl_tl_length_rec_def_0 n ->
  pl_tl_length pl (S n) -> liste_reconnait d pl tl -> S n = lst_length tl.

Lemma pl_tl_length_rec_0 : pl_tl_length_rec_def_0 0.

Lemma pl_tl_length_rec_1 :
 forall d : preDTA, pl_tl_length_rec_def_1 d prec_empty tnil.

Lemma pl_tl_length_rec_2 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 reconnaissance d a hd ->
 liste_reconnait d la tl ->
 pl_tl_length_rec_def_1 d la tl ->
 pl_tl_length_rec_def_1 d (prec_cons a la ls) (tcons hd tl).

Lemma pl_tl_length_rec_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 liste_reconnait d ls (tcons hd tl) ->
 pl_tl_length_rec_def_1 d ls (tcons hd tl) ->
 pl_tl_length_rec_def_1 d (prec_cons a la ls) (tcons hd tl).

Lemma pl_tl_length_rec_4 :
 forall (p : preDTA) (p0 : prec_list) (t : term_list),
 liste_reconnait p p0 t -> pl_tl_length_rec_def_1 p p0 t.

Lemma pl_tl_length_rec_5 :
 forall n : nat, pl_tl_length_rec_def_0 n -> pl_tl_length_rec_def_0 (S n).

Lemma pl_tl_length_rec_6 :
 forall (d : preDTA) (pl : prec_list) (tl : term_list) (n : nat),
 pl_tl_length pl n -> liste_reconnait d pl tl -> n = lst_length tl.

Definition pl_compatible (pl0 pl1 : prec_list) : Prop :=
  exists n : nat, pl_tl_length pl0 n /\ pl_tl_length pl1 n.

Definition st_compatible (s0 s1 : state) : Prop :=
  forall (c : ad) (pl0 pl1 : prec_list),
  MapGet prec_list s0 c = Some pl0 ->
  MapGet prec_list s1 c = Some pl1 -> pl_compatible pl0 pl1.

Definition predta_compatible (d0 d1 : preDTA) : Prop :=
  forall s0 s1 : state,
  state_in_dta d0 s0 -> state_in_dta d1 s1 -> st_compatible s0 s1.

Definition dta_compatible (d0 d1 : DTA) : Prop :=
  match d0, d1 with
  | dta p0 a0, dta p1 a1 => predta_compatible p0 p1
  end.

Lemma pl_compatible_sym :
 forall pl0 pl1 : prec_list, pl_compatible pl0 pl1 -> pl_compatible pl1 pl0.

Lemma pl_compatible_empt_r :
 forall p : prec_list, pl_compatible p prec_empty -> p = prec_empty.

Lemma pl_compatible_empt_l :
 forall p : prec_list, pl_compatible prec_empty p -> p = prec_empty.

Lemma pl_compatible_cons_r :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 pl_compatible p (prec_cons a la ls) ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list, p = prec_cons a0 la0 ls0)).

Lemma pl_compatible_cons_l :
 forall (p : prec_list) (a : ad) (la ls : prec_list),
 pl_compatible (prec_cons a la ls) p ->
 exists a0 : ad,
   (exists la0 : prec_list,
      (exists ls0 : prec_list, p = prec_cons a0 la0 ls0)).

Lemma pl_compatible_compat :
 forall p0 p1 : prec_list, pl_compatible p0 p1 -> pl_compat p0 p1.

Definition st_compatible_compat_def (s0 : state) : Prop :=
  forall s1 : state, st_compatible s0 s1 -> mpl_compat s0 s1.

Lemma st_compatible_compat_0 : st_compatible_compat_def (M0 prec_list).

Lemma st_compatible_compat_1 :
 forall (a : ad) (a0 : prec_list),
 st_compatible_compat_def (M1 prec_list a a0).

Lemma st_compatible_compat_2 :
 forall m : Map prec_list,
 st_compatible_compat_def m ->
 forall m0 : Map prec_list,
 st_compatible_compat_def m0 -> st_compatible_compat_def (M2 prec_list m m0).

Lemma st_compatible_compat :
 forall s0 s1 : state, st_compatible s0 s1 -> mpl_compat s0 s1.

Definition predta_compatible_compat_def (d0 : preDTA) : Prop :=
  forall d1 : preDTA, predta_compatible d0 d1 -> dta_compat d0 d1.

Lemma predta_compatible_compat_0 : predta_compatible_compat_def (M0 state).

Lemma predta_compatible_compat_1 :
 forall (a : ad) (a0 : state), predta_compatible_compat_def (M1 state a a0).

Lemma predta_compatible_compat_2 :
 forall m : Map state,
 predta_compatible_compat_def m ->
 forall m0 : Map state,
 predta_compatible_compat_def m0 ->
 predta_compatible_compat_def (M2 state m m0).

Lemma predta_compatible_compat :
 forall d0 d1 : preDTA, predta_compatible d0 d1 -> dta_compat d0 d1.

Lemma dta_compatible_compat :
 forall d0 d1 : DTA, dta_compatible d0 d1 -> DTA_compat d0 d1.

Definition signature : Set := Map nat.

Definition state_correct_wrt_sign (s : state) (sigma : signature) : Prop :=
  forall (a : ad) (p : prec_list),
  MapGet prec_list s a = Some p ->
  exists n : nat, MapGet nat sigma a = Some n /\ pl_tl_length p n.

Definition predta_correct_wrt_sign (d : preDTA) (sigma : signature) : Prop :=
  forall (a : ad) (s : state),
  MapGet state d a = Some s -> state_correct_wrt_sign s sigma.

Definition dta_correct_wrt_sign (d : DTA) (sigma : signature) : Prop :=
  match d with
  | dta d a => predta_correct_wrt_sign d sigma
  end.

Lemma states_correct_wrt_sign_compatibles :
 forall (sigma : signature) (s s' : state),
 state_correct_wrt_sign s sigma ->
 state_correct_wrt_sign s' sigma -> st_compatible s s'.

Lemma predtas_correct_wrt_sign_compatibles :
 forall (sigma : signature) (d d' : preDTA),
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign d' sigma -> predta_compatible d d'.

Lemma dtas_correct_wrt_sign_compatibles :
 forall (sigma : signature) (d d' : DTA),
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign d' sigma -> dta_compatible d d'.

Fixpoint pl_compat_check (p : prec_list) : option nat :=
  match p with
  | prec_empty => Some 0
  | prec_cons a la ls =>
      match ls with
      | prec_empty =>
          match pl_compat_check la with
          | None => None
          | Some n => Some (S n)
          end
      | prec_cons _ _ _ =>
          match pl_compat_check la, pl_compat_check ls with
          | None, _ => None
          | _, None => None
          | Some n, Some m =>
              if beq_nat (S n) m then Some m else None
          end
      end
  end.

Lemma pl_compat_check_correct :
 forall (p : prec_list) (n : nat),
 pl_tl_length p n -> pl_compat_check p = Some n.

Lemma pl_compat_check_complete :
 forall (p : prec_list) (n : nat),
 pl_compat_check p = Some n -> pl_tl_length p n.

Inductive pre_ad : Set :=
  | pre_ad_empty : pre_ad
  | pre_ad_O : pre_ad -> pre_ad
  | pre_ad_I : pre_ad -> pre_ad.

Fixpoint pre_ad_concat (pa : pre_ad) : ad -> ad :=
  fun a : ad =>
  match pa with
  | pre_ad_empty => a
  | pre_ad_O pa' => pre_ad_concat pa' (Ndouble a)
  | pre_ad_I pa' => pre_ad_concat pa' (Ndouble_plus_one a)
  end.

Fixpoint st_compat_check_0 (pa : pre_ad) (sigma : signature) 
 (s : state) {struct s} : bool :=
  match s with
  | M0 => true
  | M1 a p =>
      match pl_compat_check p, MapGet nat sigma (pre_ad_concat pa a) with
      | None, _ => false
      | _, None => false
      | Some n, Some m => beq_nat n m
      end
  | M2 x y =>
      st_compat_check_0 (pre_ad_O pa) sigma x &&
      st_compat_check_0 (pre_ad_I pa) sigma y
  end.

Definition st_compat_check (s : state) (sigma : signature) : bool :=
  st_compat_check_0 pre_ad_empty sigma s.

Fixpoint predta_compat_check (d : preDTA) : signature -> bool :=
  fun sigma : signature =>
  match d with
  | M0 => true
  | M1 a s => st_compat_check s sigma
  | M2 x y => predta_compat_check x sigma && predta_compat_check y sigma
  end.

Definition dta_compat_check (d : DTA) (sigma : signature) : bool :=
  match d with
  | dta p a => predta_compat_check p sigma
  end.

Definition state_correct_wrt_sign_with_offset (s : state) 
  (sigma : signature) (pa : pre_ad) : Prop :=
  forall (a : ad) (p : prec_list),
  MapGet prec_list s a = Some p ->
  exists n : nat,
    MapGet nat sigma (pre_ad_concat pa a) = Some n /\ pl_tl_length p n.

Lemma state_correct_wrt_sign_with_offset_M2 :
 forall (s0 s1 : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset (M2 prec_list s0 s1) sigma pa ->
 state_correct_wrt_sign_with_offset s0 sigma (pre_ad_O pa) /\
 state_correct_wrt_sign_with_offset s1 sigma (pre_ad_I pa).

Lemma predta_correct_wrt_sign_M2 :
 forall (d0 d1 : preDTA) (sigma : signature),
 predta_correct_wrt_sign (M2 state d0 d1) sigma ->
 predta_correct_wrt_sign d0 sigma /\ predta_correct_wrt_sign d1 sigma.

Lemma st_compat_check_0_correct :
 forall (s : state) (sigma : signature) (pa : pre_ad),
 state_correct_wrt_sign_with_offset s sigma pa ->
 st_compat_check_0 pa sigma s = true.

Lemma st_compat_check_0_complete :
 forall (s : state) (sigma : signature) (pa : pre_ad),
 st_compat_check_0 pa sigma s = true ->
 state_correct_wrt_sign_with_offset s sigma pa.

Lemma st_compat_check_correct :
 forall (s : state) (sigma : signature),
 state_correct_wrt_sign s sigma -> st_compat_check s sigma = true.

Lemma st_compat_check_complete :
 forall (s : state) (sigma : signature),
 st_compat_check s sigma = true -> state_correct_wrt_sign s sigma.

Lemma predta_compat_check_correct :
 forall (d : preDTA) (sigma : signature),
 predta_correct_wrt_sign d sigma -> predta_compat_check d sigma = true.

Lemma predta_compat_check_complete :
 forall (d : preDTA) (sigma : signature),
 predta_compat_check d sigma = true -> predta_correct_wrt_sign d sigma.

Lemma dta_compat_check_correct :
 forall (d : DTA) (sigma : signature),
 dta_correct_wrt_sign d sigma -> dta_compat_check d sigma = true.

Lemma dta_compat_check_complete :
 forall (d : DTA) (sigma : signature),
 dta_compat_check d sigma = true -> dta_correct_wrt_sign d sigma. *)
Require Import lattice_fixpoint.
(* lattice_fixpoint:
Require Import Classical_Prop.
Require Import Bool.
Require Import Arith.
Require Import NArith.
Require Import Ndec.
From IntMap Require Import Allmaps.
Require Import bases.

Fixpoint domain_equal (A B : Set) (m0 : Map A) (m1 : Map B) {struct m1} :
 Prop :=
  match m0, m1 with
  | M0, M0 => True
  | M0, M1 _ _ => False
  | M0, M2 _ _ => False
  | M1 _ _, M0 => False
  | M1 a _, M1 b _ => a = b
  | M1 _ _, M2 _ _ => False
  | M2 _ _, M0 => False
  | M2 _ _, M1 _ _ => False
  | M2 a b, M2 c d => domain_equal A B a c /\ domain_equal A B b d
  end.

Lemma domain_equal_mapget :
 forall (A B : Set) (m0 : Map A) (m1 : Map B) (a : ad) (x : A),
 domain_equal A B m0 m1 ->
 MapGet A m0 a = Some x -> exists y : B, MapGet B m1 a = Some y.

Lemma domain_equal_reflexive :
 forall (A : Set) (m : Map A), domain_equal A A m m.

Lemma domain_equal_symmetric :
 forall (A B : Set) (m0 : Map A) (m1 : Map B),
 domain_equal A B m0 m1 -> domain_equal B A m1 m0.

Lemma domain_equal_transitive :
 forall (A0 A1 A2 : Set) (m0 : Map A0) (m1 : Map A1) (m2 : Map A2),
 domain_equal A0 A1 m0 m1 ->
 domain_equal A1 A2 m1 m2 -> domain_equal A0 A2 m0 m2.

Lemma map_sum :
 forall (A : Set) (m : Map A),
 m = M0 A \/
 (exists a : ad, (exists x : A, m = M1 A a x)) \/
 (exists x : Map A, (exists y : Map A, m = M2 A x y)).

Definition mEnsemble (A : Set) := Map A -> Prop.

Definition mRelation (A : Set) := Map A -> Map A -> Prop.

Definition r_symmetric (A : Set) (r : mRelation A) :=
  forall x y : Map A, r x y -> r y x.

Definition r_antisymmetric (A : Set) (r : mRelation A) :=
  forall x y : Map A, r x y -> r y x -> x = y.

Definition r_transitive (A : Set) (r : mRelation A) :=
  forall x y z : Map A, r x y -> r y z -> r x z.

Definition r_reflexive (A : Set) (r : mRelation A) := forall x : Map A, r x x.

Definition r_order (A : Set) (r : mRelation A) :=
  r_reflexive A r /\ r_antisymmetric A r /\ r_transitive A r.

Definition mini (A : Set) (r : mRelation A) (T : mEnsemble A) 
  (e : Map A) := T e /\ (forall x : Map A, T x -> r e x).

Definition maxi (A : Set) (r : mRelation A) (T : mEnsemble A) 
  (e : Map A) := T e /\ (forall x : Map A, T x -> r x e).

Definition mLattice (A : Set) (r : mRelation A) (T : mEnsemble A)
  (e f : Map A) := r_order A r /\ mini A r T e /\ maxi A r T f.

Inductive prechain (A : Set) : Set :=
  | single : Map A -> prechain A
  | concat : prechain A -> Map A -> prechain A.

Lemma prechain_sum :
 forall (A : Set) (p : prechain A),
 (exists x : Map A, p = single A x) \/
 (exists x : Map A, (exists y : prechain A, p = concat A y x)).

Inductive prechain_dom_ok (A : Set) : mEnsemble A -> prechain A -> Prop :=
  | domok_single :
      forall (x : Map A) (T : mEnsemble A),
      T x -> prechain_dom_ok A T (single A x)
  | domok_concat :
      forall (x : Map A) (T : mEnsemble A) (p : prechain A),
      T x -> prechain_dom_ok A T p -> prechain_dom_ok A T (concat A p x).

Fixpoint chain_length (A : Set) (p : prechain A) {struct p} : nat :=
  match p with
  | single x => 1
  | concat x y => S (chain_length A x)
  end.

Definition prechain_last (A : Set) (p : prechain A) : 
  Map A := match p with
           | single x => x
           | concat z x => x
           end.

Inductive prechain_incr (A : Set) : mRelation A -> prechain A -> Prop :=
  | incr_single :
      forall (x : Map A) (r : mRelation A), prechain_incr A r (single A x)
  | incr_concat :
      forall (x : Map A) (r : mRelation A) (p : prechain A),
      r (prechain_last A p) x ->
      prechain_incr A r p -> prechain_incr A r (concat A p x).

Inductive chain (A : Set) :
mEnsemble A -> mRelation A -> prechain A -> Prop :=
  | chain_single :
      forall (x : Map A) (T : mEnsemble A) (r : mRelation A),
      T x -> chain A T r (single A x)
  | chain_concat_s :
      forall (x y : Map A) (T : mEnsemble A) (r : mRelation A),
      T x -> T y -> r x y -> chain A T r (concat A (single A x) y)
  | chain_concat_m :
      forall (x y : Map A) (z : prechain A) (T : mEnsemble A)
        (r : mRelation A),
      T y ->
      r x y ->
      chain A T r (concat A z x) -> chain A T r (concat A (concat A z x) y).

Lemma chain_def_ok :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) (p : prechain A),
 chain A T r p -> prechain_dom_ok A T p.

Lemma chain_incr :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) (p : prechain A),
 chain A T r p -> prechain_incr A r p.

Definition pre_domok_incr_chain_def (A : Set) (p : prechain A) :=
  forall (T : mEnsemble A) (r : mRelation A),
  prechain_dom_ok A T p /\ prechain_incr A r p -> chain A T r p.

Lemma pre_domok_incr_chain_0 :
 forall (A : Set) (m : Map A), pre_domok_incr_chain_def A (single A m).

Lemma pre_domok_incr_chain_1 :
 forall (A : Set) (p : prechain A),
 pre_domok_incr_chain_def A p ->
 forall m : Map A, pre_domok_incr_chain_def A (concat A p m).

Lemma pre_domok_incr_chain_2 :
 forall (A : Set) (p : prechain A), pre_domok_incr_chain_def A p.

Lemma pre_domok_incr_chain :
 forall (A : Set) (p : prechain A) (T : mEnsemble A) (r : mRelation A),
 prechain_dom_ok A T p /\ prechain_incr A r p -> chain A T r p.

Inductive dist_chain (A : Set) : prechain A -> Prop :=
  | dist_single : forall x : Map A, dist_chain A (single A x)
  | dist_concat_s :
      forall x y : Map A, x <> y -> dist_chain A (concat A (single A x) y)
  | dist_concat_m :
      forall (x y : Map A) (z : prechain A),
      x <> y ->
      dist_chain A (concat A z x) -> dist_chain A (concat A (concat A z x) y).

Inductive non_dist_chain (A : Set) : prechain A -> Prop :=
  | non_dist_concat_s :
      forall x : Map A, non_dist_chain A (concat A (single A x) x)
  | non_dist_concat_m_hd :
      forall (x : Map A) (z : prechain A),
      non_dist_chain A (concat A (concat A z x) x)
  | non_dist_concat_m_tl :
      forall (x y : Map A) (z : prechain A),
      non_dist_chain A (concat A z x) ->
      non_dist_chain A (concat A (concat A z x) y).

Definition sas_chain (A : Set) (T : mEnsemble A) (r : mRelation A)
  (p : prechain A) : Prop := chain A T r p /\ dist_chain A p.

Definition dist_compl_def_0 (A : Set) (p : prechain A) : Prop :=
  dist_chain A p \/ non_dist_chain A p.

Lemma dist_compl_0 :
 forall (A : Set) (m : Map A), dist_compl_def_0 A (single A m).

Definition dist_compl_def_1 (A : Set) (p : prechain A) : Prop :=
  dist_compl_def_0 A p -> forall m : Map A, dist_compl_def_0 A (concat A p m).

Lemma dist_compl_1 :
 forall (A : Set) (m : Map A), dist_compl_def_1 A (single A m).

Lemma dist_compl_2 :
 forall (A : Set) (p : prechain A),
 dist_compl_def_1 A p -> forall m : Map A, dist_compl_def_1 A (concat A p m).

Lemma dist_compl_3 :
 forall (A : Set) (p : prechain A),
 dist_compl_def_0 A p -> forall m : Map A, dist_compl_def_0 A (concat A p m).

Lemma dist_compl_4 :
 forall (A : Set) (p : prechain A), dist_chain A p \/ non_dist_chain A p.

Lemma dist_compl_5 :
 forall (A : Set) (x : Map A), ~ dist_chain A (concat A (single A x) x).

Lemma dist_compl_6 :
 forall (A : Set) (x : Map A) (z : prechain A),
 ~ dist_chain A (concat A (concat A z x) x).

Lemma dist_compl_7 :
 forall (A : Set) (x y : Map A) (z : prechain A),
 non_dist_chain A (concat A z x) ->
 ~ dist_chain A (concat A z x) -> ~ dist_chain A (concat A (concat A z x) y).

Lemma dist_compl_8 :
 forall (A : Set) (p : prechain A), non_dist_chain A p -> ~ dist_chain A p.

Lemma dist_compl :
 forall (A : Set) (p : prechain A), ~ dist_chain A p <-> non_dist_chain A p.

Definition bounded_sas_chain (A : Set) (T : mEnsemble A) 
  (r : mRelation A) (n : nat) : Prop :=
  forall p : prechain A, sas_chain A T r p -> chain_length A p <= n.

Definition def_ok_app (A : Set) (T : mEnsemble A) (f : Map A -> Map A) :
  Prop := forall x : Map A, T x -> T (f x).

Definition increasing_app (A : Set) (r : mRelation A) 
  (f : Map A -> Map A) : Prop := forall x y : Map A, r x y -> r (f x) (f y).

Definition fix_point (A : Set) (T : mEnsemble A) (f : Map A -> Map A)
  (x : Map A) : Prop := T x /\ f x = x.

Definition inf_fix_points (A : Set) (T : mEnsemble A) 
  (r : mRelation A) (f : Map A -> Map A) (x : Map A) : Prop :=
  forall y : Map A, fix_point A T f y -> r x y.

Definition lower_fix_point (A : Set) (T : mEnsemble A) 
  (r : mRelation A) (f : Map A -> Map A) (x : Map A) : Prop :=
  fix_point A T f x /\ inf_fix_points A T r f x.

Fixpoint iteres (A : Set) (f : Map A -> Map A) (x : Map A) 
 (n : nat) {struct n} : prechain A :=
  match n with
  | O => single A x
  | S p =>
      match iteres A f x p with
      | single y => concat A (single A y) (f y)
      | concat z y => concat A (concat A z y) (f y)
      end
  end.

Fixpoint power (A : Set) (f : A -> A) (x : A) (n : nat) {struct n} : A :=
  match n with
  | O => x
  | S n => f (power A f x n)
  end.

Inductive MapFlag (A : Set) : Set :=
  | flag_true : Map A -> MapFlag A
  | flag_false : Map A -> MapFlag A.

Lemma MapFlag_sum :
 forall (A : Set) (f : MapFlag A),
 exists x : Map A, f = flag_true A x \/ f = flag_false A x.

Fixpoint lazy_power_aux (A : Set) (egalite : Map A -> Map A -> bool)
 (f : Map A -> Map A) (x : Map A) (n : nat) {struct n} : 
 MapFlag A :=
  match n with
  | O => flag_false A x
  | S p =>
      match lazy_power_aux A egalite f x p with
      | flag_true y => flag_true A y
      | flag_false y =>
          match f y with
          | z => if egalite y z then flag_true A y else flag_false A z
          end
      end
  end.

Definition lazy_power (A : Set) (egalite : Map A -> Map A -> bool)
  (f : Map A -> Map A) (x : Map A) (n : nat) : Map A :=
  match lazy_power_aux A egalite f x n with
  | flag_false z => z
  | flag_true z => z
  end.
 
Lemma lazy_power_eg_power_0 :
 forall (A : Set) (egalite : Map A -> Map A -> bool) 
   (f : Map A -> Map A) (x : Map A) (n : nat),
 (forall a b : Map A, egalite a b = true <-> a = b) ->
 forall z : Map A,
 (lazy_power_aux A egalite f x n = flag_true A z ->
  z = power (Map A) f x n /\ z = f z) /\
 (lazy_power_aux A egalite f x n = flag_false A z -> z = power (Map A) f x n).

Lemma lazy_power_eg_power :
 forall (A : Set) (egalite : Map A -> Map A -> bool) 
   (f : Map A -> Map A) (x : Map A) (n : nat),
 (forall a b : Map A, egalite a b = true <-> a = b) ->
 lazy_power A egalite f x n = power (Map A) f x n.

Fixpoint iteres_0 (A : Set) (f : Map A -> Map A) (x : Map A) 
 (n : nat) {struct n} : prechain A :=
  match n with
  | O => single A x
  | S p =>
      match iteres_0 A f x p with
      | single y => concat A (single A y) (power (Map A) f x (S p))
      | concat z y => concat A (concat A z y) (power (Map A) f x (S p))
      end
  end.

Lemma iteres_eq_0 :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 prechain_last A (iteres A f x n) = power (Map A) f x n.

Lemma iteres_eq :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 iteres A f x n = iteres_0 A f x n.

Lemma iteres_def_ok :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (n k : nat),
 def_ok_app A T f -> T (power (Map A) f x n) -> T (power (Map A) f x (n + k)).

Lemma power_def_ok :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (n : nat), def_ok_app A T f -> T x -> T (power (Map A) f x n).

Definition iteres_ult_const_def_0 (A : Set) (p : prechain A) : Prop :=
  forall (f : Map A -> Map A) (x : Map A) (n : nat),
  p = iteres A f x n ->
  non_dist_chain A p ->
  exists q : nat, S q <= n /\ power (Map A) f x q = power (Map A) f x (S q).

Lemma iteres_ult_const_0 :
 forall (A : Set) (x : Map A),
 iteres_ult_const_def_0 A (concat A (single A x) x).

Lemma iteres_ult_const_1 :
 forall (A : Set) (x : Map A) (z : prechain A),
 iteres_ult_const_def_0 A (concat A (concat A z x) x).

Lemma iteres_ult_const_2 :
 forall (A : Set) (x y : Map A) (z : prechain A),
 non_dist_chain A (concat A z x) ->
 iteres_ult_const_def_0 A (concat A z x) ->
 iteres_ult_const_def_0 A (concat A (concat A z x) y).

Lemma iteres_ult_const_3 :
 forall (A : Set) (p : prechain A),
 non_dist_chain A p -> iteres_ult_const_def_0 A p.

Lemma iteres_ult_const_4 :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 non_dist_chain A (iteres A f x n) ->
 exists p : nat, S p <= n /\ power (Map A) f x p = power (Map A) f x (S p).

Lemma iteres_last :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) 
   (n : nat) (y : prechain A) (z : Map A),
 iteres A f x n = concat A y z -> z = f (prechain_last A y).

Lemma iteres_dom_ok :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (n : nat),
 T x -> def_ok_app A T f -> prechain_dom_ok A T (iteres A f x n).

Lemma iteres_incr :
 forall (A : Set) (r : mRelation A) (f : Map A -> Map A) 
   (x : Map A) (n : nat),
 r x (f x) -> increasing_app A r f -> prechain_incr A r (iteres A f x n).

Lemma iteres_increasing_chain :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f -> r x (f x) -> chain A T r (iteres A f x n).

Lemma iteres_length :
 forall (A : Set) (f : Map A -> Map A) (x : Map A) (n : nat),
 chain_length A (iteres A f x n) = S n.

Lemma iteres_non_sas_chain :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n m : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f ->
 r x (f x) ->
 bounded_sas_chain A T r m ->
 m <= n -> chain A T r (iteres A f x n) /\ ~ dist_chain A (iteres A f x n).

Lemma iteres_non_sas_chain_fp_0 :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n m : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f ->
 r x (f x) ->
 bounded_sas_chain A T r m ->
 m <= n ->
 exists p : nat, S p <= n /\ power (Map A) f x p = power (Map A) f x (S p).

Lemma iteres_non_sas_chain_fp_1 :
 forall (A : Set) (T : mEnsemble A) (f : Map A -> Map A) 
   (x : Map A) (k p : nat),
 def_ok_app A T f ->
 fix_point A T f (power (Map A) f x p) ->
 fix_point A T f (power (Map A) f x (p + k)).

Lemma iteres_non_sas_chain_fp_2 :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (x : Map A) (n m : nat),
 T x ->
 def_ok_app A T f ->
 increasing_app A r f ->
 r x (f x) ->
 bounded_sas_chain A T r m -> m <= n -> fix_point A T f (power (Map A) f x n).

Lemma iteres_inf_fps :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (e x : Map A) (n : nat),
 mini A r T e ->
 fix_point A T f x -> increasing_app A r f -> r (power (Map A) f e n) x.

Lemma iteres_lower_fix_point :
 forall (A : Set) (T : mEnsemble A) (r : mRelation A) 
   (f : Map A -> Map A) (e : Map A) (n m : nat),
 mini A r T e ->
 def_ok_app A T f ->
 increasing_app A r f ->
 bounded_sas_chain A T r m ->
 m <= n -> lower_fix_point A T r f (power (Map A) f e n).

Definition leb (b0 b1 : bool) : Prop :=
  match b0, b1 with
  | false, false => True
  | false, true => True
  | true, false => False
  | true, true => True
  end.

Lemma leb_reflexive : forall b : bool, leb b b.

Lemma leb_antisymmetric : forall b c : bool, leb b c -> leb c b -> b = c.

Lemma leb_transitive : forall a b c : bool, leb a b -> leb b c -> leb a c.

Fixpoint lem (m0 m1 : Map bool) {struct m1} : Prop :=
  match m0, m1 with
  | M0, M0 => True
  | M0, M1 _ _ => False
  | M0, M2 _ _ => False
  | M1 _ _, M0 => False
  | M1 a b, M1 a' b' => if Neqb a a' then leb b b' else False
  | M1 _ _, M2 _ _ => False
  | M2 _ _, M0 => False
  | M2 _ _, M1 _ _ => False
  | M2 a b, M2 c d => lem a c /\ lem b d
  end.

Lemma lem_reflexive : r_reflexive bool lem.

Lemma lem_antisymmetric : r_antisymmetric bool lem.

Lemma lem_transitive : r_transitive bool lem.

Lemma lem_order : r_order bool lem.

Definition ensemble_base (A : Set) (m : Map A) (x : Map bool) :=
  domain_equal A bool m x.

Fixpoint map_fill (A : Set) (m : Map A) {struct m} : 
 bool -> Map bool :=
  fun b : bool =>
  match m with
  | M0 => M0 bool
  | M1 a _ => M1 bool a b
  | M2 m0 m1 => M2 bool (map_fill A m0 b) (map_fill A m1 b)
  end.

Definition map_mini (A : Set) (m : Map A) : Map bool := map_fill A m false.

Definition map_maxi (A : Set) (m : Map A) : Map bool := map_fill A m true.

Lemma map_mini_appartient :
 forall (A : Set) (x : Map A), ensemble_base A x (map_mini A x).

Lemma map_maxi_appartient :
 forall (A : Set) (x : Map A), ensemble_base A x (map_maxi A x).

Lemma map_mini_mini :
 forall (A : Set) (x : Map A),
 mini bool lem (ensemble_base A x) (map_mini A x).

Lemma map_maxi_maxi :
 forall (A : Set) (x : Map A),
 maxi bool lem (ensemble_base A x) (map_maxi A x).

Lemma map_mini_mapget_false :
 forall (A : Set) (x : Map A) (a : ad) (b : bool),
 MapGet bool (map_mini A x) a = Some b -> b = false.

Lemma map_mini_mapget_true :
 forall (A : Set) (x : Map A) (a : ad),
 MapGet bool (map_mini A x) a = Some true -> False.

Lemma mlattice :
 forall (A : Set) (x : Map A),
 mLattice bool lem (ensemble_base A x) (map_mini A x) (map_maxi A x).

Definition lattice_bounded_def_0 (p : prechain bool) : Prop :=
  forall (A : Set) (m0 m1 : Map A),
  sas_chain bool (ensemble_base A (M2 A m0 m1)) lem p ->
  exists p0 : prechain bool,
    (exists p1 : prechain bool,
       sas_chain bool (ensemble_base A m0) lem p0 /\
       sas_chain bool (ensemble_base A m1) lem p1 /\
       lem (M2 bool (prechain_last bool p0) (prechain_last bool p1))
         (prechain_last bool p) /\
       chain_length bool p0 + chain_length bool p1 = S (chain_length bool p)).

Lemma lattice_bounded_0 :
 forall m : Map bool, lattice_bounded_def_0 (single bool m).

Definition lattice_bounded_def_1 (p : prechain bool) : Prop :=
  lattice_bounded_def_0 p ->
  forall m : Map bool, lattice_bounded_def_0 (concat bool p m).

Lemma lattice_bounded_1 :
 forall m : Map bool, lattice_bounded_def_1 (single bool m).

Lemma lattice_bounded_2 :
 forall p : prechain bool,
 lattice_bounded_def_1 p ->
 forall m : Map bool, lattice_bounded_def_1 (concat bool p m).

Lemma lattice_bounded_3 :
 forall p : prechain bool,
 lattice_bounded_def_0 p ->
 forall m : Map bool, lattice_bounded_def_0 (concat bool p m).

Lemma lattice_bounded_4 : forall p : prechain bool, lattice_bounded_def_0 p.

Lemma lattice_bounded_5 :
 forall (p : prechain bool) (A : Set) (m0 m1 : Map A),
 sas_chain bool (ensemble_base A (M2 A m0 m1)) lem p ->
 exists p0 : prechain bool,
   (exists p1 : prechain bool,
      sas_chain bool (ensemble_base A m0) lem p0 /\
      sas_chain bool (ensemble_base A m1) lem p1 /\
      lem (M2 bool (prechain_last bool p0) (prechain_last bool p1))
        (prechain_last bool p) /\
      chain_length bool p0 + chain_length bool p1 = S (chain_length bool p)).

Definition lattice_bounded_def_2 (A : Set) (m : Map A) : Prop :=
  forall p : prechain bool,
  sas_chain bool (ensemble_base A m) lem p ->
  chain_length bool p <= S (MapCard A m).

Lemma lattice_bounded_6 : forall A : Set, lattice_bounded_def_2 A (M0 A).

Lemma lattice_bounded_7 :
 forall (A : Set) (a : ad) (a0 : A), lattice_bounded_def_2 A (M1 A a a0).

Lemma lattice_bounded_8 :
 forall (A : Set) (m : Map A),
 lattice_bounded_def_2 A m ->
 forall m0 : Map A,
 lattice_bounded_def_2 A m0 -> lattice_bounded_def_2 A (M2 A m m0).

Lemma lattice_bounded_9 :
 forall (A : Set) (m : Map A), lattice_bounded_def_2 A m.

Lemma lattice_bounded_10 :
 forall (A : Set) (m : Map A) (p : prechain bool),
 sas_chain bool (ensemble_base A m) lem p ->
 chain_length bool p <= S (MapCard A m).

Lemma lattice_bounded :
 forall (A : Set) (x : Map A),
 bounded_sas_chain bool (ensemble_base A x) lem (S (MapCard A x)).

Definition eq_bool (b0 b1 : bool) : bool :=
  match b0, b1 with
  | false, false => true
  | false, true => false
  | true, false => false
  | true, true => true
  end.

Lemma eq_bool_equal : forall b0 b1 : bool, eq_bool b0 b1 = true -> b0 = b1.

Lemma equal_eq_bool : forall b : bool, eq_bool b b = true.

Fixpoint eqm_bool (x y : Map bool) {struct y} : bool :=
  match x, y with
  | M0, M0 => true
  | M0, M1 _ _ => false
  | M0, M2 _ _ => false
  | M1 _ _, M0 => false
  | M1 a b, M1 c d => Neqb a c && eq_bool b d
  | M1 _ _, M2 _ _ => false
  | M2 _ _, M0 => false
  | M2 _ _, M1 _ _ => false
  | M2 a b, M2 c d => eqm_bool a c && eqm_bool b d
  end.

Lemma eqm_bool_equal : forall x y : Map bool, eqm_bool x y = true -> x = y.

Lemma equal_eqm_bool : forall x : Map bool, eqm_bool x x = true.

Lemma lem_get_leb :
 forall (m0 m1 : Map bool) (a : ad) (b0 b1 : bool),
 lem m0 m1 ->
 MapGet bool m0 a = Some b0 ->
 MapGet bool m1 a = Some b1 -> leb b0 b1.

Lemma lem_domain_equal :
 forall m0 m1 : Map bool, lem m0 m1 -> domain_equal bool bool m0 m1.

Lemma andb_inc_r :
 forall b b0 b1 : bool, leb b0 b1 -> leb (b && b0) (b && b1).

Lemma andb_inc_l :
 forall b b0 b1 : bool, leb b0 b1 -> leb (b0 && b) (b1 && b).

Lemma orb_inc_r : forall b b0 b1 : bool, leb b0 b1 -> leb (b || b0) (b || b1).

Lemma orb_inc_l : forall b b0 b1 : bool, leb b0 b1 -> leb (b0 || b) (b1 || b).

Lemma andb_incr :
 forall b0 b1 b2 b3 : bool,
 leb b0 b1 -> leb b2 b3 -> leb (b0 && b2) (b1 && b3).

Lemma orb_incr :
 forall b0 b1 b2 b3 : bool,
 leb b0 b1 -> leb b2 b3 -> leb (b0 || b2) (b1 || b3). *)
Require Import coacc_test.
(* coacc_test:
Require Import Bool.
Require Import Arith.
Require Import NArith Ndec.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import refcorrect.
Require Import lattice_fixpoint.

Inductive coacc : preDTA -> ad -> ad -> Prop :=
  | coacc_id :
      forall (d : preDTA) (a : ad) (s : state),
      MapGet state d a = Some s -> coacc d a a
  | coacc_nxt :
      forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
        (pl : prec_list) (c : ad),
      MapGet state d a2 = Some s2 ->
      MapGet state d a1 = Some s1 ->
      MapGet prec_list s1 c = Some pl ->
      prec_occur pl a2 -> coacc d a0 a1 -> coacc d a0 a2.

Definition coacc_transitive_def (d : preDTA) (a0 a1 : ad) : Prop :=
  forall a2 : ad, coacc d a0 a1 -> coacc d a2 a0 -> coacc d a2 a1.

Lemma coacc_transitive_0 :
 forall (d : preDTA) (a : ad) (s : state),
 MapGet state d a = Some s -> coacc_transitive_def d a a.

Lemma coacc_transitive_1 :
 forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
   (pl : prec_list) (c : ad),
 MapGet state d a2 = Some s2 ->
 MapGet state d a1 = Some s1 ->
 MapGet prec_list s1 c = Some pl ->
 prec_occur pl a2 ->
 coacc d a0 a1 ->
 coacc_transitive_def d a0 a1 -> coacc_transitive_def d a0 a2.

Lemma coacc_transitive :
 forall (d : preDTA) (a0 a1 a2 : ad),
 coacc d a0 a1 -> coacc d a1 a2 -> coacc d a0 a2.

Fixpoint map_replace (A : Set) (m : Map A) {struct m} : 
 ad -> A -> Map A :=
  fun (a : ad) (x : A) =>
  match m with
  | M0 => M0 A
  | M1 b y => if Neqb a b then M1 A b x else M1 A b y
  | M2 m n =>
      match a with
      | N0 => M2 A (map_replace A m N0 x) n
      | Npos q =>
          match q with
          | xH => M2 A m (map_replace A n N0 x)
          | xO p => M2 A (map_replace A m (Npos p) x) n
          | xI p => M2 A m (map_replace A n (Npos p) x)
          end
      end
  end.

Fixpoint map_or (m0 m1 : Map bool) {struct m1} : Map bool :=
  match m0, m1 with
  | M0, _ => M0 bool
  | _, M0 => M0 bool
  | M1 a0 b0, M1 a1 b1 =>
      if Neqb a0 a1 then M1 bool a0 (b0 || b1) else M0 bool
  | M1 _ _, M2 _ _ => M0 bool
  | M2 _ _, M1 _ _ => M0 bool
  | M2 x0 y0, M2 x1 y1 => M2 bool (map_or x0 x1) (map_or y0 y1)
  end.

Fixpoint pl_coacc (d : preDTA) (pl : prec_list) {struct pl} : 
 Map bool :=
  match pl with
  | prec_empty => map_mini state d
  | prec_cons a la ls =>
      map_replace bool (map_or (pl_coacc d la) (pl_coacc d ls)) a true
  end.

Fixpoint st_coacc (d : preDTA) (s : state) {struct s} : 
 Map bool :=
  match s with
  | M0 => map_mini state d
  | M1 a pl => pl_coacc d pl
  | M2 x y => map_or (st_coacc d x) (st_coacc d y)
  end.

Fixpoint predta_coacc_0 (d d' : preDTA) {struct d'} : 
 Map bool -> Map bool :=
  fun m : Map bool =>
  match d', m with
  | M0, M0 => map_mini state d
  | M1 a s, M1 a' b =>
      if Neqb a a' && b then st_coacc d s else map_mini state d
  | M2 x y, M2 z t => map_or (predta_coacc_0 d x z) (predta_coacc_0 d y t)
  | _, _ => map_mini state d
  end.

Definition predta_coacc (d : preDTA) (a : ad) (m : Map bool) : 
  Map bool := map_replace bool (predta_coacc_0 d d m) a true.

Definition predta_coacc_states (d : preDTA) (a : ad) : 
  Map bool :=
  power (Map bool) (predta_coacc d a) (map_mini state d)
    (S (MapCard state d)).

Definition predta_coacc_states_0 (d : preDTA) (a : ad) : 
  Map bool :=
  lazy_power bool eqm_bool (predta_coacc d a) (map_mini state d)
    (S (MapCard state d)).

Lemma map_or_mapget_true_l :
 forall (m0 m1 : Map bool) (a : ad),
 domain_equal bool bool m0 m1 ->
 MapGet bool m0 a = Some true ->
 MapGet bool (map_or m0 m1) a = Some true.

Lemma map_or_mapget_true_ld :
 forall (d : preDTA) (m0 m1 : Map bool) (a : ad),
 ensemble_base state d m0 ->
 ensemble_base state d m1 ->
 MapGet bool m0 a = Some true ->
 MapGet bool (map_or m0 m1) a = Some true.

Lemma map_or_mapget_true_r :
 forall (m0 m1 : Map bool) (a : ad),
 domain_equal bool bool m0 m1 ->
 MapGet bool m0 a = Some true ->
 MapGet bool (map_or m1 m0) a = Some true.

Lemma map_or_mapget_true_rd :
 forall (d : preDTA) (m0 m1 : Map bool) (a : ad),
 ensemble_base state d m0 ->
 ensemble_base state d m1 ->
 MapGet bool m1 a = Some true ->
 MapGet bool (map_or m0 m1) a = Some true.

Lemma map_or_mapget_true_inv :
 forall (m0 m1 : Map bool) (a : ad),
 MapGet bool (map_or m0 m1) a = Some true ->
 MapGet bool m0 a = Some true \/ MapGet bool m1 a = Some true.

Lemma map_replace_mapget_ins_true_0 :
 forall (m : Map bool) (a : ad) (b : bool),
 MapGet bool m a = Some b ->
 MapGet bool (map_replace bool m a true) a = Some true.

Lemma map_replace_mapget_ins_true_1 :
 forall (m : Map bool) (a a' : ad),
 MapGet bool m a = Some true ->
 MapGet bool (map_replace bool m a' true) a = Some true.

Lemma map_replace_mapget_true_inv :
 forall (m : Map bool) (a b : ad),
 MapGet bool (map_replace bool m a true) b = Some true ->
 b = a \/ MapGet bool m b = Some true.

Lemma map_or_def_ok :
 forall m0 m1 : Map bool,
 domain_equal bool bool m0 m1 -> domain_equal bool bool m0 (map_or m0 m1).

Lemma map_or_def_ok_d :
 forall (d : preDTA) (m0 m1 : Map bool),
 ensemble_base state d m0 ->
 ensemble_base state d m1 -> ensemble_base state d (map_or m0 m1).

Lemma map_replace_def_ok :
 forall (A : Set) (m : Map A) (a : ad) (x : A),
 domain_equal A A m (map_replace A m a x).

Lemma map_replace_def_ok_d :
 forall (d : preDTA) (m : Map bool) (a : ad) (x : bool),
 ensemble_base state d m -> ensemble_base state d (map_replace bool m a x).

Lemma pl_coacc_def_ok :
 forall (d : preDTA) (pl : prec_list), ensemble_base state d (pl_coacc d pl).

Lemma st_coacc_def_ok :
 forall (d : preDTA) (s : state), ensemble_base state d (st_coacc d s).

Lemma predta_coacc_0_def_ok :
 forall (d d' : preDTA) (m : Map bool),
 ensemble_base state d (predta_coacc_0 d d' m).

Lemma predta_coacc_def_ok :
 forall (d : preDTA) (a : ad) (m : Map bool),
 ensemble_base state d (predta_coacc d a m).

Definition lemd (d : preDTA) : mRelation bool :=
  fun m0 m1 : Map bool =>
  ensemble_base state d m0 /\ ensemble_base state d m1 /\ lem m0 m1.

Lemma lemd_reflexive :
 forall (d : preDTA) (m : Map bool), ensemble_base state d m -> lemd d m m.

Lemma lemd_antisymmetric :
 forall (d : preDTA) (m0 m1 : Map bool),
 lemd d m0 m1 -> lemd d m1 m0 -> m0 = m1.

Lemma lemd_transitive :
 forall (d : preDTA) (m0 m1 m2 : Map bool),
 lemd d m0 m1 -> lemd d m1 m2 -> lemd d m0 m2.

Lemma map_or_inc_ld :
 forall (d : preDTA) (m m0 m1 : Map bool),
 ensemble_base state d m ->
 lemd d m0 m1 -> lemd d (map_or m0 m) (map_or m1 m).

Lemma map_or_inc_rd :
 forall (d : preDTA) (m m0 m1 : Map bool),
 ensemble_base state d m ->
 lemd d m0 m1 -> lemd d (map_or m m0) (map_or m m1).

Lemma map_or_inc_d :
 forall (d : preDTA) (m0 m1 m2 m3 : Map bool),
 lemd d m0 m1 -> lemd d m2 m3 -> lemd d (map_or m0 m2) (map_or m1 m3).

Lemma predta_coacc_0_incr :
 forall (d d' : preDTA) (m0 m1 : Map bool),
 lemd d' m0 m1 -> lemd d (predta_coacc_0 d d' m0) (predta_coacc_0 d d' m1).

Lemma map_replace_inc :
 forall (m0 m1 : Map bool) (a : ad) (b : bool),
 lem m0 m1 -> lem (map_replace bool m0 a b) (map_replace bool m1 a b).

Lemma map_replace_inc_d :
 forall (d : preDTA) (m0 m1 : Map bool) (a : ad) (b : bool),
 lemd d m0 m1 -> lemd d (map_replace bool m0 a b) (map_replace bool m1 a b).

Lemma predta_coacc_increasing :
 forall (d : preDTA) (a : ad),
 increasing_app bool (lemd d) (predta_coacc d a).

Definition lattice_lemd_bounded_0_def (p : prechain bool) : Prop :=
  forall d : preDTA,
  chain bool (ensemble_base state d) (lemd d) p ->
  chain bool (ensemble_base state d) lem p.

Lemma lattice_lemd_bounded_0 :
 forall m : Map bool, lattice_lemd_bounded_0_def (single bool m).

Definition lattice_lemd_bounded_1_def (p : prechain bool) : Prop :=
  lattice_lemd_bounded_0_def p ->
  forall m : Map bool, lattice_lemd_bounded_0_def (concat bool p m).

Lemma lattice_lemd_bounded_1 :
 forall m : Map bool, lattice_lemd_bounded_1_def (single bool m).

Lemma lattice_lemd_bounded_2 :
 forall p : prechain bool,
 lattice_lemd_bounded_1_def p ->
 forall m : Map bool, lattice_lemd_bounded_1_def (concat bool p m).

Lemma lattice_lemd_bounded_3 :
 forall (p : prechain bool) (d : preDTA),
 chain bool (ensemble_base state d) (lemd d) p ->
 chain bool (ensemble_base state d) lem p.

Lemma lattice_lemd_bounded :
 forall (p : prechain bool) (d : preDTA),
 sas_chain bool (ensemble_base state d) (lemd d) p ->
 sas_chain bool (ensemble_base state d) lem p.

Lemma lattice_bounded :
 forall d : preDTA,
 bounded_sas_chain bool (ensemble_base state d) (lemd d)
   (S (MapCard state d)).

Lemma pl_coacc_contain_coacc_ads :
 forall (d : preDTA) (p : prec_list) (a : ad),
 prec_occur p a ->
 prec_list_ref_ok p d -> MapGet bool (pl_coacc d p) a = Some true.

Lemma st_coacc_contain_coacc_ads :
 forall (d : preDTA) (s : state) (c : ad) (p : prec_list) (a : ad),
 state_ref_ok s d ->
 MapGet prec_list s c = Some p ->
 prec_occur p a -> MapGet bool (st_coacc d s) a = Some true.

Lemma predta_coacc_0_contain_coacc_ads :
 forall (d d' : preDTA) (a : ad) (s : state) (c : ad) 
   (p : prec_list) (b : ad) (m : Map bool),
 preDTA_ref_ok_distinct d' d ->
 MapGet state d' a = Some s ->
 MapGet prec_list s c = Some p ->
 prec_occur p b ->
 ensemble_base state d' m ->
 MapGet bool m a = Some true ->
 MapGet bool (predta_coacc_0 d d' m) b = Some true.

Lemma predta_coacc_contain_coacc_ads_0 :
 forall (d : preDTA) (a0 a : ad) (s : state) (c : ad) 
   (p : prec_list) (b : ad) (m : Map bool),
 preDTA_ref_ok d ->
 MapGet state d a = Some s ->
 MapGet prec_list s c = Some p ->
 prec_occur p b ->
 ensemble_base state d m ->
 MapGet bool m a = Some true ->
 MapGet bool (predta_coacc d a0 m) b = Some true.

Definition predta_coacc_contain_coacc_ads_def_0 (d : preDTA) 
  (a0 a1 : ad) : Prop :=
  coacc d a0 a1 ->
  preDTA_ref_ok d ->
  exists n : nat,
    MapGet bool (power (Map bool) (predta_coacc d a0) (map_mini state d) n)
      a1 = Some true.

Lemma predta_coacc_contain_coacc_ads_1 :
 forall (d : preDTA) (a : ad) (s : state),
 MapGet state d a = Some s ->
 predta_coacc_contain_coacc_ads_def_0 d a a.

Lemma predta_coacc_contain_coacc_ads_2 :
 forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
   (pl : prec_list) (c : ad),
 MapGet state d a2 = Some s2 ->
 MapGet state d a1 = Some s1 ->
 MapGet prec_list s1 c = Some pl ->
 prec_occur pl a2 ->
 coacc d a0 a1 ->
 predta_coacc_contain_coacc_ads_def_0 d a0 a1 ->
 predta_coacc_contain_coacc_ads_def_0 d a0 a2.

Lemma predta_coacc_contain_coacc_ads_3 :
 forall (d : preDTA) (a0 a1 : ad),
 coacc d a0 a1 ->
 preDTA_ref_ok d ->
 exists n : nat,
   MapGet bool (power (Map bool) (predta_coacc d a0) (map_mini state d) n) a1 =
   Some true.

Lemma pl_coacc_rev :
 forall (d : preDTA) (pl : prec_list) (a : ad),
 MapGet bool (pl_coacc d pl) a = Some true -> prec_occur pl a.

Lemma st_coacc_rev :
 forall (d : preDTA) (s : state) (a : ad),
 MapGet bool (st_coacc d s) a = Some true ->
 exists c : ad,
   (exists p : prec_list,
      MapGet prec_list s c = Some p /\ prec_occur p a).

Lemma predta_coacc_0_rev :
 forall (d d' : preDTA) (b : ad) (m : Map bool),
 MapGet bool (predta_coacc_0 d d' m) b = Some true ->
 ensemble_base state d' m ->
 exists a : ad,
   (exists s : state,
      (exists c : ad,
         (exists p : prec_list,
            MapGet state d' a = Some s /\
            MapGet prec_list s c = Some p /\
            prec_occur p b /\ MapGet bool m a = Some true))).

Lemma predta_coacc_rev :
 forall (d : preDTA) (a : ad) (m : Map bool) (b : ad),
 MapGet bool (predta_coacc d a m) b = Some true ->
 ensemble_base state d m ->
 (exists a0 : ad,
    (exists s : state,
       (exists c : ad,
          (exists p : prec_list,
             MapGet state d a0 = Some s /\
             MapGet prec_list s c = Some p /\
             prec_occur p b /\ MapGet bool m a0 = Some true)))) \/ 
 a = b.

Lemma predta_coacc_reverse :
 forall (n : nat) (d : preDTA) (a b : ad),
 MapGet bool (power (Map bool) (predta_coacc d a) (map_mini state d) n) b =
 Some true -> coacc d a b.

Lemma predta_coacc_fix_0 :
 forall (d : preDTA) (a : ad),
 lower_fix_point bool (ensemble_base state d) (lemd d) 
   (predta_coacc d a) (predta_coacc_states d a).

Lemma predta_coacc_fix_1 :
 forall (d : preDTA) (a a0 : ad) (n : nat),
 MapGet bool (power (Map bool) (predta_coacc d a) (map_mini state d) n) a0 =
 Some true -> MapGet bool (predta_coacc_states d a) a0 = Some true.

Lemma predta_coacc_fix_2 :
 forall (d : preDTA) (a a0 : ad),
 MapGet bool (predta_coacc_states d a) a0 = Some true ->
 exists n : nat,
   MapGet bool (power (Map bool) (predta_coacc d a) (map_mini state d) n) a0 =
   Some true.

Lemma predta_coacc_fix :
 forall (d : preDTA) (a a0 : ad),
 preDTA_ref_ok d ->
 (MapGet bool (predta_coacc_states d a) a0 = Some true <-> coacc d a a0).

Lemma predta_coacc_0_fix :
 forall (d : preDTA) (a a0 : ad),
 preDTA_ref_ok d ->
 (MapGet bool (predta_coacc_states_0 d a) a0 = Some true <->
  coacc d a a0). *)
Require Import non_coacc_kill.
(* non_coacc_kill:
Require Import Bool.
Require Import Arith.
Require Import NArith Ndec.
Require Import ZArith.
From IntMap Require Import Allmaps.
Require Import bases.
Require Import defs.
Require Import semantics.
Require Import refcorrect.
Require Import lattice_fixpoint.
Require Import coacc_test.

Fixpoint non_coacc_kill (d : preDTA) (m : Map bool) {struct m} : preDTA :=
  match d, m with
  | M0, M0 => M0 state
  | M1 a s, M1 a' b => if Neqb a a' && b then M1 state a s else M0 state
  | M2 x y, M2 z t => M2 state (non_coacc_kill x z) (non_coacc_kill y t)
  | _, _ => M0 state
  end.

Definition predta_kill_non_coacc (d : preDTA) (a : ad) : preDTA :=
  non_coacc_kill d (predta_coacc_states d a).

Definition dta_kill_non_coacc (d : DTA) : DTA :=
  match d with
  | dta p a => dta (predta_kill_non_coacc p a) a
  end.

Definition predta_kill_non_coacc_lazy (d : preDTA) 
  (a : ad) : preDTA := non_coacc_kill d (predta_coacc_states_0 d a).

Definition dta_kill_non_coacc_lazy (d : DTA) : DTA :=
  match d with
  | dta p a => dta (predta_kill_non_coacc_lazy p a) a
  end.

Lemma kill_non_coacc_lazy_eq_kill_non_coacc :
 forall d : DTA, dta_kill_non_coacc_lazy d = dta_kill_non_coacc d.

Lemma non_coacc_kill_0 :
 forall (d : preDTA) (a : ad) (s : state) (m : Map bool),
 ensemble_base state d m ->
 MapGet state d a = Some s ->
 MapGet bool m a = Some true ->
 MapGet state (non_coacc_kill d m) a = Some s.

Lemma non_coacc_kill_1 :
 forall (d : preDTA) (a : ad) (s : state) (m : Map bool),
 ensemble_base state d m ->
 MapGet state (non_coacc_kill d m) a = Some s ->
 MapGet state d a = Some s /\ MapGet bool m a = Some true.

Lemma predta_kill_non_coacc_0 :
 forall (d : preDTA) (a a0 : ad) (s : state),
 preDTA_ref_ok d ->
 (MapGet state d a0 = Some s /\ coacc d a a0 <->
  MapGet state (predta_kill_non_coacc d a) a0 = Some s).

Definition predta_kill_non_coacc_def_0 (d : preDTA) 
  (a0 a1 : ad) : Prop :=
  preDTA_ref_ok d ->
  coacc d a0 a1 -> coacc (predta_kill_non_coacc d a0) a0 a1.

Lemma predta_kill_non_coacc_1 :
 forall (d : preDTA) (a : ad) (s : state),
 MapGet state d a = Some s -> predta_kill_non_coacc_def_0 d a a.

Lemma predta_kill_non_coacc_2 :
 forall (d : preDTA) (a0 a1 a2 : ad) (s1 s2 : state) 
   (pl : prec_list) (c : ad),
 MapGet state d a2 = Some s2 ->
 MapGet state d a1 = Some s1 ->
 MapGet prec_list s1 c = Some pl ->
 prec_occur pl a2 ->
 coacc d a0 a1 ->
 predta_kill_non_coacc_def_0 d a0 a1 -> predta_kill_non_coacc_def_0 d a0 a2.

Lemma predta_kill_non_coacc_3 :
 forall (d : preDTA) (a0 a1 : ad),
 preDTA_ref_ok d -> coacc d a0 a1 -> coacc (predta_kill_non_coacc d a0) a0 a1.

Definition predta_kill_non_coacc_rec_def_0 (p : preDTA) 
  (a : ad) (t : term) (pr : reconnaissance p a t) :=
  forall (p0 : preDTA) (m : Map bool),
  p = non_coacc_kill p0 m ->
  ensemble_base state p0 m -> reconnaissance p0 a t.

Definition predta_kill_non_coacc_rec_def_1 (p : preDTA) 
  (s : state) (t : term) (pr : state_reconnait p s t) :=
  forall (p0 : preDTA) (m : Map bool),
  p = non_coacc_kill p0 m ->
  ensemble_base state p0 m -> state_reconnait p0 s t.

Definition predta_kill_non_coacc_rec_def_2 (p : preDTA) 
  (pl : prec_list) (lt : term_list) (pr : liste_reconnait p pl lt) :=
  forall (p0 : preDTA) (m : Map bool),
  p = non_coacc_kill p0 m ->
  ensemble_base state p0 m -> liste_reconnait p0 pl lt.

Lemma predta_kill_non_coacc_rec_0 :
 forall (d : preDTA) (a : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj) (s : state_reconnait d ladj t),
 predta_kill_non_coacc_rec_def_1 d ladj t s ->
 predta_kill_non_coacc_rec_def_0 d a t (rec_dta d a t ladj e s).

Lemma predta_kill_non_coacc_rec_1 :
 forall (d : preDTA) (s : state) (c : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait d l tl),
 predta_kill_non_coacc_rec_def_2 d l tl l0 ->
 predta_kill_non_coacc_rec_def_1 d s (app c tl) (rec_st d s c tl l e l0).

Lemma predta_kill_non_coacc_rec_2 :
 forall d : preDTA,
 predta_kill_non_coacc_rec_def_2 d prec_empty tnil (rec_empty d).

Lemma predta_kill_non_coacc_rec_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (r : reconnaissance d a hd),
 predta_kill_non_coacc_rec_def_0 d a hd r ->
 forall l : liste_reconnait d la tl,
 predta_kill_non_coacc_rec_def_2 d la tl l ->
 predta_kill_non_coacc_rec_def_2 d (prec_cons a la ls) 
   (tcons hd tl) (rec_consi d a la ls hd tl r l).

Lemma predta_kill_non_coacc_rec_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list) (l : liste_reconnait d ls (tcons hd tl)),
 predta_kill_non_coacc_rec_def_2 d ls (tcons hd tl) l ->
 predta_kill_non_coacc_rec_def_2 d (prec_cons a la ls) 
   (tcons hd tl) (rec_consn d a la ls hd tl l).

Lemma predta_kill_non_coacc_rev :
 forall (p : preDTA) (a : ad) (t : term) (m : Map bool),
 reconnaissance (non_coacc_kill p m) a t ->
 ensemble_base state p m -> reconnaissance p a t.

Inductive reconnaissance_co : preDTA -> ad -> ad -> term -> Prop :=
    rec_co_dta :
      forall (d : preDTA) (a b : ad) (t : term) (ladj : state),
      MapGet state d a = Some ladj ->
      state_reconnait_co d ladj b t ->
      coacc d b a -> reconnaissance_co d a b t
with state_reconnait_co : preDTA -> state -> ad -> term -> Prop :=
    rec_co_st :
      forall (d : preDTA) (s : state) (c b : ad) (tl : term_list)
        (l : prec_list),
      MapGet prec_list s c = Some l ->
      liste_reconnait_co d l b tl -> state_reconnait_co d s b (app c tl)
with liste_reconnait_co : preDTA -> prec_list -> ad -> term_list -> Prop :=
  | rec_co_empty :
      forall (d : preDTA) (b : ad), liste_reconnait_co d prec_empty b tnil
  | rec_co_consi :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (b : ad) (tl : term_list),
      reconnaissance_co d a b hd ->
      liste_reconnait_co d la b tl ->
      liste_reconnait_co d (prec_cons a la ls) b (tcons hd tl)
  | rec_co_consn :
      forall (d : preDTA) (a : ad) (la ls : prec_list) 
        (hd : term) (b : ad) (tl : term_list),
      liste_reconnait_co d ls b (tcons hd tl) ->
      liste_reconnait_co d (prec_cons a la ls) b (tcons hd tl).

Scheme mreconnaissance_co_ind := Induction for reconnaissance_co
  Sort Prop
  with mstrec_co_ind := Induction for state_reconnait_co
  Sort Prop
  with mlrec_co_ind := Induction for liste_reconnait_co 
  Sort Prop.

Definition rec_co_def_0 (d : preDTA) (a a1 : ad) (t : term)
  (pr : reconnaissance_co d a a1 t) :=
  forall a0 : ad, coacc d a0 a1 -> reconnaissance_co d a a0 t.

Definition rec_co_def_1 (d : preDTA) (s : state) (a1 : ad) 
  (t : term) (pr : state_reconnait_co d s a1 t) :=
  forall a0 : ad, coacc d a0 a1 -> state_reconnait_co d s a0 t.

Definition rec_co_def_2 (d : preDTA) (p : prec_list) 
  (a1 : ad) (tl : term_list) (pr : liste_reconnait_co d p a1 tl) :=
  forall a0 : ad, coacc d a0 a1 -> liste_reconnait_co d p a0 tl.

Lemma rec_co_0 :
 forall (d : preDTA) (a b : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj)
   (s : state_reconnait_co d ladj b t),
 rec_co_def_1 d ladj b t s ->
 forall c : coacc d b a, rec_co_def_0 d a b t (rec_co_dta d a b t ladj e s c).

Lemma rec_co_1 :
 forall (d : preDTA) (s : state) (c b : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait_co d l b tl),
 rec_co_def_2 d l b tl l0 ->
 rec_co_def_1 d s b (app c tl) (rec_co_st d s c b tl l e l0).

Lemma rec_co_2 :
 forall (d : preDTA) (b : ad),
 rec_co_def_2 d prec_empty b tnil (rec_co_empty d b).

Lemma rec_co_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (r : reconnaissance_co d a b hd),
 rec_co_def_0 d a b hd r ->
 forall l : liste_reconnait_co d la b tl,
 rec_co_def_2 d la b tl l ->
 rec_co_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consi d a la ls hd b tl r l).

Lemma rec_co_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (l : liste_reconnait_co d ls b (tcons hd tl)),
 rec_co_def_2 d ls b (tcons hd tl) l ->
 rec_co_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consn d a la ls hd b tl l).

Lemma rec_co_5 :
 forall (d : preDTA) (a a0 a1 : ad) (t : term),
 reconnaissance_co d a a1 t -> coacc d a0 a1 -> reconnaissance_co d a a0 t.

Definition rec_co_def_3 (t : term) : Prop :=
  forall (d : preDTA) (a : ad),
  preDTA_ref_ok d -> reconnaissance d a t -> reconnaissance_co d a a t.

Definition rec_co_def_4 (d : preDTA) (l : prec_list) 
  (tl : term_list) : Prop :=
  forall a : ad,
  preDTA_ref_ok d ->
  liste_reconnait d l tl ->
  (forall u : term,
   term_list_occur u tl ->
   forall (d : preDTA) (a : ad),
   preDTA_ref_ok d -> reconnaissance d a u -> reconnaissance_co d a a u) ->
  (forall b : ad, prec_occur l b -> coacc d a b) ->
  liste_reconnait_co d l a tl.

Lemma rec_co_6 : forall d : preDTA, rec_co_def_4 d prec_empty tnil.

Lemma rec_co_7 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 reconnaissance d a hd ->
 liste_reconnait d la tl ->
 rec_co_def_4 d la tl -> rec_co_def_4 d (prec_cons a la ls) (tcons hd tl).

Lemma rec_co_8 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term)
   (tl : term_list),
 liste_reconnait d ls (tcons hd tl) ->
 rec_co_def_4 d ls (tcons hd tl) ->
 rec_co_def_4 d (prec_cons a la ls) (tcons hd tl).

Lemma rec_co_9 :
 forall (d : preDTA) (tl : term_list) (a : ad) (l : prec_list),
 liste_reconnait d l tl ->
 (forall u : term,
  term_list_occur u tl ->
  forall (d : preDTA) (a : ad),
  preDTA_ref_ok d -> reconnaissance d a u -> reconnaissance_co d a a u) ->
 (forall b : ad, prec_occur l b -> coacc d a b) ->
 preDTA_ref_ok d -> liste_reconnait_co d l a tl.

Lemma rec_co_10 :
 forall (a : ad) (tl : term_list),
 (forall u : term, term_list_occur u tl -> rec_co_def_3 u) ->
 rec_co_def_3 (app a tl).

Lemma rec_co :
 forall (d : preDTA) (a : ad) (t : term),
 preDTA_ref_ok d -> reconnaissance d a t -> reconnaissance_co d a a t.

Definition rec_co_rec_def_0 (d : preDTA) (a a0 : ad) 
  (t : term) (pr : reconnaissance_co d a a0 t) := reconnaissance d a t.

Definition rec_co_rec_def_1 (d : preDTA) (s : state) 
  (a0 : ad) (t : term) (pr : state_reconnait_co d s a0 t) :=
  state_reconnait d s t.

Definition rec_co_rec_def_2 (d : preDTA) (p : prec_list) 
  (a0 : ad) (tl : term_list) (pr : liste_reconnait_co d p a0 tl) :=
  liste_reconnait d p tl.

Lemma rec_co_rec_0 :
 forall (d : preDTA) (a b : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj)
   (s : state_reconnait_co d ladj b t),
 rec_co_rec_def_1 d ladj b t s ->
 forall c : coacc d b a,
 rec_co_rec_def_0 d a b t (rec_co_dta d a b t ladj e s c).

Lemma rec_co_rec_1 :
 forall (d : preDTA) (s : state) (c b : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait_co d l b tl),
 rec_co_rec_def_2 d l b tl l0 ->
 rec_co_rec_def_1 d s b (app c tl) (rec_co_st d s c b tl l e l0).

Lemma rec_co_rec_2 :
 forall (d : preDTA) (b : ad),
 rec_co_rec_def_2 d prec_empty b tnil (rec_co_empty d b).

Lemma rec_co_rec_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (r : reconnaissance_co d a b hd),
 rec_co_rec_def_0 d a b hd r ->
 forall l : liste_reconnait_co d la b tl,
 rec_co_rec_def_2 d la b tl l ->
 rec_co_rec_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consi d a la ls hd b tl r l).

Lemma rec_co_rec_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (l : liste_reconnait_co d ls b (tcons hd tl)),
 rec_co_rec_def_2 d ls b (tcons hd tl) l ->
 rec_co_rec_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consn d a la ls hd b tl l).

Lemma rec_co_rec :
 forall (d : preDTA) (a a0 : ad) (t : term),
 reconnaissance_co d a a0 t -> reconnaissance d a t.

Definition rec_nonco_kill_def_0 (d : preDTA) (a a0 : ad) 
  (t : term) (pr : reconnaissance_co d a a0 t) :=
  preDTA_ref_ok d -> reconnaissance_co (predta_kill_non_coacc d a0) a a0 t.

Definition rec_nonco_kill_def_1 (d : preDTA) (s : state) 
  (a0 : ad) (t : term) (pr : state_reconnait_co d s a0 t) :=
  preDTA_ref_ok d -> state_reconnait_co (predta_kill_non_coacc d a0) s a0 t.

Definition rec_nonco_kill_def_2 (d : preDTA) (p : prec_list) 
  (a0 : ad) (tl : term_list) (pr : liste_reconnait_co d p a0 tl) :=
  preDTA_ref_ok d -> liste_reconnait_co (predta_kill_non_coacc d a0) p a0 tl.

Lemma rec_nonco_kill_0 :
 forall (d : preDTA) (a b : ad) (t : term) (ladj : state)
   (e : MapGet state d a = Some ladj)
   (s : state_reconnait_co d ladj b t),
 rec_nonco_kill_def_1 d ladj b t s ->
 forall c : coacc d b a,
 rec_nonco_kill_def_0 d a b t (rec_co_dta d a b t ladj e s c).

Lemma rec_nonco_kill_1 :
 forall (d : preDTA) (s : state) (c b : ad) (tl : term_list) 
   (l : prec_list) (e : MapGet prec_list s c = Some l)
   (l0 : liste_reconnait_co d l b tl),
 rec_nonco_kill_def_2 d l b tl l0 ->
 rec_nonco_kill_def_1 d s b (app c tl) (rec_co_st d s c b tl l e l0).

Lemma rec_nonco_kill_2 :
 forall (d : preDTA) (b : ad),
 rec_nonco_kill_def_2 d prec_empty b tnil (rec_co_empty d b).

Lemma rec_nonco_kill_3 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (r : reconnaissance_co d a b hd),
 rec_nonco_kill_def_0 d a b hd r ->
 forall l : liste_reconnait_co d la b tl,
 rec_nonco_kill_def_2 d la b tl l ->
 rec_nonco_kill_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consi d a la ls hd b tl r l).

Lemma rec_nonco_kill_4 :
 forall (d : preDTA) (a : ad) (la ls : prec_list) (hd : term) 
   (b : ad) (tl : term_list) (l : liste_reconnait_co d ls b (tcons hd tl)),
 rec_nonco_kill_def_2 d ls b (tcons hd tl) l ->
 rec_nonco_kill_def_2 d (prec_cons a la ls) b (tcons hd tl)
   (rec_co_consn d a la ls hd b tl l).

Lemma rec_nonco_kill :
 forall (d : preDTA) (a a0 : ad) (t : term),
 reconnaissance_co d a a0 t ->
 preDTA_ref_ok d -> reconnaissance_co (predta_kill_non_coacc d a0) a a0 t.

Lemma predta_kill_non_coacc_dir :
 forall (d : preDTA) (a : ad) (t : term),
 preDTA_ref_ok d ->
 reconnaissance d a t ->
 reconnaissance (non_coacc_kill d (predta_coacc_states d a)) a t.

Lemma predta_kill_non_coacc_semantics :
 forall (d : DTA) (t : term),
 DTA_ref_ok d -> (reconnait d t <-> reconnait (dta_kill_non_coacc d) t).

Lemma predta_kill_non_coacc_lazy_semantics :
 forall (d : DTA) (t : term),
 DTA_ref_ok d -> (reconnait d t <-> reconnait (dta_kill_non_coacc_lazy d) t). *)

Lemma predta_kill_non_coacc_correct_wrt_sign :
 forall (d : preDTA) (a : ad) (sigma : signature),
 preDTA_ref_ok d ->
 predta_correct_wrt_sign d sigma ->
 predta_correct_wrt_sign (predta_kill_non_coacc d a) sigma.
Proof.
	unfold predta_correct_wrt_sign in |- *. intros. elim (predta_kill_non_coacc_0 d a a0 s H). intros.
	elim (H3 H1). intros. exact (H0 _ _ H4).
Qed.

Lemma dta_kill_non_coacc_correct_wrt_sign :
 forall (d : DTA) (sigma : signature),
 DTA_ref_ok d ->
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (dta_kill_non_coacc d) sigma.
Proof.
	simple induction d. simpl in |- *. exact predta_kill_non_coacc_correct_wrt_sign.
Qed.

Lemma dta_kill_non_coacc_lazy_correct_wrt_sign :
 forall (d : DTA) (sigma : signature),
 DTA_ref_ok d ->
 dta_correct_wrt_sign d sigma ->
 dta_correct_wrt_sign (dta_kill_non_coacc_lazy d) sigma.
Proof.
	intros. rewrite (kill_non_coacc_lazy_eq_kill_non_coacc d).
	exact (dta_kill_non_coacc_correct_wrt_sign d sigma H H0).
Qed.

Lemma predta_kill_non_coacc_correct_ref_ok :
 forall (d : preDTA) (a : ad),
 preDTA_ref_ok d -> preDTA_ref_ok (predta_kill_non_coacc d a).
Proof.
	unfold preDTA_ref_ok in |- *. intros. elim (predta_kill_non_coacc_0 d a a0 s H). intros. elim (H4 H0). intros. elim (H a0 s c pl b H5 H1 H2). intros. split with x. elim (predta_kill_non_coacc_0 d a b x H). intros. apply H8. split. exact H7. exact (coacc_nxt d a a0 b s x pl c H7 H5 H1 H2 H6).
Qed.

Lemma dta_kill_non_coacc_correct_ref_ok :
 forall d : DTA, DTA_ref_ok d -> DTA_ref_ok (dta_kill_non_coacc d).
Proof.
	simple induction d. simpl in |- *. exact predta_kill_non_coacc_correct_ref_ok.
Qed.

Lemma dta_kill_non_coacc_lazy_correct_ref_ok :
 forall d : DTA, DTA_ref_ok d -> DTA_ref_ok (dta_kill_non_coacc_lazy d).
Proof.
	intros. rewrite (kill_non_coacc_lazy_eq_kill_non_coacc d).
	exact (dta_kill_non_coacc_correct_ref_ok d H).
Qed.

Lemma dta_kill_non_coacc_correct_main_state :
 forall d : DTA,
 DTA_ref_ok d ->
 DTA_main_state_correct d -> DTA_main_state_correct (dta_kill_non_coacc d).
Proof.
	simple induction d. simpl in |- *. unfold addr_in_preDTA in |- *. intros.
	elim H0. intros. elim (predta_kill_non_coacc_0 p a a x H). intros. split with x. apply H2. split. exact H1.
	exact (coacc_id p a x H1).
Qed.

Lemma dta_kill_non_coacc_lazy_correct_main_state :
 forall d : DTA,
 DTA_ref_ok d ->
 DTA_main_state_correct d ->
 DTA_main_state_correct (dta_kill_non_coacc_lazy d).
Proof.
	intros. rewrite (kill_non_coacc_lazy_eq_kill_non_coacc d).
	exact (dta_kill_non_coacc_correct_main_state d H H0).
Qed.
