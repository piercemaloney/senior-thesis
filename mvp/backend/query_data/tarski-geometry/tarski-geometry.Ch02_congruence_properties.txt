
Require Export  Ch01_tarski_axioms.
(* Ch01_tarski_axioms:
Require Export  general_tactics.

Parameter Point : Set.

Require Export Classical.

Parameter Cong : Point -> Point -> Point -> Point -> Prop.

Parameter Bet : Point -> Point -> Point -> Prop.

Definition Col (A B C : Point) : Prop :=
  Bet A B C \/ Bet B C A \/ Bet C A B.

Ltac cases_col A B C := elim (classic (Col A B C));intros.

Axiom between_identity : forall A B, Bet A B A -> A=B.

Axiom cong_pseudo_reflexivity : forall A B : Point, Cong A B B A.

Axiom cong_identity : forall A B C : Point, Cong A B C C -> A = B.

Axiom cong_inner_transitivity : forall A B C D E F : Point, 
   Cong A B C D -> Cong A B E F -> Cong C D E F.

Axiom inner_pasch : forall A B C P Q : Point,
      Bet A P C -> Bet B Q C ->
      exists x, Bet P x B /\ Bet Q x A.

Axiom euclid : forall A B C D T : Point,
    Bet A D T -> Bet B D C -> A<>D ->
    exists x, exists y,
    Bet A B x /\ Bet A C y /\ Bet x T y.

Axiom five_segments : forall A A' B B' C C' D D' : Point,
    Cong A B A' B' ->
    Cong B C B' C' ->
    Cong A D A' D' ->
    Cong B D B' D' ->
    Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D'.

Axiom segment_construction : forall A B C D : Point, 
    exists E : Point, Bet A B E /\ Cong B E C D.

Axiom lower_dim :
    exists A, exists B, exists C, ~ Col A B C.

Axiom upper_dim : forall A B C P Q : Point,
    P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->
    Col A B C.

Axiom continuity :
    forall X Y : Point -> Prop,
    (exists A : Point, (forall x y : Point, X x -> Y y -> Bet A x y)) ->
    exists B : Point, (forall x y : Point, X x -> Y y -> Bet x B y).

Hint Resolve segment_construction five_segments inner_pasch euclid : Tarski.
Hint Resolve cong_pseudo_reflexivity cong_identity between_identity : Tarski.
Hint Resolve cong_inner_transitivity  : Tarski.

Ltac eTarski := eauto with Tarski.
Ltac Tarski := auto with Tarski.

Lemma eq_dec_points : forall A B:Point, A=B \/ ~ A=B.

Ltac cases_equality A B := elim (eq_dec_points A B);intros. *)

Lemma cong_reflexivity : forall A B : Point, Cong A B A B.
Proof.
eTarski.
Qed.

Hint Resolve cong_reflexivity : Tarski.

Lemma cong_symmetry : forall A B C D : Point, Cong A B C D -> Cong C D A B.
Proof.
eTarski.
Qed.

Hint Immediate cong_symmetry : sTarski.

Ltac sTarski := auto with Tarski sTarski.
Ltac esTarski := eauto with Tarski sTarski.

Lemma cong_transitivity :
 forall A B C D E F : Point, Cong A B C D -> Cong C D E F -> Cong A B E F.
Proof.
eTarski.
Qed.

Lemma cong_left_commutativity : forall A B C D,
  Cong A B C D -> Cong B A C D.
Proof.
eTarski.
Qed.

Lemma cong_right_commutativity : forall A B C D,
  Cong A B C D -> Cong A B D C.
Proof.
eTarski.
Qed.

Hint Resolve cong_left_commutativity cong_right_commutativity : sTarski.

Lemma cong_trivial_identity : forall A B : Point, Cong A A B B.
Proof.
intros.
assert (exists E : Point, Bet A B E /\ Cong B E A A).
apply segment_construction with (B := B) (C := A) (D := A).
DecompExAnd H x.
apply cong_symmetry.
assert (B = x).
eTarski.
rewrite <- H in H2.
assumption.
Qed.

Hint Resolve cong_trivial_identity : Tarski.

Lemma cong_reverse_identity : forall A C D, Cong A A C D -> C=D.
Proof with eTarski.
intros.
assert (Cong C D A A)...
Qed.

Hint Resolve cong_reverse_identity : Tarski.

Lemma cong_commutativity : forall A B C D, Cong A B C D -> Cong B A D C.
Proof with eTarski. 
intros...
Qed.

Hint Resolve cong_commutativity : sTarski.
		
Definition OFSC := fun A B C D A' B' C' D' => 
  Bet A B C /\ Bet A' B' C' /\ 
  Cong A B A' B' /\ Cong B C B' C' /\ 
  Cong A D A' D' /\ Cong B D B' D'.

Hint Unfold OFSC : Tarski.

Lemma five_segments_with_def : forall A B C D A' B' C' D',
OFSC A B C D A' B' C' D' -> A<>B -> Cong C D C' D'.
Proof.
unfold  OFSC.
intuition.
eapply five_segments;try apply H2;Tarski.
Qed.

Hint Resolve five_segments_with_def : Tarski.

Lemma l2_11 :
 forall A B C A' B' C',
 Bet A B C -> Bet A' B' C' -> 
 Cong A B A' B' -> Cong B C B' C' -> Cong A C A' C'.
Proof with eTarski.
intros.
cases_equality A B.
assert (A' = B').
assert (Cong A' B' A B).
sTarski.
eapply cong_identity.
rewrite H3 in H4.
apply H4.
rewrite <- H3 in H2.
rewrite <- H4 in H2.
assumption.
assert (Cong C A C' A').
eapply five_segments; try apply H1...
eTarski.
Qed.

Lemma construction_unicity : forall Q A B C x y,
   ~(Q=A) -> 
  Bet Q A x -> Cong A x B C ->
  Bet Q A y -> Cong A y B C -> 
  x=y.
Proof.
intros.
assert (Cong Q x Q y).
eapply l2_11;eTarski.
assert (Cong A x A y).
eapply cong_transitivity;eauto.
sTarski.
assert (OFSC Q A x x Q A x y).
unfold OFSC.
intuition.
assert (Cong x x x y).
eapply five_segments_with_def;eTarski.
esTarski.
Qed.