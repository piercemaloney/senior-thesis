
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_sgroup.
(* Sub_sgroup:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sgroup_facts.
Require Export Parts.
Section Def.
Variable G : SGROUP.
Section Sub_sgroup.
Variable H : part_set G.
Hypothesis
  Hprop :
    forall x y : G,
    in_part x H -> in_part y H -> in_part (sgroup_law _ x y) H.

Definition subsgroup_law : law_of_composition H.

Definition subsgroup_sgroup : sgroup.
End Sub_sgroup.

Record subsgroup : Type := 
  {subsgroup_part : Predicate G;
   subsgroup_prop :
    forall x y : G,
    in_part x subsgroup_part ->
    in_part y subsgroup_part -> in_part (sgroup_law _ x y) subsgroup_part}.

Definition sgroup_of_subsgroup (H : subsgroup) :=
  subsgroup_sgroup (subsgroup_prop (s:=H)).
End Def.
Coercion sgroup_of_subsgroup : subsgroup >-> sgroup.
Coercion subsgroup_part : subsgroup >-> Predicate.
Section Injection.
Variable G : SGROUP.
Variable H : subsgroup G.

Lemma subsgroup_in_prop :
 forall x y : G, in_part x H -> in_part y H -> in_part (sgroup_law _ x y) H.

Definition inj_subsgroup : Hom (H:SGROUP) G.

Lemma inj_subgroup_injective : injective inj_subsgroup.
End Injection.
Hint Resolve subsgroup_in_prop inj_subgroup_injective: algebra. *)
Require Export Monoid_facts.
(* Monoid_facts:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Monoid_cat.
Section Lemmas.
Variable E : MONOID.

Lemma MONOID_unit_r : forall x : E, Equal (sgroup_law _ x (monoid_unit E)) x.

Lemma MONOID_unit_l : forall x : E, Equal (sgroup_law _ (monoid_unit E) x) x.

Lemma MONOID_unit_unique :
 forall e : E,
 (forall x : E, Equal (sgroup_law _ x e) x) ->
 (forall x : E, Equal (sgroup_law _ e x) x) -> Equal e (monoid_unit E).
Variable F : MONOID.
Variable f : Hom E F.

Lemma MONOID_hom_prop : Equal (f (monoid_unit E)) (monoid_unit F).
End Lemmas.
Hint Resolve MONOID_unit_r MONOID_unit_l MONOID_unit_unique MONOID_hom_prop:
  algebra. *)
Section Def.
Variable G : MONOID.
Section Sub_monoid.
Variable H : subsgroup G.
Hypothesis Hunit : in_part (monoid_unit G) H.

Definition submonoid_monoid : monoid.
apply (Build_monoid (monoid_sgroup:=H)).
apply (Build_monoid_on (A:=H) (monoid_unit:=Build_subtype Hunit)).
red in |- *.
simpl in |- *.
unfold subtype_image_equal in |- *.
simpl in |- *.
auto with algebra.
red in |- *.
simpl in |- *.
unfold subtype_image_equal in |- *.
simpl in |- *.
auto with algebra.
Defined.
End Sub_monoid.

Record submonoid : Type := 
  {submonoid_subsgroup : subsgroup G;
   submonoid_prop : in_part (monoid_unit G) submonoid_subsgroup}.

Definition monoid_of_submonoid (H : submonoid) :=
  submonoid_monoid (submonoid_prop H).
End Def.
Coercion monoid_of_submonoid : submonoid >-> monoid.
Coercion submonoid_subsgroup : submonoid >-> subsgroup.
Section Injection.
Variable G : MONOID.
Variable H : submonoid G.

Lemma submonoid_in_prop : in_part (monoid_unit G) H.
apply (submonoid_prop (G:=G) H); auto with algebra.
Qed.

Definition inj_submonoid : Hom (H:MONOID) G.
apply (Build_monoid_hom (E:=H) (F:=G) (monoid_sgroup_hom:=inj_subsgroup H)).
red in |- *.
auto with algebra.
Defined.

Lemma inj_subsmonoid_injective : injective inj_submonoid.
red in |- *.
auto with algebra.
Qed.
End Injection.
Hint Resolve submonoid_in_prop inj_subsmonoid_injective: algebra.
