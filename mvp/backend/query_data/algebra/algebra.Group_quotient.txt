
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_group.
(* Sub_group:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_monoid.
Require Export Group_facts.
Section Def.
Variable G : GROUP.
Section Sub_group.
Variable H : submonoid G.
Hypothesis Hinv : forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition subgroup_inv : MAP H H.

Definition subgroup_group : group.
End Sub_group.

Record subgroup : Type := 
  {subgroup_submonoid : submonoid G;
   subgroup_prop :
    forall x : G,
    in_part x subgroup_submonoid ->
    in_part (group_inverse _ x) subgroup_submonoid}.

Definition group_of_subgroup (H : subgroup) :=
  subgroup_group (subgroup_prop (s:=H)).
End Def.
Coercion group_of_subgroup : subgroup >-> group.
Coercion subgroup_submonoid : subgroup >-> submonoid.
Section Injection.
Variable G : GROUP.
Variable H : subgroup G.

Lemma subgroup_in_prop :
 forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition inj_subgroup : Hom (H:GROUP) G.

Lemma inj_subgroup_injective : injective inj_subgroup.
End Injection.
Hint Resolve subgroup_in_prop inj_subgroup_injective: algebra. *)
Require Export Group_util.
(* Group_util:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_group.
Require Export Abelian_group_cat.

Section Group.
Variable E : Setoid.
Variable genlaw : E -> E -> E.
Variable e : E.
Variable geninv : E -> E.
Hypothesis
  fcomp :
    forall x x' y y' : E,
    Equal x x' -> Equal y y' -> Equal (genlaw x y) (genlaw x' y').
Hypothesis
  genlawassoc :
    forall x y z : E, Equal (genlaw (genlaw x y) z) (genlaw x (genlaw y z)).
Hypothesis eunitgenlawr : forall x : E, Equal (genlaw x e) x.
Hypothesis invcomp : forall x y : E, Equal x y -> Equal (geninv x) (geninv y).
Hypothesis geninvr : forall x : E, Equal (genlaw x (geninv x)) e.

Lemma geninvl : forall x : E, Equal (genlaw (geninv x) x) e.
Hint Resolve geninvl: algebra.

Lemma eunitgenlawl : forall x : E, Equal (genlaw e x) x.
Hint Resolve eunitgenlawl: algebra.

Definition f := uncurry fcomp.

Lemma fassoc : associative f.

Lemma eunitr : unit_r f e.

Lemma eunitl : unit_l f e.

Definition inv := Build_Map (Ap:=geninv) invcomp.

Lemma invr : inverse_r f e inv.

Lemma invl : inverse_l f e inv.

Definition sg := Build_sgroup (Build_sgroup_on fassoc).

Definition m :=
  Build_monoid (Build_monoid_on (A:=sg) (monoid_unit:=e) eunitr eunitl).

Definition BUILD_GROUP : GROUP :=
  Build_group (Build_group_on (G:=m) (group_inverse_map:=inv) invr invl).
End Group.
Section Abelian_group.
Variable E : Setoid.
Variable genlaw : E -> E -> E.
Variable e : E.
Variable geninv : E -> E.
Hypothesis
  fcomp :
    forall x x' y y' : E,
    Equal x x' -> Equal y y' -> Equal (genlaw x y) (genlaw x' y').
Hypothesis
  genlawassoc :
    forall x y z : E, Equal (genlaw (genlaw x y) z) (genlaw x (genlaw y z)).
Hypothesis eunitgenlawr : forall x : E, Equal (genlaw x e) x.
Hypothesis invcomp : forall x y : E, Equal x y -> Equal (geninv x) (geninv y).
Hypothesis geninvr : forall x : E, Equal (genlaw x (geninv x)) e.
Hypothesis fcom : forall x y : E, Equal (genlaw x y) (genlaw y x).

Definition G := BUILD_GROUP fcomp genlawassoc eunitgenlawr invcomp geninvr.

Definition asg : abelian_sgroup.

Definition BUILD_ABELIAN_GROUP : ABELIAN_GROUP :=
  Build_abelian_group
    (Build_abelian_group_on (G:=G)
       (Build_abelian_monoid (Build_abelian_monoid_on (M:=G) asg))).
End Abelian_group.
Section Hom.
Variable G G' : GROUP.
Variable ff : G -> G'.
Hypothesis ffcomp : forall x y : G, Equal x y -> Equal (ff x) (ff y).
Hypothesis
  fflaw :
    forall x y : G,
    Equal (ff (sgroup_law _ x y)) (sgroup_law _ (ff x) (ff y)).
Hypothesis ffunit : Equal (ff (monoid_unit G)) (monoid_unit G').

Definition f2 := Build_Map ffcomp.

Definition fhomsg := Build_sgroup_hom (sgroup_map:=f2) fflaw.

Definition BUILD_HOM_GROUP : Hom G G' :=
  Build_monoid_hom (monoid_sgroup_hom:=fhomsg) ffunit.
End Hom.
Section Build_sub_group.
Variable G : GROUP.
Variable H : part_set G.
Hypothesis
  Hlaw :
    forall x y : G,
    in_part x H -> in_part y H -> in_part (sgroup_law _ x y) H.
Hypothesis Hunit : in_part (monoid_unit G) H.
Hypothesis Hinv : forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition BUILD_SUB_GROUP : subgroup G :=
  Build_subgroup (G:=G)
    (subgroup_submonoid:=Build_submonoid (G:=G)
                           (submonoid_subsgroup:=Build_subsgroup Hlaw) Hunit)
    Hinv.
End Build_sub_group. *)

Section Def.
Variable G : GROUP.
Variable H : subgroup G.

Definition normal :=
  forall x y : G,
  in_part y H ->
  in_part (sgroup_law _ x (sgroup_law _ y (group_inverse _ x))) H.
Hypothesis Hnormal : normal.

Definition group_quo_eq (x y : G) :=
  in_part (sgroup_law _ x (group_inverse _ y)) H.

Definition group_quo_eqrel : Relation G.
apply (Build_Relation (E:=G) (Rel_fun:=group_quo_eq)).
red in |- *.
unfold app_rel, group_quo_eq in |- *.
intros x x' y y' H' H'0 H'1; try assumption.
apply in_part_comp_l with (sgroup_law G x (group_inverse G y));
 auto with algebra.
Defined.

Lemma group_quo_eqrel_equiv : equivalence group_quo_eqrel.
red in Hnormal.
red in |- *.
split; [ try assumption | idtac ].
red in |- *.
intros x; red in |- *.
simpl in |- *.
unfold app_rel, group_quo_eq in |- *.
apply
 in_part_comp_l
  with (sgroup_law G x (sgroup_law G (monoid_unit G) (group_inverse G x)));
 auto with algebra.
red in |- *.
split; [ try assumption | idtac ].
red in |- *.
simpl in |- *.
unfold app_rel, group_quo_eq in |- *.
intros x y z H' H'0; try assumption.
apply
 in_part_comp_l
  with
    (sgroup_law G (sgroup_law G x (group_inverse G y))
       (sgroup_law G y (group_inverse G z))); auto with algebra.
apply
 Trans
  with
    (sgroup_law G x
       (sgroup_law G (group_inverse G y) (sgroup_law G y (group_inverse G z))));
 auto with algebra.
apply
 Trans
  with
    (sgroup_law G x
       (sgroup_law G (sgroup_law G (group_inverse G y) y) (group_inverse G z)));
 auto with algebra.
apply
 Trans
  with (sgroup_law G x (sgroup_law G (monoid_unit G) (group_inverse G z)));
 auto with algebra.
red in |- *.
simpl in |- *.
unfold app_rel, group_quo_eq in |- *.
intros x y H'; try assumption.
apply
 in_part_comp_l with (group_inverse G (sgroup_law G x (group_inverse G y)));
 auto with algebra.
apply
 Trans
  with
    (sgroup_law G (group_inverse G (group_inverse G y)) (group_inverse G x));
 auto with algebra.
Qed.

Definition group_quo_set := quotient G group_quo_eqrel group_quo_eqrel_equiv.

Lemma normal_com_in :
 forall x y : G, in_part (sgroup_law _ x y) H -> in_part (sgroup_law _ y x) H.
intros x y H'; try assumption.
apply
 in_part_comp_l
  with (sgroup_law G y (sgroup_law G (sgroup_law G x y) (group_inverse G y)));
 auto with algebra.
apply SGROUP_comp; auto with algebra.
apply Trans with (sgroup_law G x (sgroup_law G y (group_inverse G y)));
 auto with algebra.
apply Trans with (sgroup_law G x (monoid_unit G)); auto with algebra.
Qed.
Hint Immediate normal_com_in: algebra.
Set Strict Implicit.
Unset Implicit Arguments.

Definition group_quo : group.
apply
 (BUILD_GROUP (E:=group_quo_set) (genlaw:=fun x y : G => sgroup_law _ x y)
    (e:=monoid_unit G) (geninv:=fun x : G => group_inverse _ x)).
simpl in |- *; auto with algebra.
unfold app_rel, group_quo_eq in |- *.
intros x x' y y' H' H'0; try assumption.
apply
 in_part_comp_l
  with
    (sgroup_law G x (sgroup_law G y (group_inverse G (sgroup_law G x' y'))));
 auto with algebra.
apply normal_com_in.
apply
 in_part_comp_l
  with
    (sgroup_law G
       (sgroup_law G y
          (sgroup_law G (group_inverse G y') (group_inverse G x'))) x);
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G
       (sgroup_law G (sgroup_law G y (group_inverse G y'))
          (group_inverse G x')) x); auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G (sgroup_law G y (group_inverse G y'))
       (sgroup_law G (group_inverse G x') x)); auto with algebra.
intros x y z; try assumption.
simpl in |- *; auto with algebra.
unfold app_rel, group_quo_eq in |- *.
apply
 in_part_comp_l
  with
    (sgroup_law G (sgroup_law G (sgroup_law G x y) z)
       (sgroup_law G (group_inverse G (sgroup_law G y z)) (group_inverse G x)));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G (sgroup_law G (sgroup_law G x y) z)
       (sgroup_law G (sgroup_law G (group_inverse G z) (group_inverse G y))
          (group_inverse G x))); auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G (sgroup_law G x (sgroup_law G y z))
       (sgroup_law G (group_inverse G z)
          (sgroup_law G (group_inverse G y) (group_inverse G x))));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G x
       (sgroup_law G (sgroup_law G y z)
          (sgroup_law G (group_inverse G z)
             (sgroup_law G (group_inverse G y) (group_inverse G x)))));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G x
       (sgroup_law G y
          (sgroup_law G z
             (sgroup_law G (group_inverse G z)
                (sgroup_law G (group_inverse G y) (group_inverse G x))))));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G x
       (sgroup_law G y
          (sgroup_law G (sgroup_law G z (group_inverse G z))
             (sgroup_law G (group_inverse G y) (group_inverse G x)))));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G x
       (sgroup_law G y
          (sgroup_law G (monoid_unit G)
             (sgroup_law G (group_inverse G y) (group_inverse G x)))));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G x
       (sgroup_law G y (sgroup_law G (group_inverse G y) (group_inverse G x))));
 auto with algebra.
apply
 in_part_comp_l
  with
    (sgroup_law G (sgroup_law G x y)
       (sgroup_law G (group_inverse G y) (group_inverse G x)));
 auto with algebra.
apply
 in_part_comp_l
  with (sgroup_law G (sgroup_law G x y) (group_inverse G (sgroup_law G x y)));
 auto with algebra.
apply in_part_comp_l with (monoid_unit G); auto with algebra.
simpl in |- *; auto with algebra.
unfold cart_eq, group_quo_eq in |- *.
intros x; try assumption.
apply in_part_comp_l with (sgroup_law G x (group_inverse G x));
 auto with algebra.
apply in_part_comp_l with (monoid_unit G); auto with algebra.
intros x y; try assumption.
simpl in |- *; auto with algebra.
unfold cart_eq, group_quo_eq in |- *.
intros H'; try assumption.
apply normal_com_in.
apply
 in_part_comp_l with (group_inverse G (sgroup_law G x (group_inverse G y)));
 auto with algebra.
intros x; try assumption.
simpl in |- *; auto with algebra.
unfold cart_eq, group_quo_eq in |- *.
apply
 in_part_comp_l
  with (sgroup_law G (sgroup_law G x (group_inverse G x)) (monoid_unit G));
 auto with algebra.
apply in_part_comp_l with (sgroup_law G x (group_inverse G x));
 auto with algebra.
apply in_part_comp_l with (monoid_unit G); auto with algebra.
Defined.
Set Implicit Arguments.
Unset Strict Implicit.

Definition group_quo_surj : Hom G group_quo.
apply (BUILD_HOM_GROUP (G:=G) (G':=group_quo) (ff:=fun x : G => x)).
intros x y; try assumption.
simpl in |- *; auto with algebra.
unfold cart_eq, group_quo_eq in |- *.
intros H'; try assumption.
apply in_part_comp_l with (sgroup_law G x (group_inverse G x));
 auto with algebra.
apply in_part_comp_l with (monoid_unit G); auto with algebra.
auto with algebra.
auto with algebra.
Defined.
End Def.
Hint Immediate normal_com_in: algebra.