
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Ring_cat.
(* Ring_cat:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Abelian_group_cat.

Section Objects.

Definition dist_r (E : SET) (f g : law_of_composition E) :=
  forall x y z : E,
  Equal (f (couple (g (couple x y)) z))
    (g (couple (f (couple x z)) (f (couple y z)))).

Definition dist_l (E : SET) (f g : law_of_composition E) :=
  forall x y z : E,
  Equal (f (couple x (g (couple y z))))
    (g (couple (f (couple x y)) (f (couple x z)))).

Record ring_on (R : abelian_group) : Type := 
  {ring_mult_sgroup : sgroup_on R;
   ring_mult_monoid : monoid_on ring_mult_sgroup;
   ring_monoid :> monoid_on ring_mult_monoid;
   ring_dist_r_prf :
    dist_r (sgroup_law_map ring_mult_sgroup) (sgroup_law_map R);
   ring_dist_l_prf :
    dist_l (sgroup_law_map ring_mult_sgroup) (sgroup_law_map R)}.

Record ring : Type := 
  {ring_group :> abelian_group; ring_on_def :> ring_on ring_group}.
Coercion Build_ring : ring_on >-> ring.

Definition ring_mult (R : ring) (x y : R) : R :=
  sgroup_law_map (ring_mult_sgroup R) (couple x y).

Definition ring_unit (R : ring) : R := monoid_unit (ring_monoid R).

Record cring_on (R : ring) : Type := 
  {cring_com_prf : commutative (sgroup_law_map (ring_mult_monoid R))}.

Record cring : Type := 
  {cring_ring :> ring; cring_on_def :> cring_on cring_ring}.
Coercion Build_cring : cring_on >-> cring.

Definition cring_monoid : cring -> abelian_monoid.
End Objects.
Section Hom.
Variable E F : ring.

Definition ring_mult_hom_unit_prop (f : Map E F) :=
  Equal (f (ring_unit E)) (ring_unit F).

Definition ring_mult_hom_prop (f : Map E F) :=
  forall x y : E, Equal (f (ring_mult x y)) (ring_mult (f x) (f y)).

Record ring_hom : Type := 
  {ring_plus_hom :> monoid_hom E F;
   ring_mult_hom_unit : ring_mult_hom_unit_prop ring_plus_hom;
   ring_mult_hom_prf : ring_mult_hom_prop ring_plus_hom}.
End Hom.

Definition ring_hom_comp :
  forall E F G : ring, ring_hom F G -> ring_hom E F -> ring_hom E G.

Definition ring_id : forall E : ring, ring_hom E E.

Definition RING : category.

Definition CRING := full_subcat (C:=RING) (C':=cring) cring_ring. *)

Record field_on (R : ring) : Type := 
  {field_inverse_map : Map R R;
   field_inverse_r_prf :
    forall x : R,
    ~ Equal x (monoid_unit R) ->
    Equal (ring_mult x (Ap field_inverse_map x)) (ring_unit R);
   field_inverse_l_prf :
    forall x : R,
    ~ Equal x (monoid_unit R) ->
    Equal (ring_mult (Ap field_inverse_map x) x) (ring_unit R);
   field_unit_non_zero : ~ Equal (ring_unit R) (monoid_unit R):Prop}.

Record field : Type := 
  {field_ring :> ring; field_on_def :> field_on field_ring}.
Coercion Build_field : field_on >-> field.

Definition FIELD := full_subcat (C:=RING) (C':=field) field_ring.
