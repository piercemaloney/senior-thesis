
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Union.
(* Union:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Parts.

Section Union1.
Variable E : Setoid.

Definition union : part_set E -> part_set E -> part_set E.

Lemma included_union_l : forall A B : part_set E, included A (union A B).

Lemma included_union_r : forall A B : part_set E, included B (union A B).

Lemma in_part_union_l :
 forall (A B : part_set E) (x : E), in_part x A -> in_part x (union A B).

Lemma in_part_union_r :
 forall (A B : part_set E) (x : E), in_part x B -> in_part x (union A B).
Parameter
  in_part_union_or :
    forall (A B : part_set E) (x : E),
    in_part x A \/ in_part x B -> in_part x (union A B).

Lemma in_part_union :
 forall (A B : part_set E) (x : E),
 in_part x (union A B) -> in_part x A \/ in_part x B.

Lemma union_not_in_l :
 forall (A B : part_set E) (x : E),
 in_part x (union A B) -> ~ in_part x A -> in_part x B.

Lemma included2_union :
 forall A B C : part_set E,
 included A C -> included B C -> included (union A B) C.

Lemma union_comp :
 forall A A' B B' : part_set E,
 Equal A A' -> Equal B B' -> Equal (union A B) (union A' B').

Lemma union_assoc :
 forall A B C : part_set E, Equal (union A (union B C)) (union (union A B) C).

Lemma union_com : forall A B : part_set E, Equal (union A B) (union B A).
Parameter union_empty_l : forall A : part_set E, Equal (union (empty E) A) A.
Parameter union_empty_r : forall A : part_set E, Equal (union A (empty E)) A.
End Union1.
Hint Resolve included_union_l included_union_r in_part_union_l
  in_part_union_r included2_union union_comp union_assoc union_empty_l
  union_empty_r: algebra.
Hint Immediate union_com: algebra. *)

Section Inter1.
Variable E : Setoid.

Definition inter : part_set E -> part_set E -> part_set E.
intros A B.
apply (Build_Predicate (Pred_fun:=fun x : E => in_part x A /\ in_part x B)).
red in |- *.
intros x y H' H'0; try assumption.
elim H'; intros H'1 H'2; try exact H'1; clear H'.
split; [ try assumption | idtac ].
apply in_part_comp_l with x; auto with algebra.
apply in_part_comp_l with x; auto with algebra.
Defined.

Lemma included_inter_l : forall A B : part_set E, included (inter A B) A.
unfold included in |- *; simpl in |- *; intuition.
Qed.

Lemma included_inter_r : forall A B : part_set E, included (inter A B) B.
unfold included in |- *; simpl in |- *; intuition.
Qed.

Lemma in_part_inter_l :
 forall (A B : part_set E) (x : E), in_part x (inter A B) -> in_part x A.
simpl in |- *; intuition.
Qed.

Lemma in_part_inter_r :
 forall (A B : part_set E) (x : E), in_part x (inter A B) -> in_part x B.
simpl in |- *; intuition.
Qed.

Lemma in_part_inter :
 forall (A B : part_set E) (x : E),
 in_part x A -> in_part x B -> in_part x (inter A B).
simpl in |- *. intuition.
Qed.

Lemma inter_not_in_l :
 forall (A B : part_set E) (x : E), ~ in_part x A -> ~ in_part x (inter A B).
simpl in |- *; intuition.
Qed.

Lemma inter_not_in_r :
 forall (A B : part_set E) (x : E), ~ in_part x B -> ~ in_part x (inter A B).
simpl in |- *; intuition.
Qed.

Lemma included2_inter :
 forall A B C : part_set E,
 included A C -> included B C -> included (inter A B) C.
unfold included in |- *; simpl in |- *; intuition.
Qed.

Lemma inter_comp :
 forall A A' B B' : part_set E,
 Equal A A' -> Equal B B' -> Equal (inter A B) (inter A' B').
unfold inter in |- *; simpl in |- *.
unfold eq_part in |- *; simpl in |- *.
intros A A' B B' H' H'0 x.
generalize (H' x) (H'0 x); tauto.
Qed.

Lemma inter_assoc :
 forall A B C : part_set E, Equal (inter A (inter B C)) (inter (inter A B) C).
simpl in |- *. unfold eq_part in |- *. simpl in |- *.
tauto.
Qed.

Lemma inter_com : forall A B : part_set E, Equal (inter A B) (inter B A).
simpl in |- *. unfold eq_part in |- *; simpl in |- *.
tauto.
Qed.

Parameter
  inter_union_dist_r :
    forall A B C : part_set E,
    Equal (inter (union A B) C) (union (inter A C) (inter B C)).
Parameter
  inter_union_dist_l :
    forall A B C : part_set E,
    Equal (inter A (union B C)) (union (inter A B) (inter A C)).
End Inter1.
Hint Resolve included_inter_l included_inter_r in_part_inter_l
  in_part_inter_r in_part_inter included2_inter inter_comp inter_assoc
  inter_not_in_l inter_not_in_r inter_union_dist_r inter_union_dist_l:
  algebra.
Hint Immediate inter_com: algebra.