
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Group_util.
(* Group_util:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_group.
Require Export Abelian_group_cat.

Section Group.
Variable E : Setoid.
Variable genlaw : E -> E -> E.
Variable e : E.
Variable geninv : E -> E.
Hypothesis
  fcomp :
    forall x x' y y' : E,
    Equal x x' -> Equal y y' -> Equal (genlaw x y) (genlaw x' y').
Hypothesis
  genlawassoc :
    forall x y z : E, Equal (genlaw (genlaw x y) z) (genlaw x (genlaw y z)).
Hypothesis eunitgenlawr : forall x : E, Equal (genlaw x e) x.
Hypothesis invcomp : forall x y : E, Equal x y -> Equal (geninv x) (geninv y).
Hypothesis geninvr : forall x : E, Equal (genlaw x (geninv x)) e.

Lemma geninvl : forall x : E, Equal (genlaw (geninv x) x) e.
Hint Resolve geninvl: algebra.

Lemma eunitgenlawl : forall x : E, Equal (genlaw e x) x.
Hint Resolve eunitgenlawl: algebra.

Definition f := uncurry fcomp.

Lemma fassoc : associative f.

Lemma eunitr : unit_r f e.

Lemma eunitl : unit_l f e.

Definition inv := Build_Map (Ap:=geninv) invcomp.

Lemma invr : inverse_r f e inv.

Lemma invl : inverse_l f e inv.

Definition sg := Build_sgroup (Build_sgroup_on fassoc).

Definition m :=
  Build_monoid (Build_monoid_on (A:=sg) (monoid_unit:=e) eunitr eunitl).

Definition BUILD_GROUP : GROUP :=
  Build_group (Build_group_on (G:=m) (group_inverse_map:=inv) invr invl).
End Group.
Section Abelian_group.
Variable E : Setoid.
Variable genlaw : E -> E -> E.
Variable e : E.
Variable geninv : E -> E.
Hypothesis
  fcomp :
    forall x x' y y' : E,
    Equal x x' -> Equal y y' -> Equal (genlaw x y) (genlaw x' y').
Hypothesis
  genlawassoc :
    forall x y z : E, Equal (genlaw (genlaw x y) z) (genlaw x (genlaw y z)).
Hypothesis eunitgenlawr : forall x : E, Equal (genlaw x e) x.
Hypothesis invcomp : forall x y : E, Equal x y -> Equal (geninv x) (geninv y).
Hypothesis geninvr : forall x : E, Equal (genlaw x (geninv x)) e.
Hypothesis fcom : forall x y : E, Equal (genlaw x y) (genlaw y x).

Definition G := BUILD_GROUP fcomp genlawassoc eunitgenlawr invcomp geninvr.

Definition asg : abelian_sgroup.

Definition BUILD_ABELIAN_GROUP : ABELIAN_GROUP :=
  Build_abelian_group
    (Build_abelian_group_on (G:=G)
       (Build_abelian_monoid (Build_abelian_monoid_on (M:=G) asg))).
End Abelian_group.
Section Hom.
Variable G G' : GROUP.
Variable ff : G -> G'.
Hypothesis ffcomp : forall x y : G, Equal x y -> Equal (ff x) (ff y).
Hypothesis
  fflaw :
    forall x y : G,
    Equal (ff (sgroup_law _ x y)) (sgroup_law _ (ff x) (ff y)).
Hypothesis ffunit : Equal (ff (monoid_unit G)) (monoid_unit G').

Definition f2 := Build_Map ffcomp.

Definition fhomsg := Build_sgroup_hom (sgroup_map:=f2) fflaw.

Definition BUILD_HOM_GROUP : Hom G G' :=
  Build_monoid_hom (monoid_sgroup_hom:=fhomsg) ffunit.
End Hom.
Section Build_sub_group.
Variable G : GROUP.
Variable H : part_set G.
Hypothesis
  Hlaw :
    forall x y : G,
    in_part x H -> in_part y H -> in_part (sgroup_law _ x y) H.
Hypothesis Hunit : in_part (monoid_unit G) H.
Hypothesis Hinv : forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition BUILD_SUB_GROUP : subgroup G :=
  Build_subgroup (G:=G)
    (subgroup_submonoid:=Build_submonoid (G:=G)
                           (submonoid_subsgroup:=Build_subsgroup Hlaw) Hunit)
    Hinv.
End Build_sub_group. *)
Require Export Abelian_group_facts.
(* Abelian_group_facts:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Abelian_group_cat.
Require Export Group_facts.

Section Sgroup.
Variable S : ABELIAN_SGROUP.

Lemma ABELIAN_SGROUP_com :
 forall x y : S, Equal (sgroup_law _ x y) (sgroup_law _ y x).

Lemma ABELIAN_SGROUP_permute :
 forall x y z : S,
 Equal (sgroup_law _ x (sgroup_law _ y z))
   (sgroup_law _ y (sgroup_law _ x z)).

Lemma ABELIAN_SGROUP4 :
 forall x y z t : S,
 Equal (sgroup_law _ (sgroup_law _ x y) (sgroup_law _ z t))
   (sgroup_law _ (sgroup_law _ x z) (sgroup_law _ y t)).
End Sgroup.
Hint Immediate ABELIAN_SGROUP_com ABELIAN_SGROUP_permute ABELIAN_SGROUP4:
  algebra.
Section Monoid.
Variable M : ABELIAN_MONOID.

Lemma ABELIAN_MONOID_com :
 forall x y : M, Equal (sgroup_law _ x y) (sgroup_law _ y x).

Lemma ABELIAN_MONOID_permute :
 forall x y z : M,
 Equal (sgroup_law _ x (sgroup_law _ y z))
   (sgroup_law _ y (sgroup_law _ x z)).

Lemma ABELIAN_MONOID4 :
 forall x y z t : M,
 Equal (sgroup_law _ (sgroup_law _ x y) (sgroup_law _ z t))
   (sgroup_law _ (sgroup_law _ x z) (sgroup_law _ y t)).
End Monoid.
Hint Immediate ABELIAN_MONOID_com ABELIAN_MONOID_permute ABELIAN_MONOID4:
  algebra.
Section Group.
Variable G : ABELIAN_GROUP.

Lemma ABELIAN_GROUP_com :
 forall x y : G, Equal (sgroup_law _ x y) (sgroup_law _ y x).

Lemma ABELIAN_GROUP_permute :
 forall x y z : G,
 Equal (sgroup_law _ x (sgroup_law _ y z))
   (sgroup_law _ y (sgroup_law _ x z)).

Lemma ABELIAN_GROUP4 :
 forall x y z t : G,
 Equal (sgroup_law _ (sgroup_law _ x y) (sgroup_law _ z t))
   (sgroup_law _ (sgroup_law _ x z) (sgroup_law _ y t)).
End Group.
Hint Immediate ABELIAN_GROUP_com ABELIAN_GROUP_permute ABELIAN_GROUP4:
  algebra. *)

Section Def.
Variable G : GROUP.
Variable G' : ABELIAN_GROUP.

Definition group_hom_law : forall f g : Hom G G', Hom G G'.
intros f0 g.
apply
 (BUILD_HOM_GROUP (G:=G) (G':=G')
    (ff:=fun x : G => sgroup_law G' (f0 x) (g x))).
auto with algebra.
intros x y; try assumption.
apply
 Trans
  with
    (sgroup_law G'
       (sgroup_law G' (Ap (sgroup_map (monoid_sgroup_hom f0)) x)
          (Ap (sgroup_map (monoid_sgroup_hom f0)) y))
       (sgroup_law G' (Ap (sgroup_map (monoid_sgroup_hom g)) x)
          (Ap (sgroup_map (monoid_sgroup_hom g)) y))); 
 auto with algebra.

apply Trans with (sgroup_law G' (monoid_unit G') (monoid_unit G'));
 auto with algebra.
Defined.

Definition group_hom_unit : Hom G G'.
apply (BUILD_HOM_GROUP (G:=G) (G':=G') (ff:=fun x : G => monoid_unit G')).
auto with algebra.
auto with algebra.
auto with algebra.
Defined.

Definition group_hom_inv : forall f : Hom G G', Hom G G'.
intros f0.
apply
 (BUILD_HOM_GROUP (G:=G) (G':=G') (ff:=fun x : G => group_inverse G' (f0 x))).
auto with algebra.
intros x y; try assumption.
apply
 Trans
  with
    (Ap (sgroup_map (monoid_sgroup_hom f0))
       (group_inverse G (sgroup_law G x y))); auto with algebra.
apply
 Trans
  with
    (Ap (sgroup_map (monoid_sgroup_hom f0))
       (sgroup_law G (group_inverse G y) (group_inverse G x)));
 auto with algebra.
apply
 Trans
  with
    (sgroup_law G'
       (Ap (sgroup_map (monoid_sgroup_hom f0)) (group_inverse G y))
       (Ap (sgroup_map (monoid_sgroup_hom f0)) (group_inverse G x)));
 auto with algebra.
apply
 Trans
  with
    (sgroup_law G'
       (Ap (sgroup_map (monoid_sgroup_hom f0)) (group_inverse G x))
       (Ap (sgroup_map (monoid_sgroup_hom f0)) (group_inverse G y)));
 auto with algebra.
apply
 Trans
  with
    (Ap (sgroup_map (monoid_sgroup_hom f0)) (group_inverse G (monoid_unit G)));
 auto with algebra.
apply Trans with (Ap (sgroup_map (monoid_sgroup_hom f0)) (monoid_unit G));
 auto with algebra.
Defined.

Definition group_hom : ABELIAN_GROUP.
apply
 (BUILD_ABELIAN_GROUP (E:=Hom G G') (genlaw:=group_hom_law)
    (e:=group_hom_unit) (geninv:=group_hom_inv)).
intros x x' y y' H' H'0; try assumption.
simpl in |- *.
red in |- *.
simpl in |- *.
auto with algebra.
intros x y z; try assumption.
simpl in |- *.
red in |- *.
simpl in |- *.
auto with algebra.
intros x; try assumption.
simpl in |- *.
red in |- *.
simpl in |- *.
auto with algebra.
intros x y H'; try assumption.
simpl in |- *.
red in |- *.
simpl in |- *.
auto with algebra.
intros x; try assumption.
simpl in |- *.
red in |- *.
simpl in |- *.
auto with algebra.
intros x y; try assumption.
simpl in |- *.
red in |- *.
simpl in |- *.
auto with algebra.
Defined.

Lemma group_hom_law_prop :
 forall (f g : group_hom) (x : G),
 Equal (sgroup_law _ f g x) (sgroup_law _ (f x) (g x)).
simpl in |- *; auto with algebra.
Qed.

Lemma group_hom_unit_prop :
 forall x : G, Equal (monoid_unit group_hom x) (monoid_unit G').
simpl in |- *; auto with algebra.
Qed.

Lemma group_hom_inv_prop :
 forall (f : group_hom) (x : G),
 Equal (group_inverse group_hom f x) (group_inverse G' (f x)).
simpl in |- *; auto with algebra.
Qed.
End Def.
Hint Resolve group_hom_law_prop group_hom_unit_prop group_hom_inv_prop:
  algebra.