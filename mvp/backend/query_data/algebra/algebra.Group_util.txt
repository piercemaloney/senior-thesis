
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_group.
(* Sub_group:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sub_monoid.
Require Export Group_facts.
Section Def.
Variable G : GROUP.
Section Sub_group.
Variable H : submonoid G.
Hypothesis Hinv : forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition subgroup_inv : MAP H H.

Definition subgroup_group : group.
End Sub_group.

Record subgroup : Type := 
  {subgroup_submonoid : submonoid G;
   subgroup_prop :
    forall x : G,
    in_part x subgroup_submonoid ->
    in_part (group_inverse _ x) subgroup_submonoid}.

Definition group_of_subgroup (H : subgroup) :=
  subgroup_group (subgroup_prop (s:=H)).
End Def.
Coercion group_of_subgroup : subgroup >-> group.
Coercion subgroup_submonoid : subgroup >-> submonoid.
Section Injection.
Variable G : GROUP.
Variable H : subgroup G.

Lemma subgroup_in_prop :
 forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition inj_subgroup : Hom (H:GROUP) G.

Lemma inj_subgroup_injective : injective inj_subgroup.
End Injection.
Hint Resolve subgroup_in_prop inj_subgroup_injective: algebra. *)
Require Export Abelian_group_cat.
(* Abelian_group_cat:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Group_cat.

Definition commutative (E : SET) (f : law_of_composition E) :=
  forall x y : E, Equal (f (couple x y)) (f (couple y x)).

Record abelian_sgroup_on (A : sgroup) : Type := 
  {abelian_sgroup_com_prf : commutative (sgroup_law_map A)}.

Record abelian_sgroup : Type := 
  {abelian_sgroup_sgroup :> sgroup;
   abelian_sgroup_on_def :> abelian_sgroup_on abelian_sgroup_sgroup}.
Coercion Build_abelian_sgroup : abelian_sgroup_on >-> abelian_sgroup.

Definition ABELIAN_SGROUP :=
  full_subcat (C:=SGROUP) (C':=abelian_sgroup) abelian_sgroup_sgroup.

Record abelian_monoid_on (M : monoid) : Type := 
  {abelian_monoid_abelian_sgroup :> abelian_sgroup_on M}.

Record abelian_monoid : Type := 
  {abelian_monoid_monoid :> monoid;
   abelian_monoid_on_def :> abelian_monoid_on abelian_monoid_monoid}.
Coercion Build_abelian_monoid : abelian_monoid_on >-> abelian_monoid.

Definition ABELIAN_MONOID :=
  full_subcat (C:=MONOID) (C':=abelian_monoid) abelian_monoid_monoid.

Record abelian_group_on (G : group) : Type := 
  {abelian_group_abelian_monoid :> abelian_monoid_on G}.

Record abelian_group : Type := 
  {abelian_group_group :> group;
   abelian_group_on_def :> abelian_group_on abelian_group_group}.
Coercion Build_abelian_group : abelian_group_on >-> abelian_group.

Definition ABELIAN_GROUP :=
  full_subcat (C:=GROUP) (C':=abelian_group) abelian_group_group. *)

Section Group.
Variable E : Setoid.
Variable genlaw : E -> E -> E.
Variable e : E.
Variable geninv : E -> E.
Hypothesis
  fcomp :
    forall x x' y y' : E,
    Equal x x' -> Equal y y' -> Equal (genlaw x y) (genlaw x' y').
Hypothesis
  genlawassoc :
    forall x y z : E, Equal (genlaw (genlaw x y) z) (genlaw x (genlaw y z)).
Hypothesis eunitgenlawr : forall x : E, Equal (genlaw x e) x.
Hypothesis invcomp : forall x y : E, Equal x y -> Equal (geninv x) (geninv y).
Hypothesis geninvr : forall x : E, Equal (genlaw x (geninv x)) e.

Lemma geninvl : forall x : E, Equal (genlaw (geninv x) x) e.
intros x; try assumption.
apply Trans with (genlaw (genlaw (geninv x) x) e); auto with algebra.
apply
 Trans
  with (genlaw (genlaw (geninv x) x) (genlaw (geninv x) (geninv (geninv x))));
 auto with algebra.
apply
 Trans
  with (genlaw (geninv x) (genlaw x (genlaw (geninv x) (geninv (geninv x)))));
 auto with algebra.
apply
 Trans
  with (genlaw (geninv x) (genlaw (genlaw x (geninv x)) (geninv (geninv x))));
 auto with algebra.
apply Trans with (genlaw (geninv x) (genlaw e (geninv (geninv x))));
 auto with algebra.
apply Trans with (genlaw (genlaw (geninv x) e) (geninv (geninv x)));
 auto with algebra.
apply Trans with (genlaw (geninv x) (geninv (geninv x))); auto with algebra.
Qed.
Hint Resolve geninvl: algebra.

Lemma eunitgenlawl : forall x : E, Equal (genlaw e x) x.
intros x; try assumption.
apply Trans with (genlaw (genlaw x (geninv x)) x); auto with algebra.
apply Trans with (genlaw x (genlaw (geninv x) x)); auto with algebra.
apply Trans with (genlaw x e); auto with algebra.
Qed.
Hint Resolve eunitgenlawl: algebra.

Definition f := uncurry fcomp.

Lemma fassoc : associative f.
red in |- *.
simpl in |- *; auto with algebra.
Qed.

Lemma eunitr : unit_r f e.
red in |- *.
simpl in |- *; auto with algebra.
Qed.

Lemma eunitl : unit_l f e.
red in |- *.
simpl in |- *; auto with algebra.
Qed.

Definition inv := Build_Map (Ap:=geninv) invcomp.

Lemma invr : inverse_r f e inv.
red in |- *.
simpl in |- *; auto with algebra.
Qed.

Lemma invl : inverse_l f e inv.
red in |- *.
simpl in |- *; auto with algebra.
Qed.

Definition sg := Build_sgroup (Build_sgroup_on fassoc).

Definition m :=
  Build_monoid (Build_monoid_on (A:=sg) (monoid_unit:=e) eunitr eunitl).

Definition BUILD_GROUP : GROUP :=
  Build_group (Build_group_on (G:=m) (group_inverse_map:=inv) invr invl).
End Group.
Section Abelian_group.
Variable E : Setoid.
Variable genlaw : E -> E -> E.
Variable e : E.
Variable geninv : E -> E.
Hypothesis
  fcomp :
    forall x x' y y' : E,
    Equal x x' -> Equal y y' -> Equal (genlaw x y) (genlaw x' y').
Hypothesis
  genlawassoc :
    forall x y z : E, Equal (genlaw (genlaw x y) z) (genlaw x (genlaw y z)).
Hypothesis eunitgenlawr : forall x : E, Equal (genlaw x e) x.
Hypothesis invcomp : forall x y : E, Equal x y -> Equal (geninv x) (geninv y).
Hypothesis geninvr : forall x : E, Equal (genlaw x (geninv x)) e.
Hypothesis fcom : forall x y : E, Equal (genlaw x y) (genlaw y x).

Definition G := BUILD_GROUP fcomp genlawassoc eunitgenlawr invcomp geninvr.

Definition asg : abelian_sgroup.
apply (Build_abelian_sgroup (abelian_sgroup_sgroup:=G)).
apply (Build_abelian_sgroup_on (A:=G)).
abstract (red in |- *; simpl in |- *; auto with algebra).
Defined.

Definition BUILD_ABELIAN_GROUP : ABELIAN_GROUP :=
  Build_abelian_group
    (Build_abelian_group_on (G:=G)
       (Build_abelian_monoid (Build_abelian_monoid_on (M:=G) asg))).
End Abelian_group.
Section Hom.
Variable G G' : GROUP.
Variable ff : G -> G'.
Hypothesis ffcomp : forall x y : G, Equal x y -> Equal (ff x) (ff y).
Hypothesis
  fflaw :
    forall x y : G,
    Equal (ff (sgroup_law _ x y)) (sgroup_law _ (ff x) (ff y)).
Hypothesis ffunit : Equal (ff (monoid_unit G)) (monoid_unit G').

Definition f2 := Build_Map ffcomp.

Definition fhomsg := Build_sgroup_hom (sgroup_map:=f2) fflaw.

Definition BUILD_HOM_GROUP : Hom G G' :=
  Build_monoid_hom (monoid_sgroup_hom:=fhomsg) ffunit.
End Hom.
Section Build_sub_group.
Variable G : GROUP.
Variable H : part_set G.
Hypothesis
  Hlaw :
    forall x y : G,
    in_part x H -> in_part y H -> in_part (sgroup_law _ x y) H.
Hypothesis Hunit : in_part (monoid_unit G) H.
Hypothesis Hinv : forall x : G, in_part x H -> in_part (group_inverse _ x) H.

Definition BUILD_SUB_GROUP : subgroup G :=
  Build_subgroup (G:=G)
    (subgroup_submonoid:=Build_submonoid (G:=G)
                           (submonoid_subsgroup:=Build_subsgroup Hlaw) Hunit)
    Hinv.
End Build_sub_group.