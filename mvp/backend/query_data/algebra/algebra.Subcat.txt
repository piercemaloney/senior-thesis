
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Categories.
(* Categories:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Cartesian.

Comments "Some basic category theory.".
Section Category_def.
Section Category_def1.
Variable Ob : Type.
Variable Hom : Ob -> Ob -> Setoid.
Variable
  Hom_comp : forall a b c : Ob, MAP (cart (Hom b c) (Hom a b)) (Hom a c).
Variable Hom_id : forall a : Ob, Hom a a.

Definition Hom_comp_assoc :=
  forall (a b c d : Ob) (f : Hom a b) (g : Hom b c) (h : Hom c d),
  Equal (Hom_comp a b d (couple (Hom_comp b c d (couple h g)) f))
    (Hom_comp a c d (couple h (Hom_comp a b c (couple g f)))).

Definition Hom_comp_unit_l :=
  forall (a b : Ob) (f : Hom a b),
  Equal (Hom_comp a b b (couple (Hom_id b) f)) f.

Definition Hom_comp_unit_r :=
  forall (a b : Ob) (f : Hom a b),
  Equal (Hom_comp a a b (couple f (Hom_id a))) f.
End Category_def1.

Record category : Type := 
  {Ob :> Type;
   Hom : Ob -> Ob -> Setoid;
   Hom_comp : forall a b c : Ob, MAP (cart (Hom b c) (Hom a b)) (Hom a c);
   Hom_id : forall a : Ob, Hom a a;
   Hom_comp_assoc_prf : Hom_comp_assoc Hom_comp;
   Hom_comp_unit_l_prf : Hom_comp_unit_l Hom_comp Hom_id;
   Hom_comp_unit_r_prf : Hom_comp_unit_r Hom_comp Hom_id}.
Section Category_comp.
Variable C : category.

Definition comp_hom (a b c : C) (g : Hom b c) (f : Hom a b) :=
  Hom_comp a b c (couple g f).

Lemma comp_hom_compatible :
 forall (a b c : C) (x x' : Hom b c) (y y' : Hom a b),
 Equal x x' -> Equal y y' -> Equal (comp_hom x y) (comp_hom x' y').

Lemma comp_hom_assoc :
 forall (a b c d : C) (f : Hom a b) (g : Hom b c) (h : Hom c d),
 Equal (comp_hom (comp_hom h g) f) (comp_hom h (comp_hom g f)).

Lemma comp_hom_unit_l :
 forall (a b : C) (f : Hom a b), Equal (comp_hom (Hom_id b) f) f.

Lemma comp_hom_unit_r :
 forall (a b : C) (f : Hom a b), Equal (comp_hom f (Hom_id a)) f.
End Category_comp.
Hint Resolve comp_hom_compatible comp_hom_assoc comp_hom_unit_l
  comp_hom_unit_r: algebra.
Section Full_subcat_def.
Variable C : category.
Variable C' : Type.
Variable i : C' -> C.

Definition fsubcat_Hom (a b : C') := Hom (i a) (i b).

Definition fsubcat_Hom_comp :
  forall a b c : C',
  MAP (cart (fsubcat_Hom b c) (fsubcat_Hom a b)) (fsubcat_Hom a c).

Definition fsubcat_Hom_id (a : C') := Hom_id (i a).

Definition full_subcat : category.
End Full_subcat_def.
End Category_def.
Hint Resolve comp_hom_compatible comp_hom_assoc comp_hom_unit_l
  comp_hom_unit_r: algebra. *)
Require Export Parts.
(* Parts:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Sets.

Comments
  "We define here the set of parts of a set, inclusion, union of a part,".
Comments
  "and we prove that there is no surjection from a set in its part set".
Section Subtype.
Comments "In Coq type theory, there is no primitive notion of subtype".
Comments "Then we have to define such a notion".
Variable E : Setoid.
Variable F : Type.
Variable i : F -> E.
Comments "We have implicitely defined a subset of" E "which is the image of"
  i ".".
Comments "As a setoid, this subset has" F
  " as carrier, and we identify two elements of" F
  "which have the same image by" i ":".

Definition subtype_image_equal (x y : F) : Prop := Equal (i x) (i y).

Lemma subtype_image_equiv : equivalence subtype_image_equal.

Definition subtype_image_set : Setoid := Build_Setoid subtype_image_equiv.
End Subtype.
Section Part_type.
Comments "We define now a general structure for this kind of subset:".
Variable E : Setoid.

Record subtype_image : Type := 
  {subtype_image_carrier : Type;
   subtype_image_inj :> subtype_image_carrier -> E}.

Definition set_of_subtype_image (S : subtype_image) :=
  subtype_image_set (subtype_image_inj (s:=S)).
Comments "Parts of" E "will be nothing more than predicates on" E
  " which are compatible with equality:".

Definition pred_compatible (P : E -> Prop) : Prop :=
  forall x y : E, P x -> Equal y x -> (P y:Prop).

Record Predicate : Type := 
  {Pred_fun : E -> Prop; Pred_compatible_prf : pred_compatible Pred_fun:Prop}.
Variable P : Predicate.
Comments "The type of elements of the subset defined by" P
  "is the following:".

Record subtype : Type := 
  {subtype_elt : E; subtype_prf : Pred_fun P subtype_elt:Prop}.
Comments "Then elements of subsets are composed of an element of" E
  "and a proof that they verify the predicate" "given by" P.
Comments "We can now define the subset of" E "defined by the predicate" P ":".

Definition part :=
  Build_subtype_image (subtype_image_carrier:=subtype) subtype_elt.
End Part_type.
Comments "We can see a subset as a set with these coercions:".
Coercion set_of_subtype_image : subtype_image >-> Setoid.
Coercion part : Predicate >-> subtype_image.
Comments "We define" (in_part x A) "for elements of" E ":".

Definition in_part (E : Setoid) (x : E) (A : Predicate E) := Pred_fun A x.
Section Part_set.
Variable E : Setoid.
Comments "The equality between parts of" E ":".

Definition eq_part (A B : Predicate E) : Prop :=
  forall x : E, (in_part x A -> in_part x B) /\ (in_part x B -> in_part x A).

Let eq_part_equiv : equivalence eq_part.
Comments "We define the set" (part_set E) "of all parts of" E
  ", with its equality:".

Definition part_set : Setoid := Build_Setoid eq_part_equiv.
Comments "The empty part" (empty E) ":".
Hint Unfold pred_compatible: algebra.

Definition empty : part_set.
Comments "And the full part:".

Definition full : part_set.
End Part_set.
Hint Unfold pred_compatible: algebra.
Section Inclusion.
Variable E : Setoid.
Comments "The relation of belonging is compatible with equality:".

Lemma in_part_comp_l :
 forall (A : part_set E) (x y : E), in_part x A -> Equal y x -> in_part y A.

Lemma in_part_comp_r :
 forall (x : E) (A B : part_set E), in_part x A -> Equal A B -> in_part x B.

Lemma empty_prop : forall x : E, ~ in_part x (empty E).
Hint Resolve empty_prop: algebra.

Lemma full_prop : forall x : E, in_part x (full E).
Hint Resolve full_prop: algebra.

Definition full_to_set : MAP (full E) E.

Definition set_to_full : MAP E (full E).

Lemma set_full_set : Equal (comp_map_map full_to_set set_to_full) (Id E).

Lemma full_set_full :
 Equal (comp_map_map set_to_full full_to_set) (Id (full E)).
Comments "The inclusion of parts:".

Definition included (A B : part_set E) : Prop :=
  forall x : E, in_part x A -> in_part x B.
Comments "The relation of inclusion is an order relation:".

Lemma included_refl : forall A : part_set E, included A A.
Hint Resolve included_refl: algebra.

Lemma included_antisym :
 forall A B : part_set E, included A B -> included B A -> Equal A B.

Lemma included_trans :
 forall A B C : part_set E, included A B -> included B C -> included A C.
Comments "The inclusion relation is compatible with equality:".

Lemma included_comp :
 forall A A' B B' : part_set E,
 Equal A A' -> Equal B B' -> included A B -> included A' B'.

Lemma eq_part_included : forall A B : part_set E, Equal A B -> included A B.
Hint Resolve eq_part_included: algebra.

Lemma empty_included : forall A : part_set E, included (empty E) A.

Lemma full_included : forall A : part_set E, included A (full E).
Hint Resolve empty_included full_included: algebra.

Definition inj_part : forall A : part_set E, MAP A E.

Lemma inj_part_injective : forall A : part_set E, injective (inj_part A).

Definition inj_part_included :
  forall A B : part_set E, included A B -> MAP A B.

Lemma inj_part_included_prop :
 forall (A B : part_set E) (p : included A B) (x : A),
 Equal (B (inj_part_included p x)) (A x).

Lemma inj_part_included_injective :
 forall (A B : part_set E) (p : included A B),
 injective (inj_part_included p).

Definition id_map_parts_equal : forall A B : part_set E, Equal A B -> MAP A B.

Lemma id_map_parts_equal_prop :
 forall (A B : part_set E) (p : Equal A B) (x : A),
 Equal (subtype_elt (id_map_parts_equal p x)) (subtype_elt x).
End Inclusion.
Section Union_of_part.
Variable E : Setoid.
Comments "We define the union of a part of" (part_set E).
Variable P : part_set (part_set E).

Definition union_part : part_set E.

Lemma union_part_prop :
 forall x : E,
 in_part x union_part -> exists A : part_set E, in_part A P /\ in_part x A.

Lemma union_part_prop_rev :
 forall A : part_set E,
 in_part A P -> forall x : E, in_part x A -> in_part x union_part.

Lemma union_part_included :
 forall A : part_set E, in_part A P -> included A union_part.

Lemma union_part_upper_bound :
 forall Y : part_set E,
 (forall A : part_set E, in_part A P -> included A Y) ->
 included union_part Y.
End Union_of_part.
Section Part_set_greater.
Comments "A nice theorem:".
Variable E : Setoid.
Variable f : MAP E (part_set E).
Hypothesis fsurj : surjective f.

Let X_def (x : E) : Prop := ~ in_part x (f x).

Let X : part_set E.

Let invX : exists x : E, Equal X (f x).

Lemma not_inpart_comp_r :
 forall (E : Setoid) (x : E) (A B : part_set E),
 ~ in_part x A -> Equal A B -> ~ in_part x B.

Theorem part_set_is_strictly_greater_than_set1 : False.
End Part_set_greater.

Theorem part_set_is_strictly_greater_than_set :
 forall (E : Setoid) (f : MAP E (part_set E)), ~ surjective f.
Hint Unfold pred_compatible: algebra.
Hint Resolve empty_prop full_prop included_refl eq_part_included
  empty_included full_included inj_part_injective inj_part_included_injective
  id_map_parts_equal_prop union_part_included union_part_upper_bound
  not_inpart_comp_r: algebra. *)

Section Subcategory_def.
Variable C : category.
Variable C' : Type.
Variable i : C' -> C.
Variable homC' : forall a b : C', subtype_image (Hom (i a) (i b)).

Definition subcat_Hom (a b : C') := homC' a b:Setoid.
Variable
  CompC' :
    forall a b c : C', subcat_Hom b c -> subcat_Hom a b -> subcat_Hom a c.
Variable idC' : forall a : C', subcat_Hom a a.
Hypothesis
  idC'ok : forall a : C', Equal (subtype_image_inj (idC' a)) (Hom_id (i a)).
Hypothesis
  CompC'_ok :
    forall (a b c : C') (g : subcat_Hom b c) (f : subcat_Hom a b),
    Equal (subtype_image_inj (CompC' g f))
      (comp_hom (subtype_image_inj g) (subtype_image_inj f)).

Definition subcat_Hom_comp :
  forall a b c : C',
  MAP (cart (subcat_Hom b c) (subcat_Hom a b)) (subcat_Hom a c).
intros a b c; try assumption.
apply
 (Build_Map (A:=cart (subcat_Hom b c) (subcat_Hom a b)) (B:=
    subcat_Hom a c)
    (Ap:=fun x : cart (subcat_Hom b c) (subcat_Hom a b) =>
         CompC' (proj1 x) (proj2 x))).
red in |- *.
intros x y H'; try assumption.
simpl in |- *.
unfold subtype_image_equal in |- *.
apply
 Trans
  with (comp_hom (subtype_image_inj (proj1 x)) (subtype_image_inj (proj2 x)));
 auto with algebra.
apply
 Trans
  with (comp_hom (subtype_image_inj (proj1 y)) (subtype_image_inj (proj2 y)));
 auto with algebra.
apply comp_hom_compatible.
cut (Equal (proj1 x) (proj1 y)).
auto with algebra.
auto with algebra.
cut (Equal (proj2 x) (proj2 y)).
auto with algebra.
auto with algebra.
Defined.

Definition subcat : category.
apply
 (Build_category (Ob:=C') (Hom:=subcat_Hom) (Hom_comp:=subcat_Hom_comp)
    (Hom_id:=idC')).
red in |- *.
unfold subcat_Hom_comp in |- *.
simpl in |- *.
unfold subtype_image_equal in |- *.
intros a b c d f g h; try assumption.
apply
 Trans with (comp_hom (subtype_image_inj (CompC' h g)) (subtype_image_inj f));
 auto with algebra.
apply
 Trans
  with
    (comp_hom (comp_hom (subtype_image_inj h) (subtype_image_inj g))
       (subtype_image_inj f)); auto with algebra.
apply
 Trans with (comp_hom (subtype_image_inj h) (subtype_image_inj (CompC' g f)));
 auto with algebra.
apply
 Trans
  with
    (comp_hom (subtype_image_inj h)
       (comp_hom (subtype_image_inj g) (subtype_image_inj f)));
 auto with algebra.
red in |- *.
unfold subcat_Hom_comp in |- *.
simpl in |- *.
unfold subtype_image_equal in |- *.
intros a b f; try assumption.
apply
 Trans with (comp_hom (subtype_image_inj (idC' b)) (subtype_image_inj f));
 auto with algebra.
apply Trans with (comp_hom (Hom_id (i b)) (subtype_image_inj f));
 auto with algebra.
red in |- *.
unfold subcat_Hom_comp in |- *.
simpl in |- *.
unfold subtype_image_equal in |- *.
intros a b f; try assumption.
apply
 Trans with (comp_hom (subtype_image_inj f) (subtype_image_inj (idC' a)));
 auto with algebra.
apply Trans with (comp_hom (subtype_image_inj f) (Hom_id (i a)));
 auto with algebra.
Defined.
End Subcategory_def.