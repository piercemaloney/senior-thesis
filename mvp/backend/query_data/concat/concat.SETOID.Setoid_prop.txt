
Require Export Map.
(* Map:
Require Export Setoid.

Set Implicit Arguments.
Unset Strict Implicit.

Section maps.

Variable A B : Setoid.

Definition Map_law (f : A -> B) := forall x y : A, x =_S y -> f x =_S f y.

Structure > Map : Type :=  {Ap :> A -> B; Pres :> Map_law Ap}.

Lemma Pres1 : forall (m : Map) (x y : A), x =_S y -> m x =_S m y.

Definition Ext (f g : Map) := forall x : A, f x =_S g x.

Lemma Ext_equiv : Equivalence Ext.

Canonical Structure Map_setoid : Setoid := Ext_equiv.

End maps.

Infix "=_M" := Ext (at level 70).
Infix "==>" := Map_setoid (at level 95, right associativity).

Section id_map_def.

Variable A : Setoid.

Definition Id_fun (x : A) := x.
     
Lemma Id_fun_map_law : Map_law Id_fun.

Canonical Structure Id_map : Map A A := Id_fun_map_law.
  
End id_map_def.
 
Section mcomp.

Variables (A B C : Setoid) (f : Map A B) (g : Map B C).

Definition Comp_fun (x : A) := g (f x).

Lemma Comp_fun_map_law : Map_law Comp_fun.

Canonical Structure Comp_map : Map A C := Comp_fun_map_law.

End mcomp.

Infix "o_M" := Comp_map (at level 20, right associativity). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section sub_setoid.

Variable U : Setoid.

Definition Reg_law (A : U -> Prop) := forall x y : U, x =_S y -> A x -> A y.

Structure > Setoid_pred : Type := 
  {Pred :> U -> Prop; Prf_reg :> Reg_law Pred}.

Variable A : Setoid_pred.

Structure SubType : Type :=  {Elt_sub : U; Prf_constr : A Elt_sub}.

Definition Equal_SubType (a b : SubType) := Elt_sub a =_S Elt_sub b.

Lemma Equal_SubType_equiv : Equivalence Equal_SubType.
Proof.
apply Build_Equivalence.
unfold Reflexive in |- *; intro x; exact (Refl (Elt_sub x)).
apply Build_Partial_equivalence.
unfold Transitive in |- *; intros a b c H1 H2; unfold Equal_SubType in |- *.
apply Trans with (Elt_sub b); auto.
unfold Symmetric in |- *; intros a b H; unfold Equal_SubType in |- *.
apply Sym; auto.
Qed.

Canonical Structure SubSetoid : Setoid := Equal_SubType_equiv.

End sub_setoid.

Section restricted_map.

Variables (A B : Setoid) (f : Map A B) (P : Setoid_pred A).

Definition Restricted_fun (a : SubSetoid P) := f (Elt_sub a).

Lemma Restricted_map_law : Map_law Restricted_fun.
Proof.
unfold Map_law in |- *; simpl in |- *.
unfold Equal_SubType in |- *; intros a1 a2 H.
unfold Restricted_fun in |- *; apply Pres1; trivial.
Qed.

Canonical Structure RestrictedMap := Build_Map Restricted_map_law.

End restricted_map.

