
Require Export Setoid.
(* Setoid:
Require Export Relations.

Set Implicit Arguments.
Unset Strict Implicit.
Global Set Asymmetric Patterns.

Structure > Setoid : Type := 
  {Carrier :> Type; Equal : Relation Carrier; Prf_equiv :> Equivalence Equal}.

Infix "=_S" := Equal (at level 70).

Lemma Refl : forall (S : Setoid) (x : S), x =_S x.

Lemma Sym : forall (S : Setoid) (x y : S), x =_S y -> y =_S x.

Lemma Trans : forall (S : Setoid) (x y z : S), x =_S y -> y =_S z -> x =_S z.

Inductive Nat : Type :=
  | Z : Nat
  | Suc : Nat -> Nat.

Definition Eq_Nat (N1 N2 : Nat) := N1 = N2.

Lemma Eq_Nat_equiv : Equivalence Eq_Nat.
 
Definition Set_of_nat : Setoid := Eq_Nat_equiv.

Structure > PSetoid : Type := 
  {PCarrier :> Type;
   Coherence : Relation PCarrier;
   Prf_PER :> Partial_equivalence Coherence}.

Definition Total (A : PSetoid) (x : A) := Coherence x x. *)
Require Export BasicTypes.
(* BasicTypes:
Inductive EmptyType : Type :=.

Inductive UnitType : Set :=
    Elt : UnitType.

Hint Resolve Elt.

Inductive TwoElts : Type :=
  | Elt1 : TwoElts
  | Elt2 : TwoElts. *)

Set Implicit Arguments.
Unset Strict Implicit.

Definition Equal_Single (a b : UnitType) := True.

Lemma Equal_Single_equiv : Equivalence Equal_Single.
Proof.
unfold Equal_Single in |- *; apply Build_Equivalence;
 [ trivial | apply Build_Partial_equivalence ]; red in |- *; 
 trivial.
Qed.

Canonical Structure Single : Setoid := Equal_Single_equiv.

Hint Resolve Elt.

