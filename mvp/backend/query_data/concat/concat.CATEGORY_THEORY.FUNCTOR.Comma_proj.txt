

Require Export Comma.



Set Implicit Arguments.

Unset Strict Implicit.



Section comma_proj_def.



Variables (A X : Category) (G : Functor A X) (x : X).



Definition Comma_proj_ob (a : Com_ob G x) := Ob_com_ob a.



 Section comma_proj_map_def.



 Variable a b : Com_ob G x.



 Definition Comma_proj_mor (f : a --> b) := Mor_com_arrow f.



 Lemma Comma_proj_map_law : Map_law Comma_proj_mor.

 Proof.

 unfold Map_law, Comma_proj_mor in |- *; simpl in |- *.

 intros f g; unfold Equal_com_arrow in |- *; auto.

 Qed.



 Definition Comma_proj_map := Build_Map Comma_proj_map_law.



 End comma_proj_map_def.



Lemma Comma_proj_comp_law : Fcomp_law Comma_proj_map.

Proof.

unfold Fcomp_law in |- *; simpl in |- *.

intros a b c f g; unfold Comp_com_arrow, Comma_proj_mor in |- *.

apply Refl.

Qed.



Lemma Comma_proj_id_law : Fid_law Comma_proj_map.

Proof.

unfold Fid_law in |- *; simpl in |- *.

intro a; apply Refl.

Qed.



Canonical Structure Comma_proj :=

  Build_Functor Comma_proj_comp_law Comma_proj_id_law.



End comma_proj_def.

