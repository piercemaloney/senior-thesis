
Require Export Comma.
(* Comma:
Require Export Functor.

Set Implicit Arguments.
Unset Strict Implicit.

Section comma_def.

Variables (A X : Category) (G : Functor A X) (x : X).

Structure Com_ob : Type :=  {Ob_com_ob : A; Mor_com_ob : x --> G Ob_com_ob}.

 Section com_arrow_def.

 Variable axf bxg : Com_ob.
 
 Definition Com_law (h : Ob_com_ob axf --> Ob_com_ob bxg) :=
   Mor_com_ob bxg =_S Mor_com_ob axf o FMor G h.

 Structure > Com_arrow : Type := 
   {Mor_com_arrow : Ob_com_ob axf --> Ob_com_ob bxg;
    Prf_com_law :> Com_law Mor_com_arrow}.

 Definition Equal_com_arrow (h h' : Com_arrow) :=
   Mor_com_arrow h =_S Mor_com_arrow h'.

 Lemma Equal_com_arrow_equiv : Equivalence Equal_com_arrow.

 Canonical Structure Com_arrow_setoid : Setoid := Equal_com_arrow_equiv.

 End com_arrow_def. 

 Section comp_com_def.

 Variables (axf bxg cxh : Com_ob) (f : Com_arrow axf bxg)
   (g : Com_arrow bxg cxh).

 Definition Comp_com_mor := Mor_com_arrow f o Mor_com_arrow g.

 Lemma Comp_com_law : Com_law Comp_com_mor.

 Canonical Structure Comp_com_arrow := Build_Com_arrow Comp_com_law.

 End comp_com_def.
 
Lemma Comp_com_congl : Congl_law Comp_com_arrow.

Lemma Comp_com_congr : Congr_law Comp_com_arrow.

Definition Comp_Comma := Build_Comp Comp_com_congl Comp_com_congr. 

Lemma Assoc_Comma : Assoc_law Comp_Comma.

Lemma Id_com_law : forall axf : Com_ob, Com_law (Id (Ob_com_ob axf)).

Canonical Structure Id_Comma (axf : Com_ob) :=
  Build_Com_arrow (Id_com_law axf).

Lemma Idl_Comma : Idl_law Comp_Comma Id_Comma.

Lemma Idr_Comma : Idr_law Comp_Comma Id_Comma.

Canonical Structure Comma := Build_Category Assoc_Comma Idl_Comma Idr_Comma.

End comma_def. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section comma_proj_def.

Variables (A X : Category) (G : Functor A X) (x : X).

Definition Comma_proj_ob (a : Com_ob G x) := Ob_com_ob a.

 Section comma_proj_map_def.

 Variable a b : Com_ob G x.

 Definition Comma_proj_mor (f : a --> b) := Mor_com_arrow f.

 Lemma Comma_proj_map_law : Map_law Comma_proj_mor.
 Proof.
 unfold Map_law, Comma_proj_mor in |- *; simpl in |- *.
 intros f g; unfold Equal_com_arrow in |- *; auto.
 Qed.

 Definition Comma_proj_map := Build_Map Comma_proj_map_law.

 End comma_proj_map_def.

Lemma Comma_proj_comp_law : Fcomp_law Comma_proj_map.
Proof.
unfold Fcomp_law in |- *; simpl in |- *.
intros a b c f g; unfold Comp_com_arrow, Comma_proj_mor in |- *.
apply Refl.
Qed.

Lemma Comma_proj_id_law : Fid_law Comma_proj_map.
Proof.
unfold Fid_law in |- *; simpl in |- *.
intro a; apply Refl.
Qed.

Canonical Structure Comma_proj :=
  Build_Functor Comma_proj_comp_law Comma_proj_id_law.

End comma_proj_def.
