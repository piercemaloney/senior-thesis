
Require Export Ntransformation.
(* Ntransformation:
Require Export Functor.
Require Export Setoid_dup2.

Set Implicit Arguments.
Unset Strict Implicit.

Section nt_def.

Variables (C D : Category) (F G : Functor C D).

Definition NT_law (T : forall a : C, F a --> G a) :=
  forall (a b : C) (f : a --> b), FMor F f o T b =_S T a o FMor G f.

Structure > NT : Type := 
  {ApNT :> forall a : C, F a --> G a; Prf_NT_law :> NT_law ApNT}.

Lemma NatCond :
 forall (T : NT) (a b : C) (f : a --> b), FMor F f o T b =_S T a o FMor G f.

Lemma NatCond1 :
 forall (T : NT) (a b : C) (f : a --> b), T a o FMor G f =_S FMor F f o T b.

End nt_def.

Section setoid_nt.

Variables (C D : Category) (F G : Functor C D).

Definition Equal_NT (T T' : NT F G) := forall a : C, T a =_S T' a.

Lemma Equal_NT_equiv : Equivalence Equal_NT.

Canonical Structure NT_setoid : Setoid'' := Equal_NT_equiv.

End setoid_nt.

Infix "=_NT" := Equal_NT (at level 70). *)
Require Export Category_dup2.
(* Category_dup2:
Require Export Setoid_dup2.

Set Implicit Arguments.
Unset Strict Implicit.

Section composition_to_operator''.

Variables (A : Type) (H : A -> A -> Setoid'')
  (Cfun : forall a b c : A, H a b -> H b c -> H a c).

Definition Congl_law'' :=
  forall (a b c : A) (f g : H b c) (h : H a b),
  f =_S'' g -> Cfun h f =_S'' Cfun h g. 

Definition Congr_law'' :=
  forall (a b c : A) (f g : H a b) (h : H b c),
  f =_S'' g -> Cfun f h =_S'' Cfun g h. 

Definition Cong_law'' :=
  forall (a b c : A) (f f' : H a b) (g g' : H b c),
  f =_S'' f' -> g =_S'' g' -> Cfun f g =_S'' Cfun f' g'. 

Hypothesis pcgl : Congl_law''.
Hypothesis pcgr : Congr_law''.

Variable a b c : A.

Definition Build_Comp'' :=
  Build_Map2'' (pcgl (a:=a) (b:=b) (c:=c)) (pcgr (a:=a) (b:=b) (c:=c)).

End composition_to_operator''.

Section cat''.

Variables (Ob'' : Type) (Hom'' : Ob'' -> Ob'' -> Setoid'').

Variable
  Op_comp'' : forall a b c : Ob'', Map2'' (Hom'' a b) (Hom'' b c) (Hom'' a c).

Definition Cat_comp'' (a b c : Ob'') (f : Hom'' a b) 
  (g : Hom'' b c) := Op_comp'' a b c f g.

Definition Assoc_law'' :=
  forall (a b c d : Ob'') (f : Hom'' a b) (g : Hom'' b c) (h : Hom'' c d),
  Cat_comp'' f (Cat_comp'' g h) =_S'' Cat_comp'' (Cat_comp'' f g) h.

Variable Id'' : forall a : Ob'', Hom'' a a.

Definition Idl_law'' :=
  forall (a b : Ob'') (f : Hom'' a b), Cat_comp'' (Id'' _) f =_S'' f.

Definition Idr_law'' :=
  forall (a b : Ob'') (f : Hom'' b a), f =_S'' Cat_comp'' f (Id'' _).

End cat''.

Structure Category'' : Type := 
  {Ob'' :> Type;
   Hom'' : Ob'' -> Ob'' -> Setoid'';
   Op_comp'' :
    forall a b c : Ob'', Map2'' (Hom'' a b) (Hom'' b c) (Hom'' a c);
   Id'' : forall a : Ob'', Hom'' a a;
   Prf_ass'' : Assoc_law'' Op_comp'';
   Prf_idl'' : Idl_law'' Op_comp'' Id'';
   Prf_idr'' : Idr_law'' Op_comp'' Id''}.

Definition Comp'' (C : Category'') := Cat_comp'' (Op_comp'' (c:=C)).

Infix "o''" := Comp'' (at level 20, right associativity). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section cat_functor.

Variable C D : Category.

 Section compnt.

 Variables (F G H : Functor C D) (T : NT F G) (T' : NT G H).

 Definition Comp_tau (a : C) := T a o T' a.

 Lemma Comp_tau_nt_law : NT_law Comp_tau.
 Proof.
 unfold Comp_tau in |- *; unfold NT_law in |- *.
 intros a b f.
 
  apply Trans with ((FMor F f o T b) o T' b).
 
 apply Ass.
  
  apply Trans with ((T a o FMor G f) o T' b).        
  
 apply Comp_r; apply NatCond.
  
  apply Trans with (T a o FMor G f o T' b).        
 
 apply Ass1.
  
  apply Trans with (T a o T' a o FMor H f).
 
 apply Comp_l; apply NatCond.
 
 apply Ass.
 Qed.

 Canonical Structure CompV_NT : NT_setoid F H := Comp_tau_nt_law.

 End compnt.

Lemma CompV_NT_congl : Congl_law'' CompV_NT.  
Proof.
unfold Congl_law'' in |- *; simpl in |- *.
unfold Equal_NT, CompV_NT in |- *; simpl in |- *.
intros F G H T1 T2 T3 eqT1_T2 a; unfold Comp_tau in |- *.
apply Comp_l; apply eqT1_T2.
Qed.

Lemma CompV_NT_congr : Congr_law'' CompV_NT.  
Proof.
unfold Congr_law'' in |- *; simpl in |- *.
unfold Equal_NT, CompV_NT in |- *; simpl in |- *.
intros F G H T1 T2 T3 eqT1_T2 a; unfold Comp_tau in |- *.  
apply Comp_r; apply eqT1_T2.
Qed.

Definition Comp_CatFunct := Build_Comp'' CompV_NT_congl CompV_NT_congr.
   
Lemma Assoc_CatFunct : Assoc_law'' Comp_CatFunct.
Proof.
unfold Assoc_law'' in |- *; intros a b c f.
intros T1 T2 T3.
unfold Cat_comp'', Ap2'' in |- *; simpl in |- *.
unfold Equal_NT, CompV_NT in |- *; simpl in |- *.
intro x; unfold Comp_tau in |- *; simpl in |- *.
apply Ass.
Qed.

 Section id_catfunct_def.

 Variable F : Functor C D.

 Definition Id_CatFunct_tau (a : C) := Id (F a).
 
 Lemma Id_CatFunct_nt_law : NT_law Id_CatFunct_tau.
 Proof.
 unfold NT_law, Id_CatFunct_tau in |- *; intros a b f. 
  apply Trans with (FMor F f).
 apply Idr1.
 apply Idl1.
 Qed.
  
 Canonical Structure Id_CatFunct := Build_NT Id_CatFunct_nt_law.

 End id_catfunct_def.

Lemma Idl_CatFunct : Idl_law'' Comp_CatFunct Id_CatFunct.
Proof.
red in |- *; simple induction f.
unfold Comp_CatFunct in |- *; unfold Id_CatFunct in |- *; simpl in |- *.
unfold Equal_NT in |- *; simpl in |- *.
unfold Comp_tau in |- *; simpl in |- *.
unfold Id_CatFunct_tau in |- *; intros.
apply Idl.
Qed.

Lemma Idr_CatFunct : Idr_law'' Comp_CatFunct Id_CatFunct.
Proof.
red in |- *; simple induction f.
unfold Comp_CatFunct in |- *; unfold Id_CatFunct in |- *; simpl in |- *.
unfold Equal_NT in |- *; simpl in |- *.
unfold Comp_tau in |- *; simpl in |- *.
unfold Id_CatFunct_tau in |- *; intros.
apply Idr.
Qed.

Canonical Structure FUNCT :=
  Build_Category'' Assoc_CatFunct Idl_CatFunct Idr_CatFunct.

End cat_functor.

Infix "o_NTv" := CompV_NT (at level 20, right associativity).

