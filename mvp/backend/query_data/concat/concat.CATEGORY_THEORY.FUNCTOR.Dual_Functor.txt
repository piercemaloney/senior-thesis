
Require Export Dual.
(* Dual:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Section d_cat.

Variable C : Category.

Definition DHom (a b : C) := b --> a.

Definition Comp_Darrow (a b c : C) (df : DHom a b) (dg : DHom b c) := dg o df.
                          
Lemma Comp_dual_congl : Congl_law Comp_Darrow.
                          
Lemma Comp_dual_congr : Congr_law Comp_Darrow.

Definition Comp_Dual := Build_Comp Comp_dual_congl Comp_dual_congr.
            
Lemma Assoc_Dual : Assoc_law Comp_Dual.

Lemma Idl_Dual : Idl_law (Hom:=DHom) Comp_Dual (Id (c:=C)).

Lemma Idr_Dual : Idr_law (Hom:=DHom) Comp_Dual (Id (c:=C)).

Canonical Structure Dual := Build_Category Assoc_Dual Idl_Dual Idr_Dual.

End d_cat. *)
Require Export Functor.
(* Functor:
Require Export Setoid_dup1.
Require Export Hom_Equality.

Set Implicit Arguments.
Unset Strict Implicit.

Section funct_def.

Variable C D : Category.

 Section funct_laws.

 Variables (FOb : C -> D)
   (FMap : forall a b : C, Map (a --> b) (FOb a --> FOb b)).

 Definition Fcomp_law :=
   forall (a b c : C) (f : a --> b) (g : b --> c),
   FMap a c (f o g) =_S FMap a b f o FMap b c g.

 Definition Fid_law := forall a : C, FMap a a (Id a) =_S Id (FOb a).

 End funct_laws.

Structure Functor : Type := 
  {FOb :> C -> D;
   FMap : forall a b : C, Map (a --> b) (FOb a --> FOb b);
   Prf_Fcomp_law : Fcomp_law FMap;
   Prf_Fid_law : Fid_law FMap}.

Definition FMor (F : Functor) (a b : C) (f : a --> b) := FMap F a b f.

Lemma FPres :
 forall (F : Functor) (a b : C) (f g : a --> b),
 f =_S g -> FMor F f =_S FMor F g.

Lemma FComp :
 forall (F : Functor) (a b c : C) (f : a --> b) (g : b --> c),
 FMor F (f o g) =_S FMor F f o FMor F g.

Lemma FComp1 :
 forall (F : Functor) (a b c : C) (f : a --> b) (g : b --> c),
 FMor F f o FMor F g =_S FMor F (f o g).

Lemma FId : forall (F : Functor) (a : C), FMor F (Id a) =_S Id (FOb F a).

Lemma FId1 : forall (F : Functor) (a : C), Id (FOb F a) =_S FMor F (Id a).

End funct_def.

Section funct_setoid.

Variable C D : Category. 

Definition Equal_Functor (F G : Functor C D) :=
  forall (a b : C) (f : a --> b), FMor F f =_H FMor G f.

Lemma Equal_Functor_equiv : Equivalence Equal_Functor.

Canonical Structure Functor_setoid := Build_Setoid' Equal_Functor_equiv.

End funct_setoid.

Infix "=_F" := Equal_Functor (at level 70).

Section Comp_F.

Variables (C D E : Category) (G : Functor C D) (H : Functor D E).

Definition Comp_FOb (a : C) := H (G a).

 Section comp_functor_map.

 Variable a b : C.

 Definition Comp_FMor (f : a --> b) := FMor H (FMor G f). 

 Lemma Comp_FMap_law : Map_law Comp_FMor.

 Definition Comp_FMap :=
   Build_Map (B:=Comp_FOb a --> Comp_FOb b) Comp_FMap_law.

 End comp_functor_map.

Lemma Comp_Functor_comp_law : Fcomp_law Comp_FMap.

Lemma Comp_Functor_id_law : Fid_law Comp_FMap.

Canonical Structure Comp_Functor :=
  Build_Functor Comp_Functor_comp_law Comp_Functor_id_law.

End Comp_F.

Infix "o_F" := Comp_Functor (at level 20, right associativity). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section dfunctor_def.

Variables (A B : Category) (F : Functor A B).

Definition DFunctor_ob : Dual A -> Dual B := fun a : A => F a.

Definition DFunctor_map (b a : A) := FMap F a b.

Lemma DFunctor_comp_law : Fcomp_law (FOb:=DFunctor_ob) DFunctor_map.
Proof.
unfold Fcomp_law in |- *; simpl in |- *.
intros a b c f g.
exact (Prf_Fcomp_law F g f).  
Qed.

Lemma DFunctor_id_law : Fid_law (FOb:=DFunctor_ob) DFunctor_map.
Proof.
unfold Fid_law in |- *; simpl in |- *.
intro a; exact (Prf_Fid_law F a).     
Qed.

Canonical Structure Dfunctor :=
  Build_Functor DFunctor_comp_law DFunctor_id_law.

End dfunctor_def.

