
Require Export SET_BinProds.
(* SET_BinProds:
Require Export SetoidPROD.
Require Export Binary_Products.
Require Export SET.

Set Implicit Arguments.
Unset Strict Implicit.

Section verif_prod.

Variable A B : Setoid.

 Section set_op_together_def.

 Variable C : Setoid.

  Section set_together_def.

  Variables (f : Map C A) (g : Map C B).

  Definition S_together_fun (c : C) := Build_Sprod (f c) (g c).

  Lemma S_together_map_law : Map_law S_together_fun.

  Definition S_together := Build_Map S_together_map_law.

  End set_together_def.

 Lemma S_together_l : Map2_congl_law S_together.

 Lemma S_together_r : Map2_congr_law S_together.

 Definition S_op_together := Build_Map2 S_together_l S_together_r.
 
 End set_op_together_def. 

Lemma Eq1_Sprod : Eq1_prod_law (Proj1_SPROD A B) S_op_together.

Lemma Eq2_Sprod : Eq2_prod_law (Proj2_SPROD A B) S_op_together.

Lemma Unique_S_together :
 Unique_together_law (Proj1_SPROD A B) (Proj2_SPROD A B) S_op_together.

Definition SET_hasBinProd :=
  Build_BinProd Eq1_Sprod Eq2_Sprod Unique_S_together.

End verif_prod. *)
Require Export Exponents.
(* Exponents:
Require Export Binary_Products.

Set Implicit Arguments.
Unset Strict Implicit.

Section expo_def.

Variables (C : Category) (C1 : HasBinProd C) (a b : C).

 Section expo_laws.

 Variables (Expo : C) (Eval : H_obj_prod C1 Expo a --> b)
   (Op : forall c : C, Map (H_obj_prod C1 c a --> b) (c --> Expo)).

 Definition Lambda_expo (c : C) (f : H_obj_prod C1 c a --> b) := Op c f.

 Definition Beta_rule_law :=
   forall (c : C) (f : H_obj_prod C1 c a --> b),
   Mor_prod C1 (Lambda_expo f) (Id a) o Eval =_S f.

 Definition Eta_rule_law :=
   forall (c : C) (h : c --> Expo),
   Lambda_expo (Mor_prod C1 h (Id a) o Eval) =_S h.

 End expo_laws.

Structure Exponent : Type := 
  {Expo : C;
   Eval : H_obj_prod C1 Expo a --> b;
   Op_lambda : forall c : C, Map (H_obj_prod C1 c a --> b) (c --> Expo);
   Prf_beta_rule : Beta_rule_law Eval Op_lambda;
   Prf_eta_rule : Eta_rule_law Eval Op_lambda}.

Variable e : Exponent.

Definition Lambda (c : C) (f : H_obj_prod C1 c a --> b) := Op_lambda e c f.

End expo_def.

Definition HasExponent (C : Category) (C1 : HasBinProd C) :=
  forall a b : C, Exponent C1 a b.

Section hasexponent_proj.

Variables (C : Category) (C1 : HasBinProd C) (C2 : HasExponent C1) (a b : C).

Definition H_expo := Expo (C2 a b).

Definition H_eval := (Eval (C2 a b)).

Definition H_lambda (c : C) (f : H_obj_prod C1 c a --> b) :=
  Lambda (C2 a b) f.

End hasexponent_proj. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section verif_expo.

Variable A B : Setoid.

Definition S_expo := Map A B.

Definition S_eval_fun (fxa : SPROD (A ==> B) A) := Sprod_l fxa (Sprod_r fxa).

Lemma S_eval_map_law : Map_law S_eval_fun.
Proof.
unfold Map_law in |- *.
intros fxa gxa'; elim fxa; intros f a; elim gxa'; intros g a'; simpl in |- *.
unfold S_eval_fun in |- *; simpl in |- *.
unfold Equal_Sprod in |- *; simpl in |- *.
intro H; elim H; intros H1 H2.
 apply Trans with (f a').
apply Pres1; trivial.
apply (H1 a').
Qed.

Definition S_eval := Build_Map S_eval_map_law.

 Section set_lambda_def.

 Variable C : Setoid.

  Section set_lambda_fun_def.

  Variable f : Map (SPROD C A) B.

   Section set_lambda_fun1_def.

   Variable c : C.

   Definition S_lambda_fun2 (a : A) := f (Build_Sprod c a).

   Lemma S_lambda_map_law2 : Map_law S_lambda_fun2.
   Proof.
   unfold Map_law in |- *.
   intros a1 a2 H; unfold S_lambda_fun2 in |- *.                         
   apply Pres1.
   simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *; split.
   apply Refl.
   trivial.
   Qed.

   Definition S_lambda_fun1 := Build_Map S_lambda_map_law2.

   End set_lambda_fun1_def.

  Lemma S_lambda_map_law1 : Map_law S_lambda_fun1.
  Proof.
  unfold Map_law in |- *.
  intros c1 c2 H; unfold S_lambda_fun1 in |- *; simpl in |- *.
  unfold Ext in |- *; intro a; unfold S_lambda_fun2 in |- *; simpl in |- *.
  apply Pres1.
  simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *; split.
  trivial.
  apply Refl.
  Qed.

  Definition S_lambda1_fun := Build_Map S_lambda_map_law1.

  End set_lambda_fun_def.

 Lemma S_lambda_map_law : Map_law S_lambda1_fun.
 Proof.
 unfold Map_law in |- *.
 intros f g H; unfold S_lambda1_fun in |- *; simpl in |- *.
 unfold Ext in |- *; simpl in |- *; intros c.
 unfold Ext in |- *; simpl in |- *; intro a. 
 unfold S_lambda_fun2 in |- *.
 apply (H (Build_Sprod c a)).
 Qed.

 Definition S_Lambda := Build_Map S_lambda_map_law.

 End set_lambda_def. 

Lemma S_beta_rule : Beta_rule_law (C1:=SET_hasBinProd) S_eval S_Lambda.
Proof.
unfold Beta_rule_law in |- *; simpl in |- *.
intros C f; unfold Ext in |- *; simpl in |- *.
intro cxa; unfold S_eval_fun in |- *; simpl in |- *.
unfold S_lambda_fun2 in |- *.
apply Pres1.
simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *; split.
apply Refl.
unfold Id_fun in |- *; apply Refl.
Qed.
                    
Lemma S_eta_rule : Eta_rule_law (C1:=SET_hasBinProd) S_eval S_Lambda.
Proof.
unfold Eta_rule_law in |- *; simpl in |- *.
intros C h; unfold Ext in |- *; simpl in |- *.
intro c; unfold Ext in |- *; simpl in |- *.
intro a; unfold S_eval_fun in |- *; simpl in |- *. 
unfold Comp_fun in |- *; simpl in |- *.
apply Pres1.
apply Refl.
Qed.

Canonical Structure SET_hasExponent := Build_Exponent S_beta_rule S_eta_rule.

End verif_expo.
