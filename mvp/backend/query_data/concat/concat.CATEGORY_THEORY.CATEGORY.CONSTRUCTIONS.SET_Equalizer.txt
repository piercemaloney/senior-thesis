
Require Export Equalizers.
(* Equalizers:
Require Export CatProperty.

Set Implicit Arguments.
Unset Strict Implicit.

Section equaz_def.

Variables (C : Category) (a b : C) (I : Type) (k : I -> (a --> b)).

 Section equaz_laws.

 Variables (c : C) (e : c --> a).

 Definition Equalizer_eq (r : C) (h : r --> a) :=
   forall i j : I, h o k i =_S h o k j.

 Definition Equalizer_law1 := Equalizer_eq e.

 Variable E_diese : forall (r : C) (h : r --> a), Equalizer_eq h -> (r --> c).

 Definition Equalizer_law2 :=
   forall (r : C) (h : r --> a) (p : Equalizer_eq h), h =_S E_diese p o e.

 Definition Equalizer_law3 :=
   forall (r : C) (h : r --> a) (p : Equalizer_eq h) (l : r --> c),
   h =_S l o e -> l =_S E_diese p.

 End equaz_laws.

Structure Equalizer : Type := 
  {E_ob : C;
   E_mor : E_ob --> a;
   Prf_E_law1 : Equalizer_law1 E_mor;
   E_diese : forall (r : C) (h : r --> a), Equalizer_eq h -> (r --> E_ob);
   Prf_E_law2 : Equalizer_law2 E_mor E_diese;
   Prf_E_law3 : Equalizer_law3 E_mor E_diese}.

Variable f : Equalizer.

Lemma E_monic : Monic_law (E_mor f).

Lemma Epic_Equalizer_id : Epic_law (E_mor f) -> Equalizer_eq (Id a).

Lemma Epic_Equalizer_iso :
 forall p : Epic_law (E_mor f),
 let f1 := E_diese f (Epic_Equalizer_id p) in AreIsos (E_mor f) f1.

Lemma Equalizer_iso :
 forall (h1 : a --> E_ob f) (p : RIso_law (E_mor f) h1),
 let f1 := E_diese f (Epic_Equalizer_id (RightInv_epic p)) in
 AreIsos (E_mor f) f1.

End equaz_def. *)
Require Export Setoid_prop.
(* Setoid_prop:
Require Export Map.

Set Implicit Arguments.
Unset Strict Implicit.

Section sub_setoid.

Variable U : Setoid.

Definition Reg_law (A : U -> Prop) := forall x y : U, x =_S y -> A x -> A y.

Structure > Setoid_pred : Type := 
  {Pred :> U -> Prop; Prf_reg :> Reg_law Pred}.

Variable A : Setoid_pred.

Structure SubType : Type :=  {Elt_sub : U; Prf_constr : A Elt_sub}.

Definition Equal_SubType (a b : SubType) := Elt_sub a =_S Elt_sub b.

Lemma Equal_SubType_equiv : Equivalence Equal_SubType.

Canonical Structure SubSetoid : Setoid := Equal_SubType_equiv.

End sub_setoid.

Section restricted_map.

Variables (A B : Setoid) (f : Map A B) (P : Setoid_pred A).

Definition Restricted_fun (a : SubSetoid P) := f (Elt_sub a).

Lemma Restricted_map_law : Map_law Restricted_fun.

Canonical Structure RestrictedMap := Build_Map Restricted_map_law.

End restricted_map. *)
Require Export SET.
(* SET:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Lemma Comp_map_congl : Congl_law Comp_map.

Lemma Comp_map_congr : Congr_law Comp_map.

Definition Comp_SET := Build_Comp Comp_map_congl Comp_map_congr.

Lemma Assoc_SET : Assoc_law Comp_SET.

Definition Id_SET := Id_map.
 
Lemma Idl_SET : Idl_law Comp_SET Id_SET.

Lemma Idr_SET : Idr_law Comp_SET Id_SET.

Canonical Structure SET := Build_Category Assoc_SET Idl_SET Idr_SET. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section s_equaz_def.

Variables (A B : Setoid) (I : Type) (f : I -> Map A B).

Definition S_equaz_pred (a : A) := forall i j : I, f i a =_S f j a.

Lemma S_equaz_reg : Reg_law S_equaz_pred.
Proof.
unfold Reg_law, S_equaz_pred in |- *; intros x y H1 H2 i j.
apply Trans with (f i x).
apply Pres1; apply Sym; assumption.
apply Trans with (f j x).
apply H2.
apply Pres1; assumption.
Qed.

Canonical Structure S_equaz_constr := Build_Setoid_pred S_equaz_reg.

Definition S_equaz_ob := SubSetoid S_equaz_constr.

Definition S_equaz_mor := RestrictedMap (Id_map A) S_equaz_constr.

Lemma S_equaz_law1 : Equalizer_law1 f S_equaz_mor.
Proof.
unfold Equalizer_law1, Equalizer_eq, S_equaz_mor in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *; unfold Comp_fun in |- *; simpl in |- *;
 unfold Id_fun in |- *.
intros i j x; elim x; simpl in |- *; auto.
Qed.

 Section s_equaz_diese_def.

 Variables (D : Setoid) (h : Map D A).
 Hypothesis p : Equalizer_eq f h.

 Lemma Check_S_equaz_constr : forall d : D, S_equaz_pred (h d).
 Proof.
 unfold S_equaz_pred in |- *; intros d i j; exact (p i j d).
 Qed.
 
 Canonical Structure S_equaz_fun (d : D) :=
   Build_SubType (Check_S_equaz_constr d).

 Lemma S_equaz_map_law : Map_law S_equaz_fun.
 Proof.
 unfold Map_law in |- *; simpl in |- *.
 unfold Equal_SubType in |- *; simpl in |- *.
 exact (Pres h).
 Qed.

 Canonical Structure S_equaz_diese := Build_Map S_equaz_map_law.

 End s_equaz_diese_def.

Lemma S_equaz_law2 : Equalizer_law2 S_equaz_mor S_equaz_diese.
Proof.
unfold Equalizer_law2 in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *; unfold Id_fun in |- *.
intros r h p x; apply Refl.
Qed.

Lemma S_equaz_law3 : Equalizer_law3 S_equaz_mor S_equaz_diese.
Proof.
unfold Equalizer_law3 in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *; unfold Equal_SubType in |- *;
 simpl in |- *.
unfold Id_fun, S_equaz_ob in |- *; intros r h p l H x.
apply Sym; apply H.
Qed.

Canonical Structure S_equaz :=
  Build_Equalizer S_equaz_law1 S_equaz_law2 S_equaz_law3.

End s_equaz_def.