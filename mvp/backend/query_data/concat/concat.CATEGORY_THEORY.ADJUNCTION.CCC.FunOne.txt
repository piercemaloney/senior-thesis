
Require Export ONE.
(* ONE:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Inductive One_ob : Type :=
    Obone : One_ob.

Inductive One_mor : One_ob -> One_ob -> Type :=
    Id_Obone : One_mor Obone Obone.

 Section equal_one_mor.

 Variable a b : One_ob.

 Definition Equal_One_mor (f g : One_mor a b) := True.

 Lemma Equal_One_mor_equiv : Equivalence Equal_One_mor.

 Canonical Structure One_mor_setoid : Setoid := Equal_One_mor_equiv.
 
 End equal_one_mor.

Definition Comp_One_mor (a : One_ob) :=
  let () as x
      return
        (forall b c : One_ob,
         One_mor_setoid x b -> One_mor_setoid b c -> One_mor_setoid x c) :=
      a in
  fun b c =>
  let () as x
      return
        (One_mor_setoid Obone b ->
         One_mor_setoid b x -> One_mor_setoid Obone x) := c in
  fun _ _ => Id_Obone.

Lemma Comp_One_mor_congl : Congl_law Comp_One_mor.

Lemma Comp_One_mor_congr : Congr_law Comp_One_mor.

Definition Comp_One := Build_Comp Comp_One_mor_congl Comp_One_mor_congr.

Lemma Assoc_One : Assoc_law Comp_One.

Definition Id_One (a : One_ob) : One_mor_setoid a a :=
  let () as x return (One_mor x x) := a in Id_Obone.

Lemma Idl_One : Idl_law Comp_One Id_One.

Lemma Idr_One : Idr_law Comp_One Id_One.

Canonical Structure One := Build_Category Assoc_One Idl_One Idr_One. *)
Require Export Functor.
(* Functor:
Require Export Setoid_dup1.
Require Export Hom_Equality.

Set Implicit Arguments.
Unset Strict Implicit.

Section funct_def.

Variable C D : Category.

 Section funct_laws.

 Variables (FOb : C -> D)
   (FMap : forall a b : C, Map (a --> b) (FOb a --> FOb b)).

 Definition Fcomp_law :=
   forall (a b c : C) (f : a --> b) (g : b --> c),
   FMap a c (f o g) =_S FMap a b f o FMap b c g.

 Definition Fid_law := forall a : C, FMap a a (Id a) =_S Id (FOb a).

 End funct_laws.

Structure Functor : Type := 
  {FOb :> C -> D;
   FMap : forall a b : C, Map (a --> b) (FOb a --> FOb b);
   Prf_Fcomp_law : Fcomp_law FMap;
   Prf_Fid_law : Fid_law FMap}.

Definition FMor (F : Functor) (a b : C) (f : a --> b) := FMap F a b f.

Lemma FPres :
 forall (F : Functor) (a b : C) (f g : a --> b),
 f =_S g -> FMor F f =_S FMor F g.

Lemma FComp :
 forall (F : Functor) (a b c : C) (f : a --> b) (g : b --> c),
 FMor F (f o g) =_S FMor F f o FMor F g.

Lemma FComp1 :
 forall (F : Functor) (a b c : C) (f : a --> b) (g : b --> c),
 FMor F f o FMor F g =_S FMor F (f o g).

Lemma FId : forall (F : Functor) (a : C), FMor F (Id a) =_S Id (FOb F a).

Lemma FId1 : forall (F : Functor) (a : C), Id (FOb F a) =_S FMor F (Id a).

End funct_def.

Section funct_setoid.

Variable C D : Category. 

Definition Equal_Functor (F G : Functor C D) :=
  forall (a b : C) (f : a --> b), FMor F f =_H FMor G f.

Lemma Equal_Functor_equiv : Equivalence Equal_Functor.

Canonical Structure Functor_setoid := Build_Setoid' Equal_Functor_equiv.

End funct_setoid.

Infix "=_F" := Equal_Functor (at level 70).

Section Comp_F.

Variables (C D E : Category) (G : Functor C D) (H : Functor D E).

Definition Comp_FOb (a : C) := H (G a).

 Section comp_functor_map.

 Variable a b : C.

 Definition Comp_FMor (f : a --> b) := FMor H (FMor G f). 

 Lemma Comp_FMap_law : Map_law Comp_FMor.

 Definition Comp_FMap :=
   Build_Map (B:=Comp_FOb a --> Comp_FOb b) Comp_FMap_law.

 End comp_functor_map.

Lemma Comp_Functor_comp_law : Fcomp_law Comp_FMap.

Lemma Comp_Functor_id_law : Fid_law Comp_FMap.

Canonical Structure Comp_Functor :=
  Build_Functor Comp_Functor_comp_law Comp_Functor_id_law.

End Comp_F.

Infix "o_F" := Comp_Functor (at level 20, right associativity). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section Fun_One.

Variable C : Category.

Definition FunOne_ob (a : C) := Obone.

 Section funone_map_def.

 Variable a b : C.

 Definition FunOne_mor (f : a --> b) : FunOne_ob a --> FunOne_ob b :=
   Id_Obone.

 Lemma FunOne_map_law : Map_law FunOne_mor.
 Proof.
 unfold Map_law, FunOne_mor in |- *.
 intros; apply Refl.
 Qed.

 Canonical Structure FunOne_map := Build_Map FunOne_map_law.

 End funone_map_def. 

Lemma FunOne_comp_law : Fcomp_law FunOne_map.
Proof.
unfold Fcomp_law in |- *; simpl in |- *.
unfold Equal_One_mor in |- *; auto.
Qed.

Lemma FunOne_id_law : Fid_law FunOne_map.
Proof.
unfold Fid_law in |- *; simpl in |- *.
unfold Equal_One_mor in |- *; auto.
Qed.

Canonical Structure FunOne := Build_Functor FunOne_comp_law FunOne_id_law.

End Fun_One.
