
Require Export FullSubCat.
(* FullSubCat:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Section fscat.

Variables (C : Category) (I : Type) (a : I -> C).

Definition FSC_mor_setoid (i j : I) := a i --> a j.

Definition Comp_FSC (i j l : I) :
  Map2 (FSC_mor_setoid i j) (FSC_mor_setoid j l) (FSC_mor_setoid i l) :=
  Op_comp (a i) (a j) (a l).

Lemma Assoc_FSC : Assoc_law Comp_FSC.

Definition Id_FSC (i : I) := Id (a i).

Lemma Idl_FSC : Idl_law Comp_FSC Id_FSC.

Lemma Idr_FSC : Idr_law Comp_FSC Id_FSC.

Canonical Structure FullSubCat := Build_Category Assoc_FSC Idl_FSC Idr_FSC.

End fscat. *)
Require Export FunctorProperty.
(* FunctorProperty:
Require Export Functor.
Require Export CatProperty.

Set Implicit Arguments.
Unset Strict Implicit.

Section functor_prop.

Variable C D : Category. 

Lemma Functor_preserves_iso :
 forall (F : Functor C D) (a b : C), Iso a b -> Iso (F a) (F b).

Definition Faithful_law (F : Functor C D) :=
  forall (a b : C) (f g : a --> b), FMor F f =_S FMor F g -> f =_S g.

Structure > Faithful : Type := 
  {Faithful_functor :> Functor C D;
   Prf_isFaithful :> Faithful_law Faithful_functor}.

Definition Full_law (F : Functor C D)
  (H : forall a b : C, (F a --> F b) -> (a --> b)) :=
  forall (a b : C) (h : F a --> F b), h =_S FMor F (H a b h).

Structure > Full : Type := 
  {Full_functor :> Functor C D;
   Full_mor :
    forall a b : C, (Full_functor a --> Full_functor b) -> (a --> b);
   Prf_isFull :> Full_law Full_mor}.

End functor_prop.

Section comp_functor_prop.

Variables (C D E : Category) (F : Functor C D) (G : Functor D E).

Lemma IsFaithful_comp :
 Faithful_law F -> Faithful_law G -> Faithful_law (F o_F G).

Variables (F1 : forall a b : C, (F a --> F b) -> (a --> b))
  (G1 : forall a b : D, (G a --> G b) -> (a --> b)).

Lemma IsFull_comp :
 Full_law F1 ->
 Full_law G1 ->
 let H1 := fun (a b : C) (h : G (F a) --> G (F b)) => F1 (G1 h) in
 Full_law (F:=F o_F G) H1.

End comp_functor_prop. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section fsc_inc_def.

Variables (C : Category) (I : Type) (a : I -> C).

Definition Inc_map (i j : FullSubCat a) := Id_map (a i --> a j).

Lemma Inc_comp_law : Fcomp_law Inc_map.
Proof.
unfold Fcomp_law in |- *; simpl in |- *.
intros i1 i2 i3 f g; apply Refl.
Qed.

Lemma Inc_id_law : Fid_law Inc_map.
Proof.
unfold Fid_law in |- *; simpl in |- *.
intros i; apply Refl.
Qed.

Canonical Structure FSC_inc := Build_Functor Inc_comp_law Inc_id_law.

Lemma Inc_faith : Faithful_law FSC_inc.
Proof.
unfold Faithful_law in |- *; simpl in |- *.
unfold FMor in |- *; simpl in |- *; auto.
Qed.

Lemma Inc_full :
 Full_law (F:=FSC_inc) (fun i j : I => Id_fun (A:=a i --> a j)).
Proof.
unfold Full_law in |- *; simpl in |- *; intros i j f.
apply Refl.
Qed.

End fsc_inc_def.
