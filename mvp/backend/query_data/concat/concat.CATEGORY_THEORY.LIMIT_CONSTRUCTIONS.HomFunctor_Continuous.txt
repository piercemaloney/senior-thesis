
Require Export HomFunctor.
(* HomFunctor:
Require Export SET.
Require Export Functor.
Require Export Dual.

Set Implicit Arguments.
Unset Strict Implicit.

Section funset.

Variables (C : Category) (a : C).

Definition FunSET_ob (b : C) := a --> b.

 Section funset_map_def.

 Variable b c : C.

  Section funset_mor_def.

  Variable f : b --> c.
 
  Definition FunSET_mor1 (g : a --> b) := g o f.

  Lemma FunSET_map_law1 : Map_law FunSET_mor1.

  Canonical Structure FunSET_mor : Map (FunSET_ob b) (FunSET_ob c) :=
    FunSET_map_law1.

  End funset_mor_def.

 Lemma FunSET_map_law : Map_law FunSET_mor.

 Canonical Structure FunSET_map := Build_Map FunSET_map_law.

 End funset_map_def.

Lemma Fun_comp_law : Fcomp_law FunSET_map.

Lemma Fun_id_law : Fid_law FunSET_map.

Canonical Structure FunSET := Build_Functor Fun_comp_law Fun_id_law.

End funset. *)
Require Export Pres_Limits.
(* Pres_Limits:
Require Export Limit.

Set Implicit Arguments.
Unset Strict Implicit.

Section comp_cone.

Variables (J C D : Category) (c : C) (F : Functor J C) 
  (T : Cone c F) (G : Functor C D).

Definition Comp_cone_tau (i : J) : G c --> (F o_F G) i := FMor G (T i).

Lemma Comp_cone_tau_cone_law : Cone_law Comp_cone_tau.

Definition Comp_cone := Build_Cone Comp_cone_tau_cone_law.

End comp_cone.

Infix "o_C" := Comp_cone (at level 20, right associativity).

Section def_pres_limits.

Variables (J C D : Category) (F : Functor J C) (G : Functor C D).

Definition Preserves_1limit (l : Limit F) := IsLimit (Limiting_cone l o_C G).

Definition Preserves_limits := forall l : Limit F, Preserves_1limit l.

End def_pres_limits.

Definition Continuous (C D : Category) (G : Functor C D) :=
  forall (J : Category) (F : Functor J C), Preserves_limits F G. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section funset_pres.

Variables (J C : Category) (F : Functor J C) (l : Limit F) (c : C).

Definition FS_lim := c --> Lim l.

Definition FS_lcone := Limiting_cone l o_C FunSET c.

 Section fs_diese.

 Variables (X : SET) (tau : Cone X (F o_F FunSET c)).

  Section fs_diese_mor_def.

  Variable x : X.

  Definition FS_cone_tau (i : J) := tau i x.

  Lemma FS_cone_tau_cone_law : Cone_law FS_cone_tau.
  Proof.
  unfold Cone_law, FS_cone_tau in |- *.
  intros i j g.
  apply (EqC tau g x).
  Qed.

  Definition FS_cone := Build_Cone FS_cone_tau_cone_law.

  Definition FS_diese_mor := Lim_diese l FS_cone.

  End fs_diese_mor_def.  

 Lemma FS_diese_map_law : Map_law FS_diese_mor.
 Proof.
 unfold Map_law in |- *; intros x y H.
 unfold FS_diese_mor in |- *.
 apply (Ldiese_map l).
 simpl in |- *; unfold Equal_NT in |- *; intro i; simpl in |- *.
 unfold FS_cone_tau in |- *.
 apply Pres1; assumption.
 Qed.

 Canonical Structure FS_diese := Build_Map FS_diese_map_law.

End fs_diese.

Lemma FS_limit1 : Limit_law1 FS_lcone FS_diese.
Proof.
unfold Limit_law1, Limit_eq in |- *; simpl in |- *.
intros X tau i.
unfold Ext in |- *; intro x.
unfold Comp_cone in |- *; simpl in |- *.
unfold FunSET_mor1, FS_diese_mor in |- *; simpl in |- *.
apply (Prf_limit1 l (FS_cone tau x) i).
Qed.

Lemma FS_limit2 : Limit_law2 FS_lcone FS_diese.
Proof.
unfold Limit_law2 in |- *; intros X tau f.
unfold Limit_eq, FS_diese in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *.
unfold FunSET_mor1, FS_diese_mor in |- *.
intros H x.
unfold FunSET_ob in |- *.
apply (Prf_limit2 l).
unfold Limit_eq in |- *; simpl in |- *.
intro i; apply (H i x).
Qed.

Lemma FunSET_Preserves_l : Preserves_1limit (FunSET c) l.
Proof.
exact (Build_IsLimit FS_limit1 FS_limit2).
Defined.

End funset_pres.

Lemma FunSET_continuous :
 forall (C : Category) (c : C), Continuous (FunSET c). 
Proof.
unfold Continuous, Preserves_limits in |- *; intros C c J F l.
exact (FunSET_Preserves_l l c).
Defined.
