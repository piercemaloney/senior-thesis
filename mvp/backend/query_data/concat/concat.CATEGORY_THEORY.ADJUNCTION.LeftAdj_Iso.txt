
Require Export Adjunction1.
(* Adjunction1:
Require Export IdCAT.
Require Export Adj_UA.

Set Implicit Arguments.
Unset Strict Implicit.

Section adj1_def.

Variables (C D : Category) (F : Functor D C) (G : Functor C D).

 Section adj1_laws.

 Variables (eta : NT (Id_CAT D) (F o_F G)) (eps : NT (G o_F F) (Id_CAT C)).

 Definition Adj1_law1 :=
   forall c : C, eta (G c) o FMor G (eps c) =_S Id (G c).

 Definition Adj1_law2 :=
   forall d : D, FMor F (eta d) o eps (F d) =_S Id (F d).

 End adj1_laws.

 Structure Adj1 : Type := 
   {A_eta : NT (Id_CAT D) (F o_F G);
    A_eps : NT (G o_F F) (Id_CAT C);
    Prf_Adj1_law1 : Adj1_law1 A_eta A_eps;
    Prf_Adj1_law2 : Adj1_law2 A_eta A_eps}.

End adj1_def.

Section adj_to_adj1.

Variables (C D : Category) (F : Functor D C) (G : Functor C D) (ad : Adj F G).

Definition Unit_tau (d : D) := UA_mor (Unit ad d).

Lemma Unit_nt_law : NT_law (F:=Id_CAT D) (G:=F o_F G) Unit_tau.

Canonical Structure Unit_NT := Build_NT Unit_nt_law.

Definition CoUnit_tau (c : C) := CoUA_mor (CoUnit ad c).

Lemma CoUnit_nt_law : NT_law (F:=G o_F F) (G:=Id_CAT C) CoUnit_tau.
 
Canonical Structure CoUnit_NT := Build_NT CoUnit_nt_law.

Lemma Unit_and_CoUnit_law1 : Adj1_law1 Unit_NT CoUnit_NT.

Lemma Unit_and_CoUnit_law2 : Adj1_law2 Unit_NT CoUnit_NT.

Canonical Structure Adj_to_Adj1 :=
  Build_Adj1 Unit_and_CoUnit_law1 Unit_and_CoUnit_law2.

End adj_to_adj1.

Coercion Adj_to_Adj1 : Adj >-> Adj1.

Section adj1_to_adj.

Variables (C D : Category) (F : Functor D C) (G : Functor C D)
  (ad : Adj1 F G).

 Section teta_tau_def.

 Variable dxc : POb (Dual D) C.

 Definition Teta_arrow (f : F (OB_l dxc) --> Ob_r dxc) :=
   A_eta ad (OB_l dxc) o FMor G f.

 Lemma Teta_arrow_map_law : Map_law Teta_arrow.

 Canonical Structure Teta_tau := Build_Map Teta_arrow_map_law.

 End teta_tau_def.

Lemma Teta_tau_NT_law : NT_law (F:=FunSET2_r F) (G:=FunSET2_l G) Teta_tau.

Canonical Structure Teta := Build_NT Teta_tau_NT_law.

 Section teta_1_tau_def.

 Variable dxc : POb (Dual D) C.

 Definition Teta_1_arrow (g : OB_l dxc --> G (Ob_r dxc)) :=
   FMor F g o A_eps ad (Ob_r dxc).

 Lemma Teta_1_arrow_Map_law : Map_law Teta_1_arrow.

 Canonical Structure Teta_1_tau := Build_Map Teta_1_arrow_Map_law.

 End teta_1_tau_def.

Lemma Teta_1_tau_NT_law : NT_law (F:=FunSET2_l G) (G:=FunSET2_r F) Teta_1_tau.

Canonical Structure Teta_1 := Build_NT Teta_1_tau_NT_law.

 Section teta_iso.

 Variable dxc : POb (Dual D) C.

 Lemma Teta_1_o_Teta : AreIsos (Teta dxc) (Teta_1 dxc).

 End teta_iso.

Definition Adj1_to_Adj := Build_Adj (NT_Iso Teta_1_o_Teta).

End adj1_to_adj.
 
Coercion Adj1_to_Adj : Adj1 >-> Adj.

Section adj_equiv.

Variables (C D : Category) (F : Functor D C) (G : Functor C D).

Definition Eq_Adj (ad ad' : Adj F G) := ad =_NT ad'.

Definition Eq_Adj1 (ad ad' : Adj1 F G) :=
  A_eta ad =_NT A_eta ad' /\ A_eps ad =_NT A_eps ad'.

End adj_equiv. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section ladj_iso_def.

Variables (C D : Category) (G : Functor C D) (la la' : LeftAdj G).

Let F := Adjoint la.

Let F' := Adjoint la'.

Let LAdj_unit (a : D) := Unit la a. 

Let LAdj_unit' (a : D) := Unit la' a. 

Definition LAdj_tau_iso (a : D) := UA_iso (LAdj_unit a) (LAdj_unit' a).

Definition LAdj_tau (a : D) := Iso_mor (LAdj_tau_iso a).

Lemma LAdj_nt_law : NT_law LAdj_tau.
Proof.
unfold NT_law in |- *; intros a b f.
apply Trans with (UA_diese (LAdj_unit a) (f o UA_mor (LAdj_unit' b))).
apply (UA_unic (u:=LAdj_unit a)).
apply
 Trans
  with ((UA_mor (LAdj_unit a) o FMor G (FMor F f)) o FMor G (LAdj_tau b)).
apply
 Trans with (UA_mor (LAdj_unit a) o FMor G (FMor F f) o FMor G (LAdj_tau b)).
apply Comp_l; apply FComp.
apply Ass.
apply Trans with ((f o UA_mor (LAdj_unit b)) o FMor G (LAdj_tau b)).
apply Comp_r; apply Sym; apply (Prf_NT_law (Unit_NT la) f).
apply Trans with (f o UA_mor (LAdj_unit b) o FMor G (LAdj_tau b)).
apply Ass1.
apply Comp_l; apply (UA_diag (LAdj_unit b) (UA_mor (LAdj_unit' b))).
apply (UA_unic1 (u:=LAdj_unit a)).
apply
 Trans with (UA_mor (LAdj_unit a) o FMor G (LAdj_tau a) o FMor G (FMor F' f)).
apply Comp_l; apply FComp.
apply
 Trans
  with ((UA_mor (LAdj_unit a) o FMor G (LAdj_tau a)) o FMor G (FMor F' f)).
apply Ass.
apply Trans with (UA_mor (LAdj_unit' a) o FMor G (FMor F' f)).
apply Comp_r; apply (UA_diag (LAdj_unit a) (UA_mor (LAdj_unit' a))).
apply Sym; apply (Prf_NT_law (Unit_NT la') f).
Qed.

Canonical Structure LAdj_nt := Build_NT LAdj_nt_law.

Lemma LAdj_iso : NatIso F F'.
Proof.
apply (NT_Iso (T:=LAdj_nt) (h:=fun a : D => Inv_iso (LAdj_tau_iso a))).
intro a; exact (UA_iso_law1 (LAdj_unit a) (LAdj_unit' a)).
Qed.

End ladj_iso_def.