
Require Export SET.
(* SET:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Lemma Comp_map_congl : Congl_law Comp_map.

Lemma Comp_map_congr : Congr_law Comp_map.

Definition Comp_SET := Build_Comp Comp_map_congl Comp_map_congr.

Lemma Assoc_SET : Assoc_law Comp_SET.

Definition Id_SET := Id_map.
 
Lemma Idl_SET : Idl_law Comp_SET Id_SET.

Lemma Idr_SET : Idr_law Comp_SET Id_SET.

Canonical Structure SET := Build_Category Assoc_SET Idl_SET Idr_SET. *)
Require Export Functor.
(* Functor:
Require Export Setoid_dup1.
Require Export Hom_Equality.

Set Implicit Arguments.
Unset Strict Implicit.

Section funct_def.

Variable C D : Category.

 Section funct_laws.

 Variables (FOb : C -> D)
   (FMap : forall a b : C, Map (a --> b) (FOb a --> FOb b)).

 Definition Fcomp_law :=
   forall (a b c : C) (f : a --> b) (g : b --> c),
   FMap a c (f o g) =_S FMap a b f o FMap b c g.

 Definition Fid_law := forall a : C, FMap a a (Id a) =_S Id (FOb a).

 End funct_laws.

Structure Functor : Type := 
  {FOb :> C -> D;
   FMap : forall a b : C, Map (a --> b) (FOb a --> FOb b);
   Prf_Fcomp_law : Fcomp_law FMap;
   Prf_Fid_law : Fid_law FMap}.

Definition FMor (F : Functor) (a b : C) (f : a --> b) := FMap F a b f.

Lemma FPres :
 forall (F : Functor) (a b : C) (f g : a --> b),
 f =_S g -> FMor F f =_S FMor F g.

Lemma FComp :
 forall (F : Functor) (a b c : C) (f : a --> b) (g : b --> c),
 FMor F (f o g) =_S FMor F f o FMor F g.

Lemma FComp1 :
 forall (F : Functor) (a b c : C) (f : a --> b) (g : b --> c),
 FMor F f o FMor F g =_S FMor F (f o g).

Lemma FId : forall (F : Functor) (a : C), FMor F (Id a) =_S Id (FOb F a).

Lemma FId1 : forall (F : Functor) (a : C), Id (FOb F a) =_S FMor F (Id a).

End funct_def.

Section funct_setoid.

Variable C D : Category. 

Definition Equal_Functor (F G : Functor C D) :=
  forall (a b : C) (f : a --> b), FMor F f =_H FMor G f.

Lemma Equal_Functor_equiv : Equivalence Equal_Functor.

Canonical Structure Functor_setoid := Build_Setoid' Equal_Functor_equiv.

End funct_setoid.

Infix "=_F" := Equal_Functor (at level 70).

Section Comp_F.

Variables (C D E : Category) (G : Functor C D) (H : Functor D E).

Definition Comp_FOb (a : C) := H (G a).

 Section comp_functor_map.

 Variable a b : C.

 Definition Comp_FMor (f : a --> b) := FMor H (FMor G f). 

 Lemma Comp_FMap_law : Map_law Comp_FMor.

 Definition Comp_FMap :=
   Build_Map (B:=Comp_FOb a --> Comp_FOb b) Comp_FMap_law.

 End comp_functor_map.

Lemma Comp_Functor_comp_law : Fcomp_law Comp_FMap.

Lemma Comp_Functor_id_law : Fid_law Comp_FMap.

Canonical Structure Comp_Functor :=
  Build_Functor Comp_Functor_comp_law Comp_Functor_id_law.

End Comp_F.

Infix "o_F" := Comp_Functor (at level 20, right associativity). *)
Require Export Dual.
(* Dual:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Section d_cat.

Variable C : Category.

Definition DHom (a b : C) := b --> a.

Definition Comp_Darrow (a b c : C) (df : DHom a b) (dg : DHom b c) := dg o df.
                          
Lemma Comp_dual_congl : Congl_law Comp_Darrow.
                          
Lemma Comp_dual_congr : Congr_law Comp_Darrow.

Definition Comp_Dual := Build_Comp Comp_dual_congl Comp_dual_congr.
            
Lemma Assoc_Dual : Assoc_law Comp_Dual.

Lemma Idl_Dual : Idl_law (Hom:=DHom) Comp_Dual (Id (c:=C)).

Lemma Idr_Dual : Idr_law (Hom:=DHom) Comp_Dual (Id (c:=C)).

Canonical Structure Dual := Build_Category Assoc_Dual Idl_Dual Idr_Dual.

End d_cat. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section funset.

Variables (C : Category) (a : C).

Definition FunSET_ob (b : C) := a --> b.

 Section funset_map_def.

 Variable b c : C.

  Section funset_mor_def.

  Variable f : b --> c.
 
  Definition FunSET_mor1 (g : a --> b) := g o f.

  Lemma FunSET_map_law1 : Map_law FunSET_mor1.
  Proof.
  unfold Map_law, FunSET_mor1 in |- *.
  intros g h H.
  apply Comp_r; assumption.
  Qed.

  Canonical Structure FunSET_mor : Map (FunSET_ob b) (FunSET_ob c) :=
    FunSET_map_law1.

  End funset_mor_def.

 Lemma FunSET_map_law : Map_law FunSET_mor.
 Proof.
 unfold Map_law in |- *; simpl in |- *.
 unfold Ext in |- *; simpl in |- *.
 unfold FunSET_mor1, FunSET_ob in |- *.
 intros f g H h.
 apply Comp_l; assumption.
 Qed.

 Canonical Structure FunSET_map := Build_Map FunSET_map_law.

 End funset_map_def.

Lemma Fun_comp_law : Fcomp_law FunSET_map.
Proof.
unfold Fcomp_law in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *.
unfold Comp_fun in |- *; simpl in |- *.
unfold FunSET_mor1, FunSET_ob in |- *.
intros b c d f g h.
apply Ass.
Qed.

Lemma Fun_id_law : Fid_law FunSET_map.
Proof.
unfold Fid_law in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *.
unfold Id_fun in |- *.
unfold FunSET_mor1, FunSET_ob in |- *.
intros b f; apply Idr1.
Qed.

Canonical Structure FunSET := Build_Functor Fun_comp_law Fun_id_law.

End funset.

