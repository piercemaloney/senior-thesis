
Require Export HomFunctor.
(* HomFunctor:
Require Export SET.
Require Export Functor.
Require Export Dual.

Set Implicit Arguments.
Unset Strict Implicit.

Section funset.

Variables (C : Category) (a : C).

Definition FunSET_ob (b : C) := a --> b.

 Section funset_map_def.

 Variable b c : C.

  Section funset_mor_def.

  Variable f : b --> c.
 
  Definition FunSET_mor1 (g : a --> b) := g o f.

  Lemma FunSET_map_law1 : Map_law FunSET_mor1.

  Canonical Structure FunSET_mor : Map (FunSET_ob b) (FunSET_ob c) :=
    FunSET_map_law1.

  End funset_mor_def.

 Lemma FunSET_map_law : Map_law FunSET_mor.

 Canonical Structure FunSET_map := Build_Map FunSET_map_law.

 End funset_map_def.

Lemma Fun_comp_law : Fcomp_law FunSET_map.

Lemma Fun_id_law : Fid_law FunSET_map.

Canonical Structure FunSET := Build_Functor Fun_comp_law Fun_id_law.

End funset. *)
Require Export Ntransformation.
(* Ntransformation:
Require Export Functor.
Require Export Setoid_dup2.

Set Implicit Arguments.
Unset Strict Implicit.

Section nt_def.

Variables (C D : Category) (F G : Functor C D).

Definition NT_law (T : forall a : C, F a --> G a) :=
  forall (a b : C) (f : a --> b), FMor F f o T b =_S T a o FMor G f.

Structure > NT : Type := 
  {ApNT :> forall a : C, F a --> G a; Prf_NT_law :> NT_law ApNT}.

Lemma NatCond :
 forall (T : NT) (a b : C) (f : a --> b), FMor F f o T b =_S T a o FMor G f.

Lemma NatCond1 :
 forall (T : NT) (a b : C) (f : a --> b), T a o FMor G f =_S FMor F f o T b.

End nt_def.

Section setoid_nt.

Variables (C D : Category) (F G : Functor C D).

Definition Equal_NT (T T' : NT F G) := forall a : C, T a =_S T' a.

Lemma Equal_NT_equiv : Equivalence Equal_NT.

Canonical Structure NT_setoid : Setoid'' := Equal_NT_equiv.

End setoid_nt.

Infix "=_NT" := Equal_NT (at level 70). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section funset_nt.

Variables (C : Category) (b a : C) (f : a --> b).

Section nth_map_def.

 Variable c : C.

 Definition NtH_arrow (h : b --> c) := f o h.

 Lemma NtH_map_law : Map_law NtH_arrow.
 Proof.
 unfold Map_law, NtH_arrow in |- *; intros.
 apply Comp_l; assumption.
 Qed.

 Definition NtH_map : Map (FunSET b c) (FunSET a c) := NtH_map_law.

End nth_map_def.

Lemma NtH_nt_law : NT_law NtH_map.
Proof.
unfold NT_law in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *.
unfold Comp_fun in |- *; simpl in |- *.
unfold NtH_arrow, FunSET_mor1, FunSET_ob in |- *.
intros; apply Ass.
Qed.

Canonical Structure NtH := Build_NT NtH_nt_law.

End funset_nt.

