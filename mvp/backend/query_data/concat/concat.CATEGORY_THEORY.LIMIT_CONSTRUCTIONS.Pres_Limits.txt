

Require Export Limit.



Set Implicit Arguments.

Unset Strict Implicit.



Section comp_cone.



Variables (J C D : Category) (c : C) (F : Functor J C) 

  (T : Cone c F) (G : Functor C D).



Definition Comp_cone_tau (i : J) : G c --> (F o_F G) i := FMor G (T i).



Lemma Comp_cone_tau_cone_law : Cone_law Comp_cone_tau.

Proof.

unfold Cone_law in |- *; intros i j g; unfold Comp_cone_tau in |- *.

unfold FMor at 3 in |- *; simpl in |- *.

unfold Comp_FMor in |- *.

 apply Trans with (FMor G (T i o FMor F g)).

unfold Comp_FOb in |- *; apply FPres. 

apply (EqC T g).

unfold Comp_FOb in |- *; apply FComp.

Qed.



Definition Comp_cone := Build_Cone Comp_cone_tau_cone_law.



End comp_cone.



Infix "o_C" := Comp_cone (at level 20, right associativity).



Section def_pres_limits.



Variables (J C D : Category) (F : Functor J C) (G : Functor C D).



Definition Preserves_1limit (l : Limit F) := IsLimit (Limiting_cone l o_C G).



Definition Preserves_limits := forall l : Limit F, Preserves_1limit l.



End def_pres_limits.



Definition Continuous (C D : Category) (G : Functor C D) :=

  forall (J : Category) (F : Functor J C), Preserves_limits F G.
