
Require Export Map.
(* Map:
Require Export Setoid.

Set Implicit Arguments.
Unset Strict Implicit.

Section maps.

Variable A B : Setoid.

Definition Map_law (f : A -> B) := forall x y : A, x =_S y -> f x =_S f y.

Structure > Map : Type :=  {Ap :> A -> B; Pres :> Map_law Ap}.

Lemma Pres1 : forall (m : Map) (x y : A), x =_S y -> m x =_S m y.

Definition Ext (f g : Map) := forall x : A, f x =_S g x.

Lemma Ext_equiv : Equivalence Ext.

Canonical Structure Map_setoid : Setoid := Ext_equiv.

End maps.

Infix "=_M" := Ext (at level 70).
Infix "==>" := Map_setoid (at level 95, right associativity).

Section id_map_def.

Variable A : Setoid.

Definition Id_fun (x : A) := x.
     
Lemma Id_fun_map_law : Map_law Id_fun.

Canonical Structure Id_map : Map A A := Id_fun_map_law.
  
End id_map_def.
 
Section mcomp.

Variables (A B C : Setoid) (f : Map A B) (g : Map B C).

Definition Comp_fun (x : A) := g (f x).

Lemma Comp_fun_map_law : Map_law Comp_fun.

Canonical Structure Comp_map : Map A C := Comp_fun_map_law.

End mcomp.

Infix "o_M" := Comp_map (at level 20, right associativity). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section inj_surj_def.

Variable A B : Setoid.

Definition Inj_law (f : Map A B) := forall x y : A, f x =_S f y -> x =_S y.

Structure > Inj : Type :=  {Inj_map :> Map A B; Prf_isInj :> Inj_law Inj_map}.

Definition Surj_law (f : Map A B) (h : B -> A) := forall b : B, b =_S f (h b).

Structure > Surj : Type := 
  {Surj_map :> Map A B;
   Surj_elt : B -> A;
   Prf_isSurj :> Surj_law Surj_map Surj_elt}.

End inj_surj_def.

