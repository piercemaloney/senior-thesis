
Require Export FunFreeMon.
(* FunFreeMon:
Require Export FreeMonoid.
Require Export Functor.
Require Export MON.

Set Implicit Arguments.
Unset Strict Implicit.

Section funfreemon_map_def.

Variable A B : Setoid.

 Section funfreemon_mor_def.

 Variable f : Map A B.

 Fixpoint Dist_fun (l : Tlist A) : Tlist B :=
   match l with
   | Empty => Empty B
   | Concat1 a l1 => Concat1 (f a) (Dist_fun l1)
   end.

 Lemma Dist_map_law : Map_law Dist_fun.

 Canonical Structure Dist_map := Build_Map Dist_map_law.

 Lemma Dist_map_unit_law : MonUnit_law Dist_map.

 Lemma Dist_map_op_law : MonOp_law Dist_map.

 Canonical Structure FunFreeMon_mor :=
   Build_MonMor Dist_map_unit_law Dist_map_op_law.

 End funfreemon_mor_def.

Lemma FunFreeMon_map_law : Map_law FunFreeMon_mor.

Canonical Structure FunFreeMon_map := Build_Map FunFreeMon_map_law.

End funfreemon_map_def.

Lemma FunFreeMon_fcomp_law : Fcomp_law FunFreeMon_map.

Lemma FunFreeMon_fid_law : Fid_law FunFreeMon_map.

Canonical Structure FunFreeMon :=
  Build_Functor FunFreeMon_fcomp_law FunFreeMon_fid_law. *)
Require Export FunForget_UA.
(* FunForget_UA:
Require Export FunForget.
Require Export FreeMonoid.
Require Export UniversalArrow.

Set Implicit Arguments.
Unset Strict Implicit.

Section ua_fm.

Variable A : Setoid.

Definition UA_FM_fun (a : A) : FunForget A := Concat1 a (Empty A).

Lemma UA_FM_map_law : Map_law UA_FM_fun.

Canonical Structure UA_FM_mor := Build_Map UA_FM_map_law.

 Section ua_fm_diese_def.

 Variables (B : Monoid) (f : Map A (FunForget B)). 

 Fixpoint UA_FM_diese_fun (l : FreeMonoid A) : B :=
   match l with
   | Empty => Munit B
   | Concat1 a m => f a +_M UA_FM_diese_fun m
   end.

 Lemma UA_FM_diese_map_law : Map_law UA_FM_diese_fun.
 
 Canonical Structure UA_FM_diese_map := Build_Map UA_FM_diese_map_law.
 
 Lemma UA_FM_diese_unit_law : MonUnit_law UA_FM_diese_map.

 Lemma UA_FM_diese_op_law : MonOp_law UA_FM_diese_map.

 Canonical Structure UA_FM_diese :=
   Build_MonMor UA_FM_diese_unit_law UA_FM_diese_op_law.

 End ua_fm_diese_def.

Lemma UA_FM_law1 : UA_law1 UA_FM_mor UA_FM_diese.

Lemma UA_FM_law2 : UA_law2 UA_FM_mor UA_FM_diese.
  
Lemma IsUA_FM : IsUA UA_FM_mor.

Definition UA_FM : UA A FunForget := IsUA_FM.

End ua_fm. *)
Require Export Th_Adjoint. 
(* Th_Adjoint:
Require Export Adj_UA.

Set Implicit Arguments.
Unset Strict Implicit.

Section ua_to_ladj.

Variables (C D : Category) (G : Functor C D).

Hypothesis UA_of : forall d : D, UA d G.

Definition AdjointUA_ob (d : D) := UA_ob (UA_of d).

 Section adjoint_ua_map_def.

 Variable d d' : D.

 Definition AdjointUA_mor (f : d --> d') :=
   UA_diese (UA_of d) (f o UA_mor (UA_of d')).

 Lemma AdjointUA_map_law : Map_law AdjointUA_mor.

 Canonical Structure AdjointUA_map :
   Map (d --> d') (AdjointUA_ob d --> AdjointUA_ob d') := AdjointUA_map_law.

 End adjoint_ua_map_def.
 
Lemma AdjointUA_id_law : Fid_law AdjointUA_map.

Lemma AdjointUA_comp_law : Fcomp_law AdjointUA_map.

Canonical Structure AdjointUA :=
  Build_Functor AdjointUA_comp_law AdjointUA_id_law.

 Section phi_ua_tau_def.

 Variable dxc : POb (Dual D) C.

 Definition PhiUA_arrow (f : UA_ob (UA_of (OB_l dxc)) --> Ob_r dxc) :=
   UA_mor (UA_of (OB_l dxc)) o FMor G f.

 Lemma PhiUA_arrow_map_law : Map_law PhiUA_arrow.

 Canonical Structure PhiUA_tau := Build_Map PhiUA_arrow_map_law.

 End phi_ua_tau_def.

Lemma PhiUA_tau_nt_law :
 NT_law (F:=FunSET2_r AdjointUA) (G:=FunSET2_l G) PhiUA_tau.

Canonical Structure PhiUA := Build_NT PhiUA_tau_nt_law.

 Section phi_ua_1_tau_def.

 Variable dxc : POb (Dual D) C.

 Definition PhiUA_1_arrow (f : OB_l dxc --> G (Ob_r dxc)) :=
   UA_diese (UA_of (OB_l dxc)) f.

 Lemma PhiUA_1_arrow_map_law : Map_law PhiUA_1_arrow.

 Canonical Structure PhiUA_1_tau := Build_Map PhiUA_1_arrow_map_law.

 End phi_ua_1_tau_def.

Lemma PhiUA_1_tau_nt_law :
 NT_law (F:=FunSET2_l G) (G:=FunSET2_r AdjointUA) PhiUA_1_tau.

Canonical Structure PhiUA_1 := Build_NT PhiUA_1_tau_nt_law.

 Section phi_ua_iso.

 Variable dxc : POb (Dual D) C.

 Lemma PhiUA_1_o_PhiUA : AreIsos (PhiUA dxc) (PhiUA_1 dxc).

 End phi_ua_iso.

Definition AdjUA := Build_Adj (NT_Iso PhiUA_1_o_PhiUA).

Canonical Structure LeftAdjUA := Build_LeftAdj AdjUA.

End ua_to_ladj. *)

Set Implicit Arguments.
Unset Strict Implicit.

Definition LeftAdj_FunForget := LeftAdjUA UA_FM.

Lemma Adj_FunFreeMon_FunForget : FunFreeMon =_F Adjoint LeftAdj_FunForget.
Proof.
unfold Equal_Functor in |- *; intros A B f.
apply Build_Equal_hom; simpl in |- *.
unfold Equal_MonMor in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *; intro l.
elim l; simpl in |- *.
trivial.
intros c t H; split.
apply Refl.
trivial.
Qed.