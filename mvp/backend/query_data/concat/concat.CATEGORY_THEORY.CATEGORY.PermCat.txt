
Require Export Inverses_Group.
(* Inverses_Group:
Require Export Group.

Set Implicit Arguments.
Unset Strict Implicit.
    
Section inv_def.

Variable A : Monoid.

Structure Inverses : Type := 
  {Inv_elt_l : A;
   Inv_elt_r : A;
   Prf_invs1 : Inverses_rel Inv_elt_l Inv_elt_r;
   Prf_invs2 : Inverses_rel Inv_elt_r Inv_elt_l}.

Definition Inverses_eq (x y : Inverses) := Inv_elt_l x =_S Inv_elt_l y.

Lemma Inverses_equiv : Equivalence Inverses_eq.

Canonical Structure Inverses_setoid : Setoid := Inverses_equiv.

Lemma Eq_abb'a' :
 forall a b a' b' : A,
 Inverses_rel a a' -> Inverses_rel b b' -> Inverses_rel (a +_M b) (b' +_M a').

 Section inverses_comp_def.

 Variable x y : Inverses_setoid.

 Definition Inv_comp_elt_l := Inv_elt_l x +_M Inv_elt_l y.

 Definition Inv_comp_elt_r := Inv_elt_r y +_M Inv_elt_r x.

 Lemma Inv_comp_invs1 : Inverses_rel Inv_comp_elt_l Inv_comp_elt_r.

 Lemma Inv_comp_invs2 : Inverses_rel Inv_comp_elt_r Inv_comp_elt_l.

 Canonical Structure Inverses_comp : Inverses_setoid :=
   Build_Inverses Inv_comp_invs1 Inv_comp_invs2.

 End inverses_comp_def.

Lemma Inverses_congl : Map2_congl_law Inverses_comp.

Lemma Inverses_congr : Map2_congr_law Inverses_comp.

Definition Inverses_op := Build_Map2 Inverses_congl Inverses_congr.

Lemma Mass_Inverses : Monoid_ass Inverses_op.

Lemma Inverses_unit_invs : Inverses_rel (Munit A) (Munit A).

Canonical Structure Inverses_unit :=
  Build_Inverses Inverses_unit_invs Inverses_unit_invs.

Lemma Midl_Inverses : Monoid_idl Inverses_op Inverses_unit.

Lemma Midr_Inverses : Monoid_idr Inverses_op Inverses_unit.

Canonical Structure Inverses_Monoid :=
  Build_Monoid Mass_Inverses Midl_Inverses Midr_Inverses.

Definition Opposite (x : Inverses_setoid) : Inverses_setoid :=
  Build_Inverses (Prf_invs2 x) (Prf_invs1 x).

Lemma Opposite_map_law : Map_law Opposite.

Canonical Structure Opposite_map := Build_Map Opposite_map_law.

Lemma Inverses_invl : Group_invl Opposite_map.

Lemma Inverses_invr : Group_invr Opposite_map.

Canonical Structure Inverses_group := Build_Group Inverses_invl Inverses_invr.

End inv_def. *)
Require Export SET.
(* SET:
Require Export Category.

Set Implicit Arguments.
Unset Strict Implicit.

Lemma Comp_map_congl : Congl_law Comp_map.

Lemma Comp_map_congr : Congr_law Comp_map.

Definition Comp_SET := Build_Comp Comp_map_congl Comp_map_congr.

Lemma Assoc_SET : Assoc_law Comp_SET.

Definition Id_SET := Id_map.
 
Lemma Idl_SET : Idl_law Comp_SET Id_SET.

Lemma Idr_SET : Idr_law Comp_SET Id_SET.

Canonical Structure SET := Build_Category Assoc_SET Idl_SET Idr_SET. *)
 
Set Implicit Arguments.
Unset Strict Implicit.

Section endo_mon.

Variables (C : Category) (a : C).

Canonical Structure Endo_Monoid :=
  Build_Monoid (Prf_ass (c:=C) (a:=a) (b:=a) (c0:=a) (d:=a))
    (Prf_idl (c:=C) (a:=a) (b:=a)) (Prf_idr (c:=C) (a:=a) (b:=a)).

Definition Perm_Group := Inverses_group Endo_Monoid.

End endo_mon.
