
Require Export SET_Terminal.
(* SET_Terminal:
Require Export SET.
Require Export Single.
Require Export CatProperty.

Set Implicit Arguments.
Unset Strict Implicit.

Section set_terminal.

Variable S : Setoid.

Definition To_Single_fun (x : S) := Elt.
        
Lemma To_Single_map_law : Map_law To_Single_fun.

Definition To_Single := Build_Map To_Single_map_law.

End set_terminal.

Lemma Single_is_Terminal : IsTerminal To_Single.

Definition SET_Terminal : Terminal SET := Single_is_Terminal. *)
Require Export SET_Exponents.
(* SET_Exponents:
Require Export SET_BinProds.
Require Export Exponents.

Set Implicit Arguments.
Unset Strict Implicit.

Section verif_expo.

Variable A B : Setoid.

Definition S_expo := Map A B.

Definition S_eval_fun (fxa : SPROD (A ==> B) A) := Sprod_l fxa (Sprod_r fxa).

Lemma S_eval_map_law : Map_law S_eval_fun.

Definition S_eval := Build_Map S_eval_map_law.

 Section set_lambda_def.

 Variable C : Setoid.

  Section set_lambda_fun_def.

  Variable f : Map (SPROD C A) B.

   Section set_lambda_fun1_def.

   Variable c : C.

   Definition S_lambda_fun2 (a : A) := f (Build_Sprod c a).

   Lemma S_lambda_map_law2 : Map_law S_lambda_fun2.

   Definition S_lambda_fun1 := Build_Map S_lambda_map_law2.

   End set_lambda_fun1_def.

  Lemma S_lambda_map_law1 : Map_law S_lambda_fun1.

  Definition S_lambda1_fun := Build_Map S_lambda_map_law1.

  End set_lambda_fun_def.

 Lemma S_lambda_map_law : Map_law S_lambda1_fun.

 Definition S_Lambda := Build_Map S_lambda_map_law.

 End set_lambda_def. 

Lemma S_beta_rule : Beta_rule_law (C1:=SET_hasBinProd) S_eval S_Lambda.
                    
Lemma S_eta_rule : Eta_rule_law (C1:=SET_hasBinProd) S_eval S_Lambda.

Canonical Structure SET_hasExponent := Build_Exponent S_beta_rule S_eta_rule.

End verif_expo. *)
Require Export CCC.
(* CCC:
Require Export Exponents.
Require Export CatProperty.

Set Implicit Arguments.
Unset Strict Implicit.

Structure IsCartesian (C : Category) : Type := 
  {Car_terminal :> Terminal C; Car_BP :> HasBinProd C}.

Structure Cartesian : Type := 
  {Car_Cat :> Category; Prf_isCartesian :> IsCartesian Car_Cat}.

Structure IsCCC (C : Category) : Type := 
  {CCC_isCar :> IsCartesian C; CCC_exponent :> HasExponent CCC_isCar}.

Structure CCC : Type :=  {CCC_Car :> Cartesian; Prf_isCCC :> IsCCC CCC_Car}. *)

Set Implicit Arguments.
Unset Strict Implicit.

Definition SET_is_Cartesian := Build_IsCartesian SET_Terminal SET_hasBinProd.

Definition SET_is_CCC :=
  Build_IsCCC (CCC_isCar:=SET_is_Cartesian) SET_hasExponent.
