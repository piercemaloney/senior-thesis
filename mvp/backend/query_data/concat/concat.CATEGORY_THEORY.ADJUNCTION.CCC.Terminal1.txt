
Require Export FunOne.
(* FunOne:
Require Export ONE.
Require Export Functor.

Set Implicit Arguments.
Unset Strict Implicit.

Section Fun_One.

Variable C : Category.

Definition FunOne_ob (a : C) := Obone.

 Section funone_map_def.

 Variable a b : C.

 Definition FunOne_mor (f : a --> b) : FunOne_ob a --> FunOne_ob b :=
   Id_Obone.

 Lemma FunOne_map_law : Map_law FunOne_mor.

 Canonical Structure FunOne_map := Build_Map FunOne_map_law.

 End funone_map_def. 

Lemma FunOne_comp_law : Fcomp_law FunOne_map.

Lemma FunOne_id_law : Fid_law FunOne_map.

Canonical Structure FunOne := Build_Functor FunOne_comp_law FunOne_id_law.

End Fun_One. *)
Require Export Adj_UA.
(* Adj_UA:
Require Export CoUniversalArrow.
Require Export Adjunction.

Set Implicit Arguments.
Unset Strict Implicit.

Section adj_to_ua.

Variables (C D : Category) (F : Functor D C) (G : Functor C D) (ad : Adj F G).
Variable d : D.

Definition Unit_ob := F d.

Definition Unit_arrow := ApAphi ad (Id (F d)).
 
Definition Unit_arrow_diese (c : C) (f : d --> G c) := ApAphi_inv ad f.

Lemma Unit_UAlaw1 : UA_law1 Unit_arrow Unit_arrow_diese.

Lemma Unit_UAlaw2 : UA_law2 Unit_arrow Unit_arrow_diese.

Canonical Structure Unit' := Build_IsUA Unit_UAlaw1 Unit_UAlaw2.

Canonical Structure Unit := Build_UA Unit'.

Variable c : C.

Definition CoUnit_ob := G c.

Definition CoUnit_arrow := ApAphi_inv ad (Id (G c)).

Definition CoUnit_arrow_diese (d : D) (f : F d --> c) := ApAphi ad f.
                        
Lemma CoUnit_coUAlaw1 : CoUA_law1 CoUnit_arrow CoUnit_arrow_diese.

Lemma CoUnit_coUAlaw2 : CoUA_law2 CoUnit_arrow CoUnit_arrow_diese.

Canonical Structure CoUnit' := Build_IsCoUA CoUnit_coUAlaw1 CoUnit_coUAlaw2.

Canonical Structure CoUnit := Build_CoUA CoUnit'.

End adj_to_ua. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section terminal1_def.

Variable C : Category.

SubClass Terminal1 := RightAdj (FunOne C).

Variable t : Terminal1.

Let ua' := CoUnit t Obone.

Definition Terminal1_ob := CoUA_ob ua'. 

Definition MorT1 (a : C) := CoUA_diese ua' (a':=a) Id_Obone.

Lemma Prf_isTerminal1 : IsTerminal MorT1.
Proof.
red in |- *; intros a f.
apply (Prf_isCoUA_law2 ua' (f:=Id_Obone) (g:=f)).
unfold CoUA_eq in |- *; exact I.
Qed.

Canonical Structure Terminal1_to_Terminal := Build_Terminal Prf_isTerminal1.

End terminal1_def.

Coercion Terminal1_to_Terminal : Terminal1 >-> Terminal.
