
Require Export CatProperty.
(* CatProperty:
Require Export Dual.

Set Implicit Arguments.
Unset Strict Implicit.

Section epic_monic_def.

Variables (C : Category) (a b : C).
 
Definition Epic_law (f : a --> b) :=
  forall (c : C) (g h : b --> c), f o g =_S f o h -> g =_S h.

Structure > Epic : Type := 
  {Epic_mor : a --> b; Prf_isEpic :> Epic_law Epic_mor}.

Definition Monic_law (f : b --> a) :=
  forall (c : C) (g h : c --> b), g o f =_S h o f -> g =_S h.

Structure > Monic : Type := 
  {Monic_mor : b --> a; Prf_isMonic :> Monic_law Monic_mor}.

End epic_monic_def.

Section iso_def.

Variable C : Category.

Definition RIso_law (a b : C) (f : a --> b) (f1 : b --> a) := f1 o f =_S Id b.

Variable a b : C.

Definition AreIsos (f : a --> b) (f1 : b --> a) :=
  RIso_law f f1 /\ RIso_law f1 f.

Structure > Iso : Type := 
  {Iso_mor : a --> b; Inv_iso : b --> a; Prf_Iso :> AreIsos Iso_mor Inv_iso}.

Lemma Idl_inv : forall i : Iso, RIso_law (Iso_mor i) (Inv_iso i).

Lemma Idr_inv : forall i : Iso, RIso_law (Inv_iso i) (Iso_mor i).

Lemma Inv_iso_unique :
 forall f g : Iso, Iso_mor f =_S Iso_mor g -> Inv_iso f =_S Inv_iso g.

Lemma RightInv_epic :
 forall (h : a --> b) (h1 : b --> a), RIso_law h h1 -> Epic_law h.

End iso_def.

Coercion RightInv_epic : RIso_law >-> Epic_law.

Section initial_def.

Variable C : Category.

Definition IsInitial (a : C) (h : forall b : C, a --> b) :=
  forall (b : C) (f : a --> b), f =_S h b.
  
Structure > Initial : Type := 
  {Initial_ob : C;
   MorI : forall b : C, Initial_ob --> b;
   Prf_isInitial :> IsInitial MorI}.

Definition At_most_1mor (a b : C) := forall f g : a --> b, f =_S g.

Lemma UniqueI : forall (i : Initial) (b : C), At_most_1mor (Initial_ob i) b.

Lemma I_unic : forall i1 i2 : Initial, Iso (Initial_ob i1) (Initial_ob i2).

End initial_def.

Section terminal_def.

Variable C : Category.

Definition IsTerminal (b : C) (h : forall a : C, a --> b) :=
  forall (a : C) (f : a --> b), f =_S h a. 

Structure > Terminal : Type := 
  {Terminal_ob : C;
   MorT : forall a : C, a --> Terminal_ob;
   Prf_isTerminal :> IsTerminal MorT}.

Lemma UniqueT : forall (t : Terminal) (a : C), At_most_1mor a (Terminal_ob t).

End terminal_def.

Lemma Initial_dual :
 forall (C : Category) (a : C) (h : forall b : C, a --> b),
 IsInitial h -> IsTerminal (C:=Dual C) h.

Coercion Initial_dual : IsInitial >-> IsTerminal.

Definition IsTerminal' (C : Category) (b : C) (h : forall a : C, a --> b) :=
  IsInitial (C:=Dual C) h. *)

Set Implicit Arguments.
Unset Strict Implicit.

Section pulbs_def.

Variables (C : Category) (a b c : C) (f : a --> b) (g : c --> b).

 Section pulbs_laws.

 Variables (Fibred_prod : C) (Fibred_p : Fibred_prod --> a)
   (Fibred_q : Fibred_prod --> c).

 Definition Pullback_eq1 (r : C) (t1 : r --> a) (t2 : r --> c) :=
   t1 o f =_S t2 o g.

 Definition Pullback_law1 := Pullback_eq1 Fibred_p Fibred_q.

 Variable
   Pb_diese :
     forall (r : C) (t1 : r --> a) (t2 : r --> c),
     Pullback_eq1 t1 t2 -> (r --> Fibred_prod).

 Definition Pullback_eq2 (x y z : C) (f1 : x --> y) 
   (f2 : z --> y) (f3 : x --> z) := f1 =_S f3 o f2.

 Definition Pullback_law2 :=
   forall (r : C) (t1 : r --> a) (t2 : r --> c) (pe : Pullback_eq1 t1 t2),
   Pullback_eq2 t1 Fibred_p (Pb_diese pe).

 Definition Pullback_law3 :=
   forall (r : C) (t1 : r --> a) (t2 : r --> c) (pe : Pullback_eq1 t1 t2),
   Pullback_eq2 t2 Fibred_q (Pb_diese pe).

 Definition Pullback_law4 :=
   forall (r : C) (t1 : r --> a) (t2 : r --> c) (pe : Pullback_eq1 t1 t2)
     (g : r --> Fibred_prod),
   Pullback_eq2 t1 Fibred_p g ->
   Pullback_eq2 t2 Fibred_q g -> g =_S Pb_diese pe.

 End pulbs_laws.

Structure Pullback : Type := 
  {Fibred_prod : C;
   Fibred_p : Fibred_prod --> a;
   Fibred_q : Fibred_prod --> c;
   Prf_pb_law1 : Pullback_law1 Fibred_p Fibred_q;
   Pb_diese :
    forall (r : C) (t1 : r --> a) (t2 : r --> c),
    Pullback_eq1 t1 t2 -> (r --> Fibred_prod);
   Prf_pb_law2 : Pullback_law2 Fibred_p Pb_diese;
   Prf_pb_law3 : Pullback_law3 Fibred_q Pb_diese;
   Prf_pb_law4 : Pullback_law4 Fibred_p Fibred_q Pb_diese}.
 
End pulbs_def.

