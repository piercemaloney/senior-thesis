
Require Export Map.
(* Map:
Require Export Setoid.

Set Implicit Arguments.
Unset Strict Implicit.

Section maps.

Variable A B : Setoid.

Definition Map_law (f : A -> B) := forall x y : A, x =_S y -> f x =_S f y.

Structure > Map : Type :=  {Ap :> A -> B; Pres :> Map_law Ap}.

Lemma Pres1 : forall (m : Map) (x y : A), x =_S y -> m x =_S m y.

Definition Ext (f g : Map) := forall x : A, f x =_S g x.

Lemma Ext_equiv : Equivalence Ext.

Canonical Structure Map_setoid : Setoid := Ext_equiv.

End maps.

Infix "=_M" := Ext (at level 70).
Infix "==>" := Map_setoid (at level 95, right associativity).

Section id_map_def.

Variable A : Setoid.

Definition Id_fun (x : A) := x.
     
Lemma Id_fun_map_law : Map_law Id_fun.

Canonical Structure Id_map : Map A A := Id_fun_map_law.
  
End id_map_def.
 
Section mcomp.

Variables (A B C : Setoid) (f : Map A B) (g : Map B C).

Definition Comp_fun (x : A) := g (f x).

Lemma Comp_fun_map_law : Map_law Comp_fun.

Canonical Structure Comp_map : Map A C := Comp_fun_map_law.

End mcomp.

Infix "o_M" := Comp_map (at level 20, right associativity). *)

Set Implicit Arguments.
Unset Strict Implicit.

Section s_prod.

Variable A B : Setoid.

Structure Sprod : Type :=  {Sprod_l : A; Sprod_r : B}.

Definition Equal_Sprod (a1xb1 a2xb2 : Sprod) :=
  Sprod_l a1xb1 =_S Sprod_l a2xb2 /\ Sprod_r a1xb1 =_S Sprod_r a2xb2.

Lemma Equal_Sprod_equiv : Equivalence Equal_Sprod.
Proof.
apply Build_Equivalence.
unfold Reflexive in |- *; simple induction x; intros a b;
 unfold Equal_Sprod in |- *; simpl in |- *.
split.
apply Refl.
apply Refl.
apply Build_Partial_equivalence.
unfold Transitive in |- *.
simple induction x; intros a b; simple induction y; intros a' b';
 simple induction z; intros a'' b''.
unfold Equal_Sprod in |- *; simpl in |- *.
intros H H0; elim H; intros H1 H2; elim H0; intros H3 H4.
split.
apply Trans with a'; trivial.
apply Trans with b'; trivial.
unfold Symmetric in |- *; simple induction x; intros a b; simple induction y;
 intros a' b'.
unfold Equal_Sprod in |- *; simpl in |- *.
intros H; elim H; intros H1 H2.
split.
apply Sym; trivial.
apply Sym; trivial.
Qed.

Canonical Structure SPROD : Setoid := Equal_Sprod_equiv.

Lemma Proj1_SPROD_map_law : Map_law (Sprod_l:SPROD -> A).
Proof.
unfold Map_law in |- *; simpl in |- *.
simple induction x; intros a b; simple induction y; intros a' b'.
simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.
simple induction 1; trivial.
Qed.

Canonical Structure Proj1_SPROD : Map SPROD A := Proj1_SPROD_map_law.

Lemma Proj2_SPROD_map_law : Map_law (Sprod_r:SPROD -> B).
Proof.
unfold Map_law in |- *; simpl in |- *.
simple induction x; intros a b; simple induction y; intros a' b'.
simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.
simple induction 1; trivial.
Qed.

Canonical Structure Proj2_SPROD : Map SPROD B := Proj2_SPROD_map_law.

End s_prod.
