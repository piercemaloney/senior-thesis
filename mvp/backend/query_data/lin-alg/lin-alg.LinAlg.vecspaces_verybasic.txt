

Section MAIN.

Set Automatic Coercions Import.

Set Implicit Arguments.

Unset Strict Implicit.

From Algebra Require Export Field_facts.

Require Export equal_syntax.

Require Export more_syntax.

From Algebra Require Export Module_facts.



Section vecfielddef.



Definition vectorspace (F : field) : Type := MODULE F.

Definition VECSP (F : field) : category :=

  full_subcat (fun V : vectorspace F => V:MODULE F).



End vecfielddef.



Section jargon.

Variable F : field.

Variable V : vectorspace F.

Definition carrier := module_carrier.

Definition scalar_mult (a : F) (x : V) : V := a mX x.



Definition scalar_mult_comp :

  forall (x x' : F) (y y' : carrier V),

  x =' x' in _ -> y =' y' in _ -> x mX y =' x' mX y' in _ :=

  MODULE_comp (R:=F) (Mod:=V).

Definition one_acts_as_unit : forall x : carrier V, one mX x =' x in _ :=

  MODULE_unit_l (R:=F) (Mod:=V).

Definition quasi_associativity :

  forall (a b : F) (x : carrier V), (a rX b) mX x =' a mX b mX x in _ :=

  MODULE_assoc (R:=F) (Mod:=V).

Definition distributivity :

  forall (a : F) (x y : carrier V), a mX (x +' y) =' a mX x +' a mX y in _ :=

  MODULE_dist_l (R:=F) (Mod:=V).

Definition distributivity' :

  forall (a b : F) (x : carrier V), (a +' b) mX x =' a mX x +' b mX x in _ :=

  MODULE_dist_r (R:=F) (Mod:=V).

End jargon.



Variable F : field.

Variable V : vectorspace F.

Hint Unfold carrier module_carrier.

Hint Resolve scalar_mult_comp distributivity distributivity': algebra.



Section Lemmas1.



Lemma vector_cancellation :

 forall x y z : V, x +' z =' y +' z in _ -> x =' y in _.

intros.

apply GROUP_reg_right with z; auto with algebra.

Qed.



Lemma Zero_times_a_vector_gives_zero :

 forall v : V, (zero F) mX v =' (zero V) in _.

auto with algebra.

Qed.



Lemma a_scalar_times_zero_gives_zero :

 forall f : F, f mX (zero V) =' (zero V) in _.

auto with algebra.

Qed.

 

Section Lemmas1_2.



Lemma Mince_minus1 :

 forall (f : F) (v : V), (min f) mX v =' (min f mX v) in _.

auto with algebra.

Qed.

 

Lemma Mince_minus2 :

 forall (f : F) (v : V), (min f mX v) =' f mX (min v) in _.

auto with algebra.

Qed.

 

Lemma Mince_minus3 :

 forall (f : F) (v : V), (min f) mX v =' f mX (min v) in _.

intros.

apply Trans with (min f mX v); auto with algebra.

Qed.



Lemma vecspace_op_reg_l :

 forall (f : F) (v : V),

 ~ f =' (zero F) in _ -> f mX v =' (zero V) in _ -> v =' (zero V) in _.

intros.

apply Trans with (one mX v); auto with algebra.

apply Trans with ((field_inverse f rX f) mX v).

apply MODULE_comp; auto with algebra.

apply Sym; auto with algebra.

apply Trans with (field_inverse f mX f mX v); auto with algebra.

apply Trans with (field_inverse f mX (zero V)); auto with algebra.

Qed.



End Lemmas1_2.

End Lemmas1.



End MAIN.



Hint Resolve vector_cancellation Zero_times_a_vector_gives_zero

  a_scalar_times_zero_gives_zero Mince_minus1 Mince_minus2 Mince_minus3:

  algebra.

