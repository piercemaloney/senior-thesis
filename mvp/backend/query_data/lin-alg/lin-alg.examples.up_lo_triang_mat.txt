
Set Implicit Arguments.
Unset Strict Implicit.
Require Export vecspace_Mmn.
(* vecspace_Mmn:
Set Automatic Coercions Import.
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Matrices.

Section Vectorspace.
Variable F : field.
Variable m n : Nat.

Definition Mmn_set : SET.

Let add_law : law_of_composition Mmn_set.

Definition Mmn_sgp : SGROUP.

Definition Mmn_mon : MONOID.

Section group.
Let minmatrix : Mmn_mon -> Mmn_mon.

Let minmatrixmap : Map Mmn_mon Mmn_mon.

Definition Mmn_gp : GROUP.
End group.

Definition Mmn_abgp : ABELIAN_GROUP.

Section module.
Let scmult_sgp_fun : F -> Endo_SET Mmn_abgp.

Let scmult_sgp_map : Map (Build_monoid (ring_monoid F)) (Endo_SET Mmn_abgp).

Let scmult_sgp_hom :
  sgroup_hom (Build_monoid (ring_monoid F)) (Endo_SET Mmn_abgp).

Let scmult_mon_hom :
  monoid_hom (Build_monoid (ring_monoid F)) (Endo_SET Mmn_abgp).

Definition Mmn : VECSP F.
End module.
End Vectorspace.

Definition row_Map2 :
  forall (F : field) (m n : Nat), MAP2 (Mmn F m n) (fin m) (Fn F n).

Definition col_Map2 :
  forall (F : field) (m n : Nat), MAP2 (Mmn F m n) (fin n) (Fn F m). *)
Require Export subspaces.
(* subspaces:
Section MAIN.
Set Implicit Arguments.
Unset Strict Implicit.
Require Export vecspaces_verybasic.
Require Export arb_intersections.
From Algebra Require Export Sub_module.
From Algebra Require Export Singleton.
Require Export algebra_omissions.

Variable F : field.
Variable V : vectorspace F.
Section Subspace_def.

Definition subspace (F : field) (V : vectorspace F) := submodule V.

Variable W : subspace V.
Definition inj_subspace : Hom (W:VECSP F) V.

Lemma inj_subspace_injective : injective inj_subspace.

Lemma mult_inherited :
 forall (c : F) (x : W), inj_subspace (c mX x) =' c mX inj_subspace x in _.
End Subspace_def.

Section subspace_awkward_utils.

Definition is_subspace (W : part_set V) : Prop :=
  in_part (zero V) W /\
  (forall x y : V, in_part x W -> in_part y W -> in_part (x +' y) W) /\
  (forall (c : F) (x : V), in_part x W -> in_part (c mX x) W).

Lemma is_subspace_comp :
 forall S S' : part_set V, S =' S' in _ -> is_subspace S -> is_subspace S'.

Definition subspace_construction :
  forall Ws : part_set V,
  is_subspace Ws -> sigT (fun W : subspace V => W =' Ws in part_set V).

Definition alt_Build_subspace (W : part_set V) (H : is_subspace W) :
  subspace V := let (w, _) := subspace_construction H in w.

Lemma alt_Build_subspace_OK :
 forall (W : part_set V) (HW : is_subspace W),
 W =' alt_Build_subspace HW in _.

Lemma is_subspace_OK : forall W : subspace V, is_subspace W.

Lemma subspace_alt_characterization :
 forall Ws : part_set V,
 in_part (zero V) Ws /\
 (forall x y : V, in_part x Ws -> in_part y Ws -> in_part (x +' y) Ws) /\
 (forall (c : F) (x : V), in_part x Ws -> in_part (c mX x) Ws) <->
 (exists W : subspace V, W =' Ws in part_set V).

Definition Set_of_subspaces : part_set (part_set V).

Lemma Set_of_subspaces_closed_under_intersection :
 forall WS : part_set Set_of_subspaces,
 is_subspace (intersection (inject_subsets WS)).
End subspace_awkward_utils.

End MAIN.

Section Examples.
Variable F : field.
Variable V : vectorspace F.

Lemma singleton_zero_is_subspace : is_subspace (single (zero V)).

Definition triv_subspace : subspace V.

Definition full_subspace : subspace V.
End Examples. *)
 
Definition is_up_triang (F : field) (m n : Nat) (M : matrix F m n) :=
  forall (i : fin m) (j : fin n), index j < index i -> M i j =' (zero F) in _.

Definition is_lo_triang (F : field) (m n : Nat) (M : matrix F m n) :=
  forall (i : fin m) (j : fin n), index i < index j -> M i j =' (zero F) in _.

Definition is_upper_triangular_pred :
  forall (F : field) (m n : Nat), Predicate (Mmn F m n).
intros.
apply (Build_Predicate (Pred_fun:=is_up_triang (F:=F) (m:=m) (n:=n))).
red in |- *; simpl in |- *; red in |- *.
intros.
red in H.
apply Trans with (x i j); auto with algebra.
Defined.

Definition is_lower_triangular_pred :
  forall (F : field) (m n : Nat), Predicate (Mmn F m n).
intros.
apply (Build_Predicate (Pred_fun:=is_lo_triang (F:=F) (m:=m) (n:=n))).
red in |- *; simpl in |- *; red in |- *.
intros.
red in H.
apply Trans with (x i j); auto with algebra.
Defined.

Definition is_diagonal_pred :
  forall (F : field) (n : Nat), Predicate (Mmn F n n).
intros.
apply (Build_Predicate (Pred_fun:=is_diagonal (F:=F) (n:=n))).
red in |- *; simpl in |- *; red in |- *.
intros.
red in H.
apply Trans with (x i j); auto with algebra.
Defined.

Section trivial_lemmas.
Lemma id_is_diagonal :
 forall (F : field) (n : Nat), is_diagonal (identity_matrix F n).
simpl in |- *.
red in |- *.
simpl in |- *.
intros; destruct i; destruct j.
simpl in |- *; simpl in H.
apply Kronecker_case_unequal; auto with algebra.
Qed.

Lemma is_upper_and_lower_then_diagonal :
 forall (F : field) (n : Nat) (M : matrix F n n),
 is_up_triang M -> is_lo_triang M -> is_diagonal M.
intros; red in H, H0.
red in |- *.
intros.
case (nat_total_order _ _ H1); intro; auto with algebra.
Qed.
End trivial_lemmas.

Lemma up_triang_subspace :
 forall (F : field) (m n : Nat), is_subspace (is_upper_triangular_pred F m n).
intros.
red in |- *.
split; try split.
simpl in |- *.
red in |- *.
intros; simpl in |- *.
auto with algebra.
intros.
red in H0, H.
simpl in |- *; red in |- *.
intros.
apply Trans with (x i j +' y i j); auto with algebra.
apply Trans with ((zero F) +' (zero F)); auto with algebra.
intros; simpl in H; red in H; simpl in |- *; red in |- *.
intros; (apply Trans with (c rX (zero F)); auto with algebra).
simpl in |- *.
apply RING_comp; auto with algebra.
Qed.

Lemma lo_triang_subspace :
 forall (F : field) (m n : Nat), is_subspace (is_lower_triangular_pred F m n).
intros.
red in |- *.
split; try split.
simpl in |- *.
red in |- *.
intros; simpl in |- *.
auto with algebra.
intros.
red in H0, H.
simpl in |- *; red in |- *.
intros.
apply Trans with (x i j +' y i j); auto with algebra.
apply Trans with ((zero F) +' (zero F)); auto with algebra.
intros; simpl in H; red in H; simpl in |- *; red in |- *.
intros; (apply Trans with (c rX (zero F)); auto with algebra).
simpl in |- *.
apply RING_comp; auto with algebra.
Qed.

Lemma is_diagonal_subspace :
 forall (F : field) (n : Nat), is_subspace (is_diagonal_pred F n).
intros.
red in |- *.
split; try split.
simpl in |- *.
red in |- *.
intros; simpl in |- *.
auto with algebra.
intros.
red in H0, H.
simpl in |- *; red in |- *.
intros.
apply Trans with (x i j +' y i j); auto with algebra.
apply Trans with ((zero F) +' (zero F)); auto with algebra.
intros; simpl in H; red in H; simpl in |- *; red in |- *.
intros; (apply Trans with (c rX (zero F)); auto with algebra).
simpl in |- *.
apply RING_comp; auto with algebra.
Qed.