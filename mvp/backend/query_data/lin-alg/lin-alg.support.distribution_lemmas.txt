

Set Implicit Arguments.

Unset Strict Implicit.

Require Export mult_by_scalars.

Require Export const.

Require Export sums.



Lemma RING_sum_mult_dist_l :

 forall (R : ring) (n : Nat) (r : R) (a : seq n R),

 r rX sum a =' sum (pointwise (uncurry (RING_comp (R:=R))) (const_seq n r) a)

 in _.

simple induction n.

simpl in |- *.

auto with algebra.

intros.

apply Trans with (r rX sum (hdtl a)); auto with algebra; unfold hdtl in |- *.

apply Trans with (r rX (head a +' sum (Seqtl a))); auto with algebra.

apply Trans with (r rX head a +' r rX sum (Seqtl a)); auto with algebra.

apply

 Trans

  with

    (r rX head a +'

     sum

       (pointwise (uncurry (RING_comp (R:=R))) (Seqtl (const_seq (S n0) r))

          (Seqtl a))).

apply SGROUP_comp; auto with algebra.

apply

 Trans

  with

    (sum (pointwise (uncurry (RING_comp (R:=R))) (const_seq n0 r) (Seqtl a)));

 auto with algebra.

apply sum_comp.

apply toMap.

apply pointwise_comp; auto with algebra.

apply Sym.

change (Seqtl (const_seq (S n0) r) =' const_seq (pred (S n0)) r in _) in |- *.

apply Seqtl_const_seq.

apply Sym.

apply

 Trans

  with

    (sum

       (hdtl (pointwise (uncurry (RING_comp (R:=R))) (const_seq (S n0) r) a)));

 auto with algebra.

unfold hdtl in |- *.

apply

 Trans

  with

    (head (pointwise (uncurry (RING_comp (R:=R))) (const_seq (S n0) r) a) +'

     sum

       (pointwise (uncurry (RING_comp (R:=R))) (Seqtl (const_seq (S n0) r))

          (Seqtl a))); auto with algebra.

apply

 Trans

  with

    (head (pointwise (uncurry (RING_comp (R:=R))) (const_seq (S n0) r) a) +'

     sum

       (Seqtl (pointwise (uncurry (RING_comp (R:=R))) (const_seq (S n0) r) a)));

 auto with algebra.

Qed.



Lemma MODULE_sum_mult_dist_l :

 forall (R : ring) (M : module R) (n : Nat) (r : R) (a : seq n M),

 r mX sum a =' sum (mult_by_scalars (const_seq n r) a) in _.

simple induction n.

simpl in |- *.

auto with algebra.

intros.

apply Trans with (r mX sum (hdtl a)); auto with algebra; unfold hdtl in |- *.

apply Trans with (r mX (head a +' sum (Seqtl a))); auto with algebra.

apply Trans with (r mX head a +' r mX sum (Seqtl a)); auto with algebra.

apply

 Trans

  with

    (r mX head a +'

     sum (mult_by_scalars (Seqtl (const_seq (S n0) r)) (Seqtl a))).

apply SGROUP_comp; auto with algebra.

apply Trans with (sum (mult_by_scalars (const_seq n0 r) (Seqtl a)));

 auto with algebra.

apply sum_comp.

apply toMap.

apply mult_by_scalars_comp; auto with algebra.

apply Sym.

change (Seqtl (const_seq (S n0) r) =' const_seq (pred (S n0)) r in _) in |- *.

apply Seqtl_const_seq.

apply Trans with (sum (hdtl (mult_by_scalars (const_seq (S n0) r) a)));

 auto with algebra.

unfold hdtl in |- *.

apply

 Trans

  with

    (head (mult_by_scalars (const_seq (S n0) r) a) +'

     sum (mult_by_scalars (Seqtl (const_seq (S n0) r)) (Seqtl a)));

 auto with algebra.

apply

 Trans

  with

    (head (mult_by_scalars (const_seq (S n0) r) a) +'

     sum (Seqtl (mult_by_scalars (const_seq (S n0) r) a))); 

 auto with algebra.

Qed.



Hint Resolve RING_sum_mult_dist_l MODULE_sum_mult_dist_l: algebra.



Lemma pointwise_module_assoc :

 forall (R : ring) (M : module R) (n : Nat) (r r' : seq n R) (m : seq n M),

 let rmult := uncurry (RING_comp (R:=R)) in

 mult_by_scalars r (mult_by_scalars r' m) ='

 mult_by_scalars (pointwise rmult r r') m in _.

intros.

intro i; simpl in |- *.

auto with algebra.

Qed.



Hint Resolve pointwise_module_assoc: algebra.
