
Set Implicit Arguments.
Unset Strict Implicit.
Require Export vecspace_Mmn.
(* vecspace_Mmn:
Set Automatic Coercions Import.
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Matrices.

Section Vectorspace.
Variable F : field.
Variable m n : Nat.

Definition Mmn_set : SET.

Let add_law : law_of_composition Mmn_set.

Definition Mmn_sgp : SGROUP.

Definition Mmn_mon : MONOID.

Section group.
Let minmatrix : Mmn_mon -> Mmn_mon.

Let minmatrixmap : Map Mmn_mon Mmn_mon.

Definition Mmn_gp : GROUP.
End group.

Definition Mmn_abgp : ABELIAN_GROUP.

Section module.
Let scmult_sgp_fun : F -> Endo_SET Mmn_abgp.

Let scmult_sgp_map : Map (Build_monoid (ring_monoid F)) (Endo_SET Mmn_abgp).

Let scmult_sgp_hom :
  sgroup_hom (Build_monoid (ring_monoid F)) (Endo_SET Mmn_abgp).

Let scmult_mon_hom :
  monoid_hom (Build_monoid (ring_monoid F)) (Endo_SET Mmn_abgp).

Definition Mmn : VECSP F.
End module.
End Vectorspace.

Definition row_Map2 :
  forall (F : field) (m n : Nat), MAP2 (Mmn F m n) (fin m) (Fn F n).

Definition col_Map2 :
  forall (F : field) (m n : Nat), MAP2 (Mmn F m n) (fin n) (Fn F m). *)
Require Export pointwise.
(* pointwise:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export concat.
From Algebra Require Export Cartesian.

Definition pointwise :
  forall (A B C D : Setoid) (op : Map (cart B C) D) 
    (f : Map A B) (g : Map A C), MAP A D.

Lemma pointwise_comp_general :
 forall (A B C D : Setoid) (op op' : Map (cart B C) D) 
   (f f' : Map A B) (g g' : Map A C),
 op =' op' in MAP _ _ ->
 f =' f' in MAP _ _ ->
 g =' g' in MAP _ _ -> pointwise op f g =' pointwise op' f' g' in _.

Lemma pointwise_comp :
 forall (n : Nat) (B C D : Setoid) (op op' : Map (cart B C) D)
   (f f' : seq n B) (g g' : seq n C),
 op =' op' in MAP _ _ ->
 f =' f' in _ -> g =' g' in _ -> pointwise op f g =' pointwise op' f' g' in _.

Hint Resolve pointwise_comp: algebra.

Lemma pointwise_hd :
 forall (A B C : Setoid) (n : Nat) (v : seq (S n) A) 
   (w : seq (S n) B) (op : Map (cart A B) C) (H : 0 < S n),
 pointwise op v w (Build_finiteT H) ='
 op (couple (v (Build_finiteT H)) (w (Build_finiteT H))) in _.

Hint Resolve pointwise_hd: algebra.

Lemma pointwise_cons :
 forall (A B C : Setoid) (a : A) (b : B) (n : Nat) 
   (v : seq n A) (w : seq n B) (op : Map (cart A B) C),
 pointwise op (a;; v) (b;; w) =' op (couple a b);; pointwise op v w
 in seq _ _.

Hint Resolve pointwise_cons: algebra.

Lemma pointwise_hd_tl :
 forall (A B C : Setoid) (n : Nat) (v : seq (S n) A) 
   (w : seq (S n) B) (op : Map (cart A B) C),
 pointwise op v w ='
 op (couple (head v) (head w));; pointwise op (Seqtl v) (Seqtl w) in 
 seq _ _.

Hint Resolve pointwise_hd_tl: algebra.

Lemma pointwise_Seqtl :
 forall (A B C : Setoid) (n : Nat) (v : seq n A) (w : seq n B)
   (op : Map (cart A B) C),
 pointwise op (Seqtl v) (Seqtl w) =' Seqtl (pointwise op v w) in seq _ _.

Hint Resolve pointwise_Seqtl: algebra.

Lemma pointwise_concat :
 forall (A B C : Setoid) (n m : Nat) (v : seq n A) 
   (w : seq m A) (x : seq n B) (y : seq m B) (op : MAP (cart A B) C),
 pointwise op (v ++ w) (x ++ y) =' pointwise op v x ++ pointwise op w y
 in seq _ _.

Hint Resolve pointwise_concat: algebra. *)
Require Export sums.
(* sums:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export Map_embed.
Require Export algebra_omissions.
From Algebra Require Export Sub_monoid.
Require Export more_syntax.

Fixpoint sum (V : monoid) (n : Nat) {struct n} : seq n V -> V :=
  match n return (seq n V -> V) with
  | O => fun x : seq 0 V => zero V
  | S m => fun x : seq (S m) V => head x +' sum (Seqtl x)
  end.

Lemma sum_comp :
 forall (M : monoid) (n : Nat) (f f' : seq n M),
 f =' f' in _ -> sum f =' sum f' in _.

Hint Resolve sum_comp: algebra.

Lemma sum_cons :
 forall (M : monoid) (m : M) (n : Nat) (f : seq n M),
 sum (m;; f) =' m +' sum f in _.

Hint Resolve sum_cons: algebra.

Lemma sum_concat :
 forall (n m : Nat) (G : monoid) (a : seq n G) (b : seq m G),
 sum (a ++ b) =' sum a +' sum b in _.

Hint Resolve sum_concat: algebra.

Lemma subtype_sum :
 forall (n : nat) (A : monoid) (B : submonoid A) (c : seq n B),
 subtype_elt (sum c) =' sum (Map_embed c) in _. *)

Section matrix_x_vector.
Definition mat_vec_mult_fun :
  forall (F : field) (m n : Nat), Mmn F m n -> Fn F n -> Fn F m.
intros.
simpl in X, X0.
simpl in |- *.
apply
 (Build_Map
    (Ap:=fun i : fin m =>
         sum (pointwise (uncurry (RING_comp (R:=F))) (Ap2_Map X i) X0))).
red in |- *; simpl in |- *.
intros.
apply sum_comp; auto with algebra;
 (apply toMap; apply pointwise_comp; auto with algebra).
simpl in |- *.
red in |- *; simpl in |- *.
intro; destruct X; simpl in |- *; auto with algebra.
Defined.

Definition matXvec :
  forall (F : field) (m n : Nat), Map2 (Mmn F m n) (Fn F n) (Fn F m).
intros; apply (Build_Map2 (Ap2:=mat_vec_mult_fun (F:=F) (m:=m) (n:=n))).
red in |- *; simpl in |- *; red in |- *; simpl in |- *.
intros.
apply sum_comp; auto with algebra;
 (apply toMap; apply pointwise_comp; auto with algebra).
simpl in |- *.
red in |- *; simpl in |- *.
intro; (apply H; auto with algebra).
Defined.
End matrix_x_vector.

Section matrix_x_matrix.
Definition mat_mat_mult_fun :
  forall (F : field) (m n p : Nat), Mmn F m n -> Mmn F n p -> Mmn F m p.
intros F m n p M N.
apply
 (Build_Map2
    (Ap2:=fun i j =>
          sum (pointwise (uncurry (RING_comp (R:=F))) (row M i) (col N j)))).
red in |- *; simpl in |- *.
intros.
apply sum_comp; auto with algebra.
apply toMap; apply pointwise_comp; auto with algebra.
change (row M x =' row M x' in _) in |- *.
apply row_comp; auto with algebra.
change (col N y =' col N y' in _) in |- *.
apply col_comp; auto with algebra.
Defined.

Definition matXmat :
  forall (F : field) (m n p : Nat), Map2 (Mmn F m n) (Mmn F n p) (Mmn F m p).
intros;
 apply (Build_Map2 (Ap2:=mat_mat_mult_fun (F:=F) (m:=m) (n:=n) (p:=p))).
red in |- *; simpl in |- *.
intros.
apply sum_comp; auto with algebra;
 (apply toMap; apply pointwise_comp; auto with algebra).
change (row x i =' row x' i' in _) in |- *.
apply row_comp; auto with algebra.
change (col y j =' col y' j' in _) in |- *.
apply col_comp; auto with algebra.
Defined.
End matrix_x_matrix.

Section facts.
Variable F : field.
Variable n m p : Nat.
Variable M : Mmn F m n.
Variable N : Mmn F n p.
Lemma matXmat_col :
 forall i : fin p,
 col (matXmat _ _ _ _ M N) i =' matXvec _ _ _ M (col N i) in _.
intros.
unfold col, matXmat, matXvec in |- *.
simpl in |- *.
red in |- *; simpl in |- *.
intros.
apply sum_comp; auto with algebra.
Qed.
End facts.

Section morefacts.
From Algebra Require Export Cfield_facts.
Variable F : cfield.
Variable n m p : Nat.
Variable M : Mmn F m n.
Variable N : Mmn F n p.
Lemma matXmat_row :
 forall i : fin m,
 row (matXmat _ _ _ _ M N) i =' matXvec _ _ _ (transpose N) (row M i) in _.
intros.
unfold transpose, row, matXmat, matXvec in |- *.
simpl in |- *.
destruct N.
red in |- *; simpl in |- *.
unfold row, col in |- *.
intros.
apply sum_comp; auto with algebra.
simpl in |- *.
red in |- *; simpl in |- *.
auto with algebra.
Qed.
End morefacts.

