
Set Implicit Arguments.
Unset Strict Implicit.
Require Export empty.
(* empty:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export seq_set.

Definition empty_seq : forall A : Setoid, seq 0 A.

Lemma seq_O_is_empty :
 forall (A : Setoid) (v : seq 0 A), v =' empty_seq A in _.

Hint Resolve seq_O_is_empty: algebra.

Lemma seq_set_empty_seq_is_empty :
 forall (A : Setoid) (v : seq 0 A), seq_set v =' empty A in _.

Hint Resolve seq_set_empty_seq_is_empty: algebra.

Lemma no_seq_n_empty :
 forall (n : Nat) (A : Setoid) (W : part_set A),
 W =' empty A in _ -> seq n W -> n =' 0 in _. *)
Require Export conshdtl.
(* conshdtl:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export finite.
From Algebra Require Export Parts.

Section MAIN.

Definition conseq :
  forall (A : Setoid) (n : Nat) (a : A) (v : seq n A), seq (S n) A.

Notation "a ;; b" := (conseq a b) (at level 60, right associativity).

Variables (A : Setoid) (n : Nat) (a : A).

Lemma cons_comp :
 forall (a' : A) (v v' : seq n A),
 a =' a' in _ -> v =' v' in _ -> a;; v =' a';; v' in _.

Hint Resolve cons_comp: algebra.

Lemma cons_first_element :
 forall (v : seq n A) (H : 0 < S n), (a;; v) (Build_finiteT H) =' a in _.

Definition head (A : Setoid) (n : Nat) (v : seq (S n) A) :=
  v (Build_finiteT (lt_O_Sn n)).

Lemma head_comp :
 forall (A : Setoid) (n : Nat) (v v' : seq (S n) A),
 v =' v' in _ -> head v =' head v' in _.

Hint Resolve head_comp cons_first_element: algebra.

Lemma head_unfolding1 :
 forall v : seq (S n) A,
 v (Build_finiteT (lt_O_Sn n)) =' a in _ -> head v =' a in _.

Lemma head_unfolding2 :
 forall v : seq (S n) A,
 a =' v (Build_finiteT (lt_O_Sn n)) in _ -> a =' head v in _.

Hint Resolve head_unfolding1 head_unfolding2: algebra.
Hint Extern 0 (head _ =' _ in _) => unfold head in |- *: algebra.
Hint Extern 0 (_ =' head _ in _) => unfold head in |- *: algebra.

Lemma head_cons_inv : forall v : seq n A, head (a;; v) =' a in _.

Hint Resolve head_cons_inv: algebra.

Lemma seq_S_O_contains_single_elt :
 forall (A : Setoid) (v : seq 1 A) (i : fin 1), v i =' head v in _.

Hint Resolve seq_S_O_contains_single_elt: algebra.

Lemma seq_S_O_head_fixes_everything :
 forall (A : Setoid) (v v' : seq 1 A), head v =' head v' in _ -> v =' v' in _.

Hint Resolve seq_S_O_head_fixes_everything: algebra.

Lemma cons_later_elements :
 forall (v : seq n A) (i : Nat) (Hi : S i < S n) (Hi' : i < n),
 (a;; v) (Build_finiteT Hi) =' v (Build_finiteT Hi') in _.

Hint Resolve cons_later_elements: algebra.

Definition Seqtl : forall n : Nat, seq n A -> seq (pred n) A. 

Lemma Seqtl_comp :
 forall v v' : seq n A, v =' v' in _ -> Seqtl v =' Seqtl v' in _.

Hint Resolve Seqtl_comp: algebra.

Definition hdtl (v : seq (S n) A) := head v;; Seqtl v:seq (S n) A.

Lemma conseq_hdtl :
 forall (v : seq (S n) A) (H : 0 < S n),
 v =' v (Build_finiteT H);; Seqtl v in _.

Hint Resolve conseq_hdtl: algebra.

Lemma hdtl_x_is_x : forall v : seq (S n) A, v =' hdtl v in _.

Hint Resolve hdtl_x_is_x: algebra.
Hint Extern 0 (head _;; Seqtl _ =' _ in _) =>
  fold hdtl in |- *; apply Sym; apply hdtl_x_is_x: algebra.
Hint Extern 0 (_ =' head _;; Seqtl _ in _) =>
  fold hdtl in |- *; apply hdtl_x_is_x: algebra.

Lemma cons_lemma_nice :
 forall P : Predicate (seq (S n) A),
 (forall (a : A) (v : seq n A), Pred_fun P (a;; v)) ->
 forall w : seq (S n) A, Pred_fun P w.

Lemma cons_lemma_verynice :
 forall (P : Predicate (seq (S n) A)) (H : 0 < S n) (w : seq (S n) A),
 Pred_fun P (w (Build_finiteT H);; Seqtl w) -> Pred_fun P w.

Lemma Seqtl_cons_inv : forall v : seq n A, Seqtl (a;; v) =' v in _.

Hint Resolve Seqtl_cons_inv: algebra.

Lemma Seqtl_to_seq :
 forall (v : seq (S n) A) (i : Nat) (Hi : i < n) (HSi : S i < S n),
 Seqtl v (Build_finiteT Hi) =' v (Build_finiteT HSi) in _.

Hint Resolve Seqtl_to_seq: algebra.

Lemma split_hd_tl_equality :
 forall v w : seq (S n) A,
 head v =' head w in _ -> Seqtl v =' Seqtl w in _ -> v =' w in _.

Hint Resolve split_hd_tl_equality: algebra.
End MAIN.

Notation "a ;; b" := (conseq a b) (at level 60, right associativity).

Hint Resolve cons_comp: algebra.
Hint Resolve head_comp cons_first_element: algebra.
Hint Resolve head_unfolding1 head_unfolding2: algebra.
Hint Extern 0 (head _ =' _ in _) => unfold head in |- *: algebra.
Hint Extern 0 (_ =' head _ in _) => unfold head in |- *: algebra.
Hint Resolve head_cons_inv: algebra.
Hint Resolve cons_later_elements: algebra.
Hint Resolve Seqtl_comp: algebra.
Hint Resolve conseq_hdtl: algebra.
Hint Resolve hdtl_x_is_x: algebra.
Hint Extern 0 (head _;; Seqtl _ =' _ in _) =>
  fold hdtl in |- *; apply Sym; apply hdtl_x_is_x: algebra.
Hint Extern 0 (_ =' head _;; Seqtl _ in _) =>
  fold hdtl in |- *; apply hdtl_x_is_x: algebra.
Hint Resolve Seqtl_cons_inv: algebra.
Hint Resolve Seqtl_to_seq: algebra.
Hint Resolve split_hd_tl_equality: algebra.
Hint Resolve seq_S_O_contains_single_elt: algebra.
Hint Resolve seq_S_O_head_fixes_everything: algebra. *)

Definition omit :
  forall (A : Setoid) (n : Nat), seq n A -> fin n -> seq (pred n) A.
destruct n.
auto.
induction  n as [| n Hrecn].
intros.
apply (empty_seq A).
intros.
case X0.
intro x; case x.
intro.
exact (Seqtl X).
intros.
exact (head X;; Hrecn (Seqtl X) (Build_finiteT (lt_S_n _ _ in_range_prf))).
Defined.

Lemma omit_comp :
 forall (A : Setoid) (n : Nat) (v v' : seq n A) (i i' : fin n),
 v =' v' in _ -> i =' i' in _ -> omit v i =' omit v' i' in _.
destruct n.
intros.
auto with algebra.
induction  n as [| n Hrecn].
intros.
unfold omit in |- *.
unfold nat_rect in |- *.
auto with algebra.
intros v v' i.
case i.
intros x l i'.
case i'.
intros.
apply Trans with (omit v' (Build_finiteT l)).
unfold omit in |- *.
unfold nat_rect in |- *.
generalize l H0; clear H0 l.
destruct x as [| n0].
intros.
change (Seqtl v =' Seqtl v' in _) in |- *. 
apply Seqtl_comp; auto with algebra.
intros.
simpl in |- *.
apply cons_comp; auto with algebra.
unfold omit in Hrecn.
unfold nat_rect in Hrecn.
apply Hrecn.
change (Seqtl v =' Seqtl v' in _) in |- *.
apply Seqtl_comp; auto with algebra.
auto with algebra.
unfold omit in |- *.
unfold nat_rect in |- *.
generalize l H0; clear H0 l.
destruct x as [| n0].
destruct index as [| n0].
intros; auto with algebra.
intros.
simpl in H0.
inversion H0.
intros.
generalize l H0; clear H0 l.
destruct index as [| n1].
intros.
simpl in H0.
inversion H0.
intros.
simpl in |- *.
apply cons_comp; auto with algebra.
unfold omit in Hrecn.
unfold nat_rect in Hrecn.
apply Hrecn; auto with algebra.
Qed.

Hint Resolve omit_comp: algebra.

Lemma omit_removes :
 forall (n : Nat) (A : Setoid) (v : seq n A) (i : fin n) (j : fin (pred n)),
 sigT (fun i' => v i' =' omit v i j in _).
destruct n.
intros.
apply False_rect; auto with algebra.

intros.
generalize (j:fin n).
clear j.
intro j.

induction  n as [| n Hrecn].
apply False_rect.
apply fin_O_nonexistent; auto with algebra.

case i.
intro x; case x.
intros.
set (l := in_range_prf) in *.
case j.
intros.
set (l0 := in_range_prf0) in *.
apply
 (existT
    (fun i' : fin (S (S n)) =>
     Ap v i' =' omit v (Build_finiteT l) (Build_finiteT l0) in _)
    (Build_finiteT (lt_n_S _ _ l0))).
apply Trans with (Seqtl v (Build_finiteT l0)); auto with algebra.

intros.
rename in_range_prf into l.
case j.
intro x0; case x0.
intro l0.
apply
 (existT
    (fun i' : fin (S (S n)) =>
     Ap v i' =' Ap (omit v (Build_finiteT l)) (Build_finiteT l0) in _)
    (Build_finiteT (lt_O_Sn (S n)))).
apply Trans with (head (omit v (Build_finiteT l))); auto with algebra.

intros.
rename in_range_prf into l0.
generalize
 (Hrecn (Seqtl v) (Build_finiteT (lt_S_n _ _ l))
    (Build_finiteT (lt_S_n _ _ l0))).
intro.
inversion_clear X.
generalize H.
clear H.
case x1.
intros.
apply
 (existT
    (fun i' : fin (S (S n)) =>
     Ap v i' =' Ap (omit v (Build_finiteT l)) (Build_finiteT l0) in _)
    (Build_finiteT (lt_n_S _ _ in_range_prf))).
apply
 Trans
  with
    ((head v;; omit (Seqtl v) (Build_finiteT (lt_S_n _ _ l)))
       (Build_finiteT l0)); auto with algebra.
Defined.

Lemma omit_removes' :
 forall (n : Nat) (A : Setoid) (v : seq n A) (i j : fin n),
 ~ i =' j in _ -> sigT (fun j' => v j =' omit v i j' in _).
destruct n.
intros.
apply False_rect; auto with algebra.

induction  n as [| n Hrecn].
intros.
absurd (i =' j in _).
auto.
apply fin_S_O_unique; auto with algebra.
intros A v i.
elim i.
intro i'; case i'.
intros Hi j.
elim j.
intro j'; case j'.
intros.
simpl in H.
absurd (0 = 0); auto.
intros n0 p0 H.
exists (Build_finiteT (lt_S_n _ _ p0)).
simpl in |- *.
apply Ap_comp; auto with algebra.
simpl in |- *.
auto.

intros gat Hg vraag. 
elim vraag.
intro vr; case vr.
intros Hvr H.
exists (Build_finiteT (lt_O_Sn n)).
simpl in |- *.
unfold head in |- *.
apply Ap_comp; auto with algebra.
simpl in |- *.
auto.

intros vr' Hvr H.
assert
 (~ Build_finiteT (lt_S_n _ _ Hg) =' Build_finiteT (lt_S_n _ _ Hvr) in fin _).
simpl in |- *; simpl in H; auto.
set (aw := Hrecn _ (Seqtl v) _ _ H0) in *.
case aw.
intro x; elim x.
intros.
exists (Build_finiteT (lt_n_S _ _ in_range_prf)).
apply Trans with (Seqtl v (Build_finiteT (lt_S_n vr' (S n) Hvr))).
apply Sym.
apply Seqtl_to_seq; auto with algebra.
apply
 Trans
  with
    (omit (Seqtl v) (Build_finiteT (lt_S_n gat (S n) Hg))
       (Build_finiteT in_range_prf)); auto with algebra.
Defined.