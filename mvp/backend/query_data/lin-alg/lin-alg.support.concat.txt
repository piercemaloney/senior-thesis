
Set Implicit Arguments.
Unset Strict Implicit.
Require Export conshdtl.
(* conshdtl:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export finite.
From Algebra Require Export Parts.

Section MAIN.

Definition conseq :
  forall (A : Setoid) (n : Nat) (a : A) (v : seq n A), seq (S n) A.

Notation "a ;; b" := (conseq a b) (at level 60, right associativity).

Variables (A : Setoid) (n : Nat) (a : A).

Lemma cons_comp :
 forall (a' : A) (v v' : seq n A),
 a =' a' in _ -> v =' v' in _ -> a;; v =' a';; v' in _.

Hint Resolve cons_comp: algebra.

Lemma cons_first_element :
 forall (v : seq n A) (H : 0 < S n), (a;; v) (Build_finiteT H) =' a in _.

Definition head (A : Setoid) (n : Nat) (v : seq (S n) A) :=
  v (Build_finiteT (lt_O_Sn n)).

Lemma head_comp :
 forall (A : Setoid) (n : Nat) (v v' : seq (S n) A),
 v =' v' in _ -> head v =' head v' in _.

Hint Resolve head_comp cons_first_element: algebra.

Lemma head_unfolding1 :
 forall v : seq (S n) A,
 v (Build_finiteT (lt_O_Sn n)) =' a in _ -> head v =' a in _.

Lemma head_unfolding2 :
 forall v : seq (S n) A,
 a =' v (Build_finiteT (lt_O_Sn n)) in _ -> a =' head v in _.

Hint Resolve head_unfolding1 head_unfolding2: algebra.
Hint Extern 0 (head _ =' _ in _) => unfold head in |- *: algebra.
Hint Extern 0 (_ =' head _ in _) => unfold head in |- *: algebra.

Lemma head_cons_inv : forall v : seq n A, head (a;; v) =' a in _.

Hint Resolve head_cons_inv: algebra.

Lemma seq_S_O_contains_single_elt :
 forall (A : Setoid) (v : seq 1 A) (i : fin 1), v i =' head v in _.

Hint Resolve seq_S_O_contains_single_elt: algebra.

Lemma seq_S_O_head_fixes_everything :
 forall (A : Setoid) (v v' : seq 1 A), head v =' head v' in _ -> v =' v' in _.

Hint Resolve seq_S_O_head_fixes_everything: algebra.

Lemma cons_later_elements :
 forall (v : seq n A) (i : Nat) (Hi : S i < S n) (Hi' : i < n),
 (a;; v) (Build_finiteT Hi) =' v (Build_finiteT Hi') in _.

Hint Resolve cons_later_elements: algebra.

Definition Seqtl : forall n : Nat, seq n A -> seq (pred n) A. 

Lemma Seqtl_comp :
 forall v v' : seq n A, v =' v' in _ -> Seqtl v =' Seqtl v' in _.

Hint Resolve Seqtl_comp: algebra.

Definition hdtl (v : seq (S n) A) := head v;; Seqtl v:seq (S n) A.

Lemma conseq_hdtl :
 forall (v : seq (S n) A) (H : 0 < S n),
 v =' v (Build_finiteT H);; Seqtl v in _.

Hint Resolve conseq_hdtl: algebra.

Lemma hdtl_x_is_x : forall v : seq (S n) A, v =' hdtl v in _.

Hint Resolve hdtl_x_is_x: algebra.
Hint Extern 0 (head _;; Seqtl _ =' _ in _) =>
  fold hdtl in |- *; apply Sym; apply hdtl_x_is_x: algebra.
Hint Extern 0 (_ =' head _;; Seqtl _ in _) =>
  fold hdtl in |- *; apply hdtl_x_is_x: algebra.

Lemma cons_lemma_nice :
 forall P : Predicate (seq (S n) A),
 (forall (a : A) (v : seq n A), Pred_fun P (a;; v)) ->
 forall w : seq (S n) A, Pred_fun P w.

Lemma cons_lemma_verynice :
 forall (P : Predicate (seq (S n) A)) (H : 0 < S n) (w : seq (S n) A),
 Pred_fun P (w (Build_finiteT H);; Seqtl w) -> Pred_fun P w.

Lemma Seqtl_cons_inv : forall v : seq n A, Seqtl (a;; v) =' v in _.

Hint Resolve Seqtl_cons_inv: algebra.

Lemma Seqtl_to_seq :
 forall (v : seq (S n) A) (i : Nat) (Hi : i < n) (HSi : S i < S n),
 Seqtl v (Build_finiteT Hi) =' v (Build_finiteT HSi) in _.

Hint Resolve Seqtl_to_seq: algebra.

Lemma split_hd_tl_equality :
 forall v w : seq (S n) A,
 head v =' head w in _ -> Seqtl v =' Seqtl w in _ -> v =' w in _.

Hint Resolve split_hd_tl_equality: algebra.
End MAIN.

Notation "a ;; b" := (conseq a b) (at level 60, right associativity).

Hint Resolve cons_comp: algebra.
Hint Resolve head_comp cons_first_element: algebra.
Hint Resolve head_unfolding1 head_unfolding2: algebra.
Hint Extern 0 (head _ =' _ in _) => unfold head in |- *: algebra.
Hint Extern 0 (_ =' head _ in _) => unfold head in |- *: algebra.
Hint Resolve head_cons_inv: algebra.
Hint Resolve cons_later_elements: algebra.
Hint Resolve Seqtl_comp: algebra.
Hint Resolve conseq_hdtl: algebra.
Hint Resolve hdtl_x_is_x: algebra.
Hint Extern 0 (head _;; Seqtl _ =' _ in _) =>
  fold hdtl in |- *; apply Sym; apply hdtl_x_is_x: algebra.
Hint Extern 0 (_ =' head _;; Seqtl _ in _) =>
  fold hdtl in |- *; apply hdtl_x_is_x: algebra.
Hint Resolve Seqtl_cons_inv: algebra.
Hint Resolve Seqtl_to_seq: algebra.
Hint Resolve split_hd_tl_equality: algebra.
Hint Resolve seq_S_O_contains_single_elt: algebra.
Hint Resolve seq_S_O_head_fixes_everything: algebra. *)

Section MAIN.
Variable A : Setoid.

Definition concat :
  forall (n m : Nat) (f : seq n A) (g : seq m A), seq (n + m) A.
simple induction n.
simpl in |- *.
intros.
exact g.
intros.
simpl in |- *.
exact (f (Build_finiteT (lt_O_Sn n0));; X _ (Seqtl f) g).

Defined.

Infix "++" := concat (at level 60, right associativity).

Lemma concat_comp :
 forall (n m : Nat) (f f' : seq n A) (g g' : seq m A),
 f =' f' in _ -> g =' g' in _ -> f ++ g =' f' ++ g' in _.
simple induction n.
intros.
simpl in |- *.
assumption.

intros.
set (fg := f ++ g) in |- *.
set (fg' := f' ++ g') in |- *.
simpl in |- *.
red in |- *.
destruct x.
destruct index as [| n1].
unfold fg in |- *.
unfold fg' in |- *.
simpl in |- *.
auto with algebra.

apply Trans with ((Seqtl f ++ g) (Build_finiteT (lt_S_n _ _ in_range_prf)));
 auto with algebra.
apply Trans with ((Seqtl f' ++ g') (Build_finiteT (lt_S_n _ _ in_range_prf)));
 auto with algebra.
apply Ap_comp; auto with algebra.
apply (H _ (Seqtl f) (Seqtl f') g g'); auto with algebra.
change (Seqtl f =' Seqtl f' in _) in |- *.
apply Seqtl_comp; auto with algebra.
Qed.

Hint Resolve concat_comp: algebra.

Variable n m : Nat.

Lemma cons_concat :
 forall (a a' : A) (v v' : seq n A) (w w' : seq m A),
 a =' a' in _ ->
 v =' v' in _ -> w =' w' in _ -> a;; v ++ w =' (a';; v') ++ w' in _.
intros.
apply Trans with ((a;; v) ++ w).
intro i.
destruct i.
destruct index as [| n0].
simpl in |- *.
auto with algebra.
rename in_range_prf into p.
apply Trans with ((v ++ w) (Build_finiteT (lt_S_n _ _ p))); auto with algebra.
apply Trans with ((Seqtl (a;; v) ++ w) (Build_finiteT (lt_S_n _ _ p)));
 auto with algebra.
change ((a;; v) ++ w =' (a';; v') ++ w' in seq (S n + m) A) in |- *.
apply concat_comp; auto with algebra.
Qed.

Hint Resolve cons_concat: algebra.

Lemma concat_cons :
 forall (a a' : A) (v v' : seq n A) (w w' : seq m A),
 a =' a' in _ ->
 v =' v' in _ -> w =' w' in _ -> (a';; v') ++ w' =' a;; v ++ w in _.
intros; apply Sym; apply cons_concat; auto with algebra.
Qed.

Hint Resolve concat_cons: algebra.

Lemma cons_concat_special :
 forall (a : A) (v : seq n A) (v' : seq m A),
 a;; v ++ v' =' (a;; v) ++ v' in _. 
intros.
intro i.
destruct i.
destruct index as [| n0].
simpl in |- *.
auto with algebra.
rename in_range_prf into p.
apply Trans with ((v ++ v') (Build_finiteT (lt_S_n _ _ p)));
 auto with algebra.
apply Trans with ((Seqtl (a;; v) ++ v') (Build_finiteT (lt_S_n _ _ p)));
 auto with algebra.
Qed.

Lemma concat_first_element :
 forall (v : seq (S n) A) (w : seq m A) (Hnm : 0 < S (n + m)) (Hn : 0 < S n),
 (v ++ w) (Build_finiteT Hnm) =' v (Build_finiteT Hn) in _.
intros.
apply Trans with (head v); auto with algebra.
Qed.

Lemma head_eats_concat :
 forall (v : seq (S n) A) (w : seq m A), head (v ++ w) =' head v in _.
intros.
unfold head in |- *; auto with algebra.
Qed.

Lemma Seqtl_concat :
 forall (v : seq (S n) A) (w : seq m A), Seqtl (v ++ w) =' Seqtl v ++ w in _.
intros.
apply Trans with (Seqtl (hdtl v ++ w)); auto with algebra.
apply Trans with (Seqtl (head v;; Seqtl v ++ w)); auto with algebra.
unfold hdtl in |- *.
apply Seqtl_comp; auto with algebra.
change (Seqtl (head v;; Seqtl v ++ w) =' Seqtl v ++ w in seq (n + m) A)
 in |- *.
generalize dependent (Seqtl_cons_inv (head v) (Seqtl v ++ w)).
auto.
Qed.

Lemma concat_Seqtl :
 forall (v : seq (S n) A) (w : seq m A), Seqtl v ++ w =' Seqtl (v ++ w) in _.
intros.
apply Sym.
apply Seqtl_concat.
Qed.

End MAIN.

Infix "++" := concat (at level 60, right associativity).
Hint Resolve concat_comp: algebra.
Hint Resolve cons_concat concat_cons: algebra.
Hint Resolve concat_first_element head_eats_concat: algebra.
Hint Resolve Seqtl_concat concat_Seqtl: algebra.
Hint Resolve cons_concat_special: algebra.