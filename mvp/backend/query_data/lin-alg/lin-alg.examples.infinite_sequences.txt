
Set Implicit Arguments.
Unset Strict Implicit.
Require Export alt_build_vecsp.
(* alt_build_vecsp:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export vecspaces_verybasic.
Require Export Map2.

Section MAIN.
Variable V : Setoid.
Variable F : field.
Variable add : Map2 V V V.
Variable mlt : Map2 F V V.
Variable zer : V.
Variable mns : Map V V.
Definition VS1 := forall x y : V, add x y =' add y x in _.
Definition VS2 := forall x y z : V, add (add x y) z =' add x (add y z) in _.
Definition VS3 := forall x : V, add x zer =' x in _.
Definition VS4 := forall x : V, add x (mns x) =' zer in _.
Definition VS5 := forall x : V, mlt one x =' x in _.
Definition VS6 :=
  forall (a b : F) (x : V), mlt (a rX b) x =' mlt a (mlt b x) in _.
Definition VS7 :=
  forall (a : F) (x y : V), mlt a (add x y) =' add (mlt a x) (mlt a y) in _.
Definition VS8 :=
  forall (a b : F) (x : V), mlt (a +' b) x =' add (mlt a x) (mlt b x) in _.

Let Vsg_on : VS2 -> sgroup_on V.

Let Vsg : VS2 -> sgroup.

Let Vmon_on : VS1 -> forall VS2p : VS2, VS3 -> monoid_on (Vsg VS2p).

Let Vmon : VS1 -> VS2 -> VS3 -> monoid.

Let Vgp_on :
  forall (VS1p : VS1) (VS2p : VS2) (VS3p : VS3),
  VS4 -> group_on (Vmon VS1p VS2p VS3p).

Let Vgp : VS1 -> VS2 -> VS3 -> VS4 -> group.

Let Vabgp_on :
  forall (VS1p : VS1) (VS2p : VS2) (VS3p : VS3) (VS4p : VS4),
  abelian_group_on (Vgp VS1p VS2p VS3p VS4p).

Let Vabgp : VS1 -> VS2 -> VS3 -> VS4 -> abelian_group.

Let F_act_map :
  forall (VS1p : VS1) (VS2p : VS2) (VS3p : VS3) (VS4p : VS4),
  Map (Build_monoid (ring_monoid F)) (Endo_SET (Vabgp VS1p VS2p VS3p VS4p)).

Let F_sgp_hom :
  forall (VS1p : VS1) (VS2p : VS2) (VS3p : VS3) (VS4p : VS4),
  VS6 ->
  sgroup_hom (Build_monoid (ring_monoid F))
    (Endo_SET (Vabgp VS1p VS2p VS3p VS4p)).

Let F_op :
  forall (VS1p : VS1) (VS2p : VS2) (VS3p : VS3) (VS4p : VS4),
  VS5 ->
  VS6 -> operation (Build_monoid (ring_monoid F)) (Vabgp VS1p VS2p VS3p VS4p).

Let Vmod_on :
  forall (VS1p : VS1) (VS2p : VS2) (VS3p : VS3) (VS4p : VS4),
  VS5 -> VS6 -> VS7 -> VS8 -> module_on F (Vabgp VS1p VS2p VS3p VS4p).

Definition alt_Build_vectorspace :
  VS1 -> VS2 -> VS3 -> VS4 -> VS5 -> VS6 -> VS7 -> VS8 -> vectorspace F.

Definition vectorspace_construction :
  VS1 ->
  VS2 ->
  VS3 ->
  VS4 ->
  VS5 -> VS6 -> VS7 -> VS8 -> sigT (fun VV : vectorspace F => Carrier VV = V).
End MAIN. *)

Section MAIN.
Variable F : field.
Definition infseq : Setoid.
apply
 (Build_Setoid
    (Equal:=fun s s' : nat -> F => forall i : nat, s i =' s' i in _)).
split; try split; red in |- *; unfold app_rel in |- *; simpl in |- *;
 auto with algebra.
intros.
apply Trans with (y i); auto with algebra.
Defined.

Definition addinfseqs : Map2 infseq infseq infseq.
apply
 (Build_Map2 (Ap2:=fun s s' : infseq => (fun i : nat => s i +' s' i):infseq));
 auto with algebra.
red in |- *; simpl in |- *.
auto with algebra.
Defined.

Definition mltinfseqs : Map2 F infseq infseq.
apply
 (Build_Map2
    (Ap2:=fun (c : F) (s' : infseq) => (fun i : nat => c rX s' i):infseq)).
red in |- *; simpl in |- *.
auto with algebra.
Defined.

Definition zeroseq : infseq := fun n => zero F.

Definition minusseq : Map infseq infseq.
apply Build_Map with (fun (s : infseq) (n : nat) => min s n).
red in |- *.
intros.
simpl in |- *.
simpl in H.
intros.
apply GROUP_comp.
auto.
Defined.

Definition vecspace_infseq : vectorspace F.
apply
 (alt_Build_vectorspace (V:=infseq) (F:=F) (add:=addinfseqs)
    (mlt:=mltinfseqs) (zer:=zeroseq) (mns:=minusseq)); 
 red in |- *; simpl in |- *; intros; auto with algebra.
apply Trans with (x i +' (zero F)); auto with algebra.
apply Trans with (zero F); auto with algebra.
Defined.
End MAIN.