
Set Implicit Arguments.
Unset Strict Implicit.
Require Export conshdtl.
(* conshdtl:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export finite.
From Algebra Require Export Parts.

Section MAIN.

Definition conseq :
  forall (A : Setoid) (n : Nat) (a : A) (v : seq n A), seq (S n) A.

Notation "a ;; b" := (conseq a b) (at level 60, right associativity).

Variables (A : Setoid) (n : Nat) (a : A).

Lemma cons_comp :
 forall (a' : A) (v v' : seq n A),
 a =' a' in _ -> v =' v' in _ -> a;; v =' a';; v' in _.

Hint Resolve cons_comp: algebra.

Lemma cons_first_element :
 forall (v : seq n A) (H : 0 < S n), (a;; v) (Build_finiteT H) =' a in _.

Definition head (A : Setoid) (n : Nat) (v : seq (S n) A) :=
  v (Build_finiteT (lt_O_Sn n)).

Lemma head_comp :
 forall (A : Setoid) (n : Nat) (v v' : seq (S n) A),
 v =' v' in _ -> head v =' head v' in _.

Hint Resolve head_comp cons_first_element: algebra.

Lemma head_unfolding1 :
 forall v : seq (S n) A,
 v (Build_finiteT (lt_O_Sn n)) =' a in _ -> head v =' a in _.

Lemma head_unfolding2 :
 forall v : seq (S n) A,
 a =' v (Build_finiteT (lt_O_Sn n)) in _ -> a =' head v in _.

Hint Resolve head_unfolding1 head_unfolding2: algebra.
Hint Extern 0 (head _ =' _ in _) => unfold head in |- *: algebra.
Hint Extern 0 (_ =' head _ in _) => unfold head in |- *: algebra.

Lemma head_cons_inv : forall v : seq n A, head (a;; v) =' a in _.

Hint Resolve head_cons_inv: algebra.

Lemma seq_S_O_contains_single_elt :
 forall (A : Setoid) (v : seq 1 A) (i : fin 1), v i =' head v in _.

Hint Resolve seq_S_O_contains_single_elt: algebra.

Lemma seq_S_O_head_fixes_everything :
 forall (A : Setoid) (v v' : seq 1 A), head v =' head v' in _ -> v =' v' in _.

Hint Resolve seq_S_O_head_fixes_everything: algebra.

Lemma cons_later_elements :
 forall (v : seq n A) (i : Nat) (Hi : S i < S n) (Hi' : i < n),
 (a;; v) (Build_finiteT Hi) =' v (Build_finiteT Hi') in _.

Hint Resolve cons_later_elements: algebra.

Definition Seqtl : forall n : Nat, seq n A -> seq (pred n) A. 

Lemma Seqtl_comp :
 forall v v' : seq n A, v =' v' in _ -> Seqtl v =' Seqtl v' in _.

Hint Resolve Seqtl_comp: algebra.

Definition hdtl (v : seq (S n) A) := head v;; Seqtl v:seq (S n) A.

Lemma conseq_hdtl :
 forall (v : seq (S n) A) (H : 0 < S n),
 v =' v (Build_finiteT H);; Seqtl v in _.

Hint Resolve conseq_hdtl: algebra.

Lemma hdtl_x_is_x : forall v : seq (S n) A, v =' hdtl v in _.

Hint Resolve hdtl_x_is_x: algebra.
Hint Extern 0 (head _;; Seqtl _ =' _ in _) =>
  fold hdtl in |- *; apply Sym; apply hdtl_x_is_x: algebra.
Hint Extern 0 (_ =' head _;; Seqtl _ in _) =>
  fold hdtl in |- *; apply hdtl_x_is_x: algebra.

Lemma cons_lemma_nice :
 forall P : Predicate (seq (S n) A),
 (forall (a : A) (v : seq n A), Pred_fun P (a;; v)) ->
 forall w : seq (S n) A, Pred_fun P w.

Lemma cons_lemma_verynice :
 forall (P : Predicate (seq (S n) A)) (H : 0 < S n) (w : seq (S n) A),
 Pred_fun P (w (Build_finiteT H);; Seqtl w) -> Pred_fun P w.

Lemma Seqtl_cons_inv : forall v : seq n A, Seqtl (a;; v) =' v in _.

Hint Resolve Seqtl_cons_inv: algebra.

Lemma Seqtl_to_seq :
 forall (v : seq (S n) A) (i : Nat) (Hi : i < n) (HSi : S i < S n),
 Seqtl v (Build_finiteT Hi) =' v (Build_finiteT HSi) in _.

Hint Resolve Seqtl_to_seq: algebra.

Lemma split_hd_tl_equality :
 forall v w : seq (S n) A,
 head v =' head w in _ -> Seqtl v =' Seqtl w in _ -> v =' w in _.

Hint Resolve split_hd_tl_equality: algebra.
End MAIN.

Notation "a ;; b" := (conseq a b) (at level 60, right associativity).

Hint Resolve cons_comp: algebra.
Hint Resolve head_comp cons_first_element: algebra.
Hint Resolve head_unfolding1 head_unfolding2: algebra.
Hint Extern 0 (head _ =' _ in _) => unfold head in |- *: algebra.
Hint Extern 0 (_ =' head _ in _) => unfold head in |- *: algebra.
Hint Resolve head_cons_inv: algebra.
Hint Resolve cons_later_elements: algebra.
Hint Resolve Seqtl_comp: algebra.
Hint Resolve conseq_hdtl: algebra.
Hint Resolve hdtl_x_is_x: algebra.
Hint Extern 0 (head _;; Seqtl _ =' _ in _) =>
  fold hdtl in |- *; apply Sym; apply hdtl_x_is_x: algebra.
Hint Extern 0 (_ =' head _;; Seqtl _ in _) =>
  fold hdtl in |- *; apply hdtl_x_is_x: algebra.
Hint Resolve Seqtl_cons_inv: algebra.
Hint Resolve Seqtl_to_seq: algebra.
Hint Resolve split_hd_tl_equality: algebra.
Hint Resolve seq_S_O_contains_single_elt: algebra.
Hint Resolve seq_S_O_head_fixes_everything: algebra. *)

Definition modify_seq :
  forall (A : Setoid) (n : Nat), seq n A -> fin n -> A -> seq n A.
induction n.
intros.
auto.
intros.
destruct X0.
destruct index as [| n0].
exact (X1;; Seqtl X).
exact (head X;; IHn (Seqtl X) (Build_finiteT (lt_S_n _ _ in_range_prf)) X1).
Defined.

Lemma modify_comp :
 forall (A : Setoid) (n : Nat) (a a' : A) (v v' : seq n A) (i i' : fin n),
 a =' a' in _ ->
 v =' v' in _ -> i =' i' in _ -> modify_seq v i a =' modify_seq v' i' a' in _.
induction n.
intros.
apply False_ind; auto with algebra.
intros.
destruct i.
destruct i'.
destruct index as [| n0].
destruct index0 as [| n0].
apply split_hd_tl_equality; auto with algebra.
intro.
destruct x.
simpl in |- *.
apply Ap_comp; auto with algebra.
inversion H1.
destruct index0 as [| n1].
inversion H1.
unfold modify_seq in |- *.
unfold nat_rect in |- *.
apply cons_comp; auto with algebra.
unfold modify_seq in IHn.
apply IHn; auto with algebra.
change (Seqtl v =' Seqtl v' in _) in |- *.
apply Seqtl_comp; auto with algebra.
Qed.

Hint Resolve modify_comp: algebra.

Lemma modify_hd_hd :
 forall (A : Setoid) (n : Nat) (v : seq (S n) A) (H : 0 < S n) (a : A),
 head (modify_seq v (Build_finiteT H) a) =' a in _.
intros.
simpl in |- *.
auto with algebra.
Qed.

Hint Resolve modify_hd_hd: algebra.

Lemma modify_hd_tl :
 forall (A : Setoid) (n : Nat) (v : seq (S n) A) (H : 0 < S n) (a : A),
 Seqtl (modify_seq v (Build_finiteT H) a) =' Seqtl v in _.
intros.
unfold modify_seq, nat_rect in |- *.
auto with algebra.
Qed.

Hint Resolve modify_hd_tl: algebra.

Lemma modify_tl_hd :
 forall (A : Setoid) (n : Nat) (v : seq (S n) A) (m : Nat) 
   (H : S m < S n) (a : A),
 head (modify_seq v (Build_finiteT H) a) =' head v in _.
intros.
simpl in |- *; auto with algebra.
Qed.

Hint Resolve modify_tl_hd: algebra.

Lemma modify_tl_tl :
 forall (A : Setoid) (n : Nat) (v : seq (S n) A) (m : Nat) 
   (HS : S m < S n) (H : m < n) (a : A),
 Seqtl (modify_seq v (Build_finiteT HS) a) ='
 modify_seq (Seqtl v) (Build_finiteT H) a in _.
intros; intro.
unfold Seqtl in |- *.
simpl in |- *.
case x.
intros.
apply Ap_comp; auto with algebra.
Qed.

Hint Resolve modify_tl_tl: algebra.

Lemma Seqtl_modify_seq :
 forall (A : Setoid) (n : Nat) (v : seq (S n) A) (a : A) (H : 0 < S n),
 modify_seq v (Build_finiteT H) a =' a;; Seqtl v in _.
intros; intro.
simpl in |- *.
auto with algebra.
Qed.

Hint Resolve Seqtl_modify_seq.

Lemma modify_seq_defprop :
 forall (A : Setoid) (n : Nat) (v : seq n A) (i : fin n) (a : A),
 modify_seq v i a i =' a in _.
induction n.
intros.
apply False_ind; auto with algebra.
intros.
case i.
destruct index as [| n0].
simpl in |- *.
auto with algebra.
intro.
apply
 Trans
  with
    (modify_seq (Seqtl v) (Build_finiteT (lt_S_n _ _ in_range_prf)) a
       (Build_finiteT (lt_S_n _ _ in_range_prf))); 
 auto with algebra.
Qed.

Hint Resolve modify_seq_defprop: algebra.

Lemma modify_seq_modifies_one_elt :
 forall (A : Setoid) (n : Nat) (v : seq n A) (i : fin n) (a : A) (j : fin n),
 ~ j =' i in _ -> modify_seq v i a j =' v j in _.
induction n.
intros v i.
apply False_ind; auto with algebra.
intros until j.
destruct i; destruct j.
destruct index as [| n0];
 [ destruct index0 as [| n0] | destruct index0 as [| n1] ]; 
 simpl in |- *.
intros; absurd (0 = 0); auto.
intros _.
apply Ap_comp; auto with algebra.
intros _.
auto with algebra.
intros.
rename in_range_prf0 into l.
apply Trans with ((head v;; Seqtl v) (Build_finiteT l)).
2: apply Trans with (hdtl v (Build_finiteT l)); auto with algebra.
apply Trans with (Seqtl v (Build_finiteT (lt_S_n _ _ l))); auto with algebra.
Qed.

Hint Resolve modify_seq_modifies_one_elt: algebra.