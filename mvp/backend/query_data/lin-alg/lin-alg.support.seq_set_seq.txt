
Set Implicit Arguments.
Unset Strict Implicit.
Require Export seq_set.
(* seq_set:
Set Implicit Arguments.
Unset Strict Implicit.
Require Export finite.
From Algebra Require Export Parts.

Section MAIN.

Definition seq_set : forall (A : Setoid) (n : Nat) (v : seq n A), part_set A.

Variable A : Setoid.
Variable n : Nat.

Lemma seq_set_comp :
 forall v v' : seq n A, v =' v' in _ -> seq_set v =' seq_set v' in _.

End MAIN.
Hint Resolve seq_set_comp: algebra. *)

Let seq_set_fun :
  forall (A : Setoid) (n : Nat) (v : seq n A), fin n -> (seq_set v:Type).
intros.
apply (Build_subtype (P:=seq_set v:Predicate _) (subtype_elt:=v X)).
simpl in |- *.
exists X.
apply Refl.
Defined.

Definition seq_set_seq :
  forall (A : Setoid) (n : Nat) (v : seq n A), seq n (seq_set v).
intros.
simpl in |- *.
apply (Build_Map (Ap:=seq_set_fun v)).
red in |- *.
intros.
simpl in |- *.
red in |- *.
simpl in |- *.
apply Ap_comp; auto with algebra.
Defined.