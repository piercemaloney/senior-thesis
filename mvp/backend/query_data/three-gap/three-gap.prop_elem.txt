
Require Import Max.
Require Export tools.
(* tools:
Require Export Reals.
Require Export Nat_compl.

Unset Standard Proposition Elimination Names.

Parameter alpha : R.

Axiom prop_alpha : (0 < alpha)%R /\ (alpha < 1)%R.

Definition frac_part_n_alpha (n : nat) : R := frac_part (INR n * alpha).

Definition ordre_total (n m : nat) :=
  (0 < alpha)%R /\ (alpha < 1)%R ->
  (frac_part_n_alpha n <= frac_part_n_alpha m)%R.

Lemma N_classic : forall N : nat, {N = 0} + {N = 1} + {N >= 2}.

Lemma tech_total_order : forall n : nat, ordre_total n n.

Lemma exist_first :
 forall N : nat,
 N >= 2 ->
 sigT
   (fun n : nat =>
    0 < n /\ n < N /\ (forall m : nat, 0 < m /\ m < N -> ordre_total n m)).

Lemma exist_last :
 forall N : nat,
 N >= 2 ->
 sigT
   (fun n : nat =>
    0 < n /\ n < N /\ (forall m : nat, 0 < m /\ m < N -> ordre_total m n)).

Definition first (N : nat) :=
  match N_classic N with
  | inright p => match exist_first N p return nat with
                 | existT a b => a
                 end
  | _ => 0
  end.

Definition last (N : nat) :=
  match N_classic N with
  | inright p => match exist_last N p return nat with
                 | existT a b => a
                 end
  | _ => 0
  end.

Lemma exist_after_M :
 forall M : R,
 (0 <= M)%R ->
 (M < 1)%R ->
 forall N : nat,
 sig
   (fun I : nat =>
    0 < I /\
    I < N /\
    (M < frac_part_n_alpha I)%R /\
    (forall m : nat,
     0 <= m ->
     m < N ->
     (frac_part_n_alpha m > M)%R ->
     (frac_part_n_alpha m >= frac_part_n_alpha I)%R)) +
 {(forall m : nat,
   0 <= m ->
   m < N -> (0 <= frac_part_n_alpha m)%R /\ (frac_part_n_alpha m <= M)%R)}.

Lemma P1 : forall n : nat, (0 <= frac_part_n_alpha n)%R.

Lemma P2 : forall n : nat, (frac_part_n_alpha n < 1)%R.

Definition after (N n : nat) :=
  match exist_after_M (frac_part_n_alpha n) (P1 n) (P2 n) N with
  | inleft p => match p return nat with
                | exist a b => a
                end
  | _ => 0
  end. *)

Unset Standard Proposition Elimination Names.

Lemma first_N : forall N : nat, N >= 2 -> first N < N.
intros; unfold first in |- *; case (N_classic N); intro.
absurd (N >= 2).
elim s; intro y; rewrite y; unfold ge in |- *; auto with arith real.
exact H.
case (exist_first N g); intros; elim a; intros; elim H1; intros;
 auto with arith real.
Qed.

Lemma last_N : forall N : nat, N >= 2 -> last N < N.
intros; unfold last in |- *; case (N_classic N); intro.
absurd (N >= 2).
elim s; intro y; rewrite y; unfold ge in |- *; auto with arith real.
exact H.
case (exist_last N g); intros; elim a; intros; elim H1; intros;
 auto with arith real.
Qed.

Lemma inter1 : forall N : nat, N >= 2 -> max (first N) (last N) < N.
intros; apply max_case2. 
apply (first_N N H).
apply (last_N N H).
Qed.

Lemma first_N01 : forall N : nat, first N <= N.
intros; unfold first in |- *; case (N_classic N); intro; auto with arith real.
case (exist_first N g); intros; elim a; intros; elim H0; intros;
 auto with arith real.
Qed.

Lemma last_N01 : forall N : nat, last N <= N.
intros; unfold last in |- *; case (N_classic N); intro; auto with arith real.
case (exist_last N g); intros; elim a; intros; elim H0; intros;
 auto with arith real.
Qed.

Lemma first_0 : forall N : nat, N >= 2 -> 0 < first N.
intros; unfold first in |- *; case (N_classic N); intro.
absurd (N >= 2).
elim s; intro y; rewrite y; unfold ge in |- *; auto with arith real.
exact H.
case (exist_first N g); intros; elim a; intros; auto with arith real.
Qed.

Lemma last_0 : forall N : nat, N >= 2 -> 0 < last N.
intros; unfold last in |- *; case (N_classic N); intro.
absurd (N >= 2).
elim s; intro y; rewrite y; unfold ge in |- *; auto with arith real.
exact H.
case (exist_last N g); intros; elim a; intros; auto with arith real.
Qed.

Lemma first_n :
 forall N n : nat,
 N >= 2 ->
 0 < n ->
 n < N ->
 (0 < alpha)%R /\ (alpha < 1)%R ->
 (frac_part_n_alpha (first N) <= frac_part_n_alpha n)%R.
intros; unfold first in |- *; case (N_classic N); intro.
absurd (N >= 2).
elim s; intro y; rewrite y; unfold ge in |- *; auto with arith real.
exact H.
case (exist_first N g); unfold ordre_total in |- *; intros; elim a; intros.
elim H4; intros.
generalize (H6 n); intros.
elim H7.
intro; apply Rlt_le; auto with arith real.
unfold Rle in |- *; auto with arith real.
split; auto with arith real.
auto with arith real.
Qed.

Lemma last_n :
 forall N n : nat,
 N >= 2 ->
 0 < n ->
 n < N ->
 (0 < alpha)%R /\ (alpha < 1)%R ->
 (frac_part_n_alpha n <= frac_part_n_alpha (last N))%R.
intros; unfold last in |- *; case (N_classic N); intro.
absurd (N >= 2).
elim s; intro y; rewrite y; unfold ge in |- *; auto with arith real.
exact H.
case (exist_last N g); unfold ordre_total in |- *; intros; elim a; intros.
elim H4; intros.
generalize (H6 n); intros.
elim H7.
intro; apply Rlt_le; auto with arith real.
unfold Rle in |- *; auto with arith real.
split; auto with arith real.
auto with arith real.
Qed.

Lemma tech_first_last :
 forall N k : nat,
 N >= 2 ->
 0 < k -> k < N -> ordre_total (first N) k /\ ordre_total k (last N).
intros; split; unfold ordre_total in |- *; intro.
apply (first_n N k H H0 H1 H2).
apply (last_n N k H H0 H1 H2).
Qed.

Lemma le_first_last :
 forall N : nat, N >= 2 -> ordre_total (first N) (last N).
intros; unfold ordre_total in |- *; intro.
apply (first_n N (last N) H (last_0 N H) (last_N N H) H0).
Qed.

