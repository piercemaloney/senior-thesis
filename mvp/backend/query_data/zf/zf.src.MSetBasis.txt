
Require Export ZFrelations.
(* ZFrelations:
Require Export axs_fundation.

Definition rel (r : E) :=
  forall c : E, In c r -> exists x : E, (exists y : E, c = couple x y).

Definition rel_sig (r a b : E) := inc r (cartesien a b).

Lemma lem_rel_sig_to_rel : forall r a b : E, rel_sig r a b -> rel r.

Lemma lem_rel_to_rel_sig :
 forall r : E, rel r -> exists a : E, (exists b : E, rel_sig r a b).

Definition rdom (r a b : E) (rRel : rel_sig r a b) :=
  subset (fun x : E => exists y : E, In (couple x y) r) a.

Definition rImg (r a b : E) (rRel : rel_sig r a b) :=
  subset (fun y : E => exists x : E, In (couple x y) r) b.

Definition rdom2 (r : E) (rRel : rel r) :=
  subset (fun x : E => exists y : E, In (couple x y) r) (reunion (reunion r)).

Definition rImg2 (r : E) (rRel : rel r) :=
  subset (fun y : E => exists x : E, In (couple x y) r) (reunion (reunion r)).

Lemma lem_rdom_eq_rdom2 :
 forall (r a b : E) (rRel : rel_sig r a b),
 rdom r a b rRel = rdom2 r (lem_rel_sig_to_rel r a b rRel).

Lemma lem_rImg_eq_rImg2 :
 forall (r a b : E) (rRel : rel_sig r a b),
 rImg r a b rRel = rImg2 r (lem_rel_sig_to_rel r a b rRel).

Lemma lem_rel_and_rdom :
 forall (r a b : E) (rRel : rel_sig r a b) (x y : E),
 In (couple x y) r -> In x (rdom r a b rRel).

Lemma lem_rel_and_rdom2 :
 forall (r : E) (rRel : rel r) (x y : E),
 In (couple x y) r -> In x (rdom2 r rRel).

Lemma lem_rel_and_rImg :
 forall (r a b : E) (rRel : rel_sig r a b) (x y : E),
 In (couple x y) r -> In y (rImg r a b rRel).

Lemma lem_rel_and_rImg2 :
 forall (r : E) (rRel : rel r) (x y : E),
 In (couple x y) r -> In y (rImg2 r rRel).

Definition rel_total (r a b : E) (rRel : rel_sig r a b) :=
  rdom r a b rRel = a.

Definition rel_partiel (r a b : E) (rRel : rel_sig r a b) :=
  exists x : E, In x a -> forall y : E, ~ In (couple x y) r.

Lemma lem_fun_is_rel : forall (f : E) (Af : fun_ f), rel f.

Definition reflexivity (r a : E) (rRel : rel_sig r a a) :=
  forall x : E, In x (rdom r a a rRel) -> In (couple x x) r.

Definition irreflexivity (r a : E) (rRel : rel_sig r a a) :=
  forall x : E, In x (rdom r a a rRel) -> ~ In (couple x x) r.

Lemma lem_refl_dom_inc_img :
 forall (r a : E) (rRel : rel_sig r a a),
 reflexivity r a rRel -> inc (rdom r a a rRel) (rImg r a a rRel).

Lemma lem_refl_dom_inc_img_recip :
 forall (r a : E) (rRel : rel_sig r a a),
 ~ inc (rdom r a a rRel) (rImg r a a rRel) -> ~ reflexivity r a rRel.

Lemma lem_refl_not_irrefl :
 forall (r a : E) (rNe : r <> Vide) (rRel : rel_sig r a a),
 reflexivity r a rRel -> ~ irreflexivity r a rRel.

Lemma lem_irrefl_not_refl :
 forall (r a : E) (rNe : r <> Vide) (rRel : rel_sig r a a),
 irreflexivity r a rRel -> ~ reflexivity r a rRel.

Definition symmetry (r a : E) (rRel : rel_sig r a a) :=
  forall x y : E, In (couple x y) r -> In (couple y x) r.
Definition antisymmetry (r a : E) (rRel : rel_sig r a a) :=
  forall x y : E, In (couple x y) r -> In (couple y x) r -> x = y.

Lemma lem_sym_so_rdom_eq_rImg :
 forall (r a : E) (rRel : rel_sig r a a),
 symmetry r a rRel -> rdom r a a rRel = rImg r a a rRel.

Definition transitivity (r a : E) (rRel : rel_sig r a a) :=
  forall x y z : E,
  In (couple x y) r -> In (couple y z) r -> In (couple x z) r.

Lemma lem_Vide_rel_sig : forall a : E, rel_sig Vide a a.

Lemma lem_Vide_dom : forall a : E, rdom Vide a a (lem_Vide_rel_sig a) = Vide.

Lemma lem_Vide_Img : forall a : E, rImg Vide a a (lem_Vide_rel_sig a) = Vide.

Definition rfull (a : E) :=
  subset (fun c : E => exists x : E, (exists y : E, c = couple x y))
    (cartesien a a).

Lemma lem_rfull_rel_sig : forall a : E, rel_sig (rfull a) a a.

Lemma lem_rfull_dom :
 forall a : E, rdom (rfull a) a a (lem_rfull_rel_sig a) = a.

Lemma lem_rfull_Img :
 forall a : E, rImg (rfull a) a a (lem_rfull_rel_sig a) = a.

Lemma lem_rfull_eq_cart : forall a : E, rfull a = cartesien a a.

Lemma lem_rfull_prop :
 forall a x y : E, In x a -> In y a -> In (couple x y) (rfull a).

Definition rId (a : E) :=
  subset (fun c : E => exists x : E, c = couple x x) (cartesien a a).

Lemma lem_rId_rel_sig : forall a : E, rel_sig (rId a) a a.

Lemma lem_rId_dom : forall a : E, rdom (rId a) a a (lem_rId_rel_sig a) = a.

Definition rel_Comp (r a b : E) (rRel : rel_sig r a b) :=
  Comp (cartesien a b) r.

Lemma lem_rel_Comp_rel_sig :
 forall (r a b : E) (rRel : rel_sig r a b), rel_sig (rel_Comp r a b rRel) a b.

Definition rel_union (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
  (rRel2 : rel_sig r2 a2 b2) := union r1 r2.

Lemma lem_rel_union_rel_sig :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2),
 rel_sig (rel_union r1 a1 b1 r2 a2 b2 rRel1 rRel2) 
   (union a1 a2) (union b1 b2).

Lemma lem_rel_union_dom :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2),
 rdom (rel_union r1 a1 b1 r2 a2 b2 rRel1 rRel2) (union a1 a2) 
   (union b1 b2) (lem_rel_union_rel_sig r1 a1 b1 r2 a2 b2 rRel1 rRel2) =
 union (rdom r1 a1 b1 rRel1) (rdom r2 a2 b2 rRel2).

Lemma lem_rel_union_Img :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2),
 rImg (rel_union r1 a1 b1 r2 a2 b2 rRel1 rRel2) (union a1 a2) 
   (union b1 b2) (lem_rel_union_rel_sig r1 a1 b1 r2 a2 b2 rRel1 rRel2) =
 union (rImg r1 a1 b1 rRel1) (rImg r2 a2 b2 rRel2).

Lemma lem_rel_union_prop :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2) (c : E),
 In c (rel_union r1 a1 b1 r2 a2 b2 rRel1 rRel2) <-> In c r1 \/ In c r2.

Definition rel_inter (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
  (rRel2 : rel_sig r2 a2 b2) := inter r1 r2.

Lemma lem_rel_inter_rel_sig :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2),
 rel_sig (rel_inter r1 a1 b1 r2 a2 b2 rRel1 rRel2) 
   (inter a1 a2) (inter b1 b2).

Lemma lem_rel_inter_dom :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2),
 inc
   (rdom (rel_inter r1 a1 b1 r2 a2 b2 rRel1 rRel2) 
      (inter a1 a2) (inter b1 b2)
      (lem_rel_inter_rel_sig r1 a1 b1 r2 a2 b2 rRel1 rRel2))
   (inter (rdom r1 a1 b1 rRel1) (rdom r2 a2 b2 rRel2)).

Lemma lem_rel_inter_Img :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2),
 inc
   (rImg (rel_inter r1 a1 b1 r2 a2 b2 rRel1 rRel2) 
      (inter a1 a2) (inter b1 b2)
      (lem_rel_inter_rel_sig r1 a1 b1 r2 a2 b2 rRel1 rRel2))
   (inter (rImg r1 a1 b1 rRel1) (rImg r2 a2 b2 rRel2)).

Lemma lem_rel_inter_prop :
 forall (r1 a1 b1 r2 a2 b2 : E) (rRel1 : rel_sig r1 a1 b1)
   (rRel2 : rel_sig r2 a2 b2) (c : E),
 In c (rel_inter r1 a1 b1 r2 a2 b2 rRel1 rRel2) <-> In c r1 /\ In c r2.

Definition rel_inverse (r a b : E) (rRel : rel_sig r a b) :=
  subset
    (fun c : E =>
     exists x : E, (exists y : E, In (couple x y) r /\ c = couple y x))
    (cartesien b a).

Lemma lem_rel_inv_is_rel_sig :
 forall (r a b : E) (rRel : rel_sig r a b),
 rel_sig (rel_inverse r a b rRel) b a.

Lemma lem_rel_inv_dom :
 forall (r a b : E) (rRel : rel_sig r a b),
 rdom (rel_inverse r a b rRel) b a (lem_rel_inv_is_rel_sig r a b rRel) =
 rImg r a b rRel.

Lemma lem_rel_inv_Img :
 forall (r a b : E) (rRel : rel_sig r a b),
 rImg (rel_inverse r a b rRel) b a (lem_rel_inv_is_rel_sig r a b rRel) =
 rdom r a b rRel.

Definition rel_prod (r1 r2 a : E) (rRel1 : rel_sig r1 a a)
  (rRel2 : rel_sig r2 a a) :=
  subset
    (fun c : E =>
     exists x : E,
       (exists y : E,
          (exists z : E,
             In (couple x y) r1 /\ In (couple y z) r2 /\ c = couple x z)))
    (cartesien a a).

Lemma lem_rel_prod_rel_sig :
 forall (r1 r2 a : E) (rRel1 : rel_sig r1 a a) (rRel2 : rel_sig r2 a a),
 rel_sig (rel_prod r1 r2 a rRel1 rRel2) a a.

Lemma lem_rel_prod_dom :
 forall (r1 r2 a : E) (rRel1 : rel_sig r1 a a) (rRel2 : rel_sig r2 a a),
 inc
   (rdom (rel_prod r1 r2 a rRel1 rRel2) a a
      (lem_rel_prod_rel_sig r1 r2 a rRel1 rRel2)) (rdom r1 a a rRel1).

Lemma lem_rel_prod_Img :
 forall (r1 r2 a : E) (rRel1 : rel_sig r1 a a) (rRel2 : rel_sig r2 a a),
 inc
   (rImg (rel_prod r1 r2 a rRel1 rRel2) a a
      (lem_rel_prod_rel_sig r1 r2 a rRel1 rRel2)) (rImg r2 a a rRel2).

Lemma lem_rel_prod_assoc :
 forall (r1 r2 r3 a : E) (rRel1 : rel_sig r1 a a) (rRel2 : rel_sig r2 a a)
   (rRel3 : rel_sig r3 a a),
 rel_prod (rel_prod r1 r2 a rRel1 rRel2) r3 a
   (lem_rel_prod_rel_sig r1 r2 a rRel1 rRel2) rRel3 =
 rel_prod r1 (rel_prod r2 r3 a rRel2 rRel3) a rRel1
   (lem_rel_prod_rel_sig r2 r3 a rRel2 rRel3).

Definition equivalence (r a : E) (rRel : rel_sig r a a) :=
  reflexivity r a rRel /\ symmetry r a rRel /\ transitivity r a rRel.

Definition equivClass (r a : E) (rRel : rel_sig r a a)
  (rEqv : equivalence r a rRel) (x : E) :=
  subset (fun y : E => In (couple x y) r) a.

Lemma lem_equivClass_eq :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (x y : E),
 In (couple x y) r -> equivClass r a rRel rEqv x = equivClass r a rRel rEqv y.

Lemma lem_inter_equivClass_empty :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (x y : E),
 ~ In (couple x y) r ->
 inter (equivClass r a rRel rEqv x) (equivClass r a rRel rEqv y) = Vide.

Lemma lem_equivClass_in_parties_a :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (x : E), In (equivClass r a rRel rEqv x) (parties a).

Definition quotient (r a : E) (rRel : rel_sig r a a)
  (rEqv : equivalence r a rRel) (rD : rdom r a a rRel = a) :=
  subset
    (fun x : E => exists y : E, In y a /\ x = equivClass r a rRel rEqv y)
    (parties a).

Definition equiv_fun (f : E) (Af : fun_ f) :=
  subset
    (fun x : E =>
     exists a : E, (exists b : E, x = couple a b /\ App f Af a = App f Af b))
    (cartesien (dom f) (dom f)).

Lemma lem_fun_equiv_is_rel :
 forall (f : E) (Af : fun_ f), rel_sig (equiv_fun f Af) (dom f) (dom f).

Lemma lem_sig_fun_equiv_is_rel :
 forall (f a s : E) (Afs : fun_sig f a s),
 rel_sig (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a a.

Lemma lem_fun_equiv_is_equiv :
 forall (f : E) (Af : fun_ f),
 equivalence (equiv_fun f Af) (dom f) (lem_fun_equiv_is_rel f Af).

Lemma lem_sig_fun_equiv_is_equiv :
 forall (f a s : E) (Afs : fun_sig f a s),
 equivalence (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
   (lem_sig_fun_equiv_is_rel f a s Afs).

Lemma lem_fun_equiv_dom :
 forall (f : E) (Af : fun_ f),
 rdom (equiv_fun f Af) (dom f) (dom f) (lem_fun_equiv_is_rel f Af) = dom f.

Lemma lem_sig_fun_equiv_dom :
 forall (f a s : E) (Afs : fun_sig f a s),
 rdom (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a a
   (lem_sig_fun_equiv_is_rel f a s Afs) = a.

Lemma lem_fun_equiv_prop :
 forall (f : E) (Af : fun_ f) (x y : E),
 In (couple x y) (equiv_fun f Af) -> App f Af x = App f Af y.

Lemma lem_equiv_fun_make :
 forall (f : E) (Af : fun_ f) (x y : E),
 In x (dom f) ->
 In y (dom f) -> App f Af x = App f Af y -> In (couple x y) (equiv_fun f Af).

Lemma lem_sig_equiv_fun_make :
 forall (f a s : E) (Afs : fun_sig f a s) (x y : E),
 In x a ->
 In y a ->
 App f (lem_fun_sig_is_fun f a s Afs) x =
 App f (lem_fun_sig_is_fun f a s Afs) y ->
 In (couple x y) (equiv_fun f (lem_fun_sig_is_fun f a s Afs)).

Definition projQuotient (r a : E) (rRel : rel_sig r a a)
  (rEqv : equivalence r a rRel) (rD : rdom r a a rRel = a) :=
  subset
    (fun x : E =>
     exists z : E,
       (exists t : E, x = couple z t /\ t = equivClass r a rRel rEqv z))
    (cartesien a (quotient r a rRel rEqv rD)).

Lemma lem_projQuotient_is_fun :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a), fun_ (projQuotient r a rRel rEqv rD).

Lemma lem_projQuotient_dom :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a), dom (projQuotient r a rRel rEqv rD) = a.

Lemma lem_projQuotient_img :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a),
 Img (projQuotient r a rRel rEqv rD) = quotient r a rRel rEqv rD.

Lemma lem_projQuotient_is_surj :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a),
 fun_surj (projQuotient r a rRel rEqv rD) a (quotient r a rRel rEqv rD).

Lemma lem_projQuotient_eval :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (x : E),
 In x a ->
 App (projQuotient r a rRel rEqv rD)
   (lem_projQuotient_is_fun r a rRel rEqv rD) x = equivClass r a rRel rEqv x.

Lemma lem_x_equiv_in_projQ :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (x : E),
 In x a ->
 In (couple x (equivClass r a rRel rEqv x)) (projQuotient r a rRel rEqv rD).

Lemma lem_x_in_equivClass_x :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (x : E),
 In x a -> In x (equivClass r a rRel rEqv x).

Lemma lem_projQuotient_equiv_fun :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a),
 equiv_fun (projQuotient r a rRel rEqv rD)
   (lem_projQuotient_is_fun r a rRel rEqv rD) = r.

Lemma lem_projQuotient_sig :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a),
 fun_sig (projQuotient r a rRel rEqv rD) a (quotient r a rRel rEqv rD).

Lemma lem_equivClass_is_same :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (x y : E),
 In x a ->
 In y a ->
 equivClass r a rRel rEqv x = equivClass r a rRel rEqv y -> In (couple x y) r.

Definition equiv_comp (r a : E) (rRel : rel_sig r a a)
  (rEqv : equivalence r a rRel) (rD : rdom r a a rRel = a) 
  (s f : E) (Afs : fun_sig f a s)
  (Pr : forall x y : E,
        In (couple x y) r ->
        App f (lem_fun_sig_is_fun f a s Afs) x =
        App f (lem_fun_sig_is_fun f a s Afs) y) :=
  subset
    (fun z : E =>
     exists x : E,
       In x a /\
       z =
       couple (equivClass r a rRel rEqv x)
         (App f (lem_fun_sig_is_fun f a s Afs) x))
    (cartesien (quotient r a rRel rEqv rD) s).

Lemma lem_equiv_comp_is_fun :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y),
 fun_ (equiv_comp r a rRel rEqv rD s f Afs Pr).

Lemma lem_equiv_comp_dom :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y),
 dom (equiv_comp r a rRel rEqv rD s f Afs Pr) = quotient r a rRel rEqv rD.

Lemma lem_equiv_comp_img :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y),
 inc (Img (equiv_comp r a rRel rEqv rD s f Afs Pr)) s.

Lemma lem_equiv_comp_sig :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y),
 fun_sig (equiv_comp r a rRel rEqv rD s f Afs Pr) (quotient r a rRel rEqv rD)
   s.

Lemma lem_equiv_comp_elem :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y) (x : E),
 In x a ->
 In
   (couple (equivClass r a rRel rEqv x)
      (App f (lem_fun_sig_is_fun f a s Afs) x))
   (equiv_comp r a rRel rEqv rD s f Afs Pr).

Lemma lem_equiv_comp_prop :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y),
 f =
 comp (projQuotient r a rRel rEqv rD)
   (equiv_comp r a rRel rEqv rD s f Afs Pr) a (quotient r a rRel rEqv rD) s
   (lem_projQuotient_sig r a rRel rEqv rD)
   (lem_equiv_comp_sig r a rRel rEqv rD s f Afs Pr).

Lemma lem_equiv_comp_unicite :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y) (g : E)
   (Ags : fun_sig g (quotient r a rRel rEqv rD) s),
 f =
 comp (projQuotient r a rRel rEqv rD) g a (quotient r a rRel rEqv rD) s
   (lem_projQuotient_sig r a rRel rEqv rD) Ags ->
 g = equiv_comp r a rRel rEqv rD s f Afs Pr.

Theorem thm_ens_quotient_fond :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_sig f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s Afs) x =
         App f (lem_fun_sig_is_fun f a s Afs) y),
 exUniq _
   (fun g : E =>
    fun_sig g (quotient r a rRel rEqv rD) s /\
    f =
    comp2 (projQuotient r a rRel rEqv rD) g a (quotient r a rRel rEqv rD) s).

Lemma lem_equiv_comp_bij_under :
 forall (r a : E) (rRel : rel_sig r a a) (rEqv : equivalence r a rRel)
   (rD : rdom r a a rRel = a) (s f : E) (Afs : fun_surj f a s)
   (Pr : forall x y : E,
         In (couple x y) r ->
         App f (lem_fun_sig_is_fun f a s (lem_surj_to_sig f a s Afs)) x =
         App f (lem_fun_sig_is_fun f a s (lem_surj_to_sig f a s Afs)) y)
   (Prinv : forall x y : E,
            App f (lem_fun_sig_is_fun f a s (lem_surj_to_sig f a s Afs)) x =
            App f (lem_fun_sig_is_fun f a s (lem_surj_to_sig f a s Afs)) y ->
            In (couple x y) r),
 fun_bij (equiv_comp r a rRel rEqv rD s f (lem_surj_to_sig f a s Afs) Pr)
   (quotient r a rRel rEqv rD) s.

Definition equiv_comp_fun (f a s : E) (Afs : fun_sig f a s) :=
  equiv_comp (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
    (lem_sig_fun_equiv_is_rel f a s Afs)
    (lem_sig_fun_equiv_is_equiv f a s Afs) (lem_sig_fun_equiv_dom f a s Afs)
    s f Afs (lem_fun_equiv_prop f (lem_fun_sig_is_fun f a s Afs)).

Lemma lem_equiv_comp_fun_is_inj :
 forall (f a s : E) (Afs : fun_sig f a s),
 fun_inj (equiv_comp_fun f a s Afs)
   (quotient (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
      (lem_sig_fun_equiv_is_rel f a s Afs)
      (lem_sig_fun_equiv_is_equiv f a s Afs)
      (lem_sig_fun_equiv_dom f a s Afs)) s.

Lemma lem_equiv_comp_fun_sig :
 forall (f a s : E) (Afs : fun_sig f a s),
 fun_sig (equiv_comp_fun f a s Afs)
   (quotient (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
      (lem_sig_fun_equiv_is_rel f a s Afs)
      (lem_sig_fun_equiv_is_equiv f a s Afs)
      (lem_sig_fun_equiv_dom f a s Afs)) s.

Lemma lem_equiv_comp_fun_prop :
 forall (f a s : E) (Afs : fun_sig f a s),
 f =
 comp
   (projQuotient (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
      (lem_sig_fun_equiv_is_rel f a s Afs)
      (lem_sig_fun_equiv_is_equiv f a s Afs)
      (lem_sig_fun_equiv_dom f a s Afs)) (equiv_comp_fun f a s Afs) a
   (quotient (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
      (lem_sig_fun_equiv_is_rel f a s Afs)
      (lem_sig_fun_equiv_is_equiv f a s Afs)
      (lem_sig_fun_equiv_dom f a s Afs)) s
   (lem_projQuotient_sig (equiv_fun f (lem_fun_sig_is_fun f a s Afs)) a
      (lem_sig_fun_equiv_is_rel f a s Afs)
      (lem_sig_fun_equiv_is_equiv f a s Afs)
      (lem_sig_fun_equiv_dom f a s Afs)) (lem_equiv_comp_fun_sig f a s Afs).

Lemma lem_sym_not_antisym :
 forall (r a : E) (rRel : rel_sig r a a)
   (rNe : exists x : E, (exists y : E, x <> y /\ In (couple x y) r)),
 symmetry r a rRel -> ~ antisymmetry r a rRel.

Lemma lem_antisym_not_sym :
 forall (r a : E) (rRel : rel_sig r a a)
   (rNe : exists x : E, (exists y : E, x <> y /\ In (couple x y) r)),
 antisymmetry r a rRel -> ~ symmetry r a rRel.

Lemma lem_irrefl_trans_so_antisym :
 forall (r a : E) (rRel : rel_sig r a a) (rIrrefl : irreflexivity r a rRel)
   (rTrans : transitivity r a rRel), antisymmetry r a rRel. *)

