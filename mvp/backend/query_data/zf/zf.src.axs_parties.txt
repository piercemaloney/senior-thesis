
Require Export axs_reunion.
(* axs_reunion:
Require Export axs_paire.

Parameter reunion : E -> E.
Axiom
  axs_reunion :
    forall v0 v2 : E,
    In v2 (reunion v0) <-> (exists v3 : E, In v3 v0 /\ In v2 v3).

Lemma lem_reunion_unique :
 forall v0 v1 : E,
 (forall v2 : E, In v2 v1 <-> (exists v3 : E, In v3 v0 /\ In v2 v3)) ->
 v1 = reunion v0.

Definition union (a b : E) := reunion (paire a b).

Hint Unfold union: zfc.

Lemma lem_union_propertie :
 forall a b v0 : E, In v0 (union a b) <-> In v0 a \/ In v0 b.

Lemma lem_union_propertie_lr :
 forall a b v0 : E, In v0 (union a b) -> In v0 a \/ In v0 b.

Lemma lem_union_propertie_rl :
 forall a b v0 : E, In v0 a \/ In v0 b -> In v0 (union a b). *)

Parameter parties : E -> E.
Axiom
  axs_parties :
    forall v0 v2 : E,
    In v2 (parties v0) <-> (forall v3 : E, In v3 v2 -> In v3 v0).

Lemma lem_reunion_parties : forall x : E, reunion (parties x) = x.

intros; apply axs_extensionnalite; intros; unfold iff in |- *; split; intros.
elim (axs_reunion (parties x) v2); intros; generalize (H0 H); clear H H0 H1;
 intros.
elim H; clear H; intros; elim H; clear H; intros.
elim (axs_parties x x0); intros; generalize (H1 H); clear H1 H2; intros.
exact (H1 v2 H0).

elim (axs_reunion (parties x) v2); intros; apply H1; clear H0 H1; intros.
exists (singleton v2); split; [ idtac | apply lem_x_in_sing_x ].
elim (axs_parties x (singleton v2)); intros; apply H1; clear H0 H1; intros.
unfold singleton in H0.
elim (axs_paire v2 v2 v3); intros; generalize (H1 H0); clear H1 H2; intros.
elim H1; clear H1; intros; rewrite H1; auto with zfc.

Qed.

