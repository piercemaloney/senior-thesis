
Require Export applications.
(* applications:
Require Export couples.

Definition n_aire (n : nat) (a : E) (F : E -> Prop) :=
  subset F (cart_power n a).

Lemma lem_subset :
 forall (a b y : E) (F : E -> Prop), a = subset F b -> In y a -> In y b.

Definition fun_ (f : E) :=
  (exists a : E, (exists b : E, inc f (cartesien a b))) /\
  (forall x y z : E, In (couple x y) f -> In (couple x z) f -> y = z).

Definition dom (f : E) :=
  subset (fun v0 : E => fun_ f -> exists v1 : E, In (couple v0 v1) f)
    (reunion (reunion f)).

Definition Img (f : E) :=
  subset (fun v1 : E => fun_ f -> exists v0 : E, In (couple v0 v1) f)
    (reunion (reunion f)).

Definition fun_sig (f a b : E) := fun_ f /\ dom f = a /\ inc (Img f) b.

Lemma lem_fun_sig_is_fun : forall f a b : E, fun_sig f a b -> fun_ f.

Lemma lem_fun_sig_dom : forall f a b : E, fun_sig f a b -> dom f = a.

Lemma lem_fun_sig_img : forall f a b : E, fun_sig f a b -> inc (Img f) b.

Definition fun_surj (f a b : E) := fun_ f /\ dom f = a /\ Img f = b.

Definition fun_inj (f a b : E) :=
  fun_ f /\
  dom f = a /\
  inc (Img f) b /\
  (forall b : E, In b (Img f) -> exUniq _ (fun a : E => In (couple a b) f)).

Definition fun_bij (f a b : E) :=
  fun_ f /\
  dom f = a /\
  Img f = b /\
  (forall b : E, In b (Img f) -> exUniq _ (fun a : E => In (couple a b) f)).

Lemma lem_surj_to_sig : forall f a b : E, fun_surj f a b -> fun_sig f a b.

Lemma lem_inj_to_sig : forall f a b : E, fun_inj f a b -> fun_sig f a b.

Lemma lem_bij_to_sig : forall f a b : E, fun_bij f a b -> fun_sig f a b.

Lemma lem_bij_is_inj : forall f a b : E, fun_bij f a b -> fun_inj f a b.

Lemma lem_bij_is_surj : forall f a b : E, fun_bij f a b -> fun_surj f a b.

Lemma lem_inj_surj_is_bij :
 forall f a b : E, fun_surj f a b -> fun_inj f a b -> fun_bij f a b.

Lemma lem_vide_application : fun_ Vide.

Lemma lem_dom_vide : dom Vide = Vide.

Lemma lem_img_vide : Img Vide = Vide.

Lemma lem_fun_vide_sig : forall a : E, fun_sig Vide Vide a.

Lemma lem_fun_and_dom :
 forall f a b : E, fun_ f -> In (couple a b) f -> In a (dom f).

Lemma lem_fun_and_img :
 forall f a b : E, fun_ f -> In (couple a b) f -> In b (Img f).

Lemma lem_App :
 forall f x : E,
 fun_ f -> In x (dom f) -> exists y : E, In y (Img f) /\ In (couple x y) f.

Lemma lem_App_rev :
 forall f y : E,
 fun_ f -> In y (Img f) -> exists x : E, In x (dom f) /\ In (couple x y) f.

Definition comp (f g a b c : E) (Af : fun_sig f a b) 
  (Ag : fun_sig g b c) :=
  subset
    (fun c : E =>
     exists y : E, In (couple (first c) y) f /\ In (couple y (second c)) g)
    (cartesien a c).

Definition comp2 (f g a b c : E) :=
  subset
    (fun x : E =>
     fun_sig f a b ->
     fun_sig g b c ->
     exists y : E, In (couple (first x) y) f /\ In (couple y (second x)) g)
    (cartesien a c).

Lemma lem_comp2_eq_comp :
 forall (f g a b c : E) (Af : fun_sig f a b) (Ag : fun_sig g b c),
 comp f g a b c Af Ag = comp2 f g a b c.

Lemma lem_comp_is_fun :
 forall (f g a b c : E) (Af : fun_sig f a b) (Ag : fun_sig g b c),
 fun_ (comp f g a b c Af Ag).

Lemma lem_comp_dom :
 forall (f g a b c : E) (Af : fun_sig f a b) (Ag : fun_sig g b c),
 dom (comp f g a b c Af Ag) = dom f.

Lemma lem_comp_img :
 forall (f g a b c : E) (Af : fun_sig f a b) (Ag : fun_sig g b c),
 inc (Img (comp f g a b c Af Ag)) (Img g).

Lemma lem_comp_make :
 forall (f g a b c x y z : E) (Af : fun_sig f a b) (Ag : fun_sig g b c),
 In (couple x y) f ->
 In (couple y z) g -> In (couple x z) (comp f g a b c Af Ag).

Lemma lem_comp_intermed :
 forall (f g a b c x z : E) (Af : fun_sig f a b) (Ag : fun_sig g b c),
 In (couple x z) (comp f g a b c Af Ag) ->
 exists y : E, In (couple x y) f /\ In (couple y z) g.

Definition App (f : E) (Af : fun_ f) (x : E) :=
  subset (fun z : E => exists y : E, In (couple x y) f /\ In z y)
    (reunion (Img f)).

Lemma lem_eval_propertie :
 forall (f x y : E) (Af : fun_ f), In (couple x y) f -> y = App f Af x.

Lemma lem_eval_prop2 :
 forall (f x : E) (Af : fun_ f), In x (dom f) -> In (couple x (App f Af x)) f.

Lemma lem_x_in_fun_form :
 forall (f : E) (Af : fun_ f) (x : E),
 In x f -> exists a : E, (exists b : E, x = couple a b).

Definition fun_img_directe (f : E) (Af : fun_ f) (c : E) :=
  subset
    (fun x : E =>
     In c (parties (dom f)) -> exists y : E, In y c /\ x = App f Af y)
    (Img f).

Definition fun_img_inverse (f : E) (Af : fun_ f) (d : E) :=
  subset (fun x : E => In d (parties (Img f)) -> In (App f Af x) d) (dom f).

Definition fun_part (f : E) (Af : fun_ f) :=
  subset (fun x : E => exists y : E, x = couple y (fun_img_directe f Af y))
    (cartesien (parties (dom f)) (parties (Img f))).

Lemma lem_fun_part_is_fun :
 forall (f : E) (Af : fun_ f), fun_ (fun_part f Af).

Lemma lem_fun_part_dom :
 forall (f : E) (Af : fun_ f), dom (fun_part f Af) = parties (dom f).

Lemma lem_fun_part_img :
 forall (f : E) (Af : fun_ f), Img (fun_part f Af) = parties (Img f).

Lemma lem_fun_img_inv_is_in_pdom :
 forall (f : E) (Af : fun_ f) (x : E),
 In x (parties (Img f)) -> In (fun_img_inverse f Af x) (parties (dom f)).

Lemma lem_fun_img_prop1 :
 forall (f : E) (Af : fun_ f) (x : E),
 In x (parties (Img f)) -> fun_img_directe f Af (fun_img_inverse f Af x) = x.

Lemma lem_fun_img_dir_is_in_pimg :
 forall (f : E) (Af : fun_ f) (x : E),
 In x (parties (dom f)) -> In (fun_img_directe f Af x) (parties (Img f)).

Lemma lem_fun_img_prop2 :
 forall (f : E) (Af : fun_ f) (x : E),
 In x (parties (dom f)) ->
 inc x (fun_img_inverse f Af (fun_img_directe f Af x)).

Lemma lem_fun_part_eval_prop :
 forall (f : E) (Af : fun_ f) (x : E),
 In x (dom (fun_part f Af)) ->
 App (fun_part f Af) (lem_fun_part_is_fun f Af) x = fun_img_directe f Af x.

Definition fun_part_inv (f : E) (Af : fun_ f) :=
  subset (fun x : E => exists y : E, x = couple y (fun_img_inverse f Af y))
    (cartesien (parties (Img f)) (parties (dom f))).

Lemma lem_fun_part_inv_is_fun :
 forall (f : E) (Af : fun_ f), fun_ (fun_part_inv f Af).

Lemma lem_fun_part_inv_dom :
 forall (f : E) (Af : fun_ f), dom (fun_part_inv f Af) = parties (Img f).

Lemma lem_fun_part_inv_img :
 forall (f : E) (Af : fun_ f),
 inc (Img (fun_part_inv f Af)) (parties (dom f)).

Lemma lem_fun_part_inv_eval_prop :
 forall (f : E) (Af : fun_ f) (x : E),
 In x (dom (fun_part_inv f Af)) ->
 App (fun_part_inv f Af) (lem_fun_part_inv_is_fun f Af) x =
 fun_img_inverse f Af x.

Definition fun_recip (f : E) (Af : fun_ f) :=
  subset
    (fun c : E =>
     exists x : E, (exists y : E, In (couple x y) f /\ c = couple y x))
    (cartesien (Img f) (dom f)).

Lemma lem_fun_recip_is_fun_under_inj :
 forall (f : E) (Af : fun_ f),
 fun_inj f (dom f) (Img f) <-> fun_ (fun_recip f Af).

Lemma lem_xyinf_yxinrecipf :
 forall (f : E) (Af : fun_ f) (x y : E),
 In (couple x y) f -> In (couple y x) (fun_recip f Af).

Lemma lem_fun_recip_is_bij_under_bij :
 forall (f : E) (Af : fun_ f),
 fun_bij f (dom f) (Img f) -> fun_bij (fun_recip f Af) (Img f) (dom f).

Lemma lem_fun_inj_dom_img_is_bij :
 forall (f : E) (Af : fun_ f),
 fun_inj f (dom f) (Img f) -> fun_bij f (dom f) (Img f).

Lemma lem_fun_recip_involutive_under_bij :
 forall (f : E) (Af : fun_ f) (Abijf : fun_bij f (dom f) (Img f))
   (Arec : fun_ (fun_recip f Af)), fun_recip (fun_recip f Af) Arec = f.

Definition exp (a b : E) :=
  subset
    (fun f : E =>
     forall x : E, In x b -> exUniq _ (fun y : E => In (couple x y) f))
    (parties (cartesien b a)).

Lemma lem_exp_elem_is_fun : forall a b f : E, In f (exp a b) -> fun_ f.

Lemma lem_exp_elem_dom : forall a b f : E, In f (exp a b) -> dom f = b.

Lemma lem_exp_elem_img : forall a b f : E, In f (exp a b) -> inc (Img f) a.

Lemma lem_exp_elem_prop : forall a b f : E, In f (exp a b) -> fun_sig f b a.

Lemma lem_fun_elem_is_2tupple :
 forall (f : E) (Af : fun_ f) (c : E),
 In c f -> exists x : E, (exists y : E, In (couple x y) f /\ c = couple x y).

Lemma lem_exp_elem_prop_recip :
 forall a b f : E, fun_sig f b a -> In f (exp a b).

Definition index (a I : E) (funa : fun_ a) (doma : dom a = I) :=
  subset (fun x : E => True) (Img a).

Lemma lem_index_prop :
 forall (a I : E) (funa : fun_ a) (doma : dom a = I),
 index a I funa doma = Img a.

Lemma lem_reunion_index_prop :
 forall (a I : E) (funa : fun_ a) (doma : dom a = I) (x : E),
 In x (reunion (index a I funa doma)) ->
 exists i : E, In i I /\ In x (App a funa i).

Lemma lem_index_inter :
 forall (a I : E) (funa : fun_ a) (doma : dom a = I) 
   (Ine : I <> Vide) (x : E) (indNe : index a I funa doma <> Vide),
 In x (Einter (index a I funa doma) indNe) ->
 forall i : E, In i I -> In x (App a funa i).

Definition produit (a I : E) (funa : fun_ a) (doma : dom a = I) :=
  subset
    (fun f : E =>
     forall i : E,
     In i I ->
     exUniq _ (fun y : E => In (couple i y) f /\ In y (App a funa i)))
    (exp (reunion (index a I funa doma)) I).

Lemma lem_f_in_prod_is_fun :
 forall (a I : E) (funa : fun_ a) (doma : dom a = I) (f : E),
 In f (produit a I funa doma) -> fun_ f.

Lemma lem_dom_of_f_in_prod_is_I :
 forall (a I : E) (funa : fun_ a) (doma : dom a = I) (f : E),
 In f (produit a I funa doma) -> dom f = I. *)

Axiom
  axs_choice :
    forall (a I : E) (funa : fun_ a) (doma : dom a = I),
    (forall i : E, In i I -> App a funa i <> Vide) ->
    produit a I funa doma <> Vide.

