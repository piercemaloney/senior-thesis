
Require Export axs_comprehension.
(* axs_comprehension:
Require Export axs_parties.

Parameter subset : (E -> Prop) -> E -> E.
Axiom
  axs_comprehension :
    forall (F : E -> Prop) (a v0 : E), In v0 (subset F a) <-> In v0 a /\ F v0.

Lemma lem_comprehension_lr :
 forall (F : E -> Prop) (a v0 : E), In v0 (subset F a) -> In v0 a /\ F v0.

Lemma lem_comprehension_rl :
 forall (F : E -> Prop) (a v0 : E), In v0 a /\ F v0 -> In v0 (subset F a).

Definition def_F_vide (v0 : E) := v0 <> v0.

Definition vide (a : E) := subset def_F_vide a.

Lemma lem_vide_propertie : forall v0 v1 : E, ~ In v0 (vide v1).

Lemma lem_vide_unicite : forall v0 v1 : E, vide v0 = vide v1.

Parameter var_vide : E.
Definition Vide := vide var_vide.

Lemma lem_x_inc_vide : forall x : E, inc x Vide -> x = Vide.

Lemma lem_x_noteq_vide : forall x y : E, In y x -> x <> Vide.

Lemma lem_paire_not_empty : forall a b : E, paire a b <> Vide.

Lemma lem_not_vide_in_vide : ~ In Vide Vide.

Definition def_F_inter (s x : E) := In x s.

Definition inter (a b : E) := subset (def_F_inter b) a.

Lemma lem_inter_propertie :
 forall a b x : E, In x (inter a b) <-> In x a /\ In x b.

Lemma lem_inter_propertie_lr :
 forall a b x : E, In x (inter a b) -> In x a /\ In x b.

Lemma lem_inter_propertie_rl :
 forall a b x : E, In x a /\ In x b -> In x (inter a b).

Lemma lem_inter_unicite :
 forall a b i : E,
 (forall x : E, In x i <-> In x a /\ In x b) -> i = inter a b.

Lemma lem_inter_vide_prop : forall x : E, inter x Vide = Vide.

Theorem notEEexists : ~ (exists v0 : E, (forall v1 : E, In v1 v0)).

Definition Einter (a : E) (Ine : a <> Vide) :=
  subset (fun v0 : E => forall v3 : E, In v3 a -> In v0 v3) (reunion a).

Lemma lem_Einter_propertie :
 forall (a v0 : E) (Ine : a <> Vide),
 In v0 (Einter a Ine) -> forall v3 : E, In v3 a -> In v0 v3.

Lemma lem_Einter_sing :
 forall a : E, Einter (singleton a) (lem_paire_not_empty a a) = a.

Lemma lem_Einter_paire :
 forall a b : E, Einter (paire a b) (lem_paire_not_empty a b) = inter a b.

Lemma lem_Einter_vide :
 forall (x : E) (Nv : x <> Vide), In Vide x -> Einter x Nv = Vide.

Definition Comp (a b : E) := subset (fun y : E => ~ In y b) a.

Parameter OComp : E -> E -> E.

Axiom def_OComp : forall a b y : E, In y (OComp a b) <-> In y a /\ ~ In y b.

Lemma lem_Comp_eq_OComp : forall a b : E, OComp a b = Comp a b.

Definition Delta (a b : E) := union (Comp a b) (Comp b a).

Lemma lem_inter_commut : forall a b : E, inter a b = inter b a.

Lemma lem_inter_assoc :
 forall a b c : E, inter (inter a b) c = inter a (inter b c).

Lemma lem_union_commut : forall a b : E, union a b = union b a.

Lemma lem_union_assoc :
 forall a b c : E, union (union a b) c = union a (union b c).

Lemma lem_inter_dist :
 forall a b c : E, inter a (union b c) = union (inter a b) (inter a c).

Lemma lem_union_dist :
 forall a b c : E, union a (inter b c) = inter (union a b) (union a c).

Lemma lem_reunion_vide : reunion Vide = Vide.

Lemma lem_union_vide : forall a : E, union a Vide = a.

Lemma lem_inter_vide : forall a : E, inter a Vide = Vide.

Lemma lem_vide_is_inc : forall a : E, inc Vide a.

Definition incNotEq (a b : E) : Prop :=
  (forall v0 : E, In v0 a -> In v0 b) /\ (exists y : E, In y b /\ ~ In y a). *)

Parameter remp : (E -> E -> Prop) -> E -> E.
Axiom
  axs_remplacement :
    forall (F : E -> E -> Prop) (v0 : E),
    (forall w0 w1 w2 : E, F w0 w1 /\ F w0 w2 -> w1 = w2) ->
    forall y : E, In y (remp F v0) <-> (exists x : E, In x v0 /\ F x y).

