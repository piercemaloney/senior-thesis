

Require Import bdds.
(* bdds:
Require Export Bool.
Require Export Sumbool.
Require Export Arith.
Require Export ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Export Allmaps.
Require Export Wf_nat.

Require Export BDDvar_ad_nat.
Require Export bdd1.
Require Export bdd2.
Require Export bdd3.
Require Export bdd4.
Require Export bdd5_1.
Require Export bdd5_2.
Require Export bdd6.
Require Export bdd7.
Require Export BDDdummy_lemma_2.
Require Export BDDdummy_lemma_3.
Require Export BDDdummy_lemma_4.
Require Export bdd8.
Require Export bdd9.
Require Export bdd10.
Require Export bdd11.
Require Export tauto. *)



Definition Z_of_N (node : ad) :=

  match node with

  | N0 => 0%Z

  | Npos p => Zpos p

  end.



Definition test (be : bool_expr) :=

  match BDDof_bool_expr initBDDconfig initBDDneg_memo initBDDor_memo be with

  | ((bs, (share, counter)), (ad, _)) => (Z_of_N counter, Z_of_N ad)

  end.



Definition v (n : nat) := Var (N_of_nat n).



Fixpoint A_bound (n bound : nat) {struct bound} : bool_expr :=

  match bound with

  | O => v n

  | S bound' => Iff (v (n - bound)) (A_bound n bound')

  end.



Definition A (n : nat) := A_bound n n.



Fixpoint U_bound (n bound : nat) {struct bound} : bool_expr :=

  match bound with

  | O => A n

  | S bound' => Iff (v (n - bound')) (U_bound n bound')

  end.



Definition U (n : nat) := U_bound n (S n).
