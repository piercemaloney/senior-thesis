

Require Import Ensembles.    

Require Import Relations_1.  

Require Import Functions.
(* Functions:
Require Import Ensembles.    
Require Import Relations_1.  

Section Functions.

Variable U : Type.

Inductive Rel (U : Type) (A B : Ensemble U) (R : Relation U) : Prop :=
    Rel_intro :
      (forall x y : U, R x y -> In U A x) ->
      (forall x y : U, R x y -> In U B y) -> Rel U A B R.
 
Section Image.

Inductive Im (R : Relation U) (A : Ensemble U) (y : U) : Prop :=
    Im_intro : forall x : U, R x y -> In U A x -> Im R A y.

Lemma Im_stable_par_incl :
 forall (R : Relation U) (A1 A2 : Ensemble U),
 Included U A1 A2 -> Included U (Im R A1) (Im R A2).

End Image.

Variable A B : Ensemble U.
Variable f : Relation U.

Definition to_at_most_one_output := forall x y z : U, f x y -> f x z -> y = z.

Definition to_at_least_one_output := forall x : U, In U A x -> exists y, f x y.

Definition from_at_most_one_input := forall x y z : U, f x z -> f y z -> x = y.

Definition from_at_least_one_input := forall y : U, In U B y -> exists x, f x y.

Inductive function : Prop := 
    function_intro :
      Rel U A B f -> to_at_most_one_output -> to_at_least_one_output -> function.

Inductive surjection : Prop := 
    surjection_intro :
      Rel U A B f ->
      to_at_most_one_output -> to_at_least_one_output -> from_at_least_one_input -> surjection.

Inductive injection : Prop := 
    injection_intro :
      Rel U A B f ->
      to_at_most_one_output -> to_at_least_one_output -> from_at_most_one_input -> injection.

Inductive bijection : Prop := 
    bijection_intro :
      Rel U A B f ->
      to_at_most_one_output ->
      to_at_least_one_output -> from_at_most_one_input -> from_at_least_one_input -> bijection.

End Functions. *)



Section Equipollence.



Variable U : Type.

Variable A B : Ensemble U.

Let Rela := Relation U.



Inductive equipollence : Prop :=

    equipollence_intro : forall f : Rela, bijection U A B f -> equipollence.



Inductive inf_card : Prop :=

    inf_card_intro : forall f : Rela, injection U A B f -> inf_card.



End Equipollence.



Notation "A <=_card B" := (inf_card _ A B) (at level 70).



Notation "A =_card B" := (equipollence _ A B) (at level 70).



