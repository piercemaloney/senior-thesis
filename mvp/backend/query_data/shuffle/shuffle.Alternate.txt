
Require Import Bool.
Require Import Words.
(* Words:
Require Import Bool.

Inductive word : Set :=
  | empty : word
  | bit : bool -> word -> word.

Inductive conc : word -> word -> word -> Prop :=
  | conc_empty : forall v : word, conc empty v v
  | conc_bit :
      forall (u v w : word) (b : bool),
      conc u v w -> conc (bit b u) v (bit b w).

Fixpoint append (u : word) : word -> word :=
  fun v : word =>
  match u with
  | empty => v
  | bit b w => bit b (append w v)
  end. 

Lemma conc_append : forall u v w : word, conc u v w -> w = append u v.

Lemma assoc_append :
 forall u v w : word, append u (append v w) = append (append u v) w.

Definition single (b : bool) := bit b empty.

Inductive odd : word -> Prop :=
    even_odd : forall w : word, even w -> forall b : bool, odd (bit b w)
with even : word -> Prop :=
  | even_empty : even empty
  | odd_even : forall w : word, odd w -> forall b : bool, even (bit b w).

Hint Resolve odd_even even_empty even_odd.

Lemma not_odd_empty : ~ odd empty.

Hint Resolve not_odd_empty.

Lemma inv_odd : forall (w : word) (b : bool), odd (bit b w) -> even w.

Lemma inv_even : forall (w : word) (b : bool), even (bit b w) -> odd w.

Lemma odd_or_even : forall w : word, odd w \/ even w.

Lemma not_odd_and_even : forall w : word, odd w -> even w -> False.

Lemma odd_even_conc :
 forall u v w : word,
 conc u v w ->
 odd w /\ (odd u /\ even v \/ even u /\ odd v) \/
 even w /\ (odd u /\ odd v \/ even u /\ even v).

Lemma even_conc :
 forall u v w : word,
 conc u v w -> even w -> odd u /\ odd v \/ even u /\ even v. *)

Inductive alt : bool -> word -> Prop :=
  | alt_empty : forall b : bool, alt b empty
  | alt_bit : forall (b : bool) (w : word), alt (negb b) w -> alt b (bit b w).

Hint Resolve alt_empty alt_bit.

Lemma alt_neg_intro :
 forall (b b' : bool) (w : word), alt b (bit b' w) -> alt (negb b) w.
Proof.
intros b b' w al.
inversion al; trivial.
Qed.

Lemma alt_neg_elim :
 forall (b b' : bool) (w : word), alt (negb b) (bit b' w) -> alt b w.
Proof.
intros; rewrite (negb_intro b); apply alt_neg_intro with b'; trivial.
Qed.

Lemma alt_eq : forall (b b' : bool) (w : word), alt b (bit b' w) -> b = b'.
Proof.
intros b b' w al.
inversion al; trivial.
Qed.

Lemma alt_back :
 forall (b b' : bool) (w : word),
 alt b (bit b' w) -> b = b' /\ alt (negb b) w.
Proof.
intros; split.
apply alt_eq with w; trivial.
apply alt_neg_intro with b'; trivial.
Qed.

Inductive alternate (w : word) : Prop :=
    alter : forall b : bool, alt b w -> alternate w.

Lemma alt_conc_l :
 forall u v w : word, conc u v w -> forall b : bool, alt b w -> alt b u.
Proof.
simple induction 1; auto; intros.
elim alt_back with b0 b w0.
intros eq A.
elim eq; auto.
trivial.
Qed.

Lemma alt_conc_r :
 forall u v w : word,
 conc u v w ->
 forall b : bool, alt b w -> odd u /\ alt (negb b) v \/ even u /\ alt b v.
Proof.
simple induction 1; intros.
right; split; intros; auto.
elim H1 with (negb b0).
rewrite (negb_elim b0); intro.
right; split; elim H3; auto.
intro; left; split; elim H3; auto.
apply alt_neg_intro with b; trivial.
Qed.

Lemma alt_conc :
 forall u v w : word, conc u v w -> alternate w -> alternate u /\ alternate v.
Proof.
simple induction 2; intros b ab; split.
apply alter with b; apply alt_conc_l with v w; trivial.
elim alt_conc_r with u v w b; intros; trivial.
elim H1; intros; apply alter with (negb b); trivial.
elim H1; intros; apply alter with b; trivial.
Qed. 

