
Require Export Qhomographic_sign.
(* Qhomographic_sign:
Require Export positive_fraction_encoding.
Require Import ZArithRing.

Definition outside_interval (a b : Z) := (Z.sgn a + Z.sgn b)%Z.

Definition inside_interval_1 (o1 o2 : Z) :=
  (0 < o1)%Z /\ (0 < o2)%Z \/ (o1 < 0)%Z /\ (o2 < 0)%Z.

Definition inside_interval_2 (o1 o2 : Z) :=
  (0 < o1)%Z /\ (o2 < 0)%Z \/ (o1 < 0)%Z /\ (0 < o2)%Z.

Lemma inside_interval_1_dec_inf :
 forall o1 o2 : Z, {inside_interval_1 o1 o2} + {~ inside_interval_1 o1 o2}.

Lemma inside_interval_2_dec_inf :
 forall o1 o2 : Z, {inside_interval_2 o1 o2} + {~ inside_interval_2 o1 o2}.

Inductive Qhomographic_sg_denom_nonzero : Z -> Z -> Qpositive -> Prop :=
  | Qhomographic_signok0 :
      forall (c d : Z) (p : Qpositive),
      p = One -> (c + d)%Z <> 0%Z -> Qhomographic_sg_denom_nonzero c d p
  | Qhomographic_signok1 :
      forall (c d : Z) (xs : Qpositive),
      Qhomographic_sg_denom_nonzero c (c + d)%Z xs ->
      Qhomographic_sg_denom_nonzero c d (nR xs)
  | Qhomographic_signok2 :
      forall (c d : Z) (xs : Qpositive),
      Qhomographic_sg_denom_nonzero (c + d)%Z d xs ->
      Qhomographic_sg_denom_nonzero c d (dL xs).

Lemma Qhomographic_signok_1 :
 forall c d : Z, Qhomographic_sg_denom_nonzero c d One -> (c + d)%Z <> 0%Z.

Lemma Qhomographic_signok_2 :
 forall (c d : Z) (xs : Qpositive),
 Qhomographic_sg_denom_nonzero c d (nR xs) ->
 Qhomographic_sg_denom_nonzero c (c + d) xs.

Lemma Qhomographic_signok_3 :
 forall (c d : Z) (xs : Qpositive),
 Qhomographic_sg_denom_nonzero c d (dL xs) ->
 Qhomographic_sg_denom_nonzero (c + d) d xs.

Fixpoint Qhomographic_sign (a b c d : Z) (p : Qpositive) {struct p} :
  forall (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
  Z * (Z * (Z * (Z * Z)) * Qpositive).

Functional Scheme Qhomographic_sign_ind :=
  Induction for Qhomographic_sign Sort Prop.

Scheme Qhomographic_sg_denom_nonzero_inv_dep :=
  Induction for Qhomographic_sg_denom_nonzero Sort Prop.

Lemma Qhomographic_sign_equal :
 forall (a b c d : Z) (p : Qpositive)
   (H1 H2 : Qhomographic_sg_denom_nonzero c d p),
 Qhomographic_sign a b c d p H1 = Qhomographic_sign a b c d p H2.

Lemma Qhomographic_sign_equal_strong :
 forall (a1 a2 b1 b2 c1 c2 d1 d2 : Z) (p1 p2 : Qpositive)
   (H_ok_1 : Qhomographic_sg_denom_nonzero c1 d1 p1)
   (H_ok_2 : Qhomographic_sg_denom_nonzero c2 d2 p2),
 a1 = a2 ->
 b1 = b2 ->
 c1 = c2 ->
 d1 = d2 ->
 p1 = p2 ->
 Qhomographic_sign a1 b1 c1 d1 p1 H_ok_1 =
 Qhomographic_sign a2 b2 c2 d2 p2 H_ok_2.

Lemma sg_One_2 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = One ->
 Z.sgn (a + b) = 0%Z ->

Lemma sg_One_3 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = One ->
 Z.sgn (a + b) <> 0%Z ->

Lemma sg_One_4 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = One ->
 Z.sgn (a + b) <> 0%Z ->

Lemma Qhomographic_sign_nR_1 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b = 0%Z ->
 d = 0%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_2 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b = 0%Z ->
 d <> 0%Z ->
 (0 < outside_interval c d)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (Z.sgn a, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_3 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b = 0%Z ->
 d <> 0%Z ->
 ~ (0 < outside_interval c d)%Z ->
 (outside_interval c d < 0)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((- Z.sgn a)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_4 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c 
                                        (c + d) xs)
   (H_Qhomographic_sg_denom_nonzero_nR : Qhomographic_sg_denom_nonzero c d
                                           (nR xs)),
 b = 0%Z ->
 d <> 0%Z ->
 ~ (0 < outside_interval c d)%Z ->
 ~ (outside_interval c d < 0)%Z ->
 Qhomographic_sign a b c d (nR xs) H_Qhomographic_sg_denom_nonzero_nR =
 Qhomographic_sign a (a + b) c (c + d) xs H_Qhomographic_sg_denom_nonzero.

Lemma Qhomographic_sign_nR_5 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b <> 0%Z ->
 d = 0%Z ->
 (0 < outside_interval a b)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (Z.sgn c, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_6 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b <> 0%Z ->
 d = 0%Z ->
 ~ (0 < outside_interval a b)%Z ->
 (outside_interval a b < 0)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((- Z.sgn c)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_7 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c 
                                        (c + d) xs)
   (H_Qhomographic_sg_denom_nonzero_nR : Qhomographic_sg_denom_nonzero c d
                                           (nR xs)),
 b <> 0%Z ->
 d = 0%Z ->
 ~ (0 < outside_interval a b)%Z ->
 ~ (outside_interval a b < 0)%Z ->
 Qhomographic_sign a b c d (nR xs) H_Qhomographic_sg_denom_nonzero_nR =
 Qhomographic_sign a (a + b) c (c + d) xs H_Qhomographic_sg_denom_nonzero.

Lemma Qhomographic_sign_nR_8 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b <> 0%Z ->
 d <> 0%Z ->
 inside_interval_1 (outside_interval a b) (outside_interval c d) ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (1%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_9 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = nR xs ->
 b <> 0%Z ->
 d <> 0%Z ->
 ~ inside_interval_1 (outside_interval a b) (outside_interval c d) ->
 inside_interval_2 (outside_interval a b) (outside_interval c d) ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((-1)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_nR_10 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c 
                                        (c + d) xs)
   (H_Qhomographic_sg_denom_nonzero_nR : Qhomographic_sg_denom_nonzero c d
                                           (nR xs)),
 b <> 0%Z ->
 d <> 0%Z ->
 ~ inside_interval_1 (outside_interval a b) (outside_interval c d) ->
 ~ inside_interval_2 (outside_interval a b) (outside_interval c d) ->
 Qhomographic_sign a b c d (nR xs) H_Qhomographic_sg_denom_nonzero_nR =
 Qhomographic_sign a (a + b) c (c + d) xs H_Qhomographic_sg_denom_nonzero.

Lemma Qhomographic_sign_dL_1 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b = 0%Z ->
 d = 0%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_2 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b = 0%Z ->
 d <> 0%Z ->
 (0 < outside_interval c d)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (Z.sgn a, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_3 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b = 0%Z ->
 d <> 0%Z ->
 ~ (0 < outside_interval c d)%Z ->
 (outside_interval c d < 0)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((- Z.sgn a)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_4 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (c + d) d xs)
   (H_Qhomographic_sg_denom_nonzero_dL : Qhomographic_sg_denom_nonzero c d
                                           (dL xs)),
 b = 0%Z ->
 d <> 0%Z ->
 ~ (0 < outside_interval c d)%Z ->
 ~ (outside_interval c d < 0)%Z ->
 Qhomographic_sign a b c d (dL xs) H_Qhomographic_sg_denom_nonzero_dL =
 Qhomographic_sign (a + b) b (c + d) d xs H_Qhomographic_sg_denom_nonzero.

Lemma Qhomographic_sign_dL_5 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b <> 0%Z ->
 d = 0%Z ->
 (0 < outside_interval a b)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (Z.sgn c, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_6 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b <> 0%Z ->
 d = 0%Z ->
 ~ (0 < outside_interval a b)%Z ->
 (outside_interval a b < 0)%Z ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((- Z.sgn c)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_7 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (c + d) d xs)
   (H_Qhomographic_sg_denom_nonzero_dL : Qhomographic_sg_denom_nonzero c d
                                           (dL xs)),
 b <> 0%Z ->
 d = 0%Z ->
 ~ (0 < outside_interval a b)%Z ->
 ~ (outside_interval a b < 0)%Z ->
 Qhomographic_sign a b c d (dL xs) H_Qhomographic_sg_denom_nonzero_dL =
 Qhomographic_sign (a + b) b (c + d) d xs H_Qhomographic_sg_denom_nonzero.

Lemma Qhomographic_sign_dL_8 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b <> 0%Z ->
 d <> 0%Z ->
 inside_interval_1 (outside_interval a b) (outside_interval c d) ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (1%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_9 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 p = dL xs ->
 b <> 0%Z ->
 d <> 0%Z ->
 ~ inside_interval_1 (outside_interval a b) (outside_interval c d) ->
 inside_interval_2 (outside_interval a b) (outside_interval c d) ->
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((-1)%Z, (a, (b, (c, d)), p)).

Lemma Qhomographic_sign_dL_10 :
 forall (a b c d : Z) (p xs : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (c + d) d xs)
   (H_Qhomographic_sg_denom_nonzero_dL : Qhomographic_sg_denom_nonzero c d
                                           (dL xs)),
 b <> 0%Z ->
 d <> 0%Z ->
 ~ inside_interval_1 (outside_interval a b) (outside_interval c d) ->
 ~ inside_interval_2 (outside_interval a b) (outside_interval c d) ->
 Qhomographic_sign a b c d (dL xs) H_Qhomographic_sg_denom_nonzero_dL =
 Qhomographic_sign (a + b) b (c + d) d xs H_Qhomographic_sg_denom_nonzero.

Lemma sg_sign :
 forall (a b c d : Z) (qp : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d qp),
 let (l1, L2) :=
     Qhomographic_sign a b c d qp H_Qhomographic_sg_denom_nonzero in
 {l1 = 0%Z} + {l1 = 1%Z} + {l1 = (-1)%Z}.

Definition h_sign (a b c d : Z) (p : Qpositive)
  (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p) :=
  let (l1, L2) :=
      Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero in
  l1.

Lemma sg_sign_dec :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 {h_sign a b c d p H_Qhomographic_sg_denom_nonzero = 0%Z} +
 {h_sign a b c d p H_Qhomographic_sg_denom_nonzero = 1%Z} +
 {h_sign a b c d p H_Qhomographic_sg_denom_nonzero = (-1)%Z}. *)
Require Import ZArithRing Zaux.
(* Zaux:
Require Export ZArith.
Require Export ZArithRing.

Tactic Notation "ElimCompare" constr(c) constr(d) := elim_compare c d.

Ltac Flip :=
  apply Z.gt_lt || apply Z.lt_gt || apply Z.le_ge || apply Z.ge_le; assumption.

Ltac Falsum :=
  try intro; apply False_ind;
   repeat
    match goal with
    | id1:(~ ?X1) |- ?X2 =>
        (apply id1; assumption || reflexivity) || clear id1
    end.

Ltac Step_l a :=
  match goal with
  |  |- (?X1 < ?X2)%Z => replace X1 with a; [ idtac | try ring ]
  end. 

Ltac Step_r a :=
  match goal with
  |  |- (?X1 < ?X2)%Z => replace X2 with a; [ idtac | try ring ]
  end. 

Ltac CaseEq formula :=
  generalize (refl_equal formula); pattern formula at -1 in |- *;
   case formula.

Lemma pair_1 : forall (A B : Set) (H : A * B), H = pair (fst H) (snd H).

Lemma pair_2 :
 forall (A B : Set) (H1 H2 : A * B),
 fst H1 = fst H2 -> snd H1 = snd H2 -> H1 = H2.

Section projection.   
 Variable A : Set.
 Variable P : A -> Prop.
 
 Definition projP1 (H : sig P) := let (x, h) := H in x.
 Definition projP2 (H : sig P) :=
   let (x, h) as H return (P (projP1 H)) := H in h.
End projection.

Lemma le_stepl: forall x y z, le x y -> x=z -> le z y.

Lemma le_stepr: forall x y z, le x y -> y=z -> le x z.

Lemma lt_stepl: forall x y z, lt x y -> x=z -> lt z y.

Lemma lt_stepr: forall x y z, lt x y -> y=z -> lt x z.

Lemma neq_stepl:forall (x y z:nat), x<>y -> x=z -> z<>y.

Lemma neq_stepr:forall (x y z:nat), x<>y -> y=z -> x<>z.

Declare Left Step le_stepl.
Declare Right Step le_stepr.
Declare Left Step lt_stepl.
Declare Right Step lt_stepr.
Declare Left Step neq_stepl.
Declare Right Step neq_stepr.

Lemma not_O_S : forall n : nat, n <> 0 -> {p : nat | n = S p}.
  
Lemma lt_minus_neq : forall m n : nat, m < n -> n - m <> 0.

Lemma lt_minus_eq_0 : forall m n : nat, m < n -> m - n = 0.

Lemma le_plus_Sn_1_SSn : forall n : nat, S n + 1 <= S (S n).

Lemma le_plus_O_l : forall p q : nat, p + q <= 0 -> p = 0.

Lemma le_plus_O_r : forall p q : nat, p + q <= 0 -> q = 0.

Lemma minus_pred : forall m n : nat, 0 < n -> pred m - pred n = m - n.

Lemma Zle_stepl: forall x y z, (x<=y)%Z -> x=z -> (z<=y)%Z.

Lemma Zle_stepr: forall x y z, (x<=y)%Z -> y=z -> (x<=z)%Z.

Lemma Zlt_stepl: forall x y z, (x<y)%Z -> x=z -> (z<y)%Z.

Lemma Zlt_stepr: forall x y z, (x<y)%Z -> y=z -> (x<z)%Z.

Lemma Zneq_stepl:forall (x y z:Z), (x<>y)%Z -> x=z -> (z<>y)%Z.

Lemma Zneq_stepr:forall (x y z:Z), (x<>y)%Z -> y=z -> (x<>z)%Z.

Declare Left Step Zle_stepl.
Declare Right Step Zle_stepr.
Declare Left Step Zlt_stepl.
Declare Right Step Zlt_stepr.
Declare Left Step Zneq_stepl.
Declare Right Step Zneq_stepr.

Lemma Zlt_cotrans :
 forall x y : Z, (x < y)%Z -> forall z : Z, {(x < z)%Z} + {(z < y)%Z}.

Lemma Zlt_cotrans_pos :
 forall x y : Z, (0 < x + y)%Z -> {(0 < x)%Z} + {(0 < y)%Z}.

Lemma Zlt_cotrans_neg :
 forall x y : Z, (x + y < 0)%Z -> {(x < 0)%Z} + {(y < 0)%Z}.

Lemma not_Zeq_inf : forall x y : Z, x <> y -> {(x < y)%Z} + {(y < x)%Z}.

Lemma Z_dec : forall x y : Z, {(x < y)%Z} + {(x > y)%Z} + {x = y}.
 
Lemma Z_dec' : forall x y : Z, {(x < y)%Z} + {(y < x)%Z} + {x = y}.

Lemma Z_lt_le_dec : forall x y : Z, {(x < y)%Z} + {(y <= x)%Z}.

Lemma Z_le_lt_dec : forall x y : Z, {(x <= y)%Z} + {(y < x)%Z}.

Lemma Z_lt_lt_S_eq_dec :
 forall x y : Z, (x < y)%Z -> {(x + 1 < y)%Z} + {(x + 1)%Z = y}.

Lemma quadro_leq_inf :
 forall a b c d : Z,
 {(c <= a)%Z /\ (d <= b)%Z} + {~ ((c <= a)%Z /\ (d <= b)%Z)}.

Lemma Zminus_eq : forall x y : Z, (x - y)%Z = 0%Z -> x = y.

Lemma Zlt_minus : forall a b : Z, (b < a)%Z -> (0 < a - b)%Z.

Lemma Zle_minus : forall a b : Z, (b <= a)%Z -> (0 <= a - b)%Z.

Lemma Zlt_plus_plus :
 forall m n p q : Z, (m < n)%Z -> (p < q)%Z -> (m + p < n + q)%Z.

Lemma Zgt_plus_plus :
 forall m n p q : Z, (m > n)%Z -> (p > q)%Z -> (m + p > n + q)%Z.

Lemma Zle_lt_plus_plus :
 forall m n p q : Z, (m <= n)%Z -> (p < q)%Z -> (m + p < n + q)%Z.

Lemma Zge_gt_plus_plus :
 forall m n p q : Z, (m >= n)%Z -> (p > q)%Z -> (m + p > n + q)%Z.

Lemma Zgt_ge_plus_plus :
 forall m n p q : Z, (m > n)%Z -> (p >= q)%Z -> (m + p > n + q)%Z.

Lemma Zlt_resp_pos : forall x y : Z, (0 < x)%Z -> (0 < y)%Z -> (0 < x + y)%Z.

Lemma Zle_resp_neg :
 forall x y : Z, (x <= 0)%Z -> (y <= 0)%Z -> (x + y <= 0)%Z.

Lemma Zlt_pos_opp : forall x : Z, (0 < x)%Z -> (- x < 0)%Z.

Lemma Zlt_neg_opp : forall x : Z, (x < 0)%Z -> (0 < - x)%Z.

Lemma Zle_neg_opp : forall x : Z, (x <= 0)%Z -> (0 <= - x)%Z.

Lemma Zle_pos_opp : forall x : Z, (0 <= x)%Z -> (- x <= 0)%Z.

Lemma Zge_opp : forall x y : Z, (x <= y)%Z -> (- x >= - y)%Z.

Lemma Zmult_pos_pos : forall x y : Z, (0 < x)%Z -> (0 < y)%Z -> (0 < x * y)%Z.

Lemma Zmult_neg_neg : forall x y : Z, (x < 0)%Z -> (y < 0)%Z -> (0 < x * y)%Z.

Lemma Zmult_neg_pos : forall x y : Z, (x < 0)%Z -> (0 < y)%Z -> (x * y < 0)%Z.

Lemma Zmult_pos_neg : forall x y : Z, (0 < x)%Z -> (y < 0)%Z -> (x * y < 0)%Z.

Hint Resolve Zmult_pos_pos Zmult_neg_neg Zmult_neg_pos Zmult_pos_neg: zarith.

Lemma Zle_reg_mult_l :
 forall x y a : Z, (0 < a)%Z -> (x <= y)%Z -> (a * x <= a * y)%Z.

Lemma Zsimpl_plus_l_dep :
 forall x y m n : Z, (x + m)%Z = (y + n)%Z -> x = y -> m = n.

Lemma Zsimpl_plus_r_dep :
 forall x y m n : Z, (m + x)%Z = (n + y)%Z -> x = y -> m = n.

Lemma Zmult_simpl :
 forall n m p q : Z, n = m -> p = q -> (n * p)%Z = (m * q)%Z.
 
Lemma Zsimpl_mult_l :
 forall n m p : Z, n <> 0%Z -> (n * m)%Z = (n * p)%Z -> m = p.

Lemma Zlt_reg_mult_l :
 forall x y z : Z, (x > 0)%Z -> (y < z)%Z -> (x * y < x * z)%Z. 

Lemma Zlt_opp : forall x y : Z, (x < y)%Z -> (- x > - y)%Z. 

Lemma Zlt_conv_mult_l :
 forall x y z : Z, (x < 0)%Z -> (y < z)%Z -> (x * y > x * z)%Z. 

Lemma Zgt_not_eq : forall x y : Z, (x > y)%Z -> x <> y.   

Lemma Zmult_resp_nonzero :
 forall x y : Z, x <> 0%Z -> y <> 0%Z -> (x * y)%Z <> 0%Z.

Lemma Zopp_app : forall y : Z, y <> 0%Z -> (- y)%Z <> 0%Z.

Lemma Zle_neq_Zlt : forall a b : Z, (a <= b)%Z -> b <> a -> (a < b)%Z.

Lemma not_Zle_lt : forall x y : Z, ~ (y <= x)%Z -> (x < y)%Z.

Lemma not_Zlt : forall x y : Z, ~ (y < x)%Z -> (x <= y)%Z.

Lemma Zmult_absorb :
 forall x y z : Z, x <> 0%Z -> (x * y)%Z = (x * z)%Z -> y = z.  

Lemma Zlt_mult_mult :
 forall a b c d : Z,
 (0 < a)%Z -> (0 < d)%Z -> (a < b)%Z -> (c < d)%Z -> (a * c < b * d)%Z.

Lemma Zgt_mult_conv_absorb_l :
 forall a x y : Z, (a < 0)%Z -> (a * x > a * y)%Z -> (x < y)%Z. 

Lemma Zgt_mult_reg_absorb_l :
 forall a x y : Z, (a > 0)%Z -> (a * x > a * y)%Z -> (x > y)%Z. 

Lemma Zopp_Zlt : forall x y : Z, (y < x)%Z -> (- x < - y)%Z.

Lemma Zmin_cancel_Zlt : forall x y : Z, (- x < - y)%Z -> (y < x)%Z.

Lemma Zmult_cancel_Zle :
 forall a x y : Z, (a < 0)%Z -> (a * x <= a * y)%Z -> (y <= x)%Z.

Lemma Zlt_mult_cancel_l :
 forall x y z : Z, (0 < x)%Z -> (x * y < x * z)%Z -> (y < z)%Z.
 
Lemma Zmin_cancel_Zle : forall x y : Z, (- x <= - y)%Z -> (y <= x)%Z.

Lemma Zmult_resp_Zle :
 forall a x y : Z, (0 < a)%Z -> (a * y <= a * x)%Z -> (y <= x)%Z.

Lemma Zopp_Zle : forall x y : Z, (y <= x)%Z -> (- x <= - y)%Z.

Lemma Zle_lt_eq_S : forall x y : Z, (x <= y)%Z -> (y < x + 1)%Z -> y = x.

Lemma Zlt_le_eq_S :
 forall x y : Z, (x < y)%Z -> (y <= x + 1)%Z -> y = (x + 1)%Z.

Lemma double_not_equal_zero :
 forall c d : Z, ~ (c = 0%Z /\ d = 0%Z) -> c <> d \/ c <> 0%Z.

Lemma triple_not_equal_zero :
 forall a b c : Z,
 ~ (a = 0%Z /\ b = 0%Z /\ c = 0%Z) -> a <> 0%Z \/ b <> 0%Z \/ c <> 0%Z.

Lemma mediant_1 :
 forall m n m' n' : Z, (m' * n < m * n')%Z -> ((m + m') * n < m * (n + n'))%Z.
 
Lemma mediant_2 :
 forall m n m' n' : Z,
 (m' * n < m * n')%Z -> (m' * (n + n') < (m + m') * n')%Z. 

Lemma mediant_3 :
 forall a b m n m' n' : Z,
 (0 <= a * m + b * n)%Z ->
 (0 <= a * m' + b * n')%Z -> (0 <= a * (m + m') + b * (n + n'))%Z.

Lemma fraction_lt_trans :
 forall a b c d e f : Z,
 (0 < b)%Z ->
 (0 < d)%Z ->
 (0 < f)%Z -> (a * d < c * b)%Z -> (c * f < e * d)%Z -> (a * f < e * b)%Z.

Lemma square_pos : forall a : Z, a <> 0%Z -> (0 < a * a)%Z.
 
Hint Resolve square_pos: zarith.

Definition Z2positive (z : Z) :=
  match z with
  | Zpos p => p
  | Zneg p => p
  | Z0 => 1%positive
  end.

Lemma ZL9 : forall p : positive, Z_of_nat (nat_of_P p) = Zpos p. 

Coercion Z_of_nat : nat >-> Z.

Lemma ZERO_lt_POS : forall p : positive, (0 < Zpos p)%Z.

Lemma POS_neq_ZERO : forall p : positive, Zpos p <> 0%Z.

Lemma NEG_neq_ZERO : forall p : positive, Zneg p <> 0%Z.

Lemma POS_resp_eq : forall p0 p1 : positive, Zpos p0 = Zpos p1 -> p0 = p1.

Lemma nat_nat_pos : forall m n : nat, ((m + 1) * (n + 1) > 0)%Z. 
 
Theorem S_predn : forall m : nat, m <> 0 -> S (pred m) = m. 

Lemma absolu_1 : forall x : Z, Z.abs_nat x = 0 -> x = 0%Z. 

Lemma absolu_2 : forall x : Z, x <> 0%Z -> Z.abs_nat x <> 0. 

Lemma absolu_inject_nat : forall n : nat, Z.abs_nat (Z_of_nat n) = n.

Lemma eq_inj : forall m n : nat, m = n :>Z -> m = n.

Lemma lt_inj : forall m n : nat, (m < n)%Z -> m < n.

Lemma le_inj : forall m n : nat, (m <= n)%Z -> m <= n.

Lemma inject_nat_S_inf : forall x : Z, (0 < x)%Z -> {n : nat | x = S n}.

Lemma le_absolu :
 forall x y : Z,
 (0 <= x)%Z -> (0 <= y)%Z -> (x <= y)%Z -> Z.abs_nat x <= Z.abs_nat y.

Lemma lt_absolu :
 forall x y : Z,
 (0 <= x)%Z -> (0 <= y)%Z -> (x < y)%Z -> Z.abs_nat x < Z.abs_nat y.

Lemma absolu_plus :
 forall x y : Z,
 (0 <= x)%Z -> (0 <= y)%Z -> Z.abs_nat (x + y) = Z.abs_nat x + Z.abs_nat y.

Lemma pred_absolu :
 forall x : Z, (0 < x)%Z -> pred (Z.abs_nat x) = Z.abs_nat (x - 1).

Definition pred_nat : forall (x : Z) (Hx : (0 < x)%Z), nat.

Lemma pred_nat_equal :
 forall (x : Z) (Hx1 Hx2 : (0 < x)%Z), pred_nat x Hx1 = pred_nat x Hx2.

Let pred_nat_unfolded_subproof px :
  Pos.to_nat px <> 0.

Lemma pred_nat_unfolded :
 forall (x : Z) (Hx : (0 < x)%Z), x = S (pred_nat x Hx).

Lemma absolu_pred_nat :
 forall (m : Z) (Hm : (0 < m)%Z), S (pred_nat m Hm) = Z.abs_nat m.

Lemma pred_nat_absolu :
 forall (m : Z) (Hm : (0 < m)%Z), pred_nat m Hm = Z.abs_nat (m - 1).

Lemma minus_pred_nat :
 forall (n m : Z) (Hn : (0 < n)%Z) (Hm : (0 < m)%Z) (Hnm : (0 < n - m)%Z),
 S (pred_nat n Hn) - S (pred_nat m Hm) = S (pred_nat (n - m) Hnm).

Lemma Zsgn_1 :
 forall x : Z, {Z.sgn x = 0%Z} + {Z.sgn x = 1%Z} + {Z.sgn x = (-1)%Z}. 

Lemma Zsgn_2 : forall x : Z, Z.sgn x = 0%Z -> x = 0%Z.   

Lemma Zsgn_3 : forall x : Z, x <> 0%Z -> Z.sgn x <> 0%Z.   

Theorem Zsgn_4 : forall a : Z, a = (Z.sgn a * Z.abs_nat a)%Z.  

Theorem Zsgn_5 :
 forall a b x y : Z,
 x <> 0%Z ->
 y <> 0%Z ->
 (Z.sgn a * x)%Z = (Z.sgn b * y)%Z -> (Z.sgn a * y)%Z = (Z.sgn b * x)%Z.  

Lemma Zsgn_6 : forall x : Z, x = 0%Z -> Z.sgn x = 0%Z.

Lemma Zsgn_7 : forall x : Z, (x > 0)%Z -> Z.sgn x = 1%Z.

Lemma Zsgn_7' : forall x : Z, (0 < x)%Z -> Z.sgn x = 1%Z.

Lemma Zsgn_8 : forall x : Z, (x < 0)%Z -> Z.sgn x = (-1)%Z.

Lemma Zsgn_9 : forall x : Z, Z.sgn x = 1%Z -> (0 < x)%Z.
 
Lemma Zsgn_10 : forall x : Z, Z.sgn x = (-1)%Z -> (x < 0)%Z.

Lemma Zsgn_11 : forall x : Z, (Z.sgn x < 0)%Z -> (x < 0)%Z.

Lemma Zsgn_12 : forall x : Z, (0 < Z.sgn x)%Z -> (0 < x)%Z.

Lemma Zsgn_13 : forall x : Z, (0 <= Z.sgn x)%Z -> (0 <= x)%Z.

Lemma Zsgn_14 : forall x : Z, (Z.sgn x <= 0)%Z -> (x <= 0)%Z.

Lemma Zsgn_15 : forall x y : Z, Z.sgn (x * y) = (Z.sgn x * Z.sgn y)%Z.

Lemma Zsgn_16 :
 forall x y : Z,
 Z.sgn (x * y) = 1%Z -> {(0 < x)%Z /\ (0 < y)%Z} + {(x < 0)%Z /\ (y < 0)%Z}.

Lemma Zsgn_17 :
 forall x y : Z,
 Z.sgn (x * y) = (-1)%Z -> {(0 < x)%Z /\ (y < 0)%Z} + {(x < 0)%Z /\ (0 < y)%Z}.

Lemma Zsgn_18 : forall x y : Z, Z.sgn (x * y) = 0%Z -> {x = 0%Z} + {y = 0%Z}.

Lemma Zsgn_19 : forall x y : Z, (0 < Z.sgn x + Z.sgn y)%Z -> (0 < x + y)%Z.

Lemma Zsgn_20 : forall x y : Z, (Z.sgn x + Z.sgn y < 0)%Z -> (x + y < 0)%Z.

Lemma Zsgn_21 : forall x y : Z, (0 < Z.sgn x + Z.sgn y)%Z -> (0 <= x)%Z.

Lemma Zsgn_22 : forall x y : Z, (Z.sgn x + Z.sgn y < 0)%Z -> (x <= 0)%Z.

Lemma Zsgn_23 : forall x y : Z, (0 < Z.sgn x + Z.sgn y)%Z -> (0 <= y)%Z.

Lemma Zsgn_24 : forall x y : Z, (Z.sgn x + Z.sgn y < 0)%Z -> (y <= 0)%Z.

Lemma Zsgn_25 : forall x : Z, Z.sgn (- x) = (- Z.sgn x)%Z.

Lemma Zsgn_26 : forall x : Z, (0 < x)%Z -> (0 < Z.sgn x)%Z.

Lemma Zsgn_27 : forall x : Z, (x < 0)%Z -> (Z.sgn x < 0)%Z.

Hint Resolve Zsgn_1 Zsgn_2 Zsgn_3 Zsgn_4 Zsgn_5 Zsgn_6 Zsgn_7 Zsgn_7' Zsgn_8
  Zsgn_9 Zsgn_10 Zsgn_11 Zsgn_12 Zsgn_13 Zsgn_14 Zsgn_15 Zsgn_16 Zsgn_17
  Zsgn_18 Zsgn_19 Zsgn_20 Zsgn_21 Zsgn_22 Zsgn_23 Zsgn_24 Zsgn_25 Zsgn_26
  Zsgn_27: zarith.

Lemma Zabs_1 : forall z p : Z, (Z.abs z < p)%Z -> (z < p)%Z /\ (- p < z)%Z.

Lemma Zabs_2 : forall z p : Z, (Z.abs z > p)%Z -> (z > p)%Z \/ (- p > z)%Z.

Lemma Zabs_3 : forall z p : Z, (z < p)%Z /\ (- p < z)%Z -> (Z.abs z < p)%Z.

Lemma Zabs_4 : forall z p : Z, (Z.abs z < p)%Z -> (- p < z < p)%Z.
 
Lemma Zabs_5 : forall z p : Z, (Z.abs z <= p)%Z -> (- p <= z <= p)%Z.

Lemma Zabs_6 : forall z p : Z, (Z.abs z <= p)%Z -> (z <= p)%Z.

Lemma Zabs_7 : forall z p : Z, (Z.abs z <= p)%Z -> (- p <= z)%Z.

Lemma Zabs_8 : forall z p : Z, (- p <= z <= p)%Z -> (Z.abs z <= p)%Z.

Lemma Zabs_min : forall z : Z, Z.abs z = Z.abs (- z).

Lemma Zabs_9 :
 forall z p : Z, (0 <= p)%Z -> (p < z)%Z \/ (z < - p)%Z -> (p < Z.abs z)%Z.

Lemma Zabs_10 : forall z : Z, (0 <= Z.abs z)%Z.

Lemma Zabs_11 : forall z : Z, z <> 0%Z -> (0 < Z.abs z)%Z.

Lemma Zabs_12 : forall z m : Z, (m < Z.abs z)%Z -> {(m < z)%Z} + {(z < - m)%Z}.

Lemma Zabs_mult : forall z p : Z, Z.abs (z * p) = (Z.abs z * Z.abs p)%Z.

Lemma Zabs_plus : forall z p : Z, (Z.abs (z + p) <= Z.abs z + Z.abs p)%Z.

Lemma Zabs_neg : forall z : Z, (z <= 0)%Z -> Z.abs z = (- z)%Z.

Lemma Zle_Zabs: forall z, (z <= Z.abs z)%Z.
 
Hint Resolve Zabs_1 Zabs_2 Zabs_3 Zabs_4 Zabs_5 Zabs_6 Zabs_7 Zabs_8 Zabs_9
  Zabs_10 Zabs_11 Zabs_12 Zabs_min Zabs_neg Zabs_mult Zabs_plus Zle_Zabs: zarith.

Lemma Zind :
 forall (P : Z -> Prop) (p : Z),
 P p ->
 (forall q : Z, (p <= q)%Z -> P q -> P (q + 1)%Z) ->
 forall q : Z, (p <= q)%Z -> P q. 

Lemma Zrec :
 forall (P : Z -> Set) (p : Z),
 P p ->
 (forall q : Z, (p <= q)%Z -> P q -> P (q + 1)%Z) ->
 forall q : Z, (p <= q)%Z -> P q. 

Lemma Zrec_down :
 forall (P : Z -> Set) (p : Z),
 P p ->
 (forall q : Z, (q <= p)%Z -> P q -> P (q - 1)%Z) ->
 forall q : Z, (q <= p)%Z -> P q.

Lemma Zind_down :
 forall (P : Z -> Prop) (p : Z),
 P p ->
 (forall q : Z, (q <= p)%Z -> P q -> P (q - 1)%Z) ->
 forall q : Z, (q <= p)%Z -> P q.

Lemma Zrec_wf :
 forall (P : Z -> Set) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 forall q : Z, (p <= q)%Z -> P q.

Lemma Zrec_wf2 :
 forall (q : Z) (P : Z -> Set) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 (p <= q)%Z -> P q.

Lemma Zrec_wf_double :
 forall (P : Z -> Z -> Set) (p0 q0 : Z),
 (forall n m : Z,
  (forall p q : Z, (q0 <= q)%Z -> (p0 <= p < n)%Z -> P p q) ->
  (forall p : Z, (q0 <= p < m)%Z -> P n p) -> P n m) ->
 forall p q : Z, (q0 <= q)%Z -> (p0 <= p)%Z -> P p q.

Lemma Zind_wf :
 forall (P : Z -> Prop) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 forall q : Z, (p <= q)%Z -> P q.

Lemma Zind_wf2 :
 forall (q : Z) (P : Z -> Prop) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 (p <= q)%Z -> P q.

Lemma Zind_wf_double :
 forall (P : Z -> Z -> Prop) (p0 q0 : Z),
 (forall n m : Z,
  (forall p q : Z, (q0 <= q)%Z -> (p0 <= p < n)%Z -> P p q) ->
  (forall p : Z, (q0 <= p < m)%Z -> P n p) -> P n m) ->
 forall p q : Z, (q0 <= q)%Z -> (p0 <= p)%Z -> P p q.

Definition Zmax (n m : Z) := (n + m - Z.min n m)%Z.

Lemma ZmaxSS : forall n m : Z, (Zmax n m + 1)%Z = Zmax (n + 1) (m + 1).

Lemma Zle_max_l : forall n m : Z, (n <= Zmax n m)%Z.

Lemma Zle_max_r : forall n m : Z, (m <= Zmax n m)%Z.

Lemma Zmin_or_informative : forall n m : Z, {Z.min n m = n} + {Z.min n m = m}.

Lemma Zmax_case : forall (n m : Z) (P : Z -> Set), P n -> P m -> P (Zmax n m).
 
Lemma Zmax_or_informative : forall n m : Z, {Zmax n m = n} + {Zmax n m = m}. 

Lemma Zmax_n_n : forall n : Z, Zmax n n = n.

Hint Resolve ZmaxSS Zle_max_r Zle_max_l Zmax_n_n: zarith.

Lemma Zeven_S : forall x : Z, Zeven.Zodd x -> Zeven.Zeven (x + 1).

Lemma Zeven_pred : forall x : Z, Zeven.Zodd x -> Zeven.Zeven (x - 1). 

Definition Z_modulo_2_always :
  forall x : Z, {y : Z | x = (2 * y)%Z} + {y : Z | x = (2 * y + 1)%Z} :=
  Zeven.Z_modulo_2.

Lemma Z_div_mod_eq_2 :
 forall a b : Z, (0 < b)%Z -> (b * (a / b))%Z = (a - a mod b)%Z.

Lemma Z_div_le :
 forall a b c : Z, (0 < c)%Z -> (b <= a)%Z -> (b / c <= a / c)%Z. 

Lemma Z_div_nonneg :
 forall a b : Z, (0 < b)%Z -> (0 <= a)%Z -> (0 <= a / b)%Z.

Lemma Z_div_neg : forall a b : Z, (0 < b)%Z -> (a < 0)%Z -> (a / b < 0)%Z.

Hint Resolve Z_div_mod_eq_2 Z_div_le Z_div_nonneg Z_div_neg: zarith.

Lemma Zpower_1 : forall a : Z, (a ^ 1)%Z = a.

Lemma Zpower_2 : forall a : Z, (a ^ 2)%Z = (a * a)%Z.

Hint Resolve Zpower_1 Zpower_2: zarith. *)

Lemma sg_tuple_equal :
 forall (l1 a1 b1 c1 d1 : Z) (p1 : Qpositive) (l2 a2 b2 c2 d2 : Z)
   (p2 : Qpositive),
 (l1, (a1, (b1, (c1, d1)), p1)) = (l2, (a2, (b2, (c2, d2)), p2)) ->
 l1 = l2 /\ (a1 = a2 /\ b1 = b2 /\ c1 = c2 /\ d1 = d2) /\ p1 = p2.
Proof.
 intros.
 inversion H; (repeat split; reflexivity).
Qed.

Lemma inside_interval_1_inf :
 forall o1 o2 : Z,
 inside_interval_1 o1 o2 ->
 {(0 < o1)%Z /\ (0 < o2)%Z} + {(o1 < 0)%Z /\ (o2 < 0)%Z}.
Proof.
 intros o1 o2 H.
 case (Z_lt_dec 0 o1); intros Ho1;
            [ case (Z_lt_dec 0 o2); intros Ho2;
               [ left; split; assumption | idtac ]
            | case (Z_lt_dec o1 0); intros Ho1';
               [ case (Z_lt_dec o2 0); intros Ho2;
                  [ right; split; assumption | idtac ]
               | idtac ] ]; apply False_rec; case H; 
            intros (Ho1_, Ho2_);
            repeat
             match goal with
             | id1:(~ (?X1 < ?X2)%Z) |- ?X3 => apply id1; assumption
             end ||
               match goal with
               | id1:(0 < ?X2)%Z,id2:(?X2 < 0)%Z |- ?X3 =>
                   apply (Z.lt_irrefl 0); apply Z.lt_trans with X2; assumption
               end.
Qed.       
   
Lemma inside_interval_2_inf :
 forall o1 o2 : Z,
 inside_interval_2 o1 o2 ->
 {(0 < o1)%Z /\ (o2 < 0)%Z} + {(o1 < 0)%Z /\ (0 < o2)%Z}.
Proof.
 intros o1 o2 H.
 case (Z_lt_dec 0 o1); intros Ho1;
            [ case (Z_lt_dec o2 0); intros Ho2;
               [ left; split; assumption | idtac ]
            | case (Z_lt_dec o1 0); intros Ho1';
               [ case (Z_lt_dec 0 o2); intros Ho2;
                  [ right; split; assumption | idtac ]
               | idtac ] ]; apply False_rec; case H; 
            intros (Ho1_, Ho2_);
            repeat
             match goal with
             | id1:(~ (?X1 < ?X2)%Z) |- ?X3 => apply id1; assumption
             end ||
               match goal with
               | id1:(0 < ?X2)%Z,id2:(?X2 < 0)%Z |- ?X3 =>
                   apply (Z.lt_irrefl 0); apply Z.lt_trans with X2; assumption
               end.
Qed.       
   
Lemma sg_pos_1 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p)
   (na nb nc nd : Z) (np : Qpositive),
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (1%Z, (na, (nb, (nc, nd)), np)) ->
 {(0 < na + nb)%Z /\ (0 < nc + nd)%Z} + {(na + nb < 0)%Z /\ (nc + nd < 0)%Z}.
Proof.
 fix sg_pos_1 5.
 intros a b c d p H_Qhomographic_sg_denom_nonzero na nb nc nd np H_sg.
 set (o1 := outside_interval a b) in *.
 set (o2 := outside_interval c d) in *.
 destruct p as [p| p| ].
  
 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_nR_1 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (nR p)) Hb Hd); intro;
    assert
     (H6 :
      (1%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal 1 na nb nc nd np (Z.sgn a * Z.sgn c) a b c d (nR p) H6);
       intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; repeat rewrite Zplus_0_r; apply Zsgn_16; 
       rewrite Zsgn_15; symmetry  in |- *; assumption ].
  
   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_nR_2 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn a) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; left; 
        split; [ apply Zsgn_9; symmetry  in |- * | apply Zsgn_19 ];
        assumption ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_nR_3 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn a) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; right; 
         split;
         [ apply Zsgn_10; symmetry  in |- *; apply Z.opp_inj | apply Zsgn_20 ];
         assumption ].
 
     generalize
      (Qhomographic_sign_nR_4 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_pos_1 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_nR_5 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn c) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; left; 
        split; [ apply Zsgn_19 | apply Zsgn_9; symmetry  in |- * ];
        assumption ].
    
    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_nR_6 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn c) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; right; 
         split;
         [ apply Zsgn_20 | apply Zsgn_10; symmetry  in |- *; apply Z.opp_inj ];
         assumption ].
 
     generalize
      (Qhomographic_sign_nR_7 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_pos_1 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1;
   [ generalize
      (Qhomographic_sign_nR_8 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd H_inside_1);
      intro;
      assert
       (H6 : (1%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np 1 a b c d (nR p) H6);
         intros _ ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; case (inside_interval_1_inf _ _ H_inside_1);
         intros (Ho1, Ho2);
         [ left; split; apply Zsgn_19 | right; split; apply Zsgn_20 ];
         assumption ]
   | case (inside_interval_2_dec_inf o1 o2); intro H_inside_2;
      [ generalize
         (Qhomographic_sign_nR_9 a b c d (nR p) p
            H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd
            H_inside_1 H_inside_2); intro; apply False_rec;
         assert
          (H6 :
           (1%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), nR p)));
         [ apply
            trans_eq
             with
               (Qhomographic_sign a b c d (nR p)
                  H_Qhomographic_sg_denom_nonzero);
            assumption || symmetry  in |- *; assumption
         | elim (sg_tuple_equal 1 na nb nc nd np (-1) a b c d (nR p) H6);
            intros H7 H8; discriminate H7 ]
      | generalize
         (Qhomographic_sign_nR_10 a b c d (nR p) p
            (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
            H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2);
         intro;
         apply
          (sg_pos_1 a (a + b)%Z c (c + d)%Z p
             (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na
             nb nc nd np);
         apply
          trans_eq
           with
             (Qhomographic_sign a b c d (nR p)
                H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption ] ].
  
 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_dL_1 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (dL p)) Hb Hd); intro;
    assert
     (H6 :
      (1%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal 1 na nb nc nd np (Z.sgn a * Z.sgn c) a b c d (dL p) H6);
       intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; repeat rewrite Zplus_0_r; apply Zsgn_16; 
       rewrite Zsgn_15; symmetry  in |- *; assumption ].
  
   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_dL_2 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn a) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; left; 
        split; [ apply Zsgn_9; symmetry  in |- * | apply Zsgn_19 ];
        assumption ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_dL_3 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn a) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; right; 
         split;
         [ apply Zsgn_10; symmetry  in |- *; apply Z.opp_inj | apply Zsgn_20 ];
         assumption ].
 
     generalize
      (Qhomographic_sign_dL_4 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_pos_1 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_dL_5 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn c) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; left; 
        split; [ apply Zsgn_19 | apply Zsgn_9; symmetry  in |- * ];
        assumption ].
    
    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_dL_6 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn c) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; right; 
         split;
         [ apply Zsgn_20 | apply Zsgn_10; symmetry  in |- *; apply Z.opp_inj ];
         assumption ].
 
     generalize
      (Qhomographic_sign_dL_7 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_pos_1 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1;
   [ generalize
      (Qhomographic_sign_dL_8 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd H_inside_1);
      intro;
      assert
       (H6 : (1%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np 1 a b c d (dL p) H6);
         intros _ ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; case (inside_interval_1_inf _ _ H_inside_1);
         intros (Ho1, Ho2);
         [ left; split; apply Zsgn_19 | right; split; apply Zsgn_20 ];
         assumption ]
   | case (inside_interval_2_dec_inf o1 o2); intro H_inside_2;
      [ generalize
         (Qhomographic_sign_dL_9 a b c d (dL p) p
            H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd
            H_inside_1 H_inside_2); intro; apply False_rec;
         assert
          (H6 :
           (1%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), dL p)));
         [ apply
            trans_eq
             with
               (Qhomographic_sign a b c d (dL p)
                  H_Qhomographic_sg_denom_nonzero);
            assumption || symmetry  in |- *; assumption
         | elim (sg_tuple_equal 1 na nb nc nd np (-1) a b c d (dL p) H6);
            intros H7 H8; discriminate H7 ]
      | generalize
         (Qhomographic_sign_dL_10 a b c d (dL p) p
            (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
            H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2);
         intro;
         apply
          (sg_pos_1 (a + b)%Z b (c + d)%Z d p
             (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na
             nb nc nd np);
         apply
          trans_eq
           with
             (Qhomographic_sign a b c d (dL p)
                H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption ] ].

 case (Z_zerop (Z.sgn (a + b))); intro Hab.  
  apply False_rec;
   generalize
    (sg_One_2 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab); intro;
   assert
    (H2 : (1%Z, (na, (nb, (nc, nd)), np)) = (0%Z, (a, (b, (c, d)), One)));
   [ apply
      trans_eq
       with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption
   | elim (sg_tuple_equal 1 na nb nc nd np 0 a b c d One H2); intros H3 H4;
      discriminate H3 ].
 
  case (Z.eq_dec (Z.sgn (a + b)) (Z.sgn (c + d))); intro Habcd.  
   generalize
    (sg_One_3 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro;
    assert
     (H2 : (1%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal 1 na nb nc nd np 1 a b c d One H2);
       intros _ ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; case (not_Zeq_inf (Z.sgn (a + b)) 0 Hab); 
       intro Hab';
       [ right; split; apply Zsgn_11; [ idtac | rewrite Habcd in Hab' ]
       | left; split; apply Zsgn_12; [ idtac | rewrite Habcd in Hab' ] ];
       assumption ].

   generalize
    (sg_One_4 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro; apply False_rec;
    assert
     (H2 : (1%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal 1 na nb nc nd np (-1) a b c d One H2);
       intros H3 H4; discriminate H3 ].
Qed.

Lemma sg_pos_2 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p)
   (na nb nc nd : Z) (np : Qpositive),
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 (1%Z, (na, (nb, (nc, nd)), np)) ->
 {(0 <= na)%Z /\ (0 <= nb)%Z /\ (0 <= nc)%Z /\ (0 <= nd)%Z} +
 {(na <= 0)%Z /\ (nb <= 0)%Z /\ (nc <= 0)%Z /\ (nd <= 0)%Z} + 
 {np = One}.
Proof.
 fix sg_pos_2 5.
 intros a b c d p H_Qhomographic_sg_denom_nonzero na nb nc nd np H_sg.
 set (o1 := outside_interval a b) in *.
 set (o2 := outside_interval c d) in *.
 destruct p as [p| p| ].
  
 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_nR_1 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (nR p)) Hb Hd); intro;
    assert
     (H6 :
      (1%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal 1 na nb nc nd np (Z.sgn a * Z.sgn c) a b c d (nR p) H6);
       intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; left; rewrite <- Zsgn_15 in H_ac;
       case (Zsgn_16 _ _ (sym_eq H_ac)); intros (Ha, Hc); 
       [ left | right ]; repeat split;
       apply Z.le_refl || (apply Zlt_le_weak; assumption) ].
  
   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_nR_2 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn a) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; left; left; repeat split; first
        [ apply Z.le_refl
        | match goal with
          |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
          |  |- (?X1 <= 0)%Z =>
              apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
          end; apply sym_eq; assumption
        | unfold o2 in Ho2;
           match goal with
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X1)%Z =>
               apply Zsgn_21 with X2
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X2)%Z =>
               apply Zsgn_23 with X1
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X1 <= 0)%Z =>
               apply Zsgn_22 with X2
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X2 <= 0)%Z => apply Zsgn_24 with X1
           end; assumption ] ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_nR_3 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn a) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; left; right; repeat split; first
         [ apply Z.le_refl
         | match goal with
           |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
           |  |- (?X1 <= 0)%Z =>
               apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
           end; apply sym_eq; assumption
         | unfold o2 in Ho2, Ho2';
            match goal with
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X1)%Z =>
                apply Zsgn_21 with X2
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X2)%Z =>
                apply Zsgn_23 with X1
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X1 <= 0)%Z =>
                apply Zsgn_22 with X2
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X2 <= 0)%Z => apply Zsgn_24 with X1
            end; assumption ] ].
 
     generalize
      (Qhomographic_sign_nR_4 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_pos_2 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_nR_5 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn c) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; left; left; repeat split; first
        [ apply Z.le_refl
        | match goal with
          |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
          |  |- (?X1 <= 0)%Z =>
              apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
          end; apply sym_eq; assumption
        | unfold o1 in Ho1;
           match goal with
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X1)%Z =>
               apply Zsgn_21 with X2
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X2)%Z =>
               apply Zsgn_23 with X1
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X1 <= 0)%Z =>
               apply Zsgn_22 with X2
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X2 <= 0)%Z => apply Zsgn_24 with X1
           end; assumption ] ].
    
    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_nR_6 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn c) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; left; right; repeat split; first
         [ apply Z.le_refl
         | match goal with
           |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
           |  |- (?X1 <= 0)%Z =>
               apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
           end; apply sym_eq; assumption
         | unfold o1 in Ho1, Ho1';
            match goal with
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X1)%Z =>
                apply Zsgn_21 with X2
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X2)%Z =>
                apply Zsgn_23 with X1
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X1 <= 0)%Z =>
                apply Zsgn_22 with X2
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X2 <= 0)%Z => apply Zsgn_24 with X1
            end; assumption ] ].
 
     generalize
      (Qhomographic_sign_nR_7 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_pos_2 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1.
    generalize
     (Qhomographic_sign_nR_8 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd H_inside_1); intro;
     assert
      (H6 : (1%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np 1 a b c d (nR p) H6);
        intros _ ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; left; case (inside_interval_1_inf _ _ H_inside_1);
        intros (Ho1, Ho2); [ left | right ]; repeat split; 
        unfold o1 in Ho1; unfold o2 in Ho2;
        match goal with
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
            apply Zsgn_21 with X2
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
            apply Zsgn_23 with X1
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
            apply Zsgn_22 with X2
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
            apply Zsgn_24 with X1
        end; assumption ].

    case (inside_interval_2_dec_inf o1 o2); intro H_inside_2;
     [ generalize
        (Qhomographic_sign_nR_9 a b c d (nR p) p
           H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd
           H_inside_1 H_inside_2); intro; apply False_rec;
        assert
         (H6 :
          (1%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), nR p)));
        [ apply
           trans_eq
            with
              (Qhomographic_sign a b c d (nR p)
                 H_Qhomographic_sg_denom_nonzero);
           assumption || symmetry  in |- *; assumption
        | elim (sg_tuple_equal 1 na nb nc nd np (-1) a b c d (nR p) H6);
           intros H7 H8; discriminate H7 ]
     | generalize
        (Qhomographic_sign_nR_10 a b c d (nR p) p
           (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
           H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2);
        intro;
        apply
         (sg_pos_2 a (a + b)%Z c (c + d)%Z p
            (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na
            nb nc nd np);
        apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption ].

 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_dL_1 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (dL p)) Hb Hd); intro;
    assert
     (H6 :
      (1%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal 1 na nb nc nd np (Z.sgn a * Z.sgn c) a b c d (dL p) H6);
       intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; left; rewrite <- Zsgn_15 in H_ac;
       case (Zsgn_16 _ _ (sym_eq H_ac)); intros (Ha, Hc); 
       [ left | right ]; repeat split;
       apply Z.le_refl || (apply Zlt_le_weak; assumption) ].
  
   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_dL_2 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn a) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; left; left; repeat split; first
        [ apply Z.le_refl
        | match goal with
          |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
          |  |- (?X1 <= 0)%Z =>
              apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
          end; apply sym_eq; assumption
        | unfold o2 in Ho2;
           match goal with
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X1)%Z =>
               apply Zsgn_21 with X2
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X2)%Z =>
               apply Zsgn_23 with X1
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X1 <= 0)%Z =>
               apply Zsgn_22 with X2
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X2 <= 0)%Z => apply Zsgn_24 with X1
           end; assumption ] ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_dL_3 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn a) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; left; right; repeat split; first
         [ apply Z.le_refl
         | match goal with
           |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
           |  |- (?X1 <= 0)%Z =>
               apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
           end; apply sym_eq; assumption
         | unfold o2 in Ho2, Ho2';
            match goal with
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X1)%Z =>
                apply Zsgn_21 with X2
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X2)%Z =>
                apply Zsgn_23 with X1
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X1 <= 0)%Z =>
                apply Zsgn_22 with X2
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X2 <= 0)%Z => apply Zsgn_24 with X1
            end; assumption ] ].
 
     generalize
      (Qhomographic_sign_dL_4 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_pos_2 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_dL_5 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       (1%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np (Z.sgn c) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; left; left; repeat split; first
        [ apply Z.le_refl
        | match goal with
          |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
          |  |- (?X1 <= 0)%Z =>
              apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
          end; apply sym_eq; assumption
        | unfold o1 in Ho1;
           match goal with
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X1)%Z =>
               apply Zsgn_21 with X2
           | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
           (0 <= ?X2)%Z =>
               apply Zsgn_23 with X1
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X1 <= 0)%Z =>
               apply Zsgn_22 with X2
           | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
           (?X2 <= 0)%Z => apply Zsgn_24 with X1
           end; assumption ] ].
    
    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_dL_6 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        (1%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim (sg_tuple_equal 1 na nb nc nd np (- Z.sgn c) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; left; right; repeat split; first
         [ apply Z.le_refl
         | match goal with
           |  |- (0 <= ?X1)%Z => apply Zlt_le_weak; apply Zsgn_9
           |  |- (?X1 <= 0)%Z =>
               apply Zlt_le_weak; apply Zsgn_10; apply Z.opp_inj
           end; apply sym_eq; assumption
         | unfold o1 in Ho1, Ho1';
            match goal with
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X1)%Z =>
                apply Zsgn_21 with X2
            | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
            (0 <= ?X2)%Z =>
                apply Zsgn_23 with X1
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X1 <= 0)%Z =>
                apply Zsgn_22 with X2
            | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
            (?X2 <= 0)%Z => apply Zsgn_24 with X1
            end; assumption ] ].
 
     generalize
      (Qhomographic_sign_dL_7 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_pos_2 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1.
    generalize
     (Qhomographic_sign_dL_8 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd H_inside_1); intro;
     assert
      (H6 : (1%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal 1 na nb nc nd np 1 a b c d (dL p) H6);
        intros _ ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; left; case (inside_interval_1_inf _ _ H_inside_1);
        intros (Ho1, Ho2); [ left | right ]; repeat split; 
        unfold o1 in Ho1; unfold o2 in Ho2;
        match goal with
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
            apply Zsgn_21 with X2
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
            apply Zsgn_23 with X1
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
            apply Zsgn_22 with X2
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
            apply Zsgn_24 with X1
        end; assumption ].

    case (inside_interval_2_dec_inf o1 o2); intro H_inside_2;
     [ generalize
        (Qhomographic_sign_dL_9 a b c d (dL p) p
           H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd
           H_inside_1 H_inside_2); intro; apply False_rec;
        assert
         (H6 :
          (1%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), dL p)));
        [ apply
           trans_eq
            with
              (Qhomographic_sign a b c d (dL p)
                 H_Qhomographic_sg_denom_nonzero);
           assumption || symmetry  in |- *; assumption
        | elim (sg_tuple_equal 1 na nb nc nd np (-1) a b c d (dL p) H6);
           intros H7 H8; discriminate H7 ]
     | generalize
        (Qhomographic_sign_dL_10 a b c d (dL p) p
           (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
           H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2);
        intro;
        apply
         (sg_pos_2 (a + b)%Z b (c + d)%Z d p
            (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na
            nb nc nd np);
        apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption ].
 
 case (Z_zerop (Z.sgn (a + b))); intro Hab.  
  apply False_rec;
   generalize
    (sg_One_2 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab); intro;
   assert
    (H2 : (1%Z, (na, (nb, (nc, nd)), np)) = (0%Z, (a, (b, (c, d)), One)));
   [ apply
      trans_eq
       with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption
   | elim (sg_tuple_equal 1 na nb nc nd np 0 a b c d One H2); intros H3 H4;
      discriminate H3 ].
 
  case (Z.eq_dec (Z.sgn (a + b)) (Z.sgn (c + d))); intro Habcd.  
   generalize
    (sg_One_3 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro;
    assert
     (H2 : (1%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal 1 na nb nc nd np 1 a b c d One H2);
       intros _ ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; right; reflexivity ].

   generalize
    (sg_One_4 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro; apply False_rec;
    assert
     (H2 : (1%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal 1 na nb nc nd np (-1) a b c d One H2);
       intro H_discrim; discriminate H_discrim ].
Qed.

Lemma sg_neg_1 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p)
   (na nb nc nd : Z) (np : Qpositive),
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((-1)%Z, (na, (nb, (nc, nd)), np)) ->
 {(0 < na + nb)%Z /\ (nc + nd < 0)%Z} + {(na + nb < 0)%Z /\ (0 < nc + nd)%Z}.
Proof.
 fix sg_neg_1 5.
 intros a b c d p H_Qhomographic_sg_denom_nonzero na nb nc nd np H_sg.
 set (o1 := outside_interval a b) in *.
 set (o2 := outside_interval c d) in *.
 destruct p as [p| p| ].
  
 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_nR_1 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (nR p)) Hb Hd); intro;
    assert
     (H6 :
      ((-1)%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a * Z.sgn c) a b c d 
          (nR p) H6); intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; repeat rewrite Zplus_0_r; apply Zsgn_17; 
       rewrite Zsgn_15; symmetry  in |- *; assumption ].
  
   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_nR_2 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; right; 
        split; [ apply Zsgn_10; symmetry  in |- * | apply Zsgn_19 ];
        assumption ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_nR_3 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn a) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; left; 
         split;
         [ apply Zsgn_9; symmetry  in |- *; apply Z.opp_inj | apply Zsgn_20 ];
         assumption ].
 
     generalize
      (Qhomographic_sign_nR_4 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_neg_1 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_nR_5 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn c) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; left; 
        split; [ apply Zsgn_19 | apply Zsgn_10; symmetry  in |- * ];
        assumption ].
    
    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_nR_6 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn c) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; right; 
         split;
         [ apply Zsgn_20 | apply Zsgn_9; symmetry  in |- *; apply Z.opp_inj ];
         assumption ].
 
     generalize
      (Qhomographic_sign_nR_7 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_neg_1 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1.
    generalize
     (Qhomographic_sign_nR_8 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd H_inside_1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np 1 a b c d (nR p) H6);
        intros hl H_rest; discriminate hl ].

    case (inside_interval_2_dec_inf o1 o2); intro H_inside_2.
      generalize
       (Qhomographic_sign_nR_9 a b c d (nR p) p
          H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd
          H_inside_1 H_inside_2); intro;
       assert
        (H6 :
         ((-1)%Z, (na, (nb, (nc, nd)), np)) =
         ((-1)%Z, (a, (b, (c, d)), nR p)));
       [ apply
          trans_eq
           with
             (Qhomographic_sign a b c d (nR p)
                H_Qhomographic_sg_denom_nonzero);
          assumption || symmetry  in |- *; assumption
       | elim (sg_tuple_equal (-1) na nb nc nd np (-1) a b c d (nR p) H6);
          intros _ ((H8, (H9, (H10, H11))), H12);
          repeat match goal with
                 | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                 end; case (inside_interval_2_inf _ _ H_inside_2);
          intros (Ho1, Ho2);
          [ left; split; [ apply Zsgn_19 | apply Zsgn_20 ]
          | right; split; [ apply Zsgn_20 | apply Zsgn_19 ] ]; 
          assumption ].

      generalize
       (Qhomographic_sign_nR_10 a b c d (nR p) p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
          H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2); 
       intro;
       apply
        (sg_neg_1 a (a + b)%Z c (c + d)%Z p
           (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na
           nb nc nd np);
       apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption.

 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_dL_1 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (dL p)) Hb Hd); intro;
    assert
     (H6 :
      ((-1)%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a * Z.sgn c) a b c d 
          (dL p) H6); intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; repeat rewrite Zplus_0_r; apply Zsgn_17; 
       rewrite Zsgn_15; symmetry  in |- *; assumption ].
  
   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_dL_2 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; right; 
        split; [ apply Zsgn_10; symmetry  in |- * | apply Zsgn_19 ];
        assumption ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_dL_3 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn a) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; left; 
         split;
         [ apply Zsgn_9; symmetry  in |- *; apply Z.opp_inj | apply Zsgn_20 ];
         assumption ].
 
     generalize
      (Qhomographic_sign_dL_4 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_neg_1 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_dL_5 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn c) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end; repeat rewrite Zplus_0_r; left; 
        split; [ apply Zsgn_19 | apply Zsgn_10; symmetry  in |- * ];
        assumption ].
    
    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_dL_6 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn c) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end; repeat rewrite Zplus_0_r; right; 
         split;
         [ apply Zsgn_20 | apply Zsgn_9; symmetry  in |- *; apply Z.opp_inj ];
         assumption ].
 
     generalize
      (Qhomographic_sign_dL_7 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_neg_1 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1.
    generalize
     (Qhomographic_sign_dL_8 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd H_inside_1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np 1 a b c d (dL p) H6);
        intros hl H_rest; discriminate hl ].

    case (inside_interval_2_dec_inf o1 o2); intro H_inside_2.
      generalize
       (Qhomographic_sign_dL_9 a b c d (dL p) p
          H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd
          H_inside_1 H_inside_2); intro;
       assert
        (H6 :
         ((-1)%Z, (na, (nb, (nc, nd)), np)) =
         ((-1)%Z, (a, (b, (c, d)), dL p)));
       [ apply
          trans_eq
           with
             (Qhomographic_sign a b c d (dL p)
                H_Qhomographic_sg_denom_nonzero);
          assumption || symmetry  in |- *; assumption
       | elim (sg_tuple_equal (-1) na nb nc nd np (-1) a b c d (dL p) H6);
          intros _ ((H8, (H9, (H10, H11))), H12);
          repeat match goal with
                 | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                 end; case (inside_interval_2_inf _ _ H_inside_2);
          intros (Ho1, Ho2);
          [ left; split; [ apply Zsgn_19 | apply Zsgn_20 ]
          | right; split; [ apply Zsgn_20 | apply Zsgn_19 ] ]; 
          assumption ].

      generalize
       (Qhomographic_sign_dL_10 a b c d (dL p) p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
          H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2); 
       intro;
       apply
        (sg_neg_1 (a + b)%Z b (c + d)%Z d p
           (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na
           nb nc nd np);
       apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption.

 case (Z_zerop (Z.sgn (a + b))); intro Hab.  
  apply False_rec;
   generalize
    (sg_One_2 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab); intro;
   assert
    (H2 : ((-1)%Z, (na, (nb, (nc, nd)), np)) = (0%Z, (a, (b, (c, d)), One)));
   [ apply
      trans_eq
       with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption
   | elim (sg_tuple_equal (-1) na nb nc nd np 0 a b c d One H2); intros H3 H4;
      discriminate H3 ].
 
  case (Z.eq_dec (Z.sgn (a + b)) (Z.sgn (c + d))); intro Habcd.  
   generalize
    (sg_One_3 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro;
    assert
     (H2 : ((-1)%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal (-1) na nb nc nd np 1 a b c d One H2);
       intros H3 H4; discriminate H3 ].

   generalize
    (sg_One_4 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro;
    assert
     (H2 :
      ((-1)%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal (-1) na nb nc nd np (-1) a b c d One H2);
       intros _ ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end ].
   case (not_Zeq_inf (Z.sgn (a + b)) 0 Hab); intro Hab';
    [ right; split; [ apply Zsgn_11; assumption | apply Zsgn_12 ];
       generalize (Zsgn_1 (c + d)); intros [[Hcd| Hcd]| Hcd];
       [ apply False_ind;
          apply (Qhomographic_signok_1 c d H_Qhomographic_sg_denom_nonzero);
          apply Zsgn_2
       | rewrite Hcd; constructor
       | apply False_ind; apply Habcd; rewrite Hcd; apply Zsgn_8;
          apply Zsgn_11 ]; assumption
    | left; split; [ apply Zsgn_12; assumption | apply Zsgn_11 ];
       generalize (Zsgn_1 (c + d)); intros [[Hcd| Hcd]| Hcd];
       [ apply False_ind;
          apply (Qhomographic_signok_1 c d H_Qhomographic_sg_denom_nonzero);
          apply Zsgn_2
       | apply False_ind; apply Habcd; rewrite Hcd; apply Zsgn_7;
          apply Z.lt_gt; apply Zsgn_12
       | rewrite Hcd; constructor ]; assumption ].
Qed.

Lemma sg_neg_2 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p)
   (na nb nc nd : Z) (np : Qpositive),
 Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 ((-1)%Z, (na, (nb, (nc, nd)), np)) ->
 {(0 <= na)%Z /\ (0 <= nb)%Z /\ (nc <= 0)%Z /\ (nd <= 0)%Z} +
 {(na <= 0)%Z /\ (nb <= 0)%Z /\ (0 <= nc)%Z /\ (0 <= nd)%Z} + 
 {np = One}.
Proof.
 fix sg_neg_2 5.
 intros a b c d p H_Qhomographic_sg_denom_nonzero na nb nc nd np H_sg.
 set (o1 := outside_interval a b) in *.
 set (o2 := outside_interval c d) in *.
 destruct p as [p| p| ].
  
 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_nR_1 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (nR p)) Hb Hd); intro;
    assert
     (H6 :
      ((-1)%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a * Z.sgn c) a b c d 
          (nR p) H6); intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end ]; left; rewrite <- Zsgn_15 in H_ac;
    case (Zsgn_17 _ _ (sym_eq H_ac)); intros (Ha, Hc); 
    [ left | right ]; repeat split;
    apply Z.le_refl || (apply Zlt_le_weak; assumption).

   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_nR_2 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end ]; left; right; repeat split; first
     [ apply Z.le_refl
     | match goal with
       |  |- (0 <= ?X1)%Z =>
           apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
       |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
       end; apply sym_eq; assumption
     | unfold o2 in Ho2;
        match goal with
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
            apply Zsgn_21 with X2
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
            apply Zsgn_23 with X1
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
            apply Zsgn_22 with X2
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
            apply Zsgn_24 with X1
        end; assumption ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_nR_3 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn a) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end ]; left; left; repeat split; first
      [ apply Z.le_refl
      | match goal with
        |  |- (0 <= ?X1)%Z =>
            apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
        |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
        end; apply sym_eq; assumption
      | unfold o2 in Ho2, Ho2';
         match goal with
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X1)%Z =>
             apply Zsgn_21 with X2
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X2)%Z =>
             apply Zsgn_23 with X1
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X1 <= 0)%Z =>
             apply Zsgn_22 with X2
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X2 <= 0)%Z => apply Zsgn_24 with X1
         end; assumption ].

     generalize
      (Qhomographic_sign_nR_4 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_neg_2 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_nR_5 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn c) a b c d (nR p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end ]; left; left; repeat split; first
     [ apply Z.le_refl
     | match goal with
       |  |- (0 <= ?X1)%Z =>
           apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
       |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
       end; apply sym_eq; assumption
     | unfold o1 in Ho1;
        match goal with
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
            apply Zsgn_21 with X2
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
            apply Zsgn_23 with X1
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
            apply Zsgn_22 with X2
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
            apply Zsgn_24 with X1
        end; assumption ].

    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_nR_6 a b c d (nR p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), nR p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn c) a b c d (nR p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end ]; left; right; repeat split; first
      [ apply Z.le_refl
      | match goal with
        |  |- (0 <= ?X1)%Z =>
            apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
        |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
        end; apply sym_eq; assumption
      | unfold o1 in Ho1, Ho1';
         match goal with
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X1)%Z =>
             apply Zsgn_21 with X2
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X2)%Z =>
             apply Zsgn_23 with X1
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X1 <= 0)%Z =>
             apply Zsgn_22 with X2
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X2 <= 0)%Z => apply Zsgn_24 with X1
         end; assumption ].

     generalize
      (Qhomographic_sign_nR_7 a b c d (nR p) p
         (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_neg_2 a (a + b)%Z c (c + d)%Z p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1.
    generalize
     (Qhomographic_sign_nR_8 a b c d (nR p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (nR p)) Hb Hd H_inside_1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), nR p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np 1 a b c d (nR p) H6);
        intros hl ((H8, (H9, (H10, H11))), H12); discriminate hl ].

    case (inside_interval_2_dec_inf o1 o2); intro H_inside_2.

      generalize
       (Qhomographic_sign_nR_9 a b c d (nR p) p
          H_Qhomographic_sg_denom_nonzero (refl_equal (nR p)) Hb Hd
          H_inside_1 H_inside_2); intro;
       assert
        (H6 :
         ((-1)%Z, (na, (nb, (nc, nd)), np)) =
         ((-1)%Z, (a, (b, (c, d)), nR p)));
       [ apply
          trans_eq
           with
             (Qhomographic_sign a b c d (nR p)
                H_Qhomographic_sg_denom_nonzero);
          assumption || symmetry  in |- *; assumption
       | elim (sg_tuple_equal (-1) na nb nc nd np (-1) a b c d (nR p) H6);
          intros _ ((H8, (H9, (H10, H11))), H12);
          repeat match goal with
                 | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                 end ].
      left; case (inside_interval_2_inf _ _ H_inside_2); intros (Ho1, Ho2);
       [ left | right ]; repeat split; unfold o1 in Ho1; 
       unfold o2 in Ho2;
       match goal with
       | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
           apply Zsgn_21 with X2
       | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
           apply Zsgn_23 with X1
       | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
           apply Zsgn_22 with X2
       | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
           apply Zsgn_24 with X1
       end; assumption.

      generalize
       (Qhomographic_sign_nR_10 a b c d (nR p) p
          (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero)
          H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2); 
       intro;
       apply
        (sg_neg_2 a (a + b)%Z c (c + d)%Z p
           (Qhomographic_signok_2 c d p H_Qhomographic_sg_denom_nonzero) na
           nb nc nd np);
       apply
        trans_eq
         with
           (Qhomographic_sign a b c d (nR p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption.

 case (Z_zerop b); intro Hb.
  case (Z_zerop d); intro Hd.
   generalize
    (Qhomographic_sign_dL_1 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
       (refl_equal (dL p)) Hb Hd); intro;
    assert
     (H6 :
      ((-1)%Z, (na, (nb, (nc, nd)), np)) =
      ((Z.sgn a * Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
    [ apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim
       (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a * Z.sgn c) a b c d 
          (dL p) H6); intros H_ac ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end ]; left; rewrite <- Zsgn_15 in H_ac;
    case (Zsgn_17 _ _ (sym_eq H_ac)); intros (Ha, Hc); 
    [ left | right ]; repeat split;
    apply Z.le_refl || (apply Zlt_le_weak; assumption).

   case (Z_lt_dec 0 o2); intros Ho2.
    generalize
     (Qhomographic_sign_dL_2 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho2); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn a, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn a) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end ]; left; right; repeat split; first
     [ apply Z.le_refl
     | match goal with
       |  |- (0 <= ?X1)%Z =>
           apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
       |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
       end; apply sym_eq; assumption
     | unfold o2 in Ho2;
        match goal with
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
            apply Zsgn_21 with X2
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
            apply Zsgn_23 with X1
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
            apply Zsgn_22 with X2
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
            apply Zsgn_24 with X1
        end; assumption ].
    
    case (Z_lt_dec o2 0); intros Ho2'.
     generalize
      (Qhomographic_sign_dL_3 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho2 Ho2');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn a)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn a) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end ]; left; left; repeat split; first
      [ apply Z.le_refl
      | match goal with
        |  |- (0 <= ?X1)%Z =>
            apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
        |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
        end; apply sym_eq; assumption
      | unfold o2 in Ho2, Ho2';
         match goal with
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X1)%Z =>
             apply Zsgn_21 with X2
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X2)%Z =>
             apply Zsgn_23 with X1
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X1 <= 0)%Z =>
             apply Zsgn_22 with X2
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X2 <= 0)%Z => apply Zsgn_24 with X1
         end; assumption ].

     generalize
      (Qhomographic_sign_dL_4 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho2 Ho2'); 
      intro;
      apply
       (sg_neg_2 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (Z_zerop d); intro Hd. 
   case (Z_lt_dec 0 o1); intro Ho1. 
    generalize
     (Qhomographic_sign_dL_5 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd Ho1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (Z.sgn c, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np (Z.sgn c) a b c d (dL p) H6);
        intros H_a ((H8, (H9, (H10, H11))), H12);
        repeat match goal with
               | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
               end ]; left; left; repeat split; first
     [ apply Z.le_refl
     | match goal with
       |  |- (0 <= ?X1)%Z =>
           apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
       |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
       end; apply sym_eq; assumption
     | unfold o1 in Ho1;
        match goal with
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
            apply Zsgn_21 with X2
        | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
            apply Zsgn_23 with X1
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
            apply Zsgn_22 with X2
        | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
            apply Zsgn_24 with X1
        end; assumption ].

    case (Z_lt_dec o1 0); intros Ho1'.
     generalize
      (Qhomographic_sign_dL_6 a b c d (dL p) p
         H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd Ho1 Ho1');
      intro;
      assert
       (H6 :
        ((-1)%Z, (na, (nb, (nc, nd)), np)) =
        ((- Z.sgn c)%Z, (a, (b, (c, d)), dL p)));
      [ apply
         trans_eq
          with
            (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
         assumption || symmetry  in |- *; assumption
      | elim
         (sg_tuple_equal (-1) na nb nc nd np (- Z.sgn c) a b c d (dL p) H6);
         intros H_a ((H8, (H9, (H10, H11))), H12);
         repeat match goal with
                | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                end ]; left; right; repeat split; first
      [ apply Z.le_refl
      | match goal with
        |  |- (0 <= ?X1)%Z =>
            apply Zlt_le_weak; apply Zsgn_9; apply Z.opp_inj
        |  |- (?X1 <= 0)%Z => apply Zlt_le_weak; apply Zsgn_10
        end; apply sym_eq; assumption
      | unfold o1 in Ho1, Ho1';
         match goal with
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X1)%Z =>
             apply Zsgn_21 with X2
         | id1:(0 < outside_interval ?X1 ?X2)%Z |- 
         (0 <= ?X2)%Z =>
             apply Zsgn_23 with X1
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X1 <= 0)%Z =>
             apply Zsgn_22 with X2
         | id1:(outside_interval ?X1 ?X2 < 0)%Z |- 
         (?X2 <= 0)%Z => apply Zsgn_24 with X1
         end; assumption ].

     generalize
      (Qhomographic_sign_dL_7 a b c d (dL p) p
         (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
         H_Qhomographic_sg_denom_nonzero Hb Hd Ho1 Ho1'); 
      intro;
      apply
       (sg_neg_2 (a + b)%Z b (c + d)%Z d p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na nb
          nc nd np);
      apply
       trans_eq
        with
          (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption.

  case (inside_interval_1_dec_inf o1 o2); intro H_inside_1.
    generalize
     (Qhomographic_sign_dL_8 a b c d (dL p) p H_Qhomographic_sg_denom_nonzero
        (refl_equal (dL p)) Hb Hd H_inside_1); intro;
     assert
      (H6 :
       ((-1)%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), dL p)));
     [ apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
        assumption || symmetry  in |- *; assumption
     | elim (sg_tuple_equal (-1) na nb nc nd np 1 a b c d (dL p) H6);
        intros hl ((H8, (H9, (H10, H11))), H12); discriminate hl ].

    case (inside_interval_2_dec_inf o1 o2); intro H_inside_2.

      generalize
       (Qhomographic_sign_dL_9 a b c d (dL p) p
          H_Qhomographic_sg_denom_nonzero (refl_equal (dL p)) Hb Hd
          H_inside_1 H_inside_2); intro;
       assert
        (H6 :
         ((-1)%Z, (na, (nb, (nc, nd)), np)) =
         ((-1)%Z, (a, (b, (c, d)), dL p)));
       [ apply
          trans_eq
           with
             (Qhomographic_sign a b c d (dL p)
                H_Qhomographic_sg_denom_nonzero);
          assumption || symmetry  in |- *; assumption
       | elim (sg_tuple_equal (-1) na nb nc nd np (-1) a b c d (dL p) H6);
          intros _ ((H8, (H9, (H10, H11))), H12);
          repeat match goal with
                 | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
                 end ].
      left; case (inside_interval_2_inf _ _ H_inside_2); intros (Ho1, Ho2);
       [ left | right ]; repeat split; unfold o1 in Ho1; 
       unfold o2 in Ho2;
       match goal with
       | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X1)%Z =>
           apply Zsgn_21 with X2
       | id1:(0 < outside_interval ?X1 ?X2)%Z |- (0 <= ?X2)%Z =>
           apply Zsgn_23 with X1
       | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X1 <= 0)%Z =>
           apply Zsgn_22 with X2
       | id1:(outside_interval ?X1 ?X2 < 0)%Z |- (?X2 <= 0)%Z =>
           apply Zsgn_24 with X1
       end; assumption.

      generalize
       (Qhomographic_sign_dL_10 a b c d (dL p) p
          (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero)
          H_Qhomographic_sg_denom_nonzero Hb Hd H_inside_1 H_inside_2); 
       intro;
       apply
        (sg_neg_2 (a + b)%Z b (c + d)%Z d p
           (Qhomographic_signok_3 c d p H_Qhomographic_sg_denom_nonzero) na
           nb nc nd np);
       apply
        trans_eq
         with
           (Qhomographic_sign a b c d (dL p) H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption.

 case (Z_zerop (Z.sgn (a + b))); intro Hab.  
  apply False_rec;
   generalize
    (sg_One_2 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab); intro;
   assert
    (H2 : ((-1)%Z, (na, (nb, (nc, nd)), np)) = (0%Z, (a, (b, (c, d)), One)));
   [ apply
      trans_eq
       with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
      assumption || symmetry  in |- *; assumption
   | elim (sg_tuple_equal (-1) na nb nc nd np 0 a b c d One H2); intros H3 H4;
      discriminate H3 ].
 
  case (Z.eq_dec (Z.sgn (a + b)) (Z.sgn (c + d))); intro Habcd.
   generalize
    (sg_One_3 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro; apply False_rec;
    assert
     (H2 : ((-1)%Z, (na, (nb, (nc, nd)), np)) = (1%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal (-1) na nb nc nd np 1 a b c d One H2);
       intro H_discrim; discriminate H_discrim ].

   generalize
    (sg_One_4 a b c d One H_Qhomographic_sg_denom_nonzero 
       (refl_equal One) Hab Habcd); intro;
    assert
     (H2 :
      ((-1)%Z, (na, (nb, (nc, nd)), np)) = ((-1)%Z, (a, (b, (c, d)), One)));
    [ apply
       trans_eq
        with (Qhomographic_sign a b c d One H_Qhomographic_sg_denom_nonzero);
       assumption || symmetry  in |- *; assumption
    | elim (sg_tuple_equal (-1) na nb nc nd np (-1) a b c d One H2);
       intros _ ((H8, (H9, (H10, H11))), H12);
       repeat match goal with
              | id1:(?X1 = ?X2) |- ?X3 => rewrite id1
              end; right; reflexivity ].
Qed.
