
Require Export Qquadratic_sign_properties.
(* Qquadratic_sign_properties:
Require Import ZArithRing.
Require Export Qhomographic_sign.
Require Export Qquadratic_sign.
Require Export Qhomographic_sign_properties.

Definition same_ratio (a b c d e f g h : Z) :=
  (a * f)%Z = (b * e)%Z /\
  (b * g)%Z = (c * f)%Z /\
  (c * h)%Z = (d * g)%Z /\
  (a * g)%Z = (c * e)%Z /\ (a * h)%Z = (d * e)%Z /\ (b * h)%Z = (d * f)%Z.

Lemma same_ratio_dec_inf :
 forall a b c d e f g h : Z,
 {same_ratio a b c d e f g h} + {~ same_ratio a b c d e f g h}.

Lemma Qquadratic_sign_tuple_equal :
 forall (l1 a1 b1 c1 d1 e1 f1 g1 h1 : Z) (x1 y1 : Qpositive)
   (l2 a2 b2 c2 d2 e2 f2 g2 h2 : Z) (x2 y2 : Qpositive),
 (l1, (a1, (b1, (c1, d1)), (e1, (f1, (g1, h1))), (x1, y1))) =
 (l2, (a2, (b2, (c2, d2)), (e2, (f2, (g2, h2))), (x2, y2))) ->
 l1 = l2 /\
 (a1 = a2 /\
  b1 = b2 /\ c1 = c2 /\ d1 = d2 /\ e1 = e2 /\ f1 = f2 /\ g1 = g2 /\ h1 = h2) /\
 x1 = x2 /\ y1 = y2.

Lemma outside_square_1 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 < a + b + c + d)%Z.

Lemma outside_square_2 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (a + b + c + d < 0)%Z.

Lemma outside_square_3 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= a)%Z.

Lemma outside_square_4 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= b)%Z.

Lemma outside_square_5 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= c)%Z.

Lemma outside_square_6 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= d)%Z.

Lemma outside_square_7 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (a <= 0)%Z.

Lemma outside_square_8 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (b <= 0)%Z.

Lemma outside_square_9 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (c <= 0)%Z.

Lemma outside_square_10 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (d <= 0)%Z.

Lemma inside_square_1_inf :
 forall o1 o2 : Z,
 inside_square_1 o1 o2 ->
 {(2 < o1)%Z /\ (2 < o2)%Z} + {(o1 < -2)%Z /\ (o2 < -2)%Z}.

Lemma inside_square_2_inf :
 forall o1 o2 : Z,
 inside_square_2 o1 o2 ->
 {(2 < o1)%Z /\ (o2 < -2)%Z} + {(o1 < -2)%Z /\ (2 < o2)%Z}.

Lemma Qquadratic_sign_pos_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (1%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 < na + nb + nc + nd)%Z /\ (0 < ne + nf + ng + nh)%Z} +
 {(na + nb + nc + nd < 0)%Z /\ (ne + nf + ng + nh < 0)%Z}.

Lemma Qquadratic_sign_pos_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (1%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 <= na)%Z /\
  (0 <= nb)%Z /\
  (0 <= nc)%Z /\
  (0 <= nd)%Z /\ (0 <= ne)%Z /\ (0 <= nf)%Z /\ (0 <= ng)%Z /\ (0 <= nh)%Z} +
 {(na <= 0)%Z /\
  (nb <= 0)%Z /\
  (nc <= 0)%Z /\
  (nd <= 0)%Z /\ (ne <= 0)%Z /\ (nf <= 0)%Z /\ (ng <= 0)%Z /\ (nh <= 0)%Z} +
 {np1 = One /\
  (0 <= na + nc)%Z /\
  (0 <= nb + nd)%Z /\ (0 <= ne + ng)%Z /\ (0 <= nf + nh)%Z} +
 {np1 = One /\
  (na + nc <= 0)%Z /\
  (nb + nd <= 0)%Z /\ (ne + ng <= 0)%Z /\ (nf + nh <= 0)%Z} +
 {np1 = One /\ np2 = One} +
 {np1 <> One /\
  np2 = One /\
  (0 <= na + nb)%Z /\
  (0 <= nc + nd)%Z /\ (0 <= ne + nf)%Z /\ (0 <= ng + nh)%Z} +
 {np1 <> One /\
  np2 = One /\
  (na + nb <= 0)%Z /\
  (nc + nd <= 0)%Z /\ (ne + nf <= 0)%Z /\ (ng + nh <= 0)%Z}.

Lemma Qquadratic_sign_neg_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((-1)%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 < na + nb + nc + nd)%Z /\ (ne + nf + ng + nh < 0)%Z} +
 {(na + nb + nc + nd < 0 < ne + nf + ng + nh)%Z}.

Lemma Qquadratic_sign_neg_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((-1)%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 <= na)%Z /\
  (0 <= nb)%Z /\
  (0 <= nc)%Z /\
  (0 <= nd)%Z /\ (ne <= 0)%Z /\ (nf <= 0)%Z /\ (ng <= 0)%Z /\ (nh <= 0)%Z} +
 {(na <= 0)%Z /\
  (nb <= 0)%Z /\
  (nc <= 0)%Z /\
  (nd <= 0)%Z /\ (0 <= ne)%Z /\ (0 <= nf)%Z /\ (0 <= ng)%Z /\ (0 <= nh)%Z} +
 {np1 = One /\
  (0 <= na + nc)%Z /\
  (0 <= nb + nd)%Z /\ (ne + ng <= 0)%Z /\ (nf + nh <= 0)%Z} +
 {np1 = One /\
  (na + nc <= 0)%Z /\
  (nb + nd <= 0)%Z /\ (0 <= ne + ng)%Z /\ (0 <= nf + nh)%Z} +
 {np1 = One /\ np2 = One} +
 {np1 <> One /\
  np2 = One /\
  (0 <= na + nb)%Z /\
  (0 <= nc + nd)%Z /\ (ne + nf <= 0)%Z /\ (ng + nh <= 0)%Z} +
 {np1 <> One /\
  np2 = One /\
  (na + nb <= 0)%Z /\
  (nc + nd <= 0)%Z /\ (0 <= ne + nf)%Z /\ (0 <= ng + nh)%Z}. *)
Require Export Qquadratic_Qpositive_to_Qpositive.
(* Qquadratic_Qpositive_to_Qpositive:
Require Import Merge_Order.
Require Export Qhomographic_Qpositive_to_Qpositive.

Definition quadratic_top_more (a b c d e f g h : Z) :=
  (e <= a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h < d)%Z \/
  (e <= a)%Z /\ (f <= b)%Z /\ (g < c)%Z /\ (h <= d)%Z \/
  (e <= a)%Z /\ (f < b)%Z /\ (g <= c)%Z /\ (h <= d)%Z \/
  (e < a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h <= d)%Z.

Lemma octet_leq_inf :
 forall a b c d e f g h : Z,
 {(e <= a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h <= d)%Z} +
 {~ ((e <= a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h <= d)%Z)}.

Lemma quadratic_top_more_informative :
 forall a b c d e f g h : Z,
 {quadratic_top_more a b c d e f g h} +
 {~ quadratic_top_more a b c d e f g h}.

Lemma quadratic_top_more_1 :
 forall a b c d e f g h : Z,
 quadratic_top_more a b c d e f g h ->
 (0 < a - e + (b - f) + (c - g) + (d - h))%Z.

Lemma quadratic_top_more_2 :
 forall a b c d e f g h : Z,
 quadratic_top_more a b c d e f g h -> (e + f + g + h < a + b + c + d)%Z.

Lemma quadratic_top_more_3 :
 forall a b c d e f g h : Z,
 (0 < e + f + g + h)%Z ->
 (a - e + (b - f) + (c - g) + (d - h) < a + b + c + d)%Z.

Lemma quadratic_top_more_4_1 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (e <= a)%Z.

Lemma quadratic_top_more_4_2 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (f <= b)%Z.

Lemma quadratic_top_more_4_3 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (g <= c)%Z.

Lemma quadratic_top_more_4_4 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (h <= d)%Z.

Lemma quadratic_top_more_5 :
 forall a b c d e f g h : Z,
 (0 < e + f + g + h)%Z ->
 (a - e + (b - f) + (c - g) + (d - h) + e + f + g + h <
  a + b + c + d + e + f + g + h)%Z.

Lemma quadratic_top_more_5' :
 forall a b c d e f g h : Z,
 (0 < a + b + c + d)%Z ->
 (a + b + c + d + (e - a) + (f - b) + (g - c) + (h - d) <
  a + b + c + d + e + f + g + h)%Z.

Inductive quadraticAcc :
Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Prop :=
  | quadraticacc0 :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 = One ->
      homographicAcc (a + c) (b + d) (e + g) (f + h) p2 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc0' :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 <> One ->
      p2 = One ->
      homographicAcc (a + b) (c + d) (e + f) (g + h) p1 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc1 :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 <> One ->
      p2 <> One ->
      quadratic_top_more a b c d e f g h ->
      quadraticAcc (a - e)%Z (b - f)%Z (c - g)%Z (d - h)%Z e f g h p1 p2 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc2 :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 <> One ->
      p2 <> One ->
      ~ quadratic_top_more a b c d e f g h ->
      quadratic_top_more e f g h a b c d ->
      quadraticAcc a b c d (e - a)%Z (f - b)%Z (g - c)%Z (h - d)%Z p1 p2 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc3_II :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 
        (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys ->
      quadraticAcc a b c d e f g h (nR xs) (nR ys)
  | quadraticacc3_IO :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc (a + b)%Z b (a + b + c + d)%Z (b + d)%Z 
        (e + f)%Z f (e + f + g + h)%Z (f + h)%Z xs ys ->
      quadraticAcc a b c d e f g h (nR xs) (dL ys)
  | quadraticacc3_OI :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc (a + c)%Z (a + b + c + d)%Z c (c + d)%Z 
        (e + g)%Z (e + f + g + h)%Z g (g + h)%Z xs ys ->
      quadraticAcc a b c d e f g h (dL xs) (nR ys)
  | quadraticacc3_OO :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc (a + b + c + d)%Z (b + d)%Z (c + d)%Z d 
        (e + f + g + h)%Z (f + h)%Z (g + h)%Z h xs ys ->
      quadraticAcc a b c d e f g h (dL xs) (dL ys).

Lemma quadraticacc_0 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 = One -> homographicAcc (a + c) (b + d) (e + g) (f + h) p2.

Lemma quadraticacc_0' :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 <> One -> p2 = One -> homographicAcc (a + b) (c + d) (e + f) (g + h) p1.

Lemma quadraticacc_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 <> One ->
 p2 <> One ->
 quadratic_top_more a b c d e f g h ->
 quadraticAcc (a - e) (b - f) (c - g) (d - h) e f g h p1 p2.

Lemma quadraticacc_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 <> One ->
 p2 <> One ->
 ~ quadratic_top_more a b c d e f g h ->
 quadratic_top_more e f g h a b c d ->
 quadraticAcc a b c d (e - a) (f - b) (g - c) (h - d) p1 p2.

Lemma quadraticacc_3_II :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = nR xs ->
 p2 = nR ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc a (a + b) (a + c) (a + b + c + d) e (e + f) 
   (e + g) (e + f + g + h) xs ys.

Lemma quadraticacc_3_IO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = nR xs ->
 p2 = dL ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc (a + b) b (a + b + c + d) (b + d) (e + f) f 
   (e + f + g + h) (f + h) xs ys.

Lemma quadraticacc_3_OI :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = dL xs ->
 p2 = nR ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc (a + c) (a + b + c + d) c (c + d) (e + g) 
   (e + f + g + h) g (g + h) xs ys.

Lemma quadraticacc_3_OO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = dL xs ->
 p2 = dL ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc (a + b + c + d) (b + d) (c + d) d (e + f + g + h) 
   (f + h) (g + h) h xs ys.

Fixpoint Qquadratic_Qpositive_to_Qpositive (a b c d e f g h : Z)
 (p1 p2 : Qpositive) (hyp : quadraticAcc a b c d e f g h p1 p2) {struct hyp} 
   : Qpositive :=
  match Qpositive_dec_One p1 with
  | left Hp1 =>
      Qhomographic_Qpositive_to_Qpositive (a + c) (b + d) 
        (e + g) (f + h) p2 (quadraticacc_0 a b c d e f g h p1 p2 hyp Hp1)
  | right Hp1 =>
      match Qpositive_dec_One p2 with
      | left Hp2 =>
          Qhomographic_Qpositive_to_Qpositive (a + b) 
            (c + d) (e + f) (g + h) p1
            (quadraticacc_0' a b c d e f g h p1 p2 hyp Hp1 Hp2)
      | right Hp2 =>
          match quadratic_top_more_informative a b c d e f g h with
          | left Habcdefgh =>
              nR
                (Qquadratic_Qpositive_to_Qpositive 
                   (a - e)%Z (b - f)%Z (c - g)%Z (d - h)%Z e f g h p1 p2
                   (quadraticacc_1 a b c d e f g h p1 p2 hyp Hp1 Hp2
                      Habcdefgh))
          | right Habcdefgh =>
              match quadratic_top_more_informative e f g h a b c d with
              | left Hefghabcd =>
                  dL
                    (Qquadratic_Qpositive_to_Qpositive a b c d 
                       (e - a)%Z (f - b)%Z (g - c)%Z 
                       (h - d)%Z p1 p2
                       (quadraticacc_2 a b c d e f g h p1 p2 hyp Hp1 Hp2
                          Habcdefgh Hefghabcd))
              | right Hefghabcd =>
                  match p1 as q return (p1 = q -> Qpositive) with
                  | nR x =>
                      match
                        p2 as q
                        return
                          (p2 = q ->
                           forall q0 : Qpositive, p1 = nR q0 -> Qpositive)
                      with
                      | nR ys =>
                          fun (Hys : p2 = nR ys) (xs : Qpositive)
                            (Hxs : p1 = nR xs) =>
                          Qquadratic_Qpositive_to_Qpositive a 
                            (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 
                            (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys
                            (quadraticacc_3_II a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | dL ys =>
                          fun (Hys : p2 = dL ys) (xs : Qpositive)
                            (Hxs : p1 = nR xs) =>
                          Qquadratic_Qpositive_to_Qpositive 
                            (a + b)%Z b (a + b + c + d)%Z 
                            (b + d)%Z (e + f)%Z f (e + f + g + h)%Z 
                            (f + h)%Z xs ys
                            (quadraticacc_3_IO a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | One =>
                          fun Hp2_ : p2 = One =>
                          False_rec
                            (forall q : Qpositive, p1 = nR q -> Qpositive)
                            (False_ind False (Hp2 Hp2_))
                      end (refl_equal p2) x
                  | dL x =>
                      match
                        p2 as q
                        return
                          (p2 = q ->
                           forall q0 : Qpositive, p1 = dL q0 -> Qpositive)
                      with
                      | nR ys =>
                          fun (Hys : p2 = nR ys) (xs : Qpositive)
                            (Hxs : p1 = dL xs) =>
                          Qquadratic_Qpositive_to_Qpositive 
                            (a + c)%Z (a + b + c + d)%Z c 
                            (c + d)%Z (e + g)%Z (e + f + g + h)%Z g 
                            (g + h)%Z xs ys
                            (quadraticacc_3_OI a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | dL ys =>
                          fun (Hys : p2 = dL ys) (xs : Qpositive)
                            (Hxs : p1 = dL xs) =>
                          Qquadratic_Qpositive_to_Qpositive 
                            (a + b + c + d)%Z (b + d)%Z 
                            (c + d)%Z d (e + f + g + h)%Z 
                            (f + h)%Z (g + h)%Z h xs ys
                            (quadraticacc_3_OO a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | One =>
                          fun Hp2_ : p2 = One =>
                          False_rec
                            (forall q : Qpositive, p1 = dL q -> Qpositive)
                            (False_ind False (Hp2 Hp2_))
                      end (refl_equal p2) x
                  | One =>
                      fun Hp1_ : p1 = One =>
                      False_rec Qpositive (False_ind False (Hp1 Hp1_))
                  end (refl_equal p1)
              end
          end
      end
  end.

Definition octet_lt (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (a' b' c' d' e' f' g' h' : Z) (p1' p2' : Qpositive) : Prop :=
  bin_lt p1 p1' \/
  p1 = p1' /\
  (a + b + c + d + e + f + g + h < a' + b' + c' + d' + e' + f' + g' + h')%Z. 

Definition octointegral_lt (a b c d e f g h a' b' c' d' e' f' g' h' : Z) :=
  (a + b + c + d + e + f + g + h < a' + b' + c' + d' + e' + f' + g' + h')%Z.

Definition octointegral_eq (a b c d e f g h a' b' c' d' e' f' g' h' : Z) :=
  a = a' /\
  b = b' /\ c = c' /\ d = d' /\ e = e' /\ f = f' /\ g = g' /\ h = h'.

Record Z8 : Set := 
  {z8crr :> Z * Z * (Z * Z) * (Z * Z * (Z * Z));
   z8prf :
    (0 <= fst (fst (fst z8crr)))%Z /\
    (0 <= snd (fst (fst z8crr)))%Z /\
    (0 <= fst (snd (fst z8crr)))%Z /\
    (0 <= snd (snd (fst z8crr)))%Z /\
    (0 <= fst (fst (snd z8crr)))%Z /\
    (0 <= snd (fst (snd z8crr)))%Z /\
    (0 <= fst (snd (snd z8crr)))%Z /\ (0 <= snd (snd (snd z8crr)))%Z}.

Definition Z8_lt : Z8 -> Z8 -> Prop.

Definition Z8_eq : Z8 -> Z8 -> Prop.

Lemma Z8_lt_is_irreflexive : forall x : Z8, ~ Z8_lt x x.

Lemma Z8_lt_is_transitive :
 forall x y z : Z8, Z8_lt x y -> Z8_lt y z -> Z8_lt x z.

Lemma Z8_lt_is_order : is_order Z8 Z8_lt.

Lemma Z8_eq_is_reflexive : forall x : Z8, Z8_eq x x.

Lemma Z8_eq_is_symmetric : forall x y : Z8, Z8_eq x y -> Z8_eq y x.

Lemma Z8_eq_is_transitive :
 forall x y z : Z8, Z8_eq x y -> Z8_eq y z -> Z8_eq x z.

Lemma Z8_eq_is_equality : is_equality Z8 Z8_eq.

Lemma Z8_lt_is_wf : wf_ind Z8 Z8_lt.

Lemma Z8_lt_is_well_def_rht : is_well_def_rht Z8 Z8_lt Z8_eq.

Definition Z8_as_well_ordering :=
  Build_well_ordering Z8 Z8_lt Z8_eq Z8_lt_is_order Z8_eq_is_equality
    Z8_lt_is_wf Z8_lt_is_well_def_rht.

Definition Qpositive2 := (Qpositive * Qpositive)%type.

Definition bin2_lt (x y : Qpositive2) :=
  let (p1, p2) := x in let (p1', p2) := y in bin_lt p1 p1'.

Definition bin2_eq (x y : Qpositive2) :=
  let (p1, p2) := x in let (p1', p2) := y in p1 = p1'.

Lemma bin2_lt_is_irreflexive : forall x : Qpositive2, ~ bin2_lt x x.

Lemma bin2_lt_is_transitive :
 forall x y z : Qpositive2, bin2_lt x y -> bin2_lt y z -> bin2_lt x z.

Lemma bin2_lt_is_order : is_order Qpositive2 bin2_lt.

Lemma bin2_eq_is_reflexive : forall x : Qpositive2, bin2_eq x x.

Lemma bin2_eq_is_symmetric :
 forall x y : Qpositive2, bin2_eq x y -> bin2_eq y x.

Lemma bin2_eq_is_transitive :
 forall x y z : Qpositive2, bin2_eq x y -> bin2_eq y z -> bin2_eq x z.

Lemma bin2_eq_is_equality : is_equality Qpositive2 bin2_eq.

Lemma bin2_lt_is_wf : wf_ind Qpositive2 bin2_lt.

Lemma bin2_lt_is_well_def_rht : is_well_def_rht Qpositive2 bin2_lt bin2_eq.

Definition Qpositive2_as_well_ordering :=
  Build_well_ordering Qpositive2 bin2_lt bin2_eq bin2_lt_is_order
    bin2_eq_is_equality bin2_lt_is_wf bin2_lt_is_well_def_rht.

Lemma octet_lt_wf_rec_without_zeros_and_One :
 forall
   P : Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Prop,
 (forall (a b c d e f g h : Z_pos) (q1 q2 : Qpositive),
  (forall (k l r s t u v w : Z_pos) (p1 p2 : Qpositive),
   octet_lt k l r s t u v w p1 p2 a b c d e f g h q1 q2 ->
   P k l r s t u v w p1 p2) -> P a b c d e f g h q1 q2) ->
 forall (a b c d e f g h : Z_pos) (q1 q2 : Qpositive),
 P a b c d e f g h q1 q2.

Lemma quadraticAcc_wf :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 (0 < a + b + c + d)%Z ->
 (0 < e + f + g + h)%Z ->
 (0 <= a)%Z ->
 (0 <= b)%Z ->
 (0 <= c)%Z ->
 (0 <= d)%Z ->
 (0 <= e)%Z ->
 (0 <= f)%Z -> (0 <= g)%Z -> (0 <= h)%Z -> quadraticAcc a b c d e f g h p1 p2.

Scheme quadraticAcc_ind_dep := Induction for quadraticAcc Sort Prop.

Lemma Qquadratic_Qpositive_to_Qpositive_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp1 hyp2 : quadraticAcc a b c d e f g h p1 p2),
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp1 =
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp2.

Lemma Qquadratic_Qpositive_to_Qpositive_equal_strong :
 forall (a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 g1 g2 h1 h2 : Z)
   (x1 x2 y1 y2 : Qpositive)
   (hyp1 : quadraticAcc a1 b1 c1 d1 e1 f1 g1 h1 x1 y1)
   (hyp2 : quadraticAcc a2 b2 c2 d2 e2 f2 g2 h2 x2 y2),
 a1 = a2 ->
 b1 = b2 ->
 c1 = c2 ->
 d1 = d2 ->
 e1 = e2 ->
 f1 = f2 ->
 g1 = g2 ->
 h1 = h2 ->
 x1 = x2 ->
 y1 = y2 ->
 Qquadratic_Qpositive_to_Qpositive a1 b1 c1 d1 e1 f1 g1 h1 x1 y1 hyp1 =
 Qquadratic_Qpositive_to_Qpositive a2 b2 c2 d2 e2 f2 g2 h2 x2 y2 hyp2.

Lemma Qquadratic_Qpositive_to_Qpositive_0 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 = One ->
 forall hyp_ni : homographicAcc (a + c) (b + d) (e + g) (f + h) p2,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qhomographic_Qpositive_to_Qpositive (a + c) (b + d) 
   (e + g) (f + h) p2 hyp_ni.

Lemma Qquadratic_Qpositive_to_Qpositive_0' :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 <> One ->
 p2 = One ->
 forall hyp_ni : homographicAcc (a + b) (c + d) (e + f) (g + h) p1,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qhomographic_Qpositive_to_Qpositive (a + b) (c + d) 
   (e + f) (g + h) p1 hyp_ni.

Lemma Qquadratic_Qpositive_to_Qpositive_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 quadratic_top_more a b c d e f g h ->
 forall hyp_rec : quadraticAcc (a - e) (b - f) (c - g) (d - h) e f g h p1 p2,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 nR
   (Qquadratic_Qpositive_to_Qpositive (a - e) (b - f) 
      (c - g) (d - h) e f g h p1 p2 hyp_rec).

Lemma Qquadratic_Qpositive_to_Qpositive_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 ~ quadratic_top_more a b c d e f g h ->
 quadratic_top_more e f g h a b c d ->
 forall hyp_rec : quadraticAcc a b c d (e - a) (f - b) (g - c) (h - d) p1 p2,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 dL
   (Qquadratic_Qpositive_to_Qpositive a b c d (e - a) 
      (f - b) (g - c) (h - d) p1 p2 hyp_rec).

Lemma Qquadratic_Qpositive_to_Qpositive_3_II :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = nR xs ->
 forall ys : Qpositive,
 p2 = nR ys ->
 forall
   hyp_rec : quadraticAcc a (a + b) (a + c) (a + b + c + d) e 
               (e + f) (e + g) (e + f + g + h) xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive a (a + b) (a + c) 
   (a + b + c + d) e (e + f) (e + g) (e + f + g + h) xs ys hyp_rec.

Lemma Qquadratic_Qpositive_to_Qpositive_3_IO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = nR xs ->
 forall ys : Qpositive,
 p2 = dL ys ->
 forall
   hyp_rec : quadraticAcc (a + b) b (a + b + c + d) 
               (b + d) (e + f) f (e + f + g + h) (f + h) xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive (a + b) b (a + b + c + d) 
   (b + d) (e + f) f (e + f + g + h) (f + h) xs ys hyp_rec.

Lemma Qquadratic_Qpositive_to_Qpositive_3_OI :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = dL xs ->
 forall ys : Qpositive,
 p2 = nR ys ->
 forall
   hyp_rec : quadraticAcc (a + c) (a + b + c + d) c 
               (c + d) (e + g) (e + f + g + h) g (g + h) xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive (a + c) (a + b + c + d) c 
   (c + d) (e + g) (e + f + g + h) g (g + h) xs ys hyp_rec.

Lemma Qquadratic_Qpositive_to_Qpositive_3_OO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = dL xs ->
 forall ys : Qpositive,
 p2 = dL ys ->
 forall
   hyp_rec : quadraticAcc (a + b + c + d) (b + d) (c + d) d 
               (e + f + g + h) (f + h) (g + h) h xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive (a + b + c + d) 
   (b + d) (c + d) d (e + f + g + h) (f + h) (g + h) h xs ys hyp_rec. *)
Require Export homographicAcc_Qhomographic_sign.
(* homographicAcc_Qhomographic_sign:
Require Export Qhomographic_sign.
Require Export Qhomographic_Qpositive_to_Qpositive.
Require Export Qhomographic_sign_properties.

Definition new_a (a b c d : Z) (p : Qpositive)
  (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p) :=
  fst
    (fst (snd (Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero))).

Definition new_b (a b c d : Z) (p : Qpositive)
  (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p) :=
  fst
    (snd
       (fst
          (snd (Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero)))).

Definition new_c (a b c d : Z) (p : Qpositive)
  (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p) :=
  fst
    (snd
       (snd
          (fst
             (snd
                (Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero))))).

Definition new_d (a b c d : Z) (p : Qpositive)
  (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p) :=
  snd
    (snd
       (snd
          (fst
             (snd
                (Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero))))).

Definition new_p (a b c d : Z) (p : Qpositive)
  (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p) :=
  snd (snd (Qhomographic_sign a b c d p H_Qhomographic_sg_denom_nonzero)).

Lemma Qhomographic_Qpositive_to_Q_homographicAcc_pos_1 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 (a * d)%Z <> (b * c)%Z ->
 h_sign a b c d p H_Qhomographic_sg_denom_nonzero = 1%Z ->
 (0 <
  Z.sgn

Lemma Qhomographic_Qpositive_to_Q_homographicAcc_pos_2 :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 (a * d)%Z <> (b * c)%Z ->
 h_sign a b c d p H_Qhomographic_sg_denom_nonzero = 1%Z ->
 (Z.sgn

Lemma Qhomographic_Qpositive_to_Q_homographicAcc_neg_1 :
 forall (a b c d : Z) (p : Qpositive)
   (H_hsign : Qhomographic_sg_denom_nonzero c d p),
 (a * d)%Z <> (b * c)%Z ->
 h_sign a b c d p H_hsign = (-1)%Z ->
 (Z.sgn (new_a a b c d p H_hsign + new_b a b c d p H_hsign) < 0)%Z ->

Lemma Qhomographic_Qpositive_to_Q_homographicAcc_neg_2 :
 forall (a b c d : Z) (p : Qpositive)
   (H_hsign : Qhomographic_sg_denom_nonzero c d p),
 (a * d)%Z <> (b * c)%Z ->
 h_sign a b c d p H_hsign = (-1)%Z ->
 (0 <= Z.sgn (new_a a b c d p H_hsign + new_b a b c d p H_hsign))%Z -> *)

Definition qnew_a (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (fst
       (fst
          (snd
             (Qquadratic_sign a b c d e f g h p1 p2
                H_Qquadratic_sg_denom_nonzero)))).

Definition qnew_b (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (fst
          (fst
             (snd
                (Qquadratic_sign a b c d e f g h p1 p2
                   H_Qquadratic_sg_denom_nonzero))))).

Definition qnew_c (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (fst
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_d (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  snd
    (snd
       (snd
          (fst
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_e (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (fst
          (snd
             (Qquadratic_sign a b c d e f g h p1 p2
                H_Qquadratic_sg_denom_nonzero)))).

Definition qnew_f (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (fst
             (snd
                (Qquadratic_sign a b c d e f g h p1 p2
                   H_Qquadratic_sg_denom_nonzero))))).

Definition qnew_g (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (snd
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_h (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  snd
    (snd
       (snd
          (snd
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_p1 (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (Qquadratic_sign a b c d e f g h p1 p2
             H_Qquadratic_sg_denom_nonzero))).

Definition qnew_p2 (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  snd
    (snd
       (snd
          (Qquadratic_sign a b c d e f g h p1 p2
             H_Qquadratic_sg_denom_nonzero))).  

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_pos_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z ->
 Z.sgn
   (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero) = 1%Z ->
 quadraticAcc (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_e a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p1 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero).
Proof.
 intros a b c d e f g h p1 p2 H_qsign not_same_ratio_abcdefgh l1_eq_one
  na_nb_nc_nd_eq_one.
 set (na := qnew_a a b c d e f g h p1 p2 H_qsign) in *.
 set (nb := qnew_b a b c d e f g h p1 p2 H_qsign) in *.
 set (nc := qnew_c a b c d e f g h p1 p2 H_qsign) in *.
 set (nd := qnew_d a b c d e f g h p1 p2 H_qsign) in *.
 set (ne := qnew_e a b c d e f g h p1 p2 H_qsign) in *.
 set (nf := qnew_f a b c d e f g h p1 p2 H_qsign) in *.
 set (ng := qnew_g a b c d e f g h p1 p2 H_qsign) in *.
 set (nh := qnew_h a b c d e f g h p1 p2 H_qsign) in *.
 set (np1 := qnew_p1 a b c d e f g h p1 p2 H_qsign) in *.
 set (np2 := qnew_p2 a b c d e f g h p1 p2 H_qsign) in *.

 assert
  (H :
   Qquadratic_sign a b c d e f g h p1 p2 H_qsign =
   (1%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2)))).
 unfold na, nb, nc, nd, ne, nf, ng, nh, np1, np2 in |- *.
 rewrite <- l1_eq_one.
 unfold qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g, qnew_h,
  qnew_p1, qnew_p2 in |- *.
 replace (q_sign a b c d e f g h p1 p2 H_qsign) with
  (fst (Qquadratic_sign a b c d e f g h p1 p2 H_qsign));
  [ idtac | reflexivity ]; repeat rewrite <- pair_1; 
  reflexivity.

 generalize
  (Qquadratic_sign_pos_1 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf ng
     nh np1 np2 H).
 intros [(H_nabcd, H_nefgh)| (H1, _)];
  [ idtac
  | apply False_ind; generalize (Zsgn_9 _ na_nb_nc_nd_eq_one); apply Zlt_asym;
     assumption ].
 
 destruct np1 as [p| p| ].
  
  destruct np2 as [p0| p0| ].
   
   apply quadraticAcc_wf; solve
    [ assumption
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) (nR p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
    
   apply quadraticAcc_wf; solve
    [ assumption
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) (dL p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
   
   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ rewrite Zplus_assoc; assumption
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply Zplus_le_0_compat; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zle_resp_neg; 
          assumption ] ].

  destruct np2 as [p0| p0| ].
    
   apply quadraticAcc_wf; solve
    [ assumption
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) (nR p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
    
   apply quadraticAcc_wf; solve
    [ assumption
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) (dL p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
   
   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ rewrite Zplus_assoc; assumption
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply Zplus_le_0_compat; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zle_resp_neg; 
          assumption ] ].

  apply quadraticacc0.
  reflexivity.
  destruct np2 as [p| p| ].
    
   apply homographicAcc_wf; first
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh One (nR p) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (_, (Hab, (Hcd, (Hef, Hgh))))]|
            (_, (Hab, (Hcd, (Hef, Hgh))))]|
           (_, H_discriminate_me)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply Zplus_le_0_compat; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt; omega
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
    
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh One (dL p) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (_, (Hab, (Hcd, (Hef, Hgh))))]|
            (_, (Hab, (Hcd, (Hef, Hgh))))]|
           (_, H_discriminate_me)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply Zplus_le_0_compat; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt; omega
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
   
   apply homographicacc0; reflexivity || omega. 
Qed.

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_pos_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z ->
 Z.sgn
   (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero) = 
 (-1)%Z ->
 quadraticAcc (- qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_e a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p1 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero).
Proof.
 intros a b c d e f g h p1 p2 H_qsign not_same_ratio_abcdefgh l1_eq_one
  na_nb_nc_nd_eq_minus_one.
 set (na := qnew_a a b c d e f g h p1 p2 H_qsign) in *.
 set (nb := qnew_b a b c d e f g h p1 p2 H_qsign) in *.
 set (nc := qnew_c a b c d e f g h p1 p2 H_qsign) in *.
 set (nd := qnew_d a b c d e f g h p1 p2 H_qsign) in *.
 set (ne := qnew_e a b c d e f g h p1 p2 H_qsign) in *.
 set (nf := qnew_f a b c d e f g h p1 p2 H_qsign) in *.
 set (ng := qnew_g a b c d e f g h p1 p2 H_qsign) in *.
 set (nh := qnew_h a b c d e f g h p1 p2 H_qsign) in *.
 set (np1 := qnew_p1 a b c d e f g h p1 p2 H_qsign) in *.
 set (np2 := qnew_p2 a b c d e f g h p1 p2 H_qsign) in *.

 assert
  (H :
   Qquadratic_sign a b c d e f g h p1 p2 H_qsign =
   (1%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2)))).
 unfold na, nb, nc, nd, ne, nf, ng, nh, np1, np2 in |- *.
 rewrite <- l1_eq_one.
 unfold qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g, qnew_h,
  qnew_p1, qnew_p2 in |- *.
 replace (q_sign a b c d e f g h p1 p2 H_qsign) with
  (fst (Qquadratic_sign a b c d e f g h p1 p2 H_qsign));
  [ idtac | reflexivity ]; repeat rewrite <- pair_1; 
  reflexivity.

 generalize
  (Qquadratic_sign_pos_1 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf ng
     nh np1 np2 H).
 intros [(H1, _)| (H_nabcd, H_nefgh)];
  [ apply False_ind; generalize (Zsgn_10 _ na_nb_nc_nd_eq_minus_one);
     apply Zlt_asym; assumption
  | idtac ].
 
 destruct np1 as [p| p| ].
  
  destruct np2 as [p0| p0| ].
    
   apply quadraticAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) (nR p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].

   apply quadraticAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) (dL p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
   
   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | omega
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zplus_le_0_compat; 
          assumption
       | omega ] ].

  destruct np2 as [p0| p0| ].
    
   apply quadraticAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) (nR p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
    
   apply quadraticAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) (dL p0) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
   
   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | omega
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zplus_le_0_compat; 
          assumption
       | omega ] ].
  
  apply quadraticacc0.
  reflexivity.
  destruct np2 as [p| p| ].
    
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh One (nR p) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (_, (Hab, (Hcd, (Hef, Hgh))))]|
            (_, (Hab, (Hcd, (Hef, Hgh))))]|
           (_, H_discriminate_me)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zplus_le_0_compat; apply Zle_neg_opp; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt; omega
       | rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
    
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_pos_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh One (dL p) H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (_, (Hab, (Hcd, (Hef, Hgh))))]|
            (_, (Hab, (Hcd, (Hef, Hgh))))]|
           (_, H_discriminate_me)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zplus_le_0_compat; apply Zle_neg_opp; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt; omega
       | rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ].
   
   apply homographicacc0; reflexivity || omega. 
Qed.

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_neg_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z ->
 Z.sgn
   (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero) = 1%Z ->
 quadraticAcc (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_e a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p1 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero).
Proof.
 intros a b c d e f g h p1 p2 H_qsign not_same_ratio_abcdefgh l1_eq_min_one
  na_nb_nc_nd_eq_one.
 set (na := qnew_a a b c d e f g h p1 p2 H_qsign) in *.
 set (nb := qnew_b a b c d e f g h p1 p2 H_qsign) in *.
 set (nc := qnew_c a b c d e f g h p1 p2 H_qsign) in *.
 set (nd := qnew_d a b c d e f g h p1 p2 H_qsign) in *.
 set (ne := qnew_e a b c d e f g h p1 p2 H_qsign) in *.
 set (nf := qnew_f a b c d e f g h p1 p2 H_qsign) in *.
 set (ng := qnew_g a b c d e f g h p1 p2 H_qsign) in *.
 set (nh := qnew_h a b c d e f g h p1 p2 H_qsign) in *.
 set (np1 := qnew_p1 a b c d e f g h p1 p2 H_qsign) in *.
 set (np2 := qnew_p2 a b c d e f g h p1 p2 H_qsign) in *.

 assert
  (H :
   Qquadratic_sign a b c d e f g h p1 p2 H_qsign =
   ((-1)%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2)))).
 unfold na, nb, nc, nd, ne, nf, ng, nh, np1, np2 in |- *.
 rewrite <- l1_eq_min_one.
 unfold qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g, qnew_h,
  qnew_p1, qnew_p2 in |- *.
 replace (q_sign a b c d e f g h p1 p2 H_qsign) with
  (fst (Qquadratic_sign a b c d e f g h p1 p2 H_qsign));
  [ idtac | reflexivity ]; repeat rewrite <- pair_1; 
  reflexivity.

 generalize
  (Qquadratic_sign_neg_1 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf ng
     nh np1 np2 H).
 intros [(H_nabcd, H_nefgh)| (H1, _)];
  [ idtac
  | apply False_ind; generalize (Zsgn_9 _ na_nb_nc_nd_eq_one); apply Zlt_asym;
     assumption ].
 
 destruct np1 as [p| p| ].
  
 let T_local :=
  (apply quadraticAcc_wf; solve
    [ assumption
    | omega
    | match goal with
      | id1:(?X1 = (?X2, (?X3, (?X4, nR ?X5)))) |- ?X6 =>
          generalize
           (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
              ne nf ng nh (nR p) (nR p0) H)
      | id1:(?X1 = (?X2, (?X3, (?X4, dL ?X5)))) |- ?X6 =>
          generalize
           (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
              ne nf ng nh (nR p) (dL p0) H)
      end;
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (H_discriminate_me,_))]|
         (_, (H_discriminate_me,_))];
       [ try apply Zle_neg_opp; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me ] ]) in
 (destruct np2 as [p0| p0| ];
   [   T_local |   T_local | idtac ]).

   apply quadraticacc0'.
   discriminate.
   reflexivity. 
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply Zplus_le_0_compat; try apply Zle_neg_opp; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | assumption ||
           (rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption)
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zle_resp_neg; 
          assumption ] ].
  
  let T_local :=
   (apply quadraticAcc_wf; solve
     [ assumption
     | omega
     | match goal with
       | id1:(?X1 = (?X2, (?X3, (?X4, nR ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh (dL p) (nR p0) H)
       | id1:(?X1 = (?X2, (?X3, (?X4, dL ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh (dL p) (dL p0) H)
       end;
        intros
         [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
               (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
              (H_discriminate_me, _)]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (_, (H_discriminate_me,_))]|
          (_, (H_discriminate_me,_))];
        [ try apply Zle_neg_opp; assumption
        | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
           repeat apply Zle_resp_neg; assumption
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me ] ]) in
  (destruct np2 as [p0| p0| ];
    [   T_local |   T_local | idtac ]).
  
   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ rewrite Zplus_assoc; assumption || omega
    | generalize
       (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply Zplus_le_0_compat; try apply Zle_neg_opp; assumption
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zle_resp_neg; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | assumption ||
           (rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption)
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zle_resp_neg; 
          assumption ] ].

  apply quadraticacc0.
  reflexivity.
  let T_local :=
   (apply homographicAcc_wf; solve
     [ omega
     | match goal with
       | id1:(?X1 = (?X2, (?X3, (?X4, nR ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh One (nR p) H)
       | id1:(?X1 = (?X2, (?X3, (?X4, dL ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh One (dL p) H)
       end;
        intros
         [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
               (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
              (_, (Hab, (Hcd, (Hef, Hgh))))]|
             (_, (Hab, (Hcd, (Hef, Hgh))))]|
            (_, H_discriminate_me)]|
           (_, (H_discriminate_me,_))]|
          (_, (H_discriminate_me,_))];
        [ apply Zplus_le_0_compat; try apply Zle_neg_opp; assumption
        | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
           repeat apply Zle_resp_neg; assumption
        | assumption ||
            (rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption)
        | apply False_ind; generalize H_nabcd; apply Zle_not_lt; omega
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me ] ]) in
  (destruct np2 as [p| p| ];
    [   T_local
    |   T_local
    |   
       
       apply homographicacc0; reflexivity || omega ]). 
Qed.

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_neg_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z ->
 Z.sgn
   (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero +
    qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero) = 
 (-1)%Z ->
 quadraticAcc (- qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (- qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_e a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p1 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   (qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero).
Proof.
 intros a b c d e f g h p1 p2 H_qsign not_same_ratio_abcdefgh l1_eq_min_one
  na_nb_nc_nd_eq_minus_one.
 set (na := qnew_a a b c d e f g h p1 p2 H_qsign) in *.
 set (nb := qnew_b a b c d e f g h p1 p2 H_qsign) in *.
 set (nc := qnew_c a b c d e f g h p1 p2 H_qsign) in *.
 set (nd := qnew_d a b c d e f g h p1 p2 H_qsign) in *.
 set (ne := qnew_e a b c d e f g h p1 p2 H_qsign) in *.
 set (nf := qnew_f a b c d e f g h p1 p2 H_qsign) in *.
 set (ng := qnew_g a b c d e f g h p1 p2 H_qsign) in *.
 set (nh := qnew_h a b c d e f g h p1 p2 H_qsign) in *.
 set (np1 := qnew_p1 a b c d e f g h p1 p2 H_qsign) in *.
 set (np2 := qnew_p2 a b c d e f g h p1 p2 H_qsign) in *.

 assert
  (H :
   Qquadratic_sign a b c d e f g h p1 p2 H_qsign =
   ((-1)%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2)))).
 unfold na, nb, nc, nd, ne, nf, ng, nh, np1, np2 in |- *.
 rewrite <- l1_eq_min_one.
 unfold qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g, qnew_h,
  qnew_p1, qnew_p2 in |- *.
 replace (q_sign a b c d e f g h p1 p2 H_qsign) with
  (fst (Qquadratic_sign a b c d e f g h p1 p2 H_qsign));
  [ idtac | reflexivity ]; repeat rewrite <- pair_1; 
  reflexivity.

 generalize
  (Qquadratic_sign_neg_1 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf ng
     nh np1 np2 H).
 intros [(H1, _)| (H_nabcd, H_nefgh)];
  [ apply False_ind; generalize (Zsgn_10 _ na_nb_nc_nd_eq_minus_one);
     apply Zlt_asym; assumption
  | idtac ].
 
 destruct np1 as [p| p| ].
  
  let T_local :=
   (apply quadraticAcc_wf; solve
     [ assumption || omega
     | match goal with
       | id1:(?X1 = (?X2, (?X3, (?X4, nR ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh (nR p) (nR p0) H)
       | id1:(?X1 = (?X2, (?X3, (?X4, dL ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh (nR p) (dL p0) H)
       end;
        intros
         [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
               (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
              (H_discriminate_me, _)]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (_, (H_discriminate_me,_))]|
          (_, (H_discriminate_me,_))];
        [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
           repeat apply Zplus_le_0_compat; assumption
        | try apply Zle_neg_opp; assumption
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me ] ]) in
  (destruct np2 as [p0| p0| ];
    [   T_local |   T_local | idtac ]).

   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ omega
    | generalize
       (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (nR p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zplus_le_0_compat; try apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zplus_le_0_compat; 
          assumption
       | assumption ||
           (rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption) ] ].

  let T_local :=
   (apply quadraticAcc_wf; solve
     [ assumption || omega
     | match goal with
       | id1:(?X1 = (?X2, (?X3, (?X4, nR ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh (dL p) (nR p0) H)
       | id1:(?X1 = (?X2, (?X3, (?X4, dL ?X5)))) |- ?X6 =>
           generalize
            (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
               ne nf ng nh (dL p) (dL p0) H)
       end;
        intros
         [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
               (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
              (H_discriminate_me, _)]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (_, (H_discriminate_me,_))]|
          (_, (H_discriminate_me,_))];
        [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
           repeat apply Zplus_le_0_compat; assumption
        | try apply Zle_neg_opp; assumption
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me
        | discriminate H_discriminate_me ] ]) in
  (destruct np2 as [p0| p0| ];
    [   T_local |   T_local | idtac ]).

   apply quadraticacc0'.
   discriminate.
   reflexivity.
   apply homographicAcc_wf; solve
    [ rewrite Zplus_assoc; assumption || omega
    | generalize
       (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd ne nf
          ng nh (dL p) One H);
       intros
        [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
              (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
             (H_discriminate_me, _)]|
            (H_discriminate_me, _)]|
           (H_discriminate_me, _)]|
          (_, (_, (Hab, (Hcd, (Hef, Hgh)))))]|
         (_, (_, (Hab, (Hcd, (Hef, Hgh)))))];
       [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          repeat apply Zplus_le_0_compat; assumption
       | apply Zplus_le_0_compat; try apply Zle_neg_opp; assumption
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | discriminate H_discriminate_me
       | apply False_ind; generalize H_nabcd; apply Zle_not_lt;
          rewrite <- Zplus_assoc; apply Zplus_le_0_compat; 
          assumption
       | assumption ||
           (rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption) ] ].

  apply quadraticacc0.
  reflexivity.
  let T_local :=
   (apply homographicAcc_wf;
     try solve
      [ omega
      | match goal with
        | id1:(?X1 = (?X2, (?X3, (?X4, nR ?X5)))) |- ?X6 =>
            generalize
             (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
                ne nf ng nh One (nR p) H)
        | id1:(?X1 = (?X2, (?X3, (?X4, dL ?X5)))) |- ?X6 =>
            generalize
             (Qquadratic_sign_neg_2 a b c d e f g h p1 p2 H_qsign na nb nc nd
                ne nf ng nh One (dL p) H)
        end;
         intros
          [[[[[[(Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))|
                (Ha, (Hb, (Hc, (Hd, (He, (Hf, (Hg, Hh)))))))]|
               (_, (Hab, (Hcd, (Hef, Hgh))))]|
              (_, (Hab, (Hcd, (Hef, Hgh))))]|
             (_, H_discriminate_me)]|
            (_, (H_discriminate_me,_))]|
           (_, (H_discriminate_me,_))];
         [ apply False_ind; generalize H_nabcd; apply Zle_not_lt;
            repeat apply Zplus_le_0_compat; assumption
         | apply Zplus_le_0_compat; try apply Zle_neg_opp; assumption
         | apply False_ind; generalize H_nabcd; apply Zle_not_lt; omega
         | assumption ||
             (rewrite <- Zopp_plus_distr; apply Zle_neg_opp; assumption)
         | discriminate H_discriminate_me
         | discriminate H_discriminate_me
         | discriminate H_discriminate_me ] ]) in
  (destruct np2 as [p| p| ];
    [   T_local
    |   T_local
    |   
       
       apply homographicacc0; reflexivity || omega ]).
Qed.
