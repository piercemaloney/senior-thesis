

Require Import ZArithRing.

Require Import Qhomographic_sign.

Require Import Zaux.
(* Zaux:
Require Export ZArith.
Require Export ZArithRing.

Tactic Notation "ElimCompare" constr(c) constr(d) := elim_compare c d.

Ltac Flip :=
  apply Z.gt_lt || apply Z.lt_gt || apply Z.le_ge || apply Z.ge_le; assumption.

Ltac Falsum :=
  try intro; apply False_ind;
   repeat
    match goal with
    | id1:(~ ?X1) |- ?X2 =>
        (apply id1; assumption || reflexivity) || clear id1
    end.

Ltac Step_l a :=
  match goal with
  |  |- (?X1 < ?X2)%Z => replace X1 with a; [ idtac | try ring ]
  end. 

Ltac Step_r a :=
  match goal with
  |  |- (?X1 < ?X2)%Z => replace X2 with a; [ idtac | try ring ]
  end. 

Ltac CaseEq formula :=
  generalize (refl_equal formula); pattern formula at -1 in |- *;
   case formula.

Lemma pair_1 : forall (A B : Set) (H : A * B), H = pair (fst H) (snd H).

Lemma pair_2 :
 forall (A B : Set) (H1 H2 : A * B),
 fst H1 = fst H2 -> snd H1 = snd H2 -> H1 = H2.

Section projection.   
 Variable A : Set.
 Variable P : A -> Prop.
 
 Definition projP1 (H : sig P) := let (x, h) := H in x.
 Definition projP2 (H : sig P) :=
   let (x, h) as H return (P (projP1 H)) := H in h.
End projection.

Lemma le_stepl: forall x y z, le x y -> x=z -> le z y.

Lemma le_stepr: forall x y z, le x y -> y=z -> le x z.

Lemma lt_stepl: forall x y z, lt x y -> x=z -> lt z y.

Lemma lt_stepr: forall x y z, lt x y -> y=z -> lt x z.

Lemma neq_stepl:forall (x y z:nat), x<>y -> x=z -> z<>y.

Lemma neq_stepr:forall (x y z:nat), x<>y -> y=z -> x<>z.

Declare Left Step le_stepl.
Declare Right Step le_stepr.
Declare Left Step lt_stepl.
Declare Right Step lt_stepr.
Declare Left Step neq_stepl.
Declare Right Step neq_stepr.

Lemma not_O_S : forall n : nat, n <> 0 -> {p : nat | n = S p}.
  
Lemma lt_minus_neq : forall m n : nat, m < n -> n - m <> 0.

Lemma lt_minus_eq_0 : forall m n : nat, m < n -> m - n = 0.

Lemma le_plus_Sn_1_SSn : forall n : nat, S n + 1 <= S (S n).

Lemma le_plus_O_l : forall p q : nat, p + q <= 0 -> p = 0.

Lemma le_plus_O_r : forall p q : nat, p + q <= 0 -> q = 0.

Lemma minus_pred : forall m n : nat, 0 < n -> pred m - pred n = m - n.

Lemma Zle_stepl: forall x y z, (x<=y)%Z -> x=z -> (z<=y)%Z.

Lemma Zle_stepr: forall x y z, (x<=y)%Z -> y=z -> (x<=z)%Z.

Lemma Zlt_stepl: forall x y z, (x<y)%Z -> x=z -> (z<y)%Z.

Lemma Zlt_stepr: forall x y z, (x<y)%Z -> y=z -> (x<z)%Z.

Lemma Zneq_stepl:forall (x y z:Z), (x<>y)%Z -> x=z -> (z<>y)%Z.

Lemma Zneq_stepr:forall (x y z:Z), (x<>y)%Z -> y=z -> (x<>z)%Z.

Declare Left Step Zle_stepl.
Declare Right Step Zle_stepr.
Declare Left Step Zlt_stepl.
Declare Right Step Zlt_stepr.
Declare Left Step Zneq_stepl.
Declare Right Step Zneq_stepr.

Lemma Zlt_cotrans :
 forall x y : Z, (x < y)%Z -> forall z : Z, {(x < z)%Z} + {(z < y)%Z}.

Lemma Zlt_cotrans_pos :
 forall x y : Z, (0 < x + y)%Z -> {(0 < x)%Z} + {(0 < y)%Z}.

Lemma Zlt_cotrans_neg :
 forall x y : Z, (x + y < 0)%Z -> {(x < 0)%Z} + {(y < 0)%Z}.

Lemma not_Zeq_inf : forall x y : Z, x <> y -> {(x < y)%Z} + {(y < x)%Z}.

Lemma Z_dec : forall x y : Z, {(x < y)%Z} + {(x > y)%Z} + {x = y}.
 
Lemma Z_dec' : forall x y : Z, {(x < y)%Z} + {(y < x)%Z} + {x = y}.

Lemma Z_lt_le_dec : forall x y : Z, {(x < y)%Z} + {(y <= x)%Z}.

Lemma Z_le_lt_dec : forall x y : Z, {(x <= y)%Z} + {(y < x)%Z}.

Lemma Z_lt_lt_S_eq_dec :
 forall x y : Z, (x < y)%Z -> {(x + 1 < y)%Z} + {(x + 1)%Z = y}.

Lemma quadro_leq_inf :
 forall a b c d : Z,
 {(c <= a)%Z /\ (d <= b)%Z} + {~ ((c <= a)%Z /\ (d <= b)%Z)}.

Lemma Zminus_eq : forall x y : Z, (x - y)%Z = 0%Z -> x = y.

Lemma Zlt_minus : forall a b : Z, (b < a)%Z -> (0 < a - b)%Z.

Lemma Zle_minus : forall a b : Z, (b <= a)%Z -> (0 <= a - b)%Z.

Lemma Zlt_plus_plus :
 forall m n p q : Z, (m < n)%Z -> (p < q)%Z -> (m + p < n + q)%Z.

Lemma Zgt_plus_plus :
 forall m n p q : Z, (m > n)%Z -> (p > q)%Z -> (m + p > n + q)%Z.

Lemma Zle_lt_plus_plus :
 forall m n p q : Z, (m <= n)%Z -> (p < q)%Z -> (m + p < n + q)%Z.

Lemma Zge_gt_plus_plus :
 forall m n p q : Z, (m >= n)%Z -> (p > q)%Z -> (m + p > n + q)%Z.

Lemma Zgt_ge_plus_plus :
 forall m n p q : Z, (m > n)%Z -> (p >= q)%Z -> (m + p > n + q)%Z.

Lemma Zlt_resp_pos : forall x y : Z, (0 < x)%Z -> (0 < y)%Z -> (0 < x + y)%Z.

Lemma Zle_resp_neg :
 forall x y : Z, (x <= 0)%Z -> (y <= 0)%Z -> (x + y <= 0)%Z.

Lemma Zlt_pos_opp : forall x : Z, (0 < x)%Z -> (- x < 0)%Z.

Lemma Zlt_neg_opp : forall x : Z, (x < 0)%Z -> (0 < - x)%Z.

Lemma Zle_neg_opp : forall x : Z, (x <= 0)%Z -> (0 <= - x)%Z.

Lemma Zle_pos_opp : forall x : Z, (0 <= x)%Z -> (- x <= 0)%Z.

Lemma Zge_opp : forall x y : Z, (x <= y)%Z -> (- x >= - y)%Z.

Lemma Zmult_pos_pos : forall x y : Z, (0 < x)%Z -> (0 < y)%Z -> (0 < x * y)%Z.

Lemma Zmult_neg_neg : forall x y : Z, (x < 0)%Z -> (y < 0)%Z -> (0 < x * y)%Z.

Lemma Zmult_neg_pos : forall x y : Z, (x < 0)%Z -> (0 < y)%Z -> (x * y < 0)%Z.

Lemma Zmult_pos_neg : forall x y : Z, (0 < x)%Z -> (y < 0)%Z -> (x * y < 0)%Z.

Hint Resolve Zmult_pos_pos Zmult_neg_neg Zmult_neg_pos Zmult_pos_neg: zarith.

Lemma Zle_reg_mult_l :
 forall x y a : Z, (0 < a)%Z -> (x <= y)%Z -> (a * x <= a * y)%Z.

Lemma Zsimpl_plus_l_dep :
 forall x y m n : Z, (x + m)%Z = (y + n)%Z -> x = y -> m = n.

Lemma Zsimpl_plus_r_dep :
 forall x y m n : Z, (m + x)%Z = (n + y)%Z -> x = y -> m = n.

Lemma Zmult_simpl :
 forall n m p q : Z, n = m -> p = q -> (n * p)%Z = (m * q)%Z.
 
Lemma Zsimpl_mult_l :
 forall n m p : Z, n <> 0%Z -> (n * m)%Z = (n * p)%Z -> m = p.

Lemma Zlt_reg_mult_l :
 forall x y z : Z, (x > 0)%Z -> (y < z)%Z -> (x * y < x * z)%Z. 

Lemma Zlt_opp : forall x y : Z, (x < y)%Z -> (- x > - y)%Z. 

Lemma Zlt_conv_mult_l :
 forall x y z : Z, (x < 0)%Z -> (y < z)%Z -> (x * y > x * z)%Z. 

Lemma Zgt_not_eq : forall x y : Z, (x > y)%Z -> x <> y.   

Lemma Zmult_resp_nonzero :
 forall x y : Z, x <> 0%Z -> y <> 0%Z -> (x * y)%Z <> 0%Z.

Lemma Zopp_app : forall y : Z, y <> 0%Z -> (- y)%Z <> 0%Z.

Lemma Zle_neq_Zlt : forall a b : Z, (a <= b)%Z -> b <> a -> (a < b)%Z.

Lemma not_Zle_lt : forall x y : Z, ~ (y <= x)%Z -> (x < y)%Z.

Lemma not_Zlt : forall x y : Z, ~ (y < x)%Z -> (x <= y)%Z.

Lemma Zmult_absorb :
 forall x y z : Z, x <> 0%Z -> (x * y)%Z = (x * z)%Z -> y = z.  

Lemma Zlt_mult_mult :
 forall a b c d : Z,
 (0 < a)%Z -> (0 < d)%Z -> (a < b)%Z -> (c < d)%Z -> (a * c < b * d)%Z.

Lemma Zgt_mult_conv_absorb_l :
 forall a x y : Z, (a < 0)%Z -> (a * x > a * y)%Z -> (x < y)%Z. 

Lemma Zgt_mult_reg_absorb_l :
 forall a x y : Z, (a > 0)%Z -> (a * x > a * y)%Z -> (x > y)%Z. 

Lemma Zopp_Zlt : forall x y : Z, (y < x)%Z -> (- x < - y)%Z.

Lemma Zmin_cancel_Zlt : forall x y : Z, (- x < - y)%Z -> (y < x)%Z.

Lemma Zmult_cancel_Zle :
 forall a x y : Z, (a < 0)%Z -> (a * x <= a * y)%Z -> (y <= x)%Z.

Lemma Zlt_mult_cancel_l :
 forall x y z : Z, (0 < x)%Z -> (x * y < x * z)%Z -> (y < z)%Z.
 
Lemma Zmin_cancel_Zle : forall x y : Z, (- x <= - y)%Z -> (y <= x)%Z.

Lemma Zmult_resp_Zle :
 forall a x y : Z, (0 < a)%Z -> (a * y <= a * x)%Z -> (y <= x)%Z.

Lemma Zopp_Zle : forall x y : Z, (y <= x)%Z -> (- x <= - y)%Z.

Lemma Zle_lt_eq_S : forall x y : Z, (x <= y)%Z -> (y < x + 1)%Z -> y = x.

Lemma Zlt_le_eq_S :
 forall x y : Z, (x < y)%Z -> (y <= x + 1)%Z -> y = (x + 1)%Z.

Lemma double_not_equal_zero :
 forall c d : Z, ~ (c = 0%Z /\ d = 0%Z) -> c <> d \/ c <> 0%Z.

Lemma triple_not_equal_zero :
 forall a b c : Z,
 ~ (a = 0%Z /\ b = 0%Z /\ c = 0%Z) -> a <> 0%Z \/ b <> 0%Z \/ c <> 0%Z.

Lemma mediant_1 :
 forall m n m' n' : Z, (m' * n < m * n')%Z -> ((m + m') * n < m * (n + n'))%Z.
 
Lemma mediant_2 :
 forall m n m' n' : Z,
 (m' * n < m * n')%Z -> (m' * (n + n') < (m + m') * n')%Z. 

Lemma mediant_3 :
 forall a b m n m' n' : Z,
 (0 <= a * m + b * n)%Z ->
 (0 <= a * m' + b * n')%Z -> (0 <= a * (m + m') + b * (n + n'))%Z.

Lemma fraction_lt_trans :
 forall a b c d e f : Z,
 (0 < b)%Z ->
 (0 < d)%Z ->
 (0 < f)%Z -> (a * d < c * b)%Z -> (c * f < e * d)%Z -> (a * f < e * b)%Z.

Lemma square_pos : forall a : Z, a <> 0%Z -> (0 < a * a)%Z.
 
Hint Resolve square_pos: zarith.

Definition Z2positive (z : Z) :=
  match z with
  | Zpos p => p
  | Zneg p => p
  | Z0 => 1%positive
  end.

Lemma ZL9 : forall p : positive, Z_of_nat (nat_of_P p) = Zpos p. 

Coercion Z_of_nat : nat >-> Z.

Lemma ZERO_lt_POS : forall p : positive, (0 < Zpos p)%Z.

Lemma POS_neq_ZERO : forall p : positive, Zpos p <> 0%Z.

Lemma NEG_neq_ZERO : forall p : positive, Zneg p <> 0%Z.

Lemma POS_resp_eq : forall p0 p1 : positive, Zpos p0 = Zpos p1 -> p0 = p1.

Lemma nat_nat_pos : forall m n : nat, ((m + 1) * (n + 1) > 0)%Z. 
 
Theorem S_predn : forall m : nat, m <> 0 -> S (pred m) = m. 

Lemma absolu_1 : forall x : Z, Z.abs_nat x = 0 -> x = 0%Z. 

Lemma absolu_2 : forall x : Z, x <> 0%Z -> Z.abs_nat x <> 0. 

Lemma absolu_inject_nat : forall n : nat, Z.abs_nat (Z_of_nat n) = n.

Lemma eq_inj : forall m n : nat, m = n :>Z -> m = n.

Lemma lt_inj : forall m n : nat, (m < n)%Z -> m < n.

Lemma le_inj : forall m n : nat, (m <= n)%Z -> m <= n.

Lemma inject_nat_S_inf : forall x : Z, (0 < x)%Z -> {n : nat | x = S n}.

Lemma le_absolu :
 forall x y : Z,
 (0 <= x)%Z -> (0 <= y)%Z -> (x <= y)%Z -> Z.abs_nat x <= Z.abs_nat y.

Lemma lt_absolu :
 forall x y : Z,
 (0 <= x)%Z -> (0 <= y)%Z -> (x < y)%Z -> Z.abs_nat x < Z.abs_nat y.

Lemma absolu_plus :
 forall x y : Z,
 (0 <= x)%Z -> (0 <= y)%Z -> Z.abs_nat (x + y) = Z.abs_nat x + Z.abs_nat y.

Lemma pred_absolu :
 forall x : Z, (0 < x)%Z -> pred (Z.abs_nat x) = Z.abs_nat (x - 1).

Definition pred_nat : forall (x : Z) (Hx : (0 < x)%Z), nat.

Lemma pred_nat_equal :
 forall (x : Z) (Hx1 Hx2 : (0 < x)%Z), pred_nat x Hx1 = pred_nat x Hx2.

Let pred_nat_unfolded_subproof px :
  Pos.to_nat px <> 0.

Lemma pred_nat_unfolded :
 forall (x : Z) (Hx : (0 < x)%Z), x = S (pred_nat x Hx).

Lemma absolu_pred_nat :
 forall (m : Z) (Hm : (0 < m)%Z), S (pred_nat m Hm) = Z.abs_nat m.

Lemma pred_nat_absolu :
 forall (m : Z) (Hm : (0 < m)%Z), pred_nat m Hm = Z.abs_nat (m - 1).

Lemma minus_pred_nat :
 forall (n m : Z) (Hn : (0 < n)%Z) (Hm : (0 < m)%Z) (Hnm : (0 < n - m)%Z),
 S (pred_nat n Hn) - S (pred_nat m Hm) = S (pred_nat (n - m) Hnm).

Lemma Zsgn_1 :
 forall x : Z, {Z.sgn x = 0%Z} + {Z.sgn x = 1%Z} + {Z.sgn x = (-1)%Z}. 

Lemma Zsgn_2 : forall x : Z, Z.sgn x = 0%Z -> x = 0%Z.   

Lemma Zsgn_3 : forall x : Z, x <> 0%Z -> Z.sgn x <> 0%Z.   

Theorem Zsgn_4 : forall a : Z, a = (Z.sgn a * Z.abs_nat a)%Z.  

Theorem Zsgn_5 :
 forall a b x y : Z,
 x <> 0%Z ->
 y <> 0%Z ->
 (Z.sgn a * x)%Z = (Z.sgn b * y)%Z -> (Z.sgn a * y)%Z = (Z.sgn b * x)%Z.  

Lemma Zsgn_6 : forall x : Z, x = 0%Z -> Z.sgn x = 0%Z.

Lemma Zsgn_7 : forall x : Z, (x > 0)%Z -> Z.sgn x = 1%Z.

Lemma Zsgn_7' : forall x : Z, (0 < x)%Z -> Z.sgn x = 1%Z.

Lemma Zsgn_8 : forall x : Z, (x < 0)%Z -> Z.sgn x = (-1)%Z.

Lemma Zsgn_9 : forall x : Z, Z.sgn x = 1%Z -> (0 < x)%Z.
 
Lemma Zsgn_10 : forall x : Z, Z.sgn x = (-1)%Z -> (x < 0)%Z.

Lemma Zsgn_11 : forall x : Z, (Z.sgn x < 0)%Z -> (x < 0)%Z.

Lemma Zsgn_12 : forall x : Z, (0 < Z.sgn x)%Z -> (0 < x)%Z.

Lemma Zsgn_13 : forall x : Z, (0 <= Z.sgn x)%Z -> (0 <= x)%Z.

Lemma Zsgn_14 : forall x : Z, (Z.sgn x <= 0)%Z -> (x <= 0)%Z.

Lemma Zsgn_15 : forall x y : Z, Z.sgn (x * y) = (Z.sgn x * Z.sgn y)%Z.

Lemma Zsgn_16 :
 forall x y : Z,
 Z.sgn (x * y) = 1%Z -> {(0 < x)%Z /\ (0 < y)%Z} + {(x < 0)%Z /\ (y < 0)%Z}.

Lemma Zsgn_17 :
 forall x y : Z,
 Z.sgn (x * y) = (-1)%Z -> {(0 < x)%Z /\ (y < 0)%Z} + {(x < 0)%Z /\ (0 < y)%Z}.

Lemma Zsgn_18 : forall x y : Z, Z.sgn (x * y) = 0%Z -> {x = 0%Z} + {y = 0%Z}.

Lemma Zsgn_19 : forall x y : Z, (0 < Z.sgn x + Z.sgn y)%Z -> (0 < x + y)%Z.

Lemma Zsgn_20 : forall x y : Z, (Z.sgn x + Z.sgn y < 0)%Z -> (x + y < 0)%Z.

Lemma Zsgn_21 : forall x y : Z, (0 < Z.sgn x + Z.sgn y)%Z -> (0 <= x)%Z.

Lemma Zsgn_22 : forall x y : Z, (Z.sgn x + Z.sgn y < 0)%Z -> (x <= 0)%Z.

Lemma Zsgn_23 : forall x y : Z, (0 < Z.sgn x + Z.sgn y)%Z -> (0 <= y)%Z.

Lemma Zsgn_24 : forall x y : Z, (Z.sgn x + Z.sgn y < 0)%Z -> (y <= 0)%Z.

Lemma Zsgn_25 : forall x : Z, Z.sgn (- x) = (- Z.sgn x)%Z.

Lemma Zsgn_26 : forall x : Z, (0 < x)%Z -> (0 < Z.sgn x)%Z.

Lemma Zsgn_27 : forall x : Z, (x < 0)%Z -> (Z.sgn x < 0)%Z.

Hint Resolve Zsgn_1 Zsgn_2 Zsgn_3 Zsgn_4 Zsgn_5 Zsgn_6 Zsgn_7 Zsgn_7' Zsgn_8
  Zsgn_9 Zsgn_10 Zsgn_11 Zsgn_12 Zsgn_13 Zsgn_14 Zsgn_15 Zsgn_16 Zsgn_17
  Zsgn_18 Zsgn_19 Zsgn_20 Zsgn_21 Zsgn_22 Zsgn_23 Zsgn_24 Zsgn_25 Zsgn_26
  Zsgn_27: zarith.

Lemma Zabs_1 : forall z p : Z, (Z.abs z < p)%Z -> (z < p)%Z /\ (- p < z)%Z.

Lemma Zabs_2 : forall z p : Z, (Z.abs z > p)%Z -> (z > p)%Z \/ (- p > z)%Z.

Lemma Zabs_3 : forall z p : Z, (z < p)%Z /\ (- p < z)%Z -> (Z.abs z < p)%Z.

Lemma Zabs_4 : forall z p : Z, (Z.abs z < p)%Z -> (- p < z < p)%Z.
 
Lemma Zabs_5 : forall z p : Z, (Z.abs z <= p)%Z -> (- p <= z <= p)%Z.

Lemma Zabs_6 : forall z p : Z, (Z.abs z <= p)%Z -> (z <= p)%Z.

Lemma Zabs_7 : forall z p : Z, (Z.abs z <= p)%Z -> (- p <= z)%Z.

Lemma Zabs_8 : forall z p : Z, (- p <= z <= p)%Z -> (Z.abs z <= p)%Z.

Lemma Zabs_min : forall z : Z, Z.abs z = Z.abs (- z).

Lemma Zabs_9 :
 forall z p : Z, (0 <= p)%Z -> (p < z)%Z \/ (z < - p)%Z -> (p < Z.abs z)%Z.

Lemma Zabs_10 : forall z : Z, (0 <= Z.abs z)%Z.

Lemma Zabs_11 : forall z : Z, z <> 0%Z -> (0 < Z.abs z)%Z.

Lemma Zabs_12 : forall z m : Z, (m < Z.abs z)%Z -> {(m < z)%Z} + {(z < - m)%Z}.

Lemma Zabs_mult : forall z p : Z, Z.abs (z * p) = (Z.abs z * Z.abs p)%Z.

Lemma Zabs_plus : forall z p : Z, (Z.abs (z + p) <= Z.abs z + Z.abs p)%Z.

Lemma Zabs_neg : forall z : Z, (z <= 0)%Z -> Z.abs z = (- z)%Z.

Lemma Zle_Zabs: forall z, (z <= Z.abs z)%Z.
 
Hint Resolve Zabs_1 Zabs_2 Zabs_3 Zabs_4 Zabs_5 Zabs_6 Zabs_7 Zabs_8 Zabs_9
  Zabs_10 Zabs_11 Zabs_12 Zabs_min Zabs_neg Zabs_mult Zabs_plus Zle_Zabs: zarith.

Lemma Zind :
 forall (P : Z -> Prop) (p : Z),
 P p ->
 (forall q : Z, (p <= q)%Z -> P q -> P (q + 1)%Z) ->
 forall q : Z, (p <= q)%Z -> P q. 

Lemma Zrec :
 forall (P : Z -> Set) (p : Z),
 P p ->
 (forall q : Z, (p <= q)%Z -> P q -> P (q + 1)%Z) ->
 forall q : Z, (p <= q)%Z -> P q. 

Lemma Zrec_down :
 forall (P : Z -> Set) (p : Z),
 P p ->
 (forall q : Z, (q <= p)%Z -> P q -> P (q - 1)%Z) ->
 forall q : Z, (q <= p)%Z -> P q.

Lemma Zind_down :
 forall (P : Z -> Prop) (p : Z),
 P p ->
 (forall q : Z, (q <= p)%Z -> P q -> P (q - 1)%Z) ->
 forall q : Z, (q <= p)%Z -> P q.

Lemma Zrec_wf :
 forall (P : Z -> Set) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 forall q : Z, (p <= q)%Z -> P q.

Lemma Zrec_wf2 :
 forall (q : Z) (P : Z -> Set) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 (p <= q)%Z -> P q.

Lemma Zrec_wf_double :
 forall (P : Z -> Z -> Set) (p0 q0 : Z),
 (forall n m : Z,
  (forall p q : Z, (q0 <= q)%Z -> (p0 <= p < n)%Z -> P p q) ->
  (forall p : Z, (q0 <= p < m)%Z -> P n p) -> P n m) ->
 forall p q : Z, (q0 <= q)%Z -> (p0 <= p)%Z -> P p q.

Lemma Zind_wf :
 forall (P : Z -> Prop) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 forall q : Z, (p <= q)%Z -> P q.

Lemma Zind_wf2 :
 forall (q : Z) (P : Z -> Prop) (p : Z),
 (forall q : Z, (forall r : Z, (p <= r < q)%Z -> P r) -> P q) ->
 (p <= q)%Z -> P q.

Lemma Zind_wf_double :
 forall (P : Z -> Z -> Prop) (p0 q0 : Z),
 (forall n m : Z,
  (forall p q : Z, (q0 <= q)%Z -> (p0 <= p < n)%Z -> P p q) ->
  (forall p : Z, (q0 <= p < m)%Z -> P n p) -> P n m) ->
 forall p q : Z, (q0 <= q)%Z -> (p0 <= p)%Z -> P p q.

Definition Zmax (n m : Z) := (n + m - Z.min n m)%Z.

Lemma ZmaxSS : forall n m : Z, (Zmax n m + 1)%Z = Zmax (n + 1) (m + 1).

Lemma Zle_max_l : forall n m : Z, (n <= Zmax n m)%Z.

Lemma Zle_max_r : forall n m : Z, (m <= Zmax n m)%Z.

Lemma Zmin_or_informative : forall n m : Z, {Z.min n m = n} + {Z.min n m = m}.

Lemma Zmax_case : forall (n m : Z) (P : Z -> Set), P n -> P m -> P (Zmax n m).
 
Lemma Zmax_or_informative : forall n m : Z, {Zmax n m = n} + {Zmax n m = m}. 

Lemma Zmax_n_n : forall n : Z, Zmax n n = n.

Hint Resolve ZmaxSS Zle_max_r Zle_max_l Zmax_n_n: zarith.

Lemma Zeven_S : forall x : Z, Zeven.Zodd x -> Zeven.Zeven (x + 1).

Lemma Zeven_pred : forall x : Z, Zeven.Zodd x -> Zeven.Zeven (x - 1). 

Definition Z_modulo_2_always :
  forall x : Z, {y : Z | x = (2 * y)%Z} + {y : Z | x = (2 * y + 1)%Z} :=
  Zeven.Z_modulo_2.

Lemma Z_div_mod_eq_2 :
 forall a b : Z, (0 < b)%Z -> (b * (a / b))%Z = (a - a mod b)%Z.

Lemma Z_div_le :
 forall a b c : Z, (0 < c)%Z -> (b <= a)%Z -> (b / c <= a / c)%Z. 

Lemma Z_div_nonneg :
 forall a b : Z, (0 < b)%Z -> (0 <= a)%Z -> (0 <= a / b)%Z.

Lemma Z_div_neg : forall a b : Z, (0 < b)%Z -> (a < 0)%Z -> (a / b < 0)%Z.

Hint Resolve Z_div_mod_eq_2 Z_div_le Z_div_nonneg Z_div_neg: zarith.

Lemma Zpower_1 : forall a : Z, (a ^ 1)%Z = a.

Lemma Zpower_2 : forall a : Z, (a ^ 2)%Z = (a * a)%Z.

Hint Resolve Zpower_1 Zpower_2: zarith. *)



Definition outside_square (a b c d : Z) :=

  (Z.sgn a + Z.sgn b + Z.sgn c + Z.sgn d)%Z.



Lemma three_integers_dec_inf :

 forall a b c : Z,

 {a = 0%Z /\ b = 0%Z /\ c = 0%Z} + {~ (a = 0%Z /\ b = 0%Z /\ c = 0%Z)}.

Proof.

 intros. 

 case (Z_zerop a).

 intro.

 case (Z_zerop b).

 intro.

 case (Z_zerop c);

  [ intro; left; repeat split; assumption

  | intro; right; intros (H, (H1, H2)); Falsum ].

 intro; right; intros (H, (H1, H2)); Falsum.

 intro; right; intros (H, (H1, H2)); Falsum.

Defined.



Definition inside_square_1 (o1 o2 : Z) :=

  (2 < o1)%Z /\ (2 < o2)%Z \/ (o1 < -2)%Z /\ (o2 < -2)%Z.



Definition inside_square_2 (o1 o2 : Z) :=

  (2 < o1)%Z /\ (o2 < -2)%Z \/ (o1 < -2)%Z /\ (2 < o2)%Z.



Lemma inside_square_1_dec_inf :

 forall o1 o2 : Z, {inside_square_1 o1 o2} + {~ inside_square_1 o1 o2}.

Proof.

 intros.

 case (Z_lt_dec 2 o1).

 intro.

 case (Z_lt_dec 2 o2).

 intros.

 left.

 left. 

 split; repeat assumption.

 intro.

 right. 

 intro.

 apply n.

 case H. 

 intros (H1, H2).

 assumption.

 intros (H1, H2).

 apply False_ind.

 apply Z.lt_irrefl with o1.

 apply Z.lt_trans with (-2)%Z.

 assumption.

 apply Z.lt_trans with 2%Z.

 constructor.

 assumption.



 intro. 

 case (Z_lt_dec o1 (-2)).

 intro. 

 case (Z_lt_dec o2 (-2)).

 intros.

 left.

 right.

 split; repeat assumption.

 intro.

 right.

 intro.

 apply n0.

 case H.

 intros (H1, H2).

 apply False_ind.

 apply Z.lt_irrefl with o1.

 apply Z.lt_trans with (-2)%Z.

 assumption.

 apply Z.lt_trans with 2%Z.

 constructor.

 assumption.

 intros (H1, H2).

 assumption.

 

 intros.  

 right.

 intro.

 apply n0.

 case H.  

 intros (H1, H2).

 apply False_ind.

 apply n.

 assumption.

 intros (H1, H2).

 assumption.

Qed.



Lemma inside_square_2_dec_inf :

 forall o1 o2 : Z, {inside_square_2 o1 o2} + {~ inside_square_2 o1 o2}.

Proof.

 intros.

 case (Z_lt_dec 2 o1).

 intro.

 case (Z_lt_dec o2 (-2)).

 intros.

 left.

 left. 

 split; repeat assumption.

 intro.

 right. 

 intro.

 apply n.

 case H. 

 intros (H1, H2).

 assumption.

 intros (H1, H2).

 apply False_ind.

 apply Z.lt_irrefl with o1.

 apply Z.lt_trans with (-2)%Z.

 assumption.

 apply Z.lt_trans with 2%Z.

 constructor.

 assumption.



 intro. 

 case (Z_lt_dec o1 (-2)).

 intro. 

 case (Z_lt_dec 2 o2).

 intros.

 left.

 right.

 split; repeat assumption.

 intro.

 right.

 intro.

 apply n0.

 case H.

 intros (H1, H2).

 apply False_ind.

 apply Z.lt_irrefl with o1.

 apply Z.lt_trans with (-2)%Z.

 assumption.

 apply Z.lt_trans with 2%Z.

 constructor.

 assumption.

 intros (H1, H2).

 assumption.

 

 intros.  

 right.

 intro.

 apply n0.

 case H.  

 intros (H1, H2).

 apply False_ind.

 apply n.

 assumption.

 intros (H1, H2).

 assumption.

Qed.



Inductive Qquadratic_sg_denom_nonzero :

Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Prop :=

  | Qquadratic_signok0 :

      forall (e f g h : Z) (p1 p2 : Qpositive),

      p2 = One ->

      Qhomographic_sg_denom_nonzero (e + f) (g + h) p1 ->

      Qquadratic_sg_denom_nonzero e f g h p1 p2

  | Qquadratic_signok0' :

      forall (e f g h : Z) (p1 p2 : Qpositive),

      p1 = One ->

      Qhomographic_sg_denom_nonzero (e + g) (f + h) p2 ->

      Qquadratic_sg_denom_nonzero e f g h p1 p2

  | Qquadratic_signok1 :

      forall (e f g h : Z) (p1 p2 : Qpositive),

      Qquadratic_sg_denom_nonzero e (e + f)%Z (e + g)%Z 

        (e + f + g + h)%Z p1 p2 ->

      Qquadratic_sg_denom_nonzero e f g h (nR p1) (nR p2)

  | Qquadratic_signok2 :

      forall (e f g h : Z) (p1 p2 : Qpositive),

      Qquadratic_sg_denom_nonzero (e + f)%Z f (e + f + g + h)%Z 

        (f + h)%Z p1 p2 ->

      Qquadratic_sg_denom_nonzero e f g h (nR p1) (dL p2)

  | Qquadratic_signok3 :

      forall (e f g h : Z) (p1 p2 : Qpositive),

      Qquadratic_sg_denom_nonzero (e + g)%Z (e + f + g + h)%Z g 

        (g + h)%Z p1 p2 ->

      Qquadratic_sg_denom_nonzero e f g h (dL p1) (nR p2)

  | Qquadratic_signok4 :

      forall (e f g h : Z) (p1 p2 : Qpositive),

      Qquadratic_sg_denom_nonzero (e + f + g + h)%Z 

        (f + h)%Z (g + h)%Z h p1 p2 ->

      Qquadratic_sg_denom_nonzero e f g h (dL p1) (dL p2).



Lemma Qquadratic_signok_0 :

 forall (e f g h : Z) (p2 : Qpositive),

 Qquadratic_sg_denom_nonzero e f g h One p2 ->

 Qhomographic_sg_denom_nonzero (e + g) (f + h) p2.

Proof.

 intros.

 inversion H.

 inversion H1.

 apply Qhomographic_signok0.

 assumption.

 replace (e + g + (f + h))%Z with (e + f + (g + h))%Z.

 assumption.

 abstract ring.

 assumption.

Defined.



Lemma Qquadratic_signok_0' :

 forall (e f g h : Z) (p1 : Qpositive),

 Qquadratic_sg_denom_nonzero e f g h p1 One ->

 Qhomographic_sg_denom_nonzero (e + f) (g + h) p1.

Proof.

 intros.

 inversion H.

 assumption.

 inversion H1.

 apply Qhomographic_signok0.

 assumption.

 replace (e + f + (g + h))%Z with (e + g + (f + h))%Z.

 assumption.

 abstract ring.

Defined.



Lemma Qquadratic_signok_1 :

 forall (e f g h : Z) (p1 p2 : Qpositive),

 Qquadratic_sg_denom_nonzero e f g h (nR p1) (nR p2) ->

 Qquadratic_sg_denom_nonzero e (e + f) (e + g) (e + f + g + h) p1 p2.

Proof.

 intros.

 inversion H.

 discriminate H0.

 discriminate H0.

 assumption.

Defined.



Lemma Qquadratic_signok_2 :

 forall (e f g h : Z) (p1 p2 : Qpositive),

 Qquadratic_sg_denom_nonzero e f g h (nR p1) (dL p2) ->

 Qquadratic_sg_denom_nonzero (e + f) f (e + f + g + h) (f + h) p1 p2.

Proof.

 intros.

 inversion H.

 discriminate H0.

 discriminate H0.

 assumption.

Defined.



Lemma Qquadratic_signok_3 :

 forall (e f g h : Z) (p1 p2 : Qpositive),

 Qquadratic_sg_denom_nonzero e f g h (dL p1) (nR p2) ->

 Qquadratic_sg_denom_nonzero (e + g) (e + f + g + h) g (g + h) p1 p2.

Proof.

 intros.

 inversion H.

 discriminate H0.

 discriminate H0.

 assumption.

Defined.



Lemma Qquadratic_signok_4 :

 forall (e f g h : Z) (p1 p2 : Qpositive),

 Qquadratic_sg_denom_nonzero e f g h (dL p1) (dL p2) ->

 Qquadratic_sg_denom_nonzero (e + f + g + h) (f + h) (g + h) h p1 p2.

Proof.

 intros.

 inversion H.

 discriminate H0.

 discriminate H0.

 assumption.

Defined.



Fixpoint Qquadratic_sign (a b c d e f g h : Z) (p1 p2 : Qpositive) {struct p1} :

  forall (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

  Z * (Z * (Z * (Z * Z)) * (Z * (Z * (Z * Z))) * (Qpositive * Qpositive)).

set (o1 := outside_square a b c d) in *.

set (o2 := outside_square e f g h) in *.

destruct p1 as [xs| xs| ].

 

 destruct p2 as [ys| ys| ]; intro H_Qquadratic_sg_denom_nonzero.

  

  case (three_integers_dec_inf b c d).  

   

   intro Hbcd.

   

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    exact

     ((Z.sgn a * Z.sgn e)%Z,

     (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

    

    case (Z_lt_dec 2 o2).

     

     intros H_o2_gt_2 Hfgh'.

     exact (Z.sgn a, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

     case (Z_lt_dec o2 (-2)).

      

      intros H_o2_lt_min_2 H_o2_gt_2' Hefg'.

      exact

       ((- Z.sgn a)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

       

      intros H_o2_lt_min_2' H_o2_gt_2' Hfgh'.

      refine

       (Qquadratic_sign a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 

          (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys _).  

      apply Qquadratic_signok_1.

      assumption. 

   

   intro Hbcd'.  

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    case (Z_lt_dec 2 o1).

     

     intros H_o1_gt_2.

     exact (Z.sgn e, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

     case (Z_lt_dec o1 (-2)).

      

      intros H_o1_lt_min_2 H_o1_gt_2'.

      exact

       ((- Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

      

      intros H_o1_lt_min_2' H_o1_gt_2'. 

      refine

       (Qquadratic_sign a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 

          (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys _).  

      apply Qquadratic_signok_1.

      assumption. 

    

    intro Hfgh'.

    case (inside_square_1_dec_inf o1 o2).    

     

     intro H_inside_1.

     exact (1%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

     

     intro H_inside_1'.

     case (inside_square_2_dec_inf o1 o2).    

      

      intro H_inside_2.

      exact ((-1)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, nR ys))).

      

      intros H_inside_2'. 

      refine

       (Qquadratic_sign a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 

          (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys _).  

      apply Qquadratic_signok_1.

      assumption. 

  

  case (three_integers_dec_inf b c d).  

   

   intro Hbcd.

   

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    exact

     ((Z.sgn a * Z.sgn e)%Z,

     (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

    

    case (Z_lt_dec 2 o2).

     

     intros H_o2_gt_2 Hfgh'.

     exact (Z.sgn a, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

     case (Z_lt_dec o2 (-2)).

      

      intros H_o2_lt_min_2 H_o2_gt_2' Hefg'.

      exact

       ((- Z.sgn a)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

       

      intros H_o2_lt_min_2' H_o2_gt_2' Hfgh'.

      refine

       (Qquadratic_sign (a + b)%Z b (a + b + c + d)%Z 

          (b + d)%Z (e + f)%Z f (e + f + g + h)%Z (f + h)%Z xs ys _). 

      apply Qquadratic_signok_2.

      assumption. 

   

   intro Hbcd'.  

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    case (Z_lt_dec 2 o1).

     

     intros H_o1_gt_2.

     exact (Z.sgn e, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

     case (Z_lt_dec o1 (-2)).

      

      intros H_o1_lt_min_2 H_o1_gt_2'.

      exact

       ((- Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

      

      intros H_o1_lt_min_2' H_o1_gt_2'. 

      refine

       (Qquadratic_sign (a + b)%Z b (a + b + c + d)%Z 

          (b + d)%Z (e + f)%Z f (e + f + g + h)%Z (f + h)%Z xs ys _). 

      apply Qquadratic_signok_2.

      assumption. 

    

    intro Hfgh'.

    case (inside_square_1_dec_inf o1 o2).    

     

     intro H_inside_1.

     exact (1%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

     

     intro H_inside_1'.

     case (inside_square_2_dec_inf o1 o2).    

      

      intro H_inside_2.

      exact ((-1)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (nR xs, dL ys))).

      

      intros H_inside_2'. 

      refine

       (Qquadratic_sign (a + b)%Z b (a + b + c + d)%Z 

          (b + d)%Z (e + f)%Z f (e + f + g + h)%Z (f + h)%Z xs ys _). 

      apply Qquadratic_signok_2.

      assumption.    

  

  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).

  intro H_Qhomographic_sg_denom_nonzero.

  set

   (L3 :=

    Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 

      (nR xs) H_Qhomographic_sg_denom_nonzero) in *.

  set (l1 := fst L3) in *.

  set (l2 := fst (snd L3)) in *.

  set (l3 := snd (snd L3)) in *.

  set (na := fst l2) in *.

  set (nb := fst (snd l2)) in *.

  set (nc := fst (snd (snd l2))) in *.

  set (nd := snd (snd (snd l2))) in *.

  exact (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).



 destruct p2 as [ys| ys| ]; intro H_Qquadratic_sg_denom_nonzero.

  

  case (three_integers_dec_inf b c d).  

   

   intro Hbcd.

   

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    exact

     ((Z.sgn a * Z.sgn e)%Z,

     (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

    

    case (Z_lt_dec 2 o2).

     

     intros H_o2_gt_2 Hfgh'.

     exact (Z.sgn a, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

     case (Z_lt_dec o2 (-2)).

      

      intros H_o2_lt_min_2 H_o2_gt_2' Hefg'.

      exact

       ((- Z.sgn a)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

       

      intros H_o2_lt_min_2' H_o2_gt_2' Hfgh'.

      refine

       (Qquadratic_sign (a + c)%Z (a + b + c + d)%Z c 

          (c + d)%Z (e + g)%Z (e + f + g + h)%Z g (g + h)%Z xs ys _). 

      apply Qquadratic_signok_3.

      assumption. 

   

   intro Hbcd'.  

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    case (Z_lt_dec 2 o1).

     

     intros H_o1_gt_2.

     exact (Z.sgn e, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

     case (Z_lt_dec o1 (-2)).

      

      intros H_o1_lt_min_2 H_o1_gt_2'.

      exact

       ((- Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

      

      intros H_o1_lt_min_2' H_o1_gt_2'. 

      refine

       (Qquadratic_sign (a + c)%Z (a + b + c + d)%Z c 

          (c + d)%Z (e + g)%Z (e + f + g + h)%Z g (g + h)%Z xs ys _). 

      apply Qquadratic_signok_3.

      assumption. 

    

    intro Hfgh'.

    case (inside_square_1_dec_inf o1 o2).    

     

     intro H_inside_1.

     exact (1%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

     

     intro H_inside_1'.

     case (inside_square_2_dec_inf o1 o2).    

      

      intro H_inside_2.

      exact ((-1)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, nR ys))).

      

      intros H_inside_2'.

      refine

       (Qquadratic_sign (a + c)%Z (a + b + c + d)%Z c 

          (c + d)%Z (e + g)%Z (e + f + g + h)%Z g (g + h)%Z xs ys _). 

      apply Qquadratic_signok_3.

      assumption. 

  

  case (three_integers_dec_inf b c d).  

   

   intro Hbcd.

   

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    exact

     ((Z.sgn a * Z.sgn e)%Z,

     (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

    

    case (Z_lt_dec 2 o2).

     

     intros H_o2_gt_2 Hfgh'.

     exact (Z.sgn a, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

     case (Z_lt_dec o2 (-2)).

      

      intros H_o2_lt_min_2 H_o2_gt_2' Hefg'.

      exact

       ((- Z.sgn a)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

       

      intros H_o2_lt_min_2' H_o2_gt_2' Hfgh'.

      refine

       (Qquadratic_sign (a + b + c + d)%Z (b + d)%Z 

          (c + d)%Z d (e + f + g + h)%Z (f + h)%Z (g + h)%Z h xs ys _). 

      apply Qquadratic_signok_4.

      assumption. 

   

   intro Hbcd'.  

   case (three_integers_dec_inf f g h).  

    

    intro Hfgh.

    case (Z_lt_dec 2 o1).

     

     intros H_o1_gt_2.

     exact (Z.sgn e, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

     case (Z_lt_dec o1 (-2)).

      

      intros H_o1_lt_min_2 H_o1_gt_2'.

      exact

       ((- Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

      

      intros H_o1_lt_min_2' H_o1_gt_2'. 

      refine

       (Qquadratic_sign (a + b + c + d)%Z (b + d)%Z 

          (c + d)%Z d (e + f + g + h)%Z (f + h)%Z (g + h)%Z h xs ys _). 

      apply Qquadratic_signok_4.

      assumption. 

    

    intro Hfgh'.

    case (inside_square_1_dec_inf o1 o2).    

     

     intro H_inside_1.

     exact (1%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

     

     intro H_inside_1'.

     case (inside_square_2_dec_inf o1 o2).    

      

      intro H_inside_2.

      exact ((-1)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (dL xs, dL ys))).

      

      intros H_inside_2'. 

      refine

       (Qquadratic_sign (a + b + c + d)%Z (b + d)%Z 

          (c + d)%Z d (e + f + g + h)%Z (f + h)%Z (g + h)%Z h xs ys _). 

      apply Qquadratic_signok_4.

      assumption.    

  

  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).

  intro H_Qhomographic_sg_denom_nonzero.

  set

   (L3 :=

    Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 

      (dL xs) H_Qhomographic_sg_denom_nonzero) in *.

  set (l1 := fst L3) in *.

  set (l2 := fst (snd L3)) in *.

  set (l3 := snd (snd L3)) in *.

  set (na := fst l2) in *.

  set (nb := fst (snd l2)) in *.

  set (nc := fst (snd (snd l2))) in *.

  set (nd := snd (snd (snd l2))) in *.

  exact (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

 

 intros H_Qquadratic_sg_denom_nonzero.

 generalize (Qquadratic_signok_0 _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).

 intros H_Qhomographic_sg_denom_nonzero.

 set

  (L3 :=

   Qhomographic_sign (a + c) (b + d) (e + g) (f + h) p2

     H_Qhomographic_sg_denom_nonzero) in *.

 set (l1 := fst L3) in *.

 set (l2 := fst (snd L3)) in *.

 set (l3 := snd (snd L3)) in *.

 set (na := fst l2) in *.

 set (nb := fst (snd l2)) in *.

 set (nc := fst (snd (snd l2))) in *.

 set (nd := snd (snd (snd l2))) in *.

 exact (l1, (0%Z, (0%Z, (na, nb)), (0%Z, (0%Z, (nc, nd))), (One, l3))).

Defined.



Scheme Qquadratic_sg_denom_nonzero_inv_dep :=

  Induction for Qquadratic_sg_denom_nonzero Sort Prop.



Lemma Qquadratic_sign_equal :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H1 H2 : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 Qquadratic_sign a b c d e f g h p1 p2 H1 =

 Qquadratic_sign a b c d e f g h p1 p2 H2.

Proof.

 intros.

 generalize H2 H1 a b c d.

 intro.

 elim H0 using Qquadratic_sg_denom_nonzero_inv_dep.



  intros.

  destruct p3 as [p| p| ]; rename q into s.

  

  discriminate e1.

  

  discriminate e1.

  

  destruct p0 as [p| p| ].

  

  unfold Qquadratic_sign in |- *.

  assert

   (Qhomographic_sign (a0 + b0) (c0 + d0) (e0 + f0) 

      (g0 + h0) (nR p) (Qquadratic_signok_0' e0 f0 g0 h0 (nR p) H3) =

    Qhomographic_sign (a0 + b0) (c0 + d0) (e0 + f0) 

      (g0 + h0) (nR p)

      (Qquadratic_signok_0' e0 f0 g0 h0 (nR p)

         (Qquadratic_signok0 e0 f0 g0 h0 (nR p) One e1 s))).

  apply Qhomographic_sign_equal.

  rewrite H.

  reflexivity.

  

  unfold Qquadratic_sign in |- *.

  assert

   (Qhomographic_sign (a0 + b0) (c0 + d0) (e0 + f0) 

      (g0 + h0) (dL p) (Qquadratic_signok_0' e0 f0 g0 h0 (dL p) H3) =

    Qhomographic_sign (a0 + b0) (c0 + d0) (e0 + f0) 

      (g0 + h0) (dL p)

      (Qquadratic_signok_0' e0 f0 g0 h0 (dL p)

         (Qquadratic_signok0 e0 f0 g0 h0 (dL p) One e1 s))).

  apply Qhomographic_sign_equal.

  rewrite H.

  reflexivity.

  

  reflexivity.



  intros.

  destruct p0 as [p| p| ]; rename q into s.

  

  discriminate e1.

  

  discriminate e1.

  

  simpl in |- *.

  assert

   (Qhomographic_sign (a0 + c0) (b0 + d0) (e0 + g0) 

      (f0 + h0) p3 (Qquadratic_signok_0 e0 f0 g0 h0 p3 H3) =

    Qhomographic_sign (a0 + c0) (b0 + d0) (e0 + g0) (f0 + h0) p3 s).

  apply Qhomographic_sign_equal.

  rewrite H.

  reflexivity.



  intros.

  simpl in |- *.

  rewrite H.

  reflexivity.

  

  intros.

  simpl in |- *.

  rewrite H.

  reflexivity.

  

  intros.

  simpl in |- *.

  rewrite H.

  reflexivity.

  

  intros.

  simpl in |- *.

  rewrite H.

  reflexivity.

Qed.



Lemma Qquadratic_sign_equal_strong :

 forall (a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 g1 g2 h1 h2 : Z)

   (x1 x2 y1 y2 : Qpositive)

   (H_ok_1 : Qquadratic_sg_denom_nonzero e1 f1 g1 h1 x1 y1)

   (H_ok_2 : Qquadratic_sg_denom_nonzero e2 f2 g2 h2 x2 y2),

 a1 = a2 ->

 b1 = b2 ->

 c1 = c2 ->

 d1 = d2 ->

 e1 = e2 ->

 f1 = f2 ->

 g1 = g2 ->

 h1 = h2 ->

 x1 = x2 ->

 y1 = y2 ->

 Qquadratic_sign a1 b1 c1 d1 e1 f1 g1 h1 x1 y1 H_ok_1 =

 Qquadratic_sign a2 b2 c2 d2 e2 f2 g2 h2 x2 y2 H_ok_2.

Proof.

 intros; generalize H_ok_2;

  repeat

   match goal with

   | id1:(?X1 = ?X2) |- ?X3 => rewrite <- id1; clear id1

   end; intro; apply Qquadratic_sign_equal.

Qed.



Lemma Qquadratic_sign_One_y :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (l1 na nb nc nd : Z) (l3 : Qpositive)

   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 

                                        (e + g) (f + h) p2),

 (l1, (na, (nb, (nc, nd)), l3)) =

 Qhomographic_sign (a + c) (b + d) (e + g) (f + h) p2

   H_Qhomographic_sg_denom_nonzero ->

 p1 = One ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (l1, (0%Z, (0%Z, (na, nb)), (0%Z, (0%Z, (nc, nd))), (One, l3))).

Proof.

 intros.

 destruct p1 as [q| q| ]; repeat (apply False_ind; discriminate H0).

 simpl in |- *.

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0 e f g h p2

                              H_Qquadratic_sg_denom_nonzero)

                         (H2 := H_Qhomographic_sg_denom_nonzero).

 rewrite <- H.

 reflexivity.

Qed.



Lemma Qquadratic_sign_nRdL_One :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (l1 na nb nc nd : Z) (l3 : Qpositive)

   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 

                                        (e + f) (g + h) p1),

 (l1, (na, (nb, (nc, nd)), l3)) =

 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) p1

   H_Qhomographic_sg_denom_nonzero ->

 p1 <> One ->

 p2 = One ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Proof.

 intros.

 destruct p2 as [q| q| ]; repeat (apply False_ind; discriminate H1).

 destruct p1 as [p| p| ].

 unfold Qquadratic_sign in |- *.

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0' e f g h 

                              (nR p) H_Qquadratic_sg_denom_nonzero)

                         (H2 := H_Qhomographic_sg_denom_nonzero).

 rewrite <- H.

 reflexivity.



 unfold Qquadratic_sign in |- *. 

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0' e f g h 

                              (dL p) H_Qquadratic_sg_denom_nonzero)

                         (H2 := H_Qhomographic_sg_denom_nonzero).

 rewrite <- H.

 reflexivity.

 Falsum.

Qed.  



Lemma Qquadratic_sign_nR_One_1 :

 forall (a b c d e f g h : Z) (p1 xs p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (l1 na nb nc nd : Z) (l3 : Qpositive)

   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 

                                        (e + f) (g + h) p1),

 (l1, (na, (nb, (nc, nd)), l3)) =

 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) p1

   H_Qhomographic_sg_denom_nonzero ->

 p1 = nR xs ->

 p2 = One ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Proof.

 intros.

 generalize H_Qquadratic_sg_denom_nonzero H_Qhomographic_sg_denom_nonzero H.

 rewrite H0.

 intros.

 destruct p2 as [q| q| ]; repeat (apply False_ind; discriminate H1).



 unfold Qquadratic_sign in |- *.

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0' e f g h 

                              (nR xs) H_Qquadratic_sg_denom_nonzero0)

                         (H2 := H_Qhomographic_sg_denom_nonzero0).

 rewrite <- H2.

 reflexivity.

Qed.  



Lemma Qquadratic_sign_nR_One_2 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h

                                      (nR p1) p2) (l1 na nb nc nd : Z)

   (l3 : Qpositive)

   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 

                                        (e + f) (g + h) 

                                        (nR p1)),

 (l1, (na, (nb, (nc, nd)), l3)) =

 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 

   (nR p1) H_Qhomographic_sg_denom_nonzero ->

 p2 = One ->

 Qquadratic_sign a b c d e f g h (nR p1) p2 H_Qquadratic_sg_denom_nonzero =

 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Proof.

 intros.

 destruct p2 as [q| q| ]; repeat (apply False_ind; discriminate H0).



 unfold Qquadratic_sign in |- *.

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0' e f g h 

                              (nR p1) H_Qquadratic_sg_denom_nonzero)

                         (H2 := H_Qhomographic_sg_denom_nonzero).

 rewrite <- H.

 reflexivity.

Qed.  



Lemma Qquadratic_sign_dL_One_1 :

 forall (a b c d e f g h : Z) (p1 xs p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (l1 na nb nc nd : Z) (l3 : Qpositive)

   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 

                                        (e + f) (g + h) p1),

 (l1, (na, (nb, (nc, nd)), l3)) =

 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) p1

   H_Qhomographic_sg_denom_nonzero ->

 p1 = dL xs ->

 p2 = One ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Proof.

 intros.

 generalize H_Qquadratic_sg_denom_nonzero H_Qhomographic_sg_denom_nonzero H.

 rewrite H0.

 intros.

 destruct p2 as [q| q| ]; repeat (apply False_ind; discriminate H1).



 unfold Qquadratic_sign in |- *.

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0' e f g h 

                              (dL xs) H_Qquadratic_sg_denom_nonzero0)

                         (H2 := H_Qhomographic_sg_denom_nonzero0).

 rewrite <- H2.

 reflexivity.

Qed.  



Lemma Qquadratic_sign_dL_One_2 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h

                                      (dL p1) p2) (l1 na nb nc nd : Z)

   (l3 : Qpositive)

   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 

                                        (e + f) (g + h) 

                                        (dL p1)),

 (l1, (na, (nb, (nc, nd)), l3)) =

 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 

   (dL p1) H_Qhomographic_sg_denom_nonzero ->

 p2 = One ->

 Qquadratic_sign a b c d e f g h (dL p1) p2 H_Qquadratic_sg_denom_nonzero =

 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Proof.

 intros.

 destruct p2 as [q| q| ]; repeat (apply False_ind; discriminate H0).



 unfold Qquadratic_sign in |- *.

 rewrite

  Qhomographic_sign_equal

                          with

                          (H1 := 

                            Qquadratic_signok_0' e f g h 

                              (dL p1) H_Qquadratic_sg_denom_nonzero)

                         (H2 := H_Qhomographic_sg_denom_nonzero).

 rewrite <- H.

 reflexivity.

Qed.  



Lemma Qquadratic_sign_nRdL_nRdL_1 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 ((Z.sgn a * Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d);

       [ intro; case (three_integers_dec_inf f g h);

          [ intro; reflexivity | intro H3; Falsum ]

       | intro H3; Falsum ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed. 



Lemma Qquadratic_sign_nRdL_nRdL_2 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 (2 < outside_square e f g h)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (Z.sgn a, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).             

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d);

       [ intro; case (three_integers_dec_inf f g h);

          [ intro H4; Falsum

          | case (Z_lt_dec 2 (outside_square e f g h));

             [ intro; reflexivity | intro H4; Falsum ] ]

       | intro H4; Falsum ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed.



Lemma Qquadratic_sign_nRdL_nRdL_3 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ (2 < outside_square e f g h)%Z ->

 (outside_square e f g h < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 ((- Z.sgn a)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).             

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d);

       [ intro; case (three_integers_dec_inf f g h);

          [ intro H5; Falsum

          | intro n; case (Z_lt_dec 2 (outside_square e f g h));

             [ intro H5; Falsum

             | intro n0; case (Z_lt_dec (outside_square e f g h) (-2));

                [ intro; reflexivity | intro H5; Falsum ] ] ]

       | intro H5; Falsum ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed.



Lemma Qquadratic_sign_nR_nR_4 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_II : Qquadratic_sg_denom_nonzero e 

                                         (e + f) (e + g) 

                                         (e + f + g + h) xs ys),

 p1 = nR xs ->

 p2 = nR ys ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ (2 < outside_square e f g h)%Z ->

 ~ (outside_square e f g h < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign a (a + b) (a + c) (a + b + c + d) e 

   (e + f) (e + g) (e + f + g + h) xs ys H_Qquadratic_sg_denom_nonzero_II.

Proof.

 intros.

 generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_II.

 rewrite H.

 rewrite H0.

 intros.



 simpl in |- *.

 case (three_integers_dec_inf b c d).

  intro.

  case (three_integers_dec_inf f g h).

   intro H5.

   Falsum.

   intro n.

   case (Z_lt_dec 2 (outside_square e f g h)).

    intro H5.

    Falsum.

    intro n0.

    case (Z_lt_dec (outside_square e f g h) (-2)).

       intro H5.

       Falsum.

       intro n1.

       apply Qquadratic_sign_equal.

  intro H5.

  Falsum.

Qed.



Lemma Qquadratic_sign_nR_dL_4 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_IO : Qquadratic_sg_denom_nonzero 

                                         (e + f) f 

                                         (e + f + g + h) 

                                         (f + h) xs ys),

 p1 = nR xs ->

 p2 = dL ys ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ (2 < outside_square e f g h)%Z ->

 ~ (outside_square e f g h < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + b) b (a + b + c + d) (b + d) 

   (e + f) f (e + f + g + h) (f + h) xs ys H_Qquadratic_sg_denom_nonzero_IO.

Proof.

 intros.

 generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_IO.

 rewrite H.

 rewrite H0.

 intros.



 simpl in |- *.

 case (three_integers_dec_inf b c d).

  intro.

  case (three_integers_dec_inf f g h).

   intro H5.

   Falsum.

   intro n.

   case (Z_lt_dec 2 (outside_square e f g h)).

    intro H5.

    Falsum.

    intro n0.

    case (Z_lt_dec (outside_square e f g h) (-2)).

       intro H5.

       Falsum.

       intro n1.

       apply Qquadratic_sign_equal.

  intro H5.

  Falsum.

Qed.



Lemma Qquadratic_sign_dL_nR_4 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_OI : Qquadratic_sg_denom_nonzero 

                                         (e + g) (e + f + g + h) g 

                                         (g + h) xs ys),

 p1 = dL xs ->

 p2 = nR ys ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ (2 < outside_square e f g h)%Z ->

 ~ (outside_square e f g h < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + c) (a + b + c + d) c (c + d) 

   (e + g) (e + f + g + h) g (g + h) xs ys H_Qquadratic_sg_denom_nonzero_OI.

Proof.

 intros.

 generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_OI.

 rewrite H.

 rewrite H0.

 intros.



 simpl in |- *.

 case (three_integers_dec_inf b c d).

  intro.

  case (three_integers_dec_inf f g h).

   intro H5.

   Falsum.

   intro n.

   case (Z_lt_dec 2 (outside_square e f g h)).

    intro H5.

    Falsum.

    intro n0.

    case (Z_lt_dec (outside_square e f g h) (-2)).

       intro H5.

       Falsum.

       intro n1.

       apply Qquadratic_sign_equal.

  intro H5.

  Falsum.

Qed.



Lemma Qquadratic_sign_dL_dL_4 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_OO : Qquadratic_sg_denom_nonzero

                                         (e + f + g + h) 

                                         (f + h) (g + h) h xs ys),

 p1 = dL xs ->

 p2 = dL ys ->

 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ (2 < outside_square e f g h)%Z ->

 ~ (outside_square e f g h < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + b + c + d) (b + d) (c + d) d 

   (e + f + g + h) (f + h) (g + h) h xs ys H_Qquadratic_sg_denom_nonzero_OO.

Proof.

 intros.

 generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_OO.

 rewrite H.

 rewrite H0.

 intros.



 simpl in |- *.

 case (three_integers_dec_inf b c d).

  intro.

  case (three_integers_dec_inf f g h).

   intro H5.

   Falsum.

   intro n.

   case (Z_lt_dec 2 (outside_square e f g h)).

    intro H5.

    Falsum.

    intro n0.

    case (Z_lt_dec (outside_square e f g h) (-2)).

       intro H5.

       Falsum.

       intro n1.

       apply Qquadratic_sign_equal.

  intro H5.

  Falsum.

Qed.



Lemma Qquadratic_sign_nRdL_nRdL_5 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 (2 < outside_square a b c d)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (Z.sgn e, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d); intro Hbcd;

       [ Falsum

       | case (three_integers_dec_inf f g h); intro Hfgh;

          [ case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

             [ reflexivity | Falsum ]

          | Falsum ] ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed.



Lemma Qquadratic_sign_nRdL_nRdL_6 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 ~ (2 < outside_square a b c d)%Z ->

 (outside_square a b c d < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 ((- Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d); intro Hbcd;

       [ Falsum

       | case (three_integers_dec_inf f g h); intro Hfgh;

          [ case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

             [ Falsum

             | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

                [ reflexivity | Falsum ] ]

          | Falsum ] ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed.



Lemma Qquadratic_sign_nR_nR_7 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_II : Qquadratic_sg_denom_nonzero e 

                                         (e + f) (e + g) 

                                         (e + f + g + h) xs ys),

 p1 = nR xs ->

 p2 = nR ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 ~ (2 < outside_square a b c d)%Z ->

 ~ (outside_square a b c d < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign a (a + b) (a + c) (a + b + c + d) e 

   (e + f) (e + g) (e + f + g + h) xs ys H_Qquadratic_sg_denom_nonzero_II.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_II;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ Falsum

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ Falsum | apply Qquadratic_sign_equal ] ]

     | Falsum ] ].

Qed.



Lemma Qquadratic_sign_nR_dL_7 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_IO : Qquadratic_sg_denom_nonzero 

                                         (e + f) f 

                                         (e + f + g + h) 

                                         (f + h) xs ys),

 p1 = nR xs ->

 p2 = dL ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 ~ (2 < outside_square a b c d)%Z ->

 ~ (outside_square a b c d < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + b) b (a + b + c + d) (b + d) 

   (e + f) f (e + f + g + h) (f + h) xs ys H_Qquadratic_sg_denom_nonzero_IO.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_IO;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ Falsum

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ Falsum | apply Qquadratic_sign_equal ] ]

     | Falsum ] ].

Qed.



Lemma Qquadratic_sign_dL_nR_7 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_OI : Qquadratic_sg_denom_nonzero 

                                         (e + g) (e + f + g + h) g 

                                         (g + h) xs ys),

 p1 = dL xs ->

 p2 = nR ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 ~ (2 < outside_square a b c d)%Z ->

 ~ (outside_square a b c d < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + c) (a + b + c + d) c (c + d) 

   (e + g) (e + f + g + h) g (g + h) xs ys H_Qquadratic_sg_denom_nonzero_OI.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_OI;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ Falsum

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ Falsum | apply Qquadratic_sign_equal ] ]

     | Falsum ] ].

Qed.



Lemma Qquadratic_sign_dL_dL_7 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_OO : Qquadratic_sg_denom_nonzero

                                         (e + f + g + h) 

                                         (f + h) (g + h) h xs ys),

 p1 = dL xs ->

 p2 = dL ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->

 ~ (2 < outside_square a b c d)%Z ->

 ~ (outside_square a b c d < -2)%Z ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + b + c + d) (b + d) (c + d) d 

   (e + f + g + h) (f + h) (g + h) h xs ys H_Qquadratic_sg_denom_nonzero_OO.

Proof. 

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_OO;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ Falsum

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ Falsum | apply Qquadratic_sign_equal ] ]

     | Falsum ] ].

Qed.



Lemma Qquadratic_sign_nRdL_nRdL_8 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 inside_square_1 (outside_square a b c d) (outside_square e f g h) ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 (1%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d); intro Hbcd;

       [ Falsum

       | case (three_integers_dec_inf f g h); intro Hfgh;

          [ Falsum

          | case

             (inside_square_1_dec_inf (outside_square a b c d)

                (outside_square e f g h)); intro H_inside_1;

             [ reflexivity | Falsum ] ] ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed.



Lemma Qquadratic_sign_nRdL_nRdL_9 :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 p1 <> One ->

 p2 <> One ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->

 inside_square_2 (outside_square a b c d) (outside_square e f g h) ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 ((-1)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Proof.

 intros.

 destruct p1 as [q| q| ];

  solve [ Falsum ] ||

    let T_local :=

     (simpl in |- *; case (three_integers_dec_inf b c d); intro Hbcd;

       [ Falsum

       | case (three_integers_dec_inf f g h); intro Hfgh;

          [ Falsum

          | case

             (inside_square_1_dec_inf (outside_square a b c d)

                (outside_square e f g h)); intro H_inside_1;

             [ Falsum

             | case

                (inside_square_2_dec_inf (outside_square a b c d)

                   (outside_square e f g h)); intro H_inside_2;

                [ reflexivity | Falsum ] ] ] ]) in

    (destruct p2 as [q0| q0| ]; [ T_local | T_local | Falsum ]).

Qed.



Lemma Qquadratic_sign_nR_nR_10 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_II : Qquadratic_sg_denom_nonzero e 

                                         (e + f) (e + g) 

                                         (e + f + g + h) xs ys),

 p1 = nR xs ->

 p2 = nR ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->

 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign a (a + b) (a + c) (a + b + c + d) e 

   (e + f) (e + g) (e + f + g + h) xs ys H_Qquadratic_sg_denom_nonzero_II.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_II;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ Falsum

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ Falsum

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ Falsum | apply Qquadratic_sign_equal ] ] ] ].

Qed.



Lemma Qquadratic_sign_nR_dL_10 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_IO : Qquadratic_sg_denom_nonzero 

                                         (e + f) f 

                                         (e + f + g + h) 

                                         (f + h) xs ys),

 p1 = nR xs ->

 p2 = dL ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->

 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + b) b (a + b + c + d) (b + d) 

   (e + f) f (e + f + g + h) (f + h) xs ys H_Qquadratic_sg_denom_nonzero_IO.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_IO;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ Falsum

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ Falsum

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ Falsum | apply Qquadratic_sign_equal ] ] ] ].

Qed.



Lemma Qquadratic_sign_dL_nR_10 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_OI : Qquadratic_sg_denom_nonzero 

                                         (e + g) (e + f + g + h) g 

                                         (g + h) xs ys),

 p1 = dL xs ->

 p2 = nR ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->

 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + c) (a + b + c + d) c (c + d) 

   (e + g) (e + f + g + h) g (g + h) xs ys H_Qquadratic_sg_denom_nonzero_OI.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_OI;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ Falsum

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ Falsum

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ Falsum | apply Qquadratic_sign_equal ] ] ] ].

Qed.



Lemma Qquadratic_sign_dL_dL_10 :

 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)

   (H_Qquadratic_sg_denom_nonzero_OO : Qquadratic_sg_denom_nonzero

                                         (e + f + g + h) 

                                         (f + h) (g + h) h xs ys),

 p1 = dL xs ->

 p2 = dL ys ->

 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->

 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->

 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->

 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->

 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =

 Qquadratic_sign (a + b + c + d) (b + d) (c + d) d 

   (e + f + g + h) (f + h) (g + h) h xs ys H_Qquadratic_sg_denom_nonzero_OO.

Proof.

 intros;

  generalize H_Qquadratic_sg_denom_nonzero H_Qquadratic_sg_denom_nonzero_OO;

  rewrite H; rewrite H0; intros; simpl in |- *;

  case (three_integers_dec_inf b c d); intro Hbcd;

  [ Falsum

  | case (three_integers_dec_inf f g h); intro Hfgh;

     [ Falsum

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ Falsum

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ Falsum | apply Qquadratic_sign_equal ] ] ] ].

Qed.



Lemma Qquadratic_sign_sign :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 let (l1, L2) :=

     Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero in

 {l1 = 0%Z} + {l1 = 1%Z} + {l1 = (-1)%Z}.

Proof.

 fix Qquadratic_sign_sign 9.

 intros.

 

  destruct p1 as [p| p| ].

   destruct p2 as [p0| p0| ].

     

    case (three_integers_dec_inf b c d); intro Hbcd;

     case (three_integers_dec_inf f g h); intro Hfgh;

     [ rewrite Qquadratic_sign_nRdL_nRdL_1;

        try solve [ discriminate | assumption ]; rewrite <- Zsgn_15;

        apply Zsgn_1

     | case (Z_lt_dec 2 (outside_square e f g h)); intro Ho2;

        [ rewrite Qquadratic_sign_nRdL_nRdL_2;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square e f g h) (-2)); intro Ho2';

           [ rewrite Qquadratic_sign_nRdL_nRdL_3;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_4 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_4 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_4 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_4 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_5;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ rewrite Qquadratic_sign_nRdL_nRdL_6;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_7 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_7 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_7 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_7 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_8;

           try solve [ discriminate | assumption ]; 

           left; right; reflexivity

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ rewrite Qquadratic_sign_nRdL_nRdL_9;

              try solve [ discriminate | assumption ]; 

              right; reflexivity

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_10 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_10 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_10 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_10 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             end; apply Qquadratic_sign_sign ] ] ].

  

    case (three_integers_dec_inf b c d); intro Hbcd;

     case (three_integers_dec_inf f g h); intro Hfgh;

     [ rewrite Qquadratic_sign_nRdL_nRdL_1;

        try solve [ discriminate | assumption ]; rewrite <- Zsgn_15;

        apply Zsgn_1

     | case (Z_lt_dec 2 (outside_square e f g h)); intro Ho2;

        [ rewrite Qquadratic_sign_nRdL_nRdL_2;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square e f g h) (-2)); intro Ho2';

           [ rewrite Qquadratic_sign_nRdL_nRdL_3;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_4 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_4 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_4 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_4 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_5;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ rewrite Qquadratic_sign_nRdL_nRdL_6;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_7 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_7 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_7 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_7 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_8;

           try solve [ discriminate | assumption ]; 

           left; right; reflexivity

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ rewrite Qquadratic_sign_nRdL_nRdL_9;

              try solve [ discriminate | assumption ]; 

              right; reflexivity

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_10 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_10 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_10 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_10 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             end; apply Qquadratic_sign_sign ] ] ].

    

  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero);

   intro H_Qhomographic_sg_denom_nonzero;

   set

    (L3 :=

     Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 

       (nR p) H_Qhomographic_sg_denom_nonzero) in *; 

   set (l1' := fst L3) in *; set (l2 := fst (snd L3)) in *;

   set (l3 := snd (snd L3)) in *; set (na := fst l2) in *;

   set (nb := fst (snd l2)) in *; set (nc := fst (snd (snd l2))) in *;

   set (nd := snd (snd (snd l2))) in *;

   rewrite

    (Qquadratic_sign_nRdL_One a b c d e f g h (nR p) One

       H_Qquadratic_sg_denom_nonzero l1' na nb nc nd l3

       H_Qhomographic_sg_denom_nonzero);

   [ replace l1' with

      (h_sign (a + b) (c + d) (e + f) (g + h) (nR p)

         H_Qhomographic_sg_denom_nonzero);

      [ apply sg_sign_dec | reflexivity ]

   | fold L3 in |- *; repeat (apply pair_2; try reflexivity);

      discriminate || reflexivity

   | discriminate

   | reflexivity ].



  destruct p2 as [p0| p0| ].

      

    case (three_integers_dec_inf b c d); intro Hbcd;

     case (three_integers_dec_inf f g h); intro Hfgh;

     [ rewrite Qquadratic_sign_nRdL_nRdL_1;

        try solve [ discriminate | assumption ]; rewrite <- Zsgn_15;

        apply Zsgn_1

     | case (Z_lt_dec 2 (outside_square e f g h)); intro Ho2;

        [ rewrite Qquadratic_sign_nRdL_nRdL_2;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square e f g h) (-2)); intro Ho2';

           [ rewrite Qquadratic_sign_nRdL_nRdL_3;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_4 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_4 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_4 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_4 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_5;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ rewrite Qquadratic_sign_nRdL_nRdL_6;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_7 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_7 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_7 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_7 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_8;

           try solve [ discriminate | assumption ]; 

           left; right; reflexivity

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ rewrite Qquadratic_sign_nRdL_nRdL_9;

              try solve [ discriminate | assumption ]; 

              right; reflexivity

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_10 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_10 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_10 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_10 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             end; apply Qquadratic_sign_sign ] ] ].

  

    case (three_integers_dec_inf b c d); intro Hbcd;

     case (three_integers_dec_inf f g h); intro Hfgh;

     [ rewrite Qquadratic_sign_nRdL_nRdL_1;

        try solve [ discriminate | assumption ]; rewrite <- Zsgn_15;

        apply Zsgn_1

     | case (Z_lt_dec 2 (outside_square e f g h)); intro Ho2;

        [ rewrite Qquadratic_sign_nRdL_nRdL_2;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square e f g h) (-2)); intro Ho2';

           [ rewrite Qquadratic_sign_nRdL_nRdL_3;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_4 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_4 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_4 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_4 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho2 Ho2')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case (Z_lt_dec 2 (outside_square a b c d)); intro Ho1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_5;

           try solve [ discriminate | assumption ]; 

           apply Zsgn_1

        | case (Z_lt_dec (outside_square a b c d) (-2)); intro Ho1';

           [ rewrite Qquadratic_sign_nRdL_nRdL_6;

              try solve [ discriminate | assumption ]; 

              rewrite <- Zsgn_25; apply Zsgn_1

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_7 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_7 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_7 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_7 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh Ho1 Ho1')

                  

             end; apply Qquadratic_sign_sign ] ]

     | case

        (inside_square_1_dec_inf (outside_square a b c d)

           (outside_square e f g h)); intro H_inside_1;

        [ rewrite Qquadratic_sign_nRdL_nRdL_8;

           try solve [ discriminate | assumption ]; 

           left; right; reflexivity

        | case

           (inside_square_2_dec_inf (outside_square a b c d)

              (outside_square e f g h)); intro H_inside_2;

           [ rewrite Qquadratic_sign_nRdL_nRdL_9;

              try solve [ discriminate | assumption ]; 

              right; reflexivity

           | match goal with

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_nR_10 a b c d e f g h 

                     (nR p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_1 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (nR ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_nR_dL_10 a b c d e f g h 

                     (nR p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_2 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (nR ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_nR_10 a b c d e f g h 

                     (dL p) p (nR p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_3 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             | id1:(?X1 ?X2 ?X3 ?X4 ?X5 (dL ?X6) (dL ?X7)) |- ?X8 =>

                 rewrite

                  (Qquadratic_sign_dL_dL_10 a b c d e f g h 

                     (dL p) p (dL p0) p0 H_Qquadratic_sg_denom_nonzero

                     (Qquadratic_signok_4 e f g h p p0

                        H_Qquadratic_sg_denom_nonzero) 

                     (refl_equal _) (refl_equal _) Hbcd Hfgh H_inside_1

                     H_inside_2)

             end; apply Qquadratic_sign_sign ] ] ].

     

   generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero);

    intro H_Qhomographic_sg_denom_nonzero;

    set

     (L3 :=

      Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 

        (dL p) H_Qhomographic_sg_denom_nonzero) in *;

    set (l1' := fst L3) in *; set (l2 := fst (snd L3)) in *;

    set (l3 := snd (snd L3)) in *; set (na := fst l2) in *;

    set (nb := fst (snd l2)) in *; set (nc := fst (snd (snd l2))) in *;

    set (nd := snd (snd (snd l2))) in *;

    rewrite

     (Qquadratic_sign_nRdL_One a b c d e f g h (dL p) One

        H_Qquadratic_sg_denom_nonzero l1' na nb nc nd l3

        H_Qhomographic_sg_denom_nonzero);

    [ replace l1' with

       (h_sign (a + b) (c + d) (e + f) (g + h) (dL p)

          H_Qhomographic_sg_denom_nonzero);

       [ apply sg_sign_dec | reflexivity ]

    | fold L3 in |- *; repeat (apply pair_2; try reflexivity);

       discriminate || reflexivity

    | discriminate

    | reflexivity ].



  generalize (Qquadratic_signok_0 _ _ _ _ _ H_Qquadratic_sg_denom_nonzero);

   intro H_Qhomographic_sg_denom_nonzero;

   set

    (L3 :=

     Qhomographic_sign (a + c) (b + d) (e + g) (f + h) p2

       H_Qhomographic_sg_denom_nonzero) in *; set (l1' := fst L3) in *;

   set (l2 := fst (snd L3)) in *; set (l3 := snd (snd L3)) in *;

   set (na := fst l2) in *; set (nb := fst (snd l2)) in *;

   set (nc := fst (snd (snd l2))) in *; set (nd := snd (snd (snd l2))) in *;

   rewrite

    (Qquadratic_sign_One_y a b c d e f g h One p2

       H_Qquadratic_sg_denom_nonzero l1' na nb nc nd l3

       H_Qhomographic_sg_denom_nonzero);

   [ replace l1' with

      (h_sign (a + c) (b + d) (e + g) (f + h) p2

         H_Qhomographic_sg_denom_nonzero);

      [ apply sg_sign_dec | reflexivity ]

   | fold L3 in |- *; repeat (apply pair_2; try reflexivity);

      discriminate || reflexivity

   | reflexivity ].

Qed.



Definition q_sign (a b c d e f g h : Z) (p1 p2 : Qpositive)

  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=

  let (l1, L2) :=

      Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero in

  l1.



Lemma Qquadratic_sign_sign_dec :

 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)

   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),

 {q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 0%Z} +

 {q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z} +

 {q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z}.

Proof.

 intros.

 unfold q_sign in |- *.

 generalize

  (Qquadratic_sign_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero).

 case (Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero).

 intros l1 L2.

 trivial.

Qed.

