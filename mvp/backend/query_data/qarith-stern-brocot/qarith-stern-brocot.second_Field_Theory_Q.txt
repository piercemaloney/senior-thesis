
Require Export quadratic_correctness.
(* quadratic_correctness:
Require Import FunInd.
Require Export homographic_correctness.
Require Import Field_Theory_Q. 
Require Export Qquadratic_sign.
Require Export Qquadratic_Qpositive_to_Qpositive.
Require Export Qquadratic_sign_properties.
Require Export Qquadratic.
Require Export quadraticAcc_Qquadratic_sign.
Require Export Qquadratic_Qpositive_to_Q_properties.

Definition spec_q (a b c d e f g h : Z) (q1 q2 : Q) : Q :=
  Qmult
    (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2))
       d)
    (Qinv
       (Qplus
          (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).

Definition spec_Qquadratic_Qpositive_to_Q (a b c d e f g h : Z)
  (p1 p2 : Qpositive) : Q :=
  Qmult
    (Qplus
       (Qplus
          (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
          (Qmult c (Qpos p2))) d)
    (Qinv
       (Qplus
          (Qplus
             (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
             (Qmult g (Qpos p2))) h)).

Definition spec_Qquadratic_Qpositive_to_Qpositive2 
  (a b c d e f g h : Z) (p1 p2 : Qpositive) : Qpositive :=
  Qpositive_mult
    (Q_tail
       (Qplus
          (Qplus
             (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
             (Qmult c (Qpos p2))) d))
    (Qpositive_inv
       (Q_tail
          (Qplus
             (Qplus
                (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2))
                   (Qmult f (Qpos p1))) (Qmult g (Qpos p2))) h))).

Lemma spec_Qquadratic_Qpositive_to_Q_commut :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 spec_Qquadratic_Qpositive_to_Q a c b d e g f h p2 p1.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_commut :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2 =
 spec_Qquadratic_Qpositive_to_Qpositive2 a c b d e g f h p2 p1.

Lemma spec_Qquadratic_Qpositive_to_Q_p_One :
 forall (a b c d e f g h : Z) (p : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p One =
 spec_Qhomographic_Qpositive_to_Q (a + b) (c + d) (e + f) (g + h) p.

Lemma spec_Qquadratic_Qpositive_to_Q_p_One_unfolded :
 forall (a b c d e f g h : Z) (p : Qpositive),
 Qmult
   (Qplus
      (Qplus (Qplus (Qmult (Qmult a (Qpos p)) (Qpos One)) (Qmult b (Qpos p)))
         (Qmult c (Qpos One))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p)) (Qpos One)) (Qmult f (Qpos p)))
            (Qmult g (Qpos One))) h)) =
 Qmult (Qplus (Qmult (a + b)%Z (Qpos p)) (c + d)%Z)
   (Qinv (Qplus (Qmult (e + f)%Z (Qpos p)) (g + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_p_One.

Lemma spec_Qquadratic_Qpositive_to_Q_One_p :
 forall (a b c d e f g h : Z) (p : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h One p =
 spec_Qhomographic_Qpositive_to_Q (a + c) (b + d) (e + g) (f + h) p.

Lemma spec_Qquadratic_Qpositive_to_Q_One_p_unfolded :
 forall (a b c d e f g h : Z) (p : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos One)) (Qpos p)) (Qmult b (Qpos One)))
         (Qmult c (Qpos p))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos One)) (Qpos p)) (Qmult f (Qpos One)))
            (Qmult g (Qpos p))) h)) =
 Qmult (Qplus (Qmult (a + c)%Z (Qpos p)) (b + d)%Z)
   (Qinv (Qplus (Qmult (e + g)%Z (Qpos p)) (f + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_One_p.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (nR p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Q a (a + b) (a + c) (a + b + c + d) e 
   (e + f) (e + g) (e + f + g + h) p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_nR_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (nR p1))) (Qpos (nR p2)))
            (Qmult b (Qpos (nR p1)))) (Qmult c (Qpos (nR p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (nR p1))) (Qpos (nR p2)))
               (Qmult f (Qpos (nR p1)))) (Qmult g (Qpos (nR p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2))
            (Qmult (a + b)%Z (Qpos p1))) (Qmult (a + c)%Z (Qpos p2)))
      (a + b + c + d)%Z)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2))
               (Qmult (e + f)%Z (Qpos p1))) (Qmult (e + g)%Z (Qpos p2)))
         (e + f + g + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_nR_nR.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (nR p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Q (a + b) b (a + b + c + d) 
   (b + d) (e + f) f (e + f + g + h) (f + h) p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_dL_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (nR p1))) (Qpos (dL p2)))
            (Qmult b (Qpos (nR p1)))) (Qmult c (Qpos (dL p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (nR p1))) (Qpos (dL p2)))
               (Qmult f (Qpos (nR p1)))) (Qmult g (Qpos (dL p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a + b)%Z (Qpos p1)) (Qpos p2))
            (Qmult b (Qpos p1))) (Qmult (a + b + c + d)%Z (Qpos p2)))
      (b + d)%Z)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e + f)%Z (Qpos p1)) (Qpos p2))
               (Qmult f (Qpos p1))) (Qmult (e + f + g + h)%Z (Qpos p2)))
         (f + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_nR_dL.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (dL p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Q (a + c) (a + b + c + d) c 
   (c + d) (e + g) (e + f + g + h) g (g + h) p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_nR_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (dL p1))) (Qpos (nR p2)))
            (Qmult b (Qpos (dL p1)))) (Qmult c (Qpos (nR p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (dL p1))) (Qpos (nR p2)))
               (Qmult f (Qpos (dL p1)))) (Qmult g (Qpos (nR p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a + c)%Z (Qpos p1)) (Qpos p2))
            (Qmult (a + b + c + d)%Z (Qpos p1))) (Qmult c (Qpos p2)))
      (c + d)%Z)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e + g)%Z (Qpos p1)) (Qpos p2))
               (Qmult (e + f + g + h)%Z (Qpos p1))) 
            (Qmult g (Qpos p2))) (g + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_dL_nR.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (dL p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Q (a + b + c + d) (b + d) 
   (c + d) d (e + f + g + h) (f + h) (g + h) h p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_dL_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (dL p1))) (Qpos (dL p2)))
            (Qmult b (Qpos (dL p1)))) (Qmult c (Qpos (dL p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (dL p1))) (Qpos (dL p2)))
               (Qmult f (Qpos (dL p1)))) (Qmult g (Qpos (dL p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a + b + c + d)%Z (Qpos p1)) (Qpos p2))
            (Qmult (b + d)%Z (Qpos p1))) (Qmult (c + d)%Z (Qpos p2))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e + f + g + h)%Z (Qpos p1)) (Qpos p2))
               (Qmult (f + h)%Z (Qpos p1))) (Qmult (g + h)%Z (Qpos p2))) h)).
Proof spec_Qquadratic_Qpositive_to_Q_dL_dL.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_nR_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (nR p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 a (a + b) 
   (a + c) (a + b + c + d) e (e + f) (e + g) (e + f + g + h) p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_nR_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus a b) (Qpos p1)) (Qpos p2))
         (Qmult b (Qpos p1)))
      (Qmult (Qplus (Qplus (Qplus a b) c) d) (Qpos p2))) 
   (Qplus b d) <> Zero ->
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus e f) (Qpos p1)) (Qpos p2))
         (Qmult f (Qpos p1)))
      (Qmult (Qplus (Qplus (Qplus e f) g) h) (Qpos p2))) 
   (Qplus f h) <> Zero ->
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (nR p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 (a + b) b 
   (a + b + c + d) (b + d) (e + f) f (e + f + g + h) 
   (f + h) p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_dL_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus a c) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus (Qplus (Qplus a b) c) d) (Qpos p1)))
      (Qmult c (Qpos p2))) (Qplus c d) <> Zero ->
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus e g) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus (Qplus (Qplus e f) g) h) (Qpos p1)))
      (Qmult g (Qpos p2))) (Qplus g h) <> Zero ->
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (dL p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 (a + c) (a + b + c + d) c 
   (c + d) (e + g) (e + f + g + h) g (g + h) p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_dL_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus
      (Qplus
         (Qmult (Qmult (Qplus (Qplus (Qplus a b) c) d) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus b d) (Qpos p1))) (Qmult (Qplus c d) (Qpos p2))) d <>
 Zero ->
 Qplus
   (Qplus
      (Qplus
         (Qmult (Qmult (Qplus (Qplus (Qplus e f) g) h) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus f h) (Qpos p1))) (Qmult (Qplus g h) (Qpos p2))) h <>
 Zero ->
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (dL p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 (a + b + c + d) 
   (b + d) (c + d) d (e + f + g + h) (f + h) (g + h) h p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_nR_emission :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a - e)%Z (Qpos p1)) (Qpos p2))
            (Qmult (b - f)%Z (Qpos p1))) (Qmult (c - g)%Z (Qpos p2)))
      (d - h)%Z) ->
 nR
   (spec_Qquadratic_Qpositive_to_Qpositive2 (a - e) 
      (b - f) (c - g) (d - h) e f g h p1 p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_dL_emission :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (e - a)%Z (Qpos p1)) (Qpos p2))
            (Qmult (f - b)%Z (Qpos p1))) (Qmult (g - c)%Z (Qpos p2)))
      (h - d)%Z) ->
 dL
   (spec_Qquadratic_Qpositive_to_Qpositive2 a b c d 
      (e - a) (f - b) (g - c) (h - d) p1 p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2.

Lemma outside_square_correct_1 :
 forall (a b c d : Z) (p1 p2 : Qpositive),
 (2 < outside_square a b c d)%Z ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d).

Lemma outside_square_correct_2 :
 forall (a b c d : Z) (p1 p2 : Qpositive),
 (outside_square a b c d < -2)%Z ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 Qlt
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) Zero.

Ltac Inside_Square_Qsgn_ p1 p2 :=
  repeat
   match goal with
   | id1:(?X1 < ?X2)%Z |- _ =>
       unfold X2 in id1 || unfold X1 in id1;
        repeat
         match goal with
         | id1:(2 < outside_square ?X1 ?X2 ?X3 ?X4)%Z,id2:
         (~ (?X2 = 0%Z /\ ?X3 = 0%Z /\ ?X4 = 0%Z)) |- _ =>
             generalize
              (Qsgn_7 _ (outside_square_correct_1 X1 X2 X3 X4 p1 p2 id1 id2));
              clear id1
         | id1:(outside_square ?X1 ?X2 ?X3 ?X4 < -2)%Z,id2:
         (~ (?X2 = 0%Z /\ ?X3 = 0%Z /\ ?X4 = 0%Z)) |- _ =>
             generalize
              (Qsgn_8 _ (outside_square_correct_2 X1 X2 X3 X4 p1 p2 id1 id2));
              clear id1
         end
   end.

Lemma quadratic_sign :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2).

Lemma quadraticAcc_positive :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) /\
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h).

Lemma quadraticAcc_positive_numerator :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d).

Lemma quadraticAcc_positive_denominator :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h).

Lemma quadratic_output_bit :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp_quadraticAcc : quadraticAcc a b c d e f g h p1 p2),
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp_quadraticAcc =
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2.

Lemma
 spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_pos :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = 1%Z ->
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 Qpos (spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2).

Lemma
 spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_neg_1
 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = (-1)%Z ->
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 Qneg
   (spec_Qquadratic_Qpositive_to_Qpositive2 (- a) (- b) 
      (- c) (- d) e f g h p1 p2).

Lemma
 spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_neg_2
 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = (-1)%Z ->
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 Qneg
   (spec_Qquadratic_Qpositive_to_Qpositive2 a b c d 
      (- e) (- f) (- g) (- h) p1 p2).

Lemma spec_Qquadratic_Qpositive_to_Q_Zopp :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q (- a) (- b) (- c) (- d) 
   (- e) (- f) (- g) (- h) p1 p2 =
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2.

Lemma spec_Qquadratic_Qpositive_to_Q_Zopp_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q (- a) (- b) (- c) (- d) e f g h p1 p2 =
 Qopp (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2).
 
Lemma spec_Qquadratic_Qpositive_to_Q_Zopp_3 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d (- e) (- f) (- g) (- h) p1 p2 =
 Qopp (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2).

Lemma Qquadratic_sign_pres_fraction :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 Qmult
   (Qplus
      (Qplus
         (Qplus
            (Qmult
               (Qmult
                  (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
                  (Qpos
                     (qnew_p1 a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero)))
               (Qpos
                  (qnew_p2 a b c d e f g h p1 p2
                     H_Qquadratic_sg_denom_nonzero)))
            (Qmult
               (qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
               (Qpos
                  (qnew_p1 a b c d e f g h p1 p2
                     H_Qquadratic_sg_denom_nonzero))))
         (Qmult (qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
            (Qpos
               (qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero))))
      (qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero))
   (Qinv
      (Qplus
         (Qplus
            (Qplus
               (Qmult
                  (Qmult
                     (qnew_e a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero)
                     (Qpos
                        (qnew_p1 a b c d e f g h p1 p2
                           H_Qquadratic_sg_denom_nonzero)))
                  (Qpos
                     (qnew_p2 a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero)))
               (Qmult
                  (qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
                  (Qpos
                     (qnew_p1 a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero))))
            (Qmult
               (qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
               (Qpos
                  (qnew_p2 a b c d e f g h p1 p2
                     H_Qquadratic_sg_denom_nonzero))))
         (qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero))) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
            (Qmult g (Qpos p2))) h)).

Lemma Qquadratic_sg_denom_nonzero_correct_1 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h p1 p2 ->
 Qplus
   (Qplus (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
      (Qmult g (Qpos p2))) h <> Zero.

Lemma Qquadratic_sg_denom_nonzero_correct_2 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
      (Qmult g (Qpos p2))) h <> Zero ->
 Qquadratic_sg_denom_nonzero e f g h p1 p2.

Lemma a_field_equality_2 :
 forall a b c d e f g h q1 q2 : Q,
 e <> Zero ->
 Qmult a h = Qmult d e ->
 Qmult a g = Qmult c e ->
 Qmult a f = Qmult b e ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult a (Qinv e) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).

Lemma a_field_equality_3 :
 forall a b c d e f g h q1 q2 : Q,
 f <> Zero ->
 Qmult b h = Qmult d f ->
 Qmult b g = Qmult c f ->
 Qmult a f = Qmult b e ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult b (Qinv f) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).

Lemma a_field_equality_4 :
 forall a b c d e f g h q1 q2 : Q,
 g <> Zero ->
 Qmult a g = Qmult c e ->
 Qmult b g = Qmult c f ->
 Qmult c h = Qmult d g ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult c (Qinv g) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).

Lemma a_field_equality_5 :
 forall a b c d e f g h q1 q2 : Q,
 h <> Zero ->
 Qmult b h = Qmult d f ->
 Qmult a h = Qmult d e ->
 Qmult c h = Qmult d g ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult d (Qinv h) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).

Lemma quadratic_positive_input :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
            (Qmult g (Qpos p2))) h)).

Lemma quadratic :
 forall (a b c d e f g h : Z) (s1 s2 : Q)
   (H_Qquadratic_denom_nonzero : Qquadratic_denom_nonzero e f g h s1 s2),
 Qquadratic a b c d e f g h s1 s2 H_Qquadratic_denom_nonzero =
 spec_q a b c d e f g h s1 s2.

Lemma Qquadratic_denom_nonzero_correct_1 :
 forall (e f g h : Z) (q1 q2 : Q),
 Qquadratic_denom_nonzero e f g h q1 q2 ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero.

Lemma Qquadratic_denom_nonzero_correct_2 :
 forall (e f g h : Z) (q1 q2 : Q),
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero -> Qquadratic_denom_nonzero e f g h q1 q2.

Theorem quadratic_algorithm_is_correct :
 forall (a b c d e f g h : Z) (q1 q2 : Q)
   (H_denom : Qplus
                (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1))
                   (Qmult g q2)) h <> Zero),
 Qquadratic a b c d e f g h q1 q2
   (Qquadratic_denom_nonzero_correct_2 e f g h q1 q2 H_denom) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)). *)
Require Import Eqdep_dec.
Import Field_Theory_Q.

Lemma Qopp_lazy_Qopp : forall x : Q, Qopp_lazy x = Qopp x.
Proof.
 intros x.
 unfold Qopp_lazy in |- *.
 rewrite homography.
 unfold spec_h in |- *.
 replace (Z_to_Q 1) with Qone; trivial.
 replace (Z_to_Q (-1)) with (Qopp Qone); trivial.
 unfold Z_to_Q in |- *.
 rewrite Qmult_Qopp_left.
 rewrite Qmult_zero.
 rewrite Qplus_zero_right.
 rewrite Qplus_zero_left.
 rewrite Qmult_one_right.
 rewrite Qmult_one_left.
 reflexivity.
Defined.

Lemma Qinv_lazy_Qinv :
 forall (x : Q) (Hx : x <> Zero), Qinv_lazy x Hx = Qinv x.
Proof.
 intros x Hx.
 unfold Qinv_lazy in |- *.
 rewrite homography.
 unfold spec_h in |- *.
 replace (Z_to_Q 1) with Qone; trivial.
 unfold Z_to_Q in |- *.
 repeat rewrite Qmult_one_left.
 rewrite Qplus_zero_right.
 reflexivity.
Defined.

Lemma Qplus_lazy_Qplus : forall x y : Q, Qplus_lazy x y = Qplus x y.
Proof.
 intros x y.
 unfold Qplus_lazy in |- *.
 rewrite quadratic.
 unfold spec_q in |- *.
 replace (Z_to_Q 1) with Qone; trivial.
 unfold Z_to_Q in |- *.
 repeat rewrite Qmult_one_left.
 rewrite Qmult_one_right.
 repeat rewrite Qmult_zero.
 rewrite Qplus_zero_left.
 rewrite Qplus_zero_right.
 reflexivity.
Defined.

Lemma Qminus_lazy_Qminus : forall x y : Q, Qminus_lazy x y = Qminus x y.
intros x y.
unfold Qminus_lazy in |- *.
rewrite quadratic in |- *.
unfold spec_q in |- *.
change (Z_to_Q 1) with Qone in |- *.
unfold Z_to_Q in |- *.
simpl Qpositive_c in |- *.
field.
discriminate.
Defined.

Lemma Qmult_lazy_Qmult : forall x y : Q, Qmult_lazy x y = Qmult x y.
Proof.
 intros x y.
 unfold Qmult_lazy in |- *.
 rewrite quadratic.
 unfold spec_q in |- *.
 change (Z_to_Q 1) with Qone.
 unfold Z_to_Q in |- *.
 rewrite Qmult_one_left.
 rewrite Qmult_one_right.
 repeat rewrite Qmult_zero.
 repeat rewrite Qplus_zero_right.
 repeat rewrite Qplus_zero_left.
 reflexivity.
Defined.

Lemma Qdiv_lazy_Qdiv :
  forall (x y : Q) (Hy : y <> Zero), Qdiv_lazy x y Hy = Qdiv x y.
intros x y Hy.
unfold Qdiv_lazy in |- *.
rewrite quadratic in |- *.
unfold spec_q in |- *.
change (Z_to_Q 1) with Qone in |- *.
unfold Z_to_Q in |- *.
field.
trivial.
Defined.

Lemma second_Q_Ring_Theory :
 ring_theory Zero Qone Qplus_lazy Qmult_lazy Qminus_lazy Qopp_lazy (eq(A:=Q)).
  split; intros n m p || intros n m || intros n;
  repeat rewrite Qplus_lazy_Qplus;
  repeat rewrite Qmult_lazy_Qmult;
  repeat rewrite Qminus_lazy_Qminus;
  repeat rewrite Qdiv_lazy_Qdiv;
  repeat rewrite Qopp_lazy_Qopp;
  repeat rewrite Qinv_lazy_Qinv;
 try first
      [ apply Qplus_sym
      | apply Qplus_assoc
      | apply Qmult_sym
      | apply Qmult_assoc
      | apply Qplus_zero_left
      | apply Qmult_one_left
      | apply Q_opp_def
      | apply Q_distr_left
      | reflexivity ].
Defined.

Definition total_Qinv_lazy (x : Q) :=
  match Q_zerop x with
  | left _ => Zero
  | right h => Qinv_lazy x h
  end.

Lemma Qinv_lazy_defT :
 forall (n : Q) (Hn : n <> Zero), Qmult_lazy (Qinv_lazy n Hn) n = Qone.
Proof.
 intros n Hn; rewrite Qinv_lazy_Qinv; rewrite Qmult_lazy_Qmult; 
  rewrite Qmult_sym; apply Qinv_def; intro; apply Hn; 
  assumption.
Defined.

Lemma total_Qinv_lazy_defT :
 forall n : Q, n <> Zero -> Qmult_lazy (total_Qinv_lazy n) n = Qone.
Proof.
 intros n Hn.
 unfold total_Qinv_lazy in |- *; case (Q_zerop n); intros Hn';
  [ Falsum
  | apply Qinv_lazy_defT ].
Defined.

Definition total_Qdiv_lazy (x y : Q) :=
  match Q_zerop y with
  | left _ => Zero
  | right h => Qdiv_lazy x y h
  end.

Lemma second_QField :
  field_theory Zero Qone Qplus_lazy Qmult_lazy Qminus_lazy
    Qopp_lazy total_Qdiv_lazy total_Qinv_lazy (eq(A:=Q)).
constructor.
 apply second_Q_Ring_Theory.
 discriminate.
 intros; unfold total_Qdiv_lazy, total_Qinv_lazy in |- *.
  destruct (Q_zerop q).
   rewrite Qmult_lazy_Qmult in |- *.
   ring.
   rewrite Qdiv_lazy_Qdiv in |- *; rewrite Qmult_lazy_Qmult in |- *;
     rewrite Qinv_lazy_Qinv in |- *; reflexivity.
 exact total_Qinv_lazy_defT.
Defined.

Add Field second_Qfield : second_QField
  (decidable Q_eq_prop, constants [Qcst]).

Definition not_eq2eqT (A : Set) (x y : A) (H1 : x <> y) : 
  x <> y := fun H2 : x = y => H1 H2.
