
Require Import FunInd.
Require Export homographic_correctness.
(* homographic_correctness:
Require Import FunInd.
Require Import Field_Theory_Q. 
Require Export Qhomographic_Qpositive_to_Q_properties.

Definition spec_fraction_encoding (a b : Z) : Q := Qmult a (Qinv b).

Definition spec_positive_fraction_encoding (a b : Z) 
  (Ha : (0 < a)%Z) (Hb : (0 < b)%Z) :=
  Qpositive_mult (Z_to_Qpositive a Ha) (Qpositive_inv (Z_to_Qpositive b Hb)). 

Definition spec_positive_fraction_encoding1 (a b : Z) :=
  Q_tail (Qmult a (Qinv b)).

Definition spec_positive_fraction_encoding2 (a b : Z) :=
  Qpositive_mult (Q_tail a) (Qpositive_inv (Q_tail b)). 

Lemma spec_coding :
 forall m n : nat,
 Qpositive_c (S m) (S n) (S m + S n) =
 spec_positive_fraction_encoding1 (m + 1) (n + 1).

Lemma spec_positive_fraction_encoding1_positive_fraction_encoding :
 forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z),
 spec_positive_fraction_encoding m n Hm Hn =
 spec_positive_fraction_encoding1 m n.

Lemma spec_positive_fraction_encoding1_positive_fraction_encoding2 :
 forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z),
 spec_positive_fraction_encoding m n Hm Hn =
 spec_positive_fraction_encoding2 m n.

Lemma coding :
 forall (m n : Z) (Hm : (0 < m)%Z) (Hn : (0 < n)%Z),
 positive_fraction_encoding m n Hm Hn =
 spec_positive_fraction_encoding m n Hm Hn. 

Functional Scheme Qmult_ind := Induction for Qmult Sort Prop.

Lemma coding_Q :
 forall (m n : Z) (Hdenom : n <> 0%Z),
 fraction_encoding m n Hdenom = spec_fraction_encoding m n. 

Definition spec_h (a b c d : Z) (q : Q) : Q :=
  Qmult (Qplus (Qmult a q) b) (Qinv (Qplus (Qmult c q) d)).

Definition spec_Qhomographic_Qpositive_to_Q (a b c d : Z) 
  (p : Qpositive) : Q :=
  Qmult (Qplus (Qmult a (Qpos p)) b) (Qinv (Qplus (Qmult c (Qpos p)) d)).

Definition spec_ni (a b c d : Z) (p : Qpositive) : Qpositive :=
  Q_tail
    (Qmult (Qplus (Qmult a (Qpos p)) b) (Qinv (Qplus (Qmult c (Qpos p)) d))).

Definition spec_ni2 (a b c d : Z) (p : Qpositive) : Qpositive :=
  Qpositive_mult (Q_tail (Qplus (Qmult a (Qpos p)) b))
    (Qpositive_inv (Q_tail (Qplus (Qmult c (Qpos p)) d))).

Lemma spec_Qhomographic_Qpositive_to_Q_nR :
 forall (a b c d : Z) (q : Qpositive),
 spec_Qhomographic_Qpositive_to_Q a b c d (nR q) =
 spec_Qhomographic_Qpositive_to_Q a (a + b) c (c + d) q.

Lemma spec_Qhomographic_Qpositive_to_Q_dL :
 forall (a b c d : Z) (q : Qpositive),
 spec_Qhomographic_Qpositive_to_Q a b c d (dL q) =
 spec_Qhomographic_Qpositive_to_Q (a + b) b (c + d) d q.

Lemma spec_Qhomographic_Qpositive_to_Q_nR_unfolded :
 forall (a b c d : Z) (q : Qpositive),
 Qmult (Qplus (Qmult a (Qpos (nR q))) b)
   (Qinv (Qplus (Qmult c (Qpos (nR q))) d)) =
 Qmult (Qplus (Qmult a (Qpos q)) (a + b)%Z)
   (Qinv (Qplus (Qmult c (Qpos q)) (c + d)%Z)).
Proof spec_Qhomographic_Qpositive_to_Q_nR.

Lemma spec_Qhomographic_Qpositive_to_Q_dL_unfolded :
 forall (a b c d : Z) (q : Qpositive),
 Qmult (Qplus (Qmult a (Qpos (dL q))) b)
   (Qinv (Qplus (Qmult c (Qpos (dL q))) d)) =
 Qmult (Qplus (Qmult (a + b)%Z (Qpos q)) b)
   (Qinv (Qplus (Qmult (c + d)%Z (Qpos q)) d)).
Proof spec_Qhomographic_Qpositive_to_Q_dL.

Lemma spec_ni2_nR :
 forall (a b c d : Z) (q : Qpositive),
 spec_ni2 a b c d (nR q) = spec_ni2 a (a + b) c (c + d) q.

Lemma spec_ni2_dL :
 forall (a b c d : Z) (q : Qpositive),
 Qplus (Qmult (a + b)%Z (Qpos q)) b <> Zero ->
 Qplus (Qmult (c + d)%Z (Qpos q)) d <> Zero ->
 spec_ni2 a b c d (dL q) = spec_ni2 (a + b) b (c + d) d q.

Lemma spec_ni2_nR_emission :
 forall (a b c d : Z) (q : Qpositive),
 Qlt Zero (Qplus (Qmult a (Qpos q)) b) ->
 Qlt Zero (Qplus (Qmult c (Qpos q)) d) ->
 Qlt Zero (Qplus (Qmult (a - c)%Z (Qpos q)) (b - d)%Z) ->
 nR (spec_ni2 (a - c) (b - d) c d q) = spec_ni2 a b c d q.

Lemma spec_ni2_dL_emission :
 forall (a b c d : Z) (q : Qpositive),
 Qlt Zero (Qplus (Qmult a (Qpos q)) b) ->
 Qlt Zero (Qplus (Qmult c (Qpos q)) d) ->
 Qlt Zero (Qplus (Qmult (c - a)%Z (Qpos q)) (d - b)%Z) ->
 dL (spec_ni2 a b (c - a) (d - b) q) = spec_ni2 a b c d q.

Lemma homographic_sign :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 h_sign a b c d p H_Qhomographic_sg_denom_nonzero =
 Qsgn (spec_Qhomographic_Qpositive_to_Q a b c d p).

Lemma homographicAcc_positive :
 forall (a b c d : Z) (p : Qpositive),
 homographicAcc a b c d p ->
 Qlt Zero (Qplus (Qmult (Z_to_Q a) (Qpos p)) (Z_to_Q b)) /\
 Qlt Zero (Qplus (Qmult (Z_to_Q c) (Qpos p)) (Z_to_Q d)).

Lemma homographicAcc_positive_numerator :
 forall (a b c d : Z) (p : Qpositive),
 homographicAcc a b c d p ->
 Qlt Zero (Qplus (Qmult (Z_to_Q a) (Qpos p)) (Z_to_Q b)).

Lemma homographicAcc_positive_denominator :
 forall (a b c d : Z) (p : Qpositive),
 homographicAcc a b c d p ->
 Qlt Zero (Qplus (Qmult (Z_to_Q c) (Qpos p)) (Z_to_Q d)).

Lemma output_bit :
 forall (a b c d : Z) (p : Qpositive) (hyp_Acc : homographicAcc a b c d p),
 Qhomographic_Qpositive_to_Qpositive a b c d p hyp_Acc = spec_ni2 a b c d p.

Lemma spec_Qhomographic_Qpositive_to_Q_spec_ni2_pos :
 forall (a b c d : Z) (q : Qpositive),
 Qsgn (spec_Qhomographic_Qpositive_to_Q a b c d q) = 1%Z ->
 spec_Qhomographic_Qpositive_to_Q a b c d q = Qpos (spec_ni2 a b c d q).

Lemma spec_Qhomographic_Qpositive_to_Q_spec_ni2_neg :
 forall (a b c d : Z) (q : Qpositive),
 Qsgn (spec_Qhomographic_Qpositive_to_Q a b c d q) = (-1)%Z ->
 spec_Qhomographic_Qpositive_to_Q a b c d q = Qneg (spec_ni2 a b c d q).

Lemma spec_Qhomographic_Qpositive_to_Q_spec_ni2_neg_1 :
 forall (a b c d : Z) (q : Qpositive),
 Qsgn (spec_Qhomographic_Qpositive_to_Q a b c d q) = (-1)%Z ->
 spec_Qhomographic_Qpositive_to_Q a b c d q =
 Qneg (spec_ni2 (- a) (- b) c d q).

Lemma spec_Qhomographic_Qpositive_to_Q_spec_ni2_neg_2 :
 forall (a b c d : Z) (q : Qpositive),
 Qsgn (spec_Qhomographic_Qpositive_to_Q a b c d q) = (-1)%Z ->
 spec_Qhomographic_Qpositive_to_Q a b c d q =
 Qneg (spec_ni2 a b (- c) (- d) q).

Lemma spec_Qhomographic_Qpositive_to_Q_Zopp :
 forall (a b c d : Z) (q : Qpositive),
 spec_Qhomographic_Qpositive_to_Q (- a) (- b) (- c) (- d) q =
 spec_Qhomographic_Qpositive_to_Q a b c d q.
 
Lemma spec_Qhomographic_Qpositive_to_Q_Zopp_2 :
 forall (a b c d : Z) (q : Qpositive),
 spec_Qhomographic_Qpositive_to_Q (- a) (- b) c d q =
 Qopp (spec_Qhomographic_Qpositive_to_Q a b c d q).
 
Lemma spec_Qhomographic_Qpositive_to_Q_Zopp_3 :
 forall (a b c d : Z) (q : Qpositive),
 spec_Qhomographic_Qpositive_to_Q a b (- c) (- d) q =
 Qopp (spec_Qhomographic_Qpositive_to_Q a b c d q).

Lemma sg_pres_fraction :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 Qmult
   (Qplus
      (Qmult (new_a a b c d p H_Qhomographic_sg_denom_nonzero)
         (Qpos (new_p a b c d p H_Qhomographic_sg_denom_nonzero)))
      (new_b a b c d p H_Qhomographic_sg_denom_nonzero))
   (Qinv
      (Qplus
         (Qmult (new_c a b c d p H_Qhomographic_sg_denom_nonzero)
            (Qpos (new_p a b c d p H_Qhomographic_sg_denom_nonzero)))
         (new_d a b c d p H_Qhomographic_sg_denom_nonzero))) =
 Qmult (Qplus (Qmult a (Qpos p)) b) (Qinv (Qplus (Qmult c (Qpos p)) d)).

Lemma a_field_equality_1 :
 forall x y z t w : Q,
 Qmult x t = Qmult y z ->
 t <> Zero ->
 Qplus (Qmult z w) t <> Zero ->
 Qmult (Qplus (Qmult x w) y) (Qinv (Qplus (Qmult z w) t)) = Qmult y (Qinv t).

Lemma Qhomographic_sg_denom_nonzero_correct_1 :
 forall (c d : Z) (p : Qpositive),
 Qhomographic_sg_denom_nonzero c d p -> Qplus (Qmult c (Qpos p)) d <> Zero.

Lemma Qhomographic_sg_denom_nonzero_correct_2 :
 forall (c d : Z) (p : Qpositive),
 Qplus (Qmult c (Qpos p)) d <> Zero -> Qhomographic_sg_denom_nonzero c d p.

Lemma homography_positive_input :
 forall (a b c d : Z) (p : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero c d p),
 Qhomographic_Qpositive_to_Q a b c d p H_Qhomographic_sg_denom_nonzero =
 Qmult (Qplus (Qmult a (Qpos p)) b) (Qinv (Qplus (Qmult c (Qpos p)) d)).

Lemma homography :
 forall (a b c d : Z) (s : Q)
   (H_Qhomographic_denom_nonzero : Qhomographic_denom_nonzero c d s),
 Qhomographic a b c d s H_Qhomographic_denom_nonzero = spec_h a b c d s.
 
Lemma Qhomographic_denom_nonzero_correct_1 :
 forall (c d : Z) (q : Q),
 Qplus (Qmult c q) d <> Zero -> Qhomographic_denom_nonzero c d q.
 
Lemma Qhomographic_denom_nonzero_correct_2 :
 forall (c d : Z) (q : Q),
 Qhomographic_denom_nonzero c d q -> Qplus (Qmult c q) d <> Zero.
 
Theorem homography_algorithm_is_correct :
 forall (a b c d : Z) (q : Q) (H_denom : Qplus (Qmult c q) d <> Zero),
 Qhomographic a b c d q (Qhomographic_denom_nonzero_correct_1 c d q H_denom) =
 Qmult (Qplus (Qmult a q) b) (Qinv (Qplus (Qmult c q) d)). *)
Require Import Field_Theory_Q. 
(* Field_Theory_Q:
Require Import Eqdep_dec.
Require Export Field.
Require Export Q_order.

Lemma Q_Ring_Theory :
    ring_theory Zero Qone Qplus Qmult Qminus Qopp (eq(A:=Q)).

Lemma Qinv_defT : forall n : Q, n <> Zero -> Qmult (Qinv n) n = Qone.

Lemma QField :
  field_theory Zero Qone Qplus Qmult Qminus Qopp Qdiv Qinv (eq(A:=Q)).

Ltac isQcst t :=
  match t with
    Zero => true
  | Qpos ?p => isQcst p
  | Qneg ?p => isQcst p
  | nR ?p => isQcst p
  | dL ?p => isQcst p
  | One => true
  | Qone => true
  | _ => false
  end.
Ltac Qcst t :=
  match isQcst t with
  | true => t
  | _ => InitialRing.NotConstant
  end.
 
Add Field Qfield : QField (decidable Q_eq_prop, constants [Qcst]).

Definition not_eq2eqT (A : Set) (x y : A) (H1 : x <> y) : 
  x <> y := fun H2 : x = y => H1 (H2).

Ltac Field := field. *)
Require Export Qquadratic_sign.
(* Qquadratic_sign:
Require Import ZArithRing.
Require Import Qhomographic_sign.
Require Import Zaux.

Definition outside_square (a b c d : Z) :=
  (Z.sgn a + Z.sgn b + Z.sgn c + Z.sgn d)%Z.

Lemma three_integers_dec_inf :
 forall a b c : Z,
 {a = 0%Z /\ b = 0%Z /\ c = 0%Z} + {~ (a = 0%Z /\ b = 0%Z /\ c = 0%Z)}.

Definition inside_square_1 (o1 o2 : Z) :=
  (2 < o1)%Z /\ (2 < o2)%Z \/ (o1 < -2)%Z /\ (o2 < -2)%Z.

Definition inside_square_2 (o1 o2 : Z) :=
  (2 < o1)%Z /\ (o2 < -2)%Z \/ (o1 < -2)%Z /\ (2 < o2)%Z.

Lemma inside_square_1_dec_inf :
 forall o1 o2 : Z, {inside_square_1 o1 o2} + {~ inside_square_1 o1 o2}.

Lemma inside_square_2_dec_inf :
 forall o1 o2 : Z, {inside_square_2 o1 o2} + {~ inside_square_2 o1 o2}.

Inductive Qquadratic_sg_denom_nonzero :
Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Prop :=
  | Qquadratic_signok0 :
      forall (e f g h : Z) (p1 p2 : Qpositive),
      p2 = One ->
      Qhomographic_sg_denom_nonzero (e + f) (g + h) p1 ->
      Qquadratic_sg_denom_nonzero e f g h p1 p2
  | Qquadratic_signok0' :
      forall (e f g h : Z) (p1 p2 : Qpositive),
      p1 = One ->
      Qhomographic_sg_denom_nonzero (e + g) (f + h) p2 ->
      Qquadratic_sg_denom_nonzero e f g h p1 p2
  | Qquadratic_signok1 :
      forall (e f g h : Z) (p1 p2 : Qpositive),
      Qquadratic_sg_denom_nonzero e (e + f)%Z (e + g)%Z 
        (e + f + g + h)%Z p1 p2 ->
      Qquadratic_sg_denom_nonzero e f g h (nR p1) (nR p2)
  | Qquadratic_signok2 :
      forall (e f g h : Z) (p1 p2 : Qpositive),
      Qquadratic_sg_denom_nonzero (e + f)%Z f (e + f + g + h)%Z 
        (f + h)%Z p1 p2 ->
      Qquadratic_sg_denom_nonzero e f g h (nR p1) (dL p2)
  | Qquadratic_signok3 :
      forall (e f g h : Z) (p1 p2 : Qpositive),
      Qquadratic_sg_denom_nonzero (e + g)%Z (e + f + g + h)%Z g 
        (g + h)%Z p1 p2 ->
      Qquadratic_sg_denom_nonzero e f g h (dL p1) (nR p2)
  | Qquadratic_signok4 :
      forall (e f g h : Z) (p1 p2 : Qpositive),
      Qquadratic_sg_denom_nonzero (e + f + g + h)%Z 
        (f + h)%Z (g + h)%Z h p1 p2 ->
      Qquadratic_sg_denom_nonzero e f g h (dL p1) (dL p2).

Lemma Qquadratic_signok_0 :
 forall (e f g h : Z) (p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h One p2 ->
 Qhomographic_sg_denom_nonzero (e + g) (f + h) p2.

Lemma Qquadratic_signok_0' :
 forall (e f g h : Z) (p1 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h p1 One ->
 Qhomographic_sg_denom_nonzero (e + f) (g + h) p1.

Lemma Qquadratic_signok_1 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h (nR p1) (nR p2) ->
 Qquadratic_sg_denom_nonzero e (e + f) (e + g) (e + f + g + h) p1 p2.

Lemma Qquadratic_signok_2 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h (nR p1) (dL p2) ->
 Qquadratic_sg_denom_nonzero (e + f) f (e + f + g + h) (f + h) p1 p2.

Lemma Qquadratic_signok_3 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h (dL p1) (nR p2) ->
 Qquadratic_sg_denom_nonzero (e + g) (e + f + g + h) g (g + h) p1 p2.

Lemma Qquadratic_signok_4 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h (dL p1) (dL p2) ->
 Qquadratic_sg_denom_nonzero (e + f + g + h) (f + h) (g + h) h p1 p2.

Fixpoint Qquadratic_sign (a b c d e f g h : Z) (p1 p2 : Qpositive) {struct p1} :
  forall (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
  Z * (Z * (Z * (Z * Z)) * (Z * (Z * (Z * Z))) * (Qpositive * Qpositive)).

Scheme Qquadratic_sg_denom_nonzero_inv_dep :=
  Induction for Qquadratic_sg_denom_nonzero Sort Prop.

Lemma Qquadratic_sign_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H1 H2 : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 Qquadratic_sign a b c d e f g h p1 p2 H1 =
 Qquadratic_sign a b c d e f g h p1 p2 H2.

Lemma Qquadratic_sign_equal_strong :
 forall (a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 g1 g2 h1 h2 : Z)
   (x1 x2 y1 y2 : Qpositive)
   (H_ok_1 : Qquadratic_sg_denom_nonzero e1 f1 g1 h1 x1 y1)
   (H_ok_2 : Qquadratic_sg_denom_nonzero e2 f2 g2 h2 x2 y2),
 a1 = a2 ->
 b1 = b2 ->
 c1 = c2 ->
 d1 = d2 ->
 e1 = e2 ->
 f1 = f2 ->
 g1 = g2 ->
 h1 = h2 ->
 x1 = x2 ->
 y1 = y2 ->
 Qquadratic_sign a1 b1 c1 d1 e1 f1 g1 h1 x1 y1 H_ok_1 =
 Qquadratic_sign a2 b2 c2 d2 e2 f2 g2 h2 x2 y2 H_ok_2.

Lemma Qquadratic_sign_One_y :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (l1 na nb nc nd : Z) (l3 : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (e + g) (f + h) p2),
 (l1, (na, (nb, (nc, nd)), l3)) =
 Qhomographic_sign (a + c) (b + d) (e + g) (f + h) p2
   H_Qhomographic_sg_denom_nonzero ->
 p1 = One ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (l1, (0%Z, (0%Z, (na, nb)), (0%Z, (0%Z, (nc, nd))), (One, l3))).

Lemma Qquadratic_sign_nRdL_One :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (l1 na nb nc nd : Z) (l3 : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (e + f) (g + h) p1),
 (l1, (na, (nb, (nc, nd)), l3)) =
 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) p1
   H_Qhomographic_sg_denom_nonzero ->
 p1 <> One ->
 p2 = One ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Lemma Qquadratic_sign_nR_One_1 :
 forall (a b c d e f g h : Z) (p1 xs p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (l1 na nb nc nd : Z) (l3 : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (e + f) (g + h) p1),
 (l1, (na, (nb, (nc, nd)), l3)) =
 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) p1
   H_Qhomographic_sg_denom_nonzero ->
 p1 = nR xs ->
 p2 = One ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Lemma Qquadratic_sign_nR_One_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h
                                      (nR p1) p2) (l1 na nb nc nd : Z)
   (l3 : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (e + f) (g + h) 
                                        (nR p1)),
 (l1, (na, (nb, (nc, nd)), l3)) =
 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 
   (nR p1) H_Qhomographic_sg_denom_nonzero ->
 p2 = One ->
 Qquadratic_sign a b c d e f g h (nR p1) p2 H_Qquadratic_sg_denom_nonzero =
 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Lemma Qquadratic_sign_dL_One_1 :
 forall (a b c d e f g h : Z) (p1 xs p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (l1 na nb nc nd : Z) (l3 : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (e + f) (g + h) p1),
 (l1, (na, (nb, (nc, nd)), l3)) =
 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) p1
   H_Qhomographic_sg_denom_nonzero ->
 p1 = dL xs ->
 p2 = One ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Lemma Qquadratic_sign_dL_One_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h
                                      (dL p1) p2) (l1 na nb nc nd : Z)
   (l3 : Qpositive)
   (H_Qhomographic_sg_denom_nonzero : Qhomographic_sg_denom_nonzero 
                                        (e + f) (g + h) 
                                        (dL p1)),
 (l1, (na, (nb, (nc, nd)), l3)) =
 Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 
   (dL p1) H_Qhomographic_sg_denom_nonzero ->
 p2 = One ->
 Qquadratic_sign a b c d e f g h (dL p1) p2 H_Qquadratic_sg_denom_nonzero =
 (l1, (0%Z, (na, (0%Z, nb)), (0%Z, (nc, (0%Z, nd))), (l3, One))).

Lemma Qquadratic_sign_nRdL_nRdL_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((Z.sgn a * Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Lemma Qquadratic_sign_nRdL_nRdL_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 (2 < outside_square e f g h)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (Z.sgn a, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).             

Lemma Qquadratic_sign_nRdL_nRdL_3 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ (2 < outside_square e f g h)%Z ->
 (outside_square e f g h < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((- Z.sgn a)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).             

Lemma Qquadratic_sign_nR_nR_4 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_II : Qquadratic_sg_denom_nonzero e 
                                         (e + f) (e + g) 
                                         (e + f + g + h) xs ys),
 p1 = nR xs ->
 p2 = nR ys ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ (2 < outside_square e f g h)%Z ->
 ~ (outside_square e f g h < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign a (a + b) (a + c) (a + b + c + d) e 
   (e + f) (e + g) (e + f + g + h) xs ys H_Qquadratic_sg_denom_nonzero_II.

Lemma Qquadratic_sign_nR_dL_4 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_IO : Qquadratic_sg_denom_nonzero 
                                         (e + f) f 
                                         (e + f + g + h) 
                                         (f + h) xs ys),
 p1 = nR xs ->
 p2 = dL ys ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ (2 < outside_square e f g h)%Z ->
 ~ (outside_square e f g h < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + b) b (a + b + c + d) (b + d) 
   (e + f) f (e + f + g + h) (f + h) xs ys H_Qquadratic_sg_denom_nonzero_IO.

Lemma Qquadratic_sign_dL_nR_4 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_OI : Qquadratic_sg_denom_nonzero 
                                         (e + g) (e + f + g + h) g 
                                         (g + h) xs ys),
 p1 = dL xs ->
 p2 = nR ys ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ (2 < outside_square e f g h)%Z ->
 ~ (outside_square e f g h < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + c) (a + b + c + d) c (c + d) 
   (e + g) (e + f + g + h) g (g + h) xs ys H_Qquadratic_sg_denom_nonzero_OI.

Lemma Qquadratic_sign_dL_dL_4 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_OO : Qquadratic_sg_denom_nonzero
                                         (e + f + g + h) 
                                         (f + h) (g + h) h xs ys),
 p1 = dL xs ->
 p2 = dL ys ->
 b = 0%Z /\ c = 0%Z /\ d = 0%Z ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ (2 < outside_square e f g h)%Z ->
 ~ (outside_square e f g h < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + b + c + d) (b + d) (c + d) d 
   (e + f + g + h) (f + h) (g + h) h xs ys H_Qquadratic_sg_denom_nonzero_OO.

Lemma Qquadratic_sign_nRdL_nRdL_5 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 (2 < outside_square a b c d)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (Z.sgn e, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Lemma Qquadratic_sign_nRdL_nRdL_6 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 ~ (2 < outside_square a b c d)%Z ->
 (outside_square a b c d < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((- Z.sgn e)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Lemma Qquadratic_sign_nR_nR_7 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_II : Qquadratic_sg_denom_nonzero e 
                                         (e + f) (e + g) 
                                         (e + f + g + h) xs ys),
 p1 = nR xs ->
 p2 = nR ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 ~ (2 < outside_square a b c d)%Z ->
 ~ (outside_square a b c d < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign a (a + b) (a + c) (a + b + c + d) e 
   (e + f) (e + g) (e + f + g + h) xs ys H_Qquadratic_sg_denom_nonzero_II.

Lemma Qquadratic_sign_nR_dL_7 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_IO : Qquadratic_sg_denom_nonzero 
                                         (e + f) f 
                                         (e + f + g + h) 
                                         (f + h) xs ys),
 p1 = nR xs ->
 p2 = dL ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 ~ (2 < outside_square a b c d)%Z ->
 ~ (outside_square a b c d < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + b) b (a + b + c + d) (b + d) 
   (e + f) f (e + f + g + h) (f + h) xs ys H_Qquadratic_sg_denom_nonzero_IO.

Lemma Qquadratic_sign_dL_nR_7 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_OI : Qquadratic_sg_denom_nonzero 
                                         (e + g) (e + f + g + h) g 
                                         (g + h) xs ys),
 p1 = dL xs ->
 p2 = nR ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 ~ (2 < outside_square a b c d)%Z ->
 ~ (outside_square a b c d < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + c) (a + b + c + d) c (c + d) 
   (e + g) (e + f + g + h) g (g + h) xs ys H_Qquadratic_sg_denom_nonzero_OI.

Lemma Qquadratic_sign_dL_dL_7 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_OO : Qquadratic_sg_denom_nonzero
                                         (e + f + g + h) 
                                         (f + h) (g + h) h xs ys),
 p1 = dL xs ->
 p2 = dL ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 f = 0%Z /\ g = 0%Z /\ h = 0%Z ->
 ~ (2 < outside_square a b c d)%Z ->
 ~ (outside_square a b c d < -2)%Z ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + b + c + d) (b + d) (c + d) d 
   (e + f + g + h) (f + h) (g + h) h xs ys H_Qquadratic_sg_denom_nonzero_OO.

Lemma Qquadratic_sign_nRdL_nRdL_8 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 inside_square_1 (outside_square a b c d) (outside_square e f g h) ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (1%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Lemma Qquadratic_sign_nRdL_nRdL_9 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->
 inside_square_2 (outside_square a b c d) (outside_square e f g h) ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((-1)%Z, (a, (b, (c, d)), (e, (f, (g, h))), (p1, p2))).

Lemma Qquadratic_sign_nR_nR_10 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_II : Qquadratic_sg_denom_nonzero e 
                                         (e + f) (e + g) 
                                         (e + f + g + h) xs ys),
 p1 = nR xs ->
 p2 = nR ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->
 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign a (a + b) (a + c) (a + b + c + d) e 
   (e + f) (e + g) (e + f + g + h) xs ys H_Qquadratic_sg_denom_nonzero_II.

Lemma Qquadratic_sign_nR_dL_10 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_IO : Qquadratic_sg_denom_nonzero 
                                         (e + f) f 
                                         (e + f + g + h) 
                                         (f + h) xs ys),
 p1 = nR xs ->
 p2 = dL ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->
 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + b) b (a + b + c + d) (b + d) 
   (e + f) f (e + f + g + h) (f + h) xs ys H_Qquadratic_sg_denom_nonzero_IO.

Lemma Qquadratic_sign_dL_nR_10 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_OI : Qquadratic_sg_denom_nonzero 
                                         (e + g) (e + f + g + h) g 
                                         (g + h) xs ys),
 p1 = dL xs ->
 p2 = nR ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->
 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + c) (a + b + c + d) c (c + d) 
   (e + g) (e + f + g + h) g (g + h) xs ys H_Qquadratic_sg_denom_nonzero_OI.

Lemma Qquadratic_sign_dL_dL_10 :
 forall (a b c d e f g h : Z) (p1 xs p2 ys : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (H_Qquadratic_sg_denom_nonzero_OO : Qquadratic_sg_denom_nonzero
                                         (e + f + g + h) 
                                         (f + h) (g + h) h xs ys),
 p1 = dL xs ->
 p2 = dL ys ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 ~ (f = 0%Z /\ g = 0%Z /\ h = 0%Z) ->
 ~ inside_square_1 (outside_square a b c d) (outside_square e f g h) ->
 ~ inside_square_2 (outside_square a b c d) (outside_square e f g h) ->
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qquadratic_sign (a + b + c + d) (b + d) (c + d) d 
   (e + f + g + h) (f + h) (g + h) h xs ys H_Qquadratic_sg_denom_nonzero_OO.

Lemma Qquadratic_sign_sign :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 let (l1, L2) :=
     Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero in
 {l1 = 0%Z} + {l1 = 1%Z} + {l1 = (-1)%Z}.

Definition q_sign (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  let (l1, L2) :=
      Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero in
  l1.

Lemma Qquadratic_sign_sign_dec :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 {q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 0%Z} +
 {q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z} +
 {q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z}. *)
Require Export Qquadratic_Qpositive_to_Qpositive.
(* Qquadratic_Qpositive_to_Qpositive:
Require Import Merge_Order.
Require Export Qhomographic_Qpositive_to_Qpositive.

Definition quadratic_top_more (a b c d e f g h : Z) :=
  (e <= a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h < d)%Z \/
  (e <= a)%Z /\ (f <= b)%Z /\ (g < c)%Z /\ (h <= d)%Z \/
  (e <= a)%Z /\ (f < b)%Z /\ (g <= c)%Z /\ (h <= d)%Z \/
  (e < a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h <= d)%Z.

Lemma octet_leq_inf :
 forall a b c d e f g h : Z,
 {(e <= a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h <= d)%Z} +
 {~ ((e <= a)%Z /\ (f <= b)%Z /\ (g <= c)%Z /\ (h <= d)%Z)}.

Lemma quadratic_top_more_informative :
 forall a b c d e f g h : Z,
 {quadratic_top_more a b c d e f g h} +
 {~ quadratic_top_more a b c d e f g h}.

Lemma quadratic_top_more_1 :
 forall a b c d e f g h : Z,
 quadratic_top_more a b c d e f g h ->
 (0 < a - e + (b - f) + (c - g) + (d - h))%Z.

Lemma quadratic_top_more_2 :
 forall a b c d e f g h : Z,
 quadratic_top_more a b c d e f g h -> (e + f + g + h < a + b + c + d)%Z.

Lemma quadratic_top_more_3 :
 forall a b c d e f g h : Z,
 (0 < e + f + g + h)%Z ->
 (a - e + (b - f) + (c - g) + (d - h) < a + b + c + d)%Z.

Lemma quadratic_top_more_4_1 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (e <= a)%Z.

Lemma quadratic_top_more_4_2 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (f <= b)%Z.

Lemma quadratic_top_more_4_3 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (g <= c)%Z.

Lemma quadratic_top_more_4_4 :
 forall a b c d e f g h : Z, quadratic_top_more a b c d e f g h -> (h <= d)%Z.

Lemma quadratic_top_more_5 :
 forall a b c d e f g h : Z,
 (0 < e + f + g + h)%Z ->
 (a - e + (b - f) + (c - g) + (d - h) + e + f + g + h <
  a + b + c + d + e + f + g + h)%Z.

Lemma quadratic_top_more_5' :
 forall a b c d e f g h : Z,
 (0 < a + b + c + d)%Z ->
 (a + b + c + d + (e - a) + (f - b) + (g - c) + (h - d) <
  a + b + c + d + e + f + g + h)%Z.

Inductive quadraticAcc :
Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Prop :=
  | quadraticacc0 :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 = One ->
      homographicAcc (a + c) (b + d) (e + g) (f + h) p2 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc0' :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 <> One ->
      p2 = One ->
      homographicAcc (a + b) (c + d) (e + f) (g + h) p1 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc1 :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 <> One ->
      p2 <> One ->
      quadratic_top_more a b c d e f g h ->
      quadraticAcc (a - e)%Z (b - f)%Z (c - g)%Z (d - h)%Z e f g h p1 p2 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc2 :
      forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
      p1 <> One ->
      p2 <> One ->
      ~ quadratic_top_more a b c d e f g h ->
      quadratic_top_more e f g h a b c d ->
      quadraticAcc a b c d (e - a)%Z (f - b)%Z (g - c)%Z (h - d)%Z p1 p2 ->
      quadraticAcc a b c d e f g h p1 p2
  | quadraticacc3_II :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 
        (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys ->
      quadraticAcc a b c d e f g h (nR xs) (nR ys)
  | quadraticacc3_IO :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc (a + b)%Z b (a + b + c + d)%Z (b + d)%Z 
        (e + f)%Z f (e + f + g + h)%Z (f + h)%Z xs ys ->
      quadraticAcc a b c d e f g h (nR xs) (dL ys)
  | quadraticacc3_OI :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc (a + c)%Z (a + b + c + d)%Z c (c + d)%Z 
        (e + g)%Z (e + f + g + h)%Z g (g + h)%Z xs ys ->
      quadraticAcc a b c d e f g h (dL xs) (nR ys)
  | quadraticacc3_OO :
      forall (a b c d e f g h : Z) (xs ys : Qpositive),
      ~ quadratic_top_more a b c d e f g h ->
      ~ quadratic_top_more e f g h a b c d ->
      quadraticAcc (a + b + c + d)%Z (b + d)%Z (c + d)%Z d 
        (e + f + g + h)%Z (f + h)%Z (g + h)%Z h xs ys ->
      quadraticAcc a b c d e f g h (dL xs) (dL ys).

Lemma quadraticacc_0 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 = One -> homographicAcc (a + c) (b + d) (e + g) (f + h) p2.

Lemma quadraticacc_0' :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 <> One -> p2 = One -> homographicAcc (a + b) (c + d) (e + f) (g + h) p1.

Lemma quadraticacc_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 <> One ->
 p2 <> One ->
 quadratic_top_more a b c d e f g h ->
 quadraticAcc (a - e) (b - f) (c - g) (d - h) e f g h p1 p2.

Lemma quadraticacc_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 p1 <> One ->
 p2 <> One ->
 ~ quadratic_top_more a b c d e f g h ->
 quadratic_top_more e f g h a b c d ->
 quadraticAcc a b c d (e - a) (f - b) (g - c) (h - d) p1 p2.

Lemma quadraticacc_3_II :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = nR xs ->
 p2 = nR ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc a (a + b) (a + c) (a + b + c + d) e (e + f) 
   (e + g) (e + f + g + h) xs ys.

Lemma quadraticacc_3_IO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = nR xs ->
 p2 = dL ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc (a + b) b (a + b + c + d) (b + d) (e + f) f 
   (e + f + g + h) (f + h) xs ys.

Lemma quadraticacc_3_OI :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = dL xs ->
 p2 = nR ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc (a + c) (a + b + c + d) c (c + d) (e + g) 
   (e + f + g + h) g (g + h) xs ys.

Lemma quadraticacc_3_OO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 forall xs ys : Qpositive,
 p1 = dL xs ->
 p2 = dL ys ->
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 quadraticAcc (a + b + c + d) (b + d) (c + d) d (e + f + g + h) 
   (f + h) (g + h) h xs ys.

Fixpoint Qquadratic_Qpositive_to_Qpositive (a b c d e f g h : Z)
 (p1 p2 : Qpositive) (hyp : quadraticAcc a b c d e f g h p1 p2) {struct hyp} 
   : Qpositive :=
  match Qpositive_dec_One p1 with
  | left Hp1 =>
      Qhomographic_Qpositive_to_Qpositive (a + c) (b + d) 
        (e + g) (f + h) p2 (quadraticacc_0 a b c d e f g h p1 p2 hyp Hp1)
  | right Hp1 =>
      match Qpositive_dec_One p2 with
      | left Hp2 =>
          Qhomographic_Qpositive_to_Qpositive (a + b) 
            (c + d) (e + f) (g + h) p1
            (quadraticacc_0' a b c d e f g h p1 p2 hyp Hp1 Hp2)
      | right Hp2 =>
          match quadratic_top_more_informative a b c d e f g h with
          | left Habcdefgh =>
              nR
                (Qquadratic_Qpositive_to_Qpositive 
                   (a - e)%Z (b - f)%Z (c - g)%Z (d - h)%Z e f g h p1 p2
                   (quadraticacc_1 a b c d e f g h p1 p2 hyp Hp1 Hp2
                      Habcdefgh))
          | right Habcdefgh =>
              match quadratic_top_more_informative e f g h a b c d with
              | left Hefghabcd =>
                  dL
                    (Qquadratic_Qpositive_to_Qpositive a b c d 
                       (e - a)%Z (f - b)%Z (g - c)%Z 
                       (h - d)%Z p1 p2
                       (quadraticacc_2 a b c d e f g h p1 p2 hyp Hp1 Hp2
                          Habcdefgh Hefghabcd))
              | right Hefghabcd =>
                  match p1 as q return (p1 = q -> Qpositive) with
                  | nR x =>
                      match
                        p2 as q
                        return
                          (p2 = q ->
                           forall q0 : Qpositive, p1 = nR q0 -> Qpositive)
                      with
                      | nR ys =>
                          fun (Hys : p2 = nR ys) (xs : Qpositive)
                            (Hxs : p1 = nR xs) =>
                          Qquadratic_Qpositive_to_Qpositive a 
                            (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 
                            (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys
                            (quadraticacc_3_II a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | dL ys =>
                          fun (Hys : p2 = dL ys) (xs : Qpositive)
                            (Hxs : p1 = nR xs) =>
                          Qquadratic_Qpositive_to_Qpositive 
                            (a + b)%Z b (a + b + c + d)%Z 
                            (b + d)%Z (e + f)%Z f (e + f + g + h)%Z 
                            (f + h)%Z xs ys
                            (quadraticacc_3_IO a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | One =>
                          fun Hp2_ : p2 = One =>
                          False_rec
                            (forall q : Qpositive, p1 = nR q -> Qpositive)
                            (False_ind False (Hp2 Hp2_))
                      end (refl_equal p2) x
                  | dL x =>
                      match
                        p2 as q
                        return
                          (p2 = q ->
                           forall q0 : Qpositive, p1 = dL q0 -> Qpositive)
                      with
                      | nR ys =>
                          fun (Hys : p2 = nR ys) (xs : Qpositive)
                            (Hxs : p1 = dL xs) =>
                          Qquadratic_Qpositive_to_Qpositive 
                            (a + c)%Z (a + b + c + d)%Z c 
                            (c + d)%Z (e + g)%Z (e + f + g + h)%Z g 
                            (g + h)%Z xs ys
                            (quadraticacc_3_OI a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | dL ys =>
                          fun (Hys : p2 = dL ys) (xs : Qpositive)
                            (Hxs : p1 = dL xs) =>
                          Qquadratic_Qpositive_to_Qpositive 
                            (a + b + c + d)%Z (b + d)%Z 
                            (c + d)%Z d (e + f + g + h)%Z 
                            (f + h)%Z (g + h)%Z h xs ys
                            (quadraticacc_3_OO a b c d e f g h p1 p2 hyp xs
                               ys Hxs Hys Habcdefgh Hefghabcd)
                      | One =>
                          fun Hp2_ : p2 = One =>
                          False_rec
                            (forall q : Qpositive, p1 = dL q -> Qpositive)
                            (False_ind False (Hp2 Hp2_))
                      end (refl_equal p2) x
                  | One =>
                      fun Hp1_ : p1 = One =>
                      False_rec Qpositive (False_ind False (Hp1 Hp1_))
                  end (refl_equal p1)
              end
          end
      end
  end.

Definition octet_lt (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (a' b' c' d' e' f' g' h' : Z) (p1' p2' : Qpositive) : Prop :=
  bin_lt p1 p1' \/
  p1 = p1' /\
  (a + b + c + d + e + f + g + h < a' + b' + c' + d' + e' + f' + g' + h')%Z. 

Definition octointegral_lt (a b c d e f g h a' b' c' d' e' f' g' h' : Z) :=
  (a + b + c + d + e + f + g + h < a' + b' + c' + d' + e' + f' + g' + h')%Z.

Definition octointegral_eq (a b c d e f g h a' b' c' d' e' f' g' h' : Z) :=
  a = a' /\
  b = b' /\ c = c' /\ d = d' /\ e = e' /\ f = f' /\ g = g' /\ h = h'.

Record Z8 : Set := 
  {z8crr :> Z * Z * (Z * Z) * (Z * Z * (Z * Z));
   z8prf :
    (0 <= fst (fst (fst z8crr)))%Z /\
    (0 <= snd (fst (fst z8crr)))%Z /\
    (0 <= fst (snd (fst z8crr)))%Z /\
    (0 <= snd (snd (fst z8crr)))%Z /\
    (0 <= fst (fst (snd z8crr)))%Z /\
    (0 <= snd (fst (snd z8crr)))%Z /\
    (0 <= fst (snd (snd z8crr)))%Z /\ (0 <= snd (snd (snd z8crr)))%Z}.

Definition Z8_lt : Z8 -> Z8 -> Prop.

Definition Z8_eq : Z8 -> Z8 -> Prop.

Lemma Z8_lt_is_irreflexive : forall x : Z8, ~ Z8_lt x x.

Lemma Z8_lt_is_transitive :
 forall x y z : Z8, Z8_lt x y -> Z8_lt y z -> Z8_lt x z.

Lemma Z8_lt_is_order : is_order Z8 Z8_lt.

Lemma Z8_eq_is_reflexive : forall x : Z8, Z8_eq x x.

Lemma Z8_eq_is_symmetric : forall x y : Z8, Z8_eq x y -> Z8_eq y x.

Lemma Z8_eq_is_transitive :
 forall x y z : Z8, Z8_eq x y -> Z8_eq y z -> Z8_eq x z.

Lemma Z8_eq_is_equality : is_equality Z8 Z8_eq.

Lemma Z8_lt_is_wf : wf_ind Z8 Z8_lt.

Lemma Z8_lt_is_well_def_rht : is_well_def_rht Z8 Z8_lt Z8_eq.

Definition Z8_as_well_ordering :=
  Build_well_ordering Z8 Z8_lt Z8_eq Z8_lt_is_order Z8_eq_is_equality
    Z8_lt_is_wf Z8_lt_is_well_def_rht.

Definition Qpositive2 := (Qpositive * Qpositive)%type.

Definition bin2_lt (x y : Qpositive2) :=
  let (p1, p2) := x in let (p1', p2) := y in bin_lt p1 p1'.

Definition bin2_eq (x y : Qpositive2) :=
  let (p1, p2) := x in let (p1', p2) := y in p1 = p1'.

Lemma bin2_lt_is_irreflexive : forall x : Qpositive2, ~ bin2_lt x x.

Lemma bin2_lt_is_transitive :
 forall x y z : Qpositive2, bin2_lt x y -> bin2_lt y z -> bin2_lt x z.

Lemma bin2_lt_is_order : is_order Qpositive2 bin2_lt.

Lemma bin2_eq_is_reflexive : forall x : Qpositive2, bin2_eq x x.

Lemma bin2_eq_is_symmetric :
 forall x y : Qpositive2, bin2_eq x y -> bin2_eq y x.

Lemma bin2_eq_is_transitive :
 forall x y z : Qpositive2, bin2_eq x y -> bin2_eq y z -> bin2_eq x z.

Lemma bin2_eq_is_equality : is_equality Qpositive2 bin2_eq.

Lemma bin2_lt_is_wf : wf_ind Qpositive2 bin2_lt.

Lemma bin2_lt_is_well_def_rht : is_well_def_rht Qpositive2 bin2_lt bin2_eq.

Definition Qpositive2_as_well_ordering :=
  Build_well_ordering Qpositive2 bin2_lt bin2_eq bin2_lt_is_order
    bin2_eq_is_equality bin2_lt_is_wf bin2_lt_is_well_def_rht.

Lemma octet_lt_wf_rec_without_zeros_and_One :
 forall
   P : Z -> Z -> Z -> Z -> Z -> Z -> Z -> Z -> Qpositive -> Qpositive -> Prop,
 (forall (a b c d e f g h : Z_pos) (q1 q2 : Qpositive),
  (forall (k l r s t u v w : Z_pos) (p1 p2 : Qpositive),
   octet_lt k l r s t u v w p1 p2 a b c d e f g h q1 q2 ->
   P k l r s t u v w p1 p2) -> P a b c d e f g h q1 q2) ->
 forall (a b c d e f g h : Z_pos) (q1 q2 : Qpositive),
 P a b c d e f g h q1 q2.

Lemma quadraticAcc_wf :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 (0 < a + b + c + d)%Z ->
 (0 < e + f + g + h)%Z ->
 (0 <= a)%Z ->
 (0 <= b)%Z ->
 (0 <= c)%Z ->
 (0 <= d)%Z ->
 (0 <= e)%Z ->
 (0 <= f)%Z -> (0 <= g)%Z -> (0 <= h)%Z -> quadraticAcc a b c d e f g h p1 p2.

Scheme quadraticAcc_ind_dep := Induction for quadraticAcc Sort Prop.

Lemma Qquadratic_Qpositive_to_Qpositive_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp1 hyp2 : quadraticAcc a b c d e f g h p1 p2),
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp1 =
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp2.

Lemma Qquadratic_Qpositive_to_Qpositive_equal_strong :
 forall (a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 g1 g2 h1 h2 : Z)
   (x1 x2 y1 y2 : Qpositive)
   (hyp1 : quadraticAcc a1 b1 c1 d1 e1 f1 g1 h1 x1 y1)
   (hyp2 : quadraticAcc a2 b2 c2 d2 e2 f2 g2 h2 x2 y2),
 a1 = a2 ->
 b1 = b2 ->
 c1 = c2 ->
 d1 = d2 ->
 e1 = e2 ->
 f1 = f2 ->
 g1 = g2 ->
 h1 = h2 ->
 x1 = x2 ->
 y1 = y2 ->
 Qquadratic_Qpositive_to_Qpositive a1 b1 c1 d1 e1 f1 g1 h1 x1 y1 hyp1 =
 Qquadratic_Qpositive_to_Qpositive a2 b2 c2 d2 e2 f2 g2 h2 x2 y2 hyp2.

Lemma Qquadratic_Qpositive_to_Qpositive_0 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 = One ->
 forall hyp_ni : homographicAcc (a + c) (b + d) (e + g) (f + h) p2,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qhomographic_Qpositive_to_Qpositive (a + c) (b + d) 
   (e + g) (f + h) p2 hyp_ni.

Lemma Qquadratic_Qpositive_to_Qpositive_0' :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 <> One ->
 p2 = One ->
 forall hyp_ni : homographicAcc (a + b) (c + d) (e + f) (g + h) p1,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qhomographic_Qpositive_to_Qpositive (a + b) (c + d) 
   (e + f) (g + h) p1 hyp_ni.

Lemma Qquadratic_Qpositive_to_Qpositive_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 quadratic_top_more a b c d e f g h ->
 forall hyp_rec : quadraticAcc (a - e) (b - f) (c - g) (d - h) e f g h p1 p2,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 nR
   (Qquadratic_Qpositive_to_Qpositive (a - e) (b - f) 
      (c - g) (d - h) e f g h p1 p2 hyp_rec).

Lemma Qquadratic_Qpositive_to_Qpositive_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 p1 <> One ->
 p2 <> One ->
 ~ quadratic_top_more a b c d e f g h ->
 quadratic_top_more e f g h a b c d ->
 forall hyp_rec : quadraticAcc a b c d (e - a) (f - b) (g - c) (h - d) p1 p2,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 dL
   (Qquadratic_Qpositive_to_Qpositive a b c d (e - a) 
      (f - b) (g - c) (h - d) p1 p2 hyp_rec).

Lemma Qquadratic_Qpositive_to_Qpositive_3_II :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = nR xs ->
 forall ys : Qpositive,
 p2 = nR ys ->
 forall
   hyp_rec : quadraticAcc a (a + b) (a + c) (a + b + c + d) e 
               (e + f) (e + g) (e + f + g + h) xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive a (a + b) (a + c) 
   (a + b + c + d) e (e + f) (e + g) (e + f + g + h) xs ys hyp_rec.

Lemma Qquadratic_Qpositive_to_Qpositive_3_IO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = nR xs ->
 forall ys : Qpositive,
 p2 = dL ys ->
 forall
   hyp_rec : quadraticAcc (a + b) b (a + b + c + d) 
               (b + d) (e + f) f (e + f + g + h) (f + h) xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive (a + b) b (a + b + c + d) 
   (b + d) (e + f) f (e + f + g + h) (f + h) xs ys hyp_rec.

Lemma Qquadratic_Qpositive_to_Qpositive_3_OI :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = dL xs ->
 forall ys : Qpositive,
 p2 = nR ys ->
 forall
   hyp_rec : quadraticAcc (a + c) (a + b + c + d) c 
               (c + d) (e + g) (e + f + g + h) g (g + h) xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive (a + c) (a + b + c + d) c 
   (c + d) (e + g) (e + f + g + h) g (g + h) xs ys hyp_rec.

Lemma Qquadratic_Qpositive_to_Qpositive_3_OO :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp : quadraticAcc a b c d e f g h p1 p2),
 ~ quadratic_top_more a b c d e f g h ->
 ~ quadratic_top_more e f g h a b c d ->
 forall xs : Qpositive,
 p1 = dL xs ->
 forall ys : Qpositive,
 p2 = dL ys ->
 forall
   hyp_rec : quadraticAcc (a + b + c + d) (b + d) (c + d) d 
               (e + f + g + h) (f + h) (g + h) h xs ys,
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp =
 Qquadratic_Qpositive_to_Qpositive (a + b + c + d) 
   (b + d) (c + d) d (e + f + g + h) (f + h) (g + h) h xs ys hyp_rec. *)
Require Export Qquadratic_sign_properties.
(* Qquadratic_sign_properties:
Require Import ZArithRing.
Require Export Qhomographic_sign.
Require Export Qquadratic_sign.
Require Export Qhomographic_sign_properties.

Definition same_ratio (a b c d e f g h : Z) :=
  (a * f)%Z = (b * e)%Z /\
  (b * g)%Z = (c * f)%Z /\
  (c * h)%Z = (d * g)%Z /\
  (a * g)%Z = (c * e)%Z /\ (a * h)%Z = (d * e)%Z /\ (b * h)%Z = (d * f)%Z.

Lemma same_ratio_dec_inf :
 forall a b c d e f g h : Z,
 {same_ratio a b c d e f g h} + {~ same_ratio a b c d e f g h}.

Lemma Qquadratic_sign_tuple_equal :
 forall (l1 a1 b1 c1 d1 e1 f1 g1 h1 : Z) (x1 y1 : Qpositive)
   (l2 a2 b2 c2 d2 e2 f2 g2 h2 : Z) (x2 y2 : Qpositive),
 (l1, (a1, (b1, (c1, d1)), (e1, (f1, (g1, h1))), (x1, y1))) =
 (l2, (a2, (b2, (c2, d2)), (e2, (f2, (g2, h2))), (x2, y2))) ->
 l1 = l2 /\
 (a1 = a2 /\
  b1 = b2 /\ c1 = c2 /\ d1 = d2 /\ e1 = e2 /\ f1 = f2 /\ g1 = g2 /\ h1 = h2) /\
 x1 = x2 /\ y1 = y2.

Lemma outside_square_1 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 < a + b + c + d)%Z.

Lemma outside_square_2 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (a + b + c + d < 0)%Z.

Lemma outside_square_3 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= a)%Z.

Lemma outside_square_4 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= b)%Z.

Lemma outside_square_5 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= c)%Z.

Lemma outside_square_6 :
 forall a b c d : Z, (2 < outside_square a b c d)%Z -> (0 <= d)%Z.

Lemma outside_square_7 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (a <= 0)%Z.

Lemma outside_square_8 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (b <= 0)%Z.

Lemma outside_square_9 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (c <= 0)%Z.

Lemma outside_square_10 :
 forall a b c d : Z, (outside_square a b c d < -2)%Z -> (d <= 0)%Z.

Lemma inside_square_1_inf :
 forall o1 o2 : Z,
 inside_square_1 o1 o2 ->
 {(2 < o1)%Z /\ (2 < o2)%Z} + {(o1 < -2)%Z /\ (o2 < -2)%Z}.

Lemma inside_square_2_inf :
 forall o1 o2 : Z,
 inside_square_2 o1 o2 ->
 {(2 < o1)%Z /\ (o2 < -2)%Z} + {(o1 < -2)%Z /\ (2 < o2)%Z}.

Lemma Qquadratic_sign_pos_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (1%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 < na + nb + nc + nd)%Z /\ (0 < ne + nf + ng + nh)%Z} +
 {(na + nb + nc + nd < 0)%Z /\ (ne + nf + ng + nh < 0)%Z}.

Lemma Qquadratic_sign_pos_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 (1%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 <= na)%Z /\
  (0 <= nb)%Z /\
  (0 <= nc)%Z /\
  (0 <= nd)%Z /\ (0 <= ne)%Z /\ (0 <= nf)%Z /\ (0 <= ng)%Z /\ (0 <= nh)%Z} +
 {(na <= 0)%Z /\
  (nb <= 0)%Z /\
  (nc <= 0)%Z /\
  (nd <= 0)%Z /\ (ne <= 0)%Z /\ (nf <= 0)%Z /\ (ng <= 0)%Z /\ (nh <= 0)%Z} +
 {np1 = One /\
  (0 <= na + nc)%Z /\
  (0 <= nb + nd)%Z /\ (0 <= ne + ng)%Z /\ (0 <= nf + nh)%Z} +
 {np1 = One /\
  (na + nc <= 0)%Z /\
  (nb + nd <= 0)%Z /\ (ne + ng <= 0)%Z /\ (nf + nh <= 0)%Z} +
 {np1 = One /\ np2 = One} +
 {np1 <> One /\
  np2 = One /\
  (0 <= na + nb)%Z /\
  (0 <= nc + nd)%Z /\ (0 <= ne + nf)%Z /\ (0 <= ng + nh)%Z} +
 {np1 <> One /\
  np2 = One /\
  (na + nb <= 0)%Z /\
  (nc + nd <= 0)%Z /\ (ne + nf <= 0)%Z /\ (ng + nh <= 0)%Z}.

Lemma Qquadratic_sign_neg_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((-1)%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 < na + nb + nc + nd)%Z /\ (ne + nf + ng + nh < 0)%Z} +
 {(na + nb + nc + nd < 0 < ne + nf + ng + nh)%Z}.

Lemma Qquadratic_sign_neg_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (na nb nc nd ne nf ng nh : Z) (np1 np2 : Qpositive),
 Qquadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 ((-1)%Z, (na, (nb, (nc, nd)), (ne, (nf, (ng, nh))), (np1, np2))) ->
 {(0 <= na)%Z /\
  (0 <= nb)%Z /\
  (0 <= nc)%Z /\
  (0 <= nd)%Z /\ (ne <= 0)%Z /\ (nf <= 0)%Z /\ (ng <= 0)%Z /\ (nh <= 0)%Z} +
 {(na <= 0)%Z /\
  (nb <= 0)%Z /\
  (nc <= 0)%Z /\
  (nd <= 0)%Z /\ (0 <= ne)%Z /\ (0 <= nf)%Z /\ (0 <= ng)%Z /\ (0 <= nh)%Z} +
 {np1 = One /\
  (0 <= na + nc)%Z /\
  (0 <= nb + nd)%Z /\ (ne + ng <= 0)%Z /\ (nf + nh <= 0)%Z} +
 {np1 = One /\
  (na + nc <= 0)%Z /\
  (nb + nd <= 0)%Z /\ (0 <= ne + ng)%Z /\ (0 <= nf + nh)%Z} +
 {np1 = One /\ np2 = One} +
 {np1 <> One /\
  np2 = One /\
  (0 <= na + nb)%Z /\
  (0 <= nc + nd)%Z /\ (ne + nf <= 0)%Z /\ (ng + nh <= 0)%Z} +
 {np1 <> One /\
  np2 = One /\
  (na + nb <= 0)%Z /\
  (nc + nd <= 0)%Z /\ (0 <= ne + nf)%Z /\ (0 <= ng + nh)%Z}. *)
Require Export Qquadratic.
(* Qquadratic:
Require Export Qhomographic.
Require Export quadraticAcc_Qquadratic_sign.
Require Import general_Q Zaux.

Lemma Qquadratic_sg_denom_nonzero_always :
 forall (k e f g h : Z) (p1 p2 : Qpositive),
 k <> 0%Z ->
 (0 < e)%Z ->
 (0 < f)%Z ->
 (0 < g)%Z ->
 (0 < h)%Z ->
 Qquadratic_sg_denom_nonzero (k * e) (k * f) (k * g) (k * h) p1 p2.

Lemma Qquadratic_sg_denom_nonzero_Zero_Zero_always :
 forall (k g h : Z) (p1 p2 : Qpositive),
 k <> 0%Z ->
 (0 < g)%Z ->
 (0 < h)%Z -> Qquadratic_sg_denom_nonzero 0 0 (k * g) (k * h) p1 p2.

Lemma Qquadratic_sg_denom_nonzero_Zero_always_Zero_always :
 forall (k f h : Z) (p1 p2 : Qpositive),
 k <> 0%Z ->
 (0 < f)%Z ->
 (0 < h)%Z -> Qquadratic_sg_denom_nonzero 0 (k * f) 0 (k * h) p1 p2.

Lemma Qquadratic_sg_denom_nonzero_always_Zero_always_Zero :
 forall (k e g : Z) (p1 p2 : Qpositive),
 k <> 0%Z ->
 (0 < e)%Z ->
 (0 < g)%Z -> Qquadratic_sg_denom_nonzero (k * e) 0 (k * g) 0 p1 p2.

Lemma Qquadratic_sg_denom_nonzero_Zero_Zero_Zero_always :
 forall (h : Z) (p1 p2 : Qpositive),
 h <> 0%Z -> Qquadratic_sg_denom_nonzero 0 0 0 h p1 p2.

Lemma Qquadratic_sg_denom_nonzero_Zero_Zero_always_Zero :
 forall (g : Z) (p1 p2 : Qpositive),
 g <> 0%Z -> Qquadratic_sg_denom_nonzero 0 0 g 0 p1 p2.

Lemma Qquadratic_sg_denom_nonzero_nonzero :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 e = 0%Z ->
 f = 0%Z -> g = 0%Z -> h = 0%Z -> ~ Qquadratic_sg_denom_nonzero e f g h p1 p2.

Lemma Qquadratic_sg_denom_nonzero_nonzero_1 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h p1 p2 ->
 ~ (e = 0%Z /\ f = 0%Z /\ g = 0%Z /\ h = 0%Z).

Lemma Qquadratic_sg_denom_nonzero_nonzero_inf :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h p1 p2 ->
 {e <> 0%Z} + {f <> 0%Z} + {g <> 0%Z} + {h <> 0%Z}.

Lemma Qquadratic_sg_denom_nonzero_nonzero_3 :
 forall (g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero 0 0 g h p1 p2 -> g <> 0%Z \/ h <> 0%Z.

Definition Qquadratic_Qpositive_to_Q (a b c d e f g h : Z)
  (p1 p2 : Qpositive) (H_qsign : Qquadratic_sg_denom_nonzero e f g h p1 p2) :
  Q.

Inductive Qquadratic_denom_nonzero : Z -> Z -> Z -> Z -> Q -> Q -> Prop :=
  | Qquadraticok00 :
      forall (e f g h : Z) (s1 s2 : Q),
      s1 = Zero ->
      s2 = Zero -> h <> 0%Z -> Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok01 :
      forall (e f g h : Z) (s1 s2 : Q) (p2 : Qpositive),
      s1 = Zero ->
      s2 = Qpos p2 ->
      Qhomographic_sg_denom_nonzero g h p2 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok02 :
      forall (e f g h : Z) (s1 s2 : Q) (p2 : Qpositive),
      s1 = Zero ->
      s2 = Qneg p2 ->
      Qhomographic_sg_denom_nonzero (- g) h p2 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok10 :
      forall (e f g h : Z) (s1 s2 : Q) (p1 : Qpositive),
      s1 = Qpos p1 ->
      s2 = Zero ->
      Qhomographic_sg_denom_nonzero f h p1 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok20 :
      forall (e f g h : Z) (s1 s2 : Q) (p1 : Qpositive),
      s1 = Qneg p1 ->
      s2 = Zero ->
      Qhomographic_sg_denom_nonzero (- f) h p1 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok11 :
      forall (e f g h : Z) (s1 s2 : Q) (p1 p2 : Qpositive),
      s1 = Qpos p1 ->
      s2 = Qpos p2 ->
      Qquadratic_sg_denom_nonzero e f g h p1 p2 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok12 :
      forall (e f g h : Z) (s1 s2 : Q) (p1 p2 : Qpositive),
      s1 = Qpos p1 ->
      s2 = Qneg p2 ->
      Qquadratic_sg_denom_nonzero (- e) f (- g) h p1 p2 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok21 :
      forall (e f g h : Z) (s1 s2 : Q) (p1 p2 : Qpositive),
      s1 = Qneg p1 ->
      s2 = Qpos p2 ->
      Qquadratic_sg_denom_nonzero (- e) (- f) g h p1 p2 ->
      Qquadratic_denom_nonzero e f g h s1 s2
  | Qquadraticok22 :
      forall (e f g h : Z) (s1 s2 : Q) (p1 p2 : Qpositive),
      s1 = Qneg p1 ->
      s2 = Qneg p2 ->
      Qquadratic_sg_denom_nonzero e (- f) (- g) h p1 p2 ->
      Qquadratic_denom_nonzero e f g h s1 s2.

Lemma Qquadratic_00 :
 forall e f g h : Z, Qquadratic_denom_nonzero e f g h Zero Zero -> h <> 0%Z.  

Lemma Qquadratic_01 :
 forall (e f g h : Z) (p2 : Qpositive),
 Qquadratic_denom_nonzero e f g h Zero (Qpos p2) ->
 Qhomographic_sg_denom_nonzero g h p2.

Lemma Qquadratic_02 :
 forall (e f g h : Z) (p2 : Qpositive),
 Qquadratic_denom_nonzero e f g h Zero (Qneg p2) ->
 Qhomographic_sg_denom_nonzero (- g) h p2.

Lemma Qquadratic_10 :
 forall (e f g h : Z) (p1 : Qpositive),
 Qquadratic_denom_nonzero e f g h (Qpos p1) Zero ->
 Qhomographic_sg_denom_nonzero f h p1.

Lemma Qquadratic_20 :
 forall (e f g h : Z) (p1 : Qpositive),
 Qquadratic_denom_nonzero e f g h (Qneg p1) Zero ->
 Qhomographic_sg_denom_nonzero (- f) h p1.

Lemma Qquadratic_11 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_denom_nonzero e f g h (Qpos p1) (Qpos p2) ->
 Qquadratic_sg_denom_nonzero e f g h p1 p2.

Lemma Qquadratic_12 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_denom_nonzero e f g h (Qpos p1) (Qneg p2) ->
 Qquadratic_sg_denom_nonzero (- e) f (- g) h p1 p2.

Lemma Qquadratic_21 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_denom_nonzero e f g h (Qneg p1) (Qpos p2) ->
 Qquadratic_sg_denom_nonzero (- e) (- f) g h p1 p2.

Lemma Qquadratic_22 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_denom_nonzero e f g h (Qneg p1) (Qneg p2) ->
 Qquadratic_sg_denom_nonzero e (- f) (- g) h p1 p2.

Definition Qquadratic :
  Z ->
  Z ->
  Z ->
  Z ->
  forall (e f g h : Z) (s1 s2 : Q)
    (H_Qquadratic_denom_nonzero : Qquadratic_denom_nonzero e f g h s1 s2), Q.

Lemma Qquadratic_denom_nonzero_Zero_Zero_Zero_always :
 forall (h : Z) (s1 s2 : Q),
 h <> 0%Z -> Qquadratic_denom_nonzero 0 0 0 h s1 s2.

Lemma Qquadratic_denom_nonzero_Zero_Zero_Zero_ONE :
 forall s1 s2 : Q, Qquadratic_denom_nonzero 0 0 0 1 s1 s2.

Lemma Qquadratic_denom_nonzero_Zero_Zero_always_Zero :
 forall (g : Z) (s1 s2 : Q) (H_nonzero_s2 : s2 <> Zero :>Q),
 g <> 0%Z -> Qquadratic_denom_nonzero 0 0 g 0 s1 s2.

Lemma Qquadratic_denom_nonzero_Zero_Zero_ONE_Zero :
 forall (s1 s2 : Q) (H_nonzero_s2 : s2 <> Zero :>Q),
 Qquadratic_denom_nonzero 0 0 1 0 s1 s2.

Definition Qplus_lazy (x y : Q) : Q :=
  Qquadratic 0 1 1 0 0 0 0 1 x y
    (Qquadratic_denom_nonzero_Zero_Zero_Zero_ONE x y).

Definition Qmult_lazy (x y : Q) : Q :=
  Qquadratic 1 0 0 0 0 0 0 1 x y
    (Qquadratic_denom_nonzero_Zero_Zero_Zero_ONE x y).

Definition Qminus_lazy (x y : Q) : Q :=
  Qquadratic 0 1 (-1) 0 0 0 0 1 x y
    (Qquadratic_denom_nonzero_Zero_Zero_Zero_ONE x y).

Definition Qdiv_lazy (x y : Q) (Hy : y <> Zero) : Q :=
  Qquadratic 0 1 0 0 0 0 1 0 x y
    (Qquadratic_denom_nonzero_Zero_Zero_ONE_Zero x y Hy). *)
Require Export quadraticAcc_Qquadratic_sign.
(* quadraticAcc_Qquadratic_sign:
Require Export Qquadratic_sign_properties.
Require Export Qquadratic_Qpositive_to_Qpositive.
Require Export homographicAcc_Qhomographic_sign.

Definition qnew_a (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (fst
       (fst
          (snd
             (Qquadratic_sign a b c d e f g h p1 p2
                H_Qquadratic_sg_denom_nonzero)))).

Definition qnew_b (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (fst
          (fst
             (snd
                (Qquadratic_sign a b c d e f g h p1 p2
                   H_Qquadratic_sg_denom_nonzero))))).

Definition qnew_c (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (fst
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_d (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  snd
    (snd
       (snd
          (fst
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_e (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (fst
          (snd
             (Qquadratic_sign a b c d e f g h p1 p2
                H_Qquadratic_sg_denom_nonzero)))).

Definition qnew_f (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (fst
             (snd
                (Qquadratic_sign a b c d e f g h p1 p2
                   H_Qquadratic_sg_denom_nonzero))))).

Definition qnew_g (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (snd
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_h (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  snd
    (snd
       (snd
          (snd
             (fst
                (snd
                   (Qquadratic_sign a b c d e f g h p1 p2
                      H_Qquadratic_sg_denom_nonzero)))))).

Definition qnew_p1 (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  fst
    (snd
       (snd
          (Qquadratic_sign a b c d e f g h p1 p2
             H_Qquadratic_sg_denom_nonzero))).

Definition qnew_p2 (a b c d e f g h : Z) (p1 p2 : Qpositive)
  (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2) :=
  snd
    (snd
       (snd
          (Qquadratic_sign a b c d e f g h p1 p2
             H_Qquadratic_sg_denom_nonzero))).  

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_pos_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z ->
 Z.sgn

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_pos_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z ->
 Z.sgn

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_neg_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z ->
 Z.sgn

Lemma Qquadratic_Qpositive_to_Q_quadraticAcc_neg_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z ->
 Z.sgn *)
Require Export Qquadratic_Qpositive_to_Q_properties.
(* Qquadratic_Qpositive_to_Q_properties:
Require Import FunInd.
Require Export Qquadratic.
Require Import homographic_correctness.

Lemma fraction_encoding_reduces :
 forall (a b m n : Z) (Hb : b <> 0%Z) (Hn : n <> 0%Z),
 (a * n)%Z = (m * b)%Z -> fraction_encoding a b Hb = fraction_encoding m n Hn.

Functional Scheme Qquadratic_Qpositive_to_Q_ind := 
  Induction for Qquadratic_Qpositive_to_Q Sort Prop.

Lemma Qquadratic_Qpositive_to_Q_0 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (Hh : h <> 0%Z),
 same_ratio a b c d e f g h ->
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero = fraction_encoding d h Hh. 

Lemma Qquadratic_Qpositive_to_Q_1 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (Hg : g <> 0%Z),
 same_ratio a b c d e f g h ->
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero = fraction_encoding c g Hg. 

Lemma Qquadratic_Qpositive_to_Q_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (Hf : f <> 0%Z),
 same_ratio a b c d e f g h ->
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero = fraction_encoding b f Hf. 

Lemma Qquadratic_Qpositive_to_Q_3 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2)
   (He : e <> 0%Z),
 same_ratio a b c d e f g h ->
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero = fraction_encoding a e He. 

Ltac QSign_mismatch_ :=
  apply False_ind;
   match goal with
   | id1:(?X1 = 1%Z),id2:(?X1 = 0%Z) |- _ =>
       rewrite id2 in id1; discriminate id1
   | id1:(?X1 = (-1)%Z),id2:(?X1 = 0%Z) |- _ =>
       rewrite id2 in id1; discriminate id1
   | id1:(?X1 = 1%Z),id2:(?X1 = (-1)%Z) |- _ =>
       rewrite id2 in id1; discriminate id1

   | id2:(?X1 = 0%Z),id1:(?X1 = 1%Z) |- _ =>
       rewrite id2 in id1; discriminate id1
   | id1:(?X1 = 0%Z),id2:(?X1 = (-1)%Z) |- _ =>
       rewrite id2 in id1; discriminate id1
   | id1:(?X1 = (-1)%Z),id2:(?X1 = 1%Z) |- _ =>
       rewrite id2 in id1; discriminate id1

   end.

Ltac Absurd_q_sign_ :=
  match goal with
  | id1:(q_sign ?X1 ?X2 ?X3 ?X4 ?X5 ?X6 ?X7 ?X8 ?X9 ?X10 ?X11 = ?X0),id2:
  (Z.sgn _ = 0%Z) |- _ =>
      match constr:(X0) with
      | 0%Z => QSign_mismatch_
      end ||
        (apply False_ind;
          assert
           (HH :
            Qquadratic_sign X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 =
            (X0,
            (qnew_a X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            (qnew_b X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            (qnew_c X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            qnew_d X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)),
            (qnew_e X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            (qnew_f X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            (qnew_g X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            qnew_h X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11))),
            (qnew_p1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11,
            qnew_p2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11))));
          [ rewrite <- id1;
             unfold qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g,
              qnew_h, qnew_p1, qnew_p2 in |- *;
             replace (q_sign X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11) with
              (fst (Qquadratic_sign X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11));
             [ idtac | reflexivity ]; repeat rewrite <- pair_1; 
             reflexivity
          | idtac ];
          match constr:(X0) with
          | 1%Z =>
              generalize
               (Qquadratic_sign_pos_1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11
                  (qnew_a X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_b X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_c X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_d X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_e X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_f X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_g X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_h X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_p1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_p2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11) HH)
          | (-1)%Z =>
              generalize
               (Qquadratic_sign_neg_1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11
                  (qnew_a X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_b X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_c X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_d X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_e X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_f X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_g X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_h X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_p1 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11)
                  (qnew_p2 X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11) HH)
          end; intros [(na_nb_nc_nd_pos, _)| (na_nb_nc_nd_neg, _)];
          generalize (Zsgn_2 _ id2); [ apply sym_not_eq | idtac ];
          apply Zorder.Zlt_not_eq; assumption)
  end.

Lemma Qquadratic_Qpositive_to_Q_4 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 0%Z ->
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero = Zero. 

Lemma Qquadratic_Qpositive_to_Q_5 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z ->
 Z.sgn

Lemma Qquadratic_Qpositive_to_Q_6 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = 1%Z ->
 Z.sgn

Lemma Qquadratic_Qpositive_to_Q_7 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z ->
 Z.sgn

Lemma Qquadratic_Qpositive_to_Q_8 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 ~ same_ratio a b c d e f g h ->
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero = (-1)%Z ->
 Z.sgn

Lemma q_sign_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_a_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_b_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_c_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_d_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_e_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_e a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_e a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_f_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_g_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_h_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_p1_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_p1 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_p1 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma qnew_p2_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero1 =
 qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero2.

Lemma Qquadratic_Qpositive_to_Q_equal :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero1
    H_Qquadratic_sg_denom_nonzero2 : Qquadratic_sg_denom_nonzero e f g h p1
                                       p2),
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero1 =
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero2. *)

Definition spec_q (a b c d e f g h : Z) (q1 q2 : Q) : Q :=
  Qmult
    (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2))
       d)
    (Qinv
       (Qplus
          (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).

Definition spec_Qquadratic_Qpositive_to_Q (a b c d e f g h : Z)
  (p1 p2 : Qpositive) : Q :=
  Qmult
    (Qplus
       (Qplus
          (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
          (Qmult c (Qpos p2))) d)
    (Qinv
       (Qplus
          (Qplus
             (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
             (Qmult g (Qpos p2))) h)).

Definition spec_Qquadratic_Qpositive_to_Qpositive2 
  (a b c d e f g h : Z) (p1 p2 : Qpositive) : Qpositive :=
  Qpositive_mult
    (Q_tail
       (Qplus
          (Qplus
             (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
             (Qmult c (Qpos p2))) d))
    (Qpositive_inv
       (Q_tail
          (Qplus
             (Qplus
                (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2))
                   (Qmult f (Qpos p1))) (Qmult g (Qpos p2))) h))).

Lemma spec_Qquadratic_Qpositive_to_Q_commut :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 spec_Qquadratic_Qpositive_to_Q a c b d e g f h p2 p1.
Proof.
 intros a b c d e f g h p1 p2.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *. 
 abstract (apply f_equal2 with Q Q; solve
            [ ring | apply f_equal with Q; ring ]).
Qed. 

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_commut :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2 =
 spec_Qquadratic_Qpositive_to_Qpositive2 a c b d e g f h p2 p1.
Proof.
 intros a b c d e f g h p1 p2.
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *. 
 abstract (apply f_equal2 with Qpositive Qpositive;
            try apply f_equal with Qpositive; apply f_equal with Q; 
            ring). 
Qed. 

Lemma spec_Qquadratic_Qpositive_to_Q_p_One :
 forall (a b c d e f g h : Z) (p : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p One =
 spec_Qhomographic_Qpositive_to_Q (a + b) (c + d) (e + f) (g + h) p.
Proof.
 intros a b c d e f g h p;
  unfold spec_Qhomographic_Qpositive_to_Q, spec_Qquadratic_Qpositive_to_Q
   in |- *; repeat rewrite Z_to_Qplus; apply f_equal2 with Q Q;
  [ ring | apply f_equal with Q; ring ].
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_p_One_unfolded :
 forall (a b c d e f g h : Z) (p : Qpositive),
 Qmult
   (Qplus
      (Qplus (Qplus (Qmult (Qmult a (Qpos p)) (Qpos One)) (Qmult b (Qpos p)))
         (Qmult c (Qpos One))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p)) (Qpos One)) (Qmult f (Qpos p)))
            (Qmult g (Qpos One))) h)) =
 Qmult (Qplus (Qmult (a + b)%Z (Qpos p)) (c + d)%Z)
   (Qinv (Qplus (Qmult (e + f)%Z (Qpos p)) (g + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_p_One.

Lemma spec_Qquadratic_Qpositive_to_Q_One_p :
 forall (a b c d e f g h : Z) (p : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h One p =
 spec_Qhomographic_Qpositive_to_Q (a + c) (b + d) (e + g) (f + h) p.
Proof.
 intros a b c d e f g h p;
  unfold spec_Qhomographic_Qpositive_to_Q, spec_Qquadratic_Qpositive_to_Q
   in |- *; repeat rewrite Z_to_Qplus; apply f_equal2 with Q Q;
  [ ring | apply f_equal with Q; ring ].
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_One_p_unfolded :
 forall (a b c d e f g h : Z) (p : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos One)) (Qpos p)) (Qmult b (Qpos One)))
         (Qmult c (Qpos p))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos One)) (Qpos p)) (Qmult f (Qpos One)))
            (Qmult g (Qpos p))) h)) =
 Qmult (Qplus (Qmult (a + c)%Z (Qpos p)) (b + d)%Z)
   (Qinv (Qplus (Qmult (e + g)%Z (Qpos p)) (f + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_One_p.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (nR p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Q a (a + b) (a + c) (a + b + c + d) e 
   (e + f) (e + g) (e + f + g + h) p1 p2.
Proof.
 intros.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *.
 do 6 rewrite Qmult_Z_nR.
 rewrite Qpos_nR.
 repeat rewrite <- Qplus_assoc. 
 repeat rewrite Z_to_Qplus.
 apply f_equal2 with Q Q.
 abstract ring.
 apply f_equal with Q.
 abstract ring.
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_nR_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (nR p1))) (Qpos (nR p2)))
            (Qmult b (Qpos (nR p1)))) (Qmult c (Qpos (nR p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (nR p1))) (Qpos (nR p2)))
               (Qmult f (Qpos (nR p1)))) (Qmult g (Qpos (nR p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2))
            (Qmult (a + b)%Z (Qpos p1))) (Qmult (a + c)%Z (Qpos p2)))
      (a + b + c + d)%Z)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2))
               (Qmult (e + f)%Z (Qpos p1))) (Qmult (e + g)%Z (Qpos p2)))
         (e + f + g + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_nR_nR.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (nR p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Q (a + b) b (a + b + c + d) 
   (b + d) (e + f) f (e + f + g + h) (f + h) p1 p2.
Proof.
Opaque Qmult Qplus Qinv Qone.
 abstract (intros a b c d e f g h p1 p2;
            unfold spec_Qquadratic_Qpositive_to_Q at 1 in |- *;
            rewrite Qdiv_num_denom with (p := Qplus (Qpos p2) Qone);
            [ idtac | discriminate ];
            unfold spec_Qquadratic_Qpositive_to_Q in |- *;
            repeat rewrite Z_to_Qplus; rewrite Qpos_nR; 
            rewrite Qpos_dL; apply f_equal2 with Q Q;
            [ field | apply f_equal with Q; field ]; 
            discriminate).
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_nR_dL_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (nR p1))) (Qpos (dL p2)))
            (Qmult b (Qpos (nR p1)))) (Qmult c (Qpos (dL p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (nR p1))) (Qpos (dL p2)))
               (Qmult f (Qpos (nR p1)))) (Qmult g (Qpos (dL p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a + b)%Z (Qpos p1)) (Qpos p2))
            (Qmult b (Qpos p1))) (Qmult (a + b + c + d)%Z (Qpos p2)))
      (b + d)%Z)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e + f)%Z (Qpos p1)) (Qpos p2))
               (Qmult f (Qpos p1))) (Qmult (e + f + g + h)%Z (Qpos p2)))
         (f + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_nR_dL.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (dL p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Q (a + c) (a + b + c + d) c 
   (c + d) (e + g) (e + f + g + h) g (g + h) p1 p2.
Proof.
 abstract (intros a b c d e f g h p1 p2;
            rewrite spec_Qquadratic_Qpositive_to_Q_commut;
            rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL;
            rewrite spec_Qquadratic_Qpositive_to_Q_commut;
            replace (a + b + c + d)%Z with (a + c + b + d)%Z;
            [ replace (e + f + g + h)%Z with (e + g + f + h)%Z;
               [ reflexivity | ring ]
            | ring ]).
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_nR_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (dL p1))) (Qpos (nR p2)))
            (Qmult b (Qpos (dL p1)))) (Qmult c (Qpos (nR p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (dL p1))) (Qpos (nR p2)))
               (Qmult f (Qpos (dL p1)))) (Qmult g (Qpos (nR p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a + c)%Z (Qpos p1)) (Qpos p2))
            (Qmult (a + b + c + d)%Z (Qpos p1))) (Qmult c (Qpos p2)))
      (c + d)%Z)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e + g)%Z (Qpos p1)) (Qpos p2))
               (Qmult (e + f + g + h)%Z (Qpos p1))) 
            (Qmult g (Qpos p2))) (g + h)%Z)).
Proof spec_Qquadratic_Qpositive_to_Q_dL_nR.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h (dL p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Q (a + b + c + d) (b + d) 
   (c + d) d (e + f + g + h) (f + h) (g + h) h p1 p2.
Proof.
 abstract (intros a b c d e f g h p1 p2;
            unfold spec_Qquadratic_Qpositive_to_Q at 1 in |- *;
            rewrite
             Qdiv_num_denom
                            with
                            (p := 
                              Qmult (Qplus (Qpos p1) Qone)
                                (Qplus (Qpos p2) Qone));
            [ idtac | discriminate ];
            unfold spec_Qquadratic_Qpositive_to_Q in |- *;
            repeat rewrite Z_to_Qplus; do 2 rewrite Qpos_dL;
            apply f_equal2 with Q Q; [ field | apply f_equal with Q; field ];
            split; discriminate).
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_dL_dL_unfolded :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos (dL p1))) (Qpos (dL p2)))
            (Qmult b (Qpos (dL p1)))) (Qmult c (Qpos (dL p2)))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos (dL p1))) (Qpos (dL p2)))
               (Qmult f (Qpos (dL p1)))) (Qmult g (Qpos (dL p2)))) h)) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a + b + c + d)%Z (Qpos p1)) (Qpos p2))
            (Qmult (b + d)%Z (Qpos p1))) (Qmult (c + d)%Z (Qpos p2))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e + f + g + h)%Z (Qpos p1)) (Qpos p2))
               (Qmult (f + h)%Z (Qpos p1))) (Qmult (g + h)%Z (Qpos p2))) h)).
Proof spec_Qquadratic_Qpositive_to_Q_dL_dL.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_nR_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (nR p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 a (a + b) 
   (a + c) (a + b + c + d) e (e + f) (e + g) (e + f + g + h) p1 p2.
Proof.
 abstract (intros a b c d e f g h p1 p2;
            unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *;
            do 6 rewrite Qmult_Z_nR; rewrite Qpos_nR;
            repeat rewrite Z_to_Qplus;
            apply f_equal2 with Qpositive Qpositive;
            try apply f_equal with Qpositive; apply f_equal with Q;
            abstract ring).
Qed.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_nR_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus a b) (Qpos p1)) (Qpos p2))
         (Qmult b (Qpos p1)))
      (Qmult (Qplus (Qplus (Qplus a b) c) d) (Qpos p2))) 
   (Qplus b d) <> Zero ->
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus e f) (Qpos p1)) (Qpos p2))
         (Qmult f (Qpos p1)))
      (Qmult (Qplus (Qplus (Qplus e f) g) h) (Qpos p2))) 
   (Qplus f h) <> Zero ->
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (nR p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 (a + b) b 
   (a + b + c + d) (b + d) (e + f) f (e + f + g + h) 
   (f + h) p1 p2.
Proof.
 abstract (intros a b c d e f g h p1 p2 H_num H_denom;
            unfold spec_Qquadratic_Qpositive_to_Qpositive2 at 1 in |- *;
            rewrite <- Q_tail_Qinv; rewrite <- Q_tail_Qmult; 
            rewrite Qpos_nR; rewrite Qpos_dL;
            [ idtac
            | intro H;
               apply
                (Qmult_resp_nonzero _ (Qinv (Qplus (Qpos p2) Qone)) H_num);
               [ discriminate | rewrite <- H; field; discriminate ]
            | apply Qinv_resp_nonzero; intro H;
               apply
                (Qmult_resp_nonzero _ (Qinv (Qplus (Qpos p2) Qone)) H_denom);
               [ discriminate | rewrite <- H; field; discriminate ] ];
            rewrite Qdiv_num_denom with (p := Qplus (Qpos p2) Qone);
            [ idtac | discriminate ];
            unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *;
            repeat rewrite Z_to_Qplus; rewrite <- Q_tail_Qinv;
            rewrite <- Q_tail_Qmult;
            [ idtac | assumption | apply Qinv_resp_nonzero; assumption ];
            apply f_equal with Q; apply f_equal2 with Q Q;
            [ field | apply f_equal with Q; field ]; 
            discriminate).
Qed.  

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_dL_nR :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus a c) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus (Qplus (Qplus a b) c) d) (Qpos p1)))
      (Qmult c (Qpos p2))) (Qplus c d) <> Zero ->
 Qplus
   (Qplus
      (Qplus (Qmult (Qmult (Qplus e g) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus (Qplus (Qplus e f) g) h) (Qpos p1)))
      (Qmult g (Qpos p2))) (Qplus g h) <> Zero ->
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (dL p1) (nR p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 (a + c) (a + b + c + d) c 
   (c + d) (e + g) (e + f + g + h) g (g + h) p1 p2.
Proof.
 intros a b c d e f g h p1 p2 H_num H_denom;
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_commut;
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_nR_dL;
  [ idtac
  | intro H; apply H_num; rewrite <- H; ring
  | intro H; apply H_denom; rewrite <- H; ring ];
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_commut;
  replace (a + b + c + d)%Z with (a + c + b + d)%Z;
  [ replace (e + f + g + h)%Z with (e + g + f + h)%Z; [ reflexivity | ring ]
  | ring ].
Qed.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_dL_dL :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus
      (Qplus
         (Qmult (Qmult (Qplus (Qplus (Qplus a b) c) d) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus b d) (Qpos p1))) (Qmult (Qplus c d) (Qpos p2))) d <>
 Zero ->
 Qplus
   (Qplus
      (Qplus
         (Qmult (Qmult (Qplus (Qplus (Qplus e f) g) h) (Qpos p1)) (Qpos p2))
         (Qmult (Qplus f h) (Qpos p1))) (Qmult (Qplus g h) (Qpos p2))) h <>
 Zero ->
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h (dL p1) (dL p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 (a + b + c + d) 
   (b + d) (c + d) d (e + f + g + h) (f + h) (g + h) h p1 p2.
Proof.
 abstract (intros a b c d e f g h p1 p2 H_num H_denom;
            unfold spec_Qquadratic_Qpositive_to_Qpositive2 at 1 in |- *;
            rewrite <- Q_tail_Qinv; rewrite <- Q_tail_Qmult;
            repeat rewrite Qpos_dL;
            [ idtac
            | intro H;
               apply
                (Qmult_resp_nonzero _
                   (Qinv
                      (Qmult (Qplus (Qpos p1) Qone) (Qplus (Qpos p2) Qone)))
                   H_num);
               [ discriminate | rewrite <- H; field; split; discriminate ]
            | apply Qinv_resp_nonzero; intro H;
               apply
                (Qmult_resp_nonzero _
                   (Qinv
                      (Qmult (Qplus (Qpos p1) Qone) (Qplus (Qpos p2) Qone)))
                   H_denom);
               [ discriminate | rewrite <- H; field; split; discriminate ] ];
            rewrite
             Qdiv_num_denom
                            with
                            (p := 
                              Qmult (Qplus (Qpos p1) Qone)
                                (Qplus (Qpos p2) Qone));
            [ idtac | discriminate ];
            unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *;
            repeat rewrite Z_to_Qplus; rewrite <- Q_tail_Qinv;
            rewrite <- Q_tail_Qmult;
            [ idtac | assumption | apply Qinv_resp_nonzero; assumption ];
            apply f_equal with Q; apply f_equal2 with Q Q;
            [ field | apply f_equal with Q; field ]; 
            split; discriminate).
Qed.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_nR_emission :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (a - e)%Z (Qpos p1)) (Qpos p2))
            (Qmult (b - f)%Z (Qpos p1))) (Qmult (c - g)%Z (Qpos p2)))
      (d - h)%Z) ->
 nR
   (spec_Qquadratic_Qpositive_to_Qpositive2 (a - e) 
      (b - f) (c - g) (d - h) e f g h p1 p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2.
Proof.
 intros a b c d e f g h p1 p2 Habcd Hefgh Habcdefgh;
  generalize (Qlt_not_eq _ _ Habcd) (Qlt_not_eq _ _ Hefgh)
   (Qlt_not_eq _ _ Habcdefgh); intros Habcd' Hefgh' Habcdefgh'.
 rewrite what_nR_does.
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 rewrite <- Q_tail_Qinv.
 repeat rewrite <- Q_tail_Qmult;
  match goal with
  |  |- (Qinv _ <> _) => apply Qinv_resp_nonzero
  |  |- _ => idtac
  end; try assumption.
 replace One with (Q_tail Qone); trivial.
 rewrite <- Q_tail_Qplus_pos.
 apply f_equal with Q.
 repeat rewrite Z_to_Qminus. 
 abstract (field; assumption).
 apply Qlt_mult_pos_pos; try apply Qinv_pos; assumption.
 apply Qlt_zero_one.
Qed.

Lemma spec_Qquadratic_Qpositive_to_Qpositive2_dL_emission :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (e - a)%Z (Qpos p1)) (Qpos p2))
            (Qmult (f - b)%Z (Qpos p1))) (Qmult (g - c)%Z (Qpos p2)))
      (h - d)%Z) ->
 dL
   (spec_Qquadratic_Qpositive_to_Qpositive2 a b c d 
      (e - a) (f - b) (g - c) (h - d) p1 p2) =
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2.
Proof.
 intros a b c d e f g h p1 p2 Habcd Hefgh Habcdefgh;
  generalize (Qlt_not_eq _ _ Habcd) (Qlt_not_eq _ _ Hefgh)
   (Qlt_not_eq _ _ Habcdefgh); intros Habcd' Hefgh' Habcdefgh'.
 rewrite what_dL_does.
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 repeat rewrite <- Q_tail_Qinv.
 repeat rewrite <- Q_tail_Qmult;
  match goal with
  |  |- (Qinv _ <> _) => apply Qinv_resp_nonzero
  |  |- _ => idtac
  end; try assumption.
 replace One with (Q_tail Qone); trivial.
 rewrite <- Q_tail_Qplus_pos;
  [ idtac
  | apply Qlt_mult_pos_pos; try apply Qinv_pos; assumption
  | apply Qlt_zero_one ].
 rewrite <- Q_tail_Qinv.
 repeat rewrite <- Q_tail_Qmult;
  repeat
   match goal with
   |  |- (Qinv _ <> _) => apply Qinv_resp_nonzero
   |  |- (Qmult _ _ <> _) => apply Qmult_resp_nonzero
   end;
  [ idtac
  | assumption
  | assumption
  | apply Qlt_not_eq; apply Qlt_plus_pos_pos;
     [ apply Qlt_mult_pos_pos; try apply Qinv_pos; assumption
     | apply Qlt_zero_one ] ].

 apply f_equal with Q.
 repeat rewrite Z_to_Qminus.
 repeat rewrite Z_to_Qminus in Habcdefgh'.
 replace
  (Qplus
     (Qmult
        (Qplus
           (Qplus
              (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2))
                 (Qmult b (Qpos p1))) (Qmult c (Qpos p2))) d)
        (Qinv
           (Qplus
              (Qplus
                 (Qplus (Qmult (Qmult (Qminus e a) (Qpos p1)) (Qpos p2))
                    (Qmult (Qminus f b) (Qpos p1)))
                 (Qmult (Qminus g c) (Qpos p2))) (Qminus h d)))) Qone) with
  (Qmult
     (Qplus
        (Qplus
           (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
           (Qmult g (Qpos p2))) h)
     (Qinv
        (Qplus
           (Qplus
              (Qplus (Qmult (Qmult (Qminus e a) (Qpos p1)) (Qpos p2))
                 (Qmult (Qminus f b) (Qpos p1)))
              (Qmult (Qminus g c) (Qpos p2))) (Qminus h d)))).
 symmetry  in |- *.
 apply Qdiv_num_denom.
 apply Qinv_resp_nonzero.
 assumption.

 abstract (field; repeat rewrite Z_to_Qminus in Habcdefgh'; assumption).
Qed.

Lemma outside_square_correct_1 :
 forall (a b c d : Z) (p1 p2 : Qpositive),
 (2 < outside_square a b c d)%Z ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d).
Proof.
 intros a b c d p1 p2 H_o2_gt_2 Hbcd;
  generalize (outside_square_3 _ _ _ _ H_o2_gt_2)
   (outside_square_4 _ _ _ _ H_o2_gt_2) (outside_square_5 _ _ _ _ H_o2_gt_2)
   (outside_square_6 _ _ _ _ H_o2_gt_2); intros Ha Hb Hc Hd;
  generalize (triple_not_equal_zero _ _ _ Hbcd); intros [H_| [H_| H_]];
  match goal with
  | id1:(?X1 <> 0%Z),id2:(0 <= ?X1)%Z |- _ =>
      generalize (Zle_neq_Zlt 0 X1 id2 id1); intro H_lt
  end.
 
 abstract (apply Qlt_le_reg_pos;
            [ apply Qlt_le_reg_pos;
               [ apply Qle_lt_reg_pos; [ idtac | apply Qlt_mult_pos_pos ]
               | idtac ]
            | idtac ];
            try (repeat apply Qle_mult_nonneg_nonneg; try auto with *);
            replace Zero with (Z_to_Q 0); trivial;
            apply Z_to_Qle || apply Z_to_Qlt; assumption).
 
 abstract (apply Qlt_le_reg_pos;
            [ apply Qle_lt_reg_pos;
               [ idtac | apply Qlt_mult_pos_pos; try auto with * ]
            | idtac ]; try apply Qle_plus_pos_pos;
            try (repeat apply Qle_mult_nonneg_nonneg; try auto with *);
            replace Zero with (Z_to_Q 0); trivial;
            apply Z_to_Qle || apply Z_to_Qlt; assumption).
 
 abstract (apply Qle_lt_reg_pos; try repeat apply Qle_plus_pos_pos;
            try (repeat apply Qle_mult_nonneg_nonneg; try auto with *);
            replace Zero with (Z_to_Q 0); trivial;
            apply Z_to_Qle || apply Z_to_Qlt; assumption).
Qed.

Lemma outside_square_correct_2 :
 forall (a b c d : Z) (p1 p2 : Qpositive),
 (outside_square a b c d < -2)%Z ->
 ~ (b = 0%Z /\ c = 0%Z /\ d = 0%Z) ->
 Qlt
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) Zero.
Proof.
 intros a b c d p1 p2 H_o2_lt_min_2 Hbcd;
  generalize (outside_square_7 _ _ _ _ H_o2_lt_min_2)
   (outside_square_8 _ _ _ _ H_o2_lt_min_2)
   (outside_square_9 _ _ _ _ H_o2_lt_min_2)
   (outside_square_10 _ _ _ _ H_o2_lt_min_2); intros Ha Hb Hc Hd;
  generalize (triple_not_equal_zero _ _ _ Hbcd); intros [H_| [H_| H_]];
  match goal with
  | id1:(?X1 <> 0%Z),id2:(?X1 <= 0)%Z |- _ =>
      generalize (sym_not_eq id1); clear id1; intro id1;
       generalize (Zle_neq_Zlt X1 0 id2 id1); intro H_lt
  end.
 
 abstract (apply Qlt_le_reg_neg;
            [ apply Qlt_le_reg_neg;
               [ apply Qle_lt_reg_neg; [ idtac | apply Qlt_mult_neg_pos ]
               | idtac ]
            | idtac ];
            try (repeat apply Qle_mult_nonpos_nonneg; try auto with *);
            replace Zero with (Z_to_Q 0); trivial;
            apply Z_to_Qle || apply Z_to_Qlt; assumption).
 
 abstract (apply Qlt_le_reg_neg;
            [ apply Qle_lt_reg_neg;
               [ idtac | apply Qlt_mult_neg_pos; try auto with * ]
            | idtac ]; try apply Qle_plus_neg_neg;
            try (repeat apply Qle_mult_nonpos_nonneg; try auto with *);
            replace Zero with (Z_to_Q 0); trivial;
            apply Z_to_Qle || apply Z_to_Qlt; assumption).
 
 abstract (apply Qle_lt_reg_neg; try repeat apply Qle_plus_neg_neg;
            try (repeat apply Qle_mult_nonpos_nonneg; try auto with *);
            replace Zero with (Z_to_Q 0); trivial;
            apply Z_to_Qle || apply Z_to_Qlt; assumption).
Qed.

Ltac Inside_Square_Qsgn_ p1 p2 :=
  repeat
   match goal with
   | id1:(?X1 < ?X2)%Z |- _ =>
       unfold X2 in id1 || unfold X1 in id1;
        repeat
         match goal with
         | id1:(2 < outside_square ?X1 ?X2 ?X3 ?X4)%Z,id2:
         (~ (?X2 = 0%Z /\ ?X3 = 0%Z /\ ?X4 = 0%Z)) |- _ =>
             generalize
              (Qsgn_7 _ (outside_square_correct_1 X1 X2 X3 X4 p1 p2 id1 id2));
              clear id1
         | id1:(outside_square ?X1 ?X2 ?X3 ?X4 < -2)%Z,id2:
         (~ (?X2 = 0%Z /\ ?X3 = 0%Z /\ ?X4 = 0%Z)) |- _ =>
             generalize
              (Qsgn_8 _ (outside_square_correct_2 X1 X2 X3 X4 p1 p2 id1 id2));
              clear id1
         end
   end.

Lemma quadratic_sign :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 q_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero =
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2).
Proof.
 fix quadratic_sign 9.
 intros a b c d e f g h.
 unfold q_sign in |- *.
 set (o1 := outside_square a b c d) in *.
 set (o2 := outside_square e f g h) in *.
 intros [xs| xs| ].
  
  intros [ys| ys| ] H_Qquadratic_sg_denom_nonzero.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)).
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 quadratic_sign; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)); 
      subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
      simpl in |- *;
      transitivity
       (Qsgn
          (Qmult (Qmult (Qmult a (Qpos (nR xs))) (Qpos (nR ys)))
             (Qinv (Qmult (Qmult e (Qpos (nR xs))) (Qpos (nR ys))))));
      [ idtac
      | apply f_equal with Q; apply f_equal2 with Q Q;
         [ idtac | apply f_equal with Q ]; abstract 
         ring ]; rewrite Qsgn_15; rewrite Qsgn_28; 
      repeat rewrite Qsgn_15; simpl in |- *; do 2 rewrite Qsgn_29;
      abstract ring.
     
     case (Z_lt_dec 2 o2).
      
      clear quadratic_sign; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)); 
       subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
       rewrite Qsgn_15; rewrite Qsgn_28;
       rewrite
        (Qsgn_7 _
           (outside_square_correct_1 _ _ _ _ (nR xs) (nR ys) H_o2_gt_2 Hfgh'))
        ; clear o1 o2 H_o2_gt_2;
       replace
        (Qplus
           (Qplus
              (Qplus (Qmult (Qmult a (Qpos (nR xs))) (Qpos (nR ys)))
                 (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (nR ys)))) 0%Z)
        with (Qmult (Qmult a (Qpos (nR xs))) (Qpos (nR ys)));
       [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
       simpl in |- *; rewrite Qsgn_29; abstract ring.
      case (Z_lt_dec o2 (-2)).
       
       clear quadratic_sign; intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)); 
        subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
        rewrite Qsgn_15; rewrite Qsgn_28;
        rewrite
         (Qsgn_8 _
            (outside_square_correct_2 _ _ _ _ (nR xs) 
               (nR ys) H_o2_lt_min_2 Hfgh'));
        clear o1 o2 H_o2_lt_min_2 H_o2_gt_2';
        replace
         (Qplus
            (Qplus
               (Qplus (Qmult (Qmult a (Qpos (nR xs))) (Qpos (nR ys)))
                  (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (nR ys)))) 0%Z)
         with (Qmult (Qmult a (Qpos (nR xs))) (Qpos (nR ys)));
        [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
        simpl in |- *; rewrite Qsgn_29; abstract ring.
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nR_nR_4 a b c d e f g h (nR xs) xs 
            (nR ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_1 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (nR xs)) (refl_equal (nR ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_nR_nR;
        rewrite <-
         (quadratic_sign a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e 
            (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys
            (Qquadratic_signok_1 e f g h xs ys H_Qquadratic_sg_denom_nonzero))
         ; reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear quadratic_sign; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)); 
          subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
          rewrite Qsgn_15; rewrite Qsgn_28;
          rewrite
           (Qsgn_7 _
              (outside_square_correct_1 _ _ _ _ (nR xs) 
                 (nR ys) H_o1_gt_2 Hbcd')); clear o1 o2 H_o1_gt_2;
          replace
           (Qplus
              (Qplus
                 (Qplus (Qmult (Qmult e (Qpos (nR xs))) (Qpos (nR ys)))
                    (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (nR ys))))
              0%Z) with (Qmult (Qmult e (Qpos (nR xs))) (Qpos (nR ys)));
          [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
          rewrite Qsgn_29; unfold Qsgn in |- *; abstract 
          ring.
         case (Z_lt_dec o1 (-2)).
          
          clear quadratic_sign; intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)); 
           subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
           rewrite Qsgn_15; rewrite Qsgn_28;
           rewrite
            (Qsgn_8 _
               (outside_square_correct_2 _ _ _ _ (nR xs) 
                  (nR ys) H_o1_lt_min_2 Hbcd'));
           clear o1 o2 H_o1_gt_2' H_o1_lt_min_2;
           replace
            (Qplus
               (Qplus
                  (Qplus (Qmult (Qmult e (Qpos (nR xs))) (Qpos (nR ys)))
                     (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (nR ys))))
               0%Z) with (Qmult (Qmult e (Qpos (nR xs))) (Qpos (nR ys)));
           [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
           rewrite Qsgn_29; unfold Qsgn in |- *; abstract 
           ring.
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nR_nR_7 a b c d e f g h 
               (nR xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_1 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (nR xs)) (refl_equal (nR ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_nR;
           rewrite <-
            (quadratic_sign a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e
               (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys
               (Qquadratic_signok_1 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear quadratic_sign; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)));
          generalize H_inside_1; intros [(H_o1, H_o2)| (H_o1, H_o2)];
          Inside_Square_Qsgn_ (nR xs) (nR ys); intros H_num H_denom;
          unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
          rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
          rewrite H_denom; constructor.
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear quadratic_sign; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption)));
           generalize H_inside_2; intros [(H_o1, H_o2)| (H_o1, H_o2)];
           Inside_Square_Qsgn_ (nR xs) (nR ys); intros H_num H_denom;
           unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
           rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
           rewrite H_denom; constructor.
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_nR_nR_10 a b c d e f g h 
              (nR xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_1 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (nR xs)) (refl_equal (nR ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_nR;
           rewrite <-
            (quadratic_sign a (a + b)%Z (a + c)%Z (a + b + c + d)%Z e
               (e + f)%Z (e + g)%Z (e + f + g + h)%Z xs ys
               (Qquadratic_signok_1 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 quadratic_sign; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)); 
      subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
      simpl in |- *;
      transitivity
       (Qsgn
          (Qmult (Qmult (Qmult a (Qpos (nR xs))) (Qpos (dL ys)))
             (Qinv (Qmult (Qmult e (Qpos (nR xs))) (Qpos (dL ys))))));
      [ idtac
      | apply f_equal with Q; apply f_equal2 with Q Q;
         [ idtac | apply f_equal with Q ]; abstract 
         ring ]; rewrite Qsgn_15; rewrite Qsgn_28; 
      repeat rewrite Qsgn_15; simpl in |- *; do 2 rewrite Qsgn_29;
      abstract ring.
     
     case (Z_lt_dec 2 o2).
      
      clear quadratic_sign; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)); 
       subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
       rewrite Qsgn_15; rewrite Qsgn_28;
       rewrite
        (Qsgn_7 _
           (outside_square_correct_1 _ _ _ _ (nR xs) (dL ys) H_o2_gt_2 Hfgh'))
        ; clear o1 o2 H_o2_gt_2;
       replace
        (Qplus
           (Qplus
              (Qplus (Qmult (Qmult a (Qpos (nR xs))) (Qpos (dL ys)))
                 (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (dL ys)))) 0%Z)
        with (Qmult (Qmult a (Qpos (nR xs))) (Qpos (dL ys)));
       [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
       simpl in |- *; rewrite Qsgn_29; abstract ring.
      case (Z_lt_dec o2 (-2)).
       
       clear quadratic_sign; intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)); 
        subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
        rewrite Qsgn_15; rewrite Qsgn_28;
        rewrite
         (Qsgn_8 _
            (outside_square_correct_2 _ _ _ _ (nR xs) 
               (dL ys) H_o2_lt_min_2 Hfgh'));
        clear o1 o2 H_o2_lt_min_2 H_o2_gt_2';
        replace
         (Qplus
            (Qplus
               (Qplus (Qmult (Qmult a (Qpos (nR xs))) (Qpos (dL ys)))
                  (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (dL ys)))) 0%Z)
         with (Qmult (Qmult a (Qpos (nR xs))) (Qpos (dL ys)));
        [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
        simpl in |- *; rewrite Qsgn_29; abstract ring.
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nR_dL_4 a b c d e f g h (nR xs) xs 
            (dL ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_2 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (nR xs)) (refl_equal (dL ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL;
        rewrite <-
         (quadratic_sign (a + b)%Z b (a + b + c + d)%Z 
            (b + d)%Z (e + f)%Z f (e + f + g + h)%Z 
            (f + h)%Z xs ys
            (Qquadratic_signok_2 e f g h xs ys H_Qquadratic_sg_denom_nonzero))
         ; reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear quadratic_sign; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)); 
          subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
          rewrite Qsgn_15; rewrite Qsgn_28;
          rewrite
           (Qsgn_7 _
              (outside_square_correct_1 _ _ _ _ (nR xs) 
                 (dL ys) H_o1_gt_2 Hbcd')); clear o1 o2 H_o1_gt_2;
          replace
           (Qplus
              (Qplus
                 (Qplus (Qmult (Qmult e (Qpos (nR xs))) (Qpos (dL ys)))
                    (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (dL ys))))
              0%Z) with (Qmult (Qmult e (Qpos (nR xs))) (Qpos (dL ys)));
          [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
          rewrite Qsgn_29; unfold Qsgn in |- *; ring.
         case (Z_lt_dec o1 (-2)).
          
          clear quadratic_sign; intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)); 
           subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
           rewrite Qsgn_15; rewrite Qsgn_28;
           rewrite
            (Qsgn_8 _
               (outside_square_correct_2 _ _ _ _ (nR xs) 
                  (dL ys) H_o1_lt_min_2 Hbcd'));
           clear o1 o2 H_o1_gt_2' H_o1_lt_min_2;
           replace
            (Qplus
               (Qplus
                  (Qplus (Qmult (Qmult e (Qpos (nR xs))) (Qpos (dL ys)))
                     (Qmult 0%Z (Qpos (nR xs)))) (Qmult 0%Z (Qpos (dL ys))))
               0%Z) with (Qmult (Qmult e (Qpos (nR xs))) (Qpos (dL ys)));
           [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
           rewrite Qsgn_29; unfold Qsgn in |- *; ring.
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nR_dL_7 a b c d e f g h 
               (nR xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_2 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (nR xs)) (refl_equal (dL ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL;
           rewrite <-
            (quadratic_sign (a + b)%Z b (a + b + c + d)%Z 
               (b + d)%Z (e + f)%Z f (e + f + g + h)%Z 
               (f + h)%Z xs ys
               (Qquadratic_signok_2 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear quadratic_sign; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)));
          generalize H_inside_1; intros [(H_o1, H_o2)| (H_o1, H_o2)];
          Inside_Square_Qsgn_ (nR xs) (dL ys); intros H_num H_denom;
          unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
          rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
          rewrite H_denom; constructor.
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear quadratic_sign; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption)));
           generalize H_inside_2; intros [(H_o1, H_o2)| (H_o1, H_o2)];
           Inside_Square_Qsgn_ (nR xs) (dL ys); intros H_num H_denom;
           unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
           rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
           rewrite H_denom; constructor.
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_nR_dL_10 a b c d e f g h 
              (nR xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_2 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (nR xs)) (refl_equal (dL ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL;
           rewrite <-
            (quadratic_sign (a + b)%Z b (a + b + c + d)%Z 
               (b + d)%Z (e + f)%Z f (e + f + g + h)%Z 
               (f + h)%Z xs ys
               (Qquadratic_signok_2 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.

  clear quadratic_sign.
  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).
  intro H_Qhomographic_sg_denom_nonzero.
  set
   (L3 :=
    Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 
      (nR xs) H_Qhomographic_sg_denom_nonzero) in *.
  set (l1 := fst L3) in *.
  set (l2 := fst (snd L3)) in *.
  set (l3 := snd (snd L3)) in *.
  set (na := fst l2) in *.
  set (nb := fst (snd l2)) in *.
  set (nc := fst (snd (snd l2))) in *.
  set (nd := snd (snd (snd l2))) in *.
  rewrite
   (Qquadratic_sign_nRdL_One a b c d e f g h (nR xs) One
      H_Qquadratic_sg_denom_nonzero l1 na nb nc nd l3
      H_Qhomographic_sg_denom_nonzero);
   [ idtac
   | fold L3 in |- *; repeat (apply pair_2; try reflexivity)
   | discriminate
   | reflexivity ]. 
  rewrite spec_Qquadratic_Qpositive_to_Q_p_One.
  rewrite <-
   (homographic_sign (a + b) (c + d) (e + f) (g + h) 
      (nR xs) H_Qhomographic_sg_denom_nonzero).
  reflexivity.

  intros [ys| ys| ] H_Qquadratic_sg_denom_nonzero.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 quadratic_sign; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)); 
      subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
      simpl in |- *;
      transitivity
       (Qsgn
          (Qmult (Qmult (Qmult a (Qpos (dL xs))) (Qpos (nR ys)))
             (Qinv (Qmult (Qmult e (Qpos (dL xs))) (Qpos (nR ys))))));
      [ idtac
      | apply f_equal with Q; apply f_equal2 with Q Q;
         [ idtac | apply f_equal with Q ]; simpl; ring ];
         rewrite Qsgn_15; rewrite Qsgn_28; 
      repeat rewrite Qsgn_15; simpl in |- *; do 2 rewrite Qsgn_29;
      ring.
     
     case (Z_lt_dec 2 o2).
      
      clear quadratic_sign; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)); 
       subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
       rewrite Qsgn_15; rewrite Qsgn_28;
       rewrite
        (Qsgn_7 _
           (outside_square_correct_1 _ _ _ _ (dL xs) (nR ys) H_o2_gt_2 Hfgh'))
        ; clear o1 o2 H_o2_gt_2;
       replace
        (Qplus
           (Qplus
              (Qplus (Qmult (Qmult a (Qpos (dL xs))) (Qpos (nR ys)))
                 (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (nR ys)))) 0%Z)
        with (Qmult (Qmult a (Qpos (dL xs))) (Qpos (nR ys)));
       [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
       simpl in |- *; rewrite Qsgn_29; ring.
      case (Z_lt_dec o2 (-2)).
       
       clear quadratic_sign; intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)); 
        subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
        rewrite Qsgn_15; rewrite Qsgn_28;
        rewrite
         (Qsgn_8 _
            (outside_square_correct_2 _ _ _ _ (dL xs) 
               (nR ys) H_o2_lt_min_2 Hfgh'));
        clear o1 o2 H_o2_lt_min_2 H_o2_gt_2';
        replace
         (Qplus
            (Qplus
               (Qplus (Qmult (Qmult a (Qpos (dL xs))) (Qpos (nR ys)))
                  (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (nR ys)))) 0%Z)
         with (Qmult (Qmult a (Qpos (dL xs))) (Qpos (nR ys)));
        [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
        simpl in |- *; rewrite Qsgn_29; ring.
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_dL_nR_4 a b c d e f g h (dL xs) xs 
            (nR ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_3 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (dL xs)) (refl_equal (nR ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_dL_nR;
        rewrite <-
         (quadratic_sign (a + c)%Z (a + b + c + d)%Z c 
            (c + d)%Z (e + g)%Z (e + f + g + h)%Z g 
            (g + h)%Z xs ys
            (Qquadratic_signok_3 e f g h xs ys H_Qquadratic_sg_denom_nonzero))
         ; reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear quadratic_sign; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)); 
          subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
          rewrite Qsgn_15; rewrite Qsgn_28;
          rewrite
           (Qsgn_7 _
              (outside_square_correct_1 _ _ _ _ (dL xs) 
                 (nR ys) H_o1_gt_2 Hbcd')); clear o1 o2 H_o1_gt_2;
          replace
           (Qplus
              (Qplus
                 (Qplus (Qmult (Qmult e (Qpos (dL xs))) (Qpos (nR ys)))
                    (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (nR ys))))
              0%Z) with (Qmult (Qmult e (Qpos (dL xs))) (Qpos (nR ys)));
          [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
          rewrite Qsgn_29; unfold Qsgn in |- *; ring.
         case (Z_lt_dec o1 (-2)).
          
          clear quadratic_sign; intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)); 
           subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
           rewrite Qsgn_15; rewrite Qsgn_28;
           rewrite
            (Qsgn_8 _
               (outside_square_correct_2 _ _ _ _ (dL xs) 
                  (nR ys) H_o1_lt_min_2 Hbcd'));
           clear o1 o2 H_o1_gt_2' H_o1_lt_min_2;
           replace
            (Qplus
               (Qplus
                  (Qplus (Qmult (Qmult e (Qpos (dL xs))) (Qpos (nR ys)))
                     (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (nR ys))))
               0%Z) with (Qmult (Qmult e (Qpos (dL xs))) (Qpos (nR ys)));
           [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
           rewrite Qsgn_29; unfold Qsgn in |- *; ring.
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_dL_nR_7 a b c d e f g h 
               (dL xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_3 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (dL xs)) (refl_equal (nR ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_nR;
           rewrite <-
            (quadratic_sign (a + c)%Z (a + b + c + d)%Z c 
               (c + d)%Z (e + g)%Z (e + f + g + h)%Z g 
               (g + h)%Z xs ys
               (Qquadratic_signok_3 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear quadratic_sign; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)));
          generalize H_inside_1; intros [(H_o1, H_o2)| (H_o1, H_o2)];
          Inside_Square_Qsgn_ (dL xs) (nR ys); intros H_num H_denom;
          unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
          rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
          rewrite H_denom; constructor.
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear quadratic_sign; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption)));
           generalize H_inside_2; intros [(H_o1, H_o2)| (H_o1, H_o2)];
           Inside_Square_Qsgn_ (dL xs) (nR ys); intros H_num H_denom;
           unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
           rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
           rewrite H_denom; constructor.
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_dL_nR_10 a b c d e f g h 
              (dL xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_3 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (dL xs)) (refl_equal (nR ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_nR;
           rewrite <-
            (quadratic_sign (a + c)%Z (a + b + c + d)%Z c 
               (c + d)%Z (e + g)%Z (e + f + g + h)%Z g 
               (g + h)%Z xs ys
               (Qquadratic_signok_3 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 quadratic_sign; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)); 
      subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
      simpl in |- *;
      transitivity
       (Qsgn
          (Qmult (Qmult (Qmult a (Qpos (dL xs))) (Qpos (dL ys)))
             (Qinv (Qmult (Qmult e (Qpos (dL xs))) (Qpos (dL ys))))));
      [ idtac
      | apply f_equal with Q; apply f_equal2 with Q Q;
         [ idtac | apply f_equal with Q ]; simpl; ring ];
         rewrite Qsgn_15; rewrite Qsgn_28; 
      repeat rewrite Qsgn_15; simpl in |- *; do 2 rewrite Qsgn_29;
      ring.
     
     case (Z_lt_dec 2 o2).
      
      clear quadratic_sign; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)); 
       subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
       rewrite Qsgn_15; rewrite Qsgn_28;
       rewrite
        (Qsgn_7 _
           (outside_square_correct_1 _ _ _ _ (dL xs) (dL ys) H_o2_gt_2 Hfgh'))
        ; clear o1 o2 H_o2_gt_2;
       replace
        (Qplus
           (Qplus
              (Qplus (Qmult (Qmult a (Qpos (dL xs))) (Qpos (dL ys)))
                 (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (dL ys)))) 0%Z)
        with (Qmult (Qmult a (Qpos (dL xs))) (Qpos (dL ys)));
       [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
       simpl in |- *; rewrite Qsgn_29; ring.
      case (Z_lt_dec o2 (-2)).
       
       clear quadratic_sign; intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)); 
        subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
        rewrite Qsgn_15; rewrite Qsgn_28;
        rewrite
         (Qsgn_8 _
            (outside_square_correct_2 _ _ _ _ (dL xs) 
               (dL ys) H_o2_lt_min_2 Hfgh'));
        clear o1 o2 H_o2_lt_min_2 H_o2_gt_2';
        replace
         (Qplus
            (Qplus
               (Qplus (Qmult (Qmult a (Qpos (dL xs))) (Qpos (dL ys)))
                  (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (dL ys)))) 0%Z)
         with (Qmult (Qmult a (Qpos (dL xs))) (Qpos (dL ys)));
        [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
        simpl in |- *; rewrite Qsgn_29; ring.
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_dL_dL_4 a b c d e f g h (dL xs) xs 
            (dL ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_4 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (dL xs)) (refl_equal (dL ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_dL_dL;
        rewrite <-
         (quadratic_sign (a + b + c + d)%Z (b + d)%Z 
            (c + d)%Z d (e + f + g + h)%Z (f + h)%Z 
            (g + h)%Z h xs ys
            (Qquadratic_signok_4 e f g h xs ys H_Qquadratic_sg_denom_nonzero))
         ; reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear quadratic_sign; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)); 
          subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
          rewrite Qsgn_15; rewrite Qsgn_28;
          rewrite
           (Qsgn_7 _
              (outside_square_correct_1 _ _ _ _ (dL xs) 
                 (dL ys) H_o1_gt_2 Hbcd')); clear o1 o2 H_o1_gt_2;
          replace
           (Qplus
              (Qplus
                 (Qplus (Qmult (Qmult e (Qpos (dL xs))) (Qpos (dL ys)))
                    (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (dL ys))))
              0%Z) with (Qmult (Qmult e (Qpos (dL xs))) (Qpos (dL ys)));
          [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
          rewrite Qsgn_29; unfold Qsgn in |- *; ring.
         case (Z_lt_dec o1 (-2)).
          
          clear quadratic_sign; intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)); 
           subst; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
           rewrite Qsgn_15; rewrite Qsgn_28;
           rewrite
            (Qsgn_8 _
               (outside_square_correct_2 _ _ _ _ (dL xs) 
                  (dL ys) H_o1_lt_min_2 Hbcd'));
           clear o1 o2 H_o1_gt_2' H_o1_lt_min_2;
           replace
            (Qplus
               (Qplus
                  (Qplus (Qmult (Qmult e (Qpos (dL xs))) (Qpos (dL ys)))
                     (Qmult 0%Z (Qpos (dL xs)))) (Qmult 0%Z (Qpos (dL ys))))
               0%Z) with (Qmult (Qmult e (Qpos (dL xs))) (Qpos (dL ys)));
           [ idtac | simpl; ring ]; repeat rewrite Qsgn_15; 
           rewrite Qsgn_29; unfold Qsgn in |- *; ring.
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_dL_dL_7 a b c d e f g h 
               (dL xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_4 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (dL xs)) (refl_equal (dL ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_dL;
           rewrite <-
            (quadratic_sign (a + b + c + d)%Z (b + d)%Z 
               (c + d)%Z d (e + f + g + h)%Z (f + h)%Z 
               (g + h)%Z h xs ys
               (Qquadratic_signok_4 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear quadratic_sign; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)));
          generalize H_inside_1; intros [(H_o1, H_o2)| (H_o1, H_o2)];
          Inside_Square_Qsgn_ (dL xs) (dL ys); intros H_num H_denom;
          unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
          rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
          rewrite H_denom; constructor.
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear quadratic_sign; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption)));
           generalize H_inside_2; intros [(H_o1, H_o2)| (H_o1, H_o2)];
           Inside_Square_Qsgn_ (dL xs) (dL ys); intros H_num H_denom;
           unfold spec_Qquadratic_Qpositive_to_Q in |- *; 
           rewrite Qsgn_15; rewrite Qsgn_28; rewrite H_num; 
           rewrite H_denom; constructor.
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_dL_dL_10 a b c d e f g h 
              (dL xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_4 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (dL xs)) (refl_equal (dL ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_dL;
           rewrite <-
            (quadratic_sign (a + b + c + d)%Z (b + d)%Z 
               (c + d)%Z d (e + f + g + h)%Z (f + h)%Z 
               (g + h)%Z h xs ys
               (Qquadratic_signok_4 e f g h xs ys
                  H_Qquadratic_sg_denom_nonzero)); 
           reflexivity.

  clear quadratic_sign.
  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).
  intro H_Qhomographic_sg_denom_nonzero.
  set
   (L3 :=
    Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 
      (dL xs) H_Qhomographic_sg_denom_nonzero) in *.
  set (l1 := fst L3) in *.
  set (l2 := fst (snd L3)) in *.
  set (l3 := snd (snd L3)) in *.
  set (na := fst l2) in *.
  set (nb := fst (snd l2)) in *.
  set (nc := fst (snd (snd l2))) in *.
  set (nd := snd (snd (snd l2))) in *.
  rewrite
   (Qquadratic_sign_nRdL_One a b c d e f g h (dL xs) One
      H_Qquadratic_sg_denom_nonzero l1 na nb nc nd l3
      H_Qhomographic_sg_denom_nonzero);
   [ idtac
   | fold L3 in |- *; repeat (apply pair_2; try reflexivity)
   | discriminate
   | reflexivity ]. 
  rewrite spec_Qquadratic_Qpositive_to_Q_p_One.
  rewrite <-
   (homographic_sign (a + b) (c + d) (e + f) (g + h) 
      (dL xs) H_Qhomographic_sg_denom_nonzero).
  reflexivity.

  intros p2 H_Qquadratic_sg_denom_nonzero; clear quadratic_sign.
  generalize (Qquadratic_signok_0 _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).
  intro H_Qhomographic_sg_denom_nonzero.
  set
   (L3 :=
    Qhomographic_sign (a + c) (b + d) (e + g) (f + h) p2
      H_Qhomographic_sg_denom_nonzero) in *.
  set (l1 := fst L3) in *.
  set (l2 := fst (snd L3)) in *.
  set (l3 := snd (snd L3)) in *.
  set (na := fst l2) in *.
  set (nb := fst (snd l2)) in *.
  set (nc := fst (snd (snd l2))) in *.
  set (nd := snd (snd (snd l2))) in *.
  rewrite
   (Qquadratic_sign_One_y a b c d e f g h One p2
      H_Qquadratic_sg_denom_nonzero l1 na nb nc nd l3
      H_Qhomographic_sg_denom_nonzero);
   [ idtac
   | fold L3 in |- *; repeat (apply pair_2; try reflexivity)
   | reflexivity ]. 
  rewrite spec_Qquadratic_Qpositive_to_Q_One_p.
  rewrite <-
   (homographic_sign (a + c) (b + d) (e + g) (f + h) p2
      H_Qhomographic_sg_denom_nonzero).
  reflexivity.

Qed.

Lemma quadraticAcc_positive :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d) /\
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h).
Proof.
 intros a b c d e f g h p1 p2 H.
 induction H;
  try
   match goal with
   | id1:(_ /\ _) |- _ => elim id1; clear id1; intros IHrec1 IHrec2
   end.
 
 rewrite H; repeat rewrite Qmult_one_right;
  replace (Qplus (Qplus (Qplus (Qmult a (Qpos p2)) b) (Qmult c (Qpos p2))) d)
   with (Qplus (Qmult (a + c)%Z (Qpos p2)) (b + d)%Z);
  [ replace
     (Qplus (Qplus (Qplus (Qmult e (Qpos p2)) f) (Qmult g (Qpos p2))) h) with
     (Qplus (Qmult (e + g)%Z (Qpos p2)) (f + h)%Z);
     [ apply homographicAcc_positive; assumption | idtac ]
  | idtac ]; repeat rewrite Z_to_Qplus; ring.
 
 rewrite H0; repeat rewrite Qmult_one_right;
  replace (Qplus (Qplus (Qplus (Qmult a (Qpos p1)) (Qmult b (Qpos p1))) c) d)
   with (Qplus (Qmult (a + b)%Z (Qpos p1)) (c + d)%Z);
  [ replace
     (Qplus (Qplus (Qplus (Qmult e (Qpos p1)) (Qmult f (Qpos p1))) g) h) with
     (Qplus (Qmult (e + f)%Z (Qpos p1)) (g + h)%Z);
     [ apply homographicAcc_positive; assumption | idtac ]
  | idtac ]; repeat rewrite Z_to_Qplus; ring.
 
 split; try assumption; replace a with (a - e + e)%Z;
  [ idtac | abstract auto with zarith ]; replace b with (b - f + f)%Z;
  [ idtac | abstract auto with zarith ]; replace c with (c - g + g)%Z;
  [ idtac | abstract auto with zarith ]; replace d with (d - h + h)%Z;
  [ idtac | abstract auto with zarith ]; repeat rewrite Z_to_Qplus;
  replace
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (Qplus (a - e)%Z e) (Qpos p1)) (Qpos p2))
            (Qmult (Qplus (b - f)%Z f) (Qpos p1)))
         (Qmult (Qplus (c - g)%Z g) (Qpos p2))) (Qplus (d - h)%Z h)) with
   (Qplus
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (a - e)%Z (Qpos p1)) (Qpos p2))
               (Qmult (b - f)%Z (Qpos p1))) (Qmult (c - g)%Z (Qpos p2)))
         (d - h)%Z)
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
            (Qmult g (Qpos p2))) h)); [ idtac | abstract ring ];
  apply Qlt_plus_pos_pos; assumption.
 
 split; try assumption; replace e with (e - a + a)%Z;
  [ idtac | abstract auto with zarith ]; replace f with (f - b + b)%Z;
  [ idtac | abstract auto with zarith ]; replace g with (g - c + c)%Z;
  [ idtac | abstract auto with zarith ]; replace h with (h - d + d)%Z;
  [ idtac | abstract auto with zarith ]; repeat rewrite Z_to_Qplus;
  replace
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult (Qplus (e - a)%Z a) (Qpos p1)) (Qpos p2))
            (Qmult (Qplus (f - b)%Z b) (Qpos p1)))
         (Qmult (Qplus (g - c)%Z c) (Qpos p2))) (Qplus (h - d)%Z d)) with
   (Qplus
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult (e - a)%Z (Qpos p1)) (Qpos p2))
               (Qmult (f - b)%Z (Qpos p1))) (Qmult (g - c)%Z (Qpos p2)))
         (h - d)%Z)
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
            (Qmult c (Qpos p2))) d)); [ idtac | abstract ring ];
  apply Qlt_plus_pos_pos; assumption.
 
 repeat rewrite Qpos_nR;
  replace
   (Qplus
      (Qplus
         (Qplus
            (Qmult (Qmult a (Qplus (Qpos xs) Qone)) (Qplus (Qpos ys) Qone))
            (Qmult b (Qplus (Qpos xs) Qone)))
         (Qmult c (Qplus (Qpos ys) Qone))) d) with
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos xs)) (Qpos ys))
            (Qmult (a + b)%Z (Qpos xs))) (Qmult (a + c)%Z (Qpos ys)))
      (a + b + c + d)%Z);
  [ idtac | repeat rewrite Z_to_Qplus; abstract ring ];
  replace
   (Qplus
      (Qplus
         (Qplus
            (Qmult (Qmult e (Qplus (Qpos xs) Qone)) (Qplus (Qpos ys) Qone))
            (Qmult f (Qplus (Qpos xs) Qone)))
         (Qmult g (Qplus (Qpos ys) Qone))) h) with
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos xs)) (Qpos ys))
            (Qmult (e + f)%Z (Qpos xs))) (Qmult (e + g)%Z (Qpos ys)))
      (e + f + g + h)%Z);
  [ idtac | repeat rewrite Z_to_Qplus; abstract ring ]; 
  split; assumption.
 
 abstract (repeat rewrite Qpos_nR; repeat rewrite Qpos_dL;
            replace
             (Qplus
                (Qplus
                   (Qplus
                      (Qmult (Qmult a (Qplus (Qpos xs) Qone))
                         (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone))))
                      (Qmult b (Qplus (Qpos xs) Qone)))
                   (Qmult c (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone)))))
                d) with
             (Qmult
                (Qplus
                   (Qplus
                      (Qplus (Qmult (Qmult (a + b)%Z (Qpos xs)) (Qpos ys))
                         (Qmult b (Qpos xs)))
                      (Qmult (a + b + c + d)%Z (Qpos ys))) 
                   (b + d)%Z) (Qinv (Qplus (Qpos ys) Qone)));
            [ idtac
            | repeat rewrite Z_to_Qplus; abstract (field; discriminate) ];
            replace
             (Qplus
                (Qplus
                   (Qplus
                      (Qmult (Qmult e (Qplus (Qpos xs) Qone))
                         (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone))))
                      (Qmult f (Qplus (Qpos xs) Qone)))
                   (Qmult g (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone)))))
                h) with
             (Qmult
                (Qplus
                   (Qplus
                      (Qplus (Qmult (Qmult (e + f)%Z (Qpos xs)) (Qpos ys))
                         (Qmult f (Qpos xs)))
                      (Qmult (e + f + g + h)%Z (Qpos ys))) 
                   (f + h)%Z) (Qinv (Qplus (Qpos ys) Qone)));
            [ idtac
            | repeat rewrite Z_to_Qplus; abstract (field; discriminate) ];
            split; apply Qlt_mult_pos_pos; try assumption; 
            apply Qinv_pos; apply Qlt_plus_pos_pos; abstract 
            auto with *).
 
 abstract (repeat rewrite Qpos_nR; repeat rewrite Qpos_dL;
            replace
             (Qplus
                (Qplus
                   (Qplus
                      (Qmult
                         (Qmult a
                            (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone))))
                         (Qplus (Qpos ys) Qone))
                      (Qmult b
                         (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone)))))
                   (Qmult c (Qplus (Qpos ys) Qone))) d) with
             (Qmult
                (Qplus
                   (Qplus
                      (Qplus (Qmult (Qmult (a + c)%Z (Qpos xs)) (Qpos ys))
                         (Qmult (a + b + c + d)%Z (Qpos xs)))
                      (Qmult c (Qpos ys))) (c + d)%Z)
                (Qinv (Qplus (Qpos xs) Qone)));
            [ idtac
            | repeat rewrite Z_to_Qplus; abstract (field; discriminate) ];
            replace
             (Qplus
                (Qplus
                   (Qplus
                      (Qmult
                         (Qmult e
                            (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone))))
                         (Qplus (Qpos ys) Qone))
                      (Qmult f
                         (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone)))))
                   (Qmult g (Qplus (Qpos ys) Qone))) h) with
             (Qmult
                (Qplus
                   (Qplus
                      (Qplus (Qmult (Qmult (e + g)%Z (Qpos xs)) (Qpos ys))
                         (Qmult (e + f + g + h)%Z (Qpos xs)))
                      (Qmult g (Qpos ys))) (g + h)%Z)
                (Qinv (Qplus (Qpos xs) Qone)));
            [ idtac
            | repeat rewrite Z_to_Qplus; abstract (field; discriminate) ];
            split; apply Qlt_mult_pos_pos; try assumption; 
            apply Qinv_pos; apply Qlt_plus_pos_pos; abstract 
            auto with *).
 
 abstract (repeat rewrite Qpos_dL;
            replace
             (Qplus
                (Qplus
                   (Qplus
                      (Qmult
                         (Qmult a
                            (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone))))
                         (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone))))
                      (Qmult b
                         (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone)))))
                   (Qmult c (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone)))))
                d) with
             (Qmult
                (Qplus
                   (Qplus
                      (Qplus
                         (Qmult (Qmult (a + b + c + d)%Z (Qpos xs)) (Qpos ys))
                         (Qmult (b + d)%Z (Qpos xs)))
                      (Qmult (c + d)%Z (Qpos ys))) d)
                (Qinv (Qmult (Qplus (Qpos xs) Qone) (Qplus (Qpos ys) Qone))));
            [ idtac
            | repeat rewrite Z_to_Qplus; field; split; discriminate ];
            replace
             (Qplus
                (Qplus
                   (Qplus
                      (Qmult
                         (Qmult e
                            (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone))))
                         (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone))))
                      (Qmult f
                         (Qmult (Qpos xs) (Qinv (Qplus (Qpos xs) Qone)))))
                   (Qmult g (Qmult (Qpos ys) (Qinv (Qplus (Qpos ys) Qone)))))
                h) with
             (Qmult
                (Qplus
                   (Qplus
                      (Qplus
                         (Qmult (Qmult (e + f + g + h)%Z (Qpos xs)) (Qpos ys))
                         (Qmult (f + h)%Z (Qpos xs)))
                      (Qmult (g + h)%Z (Qpos ys))) h)
                (Qinv (Qmult (Qplus (Qpos xs) Qone) (Qplus (Qpos ys) Qone))));
            [ idtac
            | repeat rewrite Z_to_Qplus; field; split; discriminate ];
            split; apply Qlt_mult_pos_pos; try assumption; 
            apply Qinv_pos; apply Qlt_mult_pos_pos; 
            apply Qlt_plus_pos_pos; abstract auto with *).
Qed. 

Lemma quadraticAcc_positive_numerator :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d).
Proof.
 intros; elim (quadraticAcc_positive _ _ _ _ _ _ _ _ _ _ H); trivial.
Qed.

Lemma quadraticAcc_positive_denominator :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 quadraticAcc a b c d e f g h p1 p2 ->
 Qlt Zero
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
         (Qmult g (Qpos p2))) h).
Proof.
 intros; elim (quadraticAcc_positive _ _ _ _ _ _ _ _ _ _ H); trivial.
Qed.

Lemma quadratic_output_bit :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (hyp_quadraticAcc : quadraticAcc a b c d e f g h p1 p2),
 Qquadratic_Qpositive_to_Qpositive a b c d e f g h p1 p2 hyp_quadraticAcc =
 spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2.
Proof.
 intros a b c d e f g h p1 p2 hyp_quadraticAcc.
 generalize
  (quadraticAcc_positive_numerator _ _ _ _ _ _ _ _ _ _ hyp_quadraticAcc).
 generalize
  (quadraticAcc_positive_denominator _ _ _ _ _ _ _ _ _ _ hyp_quadraticAcc).
 pattern a, b, c, d, e, f, g, h, p1, p2, hyp_quadraticAcc in |- *.
 elim hyp_quadraticAcc using quadraticAcc_ind_dep;
   clear a b c d e f g h p1 p2 hyp_quadraticAcc; intros;
     unfold Qquadratic_Qpositive_to_Qpositive;fold Qquadratic_Qpositive_to_Qpositive.

 case (Qpositive_dec_One p1); intros Hp1; [ idtac | Falsum ].
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 rewrite output_bit.
 unfold spec_ni2 in |- *.
 rewrite e0.
 repeat rewrite Qmult_one_right.
 apply f_equal2 with Qpositive Qpositive; try apply f_equal with Qpositive;
  apply f_equal with Q; repeat rewrite Z_to_Qplus; abstract 
  ring.
 
 case (Qpositive_dec_One p1); intros Hp1; [ Falsum | idtac ];
  case (Qpositive_dec_One p2); intros Hp2; [ idtac | Falsum ].
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 rewrite output_bit.
 unfold spec_ni2 in |- *.
 rewrite e0.
 repeat rewrite Qmult_one_right.
 apply f_equal2 with Qpositive Qpositive; try apply f_equal with Qpositive;
  apply f_equal with Q; repeat rewrite Z_to_Qplus; abstract 
  ring.
 
 case (Qpositive_dec_One p1); intros Hp1; [ Falsum | idtac ];
  case (Qpositive_dec_One p2); intros Hp2; [ Falsum | idtac ];
  case (quadratic_top_more_informative a b c d e f g h); 
  intros Habcdefgh; [ idtac | Falsum ];
  generalize (quadraticAcc_positive_numerator _ _ _ _ _ _ _ _ _ _ q0);
  intros H_ae;simpl; rewrite H;  try assumption;
  apply spec_Qquadratic_Qpositive_to_Qpositive2_nR_emission; 
  assumption.
 
 case (Qpositive_dec_One p1); intros Hp1; [ Falsum | idtac ];
  case (Qpositive_dec_One p2); intros Hp2; [ Falsum | idtac ];
  case (quadratic_top_more_informative a b c d e f g h); 
  intros Habcdefgh; [ Falsum | idtac ];
  case (quadratic_top_more_informative e f g h a b c d); 
  intros Hefghabcd; [ idtac | Falsum ];
  generalize (quadraticAcc_positive_denominator _ _ _ _ _ _ _ _ _ _ q0);
  intros H_ae; simpl;rewrite H; try assumption;
  apply spec_Qquadratic_Qpositive_to_Qpositive2_dL_emission; 
  assumption.
  
 case (quadratic_top_more_informative a b c d e f g h); intros Habcdefgh;
  [ Falsum | idtac ]; case (quadratic_top_more_informative e f g h a b c d);
  intros Hefghabcd; [ Falsum | idtac ];
  generalize (quadraticAcc_positive_numerator _ _ _ _ _ _ _ _ _ _ q);
  generalize (quadraticAcc_positive_denominator _ _ _ _ _ _ _ _ _ _ q);
  intros H_ae H_ae'; simpl; rewrite H; try assumption;
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_nR_nR; 
  reflexivity.
  
 case (quadratic_top_more_informative a b c d e f g h); intros Habcdefgh;
  [ Falsum | idtac ]; case (quadratic_top_more_informative e f g h a b c d);
  intros Hefghabcd; [ Falsum | idtac ];
  generalize (quadraticAcc_positive_numerator _ _ _ _ _ _ _ _ _ _ q);
  generalize (quadraticAcc_positive_denominator _ _ _ _ _ _ _ _ _ _ q);
  intros H_ae H_ae'; simpl;rewrite H; try assumption;
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_nR_dL;
  reflexivity || apply Qlt_not_eq; repeat rewrite <- Z_to_Qplus; 
  assumption.
  
 case (quadratic_top_more_informative a b c d e f g h); intros Habcdefgh;
  [ Falsum | idtac ]; case (quadratic_top_more_informative e f g h a b c d);
  intros Hefghabcd; [ Falsum | idtac ];
  generalize (quadraticAcc_positive_numerator _ _ _ _ _ _ _ _ _ _ q);
  generalize (quadraticAcc_positive_denominator _ _ _ _ _ _ _ _ _ _ q);
  intros H_ae H_ae'; simpl;rewrite H; try assumption;
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_dL_nR;
  reflexivity || apply Qlt_not_eq; repeat rewrite <- Z_to_Qplus; 
  assumption.
  
 case (quadratic_top_more_informative a b c d e f g h); intros Habcdefgh;
  [ Falsum | idtac ]; case (quadratic_top_more_informative e f g h a b c d);
  intros Hefghabcd; [ Falsum | idtac ];
  generalize (quadraticAcc_positive_numerator _ _ _ _ _ _ _ _ _ _ q);
  generalize (quadraticAcc_positive_denominator _ _ _ _ _ _ _ _ _ _ q);
  intros H_ae H_ae'; simpl; rewrite H; try assumption;
  rewrite spec_Qquadratic_Qpositive_to_Qpositive2_dL_dL;
  reflexivity || apply Qlt_not_eq; repeat rewrite <- Z_to_Qplus; 
  assumption.
Qed.

Lemma
 spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_pos :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = 1%Z ->
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 Qpos (spec_Qquadratic_Qpositive_to_Qpositive2 a b c d e f g h p1 p2).
Proof.
 intros a b c d e f g h p1 p2 H.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *.
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 rewrite <- Q_tail_Qinv.
 rewrite <- Q_tail_Qmult.
 rewrite <- Q_tail_Q_pos.
 reflexivity.

 apply Qsgn_9.
 assumption.

 intro H_absurd.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H_absurd in H.
 discriminate H.

 intro H_absurd.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H_absurd in H.
 rewrite Qmult_sym in H.
 discriminate H.
Qed.

Lemma
 spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_neg_1
 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = (-1)%Z ->
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 Qneg
   (spec_Qquadratic_Qpositive_to_Qpositive2 (- a) (- b) 
      (- c) (- d) e f g h p1 p2).
Proof.
 intros a b c d e f g h p1 p2 H.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *.
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 rewrite <- Q_tail_Qinv.
 rewrite <- Q_tail_Qmult.
 repeat rewrite Qopp_Qpos.
 rewrite <- Q_tail_Q_pos.
 repeat rewrite Z_to_Qopp.
 abstract ring.

 apply Qsgn_9.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 rewrite Qmult_Qopp_left.
 rewrite Qsgn_25.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H.
 constructor.

 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 apply Qopp_resp_nonzero.

 intro H_absurd.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H_absurd in H.
 discriminate H.

 intro H_absurd.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H_absurd in H.
 rewrite Qmult_sym in H.
 discriminate H.
Qed.

Lemma
 spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_neg_2
 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = (-1)%Z ->
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2 =
 Qneg
   (spec_Qquadratic_Qpositive_to_Qpositive2 a b c d 
      (- e) (- f) (- g) (- h) p1 p2).
Proof.
 intros a b c d e f g h p1 p2 H.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *.
 unfold spec_Qquadratic_Qpositive_to_Qpositive2 in |- *.
 rewrite <- Q_tail_Qinv.
 rewrite <- Q_tail_Qmult.
 repeat rewrite Qopp_Qpos.
 rewrite <- Q_tail_Q_pos.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 rewrite Qinv_Qopp.
 abstract ring.

 apply Qsgn_9.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 rewrite Qinv_Qopp.
 rewrite Qmult_sym.
 rewrite Qmult_Qopp_left.
 rewrite Qsgn_25.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite Qmult_sym.
 rewrite H.
 constructor.

 intro H_absurd.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H_absurd in H.
 discriminate H.

 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 rewrite Qinv_Qopp.
 apply Qopp_resp_nonzero.

 intro H_absurd.
 unfold spec_Qquadratic_Qpositive_to_Q in H.
 rewrite H_absurd in H.
 rewrite Qmult_sym in H.
 discriminate H.
Qed.

Lemma spec_Qquadratic_Qpositive_to_Q_Zopp :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q (- a) (- b) (- c) (- d) 
   (- e) (- f) (- g) (- h) p1 p2 =
 spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2.
Proof.
 intros a b c d e f g h p1 p2.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 rewrite Qinv_Qopp.
 abstract ring.
Qed. 

Lemma spec_Qquadratic_Qpositive_to_Q_Zopp_2 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q (- a) (- b) (- c) (- d) e f g h p1 p2 =
 Qopp (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2).
Proof.
 intros a b c d e f g h p1 p2.
 unfold spec_Qquadratic_Qpositive_to_Q in |- *.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qmult_Qopp_left.
 repeat rewrite <- Qopp_plus.
 apply Qmult_Qopp_left.
Qed.
 
Lemma spec_Qquadratic_Qpositive_to_Q_Zopp_3 :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive),
 spec_Qquadratic_Qpositive_to_Q a b c d (- e) (- f) (- g) (- h) p1 p2 =
 Qopp (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2).
Proof.
 intros a b c d e f g h p1 p2; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
  repeat rewrite Z_to_Qopp; repeat rewrite Qmult_Qopp_left;
  repeat rewrite <- Qopp_plus; rewrite Qinv_Qopp; rewrite Qmult_sym;
  rewrite Qmult_Qopp_left; rewrite Qmult_sym; reflexivity.
Qed.

Lemma Qquadratic_sign_pres_fraction :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 Qmult
   (Qplus
      (Qplus
         (Qplus
            (Qmult
               (Qmult
                  (qnew_a a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
                  (Qpos
                     (qnew_p1 a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero)))
               (Qpos
                  (qnew_p2 a b c d e f g h p1 p2
                     H_Qquadratic_sg_denom_nonzero)))
            (Qmult
               (qnew_b a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
               (Qpos
                  (qnew_p1 a b c d e f g h p1 p2
                     H_Qquadratic_sg_denom_nonzero))))
         (Qmult (qnew_c a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
            (Qpos
               (qnew_p2 a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero))))
      (qnew_d a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero))
   (Qinv
      (Qplus
         (Qplus
            (Qplus
               (Qmult
                  (Qmult
                     (qnew_e a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero)
                     (Qpos
                        (qnew_p1 a b c d e f g h p1 p2
                           H_Qquadratic_sg_denom_nonzero)))
                  (Qpos
                     (qnew_p2 a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero)))
               (Qmult
                  (qnew_f a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
                  (Qpos
                     (qnew_p1 a b c d e f g h p1 p2
                        H_Qquadratic_sg_denom_nonzero))))
            (Qmult
               (qnew_g a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
               (Qpos
                  (qnew_p2 a b c d e f g h p1 p2
                     H_Qquadratic_sg_denom_nonzero))))
         (qnew_h a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero))) =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
            (Qmult g (Qpos p2))) h)).
Proof.
 fix Qquadratic_sign_pres_fraction 9.
 intros a b c d e f g h.
 unfold qnew_a, qnew_b, qnew_c, qnew_d, qnew_e, qnew_f, qnew_g, qnew_h,
  qnew_p1, qnew_p2 in |- *.
 set (o1 := outside_square a b c d) in *.
 set (o2 := outside_square e f g h) in *.
 intros [xs| xs| ].
  
  intros [ys| ys| ] H_Qquadratic_sg_denom_nonzero.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 Qquadratic_sign_pres_fraction; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)).
     
     case (Z_lt_dec 2 o2).
      
      clear Qquadratic_sign_pres_fraction; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)).
      case (Z_lt_dec o2 (-2)).
       
       clear Qquadratic_sign_pres_fraction;
        intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)).
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nR_nR_4 a b c d e f g h (nR xs) xs 
            (nR ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_1 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (nR xs)) (refl_equal (nR ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_nR_nR_unfolded;
        rewrite <-
         Qquadratic_sign_pres_fraction
                                       with
                                       (H_Qquadratic_sg_denom_nonzero := 
                                         Qquadratic_signok_1 e f g h xs ys
                                           H_Qquadratic_sg_denom_nonzero);
        reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear Qquadratic_sign_pres_fraction; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)).
         case (Z_lt_dec o1 (-2)).
          
          clear Qquadratic_sign_pres_fraction;
           intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)).
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nR_nR_7 a b c d e f g h 
               (nR xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_1 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (nR xs)) (refl_equal (nR ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_nR_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_1 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear Qquadratic_sign_pres_fraction; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption))).
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear Qquadratic_sign_pres_fraction; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (nR xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption))).
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_nR_nR_10 a b c d e f g h 
              (nR xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_1 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (nR xs)) (refl_equal (nR ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_nR_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_1 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 Qquadratic_sign_pres_fraction; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)).
     
     case (Z_lt_dec 2 o2).
      
      clear Qquadratic_sign_pres_fraction; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)).
      case (Z_lt_dec o2 (-2)).
       
       clear Qquadratic_sign_pres_fraction;
        intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)).
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nR_dL_4 a b c d e f g h (nR xs) xs 
            (dL ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_2 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (nR xs)) (refl_equal (dL ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL_unfolded;
        rewrite <-
         Qquadratic_sign_pres_fraction
                                       with
                                       (H_Qquadratic_sg_denom_nonzero := 
                                         Qquadratic_signok_2 e f g h xs ys
                                           H_Qquadratic_sg_denom_nonzero);
        reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear Qquadratic_sign_pres_fraction; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)).
         case (Z_lt_dec o1 (-2)).
          
          clear Qquadratic_sign_pres_fraction;
           intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)).
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nR_dL_7 a b c d e f g h 
               (nR xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_2 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (nR xs)) (refl_equal (dL ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_2 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear Qquadratic_sign_pres_fraction; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption))).
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear Qquadratic_sign_pres_fraction; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (nR xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption))).
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_nR_dL_10 a b c d e f g h 
              (nR xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_2 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (nR xs)) (refl_equal (dL ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_nR_dL_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_2 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.

  clear o1 o2 Qquadratic_sign_pres_fraction.
  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).
  intro H_Qhomographic_sg_denom_nonzero.
  set
   (L3 :=
    Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 
      (nR xs) H_Qhomographic_sg_denom_nonzero) in *.
  set (l1 := fst L3) in *.
  set (l2 := fst (snd L3)) in *.
  set (l3 := snd (snd L3)) in *.
  set (na := fst l2) in *.
  set (nb := fst (snd l2)) in *.
  set (nc := fst (snd (snd l2))) in *.
  set (nd := snd (snd (snd l2))) in *.
  rewrite
   (Qquadratic_sign_nRdL_One a b c d e f g h (nR xs) One
      H_Qquadratic_sg_denom_nonzero l1 na nb nc nd l3
      H_Qhomographic_sg_denom_nonzero);
   [ idtac
   | fold L3 in |- *; repeat (apply pair_2; try reflexivity)
   | discriminate
   | reflexivity ]. 
  rewrite spec_Qquadratic_Qpositive_to_Q_p_One_unfolded.
  unfold snd in |- *.
  unfold fst in |- *.
  repeat rewrite Zplus_0_l.
  repeat rewrite Qmult_one_right. 
  replace na with
   (new_a (a + b) (c + d) (e + f) (g + h) (nR xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace nb with
   (new_b (a + b) (c + d) (e + f) (g + h) (nR xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace nc with
   (new_c (a + b) (c + d) (e + f) (g + h) (nR xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace nd with
   (new_d (a + b) (c + d) (e + f) (g + h) (nR xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace l3 with
   (new_p (a + b) (c + d) (e + f) (g + h) (nR xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  rewrite sg_pres_fraction. 
  repeat rewrite Z_to_Qplus.
  clear L3 l1 l2 l3 na nb nc nd; apply f_equal2 with Q Q;
   try apply f_equal with Q; abstract ring.

  intros [ys| ys| ] H_Qquadratic_sg_denom_nonzero.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 Qquadratic_sign_pres_fraction; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)).
     
     case (Z_lt_dec 2 o2).
      
      clear Qquadratic_sign_pres_fraction; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)).
      case (Z_lt_dec o2 (-2)).
       
       clear Qquadratic_sign_pres_fraction;
        intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)).
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_dL_nR_4 a b c d e f g h (dL xs) xs 
            (nR ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_3 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (dL xs)) (refl_equal (nR ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_dL_nR_unfolded;
        rewrite <-
         Qquadratic_sign_pres_fraction
                                       with
                                       (H_Qquadratic_sg_denom_nonzero := 
                                         Qquadratic_signok_3 e f g h xs ys
                                           H_Qquadratic_sg_denom_nonzero);
        reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear Qquadratic_sign_pres_fraction; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)).
         case (Z_lt_dec o1 (-2)).
          
          clear Qquadratic_sign_pres_fraction;
           intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)).
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_dL_nR_7 a b c d e f g h 
               (dL xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_3 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (dL xs)) (refl_equal (nR ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_nR_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_3 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear Qquadratic_sign_pres_fraction; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption))).
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear Qquadratic_sign_pres_fraction; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (dL xs) (nR ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption))).
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_dL_nR_10 a b c d e f g h 
              (dL xs) xs (nR ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_3 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (dL xs)) (refl_equal (nR ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_nR_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_3 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.

   case (three_integers_dec_inf b c d).
    
    intros (Hb, (Hc, Hd)). 
    case (three_integers_dec_inf f g h).  
     
     clear o1 o2 Qquadratic_sign_pres_fraction; intros (Hf, (Hg, Hh));
      rewrite
       (Qquadratic_sign_nRdL_nRdL_1 a b c d e f g h 
          (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
       ; discriminate || (try (repeat split; assumption)).
     
     case (Z_lt_dec 2 o2).
      
      clear Qquadratic_sign_pres_fraction; intros H_o2_gt_2 Hfgh';
       rewrite
        (Qquadratic_sign_nRdL_nRdL_2 a b c d e f g h 
           (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
        ; discriminate || (try (repeat split; assumption)).
      case (Z_lt_dec o2 (-2)).
       
       clear Qquadratic_sign_pres_fraction;
        intros H_o2_lt_min_2 H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_nRdL_nRdL_3 a b c d e f g h 
            (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
         ; discriminate || (try (repeat split; assumption)).
        
       intros H_o2_lt_min_2' H_o2_gt_2' Hfgh';
        rewrite
         (Qquadratic_sign_dL_dL_4 a b c d e f g h (dL xs) xs 
            (dL ys) ys H_Qquadratic_sg_denom_nonzero
            (Qquadratic_signok_4 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
            (refl_equal (dL xs)) (refl_equal (dL ys)))
         ; discriminate || (try (repeat split; assumption));
        rewrite spec_Qquadratic_Qpositive_to_Q_dL_dL_unfolded;
        rewrite <-
         Qquadratic_sign_pres_fraction
                                       with
                                       (H_Qquadratic_sg_denom_nonzero := 
                                         Qquadratic_signok_4 e f g h xs ys
                                           H_Qquadratic_sg_denom_nonzero);
        reflexivity.
       
       intro Hbcd'.  
       case (three_integers_dec_inf f g h).  
        
        intros (Hf, (Hg, Hh)).
        case (Z_lt_dec 2 o1).
         
         clear Qquadratic_sign_pres_fraction; intros H_o1_gt_2;
          rewrite
           (Qquadratic_sign_nRdL_nRdL_5 a b c d e f g h 
              (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
           ; discriminate || (try (repeat split; assumption)).
         case (Z_lt_dec o1 (-2)).
          
          clear Qquadratic_sign_pres_fraction;
           intros H_o1_lt_min_2 H_o1_gt_2';
           rewrite
            (Qquadratic_sign_nRdL_nRdL_6 a b c d e f g h 
               (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption)).
          
          intros H_o1_lt_min_2' H_o1_gt_2';
           rewrite
            (Qquadratic_sign_dL_dL_7 a b c d e f g h 
               (dL xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
               (Qquadratic_signok_4 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
               (refl_equal (dL xs)) (refl_equal (dL ys)))
            ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_dL_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_4 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.
        
        intro Hfgh'.
        case (inside_square_1_dec_inf o1 o2).    
         
         clear Qquadratic_sign_pres_fraction; intro H_inside_1;
          (rewrite
            (Qquadratic_sign_nRdL_nRdL_8 a b c d e f g h 
               (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
            ; discriminate || (try (repeat split; assumption))).
         
         intro H_inside_1'.
         case (inside_square_2_dec_inf o1 o2).    
          
          clear Qquadratic_sign_pres_fraction; intro H_inside_2;
           (rewrite
             (Qquadratic_sign_nRdL_nRdL_9 a b c d e f g h 
                (dL xs) (dL ys) H_Qquadratic_sg_denom_nonzero)
             ; discriminate || (try (repeat split; assumption))).
          
          intros H_inside_2'. 
          rewrite
           (Qquadratic_sign_dL_dL_10 a b c d e f g h 
              (dL xs) xs (dL ys) ys H_Qquadratic_sg_denom_nonzero
              (Qquadratic_signok_4 _ _ _ _ _ _ H_Qquadratic_sg_denom_nonzero)
              (refl_equal (dL xs)) (refl_equal (dL ys)))
           ; discriminate || (try (repeat split; assumption));
           rewrite spec_Qquadratic_Qpositive_to_Q_dL_dL_unfolded;
           rewrite <-
            Qquadratic_sign_pres_fraction
                                          with
                                          (H_Qquadratic_sg_denom_nonzero := 
                                            Qquadratic_signok_4 e f g h xs ys
                                              H_Qquadratic_sg_denom_nonzero);
           reflexivity.

  clear o1 o2 Qquadratic_sign_pres_fraction.
  generalize (Qquadratic_signok_0' _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).
  intro H_Qhomographic_sg_denom_nonzero.
  set
   (L3 :=
    Qhomographic_sign (a + b) (c + d) (e + f) (g + h) 
      (dL xs) H_Qhomographic_sg_denom_nonzero) in *.
  set (l1 := fst L3) in *.
  set (l2 := fst (snd L3)) in *.
  set (l3 := snd (snd L3)) in *.
  set (na := fst l2) in *.
  set (nb := fst (snd l2)) in *.
  set (nc := fst (snd (snd l2))) in *.
  set (nd := snd (snd (snd l2))) in *.
  rewrite
   (Qquadratic_sign_nRdL_One a b c d e f g h (dL xs) One
      H_Qquadratic_sg_denom_nonzero l1 na nb nc nd l3
      H_Qhomographic_sg_denom_nonzero);
   [ idtac
   | fold L3 in |- *; repeat (apply pair_2; try reflexivity)
   | discriminate
   | reflexivity ]. 
  rewrite spec_Qquadratic_Qpositive_to_Q_p_One_unfolded.
  unfold snd in |- *.
  unfold fst in |- *.
  repeat rewrite Zplus_0_l.
  repeat rewrite Qmult_one_right. 
  replace na with
   (new_a (a + b) (c + d) (e + f) (g + h) (dL xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace nb with
   (new_b (a + b) (c + d) (e + f) (g + h) (dL xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace nc with
   (new_c (a + b) (c + d) (e + f) (g + h) (dL xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace nd with
   (new_d (a + b) (c + d) (e + f) (g + h) (dL xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  replace l3 with
   (new_p (a + b) (c + d) (e + f) (g + h) (dL xs)
      H_Qhomographic_sg_denom_nonzero); trivial.
  rewrite sg_pres_fraction. 
  repeat rewrite Z_to_Qplus.
  clear L3 l1 l2 l3 na nb nc nd; apply f_equal2 with Q Q;
   try apply f_equal with Q; abstract ring.

  clear o1 o2 Qquadratic_sign_pres_fraction.
  intros p2 H_Qquadratic_sg_denom_nonzero.
  generalize (Qquadratic_signok_0 _ _ _ _ _ H_Qquadratic_sg_denom_nonzero).
  intro H_Qhomographic_sg_denom_nonzero.
  set
   (L3 :=
    Qhomographic_sign (a + c) (b + d) (e + g) (f + h) p2
      H_Qhomographic_sg_denom_nonzero) in *.
  set (l1 := fst L3) in *.
  set (l2 := fst (snd L3)) in *.
  set (l3 := snd (snd L3)) in *.
  set (na := fst l2) in *.
  set (nb := fst (snd l2)) in *.
  set (nc := fst (snd (snd l2))) in *.
  set (nd := snd (snd (snd l2))) in *.
  rewrite
   (Qquadratic_sign_One_y a b c d e f g h One p2
      H_Qquadratic_sg_denom_nonzero l1 na nb nc nd l3
      H_Qhomographic_sg_denom_nonzero);
   [ idtac
   | fold L3 in |- *; repeat (apply pair_2; try reflexivity)
   | reflexivity ]. 
  rewrite spec_Qquadratic_Qpositive_to_Q_One_p_unfolded.
  unfold snd in |- *.
  unfold fst in |- *.
  repeat rewrite Zplus_0_l.
  repeat rewrite Qmult_one_right. 
  replace na with
   (new_a (a + c) (b + d) (e + g) (f + h) p2 H_Qhomographic_sg_denom_nonzero);
   trivial.
  replace nb with
   (new_b (a + c) (b + d) (e + g) (f + h) p2 H_Qhomographic_sg_denom_nonzero);
   trivial.
  replace nc with
   (new_c (a + c) (b + d) (e + g) (f + h) p2 H_Qhomographic_sg_denom_nonzero);
   trivial.
  replace nd with
   (new_d (a + c) (b + d) (e + g) (f + h) p2 H_Qhomographic_sg_denom_nonzero);
   trivial.
  replace l3 with
   (new_p (a + c) (b + d) (e + g) (f + h) p2 H_Qhomographic_sg_denom_nonzero);
   trivial.
  rewrite sg_pres_fraction. 
  repeat rewrite Z_to_Qplus.
  clear L3 l1 l2 l3 na nb nc nd; apply f_equal2 with Q Q;
   try apply f_equal with Q; abstract ring.

Qed.

Lemma Qquadratic_sg_denom_nonzero_correct_1 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qquadratic_sg_denom_nonzero e f g h p1 p2 ->
 Qplus
   (Qplus (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
      (Qmult g (Qpos p2))) h <> Zero.
Proof. 
  intros e f g h p1 p2 H_Qquadratic_sg_denom_nonzero.
  induction H_Qquadratic_sg_denom_nonzero.
  
  replace Zero with (Z_to_Q 0); trivial.
  rewrite H.
  repeat rewrite Qmult_one_right.
  rewrite <- Q_distr_left.
  rewrite <- Qplus_assoc.
  do 2 rewrite <- Z_to_Qplus.
  apply Qhomographic_sg_denom_nonzero_correct_1; assumption.
  
  replace Zero with (Z_to_Q 0); trivial.
  rewrite H.
  repeat rewrite Qmult_one_right.
  rewrite <- Qplus_assoc with (m := Z_to_Q f).
  rewrite (Qplus_sym f). 
  rewrite Qplus_assoc.
  rewrite <- Q_distr_left.
  rewrite <- Qplus_assoc.
  do 2 rewrite <- Z_to_Qplus.
  apply Qhomographic_sg_denom_nonzero_correct_1; assumption.
  
  do 2 rewrite Qpos_nR.  
  intro H.
  apply IHH_Qquadratic_sg_denom_nonzero.
  rewrite <- H.
  repeat rewrite Z_to_Qplus.
  abstract ring.
  
  abstract (rewrite Qpos_nR; rewrite Qpos_dL; intro H;
             repeat rewrite Z_to_Qplus in IHH_Qquadratic_sg_denom_nonzero;
             apply
              (Qmult_resp_nonzero _ (Qinv (Qplus (Qpos p2) Qone))
                 IHH_Qquadratic_sg_denom_nonzero);
             [ discriminate | rewrite <- H; field; discriminate ]).
  
  abstract (rewrite Qpos_nR; rewrite Qpos_dL; intro H;
             repeat rewrite Z_to_Qplus in IHH_Qquadratic_sg_denom_nonzero;
             apply
              (Qmult_resp_nonzero _ (Qinv (Qplus (Qpos p1) Qone))
                 IHH_Qquadratic_sg_denom_nonzero);
             [ discriminate | rewrite <- H; field; discriminate ]).
  
  abstract (do 2 rewrite Qpos_dL; intro H;
             repeat rewrite Z_to_Qplus in IHH_Qquadratic_sg_denom_nonzero;
             apply
              (Qmult_resp_nonzero _
                 (Qinv (Qmult (Qplus (Qpos p1) Qone) (Qplus (Qpos p2) Qone)))
                 IHH_Qquadratic_sg_denom_nonzero);
             [ discriminate | rewrite <- H; field; split; discriminate ]).
Qed.

Lemma Qquadratic_sg_denom_nonzero_correct_2 :
 forall (e f g h : Z) (p1 p2 : Qpositive),
 Qplus
   (Qplus (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
      (Qmult g (Qpos p2))) h <> Zero ->
 Qquadratic_sg_denom_nonzero e f g h p1 p2.
Proof. 
 intros e f g h p1.
 generalize e f g h.
 clear e f g h.
 induction p1 as [xs| xs| ].
  
  intros e f g h p2.
  generalize e f g h; clear e f g h.
  destruct p2 as [ys| ys| ].
  
  intros e f g h H.
  apply Qquadratic_signok1.
  apply IHxs.
  intro H'; apply H.
  do 2 rewrite Qpos_nR.
  rewrite <- H'.
  repeat rewrite Z_to_Qplus.
  abstract ring.
  
  intros e f g h H.
  apply Qquadratic_signok2.
  apply IHxs.
  repeat rewrite Z_to_Qplus.
  repeat rewrite Qpos_dL in H; repeat rewrite Qpos_nR in H.
  assert (H0 : Qplus (Qpos ys) Qone <> Zero); [ discriminate | idtac ].
  generalize (Qmult_resp_nonzero _ (Qplus (Qpos ys) Qone) H H0).
  intro H1.
  intro H'.
  apply H1.
  rewrite <- H'.
  abstract (field; discriminate).
  
  intros e f g h H.
  apply Qquadratic_signok0.
  reflexivity.
  apply Qhomographic_sg_denom_nonzero_correct_2.
  do 2 rewrite Z_to_Qplus.
  intro H'; apply H.
  rewrite <- H'.
  abstract ring.
  
  intros e f g h p2.
  generalize e f g h; clear e f g h.
  destruct p2 as [ys| ys| ].
  
  intros e f g h H.
  apply Qquadratic_signok3.
  apply IHxs.
  repeat rewrite Z_to_Qplus.
  repeat rewrite Qpos_dL in H; repeat rewrite Qpos_nR in H.
  assert (H0 : Qplus (Qpos xs) Qone <> Zero); [ discriminate | idtac ].
  generalize (Qmult_resp_nonzero _ (Qplus (Qpos xs) Qone) H H0).
  intro H1.
  intro H'.
  apply H1.
  rewrite <- H'.
  abstract (field; discriminate).
  
  intros e f g h H.
  apply Qquadratic_signok4.
  apply IHxs.
  repeat rewrite Z_to_Qplus.
  repeat rewrite Qpos_dL in H.
  assert (H0 : Qmult (Qplus (Qpos xs) Qone) (Qplus (Qpos ys) Qone) <> Zero);
   [ discriminate | idtac ].
  generalize
   (Qmult_resp_nonzero _
      (Qmult (Qplus (Qpos xs) Qone) (Qplus (Qpos ys) Qone)) H H0).
  intro H1.
  intro H'.
  apply H1.
  rewrite <- H'.
  abstract (field; split; discriminate).
  
  intros e f g h H.
  apply Qquadratic_signok0.
  reflexivity.
  apply Qhomographic_sg_denom_nonzero_correct_2.
  do 2 rewrite Z_to_Qplus.
  intro H'; apply H.
  rewrite <- H'.
  abstract ring.
  
  intros e f g h p2 H.
  apply Qquadratic_signok0'.
  reflexivity.
  apply Qhomographic_sg_denom_nonzero_correct_2.
  do 2 rewrite Z_to_Qplus.
  intro H'; apply H.
  rewrite <- H'.
  abstract ring.
Qed.

Lemma a_field_equality_2 :
 forall a b c d e f g h q1 q2 : Q,
 e <> Zero ->
 Qmult a h = Qmult d e ->
 Qmult a g = Qmult c e ->
 Qmult a f = Qmult b e ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult a (Qinv e) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).
Proof.
 intros a b c d e f g h p1 p2 He H5 H4 H1 Hdenom.
 symmetry  in |- *.
 rewrite Qdiv_num_denom with (p := e); [ idtac | assumption ].
 rewrite Q_distr_left. 
 rewrite <- H5.
 rewrite Q_distr_left with (z := e).
 rewrite Q_distr_left with (z := e).
 replace (Qmult (Qmult b p1) e) with (Qmult (Qmult f p1) a).
 replace (Qmult (Qmult c p2) e) with (Qmult (Qmult g p2) a).
 replace (Qmult (Qmult (Qmult a p1) p2) e) with
  (Qmult (Qmult (Qmult e p1) p2) a).
 rewrite <- Q_distr_left with (z := a).
 rewrite <- Q_distr_left with (z := a).
 rewrite (Qmult_sym a).
 rewrite <- Q_distr_left.
 rewrite Qmult_sym with (m := a). 
 rewrite Qmult_sym with (m := e). 
 rewrite <- Qdiv_num_denom; [ reflexivity | assumption ].
 abstract ring.
 replace (Qmult (Qmult g p2) a) with (Qmult (Qmult a g) p2) by ring;
   rewrite H4; ring.
 replace (Qmult (Qmult f p1) a) with (Qmult (Qmult a f) p1) by ring;
   rewrite H1; ring.
Qed.

Lemma a_field_equality_3 :
 forall a b c d e f g h q1 q2 : Q,
 f <> Zero ->
 Qmult b h = Qmult d f ->
 Qmult b g = Qmult c f ->
 Qmult a f = Qmult b e ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult b (Qinv f) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).
Proof.
 intros a b c d e f g h p1 p2 He H6 H2 H1 Hdenom.
 symmetry  in |- *.
 rewrite Qdiv_num_denom with (p := f); [ idtac | assumption ].
 rewrite Q_distr_left. 
 rewrite <- H6.
 rewrite Q_distr_left with (z := f).
 rewrite Q_distr_left with (z := f).
 replace (Qmult (Qmult b p1) f) with (Qmult (Qmult f p1) b).
 replace (Qmult (Qmult c p2) f) with (Qmult (Qmult g p2) b).
 replace (Qmult (Qmult (Qmult a p1) p2) f) with
  (Qmult (Qmult (Qmult e p1) p2) b).
 rewrite <- Q_distr_left with (z := b).
 rewrite <- Q_distr_left with (z := b).
 rewrite (Qmult_sym b).
 rewrite <- Q_distr_left.
 rewrite Qmult_sym with (m := b). 
 rewrite Qmult_sym with (m := f). 
 rewrite <- Qdiv_num_denom; [ reflexivity | assumption ].
 transitivity (Qmult (Qmult (Qmult b e) p1) p2);
   [ ring | rewrite <- H1; ring ].
 replace (Qmult (Qmult g p2) b) with (Qmult (Qmult b g) p2) by ring;
   rewrite H2; ring.
 ring.
Qed.

Lemma a_field_equality_4 :
 forall a b c d e f g h q1 q2 : Q,
 g <> Zero ->
 Qmult a g = Qmult c e ->
 Qmult b g = Qmult c f ->
 Qmult c h = Qmult d g ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult c (Qinv g) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).
Proof.
 intros a b c d e f g h p1 p2 He H4 H3 H2 Hdenom.
 symmetry  in |- *.
 rewrite Qdiv_num_denom with (p := g); [ idtac | assumption ].
 rewrite Q_distr_left. 
 rewrite <- H2.
 rewrite Q_distr_left with (z := g).
 rewrite Q_distr_left with (z := g).
 replace (Qmult (Qmult b p1) g) with (Qmult (Qmult f p1) c).
 replace (Qmult (Qmult c p2) g) with (Qmult (Qmult g p2) c).
 replace (Qmult (Qmult (Qmult a p1) p2) g) with
  (Qmult (Qmult (Qmult e p1) p2) c).
 rewrite (Qmult_sym c h).
 rewrite <- Q_distr_left with (z := c).
 rewrite <- Q_distr_left with (z := c).
 rewrite <- Q_distr_left.
 rewrite Qmult_sym with (m := c). 
 rewrite Qmult_sym with (m := g). 
 rewrite <- Qdiv_num_denom; [ reflexivity | assumption ].
 transitivity (Qmult (Qmult (Qmult c e) p1) p2);
   [ ring | rewrite <- H4; ring ].
 ring.
 replace (Qmult (Qmult f p1) c) with (Qmult (Qmult c f) p1) by ring;
   rewrite <- H3; ring.
Qed.

Lemma a_field_equality_5 :
 forall a b c d e f g h q1 q2 : Q,
 h <> Zero ->
 Qmult b h = Qmult d f ->
 Qmult a h = Qmult d e ->
 Qmult c h = Qmult d g ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero ->
 Qmult d (Qinv h) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).
Proof.
 intros a b c d e f g h p1 p2 He H6 H5 H3 Hdenom.
 symmetry  in |- *.
 rewrite Qdiv_num_denom with (p := h); [ idtac | assumption ].
 rewrite Q_distr_left. 
 rewrite Q_distr_left with (z := h).
 rewrite Q_distr_left with (z := h).
 replace (Qmult (Qmult b p1) h) with (Qmult (Qmult f p1) d).
 replace (Qmult (Qmult c p2) h) with (Qmult (Qmult g p2) d).
 replace (Qmult (Qmult (Qmult a p1) p2) h) with
  (Qmult (Qmult (Qmult e p1) p2) d).
 rewrite (Qmult_sym d h).
 rewrite <- Q_distr_left with (z := d).
 rewrite <- Q_distr_left with (z := d).
 rewrite <- Q_distr_left.
 rewrite Qmult_sym with (m := d). 
 rewrite Qmult_sym with (m := h). 
 rewrite <- Qdiv_num_denom; [ reflexivity | assumption ].
 transitivity (Qmult (Qmult (Qmult d e) p1) p2);
   [ ring | rewrite <- H5; ring ].
 replace (Qmult (Qmult g p2) d) with (Qmult (Qmult d g) p2) by ring;
   rewrite <- H3; ring.
 replace (Qmult (Qmult f p1) d) with (Qmult (Qmult d f) p1) by ring;
   rewrite <- H6; ring.
Qed.

Lemma quadratic_positive_input :
 forall (a b c d e f g h : Z) (p1 p2 : Qpositive)
   (H_Qquadratic_sg_denom_nonzero : Qquadratic_sg_denom_nonzero e f g h p1 p2),
 Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
   H_Qquadratic_sg_denom_nonzero =
 Qmult
   (Qplus
      (Qplus
         (Qplus (Qmult (Qmult a (Qpos p1)) (Qpos p2)) (Qmult b (Qpos p1)))
         (Qmult c (Qpos p2))) d)
   (Qinv
      (Qplus
         (Qplus
            (Qplus (Qmult (Qmult e (Qpos p1)) (Qpos p2)) (Qmult f (Qpos p1)))
            (Qmult g (Qpos p2))) h)).
Proof.
 intros a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero.
  functional induction
   (Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2
                            H_Qquadratic_sg_denom_nonzero); Clear_eq_.
 
 rewrite coding_Q.
 unfold spec_fraction_encoding in |- *.
 generalize _x; intros (H1, (H2, (H3, (H4, (H5, H6)))));
  repeat
   match goal with
   | id1:(_ = _ :>Z) |- _ =>
       generalize (f_equal Z_to_Q id1); clear id1; intro id1;
        do 2 rewrite Z_to_Qmult in id1
   end.
 apply a_field_equality_2;
  [ replace Zero with (Z_to_Q 0); trivial; apply Z_to_Q_not_eq; assumption
  | assumption
  | assumption
  | assumption
  | apply Qquadratic_sg_denom_nonzero_correct_1; assumption ].
 
 rewrite coding_Q.
 unfold spec_fraction_encoding in |- *.
 generalize _x; intros (H1, (H2, (H3, (H4, (H5, H6)))));
  repeat
   match goal with
   | id1:(_ = _ :>Z) |- _ =>
       generalize (f_equal Z_to_Q id1); clear id1; intro id1;
        do 2 rewrite Z_to_Qmult in id1
   end.
 apply a_field_equality_3;
  [ replace Zero with (Z_to_Q 0); trivial; apply Z_to_Q_not_eq; assumption
  | assumption
  | assumption
  | assumption
  | apply Qquadratic_sg_denom_nonzero_correct_1; assumption ].
 
 rewrite coding_Q.
 unfold spec_fraction_encoding in |- *.
 generalize _x; intros (H1, (H2, (H3, (H4, (H5, H6)))));
  repeat
   match goal with
   | id1:(_ = _ :>Z) |- _ =>
       generalize (f_equal Z_to_Q id1); clear id1; intro id1;
        do 2 rewrite Z_to_Qmult in id1
   end.
 apply a_field_equality_4;
  [ replace Zero with (Z_to_Q 0); trivial; apply Z_to_Q_not_eq; assumption
  | assumption
  | assumption
  | assumption
  | apply Qquadratic_sg_denom_nonzero_correct_1; assumption ].
 
 rewrite coding_Q.
 unfold spec_fraction_encoding in |- *.
 generalize _x; intros (H1, (H2, (H3, (H4, (H5, H6)))));
  repeat
   match goal with
   | id1:(_ = _ :>Z) |- _ =>
       generalize (f_equal Z_to_Q id1); clear id1; intro id1;
        do 2 rewrite Z_to_Qmult in id1
   end.
 apply a_field_equality_5;
  [ replace Zero with (Z_to_Q 0); trivial; apply Z_to_Q_not_eq; assumption
  | assumption
  | assumption
  | assumption
  | apply Qquadratic_sg_denom_nonzero_correct_1; assumption ].
 
 transitivity (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2);
  trivial; symmetry  in |- *; apply Qsgn_2;
  rewrite <-
   (quadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
   ; assumption.
 
 Absurd_q_sign_.
 
 rewrite quadratic_output_bit;
  rewrite <-
   spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_pos
   ; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
  rewrite Qquadratic_sign_pres_fraction;
  [ reflexivity
  | change
      (Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = 1%Z)
     in |- *;
     rewrite <-
      (quadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
      ; assumption ].
 
 rewrite quadratic_output_bit;
  rewrite <-
   spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_pos
   ; rewrite spec_Qquadratic_Qpositive_to_Q_Zopp;
  unfold spec_Qquadratic_Qpositive_to_Q in |- *;
  rewrite Qquadratic_sign_pres_fraction;
  [ reflexivity
  | change
      (Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = 1%Z)
     in |- *;
     rewrite <-
      (quadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
      ; assumption ].
 
 Absurd_q_sign_.
 
 rewrite quadratic_output_bit;
  rewrite <-
   spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_neg_2
   ; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
  rewrite Qquadratic_sign_pres_fraction;
  [ reflexivity
  | change
      (Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = (-1)%Z)
     in |- *;
     rewrite <-
      (quadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
      ; assumption ].
 
 rewrite quadratic_output_bit;
  rewrite <-
   spec_Qquadratic_Qpositive_to_Q_spec_Qquadratic_Qpositive_to_Qpositive2_neg_1
   ; unfold spec_Qquadratic_Qpositive_to_Q in |- *;
  rewrite Qquadratic_sign_pres_fraction;
  [ reflexivity
  | change
      (Qsgn (spec_Qquadratic_Qpositive_to_Q a b c d e f g h p1 p2) = (-1)%Z)
     in |- *;
     rewrite <-
      (quadratic_sign a b c d e f g h p1 p2 H_Qquadratic_sg_denom_nonzero)
      ; assumption ].
Qed.

Lemma quadratic :
 forall (a b c d e f g h : Z) (s1 s2 : Q)
   (H_Qquadratic_denom_nonzero : Qquadratic_denom_nonzero e f g h s1 s2),
 Qquadratic a b c d e f g h s1 s2 H_Qquadratic_denom_nonzero =
 spec_q a b c d e f g h s1 s2.
Proof.
 intros a b c d e f g h [| p1| p1] [| p2| p2] H_Qhomographic_denom_nonzero.
 
 unfold Qquadratic in |- *.
 rewrite homography.
 unfold spec_q, spec_h in |- *.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 reflexivity.
 
 unfold Qquadratic in |- *.
 rewrite homography.
 unfold spec_q, spec_h in |- *.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 reflexivity.
 
 unfold Qquadratic in |- *.
 rewrite homography.
 unfold spec_q, spec_h in |- *.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 reflexivity.
 
 unfold Qquadratic in |- *.
 rewrite homography.
 unfold spec_q, spec_h in |- *.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_right.
 repeat rewrite Qplus_zero_left.
 reflexivity.
 
 unfold Qquadratic in |- *.
 unfold spec_q in |- *.
 apply quadratic_positive_input.
 
 unfold Qquadratic in |- *.
 unfold spec_q in |- *.
 rewrite quadratic_positive_input.
 apply f_equal2 with Q Q; [ idtac | apply f_equal with Q ];
  apply f_equal2 with Q Q; trivial; repeat rewrite Z_to_Qopp;
  repeat rewrite <- Qmult_neg; abstract ring.
 
 unfold Qquadratic in |- *.
 rewrite homography.
 unfold spec_q, spec_h in |- *.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_right.
 repeat rewrite Qplus_zero_left.
 reflexivity.
 
 unfold Qquadratic in |- *.
 unfold spec_q in |- *.
 rewrite quadratic_positive_input.
 apply f_equal2 with Q Q; [ idtac | apply f_equal with Q ];
  apply f_equal2 with Q Q; trivial; repeat rewrite Z_to_Qopp;
  repeat rewrite <- Qmult_neg; abstract ring.
 
 unfold Qquadratic in |- *.
 unfold spec_q in |- *.
 rewrite quadratic_positive_input.
 apply f_equal2 with Q Q; [ idtac | apply f_equal with Q ];
  apply f_equal2 with Q Q; trivial; repeat rewrite Z_to_Qopp;
  repeat rewrite <- Qmult_neg; abstract ring.
Qed.

Lemma Qquadratic_denom_nonzero_correct_1 :
 forall (e f g h : Z) (q1 q2 : Q),
 Qquadratic_denom_nonzero e f g h q1 q2 ->
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero.
Proof. 
 intros e f g h q1 q2 H_Qquadratic_denom_nonzero;
  induction H_Qquadratic_denom_nonzero.
 
 rewrite H.
 rewrite H0.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 change (Z_to_Q h <> Z_to_Q 0) in |- *.
 apply Z_to_Q_not_eq; assumption.
 
 rewrite H.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 rewrite H0.
 apply Qhomographic_sg_denom_nonzero_correct_1; assumption.
 
 rewrite H.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 rewrite H0.
 rewrite Qopp_Qpos.
 generalize (Qhomographic_sg_denom_nonzero_correct_1 _ _ _ H1).
 intros H' H2; apply H'.
 rewrite <- H2.
 rewrite Z_to_Qopp.
 abstract ring.
 
 rewrite H.
 rewrite H0.
 repeat rewrite Qmult_zero_right.
 rewrite Qplus_zero_left.
 rewrite Qplus_zero_right.
 apply Qhomographic_sg_denom_nonzero_correct_1; assumption.
 
 rewrite H.
 rewrite H0.
 repeat rewrite Qmult_zero_right.
 rewrite Qplus_zero_left.
 rewrite Qplus_zero_right.
 rewrite Qopp_Qpos.
 generalize (Qhomographic_sg_denom_nonzero_correct_1 _ _ _ H1).
 intros H' H2; apply H'.
 rewrite <- H2.
 rewrite Z_to_Qopp.
 abstract ring.
 
 rewrite H.
 rewrite H0.
 apply Qquadratic_sg_denom_nonzero_correct_1; assumption.
 
 rewrite H.
 rewrite H0.
 generalize (Qquadratic_sg_denom_nonzero_correct_1 _ _ _ _ _ _ H1).
 intros H' H2; apply H'.
 rewrite <- H2.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qopp_Qpos.
 abstract ring.
 
 rewrite H.
 rewrite H0.
 generalize (Qquadratic_sg_denom_nonzero_correct_1 _ _ _ _ _ _ H1).
 intros H' H2; apply H'.
 rewrite <- H2.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qopp_Qpos.
 abstract ring.
 
 rewrite H.
 rewrite H0.
 generalize (Qquadratic_sg_denom_nonzero_correct_1 _ _ _ _ _ _ H1).
 intros H' H2; apply H'.
 rewrite <- H2.
 repeat rewrite Z_to_Qopp.
 repeat rewrite Qopp_Qpos.
 abstract ring.
Qed. 

Lemma Qquadratic_denom_nonzero_correct_2 :
 forall (e f g h : Z) (q1 q2 : Q),
 Qplus (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h <>
 Zero -> Qquadratic_denom_nonzero e f g h q1 q2.
Proof. 
 intros e f g h [| p1| p1] [| p2| p2] H_denom.
 
 apply Qquadraticok00; trivial.
 intro H.
 apply H_denom.
 rewrite H.
 simpl in |- *.
 abstract ring.
 
 apply Qquadraticok01 with p2; trivial.
 apply Qhomographic_sg_denom_nonzero_correct_2.
 intro H.
 apply H_denom.
 repeat rewrite Qmult_zero_right.
 rewrite Qmult_zero.
 repeat rewrite Qplus_zero_left.
 assumption.
 
 apply Qquadraticok02 with p2; trivial.
 apply Qhomographic_sg_denom_nonzero_correct_2.
 intro H.
 apply H_denom.
 repeat rewrite Qmult_zero_right.
 rewrite Qmult_zero.
 repeat rewrite Qplus_zero_left.
 rewrite <- Qmult_neg in H.
 rewrite Z_to_Qopp in H.
 rewrite Qmult_Qopp_left in H.
 rewrite <- H.
 abstract ring.
 
 apply Qquadraticok10 with p1; trivial.
 apply Qhomographic_sg_denom_nonzero_correct_2.
 intro H.
 apply H_denom.
 repeat rewrite Qmult_zero_right.
 repeat rewrite Qplus_zero_left.
 repeat rewrite Qplus_zero_right.
 assumption.
 
 apply Qquadraticok11 with p1 p2; trivial.
 apply Qquadratic_sg_denom_nonzero_correct_2.
 assumption.
 
 apply Qquadraticok12 with p1 p2; trivial.
 apply Qquadratic_sg_denom_nonzero_correct_2.
 repeat rewrite Z_to_Qopp.
 repeat rewrite <- Qmult_neg.
 intro H.
 apply H_denom.
 repeat rewrite <- Qmult_neg.
 rewrite <- H.
 abstract ring.
 
 apply Qquadraticok20 with p1; trivial.
 apply Qhomographic_sg_denom_nonzero_correct_2.
 intro H.
 apply H_denom.
 repeat rewrite Qmult_zero_right.
 rewrite Qplus_zero_left.
 rewrite Qplus_zero_right.
 rewrite <- Qmult_neg in H.
 rewrite Z_to_Qopp in H.
 rewrite <- H.
 abstract ring.
 
 apply Qquadraticok21 with p1 p2; trivial.
 apply Qquadratic_sg_denom_nonzero_correct_2.
 repeat rewrite Z_to_Qopp.
 repeat rewrite <- Qmult_neg.
 intro H.
 apply H_denom.
 repeat rewrite <- Qmult_neg.
 rewrite <- H.
 abstract ring.
 
 apply Qquadraticok22 with p1 p2; trivial.
 apply Qquadratic_sg_denom_nonzero_correct_2.
 repeat rewrite Z_to_Qopp.
 repeat rewrite <- Qmult_neg.
 intro H.
 apply H_denom.
 repeat rewrite <- Qmult_neg.
 rewrite <- H.
 abstract ring.
Qed. 

Theorem quadratic_algorithm_is_correct :
 forall (a b c d e f g h : Z) (q1 q2 : Q)
   (H_denom : Qplus
                (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1))
                   (Qmult g q2)) h <> Zero),
 Qquadratic a b c d e f g h q1 q2
   (Qquadratic_denom_nonzero_correct_2 e f g h q1 q2 H_denom) =
 Qmult
   (Qplus (Qplus (Qplus (Qmult (Qmult a q1) q2) (Qmult b q1)) (Qmult c q2)) d)
   (Qinv
      (Qplus
         (Qplus (Qplus (Qmult (Qmult e q1) q2) (Qmult f q1)) (Qmult g q2)) h)).
Proof.
 intros a b c d e f g h q1 q2 H_denom;
  apply
   (quadratic a b c d e f g h q1 q2
      (Qquadratic_denom_nonzero_correct_2 e f g h q1 q2 H_denom)).
Qed.
