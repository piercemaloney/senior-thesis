Require Import Coq.Program.Syntax.

Require Import List.

Require Import String.
(* String:
Require Import Coq.Strings.String.
Require Import Coq.Program.Program. 
Require Import Coq.Numbers.Natural.Peano.NPeano.
Require Import Coq.Arith.Arith.

Require Import ExtLib.Tactics.Consider.
Require Import ExtLib.Core.RelDec.
Require Import ExtLib.Structures.Reducible.
Require Import ExtLib.Structures.Monoid.
Require Import ExtLib.Data.Char.
Require Import ExtLib.Data.Nat.

Set Implicit Arguments.
Set Strict Implicit.

Local Notation "x >> y" := (match x with
                              | Eq => y
                              | z => z
                            end) (only parsing, at level 30).

Definition bool_cmp (l r : bool) : comparison :=
  match l , r with
    | true , false => Gt
    | false , true => Lt
    | true , true
    | false , false => Eq
  end.

Definition ascii_cmp (l r : Ascii.ascii) : comparison :=
  match l , r with
    | Ascii.Ascii l1 l2 l3 l4 l5 l6 l7 l8 ,
      Ascii.Ascii r1 r2 r3 r4 r5 r6 r7 r8 =>
      bool_cmp l8 r8 >> bool_cmp l7 r7 >> bool_cmp l6 r6 >> bool_cmp l5 r5 >>
      bool_cmp l4 r4 >> bool_cmp l3 r3 >> bool_cmp l2 r2 >> bool_cmp l1 r1
  end.

Fixpoint string_dec (l r : string) : bool :=
  match l , r with
    | EmptyString , EmptyString => true
    | String l ls , String r rs =>
      if ascii_dec l r then string_dec ls rs
      else false
    | _ , _ => false
  end.

Theorem string_dec_sound : forall l r,
  string_dec l r = true <-> l = r.

Global Instance RelDec_string : RelDec (@eq string) :=
{| rel_dec := string_dec |}.

Global Instance RelDec_Correct_string : RelDec_Correct RelDec_string.

Global Instance Reflect_string_dec a b : Reflect (string_dec a b) (a = b) (a <> b).

Fixpoint string_cmp (l r : string) : comparison :=
  match l , r with
    | EmptyString , EmptyString => Eq
    | EmptyString , _ => Lt
    | _ , EmptyString => Gt
    | String l ls , String r rs =>
      ascii_cmp l r >> string_cmp ls rs
  end.

Section Program_Scope.
  Variable modulus : nat.
  Hypothesis one_lt_mod : 1 < modulus.

  Lemma _xxx : forall m n,
                 1 < m -> ~ n < m -> 0 < n.

  Program Fixpoint nat2string (n:nat) {measure n}: string :=
    match NPeano.Nat.ltb n modulus as x return NPeano.Nat.ltb n modulus = x -> string with

End Program_Scope.

Definition nat2string10 : nat -> string.

Definition nat2string2 : nat -> string.

Definition nat2string8 : nat -> string.

Definition nat2string16 : nat -> string.

Global Instance Foldable_string : Foldable string ascii :=
  fun _ f base =>
    fix go ls :=
    match ls with
    | EmptyString => base
    | String l ls =>
      f l (go ls)
    end.

Section string.
  Inductive R_string_len : string -> string -> Prop :=
  | R_s_len : forall n m, length n < length m -> R_string_len n m.

  Theorem wf_R_string_len : well_founded R_string_len.
End string.

Definition Monoid_string_append : Monoid string :=
{| monoid_plus := append
 ; monoid_unit := EmptyString
|}. *)



Require Import ExtLib.Structures.Monads.

Require Import ExtLib.Core.RelDec.



Open Scope string_scope.

Import MonadNotation.

Open Scope monad_scope.



Set Implicit Arguments.

Set Maximal Implicit Insertion.



Module FunNotation.



  Notation "f $ x" := (f x)

    (at level 99, x at level 99, right associativity, only parsing).



  Notation "'begin' e1 'end'" := ((e1))

    (at level 0, only parsing).



End FunNotation.

Import FunNotation.



Definition compose A B C (g:B -> C) (f:A -> B) (x:A) : C := g (f x).



Definition uncurry A B C (f:A -> B -> C) (x:A * B) : C := let (a,b) := x in f a b.



Definition const A B (x:B) : A -> B := fun _ => x.



Fixpoint zip A B (xs:list A) (ys:list B) : list (A * B) :=

  match xs, ys with

  | [], _ => []

  | _, [] => []

  | x::xs, y::ys => (x,y)::zip xs ys

  end

.



Fixpoint unzip A B (xys:list (A * B)) : list A * list B :=

match xys with

| [] => ([], [])

| (x,y)::xys => let (xs,ys) := unzip xys in (x::xs,y::ys)

end.



Definition sum_tot {A} (x:A + A) : A := match x with inl a => a | inr a => a end.



Definition forEach A B (xs:list A) (f:A -> B) : list B := map f xs.



Definition lsingleton {A} (x:A) : list A := [x].



Definition firstf {A B C} (f:A->C) (xy:A*B) : C*B :=

let (x,y) := xy in (f x, y).



Definition secondf {A B C} (f:B->C) (xy:A*B) : A*C :=

let (x,y) := xy in (x, f y).



Fixpoint update {K V} {kRealDec:RelDec (@eq K)} x v l : list (K * V) :=

match l with

| [] => [(x,v)]

| (y,w)::l' => if eq_dec x y then (x,v)::l' else (y,w)::update x v l'

end.



Definition updateMany {K V} {kRealDec:RelDec (@eq K)}

  (ups:list (K * V)) (init:list (K * V)) : list (K * V) :=

    fold_right (uncurry update) init ups.

