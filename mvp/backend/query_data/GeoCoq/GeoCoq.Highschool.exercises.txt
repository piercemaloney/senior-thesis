Require Export GeoCoq.Tarski_dev.Annexes.midpoint_theorems.

Require Export GeoCoq.Highschool.varignon.



Section Exercises.



Context `{TE:Tarski_euclidean}.



Lemma Per_mid_rectangle : forall A B C I J K,

  A <> B ->

  B <> C ->

  Per B A C ->

  Midpoint I B C ->

  Midpoint J A C ->

  Midpoint K A B ->

  Rectangle A J I K.

Proof.

intros.

assert_diffs.

assert_cols.

elim (eq_dec_points A C); intro; apply plg_per_rect.



  treat_equalities.

  assert (HM : exists M : Tpoint, Midpoint M J I) by (apply midpoint_existence); decompose [ex] HM; repeat split; intuition; exists x; intuition.



  treat_equalities; intuition.



  assert( Par A B J I /\ Par A C I K /\ Par B C J K /\

    Cong A K I J /\ Cong B K I J /\ Cong A J I K /\ Cong C J I K /\ Cong B I J K /\ Cong C I J K)

  by (apply triangle_mid_par_cong; intuition).

  spliter.



  elim (col_dec A B C); intro; assert_diffs.



    apply parallelogram_to_plg; unfold Parallelogram; right; unfold Parallelogram_flat; repeat split.

    ColR.

    ColR.

    assumption.



    assumption.



    right; intro; subst; assert (B = C) by (apply symmetric_point_uniqueness with A K; assumption); contradiction.



    apply pars_par_plg.



      assert (Par_strict A B J I /\ Par_strict A C I K /\ Par_strict B C J K /\

        Cong A K I J /\ Cong B K I J /\ Cong A J I K /\ Cong C J I K /\ Cong B I J K /\ Cong C I J K)

      by (apply triangle_mid_par_strict_cong; intuition).

      spliter.

      apply par_strict_symmetry; apply par_strict_col_par_strict with C; intuition; apply par_strict_symmetry; apply par_strict_right_comm; assumption; Col.

      Par.

      Col.



      assert (Par_strict A B J I /\ Par_strict A C I K /\ Par_strict B C J K /\

        Cong A K I J /\ Cong B K I J /\ Cong A J I K /\ Cong C J I K /\ Cong B I J K /\ Cong C I J K)

      by (apply triangle_mid_par_strict_cong; intuition).

      spliter.

      apply par_symmetry; apply par_col_par with B; intuition; apply par_symmetry; apply par_strict_par; assumption.



  left; apply l8_3 with B; try apply l8_2; try apply l8_3 with C; try apply l8_2; try assumption; intuition; Col.



Qed.



Ltac assert_diffs_by_cases :=

 repeat match goal with

 | A: Tpoint, B: Tpoint |- _ => not_exist_hyp_comm A B;induction (eq_dec_points A B);[treat_equalities;solve [finish|trivial] |idtac]

end.



Lemma quadrileral_midpoints:

 forall A B C D I J K L X Y,

  ~ Col I J K ->

  Midpoint I A B ->

  Midpoint J B C ->

  Midpoint K C D ->

  Midpoint L A D ->

  Midpoint X I K ->

  Midpoint Y J L ->

  X = Y.

Proof.

intros.

assert_diffs_by_cases.

assert (Parallelogram I J K L)

  by (apply (varignon A B C D I J K L);finish).

assert (Midpoint X J L)

  by (perm_apply (plg_mid_2 I J K L X)).

treat_equalities;trivial.

Qed.



End Exercises.

