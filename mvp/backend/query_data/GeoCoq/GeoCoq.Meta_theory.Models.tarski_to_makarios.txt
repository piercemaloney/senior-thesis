

Require Import GeoCoq.Axioms.tarski_axioms.
(* GeoCoq.Axioms.tarski_axioms:
Require Export GeoCoq.Utils.general_tactics.

Class Tarski_neutral_dimensionless :=
{
 Tpoint : Type;
 Bet : Tpoint -> Tpoint -> Tpoint -> Prop;
 Cong : Tpoint -> Tpoint -> Tpoint -> Tpoint -> Prop;
 cong_pseudo_reflexivity : forall A B, Cong A B B A;
 cong_inner_transitivity : forall A B C D E F,
   Cong A B C D -> Cong A B E F -> Cong C D E F;
 cong_identity : forall A B C, Cong A B C C -> A = B;
 segment_construction : forall A B C D,
   exists E, Bet A B E /\ Cong B E C D;
 five_segment : forall A A' B B' C C' D D',
   Cong A B A' B' ->
   Cong B C B' C' ->
   Cong A D A' D' ->
   Cong B D B' D' ->
   Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D';
 between_identity : forall A B, Bet A B A -> A = B;
 inner_pasch : forall A B C P Q,
   Bet A P C -> Bet B Q C ->
   exists X, Bet P X B /\ Bet Q X A;
 PA : Tpoint;
 PB : Tpoint;
 PC : Tpoint;
 lower_dim : ~ (Bet PA PB PC \/ Bet PB PC PA \/ Bet PC PA PB)
}.

Class Tarski_neutral_dimensionless_with_decidable_point_equality
 `(Tn : Tarski_neutral_dimensionless) :=
{
 point_equality_decidability : forall A B : Tpoint, A = B \/ ~ A = B
}.

Class Tarski_2D
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 upper_dim : forall A B C P Q,
   P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->
   (Bet A B C \/ Bet B C A \/ Bet C A B)
}.

Class Tarski_3D
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 S1 : Tpoint;
 S2 : Tpoint;
 S3 : Tpoint;
 S4 : Tpoint;
 lower_dim_3 : ~ exists X,
   (Bet S1 S2 X \/ Bet S2 X S1 \/ Bet X S1 S2) /\ (Bet S3 S4 X \/ Bet S4 X S3 \/ Bet X S3 S4) \/
   (Bet S1 S3 X \/ Bet S3 X S1 \/ Bet X S1 S3) /\ (Bet S2 S4 X \/ Bet S4 X S2 \/ Bet X S2 S4) \/
   (Bet S1 S4 X \/ Bet S4 X S1 \/ Bet X S1 S4) /\ (Bet S2 S3 X \/ Bet S3 X S2 \/ Bet X S2 S3);
 upper_dim_3 : forall A B C P Q R,
   P <> Q -> Q <> R -> P <> R ->
   Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->
   Cong A P A R -> Cong B P B R -> Cong C P C R ->
   (Bet A B C \/ Bet B C A \/ Bet C A B)
}.

Class Tarski_euclidean
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 euclid : forall A B C D T,
   Bet A D T -> Bet B D C -> A<>D ->
   exists X, exists Y,
   Bet A B X /\ Bet A C Y /\ Bet X T Y
}.

Class Tarski_ruler_and_compass
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 circle_circle_continuity : forall A B C D B' D',
   Cong A B' A B -> Cong C D' C D ->
   Bet A D' B -> Bet C B' D ->
   exists Z, Cong A Z A B /\ Cong C Z C D
}.

Class Tarski_continuous
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 continuity : forall (Alpha Beta : Tpoint -> Prop),
   (exists A, forall X Y, Alpha X -> Beta Y -> Bet A X Y) ->
   (exists B, forall X Y, Alpha X -> Beta Y -> Bet X B Y)
}. *)

Require Import GeoCoq.Axioms.makarios_variant_axioms.
(* GeoCoq.Axioms.makarios_variant_axioms:
Class Tarski_neutral_dimensionless_variant := {
 MTpoint : Type;
 BetM : MTpoint -> MTpoint -> MTpoint -> Prop;
 CongM : MTpoint -> MTpoint -> MTpoint -> MTpoint -> Prop;
 Mcong_identity : forall A B C, CongM A B C C -> A = B;
 Mcong_inner_transitivity : forall A B C D E F,
   CongM A B C D -> CongM A B E F -> CongM C D E F;
 Msegment_construction : forall A B C D,
   exists E, BetM A B E /\ CongM B E C D;
 Mfive_segment : forall A A' B B' C C' D D',
   CongM A B A' B' ->
   CongM B C B' C' ->
   CongM A D A' D' ->
   CongM B D B' D' ->
   BetM A B C -> BetM A' B' C' -> A <> B ->
   CongM D C C' D';
 Mbetween_identity : forall A B, BetM A B A -> A = B;
 Minner_pasch : forall A B C P Q,
   BetM A P C -> BetM B Q C ->
   exists X, BetM P X B /\ BetM Q X A;
 MPA : MTpoint;
 MPB : MTpoint;
 MPC : MTpoint;
 Mlower_dim : ~ (BetM MPA MPB MPC \/ BetM MPB MPC MPA \/ BetM MPC MPA MPB)
 }.

Class Tarski_neutral_dimensionless_variant_with_decidable_point_equality
 `(Tn : Tarski_neutral_dimensionless_variant) :=
{
 Mpoint_equality_decidability : forall A B : MTpoint, A = B \/ ~ A = B
}. *)



Section Tarski83_to_Makarios_variant.



Context `{TnEQD:Tarski_neutral_dimensionless}.



Lemma five_segment' : forall A A' B B' C C' D D',

  Cong A B A' B' ->

  Cong B C B' C' ->

  Cong A D A' D' ->

  Cong B D B' D' ->

  Bet A B C -> Bet A' B' C' -> A <> B ->

  Cong D C C' D'.

Proof.

  intros.

  assert(Cong C D C' D').

  intros.

  eapply five_segment with A A' B B';assumption.

  assert(Cong C D D C).

  eapply cong_pseudo_reflexivity;eauto.

  apply cong_inner_transitivity with C D;assumption.

Qed.



Lemma lower_dim_ex :

  exists A B C, ~ (Bet A B C \/ Bet B C A \/ Bet C A B).

Proof.

exists PA.

exists PB.

exists PC.

apply lower_dim.

Qed.



Instance Makarios_Variant_follows_from_Tarski : Tarski_neutral_dimensionless_variant.

Proof.

exact (Build_Tarski_neutral_dimensionless_variant

 Tpoint Bet Cong

 cong_identity

 cong_inner_transitivity

 segment_construction

 five_segment'

 between_identity

 inner_pasch

 PA PB PC

 lower_dim).

Qed.



End Tarski83_to_Makarios_variant.
