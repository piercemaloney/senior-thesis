Require Export Elements.OriginalProofs.proposition_01. 
(* Elements.OriginalProofs.proposition_01:
Require Export GeoCoq.Elements.OriginalProofs.lemma_congruenceflip.
Require Export GeoCoq.Elements.OriginalProofs.lemma_partnotequalwhole.

Section Euclid.

Context `{Ax1:euclidean_neutral_ruler_compass}.

Lemma proposition_01 : 
   forall A B, 
   neq A B ->
   exists X, equilateral A B X /\ Triangle A B X.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_03.
(* Elements.OriginalProofs.proposition_03:
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_03 : 
   forall A B C D E F, 
   Lt C D A B -> Cong E F A B ->
   exists X, BetS E X F /\ Cong E X C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_04.
(* Elements.OriginalProofs.proposition_04:
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesNC.
Require Export GeoCoq.Elements.OriginalProofs.lemma_layoffunique.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ray5.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ray3.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_04 : 
   forall A B C a b c, 
   Cong A B a b -> Cong A C a c -> CongA B A C b a c ->
   Cong B C b c /\ CongA A B C a b c /\ CongA A C B a c b.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_05.
(* Elements.OriginalProofs.proposition_05:
Require Export GeoCoq.Elements.OriginalProofs.lemma_ABCequalsCBA.
Require Export GeoCoq.Elements.OriginalProofs.proposition_04.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_05 : 
   forall A B C, 
   isosceles A B C ->
   CongA A B C A C B.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_05b.
(* Elements.OriginalProofs.proposition_05b:
Require Export GeoCoq.Elements.OriginalProofs.proposition_05.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesNC.
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplements.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_05b : 
   forall A B C F G, 
   isosceles A B C -> BetS A B F -> BetS A C G ->
   CongA C B F B C G.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_06.
(* Elements.OriginalProofs.proposition_06:
Require Export GeoCoq.Elements.OriginalProofs.proposition_06a.
Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy1.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_06 : 
   forall A B C, 
   Triangle A B C -> CongA A B C A C B ->
   Cong A B A C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_06a.
(* Elements.OriginalProofs.proposition_06a:
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleorderrespectscongruence2.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_06a : 
   forall A B C, 
   Triangle A B C -> CongA A B C A C B ->
   ~ Lt A C A B.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_07.
(* Elements.OriginalProofs.proposition_07:
Require Export GeoCoq.Elements.OriginalProofs.proposition_12.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidesymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_planeseparation.
Require Export GeoCoq.Elements.OriginalProofs.lemma_droppedperpendicularunique.
Require Export GeoCoq.Elements.OriginalProofs.lemma_fiveline.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_07 : 
   forall A B C D, 
   neq A B -> Cong C A D A -> Cong C B D B -> OS C D A B ->
   eq C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_08.
(* Elements.OriginalProofs.proposition_08:
Require Export GeoCoq.Elements.OriginalProofs.lemma_inequalitysymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ray4.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearorder.
Require Export GeoCoq.Elements.OriginalProofs.lemma_congruenceflip.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_08 : 
   forall A B C D E F, 
   Triangle A B C -> Triangle D E F -> Cong A B D E -> Cong A C D F -> Cong B C E F ->
   CongA B A C E D F /\ CongA C B A F E D /\ CongA A C B D F E.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_09.
(* Elements.OriginalProofs.proposition_09:
Require Export GeoCoq.Elements.OriginalProofs.proposition_10.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ABCequalsCBA.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglestransitive.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_09 : 
   forall A B C, 
   nCol B A C ->
   exists X, CongA B A X X A C /\ InAngle B A C X.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_10.
(* Elements.OriginalProofs.proposition_10:
Require Export GeoCoq.Elements.OriginalProofs.proposition_01.
Require Export GeoCoq.Elements.OriginalProofs.proposition_03.
Require Export GeoCoq.Elements.OriginalProofs.lemma_interior5.
Require Export GeoCoq.Elements.OriginalProofs.lemma_twolines.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_10 : 
   forall A B, 
   neq A B ->
   exists X, BetS A X B /\ Cong X A X B.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_11B.
(* Elements.OriginalProofs.proposition_11B:
Require Export GeoCoq.Elements.OriginalProofs.lemma_notperp.
Require Export GeoCoq.Elements.OriginalProofs.lemma_pointreflectionisometry.
Require Export GeoCoq.Elements.OriginalProofs.lemma_planeseparation.
Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_11B : 
   forall A B C P, 
   BetS A C B -> nCol A B P ->
   exists X, Per A C X /\ TS X A B P.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_11.
(* Elements.OriginalProofs.proposition_11:
Require Export GeoCoq.Elements.OriginalProofs.lemma_extension.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearorder.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_11 : 
   forall A B C, 
   BetS A C B ->
   exists X, Per A C X.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_12.
(* Elements.OriginalProofs.proposition_12:
Require Export GeoCoq.Elements.OriginalProofs.proposition_10.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_12 : 
   forall A B C, 
   nCol A B C ->
   exists X, Perp_at C X A B X.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_13.
(* Elements.OriginalProofs.proposition_13:
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_13 : 
   forall A B C D, 
   BetS D B C -> nCol A B C ->
   RT C B A A B D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_14.
(* Elements.OriginalProofs.proposition_14:
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.
Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_07.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_14 : 
   forall A B C D E, 
   RT A B C D B E -> Out B C D -> TS E D B A ->
   Supp A B C D E /\ BetS A B E.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_15.
(* Elements.OriginalProofs.proposition_15:
Require Export GeoCoq.Elements.OriginalProofs.lemma_ABCequalsCBA.
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplements.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglestransitive.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_15 : 
   forall A B C D E, 
   BetS A E B -> BetS C E D -> nCol A E C ->
   CongA A E C D E B /\ CongA C E B A E D.

Lemma proposition_15a :
 forall A B C D E : Point,
       BetS A E B ->
       BetS C E D -> nCol A E C -> CongA A E C D E B.

Lemma proposition_15b :
 forall A B C D E : Point,
       BetS A E B ->
       BetS C E D -> nCol A E C ->
       CongA C E B A E D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_16.
(* Elements.OriginalProofs.proposition_16:
Require Export GeoCoq.Elements.OriginalProofs.proposition_10.
Require Export GeoCoq.Elements.OriginalProofs.proposition_15.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleorderrespectscongruence.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleorderrespectscongruence2.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_16 : 
   forall A B C D, 
   Triangle A B C -> BetS B C D ->
   LtA B A C A C D /\ LtA C B A A C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_17.
(* Elements.OriginalProofs.proposition_17:
Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.
Require Export GeoCoq.Elements.OriginalProofs.proposition_16.
Require Export GeoCoq.Elements.OriginalProofs.lemma_crossbar.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCorder.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_17 : 
   forall A B C, 
   Triangle A B C ->
   exists X Y Z, SumA A B C B C A X Y Z.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_18.
(* Elements.OriginalProofs.proposition_18:
Require Export GeoCoq.Elements.OriginalProofs.proposition_16.
Require Export GeoCoq.Elements.OriginalProofs.proposition_05.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleordertransitive.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_18 : 
   forall A B C, 
   Triangle A B C -> Lt A B A C ->
   LtA B C A A B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_20.
(* Elements.OriginalProofs.proposition_20:
Require Export GeoCoq.Elements.OriginalProofs.proposition_19.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_20 : 
   forall A B C, 
   Triangle A B C ->
   TG B A A C B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_21.
(* Elements.OriginalProofs.proposition_21:
Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.
Require Export GeoCoq.Elements.OriginalProofs.proposition_20.
Require Export GeoCoq.Elements.OriginalProofs.lemma_21helper.
Require Export GeoCoq.Elements.OriginalProofs.lemma_TTorder.
Require Export GeoCoq.Elements.OriginalProofs.lemma_TTflip.
Require Export GeoCoq.Elements.OriginalProofs.lemma_TTtransitive.
Require Export GeoCoq.Elements.OriginalProofs.lemma_TTflip2.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_21 : 
   forall A B C D E, 
   Triangle A B C -> BetS A E C -> BetS B D E ->
   TT B A A C B D D C /\ LtA B A C B D C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_22.
(* Elements.OriginalProofs.proposition_22:
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthannotequal.
Require Export GeoCoq.Elements.OriginalProofs.lemma_together.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ray5.
Require Export GeoCoq.Elements.OriginalProofs.lemma_subtractequals.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ondiameter.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma lemma_togethera
     : forall A B C D F G P Q a b c : Point,
       TG A a B b C c ->
       Cong D F A a ->
       Cong F G B b ->
       BetS D F G ->
       Cong P Q C c -> Lt P Q D G.

Lemma proposition_22 : 
   forall A B C E F a b c, 
   TG A a B b C c -> TG A a C c B b -> TG B b C c A a -> neq F E ->
   exists X Y, Cong F X B b /\ Cong F Y A a /\ Cong X Y C c /\ Out F E X /\ Triangle F X Y.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_23B.
(* Elements.OriginalProofs.proposition_23B:
Require Export GeoCoq.Elements.OriginalProofs.proposition_23.
Require Export GeoCoq.Elements.OriginalProofs.proposition_11B.
Require Export GeoCoq.Elements.OriginalProofs.lemma_Euclid4.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesflip.
Require Export GeoCoq.Elements.OriginalProofs.lemma_9_5.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_23B : 
   forall A B C D E P, 
   neq A B -> nCol D C E -> nCol A B P ->
   exists X Y, Out A B Y /\ CongA X A Y D C E /\ TS X A B P.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_23C.
(* Elements.OriginalProofs.proposition_23C:
Require Export GeoCoq.Elements.OriginalProofs.proposition_23B.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_23C : 
   forall A B C D E P, 
   neq A B -> nCol D C E -> nCol A B P ->
   exists X Y, Out A B Y /\ CongA X A Y D C E /\ OS X P A B.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_23.
(* Elements.OriginalProofs.proposition_23:
Require Export GeoCoq.Elements.OriginalProofs.proposition_20.
Require Export GeoCoq.Elements.OriginalProofs.lemma_TGsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_TGflip.
Require Export GeoCoq.Elements.OriginalProofs.proposition_22.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_23 : 
   forall A B C D E, 
   neq A B -> nCol D C E ->
   exists X Y, Out A B Y /\ CongA X A Y D C E.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_24.
(* Elements.OriginalProofs.proposition_24:
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesflip.
Require Export GeoCoq.Elements.OriginalProofs.proposition_19.
Require Export GeoCoq.Elements.OriginalProofs.lemma_lessthancongruence2.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_24 : 
   forall A B C D E F, 
   Triangle A B C -> Triangle D E F -> Cong A B D E -> Cong A C D F -> LtA E D F B A C ->
   Lt E F B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_25.
(* Elements.OriginalProofs.proposition_25:
Require Export GeoCoq.Elements.OriginalProofs.proposition_24.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy2.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_25 : 
   forall A B C D E F, 
   Triangle A B C -> Triangle D E F -> Cong A B D E -> Cong A C D F -> Lt E F B C ->
   LtA E D F B A C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_26A.
(* Elements.OriginalProofs.proposition_26A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesreflexive.
Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy1.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_26A : 
   forall A B C D E F, 
   Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong B C E F ->
   Cong A B D E /\ Cong A C D F /\ CongA B A C E D F.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_26B.
(* Elements.OriginalProofs.proposition_26B:
Require Export GeoCoq.Elements.OriginalProofs.lemma_26helper.
Require Export GeoCoq.Elements.OriginalProofs.lemma_trichotomy1.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_26B : 
   forall A B C D E F, 
   Triangle A B C -> Triangle D E F -> CongA A B C D E F -> CongA B C A E F D -> Cong A B D E ->
   Cong B C E F /\ Cong A C D F /\ CongA B A C E D F.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_27B.
(* Elements.OriginalProofs.proposition_27B:
Require Export GeoCoq.Elements.OriginalProofs.proposition_27.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelflip.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_27B : 
   forall A D E F, 
   CongA A E F E F D -> TS A E F D ->
   Par A E F D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_27.
(* Elements.OriginalProofs.proposition_27:
Require Export GeoCoq.Elements.OriginalProofs.lemma_equalanglesflip.
Require Export GeoCoq.Elements.OriginalProofs.proposition_16.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearbetween.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_27 : 
   forall A B C D E F, 
   BetS A E B -> BetS C F D -> CongA A E F E F D -> TS A E F D ->
   Par A B C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_28A.
(* Elements.OriginalProofs.proposition_28A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_27.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_28A : 
   forall A B C D E G H, 
   BetS A G B -> BetS C H D -> BetS E G H -> CongA E G B G H D -> OS B D G H ->
   Par A B C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_28B.
(* Elements.OriginalProofs.proposition_28B:
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplementsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_27.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_28B : 
   forall A B C D G H, 
   BetS A G B -> BetS C H D -> RT B G H G H D -> OS B D G H ->
   Par A B C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_28C.
(* Elements.OriginalProofs.proposition_28C:
Require Export GeoCoq.Elements.OriginalProofs.proposition_28B.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_28C : 
   forall B D G H, 
   RT B G H G H D -> OS B D G H ->
   Par G B H D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_29B.
(* Elements.OriginalProofs.proposition_29B:
Require Export GeoCoq.Elements.OriginalProofs.proposition_29.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_29B : 
   forall A D G H, 
   Par A G H D -> TS A G H D ->
   CongA A G H G H D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_29C.
(* Elements.OriginalProofs.proposition_29C:
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelNC.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_29C : 
   forall B D E G H, 
   Par G B H D -> OS B D G H -> BetS E G H ->
   CongA E G B G H D /\ RT B G H G H D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_29.
(* Elements.OriginalProofs.proposition_29:
Require Export GeoCoq.Elements.OriginalProofs.proposition_31.
Require Export GeoCoq.Elements.OriginalProofs.lemma_crossbar2.
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplementinequality.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angletrichotomy2.
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplementsymmetric.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_29 : 
   forall A B C D E G H, 
   Par A B C D -> BetS A G B -> BetS C H D -> BetS E G H -> TS A G H D ->
   CongA A G H G H D /\ CongA E G B G H D /\ RT B G H G H D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_30A.
(* Elements.OriginalProofs.proposition_30A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_30A : 
   forall A B C D E F G H K, 
   Par A B E F -> Par C D E F -> BetS G H K -> BetS A G B -> BetS E H F -> BetS C K D -> TS A G H F -> TS F H K C ->
   Par A B C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_30B.
(* Elements.OriginalProofs.proposition_30B:
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29.
Require Export GeoCoq.Elements.OriginalProofs.proposition_28A.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_30B : 
   forall A B C D E F G H K, 
   Par A B E F -> Par C D E F -> BetS G K H -> BetS A G B -> BetS E H F -> BetS C K D -> TS A G H F -> TS C K H F ->
   Par A B C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_30.
(* Elements.OriginalProofs.proposition_30:
Require Export GeoCoq.Elements.OriginalProofs.lemma_30helper.
Require Export GeoCoq.Elements.OriginalProofs.lemma_crossimpliesopposite.
Require Export GeoCoq.Elements.OriginalProofs.proposition_30A.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma parnotmeet: forall A B C D,
 Par A B C D -> ~ Meet A B C D.

Lemma proposition_30 : 
   forall A B C D E F G H K, 
   Par A B E F -> Par C D E F -> BetS G H K -> Col A B G -> Col E F H -> Col C D K -> neq A G -> neq E H -> neq C K ->
   Par A B C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_31short.
(* Elements.OriginalProofs.proposition_31short:
Require Export GeoCoq.Elements.OriginalProofs.proposition_31.

Section Euclid.

Context `{Ax:euclidean_neutral_ruler_compass}.

Lemma proposition_31short : 
   forall A B C D, 
   BetS B D C -> nCol B C A ->
   exists X Y Z, BetS X A Y /\ CongA X A D A D C /\ Par X Y B C /\ BetS X Z C /\ BetS A Z D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_31.
(* Elements.OriginalProofs.proposition_31:
Require Export GeoCoq.Elements.OriginalProofs.lemma_NChelper.
Require Export GeoCoq.Elements.OriginalProofs.lemma_pointreflectionisometry.
Require Export GeoCoq.Elements.OriginalProofs.lemma_oppositesidesymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_27.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelflip.

Section Euclid.
Context `{Ax:euclidean_neutral_ruler_compass}.
Lemma proposition_31 : 
   forall A B C D, 
   BetS B D C -> nCol B C A ->
   exists X Y Z, BetS X A Y /\ CongA Y A D A D B /\ CongA Y A D B D A /\ CongA D A Y B D A /\ CongA X A D A D C /\ CongA X A D C D A /\ CongA D A X C D A /\ Par X Y B C /\ Cong X A D C /\ Cong A Y B D /\ Cong A Z Z D /\ Cong X Z Z C /\ Cong B Z Z Y /\ BetS X Z C /\ BetS B Z Y /\ BetS A Z D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_32.
(* Elements.OriginalProofs.proposition_32:
Require Export GeoCoq.Elements.OriginalProofs.lemma_NCdistinct.
Require Export GeoCoq.Elements.OriginalProofs.proposition_31short.
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_32 : 
   forall A B C D, 
   Triangle A B C -> BetS B C D ->
   SumA C A B A B C A C D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_33B.
(* Elements.OriginalProofs.proposition_33B:
Require Export GeoCoq.Elements.OriginalProofs.lemma_samenotopposite.
Require Export GeoCoq.Elements.OriginalProofs.lemma_crisscross.
Require Export GeoCoq.Elements.OriginalProofs.proposition_33.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_33B : 
   forall A B C D, 
   Par A B C D -> Cong A B C D -> OS A C B D ->
   Par A C B D /\ Cong A C B D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_33.
(* Elements.OriginalProofs.proposition_33:
Require Export GeoCoq.Elements.OriginalProofs.proposition_29B.
Require Export GeoCoq.Elements.OriginalProofs.proposition_27B.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_33 : 
   forall A B C D M, 
   Par A B C D -> Cong A B C D -> BetS A M D -> BetS B M C ->
   Par A C B D /\ Cong A C B D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_34.
(* Elements.OriginalProofs.proposition_34:
Require Export GeoCoq.Elements.OriginalProofs.lemma_diagonalsmeet.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29B.
Require Export GeoCoq.Elements.OriginalProofs.proposition_26A.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_34 : 
   forall A B C D, 
   PG A C D B ->
   Cong A B C D /\ Cong A C B D /\ CongA C A B B D C /\ CongA A B D D C A /\ Cong_3 C A B B D C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_35A.
(* Elements.OriginalProofs.proposition_35A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_35helper.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29C.
Require Export GeoCoq.Elements.OriginalProofs.lemma_ETreflexive.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGrotate.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGflip.
Require Export GeoCoq.Elements.OriginalProofs.lemma_trapezoiddiagonals.
Require Export GeoCoq.Elements.OriginalProofs.lemma_EFreflexive.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_35A : 
   forall A B C D E F, 
   PG A B C D -> PG E B C F -> BetS A D F -> Col A E F ->
   EF A B C D E B C F.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_35.
(* Elements.OriginalProofs.proposition_35:
Require Export GeoCoq.Elements.OriginalProofs.proposition_35A.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelPasch.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_35 : 
   forall A B C D E F, 
   PG A B C D -> PG E B C F -> Col A D E -> Col A D F ->
   EF A B C D E B C F.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_36.
(* Elements.OriginalProofs.proposition_36:
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel2.
Require Export GeoCoq.Elements.OriginalProofs.lemma_crisscross.
Require Export GeoCoq.Elements.OriginalProofs.proposition_33.
Require Export GeoCoq.Elements.OriginalProofs.proposition_35.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_36 : 
   forall A B C D E F G H, 
   PG A B C D -> PG E F G H -> Col A D E -> Col A D H -> Col B C F -> Col B C G -> Cong B C F G ->
   EF A B C D E F G H.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_36A.
(* Elements.OriginalProofs.proposition_36A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_collinearparallel2.
Require Export GeoCoq.Elements.OriginalProofs.proposition_33.
Require Export GeoCoq.Elements.OriginalProofs.proposition_35.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGsymmetric.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_36A : 
   forall A B C D E F G H M, 
   PG A B C D -> PG E F G H -> Col A D E -> Col A D H -> Col B C F -> Col B C G -> Cong B C F G -> BetS B M H -> BetS C M E ->
   EF A B C D E F G H.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_37.
(* Elements.OriginalProofs.proposition_37:
Require Export GeoCoq.Elements.OriginalProofs.lemma_triangletoparallelogram.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGrotate.
Require Export GeoCoq.Elements.OriginalProofs.proposition_35.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_37 : 
   forall A B C D, 
   Par A D B C ->
   ET A B C D B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_38.
(* Elements.OriginalProofs.proposition_38:
Require Export GeoCoq.Elements.OriginalProofs.lemma_triangletoparallelogram.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGrotate.
Require Export GeoCoq.Elements.OriginalProofs.proposition_36.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_38 : 
   forall A B C D E F P Q, 
   Par P Q B C -> Col P Q A -> Col P Q D -> Cong B C E F -> Col B C E -> Col B C F ->
   ET A B C D E F.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_39A.
(* Elements.OriginalProofs.proposition_39A:
Require Export GeoCoq.Elements.OriginalProofs.proposition_37.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_39A : 
   forall A B C D M, 
   Triangle A B C -> ET A B C D B C -> BetS A M C -> Out B D M ->
   Par A D B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_40.
(* Elements.OriginalProofs.proposition_40:
Require Export GeoCoq.Elements.OriginalProofs.proposition_31short.
Require Export GeoCoq.Elements.OriginalProofs.proposition_38.
Require Export GeoCoq.Elements.OriginalProofs.proposition_39.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_40 : 
   forall A B C D E H, 
   Cong B C H E -> ET A B C D H E -> Triangle A B C -> Triangle D H E -> Col B C H -> Col B C E -> OS A D B C -> neq A D ->
   Par A D B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_41.
(* Elements.OriginalProofs.proposition_41:
Require Export GeoCoq.Elements.OriginalProofs.proposition_37.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_41 : 
   forall A B C D E, 
   PG A B C D -> Col A D E ->
   ET A B C E B C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_42B.
(* Elements.OriginalProofs.proposition_42B:
Require Export GeoCoq.Elements.OriginalProofs.proposition_42.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesideflip.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_42B : 
   forall B C D E J K R a b c e, 
   Triangle a b c -> Midpoint b e c -> nCol J D K -> Midpoint B E C -> Cong E C e c -> nCol R E C ->
   exists X Z, PG X E C Z /\ EF a b e c X E C Z /\ CongA C E X J D K /\ OS R X E C.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_42.
(* Elements.OriginalProofs.proposition_42:
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidecollinear.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGflip.
Require Export GeoCoq.Elements.OriginalProofs.proposition_41.
Require Export GeoCoq.Elements.OriginalProofs.proposition_38.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_42 : 
   forall A B C D E J K, 
   Triangle A B C -> nCol J D K -> Midpoint B E C ->
   exists X Z, PG X E C Z /\ EF A B E C X E C Z /\ CongA C E X J D K /\ Col X Z A.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_43B.
(* Elements.OriginalProofs.proposition_43B:
Require Export GeoCoq.Elements.OriginalProofs.lemma_paralleldef2B.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesideflip.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29C.
Require Export GeoCoq.Elements.OriginalProofs.lemma_supplements2.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidecollinear.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesidetransitive.
Require Export GeoCoq.Elements.OriginalProofs.proposition_28D.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_43B : 
   forall A B C D E F G H K, 
   PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> PG E A H K -> PG G K F C ->
   PG E K G B.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_43.
(* Elements.OriginalProofs.proposition_43:
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGflip.
Require Export GeoCoq.Elements.OriginalProofs.proposition_34.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_43 : 
   forall A B C D E F G H K, 
   PG A B C D -> BetS A H D -> BetS A E B -> BetS D F C -> BetS B G C -> BetS A K C -> PG E A H K -> PG G K F C ->
   EF K G B E D F K H.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_44A.
(* Elements.OriginalProofs.proposition_44A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGrotate.
Require Export GeoCoq.Elements.OriginalProofs.proposition_33B.
Require Export GeoCoq.Elements.OriginalProofs.proposition_30.
Require Export GeoCoq.Elements.OriginalProofs.lemma_diagonalsbisect.
Require Export GeoCoq.Elements.OriginalProofs.lemma_triangletoparallelogram.
Require Export GeoCoq.Elements.OriginalProofs.lemma_parallelbetween.
Require Export GeoCoq.Elements.OriginalProofs.proposition_43.
Require Export GeoCoq.Elements.OriginalProofs.proposition_43B.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_44A : 
   forall A B D E F G J N, 
   PG B E F G -> CongA E B G J D N -> BetS A B E ->
   exists X Y, PG A B X Y /\ CongA A B X J D N /\ EF B E F G Y X B A /\ BetS G B X.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_44.
(* Elements.OriginalProofs.proposition_44:
Require Export GeoCoq.Elements.OriginalProofs.proposition_42B.
Require Export GeoCoq.Elements.OriginalProofs.proposition_44A.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_44 : 
   forall A B D J N R a b c, 
   Triangle a b c -> nCol J D N -> nCol A B R ->
   exists X Y Z, PG A B X Y /\ CongA A B X J D N /\ EF a b Z c A B X Y /\ Midpoint b Z c /\ TS X A B R.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_45.
(* Elements.OriginalProofs.proposition_45:
Require Export GeoCoq.Elements.OriginalProofs.proposition_44.
Require Export GeoCoq.Elements.OriginalProofs.lemma_RTcongruence.
Require Export GeoCoq.Elements.OriginalProofs.lemma_RTsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.proposition_14.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_45 : 
   forall A B C D E J K N O R S, 
   nCol J E N -> nCol A B D -> nCol C B D -> BetS A O C -> BetS B O D -> neq R K -> nCol K R S ->
   exists X Z U, PG X K Z U /\ CongA X K Z J E N /\ EF X K Z U A B C D /\ Out K R Z /\ OS X S K Z.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_46.
(* Elements.OriginalProofs.proposition_46:
Require Export GeoCoq.Elements.OriginalProofs.proposition_31short.
Require Export GeoCoq.Elements.OriginalProofs.lemma_triangletoparallelogram.
Require Export GeoCoq.Elements.OriginalProofs.lemma_equaltorightisright.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samenotopposite.
Require Export GeoCoq.Elements.OriginalProofs.proposition_34.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGsymmetric.
Require Export GeoCoq.Elements.OriginalProofs.lemma_PGflip.

Section Euclid.

Context `{Ax:euclidean_euclidean}.

Lemma proposition_46 : 
   forall A B R, 
   neq A B -> nCol A B R ->
   exists X Y, SQ A B X Y /\ TS Y A B R /\ PG A B X Y.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_47A.
(* Elements.OriginalProofs.proposition_47A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_squareparallelogram.
Require Export GeoCoq.Elements.OriginalProofs.lemma_samesideflip.
Require Export GeoCoq.Elements.OriginalProofs.lemma_erectedperpendicularunique.
Require Export GeoCoq.Elements.OriginalProofs.lemma_twoperpsparallel.
Require Export GeoCoq.Elements.OriginalProofs.proposition_29C.
Require Export GeoCoq.Elements.OriginalProofs.lemma_altitudeofrighttriangle.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_47A : 
   forall A B C D E, 
   Triangle A B C -> Per B A C -> SQ B C E D -> TS D C B A ->
   exists X Y, PG B X Y D /\ BetS B X C /\ PG X C E Y /\ BetS D Y E /\ BetS Y X A /\ Per D Y A.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_47B.
(* Elements.OriginalProofs.proposition_47B:
Require Export GeoCoq.Elements.OriginalProofs.proposition_47A.
Require Export GeoCoq.Elements.OriginalProofs.lemma_angleaddition.
Require Export GeoCoq.Elements.OriginalProofs.proposition_41.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_47B : 
   forall A B C D E F G, 
   Triangle A B C -> Per B A C -> SQ A B F G -> TS G B A C -> SQ B C E D -> TS D C B A ->
   exists X Y, PG B X Y D /\ BetS B X C /\ PG X C E Y /\ BetS D Y E /\ BetS Y X A /\ Per D Y A /\ EF A B F G B X Y D.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_48A.
(* Elements.OriginalProofs.proposition_48A:
Require Export GeoCoq.Elements.OriginalProofs.lemma_squarerectangle.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_48A : 
   forall A B C D a b c d, 
   SQ A B C D -> SQ a b c d -> EF A B C D a b c d ->
   Cong A B a b.

End Euclid. *)
Require Export Elements.OriginalProofs.proposition_48.
(* Elements.OriginalProofs.proposition_48:
Require Export GeoCoq.Elements.OriginalProofs.proposition_47.
Require Export GeoCoq.Elements.OriginalProofs.lemma_squaresequal.
Require Export GeoCoq.Elements.OriginalProofs.lemma_rectanglerotate.
Require Export GeoCoq.Elements.OriginalProofs.lemma_paste5.
Require Export GeoCoq.Elements.OriginalProofs.proposition_48A.
Require Export GeoCoq.Elements.OriginalProofs.proposition_08.

Section Euclid.

Context `{Ax:area}.

Lemma proposition_48 : 
   forall A B C D E F G H K L M, 
   Triangle A B C -> SQ A B F G -> SQ A C K H -> SQ B C E D -> BetS B M C -> BetS E L D -> EF A B F G B M L D -> EF A C K H M C E L -> RE M C E L ->
   Per B A C.

End Euclid. *)

