Require Import GeoCoq.Axioms.tarski_axioms.
(* GeoCoq.Axioms.tarski_axioms:
Require Export GeoCoq.Utils.general_tactics.

Class Tarski_neutral_dimensionless :=
{
 Tpoint : Type;
 Bet : Tpoint -> Tpoint -> Tpoint -> Prop;
 Cong : Tpoint -> Tpoint -> Tpoint -> Tpoint -> Prop;
 cong_pseudo_reflexivity : forall A B, Cong A B B A;
 cong_inner_transitivity : forall A B C D E F,
   Cong A B C D -> Cong A B E F -> Cong C D E F;
 cong_identity : forall A B C, Cong A B C C -> A = B;
 segment_construction : forall A B C D,
   exists E, Bet A B E /\ Cong B E C D;
 five_segment : forall A A' B B' C C' D D',
   Cong A B A' B' ->
   Cong B C B' C' ->
   Cong A D A' D' ->
   Cong B D B' D' ->
   Bet A B C -> Bet A' B' C' -> A <> B -> Cong C D C' D';
 between_identity : forall A B, Bet A B A -> A = B;
 inner_pasch : forall A B C P Q,
   Bet A P C -> Bet B Q C ->
   exists X, Bet P X B /\ Bet Q X A;
 PA : Tpoint;
 PB : Tpoint;
 PC : Tpoint;
 lower_dim : ~ (Bet PA PB PC \/ Bet PB PC PA \/ Bet PC PA PB)
}.

Class Tarski_neutral_dimensionless_with_decidable_point_equality
 `(Tn : Tarski_neutral_dimensionless) :=
{
 point_equality_decidability : forall A B : Tpoint, A = B \/ ~ A = B
}.

Class Tarski_2D
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 upper_dim : forall A B C P Q,
   P <> Q -> Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->
   (Bet A B C \/ Bet B C A \/ Bet C A B)
}.

Class Tarski_3D
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 S1 : Tpoint;
 S2 : Tpoint;
 S3 : Tpoint;
 S4 : Tpoint;
 lower_dim_3 : ~ exists X,
   (Bet S1 S2 X \/ Bet S2 X S1 \/ Bet X S1 S2) /\ (Bet S3 S4 X \/ Bet S4 X S3 \/ Bet X S3 S4) \/
   (Bet S1 S3 X \/ Bet S3 X S1 \/ Bet X S1 S3) /\ (Bet S2 S4 X \/ Bet S4 X S2 \/ Bet X S2 S4) \/
   (Bet S1 S4 X \/ Bet S4 X S1 \/ Bet X S1 S4) /\ (Bet S2 S3 X \/ Bet S3 X S2 \/ Bet X S2 S3);
 upper_dim_3 : forall A B C P Q R,
   P <> Q -> Q <> R -> P <> R ->
   Cong A P A Q -> Cong B P B Q -> Cong C P C Q ->
   Cong A P A R -> Cong B P B R -> Cong C P C R ->
   (Bet A B C \/ Bet B C A \/ Bet C A B)
}.

Class Tarski_euclidean
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 euclid : forall A B C D T,
   Bet A D T -> Bet B D C -> A<>D ->
   exists X, exists Y,
   Bet A B X /\ Bet A C Y /\ Bet X T Y
}.

Class Tarski_ruler_and_compass
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 circle_circle_continuity : forall A B C D B' D',
   Cong A B' A B -> Cong C D' C D ->
   Bet A D' B -> Bet C B' D ->
   exists Z, Cong A Z A B /\ Cong C Z C D
}.

Class Tarski_continuous
 `(TnEQD : Tarski_neutral_dimensionless_with_decidable_point_equality) :=
{
 continuity : forall (Alpha Beta : Tpoint -> Prop),
   (exists A, forall X Y, Alpha X -> Beta Y -> Bet A X Y) ->
   (exists B, forall X Y, Alpha X -> Beta Y -> Bet X B Y)
}. *)

Require Import GeoCoq.Axioms.gupta_inspired_variant_axioms.
(* GeoCoq.Axioms.gupta_inspired_variant_axioms:
Class Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality := {
 TpointG : Type;
 BetG : TpointG -> TpointG -> TpointG -> Prop;
 CongG : TpointG -> TpointG -> TpointG -> TpointG -> Prop;
 point_equality_decidabilityG : forall A B : TpointG, A = B \/ ~ A = B;
 cong_pseudo_reflexivityG : forall A B, CongG A B B A;
 cong_inner_transitivityG : forall A B C D E F,
   CongG A B E F -> CongG C D E F -> CongG A B C D;
 cong_identityG : forall A B C, CongG A B C C -> A = B;
 segment_constructionG : forall A B C D,
   exists E, BetG A B E /\ CongG B E C D;
 five_segmentG : forall A A' B B' C C' D D',
   CongG A B A' B' -> CongG B C B' C' -> CongG A D A' D' -> CongG B D B' D' ->
   BetG A B C -> BetG A' B' C' -> A <> B -> CongG C D C' D';
 bet_symmetryG : forall A B C, BetG A B C -> BetG C B A;
 bet_inner_transitivityG : forall A B C D, BetG A B D -> BetG B C D -> BetG A B C;
 inner_paschG : forall A B C P Q,
   BetG A P C -> BetG B Q C ->
   A <> P -> P <> C -> B <> Q -> Q <> C ->
   ~ (BetG A B C \/ BetG B C A \/ BetG C A B) ->
   exists x, BetG P x B /\ BetG Q x A;
 GPA : TpointG;
 GPB : TpointG;
 GPC : TpointG;
 lower_dimG : ~ (BetG GPA GPB GPC \/ BetG GPB GPC GPA \/ BetG GPC GPA GPB)
}.

Class Gupta_inspired_variant_of_Tarski_2D `(TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality) := {
 upper_dimG : forall A B C P Q,
   P <> Q -> A <> B -> A <> C -> B <> C ->
   CongG A P A Q -> CongG B P B Q -> CongG C P C Q ->
   (BetG A B C \/ BetG B C A \/ BetG C A B)
}.

Class Gupta_inspired_variant_of_Tarski_euclidean `(TnG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality) := {
 euclidG : forall A B C D T,
   BetG A D T -> BetG B D C ->
   B <> D -> D <> C ->
   ~ (BetG A B C \/ BetG B C A \/ BetG C A B) ->
   exists x, exists y, BetG A B x /\ BetG A C y /\ BetG x T y
}. *)

Require Import GeoCoq.Tarski_dev.Ch05_bet_le.
(* GeoCoq.Tarski_dev.Ch05_bet_le:
Require Export GeoCoq.Meta_theory.Decidability.equivalence_between_decidability_properties_of_basic_relations.

Section T5.

Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.

Lemma l5_1 : forall A B C D,
  A<>B -> Bet A B C -> Bet A B D -> Bet A C D \/ Bet A D C.

Lemma l5_2 : forall A B C D,
  A<>B -> Bet A B C -> Bet A B D -> Bet B C D \/ Bet B D C.

Lemma segment_construction_2 :
  forall A Q B C, A<>Q -> exists X, (Bet Q A X \/ Bet Q X A) /\ Cong Q X B C.

Lemma l5_3 : forall A B C D,
 Bet A B D -> Bet A C D -> Bet A B C \/ Bet A C B.

Lemma bet3__bet : forall A B C D E, Bet A B E -> Bet A D E -> Bet B C D -> Bet A C E.

Lemma le_bet : forall A B C D, Le C D A B -> exists X, Bet A X B /\ Cong A X C D.

Lemma l5_5_1 : forall A B C D,
  Le A B C D -> exists x, Bet A B x /\ Cong A x C D.

Lemma l5_5_2 : forall A B C D,
 (exists x, Bet A B x /\ Cong A x C D) -> Le A B C D.

Lemma l5_6 : forall A B C D A' B' C' D',
 Le A B C D -> Cong A B A' B' -> Cong C D C' D' -> Le A' B' C' D'.

Lemma le_reflexivity : forall A B, Le A B A B.

Lemma le_transitivity : forall A B C D E F, Le A B C D -> Le C D E F -> Le A B E F.

Lemma between_cong : forall A B C, Bet A C B -> Cong A C A B -> C=B.

Lemma cong3_symmetry : forall A B C A' B' C' : Tpoint , Cong_3 A B C A' B' C' -> Cong_3 A' B' C' A B C.

Lemma between_cong_2 : forall A B D E, Bet A D B -> Bet A E B -> Cong A D A E -> D = E.

Lemma between_cong_3 :
  forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.

Lemma le_anti_symmetry : forall A B C D, Le A B C D -> Le C D A B -> Cong A B C D.

Lemma cong_dec : forall A B C D,
  Cong A B C D \/ ~ Cong A B C D.

Lemma bet_dec : forall A B C, Bet A B C  \/  ~ Bet A B C.

Lemma col_dec : forall A B C, Col A B C \/ ~ Col A B C.

Lemma le_trivial : forall A C D, Le A A C D .

Lemma le_cases : forall A B C D, Le A B C D \/ Le C D A B.

Lemma le_zero : forall A B C, Le A B C C -> A=B.

Lemma le_diff : forall A B C D, A <> B -> Le A B C D -> C <> D.

Lemma lt_diff : forall A B C D, Lt A B C D -> C <> D.

Lemma bet_cong_eq :
 forall A B C D,
  Bet A B C ->
  Bet A C D ->
  Cong B C A D ->
  C = D /\ A = B.

Lemma cong__le : forall A B C D, Cong A B C D -> Le A B C D.

Lemma cong__le3412 : forall A B C D, Cong A B C D -> Le C D A B.

Lemma le1221 : forall A B, Le A B B A.

Lemma le_left_comm : forall A B C D, Le A B C D -> Le B A C D.

Lemma le_right_comm : forall A B C D, Le A B C D -> Le A B D C.

Lemma le_comm : forall A B C D, Le A B C D -> Le B A D C.

Lemma ge_left_comm : forall A B C D, Ge A B C D -> Ge B A C D.

Lemma ge_right_comm : forall A B C D, Ge A B C D -> Ge A B D C.

Lemma ge_comm :  forall A B C D, Ge A B C D -> Ge B A D C.

Lemma lt_right_comm : forall A B C D, Lt A B C D -> Lt A B D C.

Lemma lt_left_comm : forall A B  C D, Lt A B C D -> Lt B A C D.

Lemma lt_comm : forall A B  C D, Lt A B C D -> Lt B A D C.

Lemma gt_left_comm : forall A B C D, Gt A B C D -> Gt B A C D.

Lemma gt_right_comm : forall A B C D, Gt A B C D -> Gt A B D C.

Lemma gt_comm : forall A B C D, Gt A B C D -> Gt B A D C.

Lemma cong2_lt__lt : forall A B C D A' B' C' D',
 Lt A B C D -> Cong A B A' B' -> Cong C D C' D' -> Lt A' B' C' D'.

Lemma fourth_point : forall A B C P, A <> B -> B <> C -> Col A B P -> Bet A B C ->
  Bet P A B \/ Bet A P B \/ Bet B P C \/ Bet B C P.

Lemma third_point : forall A B P, Col A B P -> Bet P A B \/ Bet A P B \/ Bet A B P.

Lemma l5_12_a : forall A B C, Bet A B C -> Le A B A C /\ Le B C A C.

Lemma bet__le1213 : forall A B C, Bet A B C -> Le A B A C.

Lemma bet__le2313 : forall A B C, Bet A B C -> Le B C A C.

Lemma bet__lt1213 : forall A B C, B <> C -> Bet A B C -> Lt A B A C.

Lemma bet__lt2313 : forall A B C, A <> B -> Bet A B C -> Lt B C A C.

Lemma l5_12_b : forall A B C, Col A B C -> Le A B A C -> Le B C A C -> Bet A B C.

Lemma bet_le_eq : forall A B C, Bet A B C -> Le A C B C -> A = B.

Lemma or_lt_cong_gt : forall A B C D, Lt A B C D \/ Gt A B C D \/ Cong A B C D.

Lemma lt__le : forall A B C D, Lt A B C D -> Le A B C D.

Lemma le1234_lt__lt : forall A B C D E F, Le A B C D -> Lt C D E F -> Lt A B E F.

Lemma le3456_lt__lt : forall A B C D E F, Lt A B C D -> Le C D E F -> Lt A B E F.

Lemma lt_transitivity : forall A B C D E F, Lt A B C D -> Lt C D E F -> Lt A B E F.

Lemma not_and_lt : forall A B C D, ~ (Lt A B C D /\ Lt C D A B).

Lemma nlt : forall A B, ~ Lt A B A B.

Lemma le__nlt : forall A B C D, Le A B C D -> ~ Lt C D A B.

Lemma cong__nlt : forall A B C D,
 Cong A B C D -> ~ Lt A B C D.

Lemma nlt__le : forall A B C D, ~ Lt A B C D -> Le C D A B.

Lemma lt__nle : forall A B C D, Lt A B C D -> ~ Le C D A B.

Lemma nle__lt : forall A B C D, ~ Le A B C D -> Lt C D A B.

Lemma lt1123 : forall A B C, B<>C -> Lt A A B C.

Lemma bet2_le2__le : forall O o A B a b, Bet a o b -> Bet A O B -> Le o a O A -> Le o b O B -> Le a b A B.

End T5.

Hint Resolve le_reflexivity le_anti_symmetry le_trivial le_zero cong__le cong__le3412
             le1221 le_left_comm le_right_comm le_comm lt__le bet__le1213 bet__le2313
             lt_left_comm lt_right_comm lt_comm bet__lt1213 bet__lt2313 lt1123 : le.

Ltac Le := auto with le. *)



Section Tarski_neutral_dimensionless_to_Gupta_inspired_variant_of_Tarski_neutral_dimensionless.



Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.



Lemma cong_inner_transitivity' : forall A B C D E F, Cong A B E F -> Cong C D E F -> Cong A B C D.

Proof.

  intros A B C D E F H1 H2; apply (cong_inner_transitivity E F); apply cong_symmetry; assumption.

Qed.



Lemma inner_pasch' : forall A B C P Q,

  Bet A P C -> Bet B Q C -> A <> P -> P <> C -> B <> Q -> Q <> C ->

  ~ (Bet A B C \/ Bet B C A \/ Bet C A B) ->

  exists x : Tpoint, Bet P x B /\ Bet Q x A.

Proof.

  intros A B C P Q; intros; apply inner_pasch with C; assumption.

Qed.



Instance T_to_TG : Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality.

Proof.

exact (Build_Gupta_inspired_variant_of_Tarski_neutral_dimensionless_with_decidable_point_equality

  Tpoint Bet Cong eq_dec_points

  cong_pseudo_reflexivity cong_inner_transitivity' cong_identity

  segment_construction five_segment between_symmetry between_inner_transitivity inner_pasch'

  PA PB PC lower_dim).

Defined.



End Tarski_neutral_dimensionless_to_Gupta_inspired_variant_of_Tarski_neutral_dimensionless.



Section Tarski_2D_to_Gupta_inspired_variant_of_Tarski_2D.



Context `{T2D:Tarski_2D}.



Instance T2D_to_TG2D : Gupta_inspired_variant_of_Tarski_2D T_to_TG.

Proof.

  split; intros A B C P Q HPQ HAB HAC HBC; apply upper_dim, HPQ.

Defined.



End Tarski_2D_to_Gupta_inspired_variant_of_Tarski_2D.



Section Tarski_euclidean_to_Gupta_inspired_variant_of_Tarski_euclidean.



Context `{TE:Tarski_euclidean}.



Instance T_euclidean_to_TG_euclidean : Gupta_inspired_variant_of_Tarski_euclidean T_to_TG.

Proof.

  split; intros A B C D T H1 H2 HBD HDC HNCol.

  assert (A <> D) by (intro; subst; apply HNCol; right; right; apply between_symmetry, H2).

  apply euclid with D; assumption.

Defined.



End Tarski_euclidean_to_Gupta_inspired_variant_of_Tarski_euclidean.
