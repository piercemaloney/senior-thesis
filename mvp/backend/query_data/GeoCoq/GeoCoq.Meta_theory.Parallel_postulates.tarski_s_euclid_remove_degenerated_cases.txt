Require Import GeoCoq.Axioms.parallel_postulates.
(* GeoCoq.Axioms.parallel_postulates:
Require Import GeoCoq.Tarski_dev.Definitions.

Section Euclid_def.

Context `{Tn:Tarski_neutral_dimensionless}.

Definition decidability_of_parallelism := forall A B C D,
  Par A B C D \/ ~ Par A B C D.

Definition decidability_of_not_intersection := forall A B C D,
  ~ (exists I, Col I A B /\ Col I C D) \/
  ~ ~ (exists I, Col I A B /\ Col I C D).

Definition decidability_of_intersection := forall A B C D,
  (exists I, Col I A B /\ Col I C D) \/
  ~ (exists I, Col I A B /\ Col I C D).

Definition tarski_s_parallel_postulate := forall A B C D T,
  Bet A D T -> Bet B D C -> A <> D ->
  exists X Y, Bet A B X /\ Bet A C Y /\ Bet X T Y.

Definition playfair_s_postulate := forall A1 A2 B1 B2 C1 C2 P,
  Par A1 A2 B1 B2 -> Col P B1 B2 ->
  Par A1 A2 C1 C2 -> Col P C1 C2 ->
  Col C1 B1 B2 /\ Col C2 B1 B2.

Definition triangle_postulate := forall A B C D E F,
  TriSumA A B C D E F -> Bet D E F.

Definition bachmann_s_lotschnittaxiom := forall P Q R P1 R1,
  P <> Q -> Q <> R -> Per P Q R -> Per Q P P1 -> Per Q R R1 ->
  Coplanar P Q R P1 -> Coplanar P Q R R1 ->
  exists S, Col P P1 S /\ Col R R1 S.

Definition postulate_of_transitivity_of_parallelism := forall A1 A2 B1 B2 C1 C2,
  Par A1 A2 B1 B2 -> Par B1 B2 C1 C2 ->
  Par A1 A2 C1 C2.

Definition midpoint_converse_postulate := forall A B C P Q,
  ~ Col A B C ->
  Midpoint P B C -> Par A B Q P -> Col A C Q ->
  Midpoint Q A C.

Definition alternate_interior_angles_postulate := forall A B C D,
  TS A C B D -> Par A B C D ->
  CongA B A C D C A.

Definition consecutive_interior_angles_postulate := forall A B C D,
  OS B C A D -> Par A B C D -> SuppA A B C B C D.

Definition perpendicular_transversal_postulate := forall A B C D P Q,
  Par A B C D -> Perp A B P Q -> Coplanar C D P Q ->
  Perp C D P Q.

Definition postulate_of_parallelism_of_perpendicular_transversals :=
  forall A1 A2 B1 B2 C1 C2 D1 D2,
    Par A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 ->
    Coplanar A1 A2 C1 D1 -> Coplanar A1 A2 C1 D2 ->
    Coplanar A1 A2 C2 D1 -> Coplanar A1 A2 C2 D2 ->
    Par C1 C2 D1 D2.

Definition universal_posidonius_postulate := forall A1 A2 A3 A4 B1 B2 B3 B4,
  Par A1 A2 B1 B2 ->
  Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 ->
  Col A1 A2 A4 -> Col B1 B2 B4 -> Perp A1 A2 A4 B4 ->
  Cong A3 B3 A4 B4.

Definition alternative_playfair_s_postulate := forall A1 A2 B1 B2 C1 C2 P,
  Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 ->
  Par A1 A2 C1 C2 -> Col P C1 C2 ->
  Col C1 B1 B2 /\ Col C2 B1 B2.

Definition proclus_postulate := forall A B C D P Q,
  Par A B C D -> Col A B P -> ~ Col A B Q -> Coplanar C D P Q ->
  exists Y, Col P Q Y /\ Col C D Y.

Definition alternative_proclus_postulate := forall A B C D P Q,
  Perp2 A B C D P -> ~ Col C D P -> Coplanar A B C D ->
  Col A B P -> ~ Col A B Q -> Coplanar C D P Q ->
  exists Y, Col P Q Y /\ Col C D Y.

Definition triangle_circumscription_principle := forall A B C,
  ~ Col A B C ->
  exists CC, Cong A CC B CC /\ Cong A CC C CC /\ Coplanar A B C CC.

Definition inverse_projection_postulate := forall A B C P Q,
  Acute A B C ->
  Out B A P -> P <> Q -> Per B P Q -> Coplanar A B C Q ->
  exists Y, Out B C Y /\ Col P Q Y.

Definition euclid_5 := forall P Q R S T U,
  BetS P T Q -> BetS R T S -> BetS Q U R -> ~ Col P Q S ->
  Cong P T Q T -> Cong R T S T ->
  exists I, BetS S Q I /\ BetS P U I.

Definition strong_parallel_postulate :=  forall P Q R S T U,
  BetS P T Q -> BetS R T S -> ~ Col P R U ->
  Coplanar P Q R U ->
  Cong P T Q T -> Cong R T S T ->
  exists I, Col S Q I /\ Col P U I.

Definition alternative_strong_parallel_postulate := forall A B C D P Q R,
  OS B C A D -> SumA A B C B C D P Q R -> ~ Bet P Q R ->
  exists Y, Col B A Y /\ Col C D Y.

Definition euclid_s_parallel_postulate := forall A B C D P Q R,
  OS B C A D -> SAMS A B C B C D -> SumA A B C B C D P Q R -> ~ Bet P Q R ->
  exists Y, Out B A Y /\ Out C D Y.

Definition postulate_of_existence_of_a_triangle_whose_angles_sum_to_two_rights :=
  exists A B C D E F, ~ Col A B C /\ TriSumA A B C D E F /\ Bet D E F.

Definition posidonius_postulate :=
  exists A1 A2 B1 B2,
    ~ Col A1 A2 B1 /\ B1 <> B2 /\ Coplanar A1 A2 B1 B2 /\
    forall A3 A4 B3 B4,
      Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 ->
      Col A1 A2 A4 -> Col B1 B2 B4 -> Perp A1 A2 A4 B4 ->
      Cong A3 B3 A4 B4.

Definition postulate_of_existence_of_similar_triangles :=
  exists A B C D E F,
    ~ Col A B C /\ ~ Cong A B D E /\
    CongA A B C D E F /\ CongA B C A E F D /\ CongA C A B F D E.

Definition thales_postulate := forall A B C M,
  ~ Col A B C -> Midpoint M A B -> Cong M A M C ->
  Per A C B.

Definition thales_converse_postulate := forall A B C M,
  ~ Col A B C -> Midpoint M A B -> Per A C B ->
  Cong M A M C.

Definition existential_thales_postulate :=
  exists A B C M, ~ Col A B C /\ Midpoint M A B /\ Cong M A M C /\ Per A C B.

Definition postulate_of_right_saccheri_quadrilaterals := forall A B C D,
  Saccheri A B C D -> Per A B C.

Definition postulate_of_existence_of_a_right_saccheri_quadrilateral :=
  exists A B C D, Saccheri A B C D /\ Per A B C.

Definition postulate_of_right_lambert_quadrilaterals := forall A B C D,
  Lambert A B C D -> Per B C D.

Definition postulate_of_existence_of_a_right_lambert_quadrilateral :=
  exists A B C D, Lambert A B C D /\ Per B C D.

Definition weak_inverse_projection_postulate := forall A B C D E F P Q,
  Acute A B C -> Per D E F -> SumA A B C A B C D E F ->
  Out B A P -> P <> Q -> Per B P Q -> Coplanar A B C Q ->
  exists Y, Out B C Y /\ Col P Q Y.

Definition weak_tarski_s_parallel_postulate := forall A B C T,
  Per A B C -> InAngle T A B C ->
  exists X Y, Out B A X /\ Out B C Y /\ Bet X T Y.

Definition weak_triangle_circumscription_principle := forall A B C A1 A2 B1 B2,
  ~ Col A B C -> Per A C B ->
  Perp_bisect A1 A2 B C -> Perp_bisect B1 B2 A C ->
  Coplanar A B C A1 -> Coplanar A B C A2 ->
  Coplanar A B C B1 -> Coplanar A B C B2 ->
  exists I, Col A1 A2 I /\ Col B1 B2 I.

Definition legendre_s_parallel_postulate :=
  exists A B C,
    ~ Col A B C /\ Acute A B C /\
    forall T,
      InAngle T A B C ->
      exists X Y, Out B A X /\ Out B C Y /\ Bet X T Y.

Definition existential_playfair_s_postulate :=
  exists A1 A2 P, ~ Col A1 A2 P /\
             (forall B1 B2 C1 C2,
                Par A1 A2 B1 B2 -> Col P B1 B2 ->
                Par A1 A2 C1 C2 -> Col P C1 C2 ->
                Col C1 B1 B2 /\ Col C2 B1 B2).

End Euclid_def. *)

Require Import GeoCoq.Tarski_dev.Ch05_bet_le.
(* GeoCoq.Tarski_dev.Ch05_bet_le:
Require Export GeoCoq.Meta_theory.Decidability.equivalence_between_decidability_properties_of_basic_relations.

Section T5.

Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.

Lemma l5_1 : forall A B C D,
  A<>B -> Bet A B C -> Bet A B D -> Bet A C D \/ Bet A D C.

Lemma l5_2 : forall A B C D,
  A<>B -> Bet A B C -> Bet A B D -> Bet B C D \/ Bet B D C.

Lemma segment_construction_2 :
  forall A Q B C, A<>Q -> exists X, (Bet Q A X \/ Bet Q X A) /\ Cong Q X B C.

Lemma l5_3 : forall A B C D,
 Bet A B D -> Bet A C D -> Bet A B C \/ Bet A C B.

Lemma bet3__bet : forall A B C D E, Bet A B E -> Bet A D E -> Bet B C D -> Bet A C E.

Lemma le_bet : forall A B C D, Le C D A B -> exists X, Bet A X B /\ Cong A X C D.

Lemma l5_5_1 : forall A B C D,
  Le A B C D -> exists x, Bet A B x /\ Cong A x C D.

Lemma l5_5_2 : forall A B C D,
 (exists x, Bet A B x /\ Cong A x C D) -> Le A B C D.

Lemma l5_6 : forall A B C D A' B' C' D',
 Le A B C D -> Cong A B A' B' -> Cong C D C' D' -> Le A' B' C' D'.

Lemma le_reflexivity : forall A B, Le A B A B.

Lemma le_transitivity : forall A B C D E F, Le A B C D -> Le C D E F -> Le A B E F.

Lemma between_cong : forall A B C, Bet A C B -> Cong A C A B -> C=B.

Lemma cong3_symmetry : forall A B C A' B' C' : Tpoint , Cong_3 A B C A' B' C' -> Cong_3 A' B' C' A B C.

Lemma between_cong_2 : forall A B D E, Bet A D B -> Bet A E B -> Cong A D A E -> D = E.

Lemma between_cong_3 :
  forall A B D E, A <> B -> Bet A B D -> Bet A B E -> Cong B D B E -> D = E.

Lemma le_anti_symmetry : forall A B C D, Le A B C D -> Le C D A B -> Cong A B C D.

Lemma cong_dec : forall A B C D,
  Cong A B C D \/ ~ Cong A B C D.

Lemma bet_dec : forall A B C, Bet A B C  \/  ~ Bet A B C.

Lemma col_dec : forall A B C, Col A B C \/ ~ Col A B C.

Lemma le_trivial : forall A C D, Le A A C D .

Lemma le_cases : forall A B C D, Le A B C D \/ Le C D A B.

Lemma le_zero : forall A B C, Le A B C C -> A=B.

Lemma le_diff : forall A B C D, A <> B -> Le A B C D -> C <> D.

Lemma lt_diff : forall A B C D, Lt A B C D -> C <> D.

Lemma bet_cong_eq :
 forall A B C D,
  Bet A B C ->
  Bet A C D ->
  Cong B C A D ->
  C = D /\ A = B.

Lemma cong__le : forall A B C D, Cong A B C D -> Le A B C D.

Lemma cong__le3412 : forall A B C D, Cong A B C D -> Le C D A B.

Lemma le1221 : forall A B, Le A B B A.

Lemma le_left_comm : forall A B C D, Le A B C D -> Le B A C D.

Lemma le_right_comm : forall A B C D, Le A B C D -> Le A B D C.

Lemma le_comm : forall A B C D, Le A B C D -> Le B A D C.

Lemma ge_left_comm : forall A B C D, Ge A B C D -> Ge B A C D.

Lemma ge_right_comm : forall A B C D, Ge A B C D -> Ge A B D C.

Lemma ge_comm :  forall A B C D, Ge A B C D -> Ge B A D C.

Lemma lt_right_comm : forall A B C D, Lt A B C D -> Lt A B D C.

Lemma lt_left_comm : forall A B  C D, Lt A B C D -> Lt B A C D.

Lemma lt_comm : forall A B  C D, Lt A B C D -> Lt B A D C.

Lemma gt_left_comm : forall A B C D, Gt A B C D -> Gt B A C D.

Lemma gt_right_comm : forall A B C D, Gt A B C D -> Gt A B D C.

Lemma gt_comm : forall A B C D, Gt A B C D -> Gt B A D C.

Lemma cong2_lt__lt : forall A B C D A' B' C' D',
 Lt A B C D -> Cong A B A' B' -> Cong C D C' D' -> Lt A' B' C' D'.

Lemma fourth_point : forall A B C P, A <> B -> B <> C -> Col A B P -> Bet A B C ->
  Bet P A B \/ Bet A P B \/ Bet B P C \/ Bet B C P.

Lemma third_point : forall A B P, Col A B P -> Bet P A B \/ Bet A P B \/ Bet A B P.

Lemma l5_12_a : forall A B C, Bet A B C -> Le A B A C /\ Le B C A C.

Lemma bet__le1213 : forall A B C, Bet A B C -> Le A B A C.

Lemma bet__le2313 : forall A B C, Bet A B C -> Le B C A C.

Lemma bet__lt1213 : forall A B C, B <> C -> Bet A B C -> Lt A B A C.

Lemma bet__lt2313 : forall A B C, A <> B -> Bet A B C -> Lt B C A C.

Lemma l5_12_b : forall A B C, Col A B C -> Le A B A C -> Le B C A C -> Bet A B C.

Lemma bet_le_eq : forall A B C, Bet A B C -> Le A C B C -> A = B.

Lemma or_lt_cong_gt : forall A B C D, Lt A B C D \/ Gt A B C D \/ Cong A B C D.

Lemma lt__le : forall A B C D, Lt A B C D -> Le A B C D.

Lemma le1234_lt__lt : forall A B C D E F, Le A B C D -> Lt C D E F -> Lt A B E F.

Lemma le3456_lt__lt : forall A B C D E F, Lt A B C D -> Le C D E F -> Lt A B E F.

Lemma lt_transitivity : forall A B C D E F, Lt A B C D -> Lt C D E F -> Lt A B E F.

Lemma not_and_lt : forall A B C D, ~ (Lt A B C D /\ Lt C D A B).

Lemma nlt : forall A B, ~ Lt A B A B.

Lemma le__nlt : forall A B C D, Le A B C D -> ~ Lt C D A B.

Lemma cong__nlt : forall A B C D,
 Cong A B C D -> ~ Lt A B C D.

Lemma nlt__le : forall A B C D, ~ Lt A B C D -> Le C D A B.

Lemma lt__nle : forall A B C D, Lt A B C D -> ~ Le C D A B.

Lemma nle__lt : forall A B C D, ~ Le A B C D -> Lt C D A B.

Lemma lt1123 : forall A B C, B<>C -> Lt A A B C.

Lemma bet2_le2__le : forall O o A B a b, Bet a o b -> Bet A O B -> Le o a O A -> Le o b O B -> Le a b A B.

End T5.

Hint Resolve le_reflexivity le_anti_symmetry le_trivial le_zero cong__le cong__le3412
             le1221 le_left_comm le_right_comm le_comm lt__le bet__le1213 bet__le2313
             lt_left_comm lt_right_comm lt_comm bet__lt1213 bet__lt2313 lt1123 : le.

Ltac Le := auto with le. *)



Section tarski_s_euclid_remove_degenerated_cases.



Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.



Lemma tarski_s_euclid_remove_degenerated_cases :

  (forall A B C D T,

   A <> B ->

   A <> C ->

   A <> D ->

   A <> T ->

   B <> C ->

   B <> D ->

   B <> T ->

   C <> D ->

   C <> T ->

   D <> T ->

   ~ Col A B C ->

   Bet A D T ->

   Bet B D C ->

   exists x y : Tpoint, Bet A B x /\ Bet A C y /\ Bet x T y) ->

  forall A B C D T,

  Bet A D T ->

  Bet B D C ->

  A <> D -> exists x y : Tpoint, Bet A B x /\ Bet A C y /\ Bet x T y.

Proof.

intro HGC; intros A B C D T HADT HBDC HAD.

elim (eq_dec_points A B); intro HAB.

subst; exists T; exists C; Between.

elim (eq_dec_points A C); intro HAC.

subst; exists B; exists T; Between.

elim (eq_dec_points A T); intro HAT.

exfalso; apply HAD; treat_equalities; reflexivity.

elim (eq_dec_points B C); intro HBC.

subst; exists T; exists T; Between.

elim (eq_dec_points B D); intro HBD.

subst; exists T; exists C; Between.

elim (eq_dec_points B T); intro HBT.

subst; exists T; exists C; Between.

elim (eq_dec_points C D); intro HCD.

subst; exists B; exists T; Between.

elim (eq_dec_points C T); intro HCT.

subst; exists B; exists T; Between.

elim (eq_dec_points D T); intro HDT.

subst; exists B; exists C; Between.

elim (col_dec A B C); intro HABC.



  {

  elim HABC; clear HABC; intro HABC.



    {

    assert (H : Bet A B D) by eBetween; assert (Bet A B T) by eBetween.

    exists T; exists C; Between.

    }



    {

    elim HABC; clear HABC; intro HABC.



      {

      assert (H : Bet A C D) by eBetween; assert (Bet A C T) by eBetween.

      exists B; exists T; Between.

      }



      {

      assert (H : Bet B A D \/ Bet B D A) by (apply l5_3 with C; Between).

      elim H; clear H; intro H.



        {

        assert (H' : Bet A C T \/ Bet A T C) by (apply l5_2 with B; eBetween).

        elim H'; clear H'; intro H'.



          {

          exists B; exists T; Between.

          }



          {

          exists B; exists C; split ; try Between.

          split; try Between.

          eBetween.

          }

        }

        {

        assert (H' : Bet A B T \/ Bet A T B) by (apply l5_1 with D; Between).

        elim H'; clear H'; intro H'.



          {

          exists T; exists C; Between.

          }



          {

          exists B; exists C; split ; try Between.

          split; try Between.

          eBetween.

          }

        }

      }

    }

  }

  {

  apply HGC with D; assumption.

  }

Qed.



End tarski_s_euclid_remove_degenerated_cases.
