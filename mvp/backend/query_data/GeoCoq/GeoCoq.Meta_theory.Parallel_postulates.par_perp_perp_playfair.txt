Require Import GeoCoq.Axioms.parallel_postulates.
(* GeoCoq.Axioms.parallel_postulates:
Require Import GeoCoq.Tarski_dev.Definitions.

Section Euclid_def.

Context `{Tn:Tarski_neutral_dimensionless}.

Definition decidability_of_parallelism := forall A B C D,
  Par A B C D \/ ~ Par A B C D.

Definition decidability_of_not_intersection := forall A B C D,
  ~ (exists I, Col I A B /\ Col I C D) \/
  ~ ~ (exists I, Col I A B /\ Col I C D).

Definition decidability_of_intersection := forall A B C D,
  (exists I, Col I A B /\ Col I C D) \/
  ~ (exists I, Col I A B /\ Col I C D).

Definition tarski_s_parallel_postulate := forall A B C D T,
  Bet A D T -> Bet B D C -> A <> D ->
  exists X Y, Bet A B X /\ Bet A C Y /\ Bet X T Y.

Definition playfair_s_postulate := forall A1 A2 B1 B2 C1 C2 P,
  Par A1 A2 B1 B2 -> Col P B1 B2 ->
  Par A1 A2 C1 C2 -> Col P C1 C2 ->
  Col C1 B1 B2 /\ Col C2 B1 B2.

Definition triangle_postulate := forall A B C D E F,
  TriSumA A B C D E F -> Bet D E F.

Definition bachmann_s_lotschnittaxiom := forall P Q R P1 R1,
  P <> Q -> Q <> R -> Per P Q R -> Per Q P P1 -> Per Q R R1 ->
  Coplanar P Q R P1 -> Coplanar P Q R R1 ->
  exists S, Col P P1 S /\ Col R R1 S.

Definition postulate_of_transitivity_of_parallelism := forall A1 A2 B1 B2 C1 C2,
  Par A1 A2 B1 B2 -> Par B1 B2 C1 C2 ->
  Par A1 A2 C1 C2.

Definition midpoint_converse_postulate := forall A B C P Q,
  ~ Col A B C ->
  Midpoint P B C -> Par A B Q P -> Col A C Q ->
  Midpoint Q A C.

Definition alternate_interior_angles_postulate := forall A B C D,
  TS A C B D -> Par A B C D ->
  CongA B A C D C A.

Definition consecutive_interior_angles_postulate := forall A B C D,
  OS B C A D -> Par A B C D -> SuppA A B C B C D.

Definition perpendicular_transversal_postulate := forall A B C D P Q,
  Par A B C D -> Perp A B P Q -> Coplanar C D P Q ->
  Perp C D P Q.

Definition postulate_of_parallelism_of_perpendicular_transversals :=
  forall A1 A2 B1 B2 C1 C2 D1 D2,
    Par A1 A2 B1 B2 -> Perp A1 A2 C1 C2 -> Perp B1 B2 D1 D2 ->
    Coplanar A1 A2 C1 D1 -> Coplanar A1 A2 C1 D2 ->
    Coplanar A1 A2 C2 D1 -> Coplanar A1 A2 C2 D2 ->
    Par C1 C2 D1 D2.

Definition universal_posidonius_postulate := forall A1 A2 A3 A4 B1 B2 B3 B4,
  Par A1 A2 B1 B2 ->
  Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 ->
  Col A1 A2 A4 -> Col B1 B2 B4 -> Perp A1 A2 A4 B4 ->
  Cong A3 B3 A4 B4.

Definition alternative_playfair_s_postulate := forall A1 A2 B1 B2 C1 C2 P,
  Perp2 A1 A2 B1 B2 P -> ~ Col A1 A2 P -> Col P B1 B2 -> Coplanar A1 A2 B1 B2 ->
  Par A1 A2 C1 C2 -> Col P C1 C2 ->
  Col C1 B1 B2 /\ Col C2 B1 B2.

Definition proclus_postulate := forall A B C D P Q,
  Par A B C D -> Col A B P -> ~ Col A B Q -> Coplanar C D P Q ->
  exists Y, Col P Q Y /\ Col C D Y.

Definition alternative_proclus_postulate := forall A B C D P Q,
  Perp2 A B C D P -> ~ Col C D P -> Coplanar A B C D ->
  Col A B P -> ~ Col A B Q -> Coplanar C D P Q ->
  exists Y, Col P Q Y /\ Col C D Y.

Definition triangle_circumscription_principle := forall A B C,
  ~ Col A B C ->
  exists CC, Cong A CC B CC /\ Cong A CC C CC /\ Coplanar A B C CC.

Definition inverse_projection_postulate := forall A B C P Q,
  Acute A B C ->
  Out B A P -> P <> Q -> Per B P Q -> Coplanar A B C Q ->
  exists Y, Out B C Y /\ Col P Q Y.

Definition euclid_5 := forall P Q R S T U,
  BetS P T Q -> BetS R T S -> BetS Q U R -> ~ Col P Q S ->
  Cong P T Q T -> Cong R T S T ->
  exists I, BetS S Q I /\ BetS P U I.

Definition strong_parallel_postulate :=  forall P Q R S T U,
  BetS P T Q -> BetS R T S -> ~ Col P R U ->
  Coplanar P Q R U ->
  Cong P T Q T -> Cong R T S T ->
  exists I, Col S Q I /\ Col P U I.

Definition alternative_strong_parallel_postulate := forall A B C D P Q R,
  OS B C A D -> SumA A B C B C D P Q R -> ~ Bet P Q R ->
  exists Y, Col B A Y /\ Col C D Y.

Definition euclid_s_parallel_postulate := forall A B C D P Q R,
  OS B C A D -> SAMS A B C B C D -> SumA A B C B C D P Q R -> ~ Bet P Q R ->
  exists Y, Out B A Y /\ Out C D Y.

Definition postulate_of_existence_of_a_triangle_whose_angles_sum_to_two_rights :=
  exists A B C D E F, ~ Col A B C /\ TriSumA A B C D E F /\ Bet D E F.

Definition posidonius_postulate :=
  exists A1 A2 B1 B2,
    ~ Col A1 A2 B1 /\ B1 <> B2 /\ Coplanar A1 A2 B1 B2 /\
    forall A3 A4 B3 B4,
      Col A1 A2 A3 -> Col B1 B2 B3 -> Perp A1 A2 A3 B3 ->
      Col A1 A2 A4 -> Col B1 B2 B4 -> Perp A1 A2 A4 B4 ->
      Cong A3 B3 A4 B4.

Definition postulate_of_existence_of_similar_triangles :=
  exists A B C D E F,
    ~ Col A B C /\ ~ Cong A B D E /\
    CongA A B C D E F /\ CongA B C A E F D /\ CongA C A B F D E.

Definition thales_postulate := forall A B C M,
  ~ Col A B C -> Midpoint M A B -> Cong M A M C ->
  Per A C B.

Definition thales_converse_postulate := forall A B C M,
  ~ Col A B C -> Midpoint M A B -> Per A C B ->
  Cong M A M C.

Definition existential_thales_postulate :=
  exists A B C M, ~ Col A B C /\ Midpoint M A B /\ Cong M A M C /\ Per A C B.

Definition postulate_of_right_saccheri_quadrilaterals := forall A B C D,
  Saccheri A B C D -> Per A B C.

Definition postulate_of_existence_of_a_right_saccheri_quadrilateral :=
  exists A B C D, Saccheri A B C D /\ Per A B C.

Definition postulate_of_right_lambert_quadrilaterals := forall A B C D,
  Lambert A B C D -> Per B C D.

Definition postulate_of_existence_of_a_right_lambert_quadrilateral :=
  exists A B C D, Lambert A B C D /\ Per B C D.

Definition weak_inverse_projection_postulate := forall A B C D E F P Q,
  Acute A B C -> Per D E F -> SumA A B C A B C D E F ->
  Out B A P -> P <> Q -> Per B P Q -> Coplanar A B C Q ->
  exists Y, Out B C Y /\ Col P Q Y.

Definition weak_tarski_s_parallel_postulate := forall A B C T,
  Per A B C -> InAngle T A B C ->
  exists X Y, Out B A X /\ Out B C Y /\ Bet X T Y.

Definition weak_triangle_circumscription_principle := forall A B C A1 A2 B1 B2,
  ~ Col A B C -> Per A C B ->
  Perp_bisect A1 A2 B C -> Perp_bisect B1 B2 A C ->
  Coplanar A B C A1 -> Coplanar A B C A2 ->
  Coplanar A B C B1 -> Coplanar A B C B2 ->
  exists I, Col A1 A2 I /\ Col B1 B2 I.

Definition legendre_s_parallel_postulate :=
  exists A B C,
    ~ Col A B C /\ Acute A B C /\
    forall T,
      InAngle T A B C ->
      exists X Y, Out B A X /\ Out B C Y /\ Bet X T Y.

Definition existential_playfair_s_postulate :=
  exists A1 A2 P, ~ Col A1 A2 P /\
             (forall B1 B2 C1 C2,
                Par A1 A2 B1 B2 -> Col P B1 B2 ->
                Par A1 A2 C1 C2 -> Col P C1 C2 ->
                Col C1 B1 B2 /\ Col C2 B1 B2).

End Euclid_def. *)

Require Import GeoCoq.Tarski_dev.Ch10_line_reflexivity_2.
(* GeoCoq.Tarski_dev.Ch10_line_reflexivity_2:
Require Export GeoCoq.Tarski_dev.Ch10_line_reflexivity.
Require Import GeoCoq.Meta_theory.Dimension_axioms.upper_dim_2.

Section T10_1.

Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.

Lemma cop__cong_on_bissect : forall A B M P X,
 Coplanar A B X P -> Midpoint M A B -> Perp_at M A B P M -> Cong X A X B ->
 Col M P X.

Lemma cong_cop_mid_perp__col : forall A B M P X,
 Coplanar A B X P -> Cong A X B X -> Midpoint M A B -> Perp A B P M -> Col M P X.

Lemma cop__image_in_col : forall A B P P' Q Q' M,
 Coplanar A B P Q -> ReflectL_at M P P' A B -> ReflectL_at M Q Q' A B ->
 Col M P Q.

Lemma l10_10_spec : forall A B P Q P' Q',
 ReflectL P' P A B -> ReflectL Q' Q A B ->
 Cong P Q P' Q'.

Lemma l10_10 : forall A B P Q P' Q',
 Reflect P' P A B -> Reflect Q' Q A B ->
 Cong P Q P' Q'.

Lemma image_preserves_bet : forall A B C A' B' C' X Y,
  ReflectL A A' X Y -> ReflectL B B' X Y -> ReflectL C C' X Y ->
  Bet A B C ->
  Bet A' B' C'.

Lemma image_gen_preserves_bet : forall A B C A' B' C' X Y,
  Reflect A A' X Y ->
  Reflect B B' X Y ->
  Reflect C C' X Y ->
  Bet A B C ->
  Bet A' B' C'.

Lemma image_preserves_col : forall A B C A' B' C' X Y,
  ReflectL A A' X Y -> ReflectL B B' X Y -> ReflectL C C' X Y ->
  Col A B C ->
  Col A' B' C'.

Lemma image_gen_preserves_col : forall A B C A' B' C' X Y,
  Reflect A A' X Y -> Reflect B B' X Y -> Reflect C C' X Y ->
  Col A B C ->
  Col A' B' C'.

Lemma image_gen_preserves_ncol : forall A B C A' B' C' X Y,
  Reflect A A' X Y -> Reflect B B' X Y -> Reflect C C' X Y ->
  ~ Col A B C ->
  ~ Col A' B' C'.

Lemma image_gen_preserves_inter : forall A B C D I A' B' C' D' I' X Y,
  Reflect A A' X Y -> Reflect B B' X Y -> Reflect C C' X Y -> Reflect D D' X Y ->
  ~ Col A B C -> C <> D ->
  Col A B I -> Col C D I -> Col A' B' I' -> Col C' D' I' ->
  Reflect I I' X Y.

Lemma intersection_with_image_gen : forall A B C A' B' X Y,
  Reflect A A' X Y -> Reflect B B' X Y ->
  ~ Col A B A' -> Col A B C -> Col A' B' C ->
  Col C X Y.

Lemma image_preserves_midpoint :
 forall A B C A' B' C' X Y,
 ReflectL A A' X Y -> ReflectL B B' X Y -> ReflectL C C' X Y ->
 Midpoint A B C ->
 Midpoint A' B' C'.

Lemma image_spec_preserves_per : forall A B C A' B' C' X Y,
 ReflectL A A' X Y -> ReflectL B B' X Y -> ReflectL C C' X Y ->
 Per A B C ->
 Per A' B' C'.

Lemma image_preserves_per : forall A B C A' B' C' X Y,
 Reflect A A' X Y -> Reflect B B' X Y -> Reflect C C' X Y ->
 Per A B C ->
 Per A' B' C'.

Lemma l10_12 : forall A B C A' B' C',
 Per A B C -> Per A' B' C' ->
 Cong A B A' B' -> Cong B C B' C' ->
 Cong A C A' C'.

Lemma cong4_cop2__eq : forall A B C P Q, ~ Col A B C ->
  Cong A P B P -> Cong A P C P -> Coplanar A B C P ->
  Cong A Q B Q -> Cong A Q C Q -> Coplanar A B C Q ->
  P = Q.

Lemma l10_16 : forall A B C A' B' P,
 ~ Col A B C -> ~ Col A' B' P -> Cong A B A' B' ->
 exists C', Cong_3 A B C A' B' C' /\ OS  A' B' P C' .

Lemma cong_cop_image__col : forall A B P P' X,
 P <> P' -> Reflect P P' A B -> Cong P X P' X -> Coplanar A B P X ->
 Col A B X.

Lemma cong_cop_per2_1 :
 forall A B X Y, A <> B -> Per A B X -> Per A B Y ->
 Cong B X B Y -> Coplanar A B X Y -> X = Y \/ Midpoint B X Y.

Lemma cong_cop_per2 : forall A B X Y,
 A <> B -> Per A B X -> Per A B Y -> Cong B X B Y -> Coplanar A B X Y ->
 X = Y \/ ReflectL X Y A B.

Lemma cong_cop_per2_gen : forall A B X Y,
 A <> B -> Per A B X -> Per A B Y -> Cong B X B Y -> Coplanar A B X Y ->
 X = Y \/ Reflect X Y A B.

Lemma ex_perp_cop : forall A B C P,
 A <> B -> exists Q, Perp A B Q C /\ Coplanar A B P Q.

Lemma hilbert_s_version_of_pasch_aux : forall A B C I P, Coplanar A B C P ->
  ~ Col A I P -> ~ Col B C P -> Bet B I C -> B <> I -> I <> C -> B <> C ->
  exists X, Col I P X /\
            ((Bet A X B /\ A <> X /\ X <> B /\ A <> B) \/
             (Bet A X C /\ A <> X /\ X <> C /\ A <> C)).

Lemma hilbert_s_version_of_pasch : forall A B C P Q, Coplanar A B C P ->
  ~ Col C Q P -> ~ Col A B P -> BetS A Q B ->
  exists X, Col P Q X /\ (BetS A X C \/ BetS B X C).

Lemma two_sides_cases : forall O P A B,
 ~ Col O A B -> OS O P A B -> TS O A P B \/ TS O B P A.

Lemma not_par_two_sides :
  forall A B C D I, C <> D -> Col A B I -> Col C D I -> ~ Col A B C ->
  exists X, exists Y, Col C D X /\ Col C D Y /\ TS A B X Y.

Lemma cop_not_par_other_side :
  forall A B C D I P, C <> D -> Col A B I -> Col C D I -> ~ Col A B C -> ~ Col A B P ->
  Coplanar A B C P ->
  exists Q, Col C D Q /\ TS A B P Q.

Lemma cop_not_par_same_side :
  forall A B C D I P, C <> D -> Col A B I -> Col C D I -> ~ Col A B C -> ~ Col A B P ->
  Coplanar A B C P ->
  exists Q, Col C D Q /\ OS A B P Q.

End T10_1.

Section T10_2D.

Context `{T2D:Tarski_2D}.

Lemma all_coplanar : forall A B C D, Coplanar A B C D.

Lemma per2__col : forall A B C X, Per A X C -> X <> C -> Per B X C -> Col A B X.

Lemma perp2__col : forall X Y Z A B,
 Perp X Y A B -> Perp X Z A B -> Col X Y Z.

Lemma cong_on_bissect : forall A B M P X,
 Midpoint M A B -> Perp_at M A B P M -> Cong X A X B ->
 Col M P X.

Lemma cong_mid_perp__col : forall A B M P X, Cong A X B X -> Midpoint M A B -> Perp A B P M -> Col M P X.

Lemma image_in_col : forall A B P P' Q Q' M,
 ReflectL_at M P P' A B -> ReflectL_at M Q Q' A B ->
 Col M P Q.

Lemma cong_image__col : forall A B P P' X,
 P <> P' -> Reflect P P' A B -> Cong P X P' X ->
 Col A B X.

Lemma cong_per2_1 :
 forall A B X Y, A <> B -> Per A B X -> Per A B Y ->
 Cong B X B Y -> X = Y \/ Midpoint B X Y.

Lemma cong_per2 : forall A B X Y,
 A <> B -> Per A B X -> Per A B Y -> Cong B X B Y ->
 X = Y \/ ReflectL X Y A B.

Lemma cong_per2_gen : forall A B X Y,
 A <> B -> Per A B X -> Per A B Y -> Cong B X B Y ->
 X = Y \/ Reflect X Y A B.

Lemma not_two_sides_one_side :
 forall A B X Y,
  ~ Col X A B ->
  ~ Col Y A B ->
  ~ TS A B X Y ->
  OS A B X Y.

Lemma col_perp2__col :
 forall A B X Y P,
  Col A B P ->
  Perp A B X P ->
  Perp P A Y P ->
  Col Y X P.

Lemma hilbert_s_version_of_pasch_2D : forall A B C P Q,
  ~ Col C Q P -> ~ Col A B P -> BetS A Q B ->
  exists X, Col P Q X /\ (BetS A X C \/ BetS B X C).

Lemma not_one_side_two_sides :
 forall A B X Y,
  ~ Col X A B ->
  ~ Col Y A B ->
  ~ OS A B X Y ->
  TS A B X Y.

Lemma one_or_two_sides :
 forall A B X Y,
  ~ Col X A B ->
  ~ Col Y A B ->
  TS A B X Y \/ OS A B X Y.

Lemma not_par_other_side :
  forall A B C D I P, C <> D -> Col A B I -> Col C D I -> ~ Col A B C -> ~ Col A B P ->
  exists Q, Col C D Q /\ TS A B P Q.

Lemma not_par_same_side :
  forall A B C D I P, C <> D -> Col A B I -> Col C D I -> ~ Col A B C -> ~ Col A B P ->
  exists Q, Col C D Q /\ OS A B P Q.

End T10_2D.

Hint Resolve all_coplanar : cop. *)



Section par_perp_perp_playfair.



Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.



Lemma par_perp_perp_implies_playfair :

  perpendicular_transversal_postulate ->

  playfair_s_postulate.

Proof.

intro HPTP; intros A1 A2 B1 B2 C1 C2 P HPar1 HCol1 HPar2 HCol2.

elim (col_dec A1 A2 P); intro HCol.



  {

  elim HPar1; clear HPar1; intro HPar1; try (exfalso; apply HPar1; exists P; Col);

  elim HPar2; clear HPar2; intro HPar2; try (exfalso; apply HPar2; exists P; Col).

  destruct HPar1 as [HDiff1 [HDiff2 [HCol3 HCol4]]]; clear HDiff1;

  destruct HPar2 as [HDiff1 [HDiff3 [HCol5 HCol6]]].

  split; ColR.

  }



  {

  assert(HI := l8_18_existence A1 A2 P HCol); destruct HI as [I [HCol' HPerp]].

  assert (HCop1 : Coplanar B1 B2 P I) by (apply col__coplanar; Col).

  assert (HCop2 : Coplanar C1 C2 P I) by (apply col__coplanar; Col).

  assert (HPerp1 := HPTP A1 A2 B1 B2 P I HPar1 HPerp HCop1).

  assert (HPerp2 := HPTP A1 A2 C1 C2 P I HPar2 HPerp HCop2).

  assert (HCop3 : Coplanar A1 A2 P B1)

    by (assert_diffs; apply col2_cop__cop with B1 B2;

        Col; apply par__coplanar; auto).

  assert (HCop4 : Coplanar A1 A2 P B2)

    by (assert_diffs; apply col2_cop__cop with B1 B2;

        Col; apply par__coplanar; auto).

  assert (HCop5 : Coplanar A1 A2 P C1)

    by (assert_diffs; apply col2_cop__cop with C1 C2;

        Col; apply par__coplanar; auto).

  assert (HCop6 : Coplanar A1 A2 P C2)

    by (assert_diffs; apply col2_cop__cop with C1 C2;

        Col; apply par__coplanar; auto).

  assert (HCop7 : Coplanar A1 A2 P I) by Cop.

  split.



    {

    elim (eq_dec_points P C1); intro HDiff; subst; Col.

    assert (Col P C1 B1).

      {

      elim (eq_dec_points P B1); intro HPB1; subst; Col.

      apply cop_perp2__col with P I.

      CopR.

      apply perp_sym; apply perp_col0 with C1 C2; assert_diffs; Col.

      apply perp_sym; apply perp_col0 with B1 B2; assert_diffs; Col.

      }

    assert (Col P C1 B2).

      {

      elim (eq_dec_points P B2); intro HPB2; subst; Col.

      apply cop_perp2__col with P I.

      CopR.

      apply perp_sym; apply perp_col0 with C1 C2; assert_diffs; Col.

      apply perp_sym; apply perp_col0 with B1 B2; assert_diffs; Col.

      }

    ColR.

    }



    {

    elim (eq_dec_points P C2); intro HDiff; subst; Col.

    assert (Col P C2 B1).

      {

      elim (eq_dec_points P B1); intro HPB1; subst; Col.

      apply cop_perp2__col with P I.

      CopR.

      apply perp_sym; apply perp_col0 with C1 C2; assert_diffs; Col.

      apply perp_sym; apply perp_col0 with B1 B2; assert_diffs; Col.

      }

    assert (Col P C2 B2).

      {

      elim (eq_dec_points P B2); intro HPB2; subst; Col.

      apply cop_perp2__col with P I.

      CopR.

      apply perp_sym; apply perp_col0 with C1 C2; assert_diffs; Col.

      apply perp_sym; apply perp_col0 with B1 B2; assert_diffs; Col.

      }

    ColR.

    }

  }

Qed.



End par_perp_perp_playfair.
