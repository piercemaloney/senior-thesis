Require Import GeoCoq.Tarski_dev.Annexes.quadrilaterals.
(* GeoCoq.Tarski_dev.Annexes.quadrilaterals:
Require Export GeoCoq.Tarski_dev.Ch12_parallel.

Section Quadrilateral.

Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.

Lemma cong_identity_inv :
 forall A B C, A <> B -> ~ Cong A B C C.

Lemma midpoint_midpoint_col : forall A B A' B' M,
 A <> B ->
 Midpoint M A A' -> Midpoint M B B' ->
 Col A B B' ->
 A' <> B' /\ Col A A' B' /\ Col B A' B'.

Lemma midpoint_par_strict :
 forall A B A' B' M,
 A <> B ->
 ~ Col A B B' ->
 Midpoint M A A' ->
 Midpoint M B B' ->
 Par_strict A B A' B'.

Lemma bet3_cong3_bet : forall A B C D D', A <> B -> A <> C -> A <> D -> Bet D A C -> Bet A C B -> Bet D C D' -> Cong A B C D -> Cong A D B C -> Cong D C C D'
                              -> Bet C B D'.

Lemma bet_double_bet :
 forall A B C B' C',
 Midpoint B' A B ->
 Midpoint C' A C ->
 Bet A B' C' ->
 Bet A B C.

Lemma bet_half_bet :
 forall A B C B' C',
 Bet A B C  ->
 Midpoint B' A B ->
 Midpoint C' A C ->
 Bet A B' C'.

Lemma midpoint_preserves_bet :
 forall A B C B' C',
  Midpoint B' A B ->
  Midpoint C' A C ->
 (Bet A B C <-> Bet A B' C').

Lemma symmetry_preseves_bet1 :
 forall A B M A' B',
  Midpoint M A A' ->
  Midpoint M B B' ->
  Bet M A B ->
  Bet M A' B'.

Lemma symmetry_preseves_bet2 :
 forall A B M A' B',
  Midpoint M A A' ->
  Midpoint M B B' ->
  Bet M A' B' ->
  Bet M A B.

Lemma symmetry_preserves_bet :
 forall A B M A' B',
  Midpoint M A A' ->
  Midpoint M B B' ->
 (Bet M A' B' <-> Bet M A B).

Lemma bet_cong_bet :
 forall A B C D,
  A <> B ->
  Bet A B C ->
  Bet A B D ->
  Cong A C B D ->
  Bet B C D.

Lemma col_cong_mid :
 forall A B A' B',
  Par A B A' B' ->
  ~ Par_strict A B A' B' ->
  Cong A B A' B' ->
  exists M,  Midpoint M A A' /\ Midpoint M B B' \/
             Midpoint M A B' /\ Midpoint M B A'.

Lemma mid_par_cong1 :
 forall A B A' B' M,
  A <> B ->
  Midpoint M A A' ->
  Midpoint M B B' ->
  Cong A B A' B' /\ Par A B A' B'.

Lemma mid_par_cong2 :
 forall A B A' B' M,
  A <> B' ->
  Midpoint M A A' ->
  Midpoint M B B' ->
  Cong A B' A' B /\ Par A B' A' B.

Lemma mid_par_cong :
 forall A B A' B' M,
  A <> B -> A <> B' ->
  Midpoint M A A' ->
  Midpoint M B B' ->
  Cong A B A' B' /\ Cong A B' A' B /\ Par A B A' B' /\ Par A B' A' B.

Lemma Parallelogram_strict_Parallelogram :
 forall A B C D,
  Parallelogram_strict A B C D -> Parallelogram A B C D.

Lemma plgf_permut :
 forall A B C D,
  Parallelogram_flat A B C D ->
  Parallelogram_flat B C D A.

Lemma plgf_sym :
 forall A B C D,
 Parallelogram_flat A B C D ->
 Parallelogram_flat C D A B.

Lemma plgf_irreflexive :
 forall A B,
 ~ Parallelogram_flat A B A B.

Lemma plgs_irreflexive :
 forall A B,
  ~ Parallelogram_strict A B A B.

Lemma plg_irreflexive :
 forall A B,
 ~ Parallelogram A B A B.

Lemma plgf_mid :
 forall A B C D,
  Parallelogram_flat A B C D ->
  exists M, Midpoint M A C /\ Midpoint M B D.

Lemma mid_plgs :
 forall A B C D M,
  ~ Col A B C ->
  Midpoint M A C -> Midpoint M B D ->
  Parallelogram_strict A B C D.

Lemma mid_plgf_aux :
 forall A B C D M,
  A <> C ->
  Col A B C ->
  Midpoint M A C -> Midpoint M B D ->
  Parallelogram_flat A B C D.

Lemma mid_plgf :
 forall A B C D M,
  (A <> C \/ B <> D ) ->
  Col A B C ->
  Midpoint M A C -> Midpoint M B D ->
  Parallelogram_flat A B C D.

Lemma mid_plg :
 forall A B C D M,
 (A <> C \/ B <> D ) ->
 Midpoint M A C -> Midpoint M B D ->
 Parallelogram A B C D.

Lemma mid_plg_1 :
 forall A B C D M,
 A <> C ->
 Midpoint M A C -> Midpoint M B D ->
 Parallelogram A B C D.

Lemma mid_plg_2 :
 forall A B C D M,
 B <> D ->
 Midpoint M A C -> Midpoint M B D ->
 Parallelogram A B C D.

Lemma midpoint_cong_uniqueness :
 forall A B C D M,
  Col A B C ->
  Midpoint M A B /\ Midpoint M C D ->
  Cong A B C D ->
  A = C /\ B = D \/ A = D /\ B = C.

Lemma plgf_not_comm :
 forall A B C D, A <> B ->
  Parallelogram_flat A B C D ->
  ~ Parallelogram_flat A B D C /\ ~ Parallelogram_flat B A C D.

Lemma plgf_cong :
 forall A B C D,
  Parallelogram_flat A B C D ->
  Cong A B C D /\ Cong A D B C.

Lemma plg_to_parallelogram : forall A B C D, Plg A B C D -> Parallelogram A B C D.

Lemma plgs_one_side :
 forall A B C D,
 Parallelogram_strict A B C D ->
 OS A B C D /\ OS C D A B.

Lemma parallelogram_strict_not_col : forall A B C D,
 Parallelogram_strict A B C D ->
 ~ Col A B C.

Lemma parallelogram_strict_not_col_2 : forall A B C D,
 Parallelogram_strict A B C D ->
 ~ Col B C D.

Lemma parallelogram_strict_not_col_3 : forall A B C D,
 Parallelogram_strict A B C D ->
 ~ Col C D A.

Lemma parallelogram_strict_not_col_4 : forall A B C D,
 Parallelogram_strict A B C D ->
 ~ Col A B D.

Lemma plgs__pars :
 forall A B C D,
 Parallelogram_strict A B C D ->
 Par_strict A B C D.

Lemma plgs_sym :
 forall A B C D,
  Parallelogram_strict A B C D ->
  Parallelogram_strict C D A B.

Lemma plg_sym :
 forall A B C D,
  Parallelogram A B C D ->
  Parallelogram C D A B.

Lemma Rhombus_Plg : forall A B C D, Rhombus A B C D -> Plg A B C D.

Lemma Rectangle_Plg : forall A B C D,
  Rectangle A B C D ->
  Plg A B C D.

Lemma Rectangle_Parallelogram : forall A B C D,
  Rectangle A B C D ->
  Parallelogram A B C D.

Lemma plg_cong_rectangle :
 forall A B C D,
  Plg A B C D ->
  Cong A C B D ->
  Rectangle A B C D.

Lemma plg_trivial : forall A B, A <> B -> Parallelogram A B B A.

Lemma plg_trivial1 : forall A B, A <> B -> Parallelogram A A B B.

Lemma col_not_plgs : forall A B C D, Col A B C -> ~Parallelogram_strict A B C D.

Lemma plg_col_plgf : forall A B C D, Col A B C -> Parallelogram A B C D -> Parallelogram_flat A B C D.

Lemma plg_bet1 : forall A B C D, Parallelogram A B C D -> Bet A C B -> Bet D A C.

Lemma plgf_trivial1 : forall A B, A <> B -> Parallelogram_flat A B B A.

Lemma plgf_trivial2 : forall A B, A <> B -> Parallelogram_flat A A B B.

Lemma plgf_not_point : forall A B, Parallelogram_flat A A B B -> A <> B.

Lemma plgf_trivial_neq : forall A C D, Parallelogram_flat A A C D -> C = D /\ A <> C.

Lemma plgf_trivial_trans : forall A B C, Parallelogram_flat A A B B -> Parallelogram_flat B B C C 
                                           -> Parallelogram_flat A A C C \/ A = C.

Lemma plgf_trivial : forall A B, A <> B -> Parallelogram_flat A B B A.

Lemma plgf3_mid : forall A B C, Parallelogram_flat A B A C -> Midpoint A B C.

Lemma cong3_id : forall A B C D, A <> B -> Col A B C -> Col A B D -> Cong A B C D -> Cong A D B C -> Cong A C B D 
                             -> A = D /\ B = C \/ A = C /\ B = D.

Lemma col_cong_mid1 : forall A B C D, A <> D -> Col A B C -> Col A B D -> Cong A B C D -> Cong A C B D 
                                 -> exists M, Midpoint M A D /\ Midpoint M B C.

Lemma col_cong_mid2 : forall A B C D, A <> C -> Col A B C -> Col A B D -> Cong A B C D -> Cong A D B C 
                                 -> exists M, Midpoint M A C /\ Midpoint M B D.

Lemma plgs_not_col : forall A B C D, Parallelogram_strict A B C D ->
  ~ Col A B C /\ ~ Col B C D /\ ~ Col C D A /\ ~ Col A B D.

Lemma not_col_sym_not_col : forall A B B' C , ~Col A B C -> Midpoint A B B' -> ~Col A B' C.

Lemma plg_existence : forall A B C, A <> B -> exists D, Parallelogram A B C D.

Lemma plgs_diff : forall A B C D, Parallelogram_strict A B C D -> Parallelogram_strict A B C D /\ A <> B /\ B <> C /\ C <> D /\ D <> A /\ A <> C /\ B <> D.

Lemma sym_par : forall A B M, A <> B -> forall A' B', Midpoint M A A' -> Midpoint M B B' -> Par A B A' B'.

Lemma symmetry_preserves_two_sides : forall A B X Y M A' B', Col X Y M -> TS X Y A B -> Midpoint M A A' -> Midpoint M B B'
                                               -> TS X Y A' B'.

Lemma symmetry_preserves_one_side : forall A B X Y M A' B', Col X Y M -> OS X Y A B -> Midpoint M A A' -> Midpoint M B B'
                                               -> OS X Y A' B'.

Lemma plgf_bet : forall A B A' B', Parallelogram_flat A B B' A' 
                                 -> Bet A' B' A /\ Bet B' A B 
                                 \/ Bet A' A B' /\ Bet A B' B
                                 \/ Bet A A' B /\ Bet A' B B'
                                 \/ Bet A B A' /\ Bet B A' B'.

Lemma plgs_existence : forall A B, A <> B -> exists C, exists D, Parallelogram_strict A B C D.

Lemma Rectangle_not_triv : forall A,
 ~ Rectangle A A A A.

Lemma Rectangle_triv : forall A B,
 A<>B ->
 Rectangle A A B B.

Lemma Rectangle_not_triv_2 : forall A B,
 ~ Rectangle A B A B.

Lemma Square_not_triv : forall A,
 ~ Square A A A A.

Lemma Square_not_triv_2 : forall A B,
 ~ Square A A B B.

Lemma Square_not_triv_3 : forall A B,
 ~ Square A B A B.

Lemma Square_Rectangle : forall A B C D,
 Square A B C D -> Rectangle A B C D.

Lemma Square_Parallelogram :  forall A B C D,
 Square A B C D -> Parallelogram A B C D.

Lemma Rhombus_Rectangle_Square : forall A B C D,
 Rhombus A B C D ->
 Rectangle A B C D ->
 Square A B C D.

Lemma rhombus_cong_square : forall A B C D,
 Rhombus A B C D ->
 Cong A C B D ->
 Square A B C D.

Lemma Kite_comm : forall A B C D,
 Kite A B C D -> Kite C D A B.

End Quadrilateral. *)



Section Tagged_predicates.



Context `{Tn:Tarski_neutral_dimensionless}.



Definition Diff_tagged (A B: Tpoint) := A <> B.



Lemma Diff_Diff_tagged : forall A B , A <> B -> Diff_tagged A B.

Proof.

trivial.

Qed.



Lemma Diff_tagged_Diff : forall A B , Diff_tagged A B -> A <> B.

Proof.

trivial.

Qed.



Lemma Diff_perm :

  forall (A B: Tpoint),

  A <> B ->

  A <> B /\ B <> A.

Proof.

intros.

repeat split; intuition.

Qed.



Definition Cong_tagged A B C D := Cong A B C D.



Lemma Cong_Cong_tagged : forall A B C D, Cong A B C D -> Cong_tagged A B C D.

Proof.

trivial.

Qed.



Lemma Cong_tagged_Cong : forall A B C D, Cong_tagged A B C D -> Cong A B C D.

Proof.

trivial.

Qed.



Definition Bet_tagged A B C := Bet A B C.



Lemma Bet_Bet_tagged : forall A B C, Bet A B C -> Bet_tagged A B C.

Proof.

trivial.

Qed.



Lemma Bet_tagged_Bet : forall A B C, Bet_tagged A B C -> Bet A B C.

Proof.

trivial.

Qed.



Definition Col_tagged A B C := Col A B C.



Lemma Col_Col_tagged : forall A B C, Col A B C -> Col_tagged A B C.

Proof.

trivial.

Qed.



Lemma Col_tagged_Col : forall A B C, Col_tagged A B C -> Col A B C.

Proof.

trivial.

Qed.



Definition NCol_tagged A B C := ~ Col A B C.



Lemma NCol_NCol_tagged : forall A B C, ~ Col A B C -> NCol_tagged A B C.

Proof.

trivial.

Qed.



Lemma NCol_tagged_NCol : forall A B C, NCol_tagged A B C -> ~ Col A B C.

Proof.

trivial.

Qed.



Definition Mid_tagged A B C := Midpoint A B C.



Lemma Mid_Mid_tagged : forall A B C, Midpoint A B C -> Mid_tagged A B C.

Proof.

trivial.

Qed.



Lemma Mid_tagged_Mid : forall A B C, Mid_tagged A B C -> Midpoint A B C.

Proof.

trivial.

Qed.



Definition Per_tagged A B C := Per A B C.



Lemma Per_Per_tagged : forall A B C, Per A B C -> Per_tagged A B C.

Proof.

trivial.

Qed.



Lemma Per_tagged_Per : forall A B C, Per_tagged A B C -> Per A B C.

Proof.

trivial.

Qed.



Definition Perp_in_tagged X A B C D := Perp_at X A B C D.



Lemma Perp_in_Perp_in_tagged : forall X A B C D, Perp_at X A B C D -> Perp_in_tagged X A B C D.

Proof.

trivial.

Qed.



Lemma Perp_in_tagged_Perp_in : forall X A B C D, Perp_in_tagged X A B C D -> Perp_at X A B C D.

Proof.

trivial.

Qed.



Definition Perp_tagged A B C D := Perp A B C D.



Lemma Perp_Perp_tagged : forall A B C D, Perp A B C D -> Perp_tagged A B C D.

Proof.

trivial.

Qed.



Lemma Perp_tagged_Perp : forall A B C D, Perp_tagged A B C D -> Perp A B C D.

Proof.

trivial.

Qed.



Definition Par_strict_tagged A B C D := Par_strict A B C D.



Lemma Par_strict_Par_strict_tagged : forall A B C D, Par_strict A B C D -> Par_strict_tagged A B C D.

Proof.

trivial.

Qed.



Lemma Par_strict_tagged_Par_strict : forall A B C D, Par_strict_tagged A B C D -> Par_strict A B C D.

Proof.

trivial.

Qed.



Definition Par_tagged A B C D := Par A B C D.



Lemma Par_Par_tagged : forall A B C D, Par A B C D -> Par_tagged A B C D.

Proof.

trivial.

Qed.



Lemma Par_tagged_Par : forall A B C D, Par_tagged A B C D -> Par A B C D.

Proof.

trivial.

Qed.



Definition Plg_tagged A B C D := Parallelogram A B C D.



Lemma Plg_Plg_tagged : forall A B C D, Parallelogram A B C D -> Plg_tagged A B C D.

Proof.

trivial.

Qed.



Lemma Plg_tagged_Plg : forall A B C D, Plg_tagged A B C D -> Parallelogram A B C D.

Proof.

trivial.

Qed.



End Tagged_predicates.

