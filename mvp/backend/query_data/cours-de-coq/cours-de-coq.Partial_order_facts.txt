

Require Import Ensembles.
(* Ensembles:
Require Import Classical.

Section Ensembles.
   Variable U : Type.
   
   Definition Ensemble := U -> Prop.
   
   Definition In (B : Ensemble) (x : U) : Prop := B x.
   
   Definition Included (B C : Ensemble) : Prop :=
     forall x : U, In B x -> In C x.
   
   Inductive Empty_set : Ensemble :=.
   
   Inductive Singleton (x : U) : Ensemble :=
       In_singleton : In (Singleton x) x.
   
   Inductive Union (B C : Ensemble) : Ensemble :=
     | Union_introl : forall x : U, In B x -> In (Union B C) x
     | Union_intror : forall x : U, In C x -> In (Union B C) x.
   
   Inductive Intersection (B C : Ensemble) : Ensemble :=
       Intersection_intro :
         forall x : U, In B x -> In C x -> In (Intersection B C) x.
   
   Inductive Couple (x y : U) : Ensemble :=
     | Couple_l : In (Couple x y) x
     | Couple_r : In (Couple x y) y.
   
   Inductive Setminus (B C : Ensemble) : Ensemble :=
       Setminus_intro :
         forall x : U, In B x -> ~ In C x -> In (Setminus B C) x.
   
   Inductive Disjoint (B C : Ensemble) : Prop :=
       Disjoint_intro :
         (forall x : U, ~ In (Intersection B C) x) -> Disjoint B C.
   
   Inductive Non_empty (B : Ensemble) : Prop :=
       Non_empty_intro : forall x : U, In B x -> Non_empty B.
   
   Inductive Finite : Ensemble -> Prop :=
     | Empty_is_finite : Finite Empty_set
     | Union_is_finite :
         forall A : Ensemble,
         Finite A -> forall x : U, ~ In A x -> Finite (Union (Singleton x) A).

   Definition Same_set (B C : Ensemble) : Prop :=
     Included B C /\ Included C B.
      
   Lemma Same_set_intro :
    forall B C : Ensemble, Included B C -> Included C B -> Same_set B C.

   Axiom
     Extensionality_Ensembles :
       forall A B : Ensemble, Same_set A B -> A = B :>Ensemble.
   
End Ensembles.
Hint Unfold In.
Hint Unfold Included.
Hint Resolve Same_set_intro.
Hint Resolve Union_introl Union_intror.
Hint Resolve Intersection_intro.
Hint Resolve In_singleton.
Hint Resolve Couple_l Couple_r.
Hint Resolve Setminus_intro.
Hint Resolve Disjoint_intro.
Hint Resolve Empty_is_finite Union_is_finite.
Hint Resolve Extensionality_Ensembles. *)

Require Import Relations_1.
(* Relations_1:
Section Relations_1.
   Variable U : Type.
   
   Definition Relation := U -> U -> Prop.
   Variable R : Relation.
   
   Definition Reflexive : Prop := forall x : U, R x x.
   
   Definition Transitive : Prop := forall x y z : U, R x y -> R y z -> R x z.
   
   Definition Symmetric : Prop := forall x y : U, R x y -> R y x.
   
   Definition Antisymmetric : Prop :=
     forall x y : U, R x y -> R y x -> x = y :>U.
   
   Definition contains (R R' : Relation) : Prop :=
     forall x y : U, R' x y -> R x y.
   
   Definition same_relation (R R' : Relation) : Prop :=
     contains R R' /\ contains R' R.
   
   Inductive Preorder : Prop :=
       Definition_of_preorder : Reflexive -> Transitive -> Preorder.
   
   Inductive Order : Prop :=
       Definition_of_order :
         Reflexive -> Transitive -> Antisymmetric -> Order.
   
   Inductive Equivalence : Prop :=
       Definition_of_equivalence :
         Reflexive -> Transitive -> Symmetric -> Equivalence.
   
   Inductive PER : Prop :=
       Definition_of_PER : Symmetric -> Transitive -> PER.
   
End Relations_1.
Hint Unfold Reflexive.
Hint Unfold Transitive.
Hint Unfold Antisymmetric.
Hint Unfold Symmetric.
Hint Unfold contains.
Hint Unfold same_relation.
Hint Resolve Definition_of_preorder.
Hint Resolve Definition_of_order.
Hint Resolve Definition_of_equivalence.
Hint Resolve Definition_of_PER. *)

Require Import podefs.
(* podefs:
Require Import Ensembles.
Require Import Relations_1.

Section Partial_orders.
   Variable U : Type.
   
   Definition Carrier := Ensemble U.
   
   Definition Rel := Relation U.
   
   Inductive PO : Type :=
       Definition_of_PO :
         forall (C : Carrier) (R : Rel), Non_empty U C -> Order U R -> PO.
   
   Theorem Carrier_of : PO -> Carrier.

   Theorem Rel_of : PO -> Rel.

   Definition SRel_of (p : PO) : Rel := fun x y : U => Rel_of p x y /\ x <> y.
   
End Partial_orders.
Hint Unfold Carrier_of Rel_of. *)

Require Import podefs_1.
(* podefs_1:
Require Import Ensembles.
Require Import Relations_1.
Require Import podefs.

Section Bounds.
   Variable U : Type.
   Variable D : PO U.
   
   Let C := Carrier_of U D.
   
   Let R := Rel_of U D.
   
   Inductive Totally_ordered (B : Ensemble U) : Prop :=
       Totally_ordered_definition :
         (Included U B C ->
          forall x y : U, Included U (Couple U x y) B -> R x y \/ R y x) ->
         Totally_ordered B.
   
   Inductive Upper_Bound (B : Ensemble U) (x : U) : Prop :=
       Upper_Bound_definition :
         In U C x -> (forall y : U, In U B y -> R y x) -> Upper_Bound B x.
   
   Inductive Lower_Bound (B : Ensemble U) (x : U) : Prop :=
       Lower_Bound_definition :
         In U C x -> (forall y : U, In U B y -> R x y) -> Lower_Bound B x.
   
   Inductive Lub (B : Ensemble U) (x : U) : Prop :=
       Lub_definition :
         Upper_Bound B x ->
         (forall y : U, Upper_Bound B y -> R x y) -> Lub B x.
   
   Inductive Glb (B : Ensemble U) (x : U) : Prop :=
       Glb_definition :
         Lower_Bound B x ->
         (forall y : U, Lower_Bound B y -> R y x) -> Glb B x.
   
   Inductive Bottom (bot : U) : Prop :=
       Bottom_definition :
         In U C bot -> (forall y : U, In U C y -> R bot y) -> Bottom bot.
   
   Definition Compatible (x y : U) : Prop :=
     exists z : U,
       In U C x -> In U C y -> In U C z /\ Upper_Bound (Couple U x y) z.
   
   Inductive Directed (X : Ensemble U) : Prop :=
       Definition_of_Directed :
         Included U X C ->
         Non_empty U X ->
         (forall x1 x2 : U,
          Included U (Couple U x1 x2) X ->
          exists x3 : U, In U X x3 /\ Upper_Bound (Couple U x1 x2) x3) ->
         Directed X.
   
   Inductive Complete : Prop :=
       Definition_of_Complete :
         (exists bot : U, Bottom bot) ->
         (forall X : Ensemble U, Directed X -> exists bsup : U, Lub X bsup) ->
         Complete.
   
   Definition Cpo : Prop := Complete.
   
   Definition Chain : Prop := Totally_ordered C.
   
   Inductive Conditionally_complete : Prop :=
       Definition_of_Conditionally_complete :
         (forall X : Ensemble U,
          Included U X C ->
          (exists maj : U, Upper_Bound X maj) -> exists bsup : U, Lub X bsup) ->
         Conditionally_complete.
   
End Bounds.
Hint Unfold Carrier_of.
Hint Unfold Rel_of.
Hint Resolve Totally_ordered_definition Upper_Bound_definition
  Lower_Bound_definition Lub_definition Glb_definition Bottom_definition
  Definition_of_Complete Definition_of_Complete
  Definition_of_Conditionally_complete. *)

Require Import ps.
(* ps:
Require Import Classical.

Require Import Ensembles.
Require Import Relations_1.
Require Import Relations_1_facts.
Require Import podefs.
Require Import podefs_1.

Section The_power_set_partial_order.
   Variable U : Type.
   
   Inductive Power_set (A : Ensemble U) : Ensemble (Ensemble U) :=
       Definition_of_Power_set :
         forall X : Ensemble U,
         Included U X A -> In (Ensemble U) (Power_set A) X.
   Hint Resolve Definition_of_Power_set.
   
   Variable A : Ensemble U.
   
   Theorem Empty_set_minimal :
    forall X : Ensemble U, Included U (Empty_set U) X.
   Hint Resolve Empty_set_minimal.
   
   Theorem Power_set_non_empty :
    forall A : Ensemble U, Non_empty (Ensemble U) (Power_set A).
   Hint Resolve Power_set_non_empty.
   
   Theorem Inclusion_is_an_order : Order (Ensemble U) (Included U).
   Hint Resolve Inclusion_is_an_order.
   
   Theorem Inclusion_is_transitive : Transitive (Ensemble U) (Included U).
   Hint Resolve Inclusion_is_transitive.
   
   Theorem Same_set_equivalence : Equivalence (Ensemble U) (Same_set U).

   Theorem Same_set_reflexive : Reflexive (Ensemble U) (Same_set U).
   Hint Resolve Same_set_reflexive.
   
   Theorem Power_set_PO : PO (Ensemble U).
   Proof.
   apply Definition_of_PO with (Power_set A) (Included U); auto.
   
   Theorem Union_minimal :
    forall a b X : Ensemble U,
    Included U a X -> Included U b X -> Included U (Union U a b) X.
   Hint Resolve Union_minimal.
   
   Theorem Intersection_maximal :
    forall a b X : Ensemble U,
    Included U X a -> Included U X b -> Included U X (Intersection U a b).
   
   Theorem Union_increases_l :
    forall a b : Ensemble U, Included U a (Union U a b).
   
   Theorem Union_increases_r :
    forall a b : Ensemble U, Included U b (Union U a b).
   
   Theorem Intersection_decreases_l :
    forall a b : Ensemble U, Included U (Intersection U a b) a.
   
   Theorem Intersection_decreases_r :
    forall a b : Ensemble U, Included U (Intersection U a b) b.
   Hint Resolve Union_increases_l Union_increases_r Intersection_decreases_l
     Intersection_decreases_r.
   
   Theorem Empty_set_is_Bottom :
    Bottom (Ensemble U) Power_set_PO (Empty_set U).
   Hint Resolve Empty_set_is_Bottom.
  
   Theorem Union_is_Lub :
    forall a b : Ensemble U,
    Included U a A ->
    Included U b A ->
    Lub (Ensemble U) Power_set_PO (Couple (Ensemble U) a b) (Union U a b).

   Theorem Intersection_is_Glb :
    forall a b : Ensemble U,
    Included U a A ->
    Included U b A ->
    Glb (Ensemble U) Power_set_PO (Couple (Ensemble U) a b)
      (Intersection U a b).
   Proof.
   intros a b H' H'0.
   apply Glb_definition.
   apply Lower_Bound_definition; simpl in |- *.
   apply Definition_of_Power_set; auto.
   
   Theorem Empty_set_zero :
    forall X : Ensemble U, Union U (Empty_set U) X = X.
   
   Theorem Union_commutative :
    forall A B : Ensemble U, Union U A B = Union U B A.
   
   Theorem Union_associative :
    forall A B C : Ensemble U,
    Union U (Union U A B) C = Union U A (Union U B C).
   
   Theorem Non_disjoint_union :
    forall (X : Ensemble U) (x : U),
    In U X x -> Union U (Singleton U x) X = X.
   
   Theorem Finite_plus_one_is_finite :
    forall (X : Ensemble U) (x : U),
    Finite U X -> Finite U (Union U (Singleton U x) X).
   Hint Resolve Finite_plus_one_is_finite.
  
   Theorem Singleton_is_finite : forall x : U, Finite U (Singleton U x).
   Hint Resolve Singleton_is_finite.
   
   Theorem Union_of_finite_is_finite :
    forall X Y : Ensemble U,
    Finite U X -> Finite U Y -> Finite U (Union U X Y).
   
End The_power_set_partial_order.
Hint Resolve Empty_set_minimal.
Hint Resolve Power_set_non_empty.
Hint Resolve Inclusion_is_an_order.
Hint Resolve Inclusion_is_transitive.
Hint Resolve Same_set_reflexive.
Hint Resolve Union_minimal.
Hint Resolve Same_set_reflexive.
Hint Resolve Union_increases_l.
Hint Resolve Union_increases_r.
Hint Resolve Intersection_decreases_l.
Hint Resolve Intersection_decreases_r.
Hint Resolve Empty_set_is_Bottom.
Hint Resolve Empty_set_zero.
Hint Resolve Finite_plus_one_is_finite.
Hint Resolve Singleton_is_finite. *)



Section Lemmas_on_partial_orders.

   Variable U : Type.

   Variable B : Ensemble U.

   Variable D : PO U.

   

   Theorem Rel_of_reflexive : forall x : U, Rel_of U D x x.

   elim D; simpl in |- *; auto.

   intros C R H' H'0; elim H'0; auto 10.

   Qed.

   Hint Resolve Rel_of_reflexive.

   

   Theorem Rel_of_antisymmetric : Antisymmetric U (Rel_of U D).

   elim D; simpl in |- *; auto.

   intros C R H' H'0; elim H'0; auto 10.

   Qed.

   Hint Resolve Rel_of_antisymmetric.

   

   Theorem Rel_of_transitive : Transitive U (Rel_of U D).

   elim D; simpl in |- *; auto.

   intros C R H' H'0; elim H'0; auto 10.

   Qed.

   Hint Resolve Rel_of_transitive.

   

   Theorem Couple_included_in_carrier :

    forall x y : U,

    In U (Carrier_of U D) x ->

    In U (Carrier_of U D) y -> Included U (Couple U x y) (Carrier_of U D).

   intros x y H' H'0; red in |- *; auto 20.

   intros x0 H'1; elim H'1; auto 20.

   Qed.

   Hint Resolve Couple_included_in_carrier.

   

   Theorem Lub_is_in_Carrier :

    forall (bsup : U) (X : Ensemble U),

    Included U X (Carrier_of U D) ->

    Lub U D X bsup -> In U (Carrier_of U D) bsup.

   intros bsup X H' H'0; elim H'0; auto 20.

   intro H'1; elim H'1; auto 20.

   Qed.

   

   Theorem Singleton_has_lub :

    forall x : U, In U (Carrier_of U D) x -> Lub U D (Singleton U x) x.

   intros x H'; auto 20.

   apply Lub_definition; auto 10.

   apply Upper_Bound_definition; auto 10.

   intros y H'0; elim H'0; auto 10.

   intros y H'0; elim H'0; auto 10.

   Qed.

   Hint Resolve Singleton_has_lub.

   

   Theorem Empty_set_has_Upper_Bound :

    exists maj : U, Upper_Bound U D (Empty_set U) maj.

   elim D.

   intros C R n o.

   elim n.

   intros x H'; exists x.

   apply Upper_Bound_definition; auto.

   intros y H'0; elim H'0; auto.

   Qed.

   Hint Resolve Empty_set_has_Upper_Bound.

   

   Theorem Empty_set_has_lub :

    Cpo U D -> exists bsup : U, Lub U D (Empty_set U) bsup.

   intro H'; elim H'.

   intro h; elim h; intros bot E; clear h.

   intro H'0; exists bot.

   apply Lub_definition.

   apply Upper_Bound_definition.

   elim E; auto.

   intros y H'1; elim H'1; auto.

   intros y H'1; elim H'1; auto.

   elim E; auto.

   Qed.

   Hint Resolve Empty_set_has_lub.

 

   Theorem Upper_downward_stable :

    forall (A B : Ensemble U) (maj : U),

    Included U A (Carrier_of U D) ->

    Included U B (Carrier_of U D) ->

    Included U A B -> Upper_Bound U D B maj -> Upper_Bound U D A maj.

   clear B.

   intros A BB maj H' H'0 H'1 H'2; elim H'2; auto.

   Qed.

   

   Theorem Conditionally_complete_has_a_bottom :

    Conditionally_complete U D -> exists bot : U, Bottom U D bot.

   intro H'; elim H'; auto 10.

   intro H'0; generalize (H'0 (Empty_set U)); intro h; lapply h;

    [ intro H'1; lapply H'1;

       [ intro h0; elim h0; intros bsup E; clear h H'1 h0; elim E | clear h ]

    | clear h ]; auto 10.

   intros H'1 H'2; exists bsup; apply Bottom_definition; auto 10.

   elim H'1; auto 10.

   intros y H'3; try assumption; auto 10.

   apply H'2; auto 10.

   apply Upper_Bound_definition; auto 10.

   intros y0 H'4; elim H'4; auto 10.

   Qed.

   Hint Resolve Conditionally_complete_has_a_bottom.



   Theorem Compatible_is_reflexive : Reflexive U (Compatible U D).

   red in |- *; intro x; red in |- *.

   exists x; intros H' H'0; split; [ idtac | apply Upper_Bound_definition ];

    auto.

   intros y H'1; elim H'1; auto.

   Qed.

   

   Theorem Couple_is_symmetric :

    forall x y : U, Couple U x y = Couple U y x :>Ensemble U.

   intros x y; apply Extensionality_Ensembles; apply Same_set_intro;

    red in |- *; (intros x0 H'; elim H'); auto 10.

   Qed.

   

   Theorem Compatible_is_symmetric : Symmetric U (Compatible U D).

   red in |- *; unfold Compatible in |- *.

   intros x y h; elim h; intros z E; clear h.

   elim Couple_is_symmetric; exists z; auto.

   Qed.

   

End Lemmas_on_partial_orders.

Hint Resolve Couple_included_in_carrier.

Hint Resolve Singleton_has_lub.

Hint Resolve Empty_set_has_Upper_Bound.

Hint Resolve Empty_set_has_lub.

Hint Resolve Conditionally_complete_has_a_bottom.



