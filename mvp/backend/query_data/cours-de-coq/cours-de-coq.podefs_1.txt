
Require Import Ensembles.
(* Ensembles:
Require Import Classical.

Section Ensembles.
   Variable U : Type.
   
   Definition Ensemble := U -> Prop.
   
   Definition In (B : Ensemble) (x : U) : Prop := B x.
   
   Definition Included (B C : Ensemble) : Prop :=
     forall x : U, In B x -> In C x.
   
   Inductive Empty_set : Ensemble :=.
   
   Inductive Singleton (x : U) : Ensemble :=
       In_singleton : In (Singleton x) x.
   
   Inductive Union (B C : Ensemble) : Ensemble :=
     | Union_introl : forall x : U, In B x -> In (Union B C) x
     | Union_intror : forall x : U, In C x -> In (Union B C) x.
   
   Inductive Intersection (B C : Ensemble) : Ensemble :=
       Intersection_intro :
         forall x : U, In B x -> In C x -> In (Intersection B C) x.
   
   Inductive Couple (x y : U) : Ensemble :=
     | Couple_l : In (Couple x y) x
     | Couple_r : In (Couple x y) y.
   
   Inductive Setminus (B C : Ensemble) : Ensemble :=
       Setminus_intro :
         forall x : U, In B x -> ~ In C x -> In (Setminus B C) x.
   
   Inductive Disjoint (B C : Ensemble) : Prop :=
       Disjoint_intro :
         (forall x : U, ~ In (Intersection B C) x) -> Disjoint B C.
   
   Inductive Non_empty (B : Ensemble) : Prop :=
       Non_empty_intro : forall x : U, In B x -> Non_empty B.
   
   Inductive Finite : Ensemble -> Prop :=
     | Empty_is_finite : Finite Empty_set
     | Union_is_finite :
         forall A : Ensemble,
         Finite A -> forall x : U, ~ In A x -> Finite (Union (Singleton x) A).

   Definition Same_set (B C : Ensemble) : Prop :=
     Included B C /\ Included C B.
      
   Lemma Same_set_intro :
    forall B C : Ensemble, Included B C -> Included C B -> Same_set B C.

   Axiom
     Extensionality_Ensembles :
       forall A B : Ensemble, Same_set A B -> A = B :>Ensemble.
   
End Ensembles.
Hint Unfold In.
Hint Unfold Included.
Hint Resolve Same_set_intro.
Hint Resolve Union_introl Union_intror.
Hint Resolve Intersection_intro.
Hint Resolve In_singleton.
Hint Resolve Couple_l Couple_r.
Hint Resolve Setminus_intro.
Hint Resolve Disjoint_intro.
Hint Resolve Empty_is_finite Union_is_finite.
Hint Resolve Extensionality_Ensembles. *)
Require Import Relations_1.
(* Relations_1:
Section Relations_1.
   Variable U : Type.
   
   Definition Relation := U -> U -> Prop.
   Variable R : Relation.
   
   Definition Reflexive : Prop := forall x : U, R x x.
   
   Definition Transitive : Prop := forall x y z : U, R x y -> R y z -> R x z.
   
   Definition Symmetric : Prop := forall x y : U, R x y -> R y x.
   
   Definition Antisymmetric : Prop :=
     forall x y : U, R x y -> R y x -> x = y :>U.
   
   Definition contains (R R' : Relation) : Prop :=
     forall x y : U, R' x y -> R x y.
   
   Definition same_relation (R R' : Relation) : Prop :=
     contains R R' /\ contains R' R.
   
   Inductive Preorder : Prop :=
       Definition_of_preorder : Reflexive -> Transitive -> Preorder.
   
   Inductive Order : Prop :=
       Definition_of_order :
         Reflexive -> Transitive -> Antisymmetric -> Order.
   
   Inductive Equivalence : Prop :=
       Definition_of_equivalence :
         Reflexive -> Transitive -> Symmetric -> Equivalence.
   
   Inductive PER : Prop :=
       Definition_of_PER : Symmetric -> Transitive -> PER.
   
End Relations_1.
Hint Unfold Reflexive.
Hint Unfold Transitive.
Hint Unfold Antisymmetric.
Hint Unfold Symmetric.
Hint Unfold contains.
Hint Unfold same_relation.
Hint Resolve Definition_of_preorder.
Hint Resolve Definition_of_order.
Hint Resolve Definition_of_equivalence.
Hint Resolve Definition_of_PER. *)
Require Import podefs.
(* podefs:
Require Import Ensembles.
Require Import Relations_1.

Section Partial_orders.
   Variable U : Type.
   
   Definition Carrier := Ensemble U.
   
   Definition Rel := Relation U.
   
   Inductive PO : Type :=
       Definition_of_PO :
         forall (C : Carrier) (R : Rel), Non_empty U C -> Order U R -> PO.
   
   Theorem Carrier_of : PO -> Carrier.

   Theorem Rel_of : PO -> Rel.

   Definition SRel_of (p : PO) : Rel := fun x y : U => Rel_of p x y /\ x <> y.
   
End Partial_orders.
Hint Unfold Carrier_of Rel_of. *)

Section Bounds.
   Variable U : Type.
   Variable D : PO U.
   
   Let C := Carrier_of U D.
   
   Let R := Rel_of U D.
   
   Inductive Totally_ordered (B : Ensemble U) : Prop :=
       Totally_ordered_definition :
         (Included U B C ->
          forall x y : U, Included U (Couple U x y) B -> R x y \/ R y x) ->
         Totally_ordered B.
   
   Inductive Upper_Bound (B : Ensemble U) (x : U) : Prop :=
       Upper_Bound_definition :
         In U C x -> (forall y : U, In U B y -> R y x) -> Upper_Bound B x.
   
   Inductive Lower_Bound (B : Ensemble U) (x : U) : Prop :=
       Lower_Bound_definition :
         In U C x -> (forall y : U, In U B y -> R x y) -> Lower_Bound B x.
   
   Inductive Lub (B : Ensemble U) (x : U) : Prop :=
       Lub_definition :
         Upper_Bound B x ->
         (forall y : U, Upper_Bound B y -> R x y) -> Lub B x.
   
   Inductive Glb (B : Ensemble U) (x : U) : Prop :=
       Glb_definition :
         Lower_Bound B x ->
         (forall y : U, Lower_Bound B y -> R y x) -> Glb B x.
   
   Inductive Bottom (bot : U) : Prop :=
       Bottom_definition :
         In U C bot -> (forall y : U, In U C y -> R bot y) -> Bottom bot.
   
   Definition Compatible (x y : U) : Prop :=
     exists z : U,
       In U C x -> In U C y -> In U C z /\ Upper_Bound (Couple U x y) z.
   
   Inductive Directed (X : Ensemble U) : Prop :=
       Definition_of_Directed :
         Included U X C ->
         Non_empty U X ->
         (forall x1 x2 : U,
          Included U (Couple U x1 x2) X ->
          exists x3 : U, In U X x3 /\ Upper_Bound (Couple U x1 x2) x3) ->
         Directed X.
   
   Inductive Complete : Prop :=
       Definition_of_Complete :
         (exists bot : U, Bottom bot) ->
         (forall X : Ensemble U, Directed X -> exists bsup : U, Lub X bsup) ->
         Complete.
   
   Definition Cpo : Prop := Complete.
   
   Definition Chain : Prop := Totally_ordered C.
   
   Inductive Conditionally_complete : Prop :=
       Definition_of_Conditionally_complete :
         (forall X : Ensemble U,
          Included U X C ->
          (exists maj : U, Upper_Bound X maj) -> exists bsup : U, Lub X bsup) ->
         Conditionally_complete.
   
End Bounds.
Hint Unfold Carrier_of.
Hint Unfold Rel_of.
Hint Resolve Totally_ordered_definition Upper_Bound_definition
  Lower_Bound_definition Lub_definition Glb_definition Bottom_definition
  Definition_of_Complete Definition_of_Complete
  Definition_of_Conditionally_complete.