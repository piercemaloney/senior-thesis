

Require Import Relations_1.
(* Relations_1:
Section Relations_1.
   Variable U : Type.
   
   Definition Relation := U -> U -> Prop.
   Variable R : Relation.
   
   Definition Reflexive : Prop := forall x : U, R x x.
   
   Definition Transitive : Prop := forall x y z : U, R x y -> R y z -> R x z.
   
   Definition Symmetric : Prop := forall x y : U, R x y -> R y x.
   
   Definition Antisymmetric : Prop :=
     forall x y : U, R x y -> R y x -> x = y :>U.
   
   Definition contains (R R' : Relation) : Prop :=
     forall x y : U, R' x y -> R x y.
   
   Definition same_relation (R R' : Relation) : Prop :=
     contains R R' /\ contains R' R.
   
   Inductive Preorder : Prop :=
       Definition_of_preorder : Reflexive -> Transitive -> Preorder.
   
   Inductive Order : Prop :=
       Definition_of_order :
         Reflexive -> Transitive -> Antisymmetric -> Order.
   
   Inductive Equivalence : Prop :=
       Definition_of_equivalence :
         Reflexive -> Transitive -> Symmetric -> Equivalence.
   
   Inductive PER : Prop :=
       Definition_of_PER : Symmetric -> Transitive -> PER.
   
End Relations_1.
Hint Unfold Reflexive.
Hint Unfold Transitive.
Hint Unfold Antisymmetric.
Hint Unfold Symmetric.
Hint Unfold contains.
Hint Unfold same_relation.
Hint Resolve Definition_of_preorder.
Hint Resolve Definition_of_order.
Hint Resolve Definition_of_equivalence.
Hint Resolve Definition_of_PER. *)



Section Relations_2.

   Variable U : Type.

   Variable R : Relation U.

   

   Inductive Rstar : Relation U :=

     | Rstar_0 : forall x : U, Rstar x x

     | Rstar_n : forall x y z : U, R x y -> Rstar y z -> Rstar x z.

   

   Inductive Rstar1 : Relation U :=

     | Rstar1_0 : forall x : U, Rstar1 x x

     | Rstar1_1 : forall x y : U, R x y -> Rstar1 x y

     | Rstar1_n : forall x y z : U, Rstar1 x y -> Rstar1 y z -> Rstar1 x z.

   

   Inductive Rplus : Relation U :=

     | Rplus_0 : forall x y : U, R x y -> Rplus x y

     | Rplus_n : forall x y z : U, R x y -> Rplus y z -> Rplus x z.

   

   Definition Strongly_confluent : Prop :=

     forall x a b : U, R x a -> R x b -> exists z : U, R a z /\ R b z.

   

End Relations_2.

Hint Resolve Rstar_0.

Hint Resolve Rstar1_0.

Hint Resolve Rstar1_1.

Hint Resolve Rplus_0.
