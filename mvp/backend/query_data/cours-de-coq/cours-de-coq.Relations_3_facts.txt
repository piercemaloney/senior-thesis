
Require Import Relations_1.
(* Relations_1:
Section Relations_1.
   Variable U : Type.
   
   Definition Relation := U -> U -> Prop.
   Variable R : Relation.
   
   Definition Reflexive : Prop := forall x : U, R x x.
   
   Definition Transitive : Prop := forall x y z : U, R x y -> R y z -> R x z.
   
   Definition Symmetric : Prop := forall x y : U, R x y -> R y x.
   
   Definition Antisymmetric : Prop :=
     forall x y : U, R x y -> R y x -> x = y :>U.
   
   Definition contains (R R' : Relation) : Prop :=
     forall x y : U, R' x y -> R x y.
   
   Definition same_relation (R R' : Relation) : Prop :=
     contains R R' /\ contains R' R.
   
   Inductive Preorder : Prop :=
       Definition_of_preorder : Reflexive -> Transitive -> Preorder.
   
   Inductive Order : Prop :=
       Definition_of_order :
         Reflexive -> Transitive -> Antisymmetric -> Order.
   
   Inductive Equivalence : Prop :=
       Definition_of_equivalence :
         Reflexive -> Transitive -> Symmetric -> Equivalence.
   
   Inductive PER : Prop :=
       Definition_of_PER : Symmetric -> Transitive -> PER.
   
End Relations_1.
Hint Unfold Reflexive.
Hint Unfold Transitive.
Hint Unfold Antisymmetric.
Hint Unfold Symmetric.
Hint Unfold contains.
Hint Unfold same_relation.
Hint Resolve Definition_of_preorder.
Hint Resolve Definition_of_order.
Hint Resolve Definition_of_equivalence.
Hint Resolve Definition_of_PER. *)
Require Import Relations_2.
(* Relations_2:
Require Import Relations_1.

Section Relations_2.
   Variable U : Type.
   Variable R : Relation U.
   
   Inductive Rstar : Relation U :=
     | Rstar_0 : forall x : U, Rstar x x
     | Rstar_n : forall x y z : U, R x y -> Rstar y z -> Rstar x z.
   
   Inductive Rstar1 : Relation U :=
     | Rstar1_0 : forall x : U, Rstar1 x x
     | Rstar1_1 : forall x y : U, R x y -> Rstar1 x y
     | Rstar1_n : forall x y z : U, Rstar1 x y -> Rstar1 y z -> Rstar1 x z.
   
   Inductive Rplus : Relation U :=
     | Rplus_0 : forall x y : U, R x y -> Rplus x y
     | Rplus_n : forall x y z : U, R x y -> Rplus y z -> Rplus x z.
   
   Definition Strongly_confluent : Prop :=
     forall x a b : U, R x a -> R x b -> exists z : U, R a z /\ R b z.
   
End Relations_2.
Hint Resolve Rstar_0.
Hint Resolve Rstar1_0.
Hint Resolve Rstar1_1.
Hint Resolve Rplus_0. *)
Require Import Relations_3.
(* Relations_3:
Require Import Relations_1.
Require Import Relations_2.

Section Relations_3.
   Variable U : Type.
   Variable R : Relation U.
   
   Definition coherent (x y : U) : Prop :=
     exists z : U, Rstar U R x z /\ Rstar U R y z.
   
   Definition locally_confluent (x : U) : Prop :=
     forall y z : U, R x y -> R x z -> coherent y z.
   
   Definition Locally_confluent : Prop := forall x : U, locally_confluent x.
   
   Definition confluent (x : U) : Prop :=
     forall y z : U, Rstar U R x y -> Rstar U R x z -> coherent y z.
   
   Definition Confluent : Prop := forall x : U, confluent x.
   
   Inductive noetherian : U -> Prop :=
       definition_of_noetherian :
         forall x : U, (forall y : U, R x y -> noetherian y) -> noetherian x.
   
   Definition Noetherian : Prop := forall x : U, noetherian x.
   
End Relations_3.
Hint Unfold coherent.
Hint Unfold locally_confluent.
Hint Unfold confluent.
Hint Unfold Confluent.
Hint Resolve definition_of_noetherian.
Hint Unfold Noetherian. *)
Require Import Relations_2_facts.
(* Relations_2_facts:
Require Import Relations_1.
Require Import Relations_2.

Theorem Rstar_reflexive :
 forall (U : Type) (R : Relation U), Reflexive U (Rstar U R).

Theorem Rplus_contains_R :
 forall (U : Type) (R : Relation U), contains U (Rplus U R) R.

Theorem Rstar_contains_R :
 forall (U : Type) (R : Relation U), contains U (Rstar U R) R.

Theorem Rstar_contains_Rplus :
 forall (U : Type) (R : Relation U), contains U (Rstar U R) (Rplus U R).

Theorem Rstar_transitive :
 forall (U : Type) (R : Relation U), Transitive U (Rstar U R).

Theorem Rstar_cases :
 forall (U : Type) (R : Relation U) (x y : U),
 Rstar U R x y -> x = y :>U \/ (exists u : U, R x u /\ Rstar U R u y).

Theorem Rstar_equiv_Rstar1 :
 forall (U : Type) (R : Relation U), same_relation U (Rstar U R) (Rstar1 U R).

Theorem Rsym_imp_Rstarsym :
 forall (U : Type) (R : Relation U), Symmetric U R -> Symmetric U (Rstar U R).

Theorem Sstar_contains_Rstar :
 forall (U : Type) (R S : Relation U),
 contains U (Rstar U S) R -> contains U (Rstar U S) (Rstar U R).

Theorem star_monotone :
 forall (U : Type) (R S : Relation U),
 contains U S R -> contains U (Rstar U S) (Rstar U R).

Theorem RstarRplus_RRstar :
 forall (U : Type) (R : Relation U) (x y z : U),
 Rstar U R x y -> Rplus U R y z -> exists u : U, R x u /\ Rstar U R u z.

Theorem Lemma1 :
 forall (U : Type) (R : Relation U),
 Strongly_confluent U R ->
 forall x b : U,
 Rstar U R x b -> forall a : U, R x a -> exists z : U, Rstar U R a z /\ R b z. *)

Theorem Rstar_imp_coherent :
 forall (U : Type) (R : Relation U) (x y : U),
 Rstar U R x y -> coherent U R x y.
intros U R x y H'; red in |- *.
exists y; auto.
Qed.
Hint Resolve Rstar_imp_coherent.

Theorem coherent_symmetric :
 forall (U : Type) (R : Relation U), Symmetric U (coherent U R).
unfold coherent at 1 in |- *.
intros U R; red in |- *.
intros x y h; elim h; intros z h0; elim h0; intros H' H'0; clear h h0.
exists z; auto.
Qed.

Theorem Strong_confluence :
 forall (U : Type) (R : Relation U), Strongly_confluent U R -> Confluent U R.
intros U R H'; red in |- *.
intro x; red in |- *; intros a b H'0.
unfold coherent at 1 in |- *.
generalize b; clear b.
elim H'0; clear H'0.
intros x0 b H'1; exists b; auto.
intros x0 y z H'1 H'2 H'3 b H'4.
generalize (Lemma1 U R); intro h; lapply h;
 [ intro H'0; generalize (H'0 x0 b); intro h0; lapply h0;
    [ intro H'5; generalize (H'5 y); intro h1; lapply h1;
       [ intro h2; elim h2; intros z0 h3; elim h3; intros H'6 H'7;
          clear h h0 h1 h2 h3
       | clear h h0 h1 ]
    | clear h h0 ]
 | clear h ]; auto.
generalize (H'3 z0); intro h; lapply h;
 [ intro h0; elim h0; intros z1 h1; elim h1; intros H'8 H'9; clear h h0 h1
 | clear h ]; auto.
exists z1; split; auto.
apply Rstar_n with z0; auto.
Qed.

Theorem Strong_confluence_direct :
 forall (U : Type) (R : Relation U), Strongly_confluent U R -> Confluent U R.
intros U R H'; red in |- *.
intro x; red in |- *; intros a b H'0.
unfold coherent at 1 in |- *.
generalize b; clear b.
elim H'0; clear H'0.
intros x0 b H'1; exists b; auto.
intros x0 y z H'1 H'2 H'3 b H'4.
cut (exists t : U, Rstar U R y t /\ R b t).
intro h; elim h; intros t h0; elim h0; intros H'0 H'5; clear h h0.
generalize (H'3 t); intro h; lapply h;
 [ intro h0; elim h0; intros z0 h1; elim h1; intros H'6 H'7; clear h h0 h1
 | clear h ]; auto.
exists z0; split; [ assumption | idtac ].
apply Rstar_n with t; auto.
generalize H'1; generalize y; clear H'1.
elim H'4.
intros x1 y0 H'0; exists y0; auto.
intros x1 y0 z0 H'0 H'1 H'5 y1 H'6.
red in H'.
generalize (H' x1 y0 y1); intro h; lapply h;
 [ intro H'7; lapply H'7;
    [ intro h0; elim h0; intros z1 h1; elim h1; intros H'8 H'9;
       clear h H'7 h0 h1
    | clear h ]
 | clear h ]; auto.
generalize (H'5 z1); intro h; lapply h;
 [ intro h0; elim h0; intros t h1; elim h1; intros H'7 H'10; clear h h0 h1
 | clear h ]; auto.
exists t; split; auto.
apply Rstar_n with z1; auto.
Qed.

Theorem Noetherian_contains_Noetherian :
 forall (U : Type) (R R' : Relation U),
 Noetherian U R -> contains U R R' -> Noetherian U R'.
unfold Noetherian in |- *.
intros U R R' H' H'0 x.
elim (H' x); auto.
Qed.

Theorem Newman :
 forall (U : Type) (R : Relation U),
 Noetherian U R -> Locally_confluent U R -> Confluent U R.
intros U R H' H'0; red in |- *; intro x.
elim (H' x); unfold confluent in |- *.
intros x0 H'1 H'2 y z H'3 H'4.
generalize (Rstar_cases U R x0 y); intro h; lapply h;
 [ intro h0; elim h0;
    [ clear h h0; intro h1
    | intro h1; elim h1; intros u h2; elim h2; intros H'5 H'6;
       clear h h0 h1 h2 ]
 | clear h ]; auto.
elim h1; auto.
generalize (Rstar_cases U R x0 z); intro h; lapply h;
 [ intro h0; elim h0;
    [ clear h h0; intro h1
    | intro h1; elim h1; intros v h2; elim h2; intros H'7 H'8;
       clear h h0 h1 h2 ]
 | clear h ]; auto.
elim h1; generalize coherent_symmetric; intro t; red in t; auto.
unfold Locally_confluent, locally_confluent, coherent in H'0.
generalize (H'0 x0 u v); intro h; lapply h;
 [ intro H'9; lapply H'9;
    [ intro h0; elim h0; intros t h1; elim h1; intros H'10 H'11;
       clear h H'9 h0 h1
    | clear h ]
 | clear h ]; auto.
clear H'0.
unfold coherent at 1 in H'2.
generalize (H'2 u); intro h; lapply h;
 [ intro H'0; generalize (H'0 y t); intro h0; lapply h0;
    [ intro H'9; lapply H'9;
       [ intro h1; elim h1; intros y1 h2; elim h2; intros H'12 H'13;
          clear h h0 H'9 h1 h2
       | clear h h0 ]
    | clear h h0 ]
 | clear h ]; auto.
generalize Rstar_transitive; intro T; red in T.
generalize (H'2 v); intro h; lapply h;
 [ intro H'9; generalize (H'9 y1 z); intro h0; lapply h0;
    [ intro H'14; lapply H'14;
       [ intro h1; elim h1; intros z1 h2; elim h2; intros H'15 H'16;
          clear h h0 H'14 h1 h2
       | clear h h0 ]
    | clear h h0 ]
 | clear h ]; auto.
red in |- *; (exists z1; split); auto.
apply T with y1; auto.
apply T with t; auto.
Qed.
