
Require Export Lci.
(* Lci:
Section Internal.

Variable S : Set.
Variable G : S -> Prop.
Variable Add : S -> S -> S.
Variable O I : S.
Variable Opp Inv : S -> S.

Definition intern := forall x y : S, G x -> G y -> G (Add x y).

Definition commutativity := forall x y : S, Add x y = Add y x.

Definition associativity :=
  forall x y z : S, Add x (Add y z) = Add (Add x y) z :>S.

Definition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) 
  (O : S) := G O /\ (forall x : S, G x -> Add x O = x /\ Add O x = x).

Lemma neutral_add : neutral S G Add O -> O = Add O O.

Definition is_opposite (x y : S) := G x /\ G y /\ Add x y = O /\ Add y x = O.

Lemma opp_com :
 commutativity ->
 forall x y : S, G x -> G y -> Add x y = O -> is_opposite x y.

Definition opposite := forall x : S, G x -> is_opposite x (Opp x).

Definition distributivity (S : Set) (Add Mult : S -> S -> S) :=
  forall x y z : S,
  Mult (Add x y) z = Add (Mult x z) (Mult y z) /\
  Mult x (Add y z) = Add (Mult x y) (Mult x z).

End Internal. *)

Definition antisym (A : Set) (R : A -> A -> Prop) :=
  forall x y : A, R x y -> R y x -> x = y :>A.

Definition pi1 : forall (A : Set) (P : A -> Prop), {x : A | P x} -> A.

Proof.
simple induction 1; auto.
Defined.

Lemma pi2 :
 forall (A : Set) (P : A -> Prop) (p : {x : A | P x}), P (pi1 A P p).

Proof.
simple induction p; unfold pi1 in |- *; trivial.
Qed.

Definition inversible (S : Set) (Mult : S -> S -> S) 
  (I x : S) := exists y : S, Mult x y = I /\ Mult y x = I.

Lemma inv_com :
 forall (S : Set) (Mult : S -> S -> S) (I x : S),
 commutativity S Mult ->
 (exists y : S, Mult x y = I) -> inversible S Mult I x.

Proof.
intros; unfold inversible in |- *.
elim H0; intros.
exists x0.
split. 
assumption.
elim (H x x0); assumption.
Qed.  