From mathcomp.ssreflect

Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.

From mathcomp

Require Import path.

Require Import Eqdep.

Require Import Relation_Operators.

From fcsl

Require Import pred prelude ordtype finmap pcm unionmap heap.

From DiSeL

Require Import Freshness State EqTypeX.
(* Freshness:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Keys.
Variables (K : ordType) (V : Type) (U : union_map_class K V).
Implicit Types (k : K) (v : V) (f : U).

Lemma keys_last_mono f1 f2 k :
        path oleq k (dom f1) ->
        path oleq k (dom f2) ->
        (forall x, x \in dom f1 -> x \in dom f2) ->
        oleq (last k (dom f1)) (last k (dom f2)).

End Keys.

Section FreshLastKey.
Variable V : Type.
Implicit Type f : union_map [ordType of nat] V.

Definition last_key f := last 0 (dom f).

Lemma last_key0 : last_key Unit = 0.

Lemma last_key_dom f : valid f -> last_key f \notin dom f -> f = Unit.

Lemma dom_last_key f :  valid f -> ~~ empb f -> last_key f \in dom f.

Lemma last_key_max f x : x \in dom f -> x <= last_key f.

Lemma max_key_last f x :
        x \in dom f -> {in dom f, forall y, y <= x} -> last_key f = x.

Lemma last_keyPt (x : nat) v : last_key (x \\-> v) = x.

Lemma hist_path f : path oleq 0 (dom f).

Lemma last_key_mono f1 f2 :
        {subset dom f1 <= dom f2} -> last_key f1 <= last_key f2.

Lemma last_keyfUn f1 f2 :
        valid (f1 \+ f2) -> last_key f1 <= last_key (f1 \+ f2).

Lemma last_keyUnf f1 f2 :
        valid (f1 \+ f2) -> last_key f2 <= last_key (f1 \+ f2).

Definition fresh f := (last_key f).+1.

Lemma dom_ordfresh f x : x \in dom f -> x < fresh f.

Lemma dom_freshn f n : fresh f + n \notin dom f.

Lemma dom_fresh f : fresh f \notin dom f.

Lemma valid_fresh f v : valid (f \+ fresh f \\-> v) = valid f.

Lemma valid_fresh' f v i w :
  valid (f \+ i \\-> w) ->
  valid (f \+ fresh (f \+ i \\-> w) \\-> v).

Lemma last_fresh f v : valid f -> last_key (f \+ fresh f \\-> v) = fresh f.

End FreshLastKey. *)
(* State:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness DepMaps EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section TaggedMessages. 

  Structure TaggedMessage :=
    TMsg {
        tag: nat;
                tms_cont :> seq nat          
      }.

End TaggedMessages.

Section Shared.

  Definition Label := [ordType of nat].

  Structure msg (mtype : Type) :=
    Msg {content  : mtype;
         from     : nat;
         to       : nat;
         active   : bool }.

  Definition mid := [ordType of nat].

  Definition soup : Type :=
    union_map mid (msg (TaggedMessage)).

  Variables (s: soup) (V: valid s).

  Definition post_msg m : soup * mid :=
    let: f := fresh s in (s \+ f \\-> m, f).

  Lemma post_valid m :  valid (post_msg m).1.

  Lemma post_fresh m : (post_msg m).2 \notin dom s.

  Definition mark_msg T (m : msg T) : msg T :=
    Msg (content m) (from m) (to m) false.

  Definition consume_msg (s : soup) (id : mid) : soup :=
    let: mr := find id s in
    if mr is Some m then upd id (mark_msg m) s else s.

  Definition is_active (id : mid) :=
    exists m, find id s = Some m /\ active m.

  Definition is_consumed (id : mid) :=
    exists m, find id s = Some m /\ ~~ active m.

  Lemma find_consume s' (id: mid) m:
    valid s' -> find id s' = Some m ->
    find id (consume_msg s' id) = Some (mark_msg m).

  Lemma find_mark m s' msg :
    valid s' -> find m (consume_msg s' m) = Some msg ->
    exists msg', find m s' = Some msg' /\ msg = mark_msg msg'.

  Lemma mark_other m m' s' :
    valid s' -> m' == m = false -> find m' (consume_msg s' m) = find m' s'.

  Lemma consume_valid s' m : valid s' -> valid (consume_msg s' m).

  Lemma consumeUn (s': soup) (i : mid) mm
        (j : mid) : valid (s' \+ i \\-> mm) ->
    consume_msg (s' \+ i \\-> mm) j = 
    if i == j then s' \+ i \\-> mark_msg mm
    else (consume_msg s' j) \+ (i \\-> mm).

  Notation "'{{' m 'in' s 'at' id '}}'" := (find id s = Some m).
  Notation "'{{' m 'in' s '}}'" := (exists id, {{m in s at id}}).

End Shared.

Section Local.

  Variable U : Type.

  Definition nid := nat.

  Definition lstate_type := union_map [ordType of nid] U.

End Local.

Section Statelets.

  Structure dstatelet  :=
    DStatelet {
                dstate     : lstate_type heap;
        dsoup      : soup
    }.

  Fixpoint empty_lstate (ns : seq nid) :=
    if ns is n :: ns'
    then n \\-> Heap.empty \+ (empty_lstate ns')
    else  Unit.
    
  Definition empty_dstatelet : dstatelet :=
    @DStatelet (empty_lstate [::]) Unit.

  Lemma valid_mt_soup : valid (dsoup empty_dstatelet).

  Lemma valid_mt_state  : valid (dstate empty_dstatelet).

  Lemma mt_nodes : dom (dstate empty_dstatelet) =i [::].

End Statelets.

Module StateGetters.
Section StateGetters.

Definition state := union_map Label dstatelet.

Definition getStatelet (s: state) (i : Label) : dstatelet :=
  match find i s with
  | Some d => d
  | None => empty_dstatelet
  end.

End StateGetters.
End StateGetters.

Export StateGetters. *)
(* EqTypeX:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module EqualityX.

Definition axiom T (e : rel T) := forall x y, reflect (x = y) (e x y).

Structure mixin_of T := Mixin {op : rel T; _ : axiom op}.
Notation class_of := mixin_of (only parsing).

Section ClassDef.

Structure type := Pack {sort; _ : class_of sort; _ : Type}.
Local Coercion sort : type >-> Sortclass.
Variables (T : Type) (cT : type).

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Definition pack c := @Pack T c T.
Definition clone := fun c & cT -> T & phant_id (pack c) cT => pack c.

End ClassDef.

Module Exports.
Coercion sort : type >-> Sortclass.
Notation eqTypeX := type.
Notation EqMixinX := Mixin.
Notation EqTypeX T m := (@pack T m).
End Exports.

End EqualityX.
Export EqualityX.Exports.

Section EqualityConversion.

Variable U: eqTypeX.
Definition eq_opX T := EqualityX.op (EqualityX.class T).

Lemma eqxP : Equality.axiom (@eq_opX U).

Canonical eqMixinX := EqMixin eqxP.
Canonical eqTypeX' := EqType U eqMixinX.                                   

End EqualityConversion. *)

Set Implicit Arguments.

Unset Strict Implicit.

Unset Printing Implicit Defensive.



Definition getLocal (n : nid) (d : dstatelet) : heap :=

  match find n (dstate d) with

  | Some h => h

  | None => Unit

  end.



Lemma getLocalU n m d s :

  valid (dstate d) -> m \in dom (dstate d) ->

  getLocal n d = (getLocal n {| dstate := upd m (getLocal m d) (dstate d); dsoup := s |}).

Proof.

move=>V H2; move/um_eta: (H2)=>[v2][F2 _].

rewrite /getLocal F2/=; case X: (n == m); last by rewrite findU X/=.

by move/eqP: X=>X; subst m; rewrite findU eqxx/=V F2.

Qed.

        

Module Coherence.



Section CohDef.



Variable nodes: dstatelet -> pred nid.



Notation protocol_soup  := (soup (TaggedMessage)).



Structure mixin_of (coh : Pred dstatelet) := Mixin {

    _   : forall d, coh d -> valid (dstate d);

    _   : forall d, coh d -> valid (dsoup d);

    _   : forall d, coh d -> dom (dstate d) =i nodes d;

}.



End CohDef.



Section ClassDef.



Variable nodes: dstatelet -> pred nid.



Notation class_of := mixin_of (only parsing).



Structure cohpred : Type := Pack {sort : dstatelet -> Prop;

                                  _ : class_of nodes sort}.

Local Coercion sort : cohpred >-> Funclass.



Variables (T : dstatelet -> Prop) (cT : cohpred).



Definition class := let: Pack _ c as cT' := cT

                    return class_of nodes cT' in c.



Definition pack c := @Pack T c.

Definition clone := fun c & T = cT & phant_id (pack c) cT => pack c. 



End ClassDef.



Module Exports.

Section Exports.



Variable Lstate : Type.

Variable nodes: dstatelet -> pred nid.



Coercion sort : cohpred >-> Funclass.

Definition cohpred := cohpred.

Definition CohPredMixin := Mixin.

Definition CohPred T m := (@pack T m).



Notation "[ 'cohPredMixin' 'of' T ]" := (class _ : mixin_of T)

  (at level 0, format "[ 'cohPredMixin'  'of'  T ]") : form_scope.

Notation "[ 'cohpred' 'of' T 'for' C ]" := (@clone T C _ (erefl _) id)

  (at level 0, format "[ 'cohpred'  'of'  T  'for'  C ]") : form_scope.

Notation "[ 'cohpred' 'of' T ]" := (@clone T _ _ (erefl _) id)

  (at level 0, format "[ 'cohpred'  'of'  T ]") : form_scope.



Canonical cohpred_PredType := mkPredType (@sort nodes).



Variable coh : cohpred nodes.



Lemma cohVl d : d \In coh -> valid (dstate d).

Proof. by case: coh=>p [H1 H2 H3]; apply: H1. Qed.



Lemma cohVs d : d \In coh -> valid (dsoup d).

Proof. by case: coh=>p [H1 H2 H3]; apply: H2. Qed.



Lemma cohDom d : d \In coh -> dom (dstate d) =i nodes d.

Proof. by case: coh=>p [H1 H2 H3]; apply: H3. Qed.



End Exports.

End Exports.

End Coherence.



Export Coherence.Exports.



Module Transitions.

Section Transitions.



Variable nodes: dstatelet -> pred nid.



Variable coh : cohpred nodes.



Notation lstate := heap%type.



Definition send_step_t (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop) :=

  forall (this to : nid) (d : dstatelet)

         (msg : seq nat) (pf : send_safe this to d msg),

    option lstate.



Definition s_step_coh_t t_snd

           (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop)

           (send_step : send_step_t send_safe) :=

  forall this to d msg (pf : send_safe this to d msg) b,

    let: f := dstate d in

    let: s := dsoup d  in

    Some b = @send_step this to d msg pf ->         

    let: f' := upd this b f in

    let: tms := TMsg t_snd msg in 

    let: s' := (post_msg s (Msg tms this to true)).1 in 

    coh (DStatelet f' s').



Structure send_trans := SendTrans

    {

      t_snd : nat;



      send_safe : nid -> nid -> dstatelet -> seq nat -> Prop;

      s_safe_coh : forall this to d m, send_safe this to d m -> coh d;

      s_safe_in  : forall this to d m, send_safe this to d m ->

                                       this \in nodes d /\ to \in nodes d;  



      send_step : send_step_t send_safe;



      s_safe_def : forall this to d msg,

          send_safe this to d msg <->

          exists b pf, @send_step this to d msg pf = Some b;



      s_step_coh : s_step_coh_t t_snd send_step 

    }.



Definition receive_step_t :=

  forall (this from: nid) (m : seq nat)

         (d : dstatelet) (pf : coh d)

         (pf' : this \in nodes d), lstate.



Definition r_step_coh_t (msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool)

           t_rcv (receive_step : receive_step_t) :=

  forall (d : dstatelet) from this i (C : coh d) (pf' : this \in nodes d)

         (m : TaggedMessage),

    let: f := dstate d in

    let: s := dsoup d  in

    this \in dom f ->

    find i s = Some (Msg m from this true) ->

    msg_wf d C this from m -> tag m = t_rcv ->

    let: loc' := receive_step this from m d C pf' in

    let: s'' := consume_msg s i in

    let: f' := upd this loc' f in

    coh (DStatelet f' s'').



Structure receive_trans := ReceiveTrans

    {

      t_rcv : nat;



      msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool;



      receive_step : receive_step_t;



      r_step_coh : r_step_coh_t msg_wf t_rcv receive_step

    }.



End Transitions.



Module Exports.



Definition SendTrans := SendTrans.

Definition send_trans := send_trans.

Definition ReceiveTrans := ReceiveTrans.

Definition receive_trans := receive_trans.



Definition t_snd := t_snd.

Definition send_safe := send_safe.

Definition send_step := send_step.

Definition send_step_t := send_step_t.



Definition s_safe_coh := s_safe_coh.

Definition s_safe_in := s_safe_in.

Definition s_safe_def := s_safe_def.

Definition s_step_coh := s_step_coh.

Definition s_step_coh_t := s_step_coh_t.



Definition t_rcv := t_rcv.

Definition msg_wf := msg_wf.



Definition receive_step := receive_step.

Definition receive_step_t := receive_step_t.

Definition r_step_coh := r_step_coh.

Definition r_step_coh_t := r_step_coh_t.



End Exports.



End Transitions.



Export Transitions.Exports.



Module Protocols.

Section Protocols.



Definition snd_tags {nodes} {coh : cohpred nodes}

           (sts : seq (send_trans coh)) := 

  map (@t_snd nodes _) sts.



Definition rcv_tags {nodes} {coh : cohpred nodes} (sts : seq (receive_trans coh)) :=

  map (@t_rcv nodes _) sts.



Structure protocol := Protocol {

  nodes: dstatelet -> pred nid;

  plab : Label;                        

  coh : cohpred nodes ;

  snd_trans : seq (send_trans coh);

  rcv_trans : seq (receive_trans coh);



  snd_uniq : uniq (snd_tags snd_trans);

  rcv_uniq : uniq (rcv_tags rcv_trans);

}.



End Protocols.



Module Exports.

Section Exports.



Definition protocol := protocol.

Definition Protocol := Protocol.

Definition plab := plab.

Definition nodes := nodes.

Definition coh := coh.

Definition snd_trans := snd_trans.

Definition rcv_trans := rcv_trans.



Definition snd_tags p := snd_tags (snd_trans p).

Definition rcv_tags p := rcv_tags (rcv_trans p).



Definition snd_uniq := snd_uniq.

Definition rcv_uniq := rcv_uniq.



Definition cohMT d := d = empty_dstatelet.



Lemma pred0v1 d: cohMT d -> valid (dstate d).

Proof.

by rewrite /cohMT=>->; apply: valid_mt_state.

Qed.



Lemma pred0v2 d: cohMT d -> valid (dsoup d).

Proof.

by rewrite /cohMT=>->; apply: valid_mt_soup.

Qed.



Lemma pred0v3 d: cohMT d -> dom (dstate d) =i [::].

Proof. by rewrite /cohMT=>->; apply: mt_nodes. Qed.



Definition EmptyProtMixin := CohPredMixin pred0v1 pred0v2 pred0v3.

Definition empty_coh := CohPred EmptyProtMixin.



Lemma snd_uniq0 {nodes} {coh : cohpred nodes} :

  uniq (@Protocols.snd_tags _ coh ([::] : seq (send_trans coh))).

Proof. by []. Qed.



Lemma rcv_uniq0 {nodes} {coh : cohpred nodes} :

  uniq (@Protocols.rcv_tags nodes _ ([::] : seq (receive_trans coh))).

Proof. by []. Qed.



Definition EmptyProt i : protocol :=

  @Protocol (fun _ => pred0) i empty_coh [::] [::] snd_uniq0 rcv_uniq0.



End Exports.

End Exports.



End Protocols.



Export Protocols.Exports.



