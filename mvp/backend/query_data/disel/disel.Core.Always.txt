From mathcomp.ssreflect

Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.

From mathcomp

Require Import path.

Require Import Eqdep.

Require Import Relation_Operators.

From fcsl

Require Import axioms pred prelude ordtype finmap pcm unionmap heap.

From DiSeL

Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
(* Freshness:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Keys.
Variables (K : ordType) (V : Type) (U : union_map_class K V).
Implicit Types (k : K) (v : V) (f : U).

Lemma keys_last_mono f1 f2 k :
        path oleq k (dom f1) ->
        path oleq k (dom f2) ->
        (forall x, x \in dom f1 -> x \in dom f2) ->
        oleq (last k (dom f1)) (last k (dom f2)).

End Keys.

Section FreshLastKey.
Variable V : Type.
Implicit Type f : union_map [ordType of nat] V.

Definition last_key f := last 0 (dom f).

Lemma last_key0 : last_key Unit = 0.

Lemma last_key_dom f : valid f -> last_key f \notin dom f -> f = Unit.

Lemma dom_last_key f :  valid f -> ~~ empb f -> last_key f \in dom f.

Lemma last_key_max f x : x \in dom f -> x <= last_key f.

Lemma max_key_last f x :
        x \in dom f -> {in dom f, forall y, y <= x} -> last_key f = x.

Lemma last_keyPt (x : nat) v : last_key (x \\-> v) = x.

Lemma hist_path f : path oleq 0 (dom f).

Lemma last_key_mono f1 f2 :
        {subset dom f1 <= dom f2} -> last_key f1 <= last_key f2.

Lemma last_keyfUn f1 f2 :
        valid (f1 \+ f2) -> last_key f1 <= last_key (f1 \+ f2).

Lemma last_keyUnf f1 f2 :
        valid (f1 \+ f2) -> last_key f2 <= last_key (f1 \+ f2).

Definition fresh f := (last_key f).+1.

Lemma dom_ordfresh f x : x \in dom f -> x < fresh f.

Lemma dom_freshn f n : fresh f + n \notin dom f.

Lemma dom_fresh f : fresh f \notin dom f.

Lemma valid_fresh f v : valid (f \+ fresh f \\-> v) = valid f.

Lemma valid_fresh' f v i w :
  valid (f \+ i \\-> w) ->
  valid (f \+ fresh (f \+ i \\-> w) \\-> v).

Lemma last_fresh f v : valid f -> last_key (f \+ fresh f \\-> v) = fresh f.

End FreshLastKey. *)
(* State:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness DepMaps EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section TaggedMessages. 

  Structure TaggedMessage :=
    TMsg {
        tag: nat;
                tms_cont :> seq nat          
      }.

End TaggedMessages.

Section Shared.

  Definition Label := [ordType of nat].

  Structure msg (mtype : Type) :=
    Msg {content  : mtype;
         from     : nat;
         to       : nat;
         active   : bool }.

  Definition mid := [ordType of nat].

  Definition soup : Type :=
    union_map mid (msg (TaggedMessage)).

  Variables (s: soup) (V: valid s).

  Definition post_msg m : soup * mid :=
    let: f := fresh s in (s \+ f \\-> m, f).

  Lemma post_valid m :  valid (post_msg m).1.

  Lemma post_fresh m : (post_msg m).2 \notin dom s.

  Definition mark_msg T (m : msg T) : msg T :=
    Msg (content m) (from m) (to m) false.

  Definition consume_msg (s : soup) (id : mid) : soup :=
    let: mr := find id s in
    if mr is Some m then upd id (mark_msg m) s else s.

  Definition is_active (id : mid) :=
    exists m, find id s = Some m /\ active m.

  Definition is_consumed (id : mid) :=
    exists m, find id s = Some m /\ ~~ active m.

  Lemma find_consume s' (id: mid) m:
    valid s' -> find id s' = Some m ->
    find id (consume_msg s' id) = Some (mark_msg m).

  Lemma find_mark m s' msg :
    valid s' -> find m (consume_msg s' m) = Some msg ->
    exists msg', find m s' = Some msg' /\ msg = mark_msg msg'.

  Lemma mark_other m m' s' :
    valid s' -> m' == m = false -> find m' (consume_msg s' m) = find m' s'.

  Lemma consume_valid s' m : valid s' -> valid (consume_msg s' m).

  Lemma consumeUn (s': soup) (i : mid) mm
        (j : mid) : valid (s' \+ i \\-> mm) ->
    consume_msg (s' \+ i \\-> mm) j = 
    if i == j then s' \+ i \\-> mark_msg mm
    else (consume_msg s' j) \+ (i \\-> mm).

  Notation "'{{' m 'in' s 'at' id '}}'" := (find id s = Some m).
  Notation "'{{' m 'in' s '}}'" := (exists id, {{m in s at id}}).

End Shared.

Section Local.

  Variable U : Type.

  Definition nid := nat.

  Definition lstate_type := union_map [ordType of nid] U.

End Local.

Section Statelets.

  Structure dstatelet  :=
    DStatelet {
                dstate     : lstate_type heap;
        dsoup      : soup
    }.

  Fixpoint empty_lstate (ns : seq nid) :=
    if ns is n :: ns'
    then n \\-> Heap.empty \+ (empty_lstate ns')
    else  Unit.
    
  Definition empty_dstatelet : dstatelet :=
    @DStatelet (empty_lstate [::]) Unit.

  Lemma valid_mt_soup : valid (dsoup empty_dstatelet).

  Lemma valid_mt_state  : valid (dstate empty_dstatelet).

  Lemma mt_nodes : dom (dstate empty_dstatelet) =i [::].

End Statelets.

Module StateGetters.
Section StateGetters.

Definition state := union_map Label dstatelet.

Definition getStatelet (s: state) (i : Label) : dstatelet :=
  match find i s with
  | Some d => d
  | None => empty_dstatelet
  end.

End StateGetters.
End StateGetters.

Export StateGetters. *)
(* EqTypeX:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module EqualityX.

Definition axiom T (e : rel T) := forall x y, reflect (x = y) (e x y).

Structure mixin_of T := Mixin {op : rel T; _ : axiom op}.
Notation class_of := mixin_of (only parsing).

Section ClassDef.

Structure type := Pack {sort; _ : class_of sort; _ : Type}.
Local Coercion sort : type >-> Sortclass.
Variables (T : Type) (cT : type).

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Definition pack c := @Pack T c T.
Definition clone := fun c & cT -> T & phant_id (pack c) cT => pack c.

End ClassDef.

Module Exports.
Coercion sort : type >-> Sortclass.
Notation eqTypeX := type.
Notation EqMixinX := Mixin.
Notation EqTypeX T m := (@pack T m).
End Exports.

End EqualityX.
Export EqualityX.Exports.

Section EqualityConversion.

Variable U: eqTypeX.
Definition eq_opX T := EqualityX.op (EqualityX.class T).

Lemma eqxP : Equality.axiom (@eq_opX U).

Canonical eqMixinX := EqMixin eqxP.
Canonical eqTypeX' := EqType U eqMixinX.                                   

End EqualityConversion. *)
(* DepMaps:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module DepMaps.

Section DepMaps.

Definition Label := [ordType of nat].

Variable V : Type.
Variable labF: V -> Label.

Definition dmDom (u : union_map Label V) : bool :=
    all (fun l => if find l u is Some p then (labF p) == l else false) (dom u).

Record depmap := DepMap {
   dmap : union_map Label V;
   pf   : dmDom dmap;
}.

Section PCMOps.

Variable dm : depmap.

Lemma dmDom_unit : dmDom Unit.

Definition unit := DepMap dmDom_unit.

End PCMOps.

Section DJoin.

Variables (dm1 dm2 : depmap). 

Lemma dmDom_join um1 um2:
  dmDom um1 -> dmDom um2 -> dmDom (um1 \+ um2).

Definition join : depmap := DepMap (dmDom_join (@pf dm1) (@pf dm2)).

Definition valid (dm : depmap) := valid (dmap dm).

End DJoin.

End DepMaps.

Section PCMLaws.

Variables (V : Type) (labF: V -> [ordType of nat]).
Implicit Type f : depmap labF.

Local Notation "f1 \+ f2" := (join f1 f2)
                               (at level 43, left associativity).

Local Notation unit := (unit labF).

Lemma joinC f1 f2 : f1 \+ f2 = f2 \+ f1.

Lemma joinCA f1 f2 f3 : f1 \+ (f2 \+ f3) = f2 \+ (f1 \+ f3).

Lemma joinA f1 f2 f3 : f1 \+ (f2 \+ f3) = (f1 \+ f2) \+ f3.

Lemma validL f1 f2 : valid (f1 \+ f2) -> valid f1.

Lemma unitL f : unit \+ f = f.

Lemma validU : valid unit.

End PCMLaws.

Module Exports.
Section Exports.
Variable V : Type.
Variable labF: V -> Label.
Definition depmap := depmap.
Definition DepMap := DepMap.

Lemma dep_unit (d : depmap labF) : dmap d = Unit -> d = unit labF.

Coercion dmap := dmap.
Definition ddom (d : depmap labF) := dom (dmap d).
Definition dfind x (d : depmap labF) := find x (dmap d).

Definition depmap_classPCMMixin :=
  PCMMixin (@joinC V labF) (@joinA V labF) (@unitL V labF) (@validL V labF) (validU labF).

Canonical depmap_classPCM := Eval hnf in PCM (depmap labF) depmap_classPCMMixin.

End Exports.
End Exports.

End DepMaps.

Export DepMaps.Exports. *)
(* Protocols:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Definition getLocal (n : nid) (d : dstatelet) : heap :=
  match find n (dstate d) with
  | Some h => h
  | None => Unit
  end.

Lemma getLocalU n m d s :
  valid (dstate d) -> m \in dom (dstate d) ->
  getLocal n d = (getLocal n {| dstate := upd m (getLocal m d) (dstate d); dsoup := s |}).
        
Module Coherence.

Section CohDef.

Variable nodes: dstatelet -> pred nid.

Notation protocol_soup  := (soup (TaggedMessage)).

Structure mixin_of (coh : Pred dstatelet) := Mixin {
    _   : forall d, coh d -> valid (dstate d);
    _   : forall d, coh d -> valid (dsoup d);
    _   : forall d, coh d -> dom (dstate d) =i nodes d;
}.

End CohDef.

Section ClassDef.

Variable nodes: dstatelet -> pred nid.

Notation class_of := mixin_of (only parsing).

Structure cohpred : Type := Pack {sort : dstatelet -> Prop;
                                  _ : class_of nodes sort}.
Local Coercion sort : cohpred >-> Funclass.

Variables (T : dstatelet -> Prop) (cT : cohpred).

Definition class := let: Pack _ c as cT' := cT
                    return class_of nodes cT' in c.

Definition pack c := @Pack T c.
Definition clone := fun c & T = cT & phant_id (pack c) cT => pack c. 

End ClassDef.

Module Exports.
Section Exports.

Variable Lstate : Type.
Variable nodes: dstatelet -> pred nid.

Coercion sort : cohpred >-> Funclass.
Definition cohpred := cohpred.
Definition CohPredMixin := Mixin.
Definition CohPred T m := (@pack T m).

Notation "[ 'cohPredMixin' 'of' T ]" := (class _ : mixin_of T)
  (at level 0, format "[ 'cohPredMixin'  'of'  T ]") : form_scope.
Notation "[ 'cohpred' 'of' T 'for' C ]" := (@clone T C _ (erefl _) id)
  (at level 0, format "[ 'cohpred'  'of'  T  'for'  C ]") : form_scope.
Notation "[ 'cohpred' 'of' T ]" := (@clone T _ _ (erefl _) id)
  (at level 0, format "[ 'cohpred'  'of'  T ]") : form_scope.

Canonical cohpred_PredType := mkPredType (@sort nodes).

Variable coh : cohpred nodes.

Lemma cohVl d : d \In coh -> valid (dstate d).

Lemma cohVs d : d \In coh -> valid (dsoup d).

Lemma cohDom d : d \In coh -> dom (dstate d) =i nodes d.

End Exports.
End Exports.
End Coherence.

Export Coherence.Exports.

Module Transitions.
Section Transitions.

Variable nodes: dstatelet -> pred nid.

Variable coh : cohpred nodes.

Notation lstate := heap%type.

Definition send_step_t (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop) :=
  forall (this to : nid) (d : dstatelet)
         (msg : seq nat) (pf : send_safe this to d msg),
    option lstate.

Definition s_step_coh_t t_snd
           (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop)
           (send_step : send_step_t send_safe) :=
  forall this to d msg (pf : send_safe this to d msg) b,
    let: f := dstate d in
    let: s := dsoup d  in
    Some b = @send_step this to d msg pf ->         
    let: f' := upd this b f in
    let: tms := TMsg t_snd msg in 
    let: s' := (post_msg s (Msg tms this to true)).1 in 
    coh (DStatelet f' s').

Structure send_trans := SendTrans
    {
      t_snd : nat;

      send_safe : nid -> nid -> dstatelet -> seq nat -> Prop;
      s_safe_coh : forall this to d m, send_safe this to d m -> coh d;
      s_safe_in  : forall this to d m, send_safe this to d m ->
                                       this \in nodes d /\ to \in nodes d;  

      send_step : send_step_t send_safe;

      s_safe_def : forall this to d msg,
          send_safe this to d msg <->
          exists b pf, @send_step this to d msg pf = Some b;

      s_step_coh : s_step_coh_t t_snd send_step 
    }.

Definition receive_step_t :=
  forall (this from: nid) (m : seq nat)
         (d : dstatelet) (pf : coh d)
         (pf' : this \in nodes d), lstate.

Definition r_step_coh_t (msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool)
           t_rcv (receive_step : receive_step_t) :=
  forall (d : dstatelet) from this i (C : coh d) (pf' : this \in nodes d)
         (m : TaggedMessage),
    let: f := dstate d in
    let: s := dsoup d  in
    this \in dom f ->
    find i s = Some (Msg m from this true) ->
    msg_wf d C this from m -> tag m = t_rcv ->
    let: loc' := receive_step this from m d C pf' in
    let: s'' := consume_msg s i in
    let: f' := upd this loc' f in
    coh (DStatelet f' s'').

Structure receive_trans := ReceiveTrans
    {
      t_rcv : nat;

      msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool;

      receive_step : receive_step_t;

      r_step_coh : r_step_coh_t msg_wf t_rcv receive_step
    }.

End Transitions.

Module Exports.

Definition SendTrans := SendTrans.
Definition send_trans := send_trans.
Definition ReceiveTrans := ReceiveTrans.
Definition receive_trans := receive_trans.

Definition t_snd := t_snd.
Definition send_safe := send_safe.
Definition send_step := send_step.
Definition send_step_t := send_step_t.

Definition s_safe_coh := s_safe_coh.
Definition s_safe_in := s_safe_in.
Definition s_safe_def := s_safe_def.
Definition s_step_coh := s_step_coh.
Definition s_step_coh_t := s_step_coh_t.

Definition t_rcv := t_rcv.
Definition msg_wf := msg_wf.

Definition receive_step := receive_step.
Definition receive_step_t := receive_step_t.
Definition r_step_coh := r_step_coh.
Definition r_step_coh_t := r_step_coh_t.

End Exports.

End Transitions.

Export Transitions.Exports.

Module Protocols.
Section Protocols.

Definition snd_tags {nodes} {coh : cohpred nodes}
           (sts : seq (send_trans coh)) := 
  map (@t_snd nodes _) sts.

Definition rcv_tags {nodes} {coh : cohpred nodes} (sts : seq (receive_trans coh)) :=
  map (@t_rcv nodes _) sts.

Structure protocol := Protocol {
  nodes: dstatelet -> pred nid;
  plab : Label;                        
  coh : cohpred nodes ;
  snd_trans : seq (send_trans coh);
  rcv_trans : seq (receive_trans coh);

  snd_uniq : uniq (snd_tags snd_trans);
  rcv_uniq : uniq (rcv_tags rcv_trans);
}.

End Protocols.

Module Exports.
Section Exports.

Definition protocol := protocol.
Definition Protocol := Protocol.
Definition plab := plab.
Definition nodes := nodes.
Definition coh := coh.
Definition snd_trans := snd_trans.
Definition rcv_trans := rcv_trans.

Definition snd_tags p := snd_tags (snd_trans p).
Definition rcv_tags p := rcv_tags (rcv_trans p).

Definition snd_uniq := snd_uniq.
Definition rcv_uniq := rcv_uniq.

Definition cohMT d := d = empty_dstatelet.

Lemma pred0v1 d: cohMT d -> valid (dstate d).

Lemma pred0v2 d: cohMT d -> valid (dsoup d).

Lemma pred0v3 d: cohMT d -> dom (dstate d) =i [::].

Definition EmptyProtMixin := CohPredMixin pred0v1 pred0v2 pred0v3.
Definition empty_coh := CohPred EmptyProtMixin.

Lemma snd_uniq0 {nodes} {coh : cohpred nodes} :
  uniq (@Protocols.snd_tags _ coh ([::] : seq (send_trans coh))).

Lemma rcv_uniq0 {nodes} {coh : cohpred nodes} :
  uniq (@Protocols.rcv_tags nodes _ ([::] : seq (receive_trans coh))).

Definition EmptyProt i : protocol :=
  @Protocol (fun _ => pred0) i empty_coh [::] [::] snd_uniq0 rcv_uniq0.

End Exports.
End Exports.

End Protocols.

Export Protocols.Exports. *)
(* Worlds:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module WorldGetters.
Section WorldGetters.

Definition context := union_map Label protocol.

Definition hook_domain := [ordType of ((nat * Label) * (Label * nat))%type].

Definition hook_type := heap -> heap -> seq nat -> nid -> Prop.

Definition hooks := union_map hook_domain hook_type.
Definition world := (context * hooks)%type.

Definition getc (w: world) : context := fst w.
Coercion getc : world >-> context.

Definition geth (w: world) : hooks := snd w.
Coercion geth : world >-> hooks.

Variable w : world.

Variables (p : protocol).

Definition getProtocol i : protocol:=
  match find i (getc w) with
  | Some p => p
  | None => EmptyProt i 
  end.

End WorldGetters.
End WorldGetters.

Export WorldGetters.

Module Worlds.

Module Core.
Section Core.

Definition hooks_consistent (c : context) (h : hooks) : Prop :=
  forall z lc ls t, ((z, lc), (ls, t)) \in dom h ->
  (lc \in dom c) && (ls \in dom c).

Definition hook_complete w := hooks_consistent (getc w) (geth w).

Lemma hook_complete0 c : hook_complete (c, Unit).

Definition Coh (w : world) : Pred state := fun s =>
  let: c := fst w in
  let: h := snd w in                                           
  [/\ valid w, valid s, hook_complete w,
      dom c =i dom s &
      forall l, coh (getProtocol w l) (getStatelet s l)].

Lemma cohW w s : Coh w s -> valid w.

Lemma cohS w s : Coh w s -> valid s.

Lemma cohH w s : Coh w s -> hook_complete w.

Lemma cohD w s : Coh w s -> dom (getc w) =i dom s.

Lemma coh_coh w s l : Coh w s -> coh (getProtocol w l) (getStatelet s l).

Lemma unit_coh w s :
  Coh w s -> w = Unit <-> s = Unit.

Lemma Coh0 (w : world) (s : state) :
  w = Unit -> s = Unit -> Coh w s.

Lemma CohUn (w1 w2 : world) (s1 s2 : state) :
  Coh w1 s1 -> Coh w2 s2 ->
  valid (w1 \+ w2) -> Coh (w1 \+ w2) (s1 \+ s2).

Lemma coh_prec w: precise (Coh w).

Lemma locE i n k x y :
  k \in dom i -> valid i -> valid (dstate (getStatelet i k)) ->
  getLocal n (getStatelet (upd k
       {| dstate := upd n x (dstate (getStatelet i k));
          dsoup := y |} i) k) = x.

Lemma locE' d n x y :
  valid (dstate d) ->
  getLocal n {| dstate := upd n x (dstate d);
                dsoup := y |} = x.

Lemma locU n n' x st s :
  n != n' ->
  valid st ->
  getLocal n {| dstate := upd n' x st; dsoup := s |} =
  getLocal n {| dstate := st; dsoup := s |}.

Section MakeWorld.

Variable p : protocol.
Notation l := (plab p).

Definition mkWorld : world := (l \\-> p, Unit).

Lemma prEq : (getProtocol mkWorld l) = p.
                          
End MakeWorld.

End Core.
End Core.

End Worlds.

Export Worlds.Core. *)
(* NetworkSem:
From mathcomp.ssreflect 
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section NetworkSemantics.

Variable w : world.
Variable this: nid.

Notation getl := (getLocal).
Notation gets := (getStatelet).
Notation getp := (@getProtocol w).

Definition get_coh l := @coh (getp l).
Definition get_st l := @snd_trans (getp l).
Definition get_rt l := @rcv_trans (getp l).

Lemma getsE l s : l \in dom s -> find l s = Some (gets s l).

Lemma coh_s l s: Coh w s -> coh (getp l) (gets s l).

Lemma Coh_dom l s : l \in dom s -> Coh w s -> 
                     dom (dstate (gets s l)) =i nodes (getp l) (gets s l).

Definition all_hooks_fire (h : hooks) l st s n (msg : seq nat) to :=
  
  forall z lc hk, Some hk = find ((z, lc), (l, st)) h ->
  lc \in dom s -> l \in dom s ->               
  let: core_local   := getl n (gets s lc) in
  let: client_local := getl n (gets s l)  in              
  hk core_local client_local msg to.

Inductive network_step (s1 s2 : state) : Prop :=
  
  Idle of s1 \In Coh w /\ s1 = s2

| SendMsg 
          l st (_ : st \In @get_st l) to msg b
          (pf: this \in (nodes (getp l) (gets s1 l)))
          (pf' : l \in dom s1) (C: Coh w s1)
          
          (S : send_safe st this to (gets s1 l) msg)

          (pf_hooks : all_hooks_fire (geth w) l (t_snd st) s1 this msg to)
          
          (spf : Some b = send_step S) of
          
          let: d :=  gets s1 l in

          let: f' := upd this b (dstate d) in
          let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)
                                              this to true)).1 in
          s2 = upd l (DStatelet f' s') s1

| ReceiveMsg l rt (_ : rt \In @get_rt l) i from
             
             (pf: this \in (nodes (getp l)) (gets s1 l))
             (pf': l \in dom s1) (C: Coh w s1)
             (msg : TaggedMessage)
             (pf': tag msg = t_rcv rt) of
             let: d := (gets s1 l) in
             let: f := dstate d in
             let: s := dsoup d  in

             [/\ find i s = Some (Msg msg from this true),
              msg_wf rt (coh_s l C) this from msg &
              
              let loc' := receive_step rt from msg (coh_s l C) pf in
              let: f' := upd this loc' f in
              let: s'' := consume_msg s i in
              s2 = upd l (DStatelet f' s'') s1].

Lemma step_coh s1 s2: network_step s1 s2 ->
                      Coh w s1 /\ Coh w s2.

Lemma step_preserves_labels s1 s2 :
  network_step s1 s2 -> dom s1 =i dom s2.

Lemma step_is_local s1 s2 l: network_step s1 s2 ->
  forall z, z != this ->
  find z (dstate (gets s1 l)) = find z (dstate (gets s2 l)).

Lemma stepV1 s1 s2: network_step s1 s2 -> valid s1.

Lemma stepV2 s1 s2: network_step s1 s2 -> valid s2.

Lemma step_preserves_node_ids s1 s2 l:
  l \in dom s1 -> network_step s1 s2 ->
  dom (dstate (gets s1 l)) =i dom (dstate (gets s2 l)).

End NetworkSemantics. *)
(* Rely:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Rely.

Variable w : world.
Variable this: nid.

Notation getl := (getLocal).
Notation gets := getStatelet.
Notation getp := (@getProtocol _ w).

Fixpoint network_rely' n s1 s2 :=
  if n is n'.+1
  then exists z s3,
        [/\ this != z, network_step w z s1 s3 & network_rely' n' s3 s2]
    else s1 = s2 /\ s1 \In Coh w.

Definition network_rely s1 s2 := exists n, network_rely' n s1 s2.

Lemma rely_refl s : s \In Coh w -> network_rely s s.

Lemma rely_trans s1 s2 s3 :
  network_rely s1 s2 -> network_rely s2 s3 -> network_rely s1 s3.

Lemma rely_coh' n s1 s2 :
  network_rely' n s1 s2 -> Coh w s1 /\ Coh w s2.

Lemma rely_coh s1 s2 :
  network_rely s1 s2 -> Coh w s1 /\ Coh w s2.

Lemma rely_loc s1 s2 l:
  network_rely s1 s2 -> find this (dstate (gets s1 l)) = find this (dstate (gets s2 l)).

Lemma step_consume_other l s s' m tm from z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm from this true) ->
  find m (dsoup (gets s' l)) = Some (Msg tm from this true).

Lemma rely_consume_other l s s' m tm from:
  network_rely s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm from this true) ->
  find m (dsoup (gets s' l)) = Some (Msg tm from this true).

Lemma step_send_other l s s' m tm to b z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s' l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s l)) = Some (Msg tm this to b') /\ (b -> b').

Lemma rely_send_other l s s' m tm to b:
  network_rely s s' ->
  find m (dsoup (gets s' l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s l)) = Some (Msg tm this to b') /\ (b -> b').

Lemma step_send_other' l s s' m tm to b z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s' l)) = Some (Msg tm this to b') /\ (b' -> b).

Lemma rely_send_other' l s s' m tm to b:
  network_rely s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s' l)) = Some (Msg tm this to b') /\ (b' -> b).

Notation loc i l := (getLocal this (getStatelet i l)).
Notation msgs i l := (dsoup (getStatelet i l)).

Lemma rely_loc' l i j : network_rely i j -> loc j l = loc i l.

End Rely. *)

From DiSeL

Require Import Actions Injection Process InductiveInv.
(* Actions:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.
Require Classical_Prop.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module Actions.

Section Actions.

Variable W : world.
Notation getS s l := (getStatelet s l).

Structure action (V : Type) (this : nid)
  := Action
       {
         
         a_safe : state -> Prop;

         a_safe_coh : forall s, a_safe s -> s \In Coh W;

         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;

         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;

         step_sem  : forall s1 (pf : a_safe s1) s2 r,
             a_step pf s2 r -> network_step W this s1 s2

       }.

Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):
  this != n -> a_step pf s2 r ->
  getLocal n (getS s1 l) = getLocal n (getS s2 l).

End Actions.

Section SkipActionWrapper.

Variable W : world.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.
Variable l : Label.
Variable p : protocol.
Variable pf : getP l = p.

Definition skip_safe s := Coh W s.

Variable V : Type.

Variable f : forall s, coh p (getS s l) -> V.

Lemma safe_local s : skip_safe s -> coh p (getS s l).

Definition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=
  [/\ s1 \In Coh W, s1 = s2 & r = f (safe_local pf)].

Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.

Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.

Lemma skip_step_sem s1 (S : skip_safe s1) s2 r:
  skip_step S s2 r -> network_step W this s1 s2.

Definition skip_action_wrapper :=
  Action skip_safe_coh skip_step_total skip_step_sem.

End SkipActionWrapper.

Section TryReceiveActionWrapper.

Variable W : world.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.

Variable filter : Label -> nid -> nat -> pred (seq nat).

Variable f_valid_label : forall l n t m ,
    filter l n t m -> l \in dom (getc W).

Definition tryrecv_act_safe (s : state) := s \In Coh W.

Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.

Definition tryrecv_act_step s1 s2 (r : option (nid * nat * seq nat)) :=
  exists (pf : s1 \In Coh W),
  
    ([/\ (forall l m tms from rt b,
          this \in nodes (getP l) (getS s1 l) -> 
          Some (Msg tms from this b) = find m (dsoup (getS s1 l)) ->
          rt \In (rcv_trans (getP l)) ->
          tag tms = (t_rcv rt) ->
          
          msg_wf rt (coh_s l pf) this from tms ->
             
          filter l from (t_rcv rt) (tms_cont tms) ->
          ~~b),
    r = None & s2 = s1] \/
   
   exists l m tms from rt (pf' : this \in nodes (getP l) (getS s1 l)),
     let: d :=  getS s1 l in
     [/\ [/\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)),
          rt \In (rcv_trans (getP l)),
          tag tms = (t_rcv rt),
          
          msg_wf rt (coh_s l pf) this from tms &
             
          filter l from (t_rcv rt) (tms_cont tms)],
      let loc' := receive_step rt from tms (coh_s l pf) pf' in
      let: f' := upd this loc' (dstate d) in
      let: s' := consume_msg (dsoup d) m in
      s2 = upd l (DStatelet f' s') s1 &
      r = Some (from, tag tms, tms_cont tms)]).

Import Classical_Prop.

Lemma tryrecv_act_step_total s:
  tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.

Lemma tryrecv_act_step_safe s1 s2 r:
  tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.

Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r:
  tryrecv_act_step s1 s2 r -> network_step W this s1 s2.

Definition tryrecv_action_wrapper :=
  Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.

End TryReceiveActionWrapper.

Section SendActionWrapper.

Variable W : world.
Variable p : protocol.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.

Variable l : Label.

Variable pf : (getProtocol W l) = p.

Variable st: send_trans (coh p).

Variable pf' : st \In (snd_trans p).

Variable msg : seq nat.
Variable to  : nid.

Definition can_send (s : state) := (l \in dom s) && (this \in nodes p (getS s l)).

Definition filter_hooks (h : hooks) :=
  um_filter (fun e => e.2 == (l, t_snd st)) h.

Definition send_act_safe s :=
  [/\ Coh W s, send_safe st this to (getS s l) msg, can_send s &
               
      all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].

Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.

Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.

Definition send_act_step s1 (S: send_act_safe s1) s2 r :=
   r = msg /\
   exists b,
     Some b = send_step (safe_safe S) /\
     let: d :=  getS s1 l in
     let: f' := upd this b (dstate d) in
     let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)
                                         this to true)).1 in
     s2 = upd l (DStatelet f' s') s1.

Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.

Lemma send_act_step_sem s1 (S : send_act_safe s1) s2 r:
  send_act_step S s2 r -> network_step W this s1 s2.

Definition send_action_wrapper :=
  Action send_act_safe_coh send_act_step_total send_act_step_sem.

End SendActionWrapper.

End Actions.

Module ActionExports.

Definition action := Actions.action.
Definition a_safe := Actions.a_safe.
Definition a_step := Actions.a_step.

Definition a_safe_coh := Actions.a_safe_coh.
Definition a_step_total := Actions.step_total.
Definition a_step_sem := Actions.step_sem.
Definition a_step_other := Actions.step_other.

Definition skip_action_wrapper := Actions.skip_action_wrapper.
Definition send_action_wrapper := Actions.send_action_wrapper.
Definition tryrecv_action_wrapper := Actions.tryrecv_action_wrapper.

End ActionExports.

Export ActionExports. *)
(* Injection:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Actions.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module Injection.
Section Injection.

Variable W : world.

Structure injects (U V : world) (K : hooks) := Inject {
  
  E : world;
                                       
  _ : hook_complete U /\ hook_complete E;

  _ : V = U \+ E \+ (Unit, K);

  _ : hooks_consistent (getc (U \+ E)) K;
  
  _ : forall s, Coh V s <-> exists s1 s2,
        [/\ s = s1 \+ s2, Coh U s1 & Coh E s2];

  _ : forall s1 s2 s this,
      s1 \+ s \In Coh V -> network_step U this s1 s2 ->
      network_step V this (s1 \+ s) (s2 \+ s);

  _ : forall s1 s2 s1' s2' this,
      s1 \In Coh U -> s2 \In Coh U ->
      network_step V this (s1 \+ s1') (s2 \+ s2') ->
      (network_step U this s1 s2   /\ s1' = s2') \/
      (network_step E this s1' s2' /\ s1 = s2); }.

End Injection.

Module Exports.
Section Exports.

Definition inj_ext := E.
Definition injects := injects. 
Definition Inject := Inject.

Lemma cohK (U V : world) (K : hooks) (w : injects U V K) :
  V = U \+ inj_ext w \+ (Unit, K).

Lemma cohE (U V : world) (K : hooks) (w : injects U V K) s :
  Coh V s <-> exists s1 s2,
      [/\ s = s1 \+ s2, Coh U s1 & Coh (inj_ext w) s2].

Lemma sem_extend (U V : world) (K : hooks) (w : injects U V K) s1 s2 s this: 
      s1 \+ s \In Coh V -> s2 \+ s \In Coh V ->
      network_step U this s1 s2 -> network_step V this (s1 \+ s) (s2 \+ s).

Lemma sem_split (U V : world) (K : hooks) (w : injects U V K) s1 s1' s2 s2' this: 
      s1 \In Coh U -> s2 \In Coh U ->
      network_step V this (s1 \+ s1') (s2 \+ s2') ->
      (network_step U this s1 s2   /\ s1' = s2') \/
      (network_step (inj_ext w) this s1' s2' /\ s1 = s2).

Definition extends (U V : world) (K : hooks) (w : injects U V K) s s1 := 
  exists s2, [/\ s = s1 \+ s2, s1 \In Coh U & s \In Coh V].

Notation dom_filt W := (fun k => k \in dom W).

Definition projectS (W : world) (s : state) :=
  um_filter (dom_filt (getc W)) s.

Lemma projectS_cohL W1 W2 s :
  s \In Coh (W1 \+ W2) -> hook_complete W1 -> projectS W1 s \In Coh W1.

Lemma projectS_cohR W1 W2 s :
  s \In Coh (W1 \+ W2) -> hook_complete W2 -> projectS W2 s \In Coh W2.

Lemma projectSE W1 W2 s :
  s \In Coh (W1 \+ W2) ->
  s = projectS W1 s \+ projectS W2 s.

Lemma coh_split W1 W2 s :
  s \In Coh (W1 \+ W2) ->
  hook_complete W1 -> hook_complete W2 ->
  exists s1 s2 : state,
    [/\ s1 \In Coh W1, s2 \In Coh W2 & s = s1 \+ s2].

Lemma injExtL' (W1 W2 : world) K (pf : injects W1 (W1 \+ W2) K) :
  valid (W1 \+ W2) -> inj_ext pf \+ (Unit, K) = W2.

Lemma injExtR' W1 W2 K (pf : injects W2 (W1 \+ W2) K) :
  valid (W1 \+ W2) -> inj_ext pf \+ (Unit, K) = W1.

Lemma injExtL W1 W2 (pf : injects W1 (W1 \+ W2) Unit) :
  valid (W1 \+ W2) -> inj_ext pf = W2.

Lemma injExtR W1 W2 (pf : injects W2 (W1 \+ W2) Unit) :
  valid (W1 \+ W2) -> inj_ext pf  = W1.

End Exports.
End Exports.

End Injection.

Export Injection.Exports.

Module InjectExtra.

Lemma cohUnKR U W s s':
  s \+ s' \In Coh (U \+ W) -> s \In Coh U ->
  hook_complete W -> s' \In Coh W.

Lemma cohUnKL U W s s':
  s \+ s' \In Coh (U \+ W) -> s' \In Coh W ->
  hook_complete U -> s \In Coh U .

Lemma getPUn (U W : world) l :
  valid (U \+ W) -> l \in dom U.1 ->

Lemma getSUn s1 s2 l :
  valid (s1 \+ s2) -> l \in dom s1 ->
  getStatelet s1 l = getStatelet (s1 \+ s2) l.

Lemma hook_completeL (U : world) K :
  valid (U \+ (Unit, K)) ->
  hook_complete (U \+ (Unit, K)) -> hook_complete U.

Lemma get_protocol_hooks (U: world) K l:
  valid U -> getProtocol (U \+ (Unit, K)) l = getProtocol U l.

Lemma coh_hooks (U : world) K s :
  s \In (Coh (U \+ (Unit, K))) -> s \In (Coh U).

Lemma inj_hooks_complete (U W : world) K:
  valid (U \+ W \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma inject_step U W K this s1 s2 s1' s2' :
  valid (U \+ W) ->
  s1 \In Coh U -> s2 \In Coh U ->
  hook_complete U -> hook_complete W ->
  network_step (U \+ W \+ (Unit, K)) this (s1 \+ s1') (s2 \+ s2') ->
  network_step U this s1 s2 /\ s1' = s2' \/
  network_step W this s1' s2' /\ s1 = s2.

Definition not_hooked_by (K : hooks) l :=
  forall z lc l' st, (z, lc, (l', st)) \in dom K -> l != l'.

Definition world_not_hooked (W: world) K :=
  forall l, l \in dom W.1 -> not_hooked_by K l.

Lemma hooks_frame (U W : world) (K : hooks) l st s s' n msg to :
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma inject_frame U W K this s1 s2 s:
  s1 \+ s \In Coh (U \+ W \+ (Unit, K)) ->
  network_step U this s1 s2 ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma injectL (U W : world) K :
  valid (U \+ W \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (getc (U \+ W)) K ->
  world_not_hooked U K ->
  injects U (U \+ W \+ (Unit, K)) K.

Lemma injectR (U W : world) K :
  valid (W \+ U \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (getc (U \+ W)) K ->
  world_not_hooked U K ->
  injects U (W \+ U \+ (Unit, K)) K.

Lemma locProjL (W1 W2 : world) l s1 s2:
  (s1 \+ s2) \In Coh (W1 \+ W2) -> l \in dom W1.1 ->

Lemma locProjR (W1 W2 : world) l s1 s2:
  (s1 \+ s2) \In Coh (W1 \+ W2) -> l \in dom W2.1 ->

End InjectExtra.

Export InjectExtra. *)
(* Process:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem.
From DiSeL
Require Import Actions Injection InductiveInv.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section ProcessSyntax.

Variable this : nid.

Inductive proc (W : world) A :=
  Unfinished | Ret of A | Act of action W A this |
  Seq B of proc W B & B -> proc W A |
  Inject V K of injects V W K & proc V A |
  WithInv p I (ii : InductiveInv p I) of
          W = mkWorld (ProtocolWithIndInv ii) & proc (mkWorld p) A.  

Definition pcat W A B (t : proc W A) (k : A -> Pred (proc W B)) :=
  [Pred s | exists q, s = Seq t q /\ forall x, q x \In k x].

Inductive schedule :=
  ActStep | SeqRet | SeqStep of schedule |  
  InjectStep of schedule | InjectRet |
  WithInvStep of schedule | WithInvRet.

End ProcessSyntax.

Arguments Unfinished [this W A].
Arguments Ret [this W A].
Arguments Act [this W A].
Arguments Seq [this W A B].
Arguments WithInv [this W A].

Section ProcessSemantics.

Variable this : nid.

Fixpoint step (W : world) A (s1 : state) (p1 : proc this W A)
         sc (s2 : state) (p2 : proc this W A) : Prop :=
  match sc, p1 with
    
  | ActStep, Act a => exists v pf, @a_step _ _ _ a s1 pf s2 v /\ p2 = Ret v
    
  | SeqRet, Seq _ (Ret v) k => s2 = s1 /\ p2 = k v
  | SeqStep sc', Seq _ p' k1 => 
    exists p'', step s1 p' sc' s2 p'' /\ p2 = Seq p'' k1
  
  | InjectRet, Inject V K pf (Ret v) =>
     exists s1', [/\ s2 = s1, p2 = Ret v & extends pf s1 s1']
  | InjectStep sc', Inject V K pf t1' =>
    exists s1' s2' s t2', 
    [/\ p2 = Inject pf t2', s1 = s1' \+ s, s2 = s2' \+ s, 
     s1' \In Coh V & step s1' t1' sc' s2' t2']
  
  | WithInvRet, WithInv p inv ii pf (Ret v) =>
     exists s1', [/\ s2 = s1, p2 = Ret v & s1 = s1']
  | WithInvStep sc', WithInv p inv ii pf t1' =>
    exists t2', p2 = WithInv p inv ii pf t2' /\  
                     step s1 t1' sc' s2 t2'   
  | _, _ => False
  end.

Fixpoint good (W : world) A (p : proc this W A) sc  : Prop :=
  match sc, p with
  | ActStep, Act _ => True
  | SeqRet, Seq _ (Ret _) _ => True
  | SeqStep sc', Seq _ p' _ => good p' sc'
  | InjectStep sc', Inject _ _ _ p' => good p' sc'
  | InjectRet, Inject _ _ _ (Ret _) => True
  | WithInvStep sc', WithInv _ _ _ _ p' => good p' sc'
  | WithInvRet, WithInv _ _ _ _ (Ret _) => True
  | _, _ => False
  end.

Fixpoint safe (W : world) A (p : proc this W A) sc (s : state)  : Prop :=
  match sc, p with
  | ActStep, Act a => a_safe a s
  | SeqRet, Seq _ (Ret _) _ => True
  | SeqStep sc', Seq _ p' _ => safe p' sc' s
  | InjectStep sc', Inject V K pf p' =>
      exists s', extends pf s s' /\ safe p' sc' s'
  | InjectRet, Inject V K pf (Ret _) => exists s', extends pf s s'
  | WithInvStep sc', WithInv _ _ _ _ p' => safe p' sc' s
  | WithInvRet, WithInv _ _ _ _ (Ret _) => True
  | _, _ => True
  end.

Definition pstep (W : world) A s1 (p1 : proc this W A) sc s2 p2 := 
  [/\ s1 \In Coh W, safe p1 sc s1 & step s1 p1 sc s2 p2].

Lemma pstep_safe (W : world) A s1 (t : proc this W A) sc s2 q : 
        pstep s1 t sc s2 q -> safe t sc s1.

Lemma proc_progress W A s (p : proc this W A) sc : 
        s \In Coh W -> safe p sc s -> good p sc ->  
        exists s' (p' : proc this W A), pstep s p sc s' p'.

Lemma stepUnfin W A s1 sc s2 (t : proc this W A) : 
        pstep s1 Unfinished sc s2 t <-> False.

Lemma stepRet W A s1 sc s2 (t : proc this W A) v : 
        pstep s1 (Ret v) sc s2 t <-> False.

Lemma stepAct W A s1 a sc s2 (t : proc this W A) : 
        pstep s1 (Act a) sc s2 t <->
        exists v pf, [/\ sc = ActStep, t = Ret v & @a_step _ _ _ a s1 pf s2 v].

Lemma stepSeq W A B s1 (t : proc this W B) k sc s2 (q : proc this W A) :
        pstep s1 (Seq t k) sc s2 q <->
        (exists v, [/\ sc = SeqRet, t = Ret v, q = k v, s2 = s1 &
                       s1 \In Coh W]) \/
         exists sc' p',
           [/\ sc = SeqStep sc', q = Seq p' k & pstep s1 t sc' s2 p'].

Lemma stepInject V W K A (em : injects V W K) 
                s1 (t : proc this V A) sc s2 (q : proc this W A) :
  pstep s1 (Inject em t) sc s2 q <->
  
  (exists s1' v, [/\ sc = InjectRet, t = Ret v, q = Ret v, s2 = s1 &
                     extends em s1 s1']) \/
  
  exists sc' t' s1' s2' s, 
    [/\ sc = InjectStep sc', q = Inject em t', 
     s1 = s1' \+ s, s2 = s2' \+ s, s1 \In Coh W &
              pstep s1' t sc' s2' t'].

Lemma stepWithInv W A pr I (ii : InductiveInv pr I) s1 
      (t : proc this (mkWorld pr) A) sc s2 (q : proc this W A) pf :
  pstep s1 (WithInv pr I ii pf t) sc s2 q <-> 
  (exists v, [/\ sc = WithInvRet, t = Ret v, q = Ret v, s2 = s1,
                 s1 \In Coh W & W = mkWorld (ProtocolWithIndInv ii)]) \/
  exists sc' t' , [/\ sc = WithInvStep sc', q = WithInv pr I ii pf t',
                      W = mkWorld (ProtocolWithIndInv ii),
                      s1 \In Coh W & pstep s1 t sc' s2 t'].

Lemma pstep_network_sem (W : world) A s1 (t : proc this W A) sc s2 q :
        pstep s1 t sc s2 q -> network_step W this s1 s2.

Lemma pstep_inv A pr I (ii : InductiveInv pr I) s1 s2 sc
      (t t' : proc this (mkWorld pr) A):
  s1 \In Coh (mkWorld (ProtocolWithIndInv ii)) ->
  pstep s1 t sc s2 t' -> 
  s2 \In Coh (mkWorld (ProtocolWithIndInv ii)).

End ProcessSemantics. *)



Set Implicit Arguments.

Unset Strict Implicit.

Unset Printing Implicit Defensive.



Section Always.



Variable this : nid.

Variable W : world.



Notation coherent := (Coh W).



Arguments proc [this W].



Fixpoint always_sc A (s1 : state) p scs (P : state -> proc A -> Prop) : Prop :=

  s1 \In coherent /\ 

  if scs is sc :: scs' then 

    forall s2, network_rely W this s1 s2 -> 

      [/\ safe p sc s2, P s2 p &

          forall s3 q, @pstep this W A s2 p sc s3 q -> always_sc s3 q scs' P]

  else forall s2, network_rely W this s1 s2 -> P s2 p.



Definition always A s (p : proc A) P := forall scs, always_sc s p scs P.



Lemma alw_coh' A s (p : proc A) scs P : 

        always_sc s p scs P -> s \In coherent.

Proof. by case: scs=>/=[|a l]; case. Qed.



Lemma alw_coh A s (p : proc A) P : 

        always s p P -> s \In coherent.

Proof. by move/(_ [::]); move/alw_coh'. Qed.



Lemma alw_safe' A s (p : proc A) sc scs P : 

        always_sc s p (sc :: scs) P -> safe p sc s.

Proof.

by case: scs=>[|a l][]C/(_ s (rely_refl this C))[].

Qed.    



Lemma alw_safe A s (p : proc A) P :

        always s p P -> forall sc, safe p sc s.

Proof. by move=>H sc; apply: alw_safe' (H [:: sc]). Qed.



Lemma alw_refl' A s (p : proc A) sc P : always_sc s p sc P -> P s p.

Proof.

by case: sc=>[|a l][C]/(_ s (rely_refl this C))//; case.

Qed.



Lemma alw_refl A s (p : proc A) P : always s p P -> P s p.

Proof. by move/(_ [::])/alw_refl'. Qed.



Lemma alw_envs' A s1 (p : proc A) scs s2 P : 

        always_sc s1 p scs P -> network_rely W this s1 s2 -> always_sc s2 p scs P.

Proof.

by case: scs=>//[|a l][C]H R; move/rely_coh: (R)=>/=[]H1 H2;

   split=>//s3 R'; apply: H; apply: (rely_trans R).

Qed.

 

Lemma alw_envs A s1 (p : proc A) s2 P :

        always s1 p P -> network_rely W this s1 s2 -> always s2 p P.

Proof. by move=>S E scs; apply: alw_envs' (S scs) E. Qed.



Lemma alw_step A s1 (p : proc A) sc s2 q P :

        always s1 p P -> pstep s1 p sc s2 q -> always s2 q P.

Proof.

move=>Ls Ts; move: (Ls [:: sc])=>/= [C].

case/(_ _ (rely_refl this C))=>_ _; move/(_ _ _ Ts)=>_. 

move=>scs; move: (Ls (sc :: scs))=>/= [_].

by case/(_ _ (rely_refl this C))=>_ _; move/(_ _ _ Ts). 

Qed.



Lemma alwp_envsq A s1 (p1 : proc A) scs (P : _ -> _ -> Prop) : 

        always_sc s1 p1 scs P ->

        always_sc s1 p1 scs 

          (fun s2 p2 => forall s3, network_rely W this s2 s3 -> P s3 p2).

Proof.

elim: scs s1 p1=>[|sc scs IH] /= s1 p1 [C H]; split=>// s2 M.

- by move=>s3 /(rely_trans M); apply: H. 

split; first by case: (H _ M).

- by move=>s3 /(rely_trans M) /H; case. 

by move=>s3 q T; apply: IH; case: (H _ M)=>_ _; apply. 

Qed.



Lemma alw_envsq A s1 (p1 : proc A) (P : _ -> _ -> Prop) : 

        always s1 p1 P ->

        always s1 p1 (fun s2 p2 => forall s3, network_rely W this s2 s3 -> P s3 p2).

Proof. by move=>H scs; apply: alwp_envsq (H scs). Qed.



Lemma alw_unfin' A s1 scs (P : state -> proc A -> Prop) :

        s1 \In coherent -> 

        (forall s2, network_rely W this s1 s2 -> P s2 Unfinished) -> 

        always_sc s1 Unfinished scs P.

Proof. 

case: scs=>[|sc scs] C H; split=>// s2 E.

split=>[||s3 q/stepUnfin]//; first by case: sc=>//.

by apply: H.

Qed.



Lemma alw_unfin A s1 (P : state -> proc A -> Prop) :

        s1 \In coherent -> 

        (forall s2, network_rely W this s1 s2 -> P s2 Unfinished) ->

        always s1 Unfinished P.

Proof. by move=>C H scs; apply: alw_unfin'. Qed.



Lemma alw_ret' A s1 (v : A) scs (P : state -> proc A -> Prop) : 

        s1 \In coherent -> 

        (forall s2, network_rely W this s1 s2 -> P s2 (Ret v)) -> 

        always_sc s1 (Ret v) scs P.

Proof. 

case: scs=>[|sc scs] C H; split=>// s2 E.

split; last by [move=>s3 q; move/stepRet].

- by case: sc.

by apply: H E.

Qed.



Lemma alw_ret A s1 (v : A) (P : state -> proc A -> Prop) : 

        s1 \In coherent -> 

        (forall s2, network_rely W this s1 s2 -> P s2 (Ret v)) -> 

        always s1 (Ret v) P.

Proof. by move=>C H ps; apply: alw_ret'. Qed.



Lemma alw_act A s1 (a : action W A this) (P : state -> proc A -> Prop) :

        s1 \In coherent ->

        (forall s2, network_rely W this s1 s2 -> exists S : a_safe a s2,

        P s2 (Act a) /\

        forall s3 v s4, a_step S s3 v -> 

                        network_rely W this s3 s4 -> P s4 (Ret v)) ->

        always s1 (Act a) P. 

Proof.

move=>C H [|sc scs]; split=>// s2; case/H=>// H1[H2]H3//. 

split=>//; first by case: sc.

move=>s3 q /stepAct [v][pf][_ -> St].

rewrite (pf_irr H1 pf) in H3.

apply: alw_ret'; last by move=>s4; apply: H3 St.

by case: (step_coh (a_step_sem St)).

Qed.



Notation alwsafe_sc s p scs := (always_sc s p scs (fun _ _ => True)).

Notation alwsafe s p := (always s p (fun _ _ => True)).



Lemma alw_imp' A s (p : proc A) scs (P1 P2 : state -> proc A -> Prop) : 

         (forall s p, s \In coherent -> P1 s p -> P2 s p) -> 

         always_sc s p scs P1 -> always_sc s p scs P2.

Proof.

elim: scs s p=>[|sc scs IH] s p /= I; case=>C L; split=>// s2 E.

- by apply: I (L _ E); case/rely_coh: E.

case/L: (E)=>S H T; split=>//; first by apply: I H; case/rely_coh: E. 

by move=>s3 q; move/T; apply: IH I. 

Qed.



Lemma alw_imp A s (p : proc A) (P1 P2 : state -> proc A -> Prop) : 

        (forall s p, s \In coherent -> P1 s p -> P2 s p) -> 

        always s p P1 -> always s p P2.

Proof. by move=>I H ps; apply: alw_imp' I _. Qed.



Lemma alwA' A B s (p : proc A) scs (P : B -> state -> proc A -> Prop) : 

        alwsafe_sc s p scs ->

        (always_sc s p scs (fun s' p' => forall x, P x s' p') <->

         forall x, always_sc s p scs (fun s' p' => P x s' p')).

Proof.

move=>Ls; split=>[{Ls}|]. 

- elim: scs s p=>[|sc scs IH] s p /= [C Et x]; split=>// s2; move/Et=>//.

  by case=>S Ha L; split=>// s3 q; move/L/IH.

elim: scs s p Ls=>[|sc scs IH] s p /= [C Et Ha]; split=>// s2 E.

- by move=>x; case: (Ha x)=>_; apply. 

case/Et: (E)=>/= S _ L; split=>//.

- by move=>x; case: (Ha x)=>_; case/(_ _ E). 

move=>s3 q T; apply: IH; first by apply: L T.

by move=>x; case: (Ha x)=>_; case/(_ _ E)=>_ _; apply. 

Qed.



Lemma alwA A B s (p : proc A) (P : B -> state -> proc A -> Prop) : 

        alwsafe s p ->

        (always s p (fun s' p' => forall x, P x s' p') <->

         forall x, always s p (fun s' p' => P x s' p')).

Proof.

move=>Ls; split.

- by move=>H x ps; move: x; apply/(alwA' _ (Ls ps)).

by move=>H ps; apply/(alwA' _ (Ls ps))=>x; apply: H.

Qed.



Arguments alwA [A B s p P].



Lemma alwI' A s (p : proc A) scs (P : Prop) (Q : state -> proc A -> Prop) : 

        alwsafe s p ->

        (always_sc s p scs (fun s' p' => P -> Q s' p') <->

         (P -> always_sc s p scs (fun s' p' => Q s' p'))).

Proof.

move=>Ls; split.

- elim: scs s p Ls=>[|sc scs IH] s p Ls /= [C Et H]; split=>// s2.

  - by move/Et; apply.

  move=>M; move: (alw_envs Ls M)=>{Ls} Ls.

  case/Et: M=>H1 /(_ H) H2 H3; split=>// s3 q T.

  by apply: IH H; [apply: alw_step T | apply: H3].

elim: scs s p Ls=>[|sc scs IH] s p /= Ls H; 

move: (alw_coh Ls)=>C; split=>// s2 M; first by case/H=>_; apply. 

move: (alw_envs Ls M)=>{Ls} Ls.

split; first by move/alw_safe: Ls.  

- by case/H=>_; case/(_ _  M). 

move=>s3 q T; move: (alw_step Ls T)=>{Ls} Ls.

by apply: IH Ls _; case/H=>_; case/(_ _ M)=>_ _; apply. 

Qed.



Lemma alwI A s (p : proc A) (P : Prop) (Q : state -> proc A -> Prop) : 

        alwsafe s p ->

         always s p (fun s' p' => P -> Q s' p') <->

         (P -> always s p (fun s' p' => Q s' p')). 

Proof.

move=>Ls; split; first by move=>H Hp scs; apply/alwI': Hp.

by move=>H scs; apply/alwI'=>//; move/H; move/(_ scs).

Qed.



Arguments alwI [A s p P Q].



Lemma alw_bnd A B (p1 : proc A) (p12 : proc B) pp2 s1 

                 (P : state -> B -> Prop) :

        p12 \In pcat p1 pp2 -> 

        always s1 p1 (fun s2 p2 =>

                        

          forall p v, p2 = Ret v -> p \In pp2 v -> 

           
           always s2 p (fun s q => forall v, q = Ret v -> P s v)) ->

        always s1 p12 (fun s p => forall v, p = Ret v -> P s v).

Proof.

move=>Tc Ls scs.

elim: scs s1 p1 p12 Tc Ls=>[|sc scs IH] s1 p1 p12 Tc Ls /=.

- by split=>[|s2]; [apply: alw_coh Ls | case: Tc=>k [->]].

split=>[|s2 E]; first by apply: alw_coh Ls.

case: Tc IH=>k [->{p12}] H IH.

split=>//; last first.

- move=>s3 q T; case/stepSeq: T Ls.

  - case=>v [_ ->->-> C]; move/alw_refl/(_ _ _ (erefl _)). 

    by move/(_ _ (H v))/alw_envs; apply. 

  case=>sc' [p'][_ ->{q}] T; move/alw_envs/(_ E)/alw_step.

  by move/(_ _ _ _ T)/IH; apply; exists k.

move/(alw_envs Ls): E=>{Ls} Ls. 

have Ls': always s2 p1 (fun s2 p2 =>

  forall sc p v, p2 = Ret v -> p \In pp2 v -> safe p sc s2).

- by apply: alw_imp Ls=>s p _ I sc' q v E; move/(I _ _ E)/alw_safe. 

case: sc=>//=; first by case: p1 {Ls} Ls'.

move=>sc; case: (Ls [:: sc])=>C.

by move/(_ _ (rely_refl this C)); case.

Qed.



Lemma alwsafe_bnd A B (p1 : proc A) (p12 : proc B) s1 pp2 :

        p12 \In pcat p1 pp2 ->

        always s1 p1 (fun s2 p2 =>

          forall p v, p2 = Ret v -> p \In pp2 v -> alwsafe s2 p) ->

        alwsafe s1 p12.

Proof.

move=>T Ls.

suff H: always s1 p12 (fun s p => forall v, p = Ret v -> True).

- by apply: alw_imp H.

apply: alw_bnd T _; apply: alw_imp Ls=>s p _ I q v H.

by move/(I _ _ H); apply: alw_imp.

Qed.



Definition after A s (p : proc A) (P : A -> state -> Prop) := 

  always s p (fun s2 p2 => forall v, p2 = Ret v -> P v s2).



Lemma aft_bnd A B (p1 : proc A) (p12 : proc B) pp2 s1 P :

        p12 \In pcat p1 pp2 -> 

        after s1 p1 (fun v s => 

          forall p, p \In pp2 v -> after s p P) ->

        after s1 p12 P.

Proof. 

move=>T H; apply: alw_bnd T _.

by apply: alw_imp H=>s p _ I q v E; move/(I v E).

Qed.



Lemma aftI A s (p : proc A) (P : Prop) (Q : A -> state -> Prop) : 

        alwsafe s p ->

         after s p (fun v s' => P -> Q v s') <->

         (P -> after s p (fun v s' => Q v s')).

Proof.

move=>Ls; rewrite -(alwI Ls).

split; apply: alw_imp=>t q _ I.

- by move=>Hp v; move/I; apply. 

by move=>v; move/I. 

Qed.



Lemma aft_alwsf A s (p : proc A) :

        alwsafe s p <-> after s p (fun v s => True).

Proof. by split; apply: alw_imp. Qed.



Lemma aft_imp A s (p : proc A) (P1 P2 : A -> state -> Prop) : 

        (forall v s, s \In coherent -> 

                     P1 v s -> P2 v s) -> 

        after s p P1 -> after s p P2.

Proof. by move=>I; apply: alw_imp=>s1 p1 C H v; move/H; apply: I. Qed.



Lemma aftA A B s (p : proc A) (P : B -> A -> state -> Prop) : 

        alwsafe s p ->

        (after s p (fun v s' => forall x, P x v s') <->

         forall x, after s p (fun v s' => P x v s')).

Proof.

move=>Ls; rewrite -(alwA Ls).

split; apply: alw_imp=>t q _ I.

- by move=>x v; move/I.

by move=>v; move/I.

Qed.



Arguments aftA [A B s p P].

Arguments aftI [A s p P Q].



End Always.



Section AlwaysInject.

Variables (V W : world) (K : hooks) (A : Type) (w : injects V W K) (this: nid).

Notation W2 := (inj_ext w).



Lemma rely_ext i j s : 

        i \In Coh V -> 

        network_rely W this (i \+ j) s ->  

        exists i' j', s = i' \+ j' /\ i' \In Coh V.

Proof.

move=>C M; case: (rely_coh M)=>_; rewrite (cohE w).

by case=>[s1][s2][->] Cs1 _; exists s1, s2. 

Qed.



Lemma rely_split' z s1 s1' s2 s2' : 

  s1 \In Coh V -> s2 \In Coh V ->

  network_step W z (s1 \+ s1') (s2 \+ s2') ->

  network_step V z s1 s2 /\ network_step (inj_ext w) z s1' s2'.

Proof.

move=>C1 C2 N.

case: (sem_split w C1 C2 N); case=>R E; [subst s2'|subst s2];

split=>//; apply: Idle; split=>//.

case: (step_coh N)=>C _.

case/(cohE w): (C)=>s3[s4][E]C' C''.

move: (coh_prec (cohS C) C1 C' E)=>Z; subst s3.

by rewrite (joinxK (cohS C) E).

Qed.



Lemma rely_split s1 s1' s2 s2' : 

  s1 \In Coh V -> s2 \In Coh V ->

  network_rely W this (s1 \+ s1') (s2 \+ s2') ->

  network_rely V this s1 s2 /\ network_rely (inj_ext w) this s1' s2'.

Proof.

move=>C1 C2 [n E].

elim: n s1 s1' E C1 C2=>[|n IH] /= s1 s1'; last first.

- move=>[z][s3][N]H1 H2 C1 C2.

  case: (step_coh H1)=>D1 D2; move/(cohE w): D2=>[s4][s5][Z]C3 C4.

  subst s3; case: (IH s4 s5 H2 C3 C2)=>G1 G2.

  case: (rely_split' C1 _ H1)=>//H3 H4; split=>//.

  + by case: G1=>m R; exists m.+1, z, s4. 

  by case: G2=>m R; exists m.+1, z, s5. 

move=> [E1 E2] C1 C2.

move: (coh_prec (cohS E2) C1 C2 E1)=>Z; subst s2.

rewrite (joinxK (cohS E2) E1); split; exists 0=>//. 

split=>//; rewrite -(joinxK (cohS E2) E1)=>{E1 s2' C2}.

move/(cohE w): (E2)=>[t1][t2][E]C' C''.

move: ((coh_prec (cohS E2)) C1 C' E)=>Z; subst t1.

by rewrite (joinxK (cohS E2) E).

Qed.



Lemma alw_inject (p : proc this V A)

      (P : state -> proc this V A -> Prop) i j :

        i \+ j \In Coh W ->

        always i p P ->

        always (i \+ j) (Inject w p)

          (fun m q => exists i' j', 

             [/\ m = i' \+ j', i' \In Coh V, network_rely W2 this j j' &

                 (exists q', q = Inject w q' /\ P i' q') \/

                 (exists v', q = Ret v' /\ P i' (Ret v'))]).

Proof.

move=>C Ls scs; elim: scs i j p C Ls=>[|sc scs IH] i j p C Ls /=; 

split=>// {C} s M; move: (alw_coh Ls) (proj2 (rely_coh M))=>Ci C;

case/(rely_ext Ci): M C (M)=>i1 [j1][->{s}] Ci1 C;

case/(rely_split Ci Ci1)=> /(alw_envs Ls) {Ls} Ls S1.

- by exists i1, j1; split=>//; left; exists p; move/alw_refl: Ls.

split.

- case: sc=>//; last by case: p Ls=>// v; exists i1, j1.

  by move=>sc; move: (alw_safe Ls sc)=>Sf; exists i1; split=>//; exists j1.

- by exists i1, j1; split=>//; left; exists p; move/alw_refl: Ls.

move=>s q; rewrite stepInject => H.

case: H Ls.

- case=>_ [v][_ ->->->{p q s} _] Ls;  apply: alw_ret'=>// s M.

  case/(rely_ext Ci1): M (M)=>i2 [j2][->{s}] Ci2.

  case/(rely_split Ci1 Ci2)=> /(alw_envs Ls) {Ls} Ls S2.

  exists i2, j2; split=>//; first by apply: rely_trans S1 S2.

  by right;  exists v; move/alw_refl: Ls.

case=>sc' [q'][x1][i2][y1][_ -> E -> {sc q s}] _ T Ls.



have [E1 E2] : x1 = i1 /\ y1 = j1.

- case: T=>Cx1 _.

  move: (coh_prec (cohS C) Ci1 Cx1 E) (E)=><-{E Cx1 x1}.

  by move/(joinxK (cohS C)).

rewrite {E x1}E1 {y1}E2 in T *.

have C' : i2 \+ j1 \In Coh W.

- move: (C)=>C'; rewrite (cohE w) in C *=>[[s1]][s2][E]D1 D2.

  move: (coh_prec (cohS C') Ci1 D1 E)=>Z; subst i1.

  move: (joinxK (cohS C') E)=>Z; subst s2; clear E.

  apply/(cohE w); exists i2, j1; split=>//.

  by case/step_coh: (pstep_network_sem T). 

move/(alw_step Ls): T=>{Ls} Ls.

apply: alw_imp' (IH _ _ _ C' Ls)=>{IH Ls C' C Ci Ci1 i i1 i2 p q' sc' scs}.

move=>s p _ [i2][j2][->{s}] Ci2 S2 H; exists i2, j2; split=>//.

by apply: rely_trans S1 S2.  

Qed.



Lemma aft_inject (p : proc this V A) (P : A -> state -> Prop) i j :

        i \+ j \In Coh W ->

        after i p P ->

        after (i \+ j) (Inject w p)

          (fun v m => exists i' j', 

             [/\ m = i' \+ j', i' \In Coh V, 

                 network_rely W2 this j j' & P v i']).

Proof.

move=>C /(alw_inject C); apply: alw_imp=>{p i C} s q _.

case=>i1 [j1][->{s} Ci1 S1] H v E.

move: E H=>-> [[q'][//]|[_][[<-]] H].

by exists i1, j1; split=>//; apply: H. 

Qed.



End AlwaysInject.



Notation alwsafe_sc s p scs := (always_sc s p scs (fun _ _ => True)).

Notation alwsafe s p := (always s p (fun _ _ => True)).



Module AlwaysInductiveInv.

Section AlwaysInductiveInv.

Import InductiveInv.

Variable pr : protocol.



Notation l := (plab pr).

Notation coh := (coh pr).

Variable I : dstatelet -> pred nid -> Prop.

Variable ii : InductiveInv pr I.



Variables (A : Type) (this: nid).

Notation V := (mkWorld pr).

Notation W := (mkWorld (ProtocolWithIndInv ii)).



Lemma alw_ind_inv (p : proc this V A)

      (P : state -> proc this V A -> Prop) i :

        i \In Coh W ->

        always i p P ->

        always i (WithInv pr I ii (erefl _) p)

          (fun m q => m \In Coh W /\

                 ((exists q', q = WithInv pr I ii (erefl _) q' /\ P m q') \/

                  (exists v', q = Ret v' /\ P m (Ret v')))).

Proof.

move=>C Ls scs; elim: scs i p C Ls=>[|sc scs IH] i p C Ls /=;

split=>//{C}s M; move: (alw_coh Ls) (proj2 (rely_coh M))=>Ci C.

- split; first by case:(rely_coh M)=>_/with_inv_coh.

  left; exists p; split=>//; apply: alw_refl.

  by move/with_inv_rely': M; apply: (alw_envs). 

split.

- case: sc=>//; last by case: p Ls=>//.

  move=>sc; move: (alw_safe Ls sc)=>Sf.

  by move/with_inv_rely': M; move/(alw_envs Ls)=>H; apply: (alw_safe H).

- split=>//; left; exists p; split=>//.

  by move/with_inv_rely': M; move/(alw_envs Ls)=>H; apply: alw_refl.

move=>s' q/stepWithInv=>H; case: H Ls.

- case=>[v][Z1]Z2 Z3 Z4 _ _ Ls; subst s' p q sc. apply: alw_ret'=>//=s' M'.

  split; first by case/rely_coh: M'.

  right; exists v; split=>//.

  by move: (rely_trans M M')=>/with_inv_rely'/(alw_envs Ls)/alw_refl.

case=>sc'[q'][Z1]Z2 _ _ T Ls; subst q sc.

have X: s' \In Coh W by apply: (pstep_inv (proj2 (rely_coh M)) T).

move/with_inv_rely': (M)=>/(alw_envs Ls)=>Ls'.

move/(alw_step Ls'): T=>{Ls'} Ls'.

by apply: IH.

Qed.



Lemma aft_ind_inv (p : proc this V A) (P : A -> state -> Prop) i :

        i \In Coh W ->

        after i p P ->

        after i (WithInv pr I ii (erefl _) p)

          (fun v m => m \In Coh W /\ P v m).

Proof.

move=>C /(alw_ind_inv C); apply: alw_imp=>{p i C} s q _.

case=>C H; split=>//; subst q.

case:H; first by move=>[?]; case. 

by case=>v'[][]<-{v'}/(_ v (erefl _)). 

Qed.



End AlwaysInductiveInv.

End AlwaysInductiveInv.



Export AlwaysInductiveInv.

