From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.
(* Freshness:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Keys.
Variables (K : ordType) (V : Type) (U : union_map_class K V).
Implicit Types (k : K) (v : V) (f : U).

Lemma keys_last_mono f1 f2 k :
        path oleq k (dom f1) ->
        path oleq k (dom f2) ->
        (forall x, x \in dom f1 -> x \in dom f2) ->
        oleq (last k (dom f1)) (last k (dom f2)).

End Keys.

Section FreshLastKey.
Variable V : Type.
Implicit Type f : union_map [ordType of nat] V.

Definition last_key f := last 0 (dom f).

Lemma last_key0 : last_key Unit = 0.

Lemma last_key_dom f : valid f -> last_key f \notin dom f -> f = Unit.

Lemma dom_last_key f :  valid f -> ~~ empb f -> last_key f \in dom f.

Lemma last_key_max f x : x \in dom f -> x <= last_key f.

Lemma max_key_last f x :
        x \in dom f -> {in dom f, forall y, y <= x} -> last_key f = x.

Lemma last_keyPt (x : nat) v : last_key (x \\-> v) = x.

Lemma hist_path f : path oleq 0 (dom f).

Lemma last_key_mono f1 f2 :
        {subset dom f1 <= dom f2} -> last_key f1 <= last_key f2.

Lemma last_keyfUn f1 f2 :
        valid (f1 \+ f2) -> last_key f1 <= last_key (f1 \+ f2).

Lemma last_keyUnf f1 f2 :
        valid (f1 \+ f2) -> last_key f2 <= last_key (f1 \+ f2).

Definition fresh f := (last_key f).+1.

Lemma dom_ordfresh f x : x \in dom f -> x < fresh f.

Lemma dom_freshn f n : fresh f + n \notin dom f.

Lemma dom_fresh f : fresh f \notin dom f.

Lemma valid_fresh f v : valid (f \+ fresh f \\-> v) = valid f.

Lemma valid_fresh' f v i w :
  valid (f \+ i \\-> w) ->
  valid (f \+ fresh (f \+ i \\-> w) \\-> v).

Lemma last_fresh f v : valid f -> last_key (f \+ fresh f \\-> v) = fresh f.

End FreshLastKey. *)
(* State:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness DepMaps EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section TaggedMessages. 

  Structure TaggedMessage :=
    TMsg {
        tag: nat;
                tms_cont :> seq nat          
      }.

End TaggedMessages.

Section Shared.

  Definition Label := [ordType of nat].

  Structure msg (mtype : Type) :=
    Msg {content  : mtype;
         from     : nat;
         to       : nat;
         active   : bool }.

  Definition mid := [ordType of nat].

  Definition soup : Type :=
    union_map mid (msg (TaggedMessage)).

  Variables (s: soup) (V: valid s).

  Definition post_msg m : soup * mid :=
    let: f := fresh s in (s \+ f \\-> m, f).

  Lemma post_valid m :  valid (post_msg m).1.

  Lemma post_fresh m : (post_msg m).2 \notin dom s.

  Definition mark_msg T (m : msg T) : msg T :=
    Msg (content m) (from m) (to m) false.

  Definition consume_msg (s : soup) (id : mid) : soup :=
    let: mr := find id s in
    if mr is Some m then upd id (mark_msg m) s else s.

  Definition is_active (id : mid) :=
    exists m, find id s = Some m /\ active m.

  Definition is_consumed (id : mid) :=
    exists m, find id s = Some m /\ ~~ active m.

  Lemma find_consume s' (id: mid) m:
    valid s' -> find id s' = Some m ->
    find id (consume_msg s' id) = Some (mark_msg m).

  Lemma find_mark m s' msg :
    valid s' -> find m (consume_msg s' m) = Some msg ->
    exists msg', find m s' = Some msg' /\ msg = mark_msg msg'.

  Lemma mark_other m m' s' :
    valid s' -> m' == m = false -> find m' (consume_msg s' m) = find m' s'.

  Lemma consume_valid s' m : valid s' -> valid (consume_msg s' m).

  Lemma consumeUn (s': soup) (i : mid) mm
        (j : mid) : valid (s' \+ i \\-> mm) ->
    consume_msg (s' \+ i \\-> mm) j = 
    if i == j then s' \+ i \\-> mark_msg mm
    else (consume_msg s' j) \+ (i \\-> mm).

  Notation "'{{' m 'in' s 'at' id '}}'" := (find id s = Some m).
  Notation "'{{' m 'in' s '}}'" := (exists id, {{m in s at id}}).

End Shared.

Section Local.

  Variable U : Type.

  Definition nid := nat.

  Definition lstate_type := union_map [ordType of nid] U.

End Local.

Section Statelets.

  Structure dstatelet  :=
    DStatelet {
                dstate     : lstate_type heap;
        dsoup      : soup
    }.

  Fixpoint empty_lstate (ns : seq nid) :=
    if ns is n :: ns'
    then n \\-> Heap.empty \+ (empty_lstate ns')
    else  Unit.
    
  Definition empty_dstatelet : dstatelet :=
    @DStatelet (empty_lstate [::]) Unit.

  Lemma valid_mt_soup : valid (dsoup empty_dstatelet).

  Lemma valid_mt_state  : valid (dstate empty_dstatelet).

  Lemma mt_nodes : dom (dstate empty_dstatelet) =i [::].

End Statelets.

Module StateGetters.
Section StateGetters.

Definition state := union_map Label dstatelet.

Definition getStatelet (s: state) (i : Label) : dstatelet :=
  match find i s with
  | Some d => d
  | None => empty_dstatelet
  end.

End StateGetters.
End StateGetters.

Export StateGetters. *)
(* EqTypeX:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module EqualityX.

Definition axiom T (e : rel T) := forall x y, reflect (x = y) (e x y).

Structure mixin_of T := Mixin {op : rel T; _ : axiom op}.
Notation class_of := mixin_of (only parsing).

Section ClassDef.

Structure type := Pack {sort; _ : class_of sort; _ : Type}.
Local Coercion sort : type >-> Sortclass.
Variables (T : Type) (cT : type).

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Definition pack c := @Pack T c T.
Definition clone := fun c & cT -> T & phant_id (pack c) cT => pack c.

End ClassDef.

Module Exports.
Coercion sort : type >-> Sortclass.
Notation eqTypeX := type.
Notation EqMixinX := Mixin.
Notation EqTypeX T m := (@pack T m).
End Exports.

End EqualityX.
Export EqualityX.Exports.

Section EqualityConversion.

Variable U: eqTypeX.
Definition eq_opX T := EqualityX.op (EqualityX.class T).

Lemma eqxP : Equality.axiom (@eq_opX U).

Canonical eqMixinX := EqMixin eqxP.
Canonical eqTypeX' := EqType U eqMixinX.                                   

End EqualityConversion. *)
(* Protocols:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Definition getLocal (n : nid) (d : dstatelet) : heap :=
  match find n (dstate d) with
  | Some h => h
  | None => Unit
  end.

Lemma getLocalU n m d s :
  valid (dstate d) -> m \in dom (dstate d) ->
  getLocal n d = (getLocal n {| dstate := upd m (getLocal m d) (dstate d); dsoup := s |}).
        
Module Coherence.

Section CohDef.

Variable nodes: dstatelet -> pred nid.

Notation protocol_soup  := (soup (TaggedMessage)).

Structure mixin_of (coh : Pred dstatelet) := Mixin {
    _   : forall d, coh d -> valid (dstate d);
    _   : forall d, coh d -> valid (dsoup d);
    _   : forall d, coh d -> dom (dstate d) =i nodes d;
}.

End CohDef.

Section ClassDef.

Variable nodes: dstatelet -> pred nid.

Notation class_of := mixin_of (only parsing).

Structure cohpred : Type := Pack {sort : dstatelet -> Prop;
                                  _ : class_of nodes sort}.
Local Coercion sort : cohpred >-> Funclass.

Variables (T : dstatelet -> Prop) (cT : cohpred).

Definition class := let: Pack _ c as cT' := cT
                    return class_of nodes cT' in c.

Definition pack c := @Pack T c.
Definition clone := fun c & T = cT & phant_id (pack c) cT => pack c. 

End ClassDef.

Module Exports.
Section Exports.

Variable Lstate : Type.
Variable nodes: dstatelet -> pred nid.

Coercion sort : cohpred >-> Funclass.
Definition cohpred := cohpred.
Definition CohPredMixin := Mixin.
Definition CohPred T m := (@pack T m).

Notation "[ 'cohPredMixin' 'of' T ]" := (class _ : mixin_of T)
  (at level 0, format "[ 'cohPredMixin'  'of'  T ]") : form_scope.
Notation "[ 'cohpred' 'of' T 'for' C ]" := (@clone T C _ (erefl _) id)
  (at level 0, format "[ 'cohpred'  'of'  T  'for'  C ]") : form_scope.
Notation "[ 'cohpred' 'of' T ]" := (@clone T _ _ (erefl _) id)
  (at level 0, format "[ 'cohpred'  'of'  T ]") : form_scope.

Canonical cohpred_PredType := mkPredType (@sort nodes).

Variable coh : cohpred nodes.

Lemma cohVl d : d \In coh -> valid (dstate d).

Lemma cohVs d : d \In coh -> valid (dsoup d).

Lemma cohDom d : d \In coh -> dom (dstate d) =i nodes d.

End Exports.
End Exports.
End Coherence.

Export Coherence.Exports.

Module Transitions.
Section Transitions.

Variable nodes: dstatelet -> pred nid.

Variable coh : cohpred nodes.

Notation lstate := heap%type.

Definition send_step_t (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop) :=
  forall (this to : nid) (d : dstatelet)
         (msg : seq nat) (pf : send_safe this to d msg),
    option lstate.

Definition s_step_coh_t t_snd
           (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop)
           (send_step : send_step_t send_safe) :=
  forall this to d msg (pf : send_safe this to d msg) b,
    let: f := dstate d in
    let: s := dsoup d  in
    Some b = @send_step this to d msg pf ->         
    let: f' := upd this b f in
    let: tms := TMsg t_snd msg in 
    let: s' := (post_msg s (Msg tms this to true)).1 in 
    coh (DStatelet f' s').

Structure send_trans := SendTrans
    {
      t_snd : nat;

      send_safe : nid -> nid -> dstatelet -> seq nat -> Prop;
      s_safe_coh : forall this to d m, send_safe this to d m -> coh d;
      s_safe_in  : forall this to d m, send_safe this to d m ->
                                       this \in nodes d /\ to \in nodes d;  

      send_step : send_step_t send_safe;

      s_safe_def : forall this to d msg,
          send_safe this to d msg <->
          exists b pf, @send_step this to d msg pf = Some b;

      s_step_coh : s_step_coh_t t_snd send_step 
    }.

Definition receive_step_t :=
  forall (this from: nid) (m : seq nat)
         (d : dstatelet) (pf : coh d)
         (pf' : this \in nodes d), lstate.

Definition r_step_coh_t (msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool)
           t_rcv (receive_step : receive_step_t) :=
  forall (d : dstatelet) from this i (C : coh d) (pf' : this \in nodes d)
         (m : TaggedMessage),
    let: f := dstate d in
    let: s := dsoup d  in
    this \in dom f ->
    find i s = Some (Msg m from this true) ->
    msg_wf d C this from m -> tag m = t_rcv ->
    let: loc' := receive_step this from m d C pf' in
    let: s'' := consume_msg s i in
    let: f' := upd this loc' f in
    coh (DStatelet f' s'').

Structure receive_trans := ReceiveTrans
    {
      t_rcv : nat;

      msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool;

      receive_step : receive_step_t;

      r_step_coh : r_step_coh_t msg_wf t_rcv receive_step
    }.

End Transitions.

Module Exports.

Definition SendTrans := SendTrans.
Definition send_trans := send_trans.
Definition ReceiveTrans := ReceiveTrans.
Definition receive_trans := receive_trans.

Definition t_snd := t_snd.
Definition send_safe := send_safe.
Definition send_step := send_step.
Definition send_step_t := send_step_t.

Definition s_safe_coh := s_safe_coh.
Definition s_safe_in := s_safe_in.
Definition s_safe_def := s_safe_def.
Definition s_step_coh := s_step_coh.
Definition s_step_coh_t := s_step_coh_t.

Definition t_rcv := t_rcv.
Definition msg_wf := msg_wf.

Definition receive_step := receive_step.
Definition receive_step_t := receive_step_t.
Definition r_step_coh := r_step_coh.
Definition r_step_coh_t := r_step_coh_t.

End Exports.

End Transitions.

Export Transitions.Exports.

Module Protocols.
Section Protocols.

Definition snd_tags {nodes} {coh : cohpred nodes}
           (sts : seq (send_trans coh)) := 
  map (@t_snd nodes _) sts.

Definition rcv_tags {nodes} {coh : cohpred nodes} (sts : seq (receive_trans coh)) :=
  map (@t_rcv nodes _) sts.

Structure protocol := Protocol {
  nodes: dstatelet -> pred nid;
  plab : Label;                        
  coh : cohpred nodes ;
  snd_trans : seq (send_trans coh);
  rcv_trans : seq (receive_trans coh);

  snd_uniq : uniq (snd_tags snd_trans);
  rcv_uniq : uniq (rcv_tags rcv_trans);
}.

End Protocols.

Module Exports.
Section Exports.

Definition protocol := protocol.
Definition Protocol := Protocol.
Definition plab := plab.
Definition nodes := nodes.
Definition coh := coh.
Definition snd_trans := snd_trans.
Definition rcv_trans := rcv_trans.

Definition snd_tags p := snd_tags (snd_trans p).
Definition rcv_tags p := rcv_tags (rcv_trans p).

Definition snd_uniq := snd_uniq.
Definition rcv_uniq := rcv_uniq.

Definition cohMT d := d = empty_dstatelet.

Lemma pred0v1 d: cohMT d -> valid (dstate d).

Lemma pred0v2 d: cohMT d -> valid (dsoup d).

Lemma pred0v3 d: cohMT d -> dom (dstate d) =i [::].

Definition EmptyProtMixin := CohPredMixin pred0v1 pred0v2 pred0v3.
Definition empty_coh := CohPred EmptyProtMixin.

Lemma snd_uniq0 {nodes} {coh : cohpred nodes} :
  uniq (@Protocols.snd_tags _ coh ([::] : seq (send_trans coh))).

Lemma rcv_uniq0 {nodes} {coh : cohpred nodes} :
  uniq (@Protocols.rcv_tags nodes _ ([::] : seq (receive_trans coh))).

Definition EmptyProt i : protocol :=
  @Protocol (fun _ => pred0) i empty_coh [::] [::] snd_uniq0 rcv_uniq0.

End Exports.
End Exports.

End Protocols.

Export Protocols.Exports. *)
(* Worlds:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module WorldGetters.
Section WorldGetters.

Definition context := union_map Label protocol.

Definition hook_domain := [ordType of ((nat * Label) * (Label * nat))%type].

Definition hook_type := heap -> heap -> seq nat -> nid -> Prop.

Definition hooks := union_map hook_domain hook_type.
Definition world := (context * hooks)%type.

Definition getc (w: world) : context := fst w.
Coercion getc : world >-> context.

Definition geth (w: world) : hooks := snd w.
Coercion geth : world >-> hooks.

Variable w : world.

Variables (p : protocol).

Definition getProtocol i : protocol:=
  match find i (getc w) with
  | Some p => p
  | None => EmptyProt i 
  end.

End WorldGetters.
End WorldGetters.

Export WorldGetters.

Module Worlds.

Module Core.
Section Core.

Definition hooks_consistent (c : context) (h : hooks) : Prop :=
  forall z lc ls t, ((z, lc), (ls, t)) \in dom h ->
  (lc \in dom c) && (ls \in dom c).

Definition hook_complete w := hooks_consistent (getc w) (geth w).

Lemma hook_complete0 c : hook_complete (c, Unit).

Definition Coh (w : world) : Pred state := fun s =>
  let: c := fst w in
  let: h := snd w in                                           
  [/\ valid w, valid s, hook_complete w,
      dom c =i dom s &
      forall l, coh (getProtocol w l) (getStatelet s l)].

Lemma cohW w s : Coh w s -> valid w.

Lemma cohS w s : Coh w s -> valid s.

Lemma cohH w s : Coh w s -> hook_complete w.

Lemma cohD w s : Coh w s -> dom (getc w) =i dom s.

Lemma coh_coh w s l : Coh w s -> coh (getProtocol w l) (getStatelet s l).

Lemma unit_coh w s :
  Coh w s -> w = Unit <-> s = Unit.

Lemma Coh0 (w : world) (s : state) :
  w = Unit -> s = Unit -> Coh w s.

Lemma CohUn (w1 w2 : world) (s1 s2 : state) :
  Coh w1 s1 -> Coh w2 s2 ->
  valid (w1 \+ w2) -> Coh (w1 \+ w2) (s1 \+ s2).

Lemma coh_prec w: precise (Coh w).

Lemma locE i n k x y :
  k \in dom i -> valid i -> valid (dstate (getStatelet i k)) ->
  getLocal n (getStatelet (upd k
       {| dstate := upd n x (dstate (getStatelet i k));
          dsoup := y |} i) k) = x.

Lemma locE' d n x y :
  valid (dstate d) ->
  getLocal n {| dstate := upd n x (dstate d);
                dsoup := y |} = x.

Lemma locU n n' x st s :
  n != n' ->
  valid st ->
  getLocal n {| dstate := upd n' x st; dsoup := s |} =
  getLocal n {| dstate := st; dsoup := s |}.

Section MakeWorld.

Variable p : protocol.
Notation l := (plab p).

Definition mkWorld : world := (l \\-> p, Unit).

Lemma prEq : (getProtocol mkWorld l) = p.
                          
End MakeWorld.

End Core.
End Core.

End Worlds.

Export Worlds.Core. *)
(* NetworkSem:
From mathcomp.ssreflect 
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section NetworkSemantics.

Variable w : world.
Variable this: nid.

Notation getl := (getLocal).
Notation gets := (getStatelet).
Notation getp := (@getProtocol w).

Definition get_coh l := @coh (getp l).
Definition get_st l := @snd_trans (getp l).
Definition get_rt l := @rcv_trans (getp l).

Lemma getsE l s : l \in dom s -> find l s = Some (gets s l).

Lemma coh_s l s: Coh w s -> coh (getp l) (gets s l).

Lemma Coh_dom l s : l \in dom s -> Coh w s -> 
                     dom (dstate (gets s l)) =i nodes (getp l) (gets s l).

Definition all_hooks_fire (h : hooks) l st s n (msg : seq nat) to :=
  
  forall z lc hk, Some hk = find ((z, lc), (l, st)) h ->
  lc \in dom s -> l \in dom s ->               
  let: core_local   := getl n (gets s lc) in
  let: client_local := getl n (gets s l)  in              
  hk core_local client_local msg to.

Inductive network_step (s1 s2 : state) : Prop :=
  
  Idle of s1 \In Coh w /\ s1 = s2

| SendMsg 
          l st (_ : st \In @get_st l) to msg b
          (pf: this \in (nodes (getp l) (gets s1 l)))
          (pf' : l \in dom s1) (C: Coh w s1)
          
          (S : send_safe st this to (gets s1 l) msg)

          (pf_hooks : all_hooks_fire (geth w) l (t_snd st) s1 this msg to)
          
          (spf : Some b = send_step S) of
          
          let: d :=  gets s1 l in

          let: f' := upd this b (dstate d) in
          let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)
                                              this to true)).1 in
          s2 = upd l (DStatelet f' s') s1

| ReceiveMsg l rt (_ : rt \In @get_rt l) i from
             
             (pf: this \in (nodes (getp l)) (gets s1 l))
             (pf': l \in dom s1) (C: Coh w s1)
             (msg : TaggedMessage)
             (pf': tag msg = t_rcv rt) of
             let: d := (gets s1 l) in
             let: f := dstate d in
             let: s := dsoup d  in

             [/\ find i s = Some (Msg msg from this true),
              msg_wf rt (coh_s l C) this from msg &
              
              let loc' := receive_step rt from msg (coh_s l C) pf in
              let: f' := upd this loc' f in
              let: s'' := consume_msg s i in
              s2 = upd l (DStatelet f' s'') s1].

Lemma step_coh s1 s2: network_step s1 s2 ->
                      Coh w s1 /\ Coh w s2.

Lemma step_preserves_labels s1 s2 :
  network_step s1 s2 -> dom s1 =i dom s2.

Lemma step_is_local s1 s2 l: network_step s1 s2 ->
  forall z, z != this ->
  find z (dstate (gets s1 l)) = find z (dstate (gets s2 l)).

Lemma stepV1 s1 s2: network_step s1 s2 -> valid s1.

Lemma stepV2 s1 s2: network_step s1 s2 -> valid s2.

Lemma step_preserves_node_ids s1 s2 l:
  l \in dom s1 -> network_step s1 s2 ->
  dom (dstate (gets s1 l)) =i dom (dstate (gets s2 l)).

End NetworkSemantics. *)
(* Rely:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Rely.

Variable w : world.
Variable this: nid.

Notation getl := (getLocal).
Notation gets := getStatelet.
Notation getp := (@getProtocol _ w).

Fixpoint network_rely' n s1 s2 :=
  if n is n'.+1
  then exists z s3,
        [/\ this != z, network_step w z s1 s3 & network_rely' n' s3 s2]
    else s1 = s2 /\ s1 \In Coh w.

Definition network_rely s1 s2 := exists n, network_rely' n s1 s2.

Lemma rely_refl s : s \In Coh w -> network_rely s s.

Lemma rely_trans s1 s2 s3 :
  network_rely s1 s2 -> network_rely s2 s3 -> network_rely s1 s3.

Lemma rely_coh' n s1 s2 :
  network_rely' n s1 s2 -> Coh w s1 /\ Coh w s2.

Lemma rely_coh s1 s2 :
  network_rely s1 s2 -> Coh w s1 /\ Coh w s2.

Lemma rely_loc s1 s2 l:
  network_rely s1 s2 -> find this (dstate (gets s1 l)) = find this (dstate (gets s2 l)).

Lemma step_consume_other l s s' m tm from z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm from this true) ->
  find m (dsoup (gets s' l)) = Some (Msg tm from this true).

Lemma rely_consume_other l s s' m tm from:
  network_rely s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm from this true) ->
  find m (dsoup (gets s' l)) = Some (Msg tm from this true).

Lemma step_send_other l s s' m tm to b z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s' l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s l)) = Some (Msg tm this to b') /\ (b -> b').

Lemma rely_send_other l s s' m tm to b:
  network_rely s s' ->
  find m (dsoup (gets s' l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s l)) = Some (Msg tm this to b') /\ (b -> b').

Lemma step_send_other' l s s' m tm to b z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s' l)) = Some (Msg tm this to b') /\ (b' -> b).

Lemma rely_send_other' l s s' m tm to b:
  network_rely s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s' l)) = Some (Msg tm this to b') /\ (b' -> b).

Notation loc i l := (getLocal this (getStatelet i l)).
Notation msgs i l := (dsoup (getStatelet i l)).

Lemma rely_loc' l i j : network_rely i j -> loc j l = loc i l.

End Rely. *)
From DiSeL
Require Import NewStatePredicates.
(* NewStatePredicates:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section NewSoupPredicates.

Definition msg_in_soup' from to t (cond : seq nat -> bool) (d : soup) :=
  (exists! i, exists c,
        find i d = Some (Msg (TMsg t c) from to true)) /\
  forall i c, find i d = Some (Msg (TMsg t c) from to true) -> cond c.

Definition msg_spec' from to tg cnt :=
  msg_in_soup' from to tg (fun y => (y == cnt)).

Definition no_msg_from_to' from to
           (criterion : nat -> seq nat -> bool) (d : soup) :=
  forall i t c,
    find i d = Some (Msg (TMsg t c) from to true) -> ~~criterion t c.

Lemma no_msg_from_to_consume' from to cond s i:
  valid s ->
  no_msg_from_to' from to cond s ->
  no_msg_from_to' from to cond (consume_msg s i).

Lemma no_msg_spec_consume s from to tg cnt cond i :
  valid s ->
  find i s = Some {| content := TMsg tg cnt;
                     from := from; to := to; active := true |} ->
  msg_in_soup' from to tg cond s ->
  no_msg_from_to' from to (fun x y => (x == tg)) (consume_msg s i).

Lemma msg_spec_consumeE i d from to from' to' t c' t' cond:
  valid d ->
  find  i d = Some (Msg (TMsg t' c') from' to' true) ->
  msg_in_soup' from to t cond d ->
  [|| (from != from'), (to != to') | (t != t')] ->
  msg_in_soup' from to t cond (consume_msg d i).

End NewSoupPredicates. *)
From DiSeL
Require Import SeqLib.
(* SeqLib:
From mathcomp
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq path.
Require Import Eqdep.

Fixpoint remove_elem (xs : seq (nat * nat * seq nat)) e :=
  match xs with
  | x :: xs => if x == e then xs else x :: (remove_elem xs e)
  | [::] => [::]
  end.

Lemma remove_elem_all xs p e :
  all p xs -> all p (remove_elem xs e).

Lemma remove_elem_in xs e :
  if e \in xs
  then perm_eq (e :: (remove_elem xs e)) xs = true
  else (remove_elem xs e) = xs. *)
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
(* Actions:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.
Require Classical_Prop.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module Actions.

Section Actions.

Variable W : world.
Notation getS s l := (getStatelet s l).

Structure action (V : Type) (this : nid)
  := Action
       {
         
         a_safe : state -> Prop;

         a_safe_coh : forall s, a_safe s -> s \In Coh W;

         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;

         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;

         step_sem  : forall s1 (pf : a_safe s1) s2 r,
             a_step pf s2 r -> network_step W this s1 s2

       }.

Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):
  this != n -> a_step pf s2 r ->
  getLocal n (getS s1 l) = getLocal n (getS s2 l).

End Actions.

Section SkipActionWrapper.

Variable W : world.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.
Variable l : Label.
Variable p : protocol.
Variable pf : getP l = p.

Definition skip_safe s := Coh W s.

Variable V : Type.

Variable f : forall s, coh p (getS s l) -> V.

Lemma safe_local s : skip_safe s -> coh p (getS s l).

Definition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=
  [/\ s1 \In Coh W, s1 = s2 & r = f (safe_local pf)].

Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.

Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.

Lemma skip_step_sem s1 (S : skip_safe s1) s2 r:
  skip_step S s2 r -> network_step W this s1 s2.

Definition skip_action_wrapper :=
  Action skip_safe_coh skip_step_total skip_step_sem.

End SkipActionWrapper.

Section TryReceiveActionWrapper.

Variable W : world.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.

Variable filter : Label -> nid -> nat -> pred (seq nat).

Variable f_valid_label : forall l n t m ,
    filter l n t m -> l \in dom (getc W).

Definition tryrecv_act_safe (s : state) := s \In Coh W.

Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.

Definition tryrecv_act_step s1 s2 (r : option (nid * nat * seq nat)) :=
  exists (pf : s1 \In Coh W),
  
    ([/\ (forall l m tms from rt b,
          this \in nodes (getP l) (getS s1 l) -> 
          Some (Msg tms from this b) = find m (dsoup (getS s1 l)) ->
          rt \In (rcv_trans (getP l)) ->
          tag tms = (t_rcv rt) ->
          
          msg_wf rt (coh_s l pf) this from tms ->
             
          filter l from (t_rcv rt) (tms_cont tms) ->
          ~~b),
    r = None & s2 = s1] \/
   
   exists l m tms from rt (pf' : this \in nodes (getP l) (getS s1 l)),
     let: d :=  getS s1 l in
     [/\ [/\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)),
          rt \In (rcv_trans (getP l)),
          tag tms = (t_rcv rt),
          
          msg_wf rt (coh_s l pf) this from tms &
             
          filter l from (t_rcv rt) (tms_cont tms)],
      let loc' := receive_step rt from tms (coh_s l pf) pf' in
      let: f' := upd this loc' (dstate d) in
      let: s' := consume_msg (dsoup d) m in
      s2 = upd l (DStatelet f' s') s1 &
      r = Some (from, tag tms, tms_cont tms)]).

Import Classical_Prop.

Lemma tryrecv_act_step_total s:
  tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.

Lemma tryrecv_act_step_safe s1 s2 r:
  tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.

Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r:
  tryrecv_act_step s1 s2 r -> network_step W this s1 s2.

Definition tryrecv_action_wrapper :=
  Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.

End TryReceiveActionWrapper.

Section SendActionWrapper.

Variable W : world.
Variable p : protocol.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.

Variable l : Label.

Variable pf : (getProtocol W l) = p.

Variable st: send_trans (coh p).

Variable pf' : st \In (snd_trans p).

Variable msg : seq nat.
Variable to  : nid.

Definition can_send (s : state) := (l \in dom s) && (this \in nodes p (getS s l)).

Definition filter_hooks (h : hooks) :=
  um_filter (fun e => e.2 == (l, t_snd st)) h.

Definition send_act_safe s :=
  [/\ Coh W s, send_safe st this to (getS s l) msg, can_send s &
               
      all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].

Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.

Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.

Definition send_act_step s1 (S: send_act_safe s1) s2 r :=
   r = msg /\
   exists b,
     Some b = send_step (safe_safe S) /\
     let: d :=  getS s1 l in
     let: f' := upd this b (dstate d) in
     let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)
                                         this to true)).1 in
     s2 = upd l (DStatelet f' s') s1.

Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.

Lemma send_act_step_sem s1 (S : send_act_safe s1) s2 r:
  send_act_step S s2 r -> network_step W this s1 s2.

Definition send_action_wrapper :=
  Action send_act_safe_coh send_act_step_total send_act_step_sem.

End SendActionWrapper.

End Actions.

Module ActionExports.

Definition action := Actions.action.
Definition a_safe := Actions.a_safe.
Definition a_step := Actions.a_step.

Definition a_safe_coh := Actions.a_safe_coh.
Definition a_step_total := Actions.step_total.
Definition a_step_sem := Actions.step_sem.
Definition a_step_other := Actions.step_other.

Definition skip_action_wrapper := Actions.skip_action_wrapper.
Definition send_action_wrapper := Actions.send_action_wrapper.
Definition tryrecv_action_wrapper := Actions.tryrecv_action_wrapper.

End ActionExports.

Export ActionExports. *)
(* Injection:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Actions.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module Injection.
Section Injection.

Variable W : world.

Structure injects (U V : world) (K : hooks) := Inject {
  
  E : world;
                                       
  _ : hook_complete U /\ hook_complete E;

  _ : V = U \+ E \+ (Unit, K);

  _ : hooks_consistent (getc (U \+ E)) K;
  
  _ : forall s, Coh V s <-> exists s1 s2,
        [/\ s = s1 \+ s2, Coh U s1 & Coh E s2];

  _ : forall s1 s2 s this,
      s1 \+ s \In Coh V -> network_step U this s1 s2 ->
      network_step V this (s1 \+ s) (s2 \+ s);

  _ : forall s1 s2 s1' s2' this,
      s1 \In Coh U -> s2 \In Coh U ->
      network_step V this (s1 \+ s1') (s2 \+ s2') ->
      (network_step U this s1 s2   /\ s1' = s2') \/
      (network_step E this s1' s2' /\ s1 = s2); }.

End Injection.

Module Exports.
Section Exports.

Definition inj_ext := E.
Definition injects := injects. 
Definition Inject := Inject.

Lemma cohK (U V : world) (K : hooks) (w : injects U V K) :
  V = U \+ inj_ext w \+ (Unit, K).

Lemma cohE (U V : world) (K : hooks) (w : injects U V K) s :
  Coh V s <-> exists s1 s2,
      [/\ s = s1 \+ s2, Coh U s1 & Coh (inj_ext w) s2].

Lemma sem_extend (U V : world) (K : hooks) (w : injects U V K) s1 s2 s this: 
      s1 \+ s \In Coh V -> s2 \+ s \In Coh V ->
      network_step U this s1 s2 -> network_step V this (s1 \+ s) (s2 \+ s).

Lemma sem_split (U V : world) (K : hooks) (w : injects U V K) s1 s1' s2 s2' this: 
      s1 \In Coh U -> s2 \In Coh U ->
      network_step V this (s1 \+ s1') (s2 \+ s2') ->
      (network_step U this s1 s2   /\ s1' = s2') \/
      (network_step (inj_ext w) this s1' s2' /\ s1 = s2).

Definition extends (U V : world) (K : hooks) (w : injects U V K) s s1 := 
  exists s2, [/\ s = s1 \+ s2, s1 \In Coh U & s \In Coh V].

Notation dom_filt W := (fun k => k \in dom W).

Definition projectS (W : world) (s : state) :=
  um_filter (dom_filt (getc W)) s.

Lemma projectS_cohL W1 W2 s :
  s \In Coh (W1 \+ W2) -> hook_complete W1 -> projectS W1 s \In Coh W1.

Lemma projectS_cohR W1 W2 s :
  s \In Coh (W1 \+ W2) -> hook_complete W2 -> projectS W2 s \In Coh W2.

Lemma projectSE W1 W2 s :
  s \In Coh (W1 \+ W2) ->
  s = projectS W1 s \+ projectS W2 s.

Lemma coh_split W1 W2 s :
  s \In Coh (W1 \+ W2) ->
  hook_complete W1 -> hook_complete W2 ->
  exists s1 s2 : state,
    [/\ s1 \In Coh W1, s2 \In Coh W2 & s = s1 \+ s2].

Lemma injExtL' (W1 W2 : world) K (pf : injects W1 (W1 \+ W2) K) :
  valid (W1 \+ W2) -> inj_ext pf \+ (Unit, K) = W2.

Lemma injExtR' W1 W2 K (pf : injects W2 (W1 \+ W2) K) :
  valid (W1 \+ W2) -> inj_ext pf \+ (Unit, K) = W1.

Lemma injExtL W1 W2 (pf : injects W1 (W1 \+ W2) Unit) :
  valid (W1 \+ W2) -> inj_ext pf = W2.

Lemma injExtR W1 W2 (pf : injects W2 (W1 \+ W2) Unit) :
  valid (W1 \+ W2) -> inj_ext pf  = W1.

End Exports.
End Exports.

End Injection.

Export Injection.Exports.

Module InjectExtra.

Lemma cohUnKR U W s s':
  s \+ s' \In Coh (U \+ W) -> s \In Coh U ->
  hook_complete W -> s' \In Coh W.

Lemma cohUnKL U W s s':
  s \+ s' \In Coh (U \+ W) -> s' \In Coh W ->
  hook_complete U -> s \In Coh U .

Lemma getPUn (U W : world) l :
  valid (U \+ W) -> l \in dom U.1 ->

Lemma getSUn s1 s2 l :
  valid (s1 \+ s2) -> l \in dom s1 ->
  getStatelet s1 l = getStatelet (s1 \+ s2) l.

Lemma hook_completeL (U : world) K :
  valid (U \+ (Unit, K)) ->
  hook_complete (U \+ (Unit, K)) -> hook_complete U.

Lemma get_protocol_hooks (U: world) K l:
  valid U -> getProtocol (U \+ (Unit, K)) l = getProtocol U l.

Lemma coh_hooks (U : world) K s :
  s \In (Coh (U \+ (Unit, K))) -> s \In (Coh U).

Lemma inj_hooks_complete (U W : world) K:
  valid (U \+ W \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma inject_step U W K this s1 s2 s1' s2' :
  valid (U \+ W) ->
  s1 \In Coh U -> s2 \In Coh U ->
  hook_complete U -> hook_complete W ->
  network_step (U \+ W \+ (Unit, K)) this (s1 \+ s1') (s2 \+ s2') ->
  network_step U this s1 s2 /\ s1' = s2' \/
  network_step W this s1' s2' /\ s1 = s2.

Definition not_hooked_by (K : hooks) l :=
  forall z lc l' st, (z, lc, (l', st)) \in dom K -> l != l'.

Definition world_not_hooked (W: world) K :=
  forall l, l \in dom W.1 -> not_hooked_by K l.

Lemma hooks_frame (U W : world) (K : hooks) l st s s' n msg to :
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma inject_frame U W K this s1 s2 s:
  s1 \+ s \In Coh (U \+ W \+ (Unit, K)) ->
  network_step U this s1 s2 ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma injectL (U W : world) K :
  valid (U \+ W \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (getc (U \+ W)) K ->
  world_not_hooked U K ->
  injects U (U \+ W \+ (Unit, K)) K.

Lemma injectR (U W : world) K :
  valid (W \+ U \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (getc (U \+ W)) K ->
  world_not_hooked U K ->
  injects U (W \+ U \+ (Unit, K)) K.

Lemma locProjL (W1 W2 : world) l s1 s2:
  (s1 \+ s2) \In Coh (W1 \+ W2) -> l \in dom W1.1 ->

Lemma locProjR (W1 W2 : world) l s1 s2:
  (s1 \+ s2) \In Coh (W1 \+ W2) -> l \in dom W2.1 ->

End InjectExtra.

Export InjectExtra. *)
(* Process:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem.
From DiSeL
Require Import Actions Injection InductiveInv.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section ProcessSyntax.

Variable this : nid.

Inductive proc (W : world) A :=
  Unfinished | Ret of A | Act of action W A this |
  Seq B of proc W B & B -> proc W A |
  Inject V K of injects V W K & proc V A |
  WithInv p I (ii : InductiveInv p I) of
          W = mkWorld (ProtocolWithIndInv ii) & proc (mkWorld p) A.  

Definition pcat W A B (t : proc W A) (k : A -> Pred (proc W B)) :=
  [Pred s | exists q, s = Seq t q /\ forall x, q x \In k x].

Inductive schedule :=
  ActStep | SeqRet | SeqStep of schedule |  
  InjectStep of schedule | InjectRet |
  WithInvStep of schedule | WithInvRet.

End ProcessSyntax.

Arguments Unfinished [this W A].
Arguments Ret [this W A].
Arguments Act [this W A].
Arguments Seq [this W A B].
Arguments WithInv [this W A].

Section ProcessSemantics.

Variable this : nid.

Fixpoint step (W : world) A (s1 : state) (p1 : proc this W A)
         sc (s2 : state) (p2 : proc this W A) : Prop :=
  match sc, p1 with
    
  | ActStep, Act a => exists v pf, @a_step _ _ _ a s1 pf s2 v /\ p2 = Ret v
    
  | SeqRet, Seq _ (Ret v) k => s2 = s1 /\ p2 = k v
  | SeqStep sc', Seq _ p' k1 => 
    exists p'', step s1 p' sc' s2 p'' /\ p2 = Seq p'' k1
  
  | InjectRet, Inject V K pf (Ret v) =>
     exists s1', [/\ s2 = s1, p2 = Ret v & extends pf s1 s1']
  | InjectStep sc', Inject V K pf t1' =>
    exists s1' s2' s t2', 
    [/\ p2 = Inject pf t2', s1 = s1' \+ s, s2 = s2' \+ s, 
     s1' \In Coh V & step s1' t1' sc' s2' t2']
  
  | WithInvRet, WithInv p inv ii pf (Ret v) =>
     exists s1', [/\ s2 = s1, p2 = Ret v & s1 = s1']
  | WithInvStep sc', WithInv p inv ii pf t1' =>
    exists t2', p2 = WithInv p inv ii pf t2' /\  
                     step s1 t1' sc' s2 t2'   
  | _, _ => False
  end.

Fixpoint good (W : world) A (p : proc this W A) sc  : Prop :=
  match sc, p with
  | ActStep, Act _ => True
  | SeqRet, Seq _ (Ret _) _ => True
  | SeqStep sc', Seq _ p' _ => good p' sc'
  | InjectStep sc', Inject _ _ _ p' => good p' sc'
  | InjectRet, Inject _ _ _ (Ret _) => True
  | WithInvStep sc', WithInv _ _ _ _ p' => good p' sc'
  | WithInvRet, WithInv _ _ _ _ (Ret _) => True
  | _, _ => False
  end.

Fixpoint safe (W : world) A (p : proc this W A) sc (s : state)  : Prop :=
  match sc, p with
  | ActStep, Act a => a_safe a s
  | SeqRet, Seq _ (Ret _) _ => True
  | SeqStep sc', Seq _ p' _ => safe p' sc' s
  | InjectStep sc', Inject V K pf p' =>
      exists s', extends pf s s' /\ safe p' sc' s'
  | InjectRet, Inject V K pf (Ret _) => exists s', extends pf s s'
  | WithInvStep sc', WithInv _ _ _ _ p' => safe p' sc' s
  | WithInvRet, WithInv _ _ _ _ (Ret _) => True
  | _, _ => True
  end.

Definition pstep (W : world) A s1 (p1 : proc this W A) sc s2 p2 := 
  [/\ s1 \In Coh W, safe p1 sc s1 & step s1 p1 sc s2 p2].

Lemma pstep_safe (W : world) A s1 (t : proc this W A) sc s2 q : 
        pstep s1 t sc s2 q -> safe t sc s1.

Lemma proc_progress W A s (p : proc this W A) sc : 
        s \In Coh W -> safe p sc s -> good p sc ->  
        exists s' (p' : proc this W A), pstep s p sc s' p'.

Lemma stepUnfin W A s1 sc s2 (t : proc this W A) : 
        pstep s1 Unfinished sc s2 t <-> False.

Lemma stepRet W A s1 sc s2 (t : proc this W A) v : 
        pstep s1 (Ret v) sc s2 t <-> False.

Lemma stepAct W A s1 a sc s2 (t : proc this W A) : 
        pstep s1 (Act a) sc s2 t <->
        exists v pf, [/\ sc = ActStep, t = Ret v & @a_step _ _ _ a s1 pf s2 v].

Lemma stepSeq W A B s1 (t : proc this W B) k sc s2 (q : proc this W A) :
        pstep s1 (Seq t k) sc s2 q <->
        (exists v, [/\ sc = SeqRet, t = Ret v, q = k v, s2 = s1 &
                       s1 \In Coh W]) \/
         exists sc' p',
           [/\ sc = SeqStep sc', q = Seq p' k & pstep s1 t sc' s2 p'].

Lemma stepInject V W K A (em : injects V W K) 
                s1 (t : proc this V A) sc s2 (q : proc this W A) :
  pstep s1 (Inject em t) sc s2 q <->
  
  (exists s1' v, [/\ sc = InjectRet, t = Ret v, q = Ret v, s2 = s1 &
                     extends em s1 s1']) \/
  
  exists sc' t' s1' s2' s, 
    [/\ sc = InjectStep sc', q = Inject em t', 
     s1 = s1' \+ s, s2 = s2' \+ s, s1 \In Coh W &
              pstep s1' t sc' s2' t'].

Lemma stepWithInv W A pr I (ii : InductiveInv pr I) s1 
      (t : proc this (mkWorld pr) A) sc s2 (q : proc this W A) pf :
  pstep s1 (WithInv pr I ii pf t) sc s2 q <-> 
  (exists v, [/\ sc = WithInvRet, t = Ret v, q = Ret v, s2 = s1,
                 s1 \In Coh W & W = mkWorld (ProtocolWithIndInv ii)]) \/
  exists sc' t' , [/\ sc = WithInvStep sc', q = WithInv pr I ii pf t',
                      W = mkWorld (ProtocolWithIndInv ii),
                      s1 \In Coh W & pstep s1 t sc' s2 t'].

Lemma pstep_network_sem (W : world) A s1 (t : proc this W A) sc s2 q :
        pstep s1 t sc s2 q -> network_step W this s1 s2.

Lemma pstep_inv A pr I (ii : InductiveInv pr I) s1 s2 sc
      (t t' : proc this (mkWorld pr) A):
  s1 \In Coh (mkWorld (ProtocolWithIndInv ii)) ->
  pstep s1 t sc s2 t' -> 
  s2 \In Coh (mkWorld (ProtocolWithIndInv ii)).

End ProcessSemantics. *)
(* Always:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process InductiveInv.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Always.

Variable this : nid.
Variable W : world.

Notation coherent := (Coh W).

Arguments proc [this W].

Fixpoint always_sc A (s1 : state) p scs (P : state -> proc A -> Prop) : Prop :=
  s1 \In coherent /\ 
  if scs is sc :: scs' then 
    forall s2, network_rely W this s1 s2 -> 
      [/\ safe p sc s2, P s2 p &
          forall s3 q, @pstep this W A s2 p sc s3 q -> always_sc s3 q scs' P]
  else forall s2, network_rely W this s1 s2 -> P s2 p.

Definition always A s (p : proc A) P := forall scs, always_sc s p scs P.

Lemma alw_coh' A s (p : proc A) scs P : 
        always_sc s p scs P -> s \In coherent.

Lemma alw_coh A s (p : proc A) P : 
        always s p P -> s \In coherent.

Lemma alw_safe' A s (p : proc A) sc scs P : 
        always_sc s p (sc :: scs) P -> safe p sc s.

Lemma alw_safe A s (p : proc A) P :
        always s p P -> forall sc, safe p sc s.

Lemma alw_refl' A s (p : proc A) sc P : always_sc s p sc P -> P s p.

Lemma alw_refl A s (p : proc A) P : always s p P -> P s p.

Lemma alw_envs' A s1 (p : proc A) scs s2 P : 
        always_sc s1 p scs P -> network_rely W this s1 s2 -> always_sc s2 p scs P.
 
Lemma alw_envs A s1 (p : proc A) s2 P :
        always s1 p P -> network_rely W this s1 s2 -> always s2 p P.

Lemma alw_step A s1 (p : proc A) sc s2 q P :
        always s1 p P -> pstep s1 p sc s2 q -> always s2 q P.

Lemma alwp_envsq A s1 (p1 : proc A) scs (P : _ -> _ -> Prop) : 
        always_sc s1 p1 scs P ->
        always_sc s1 p1 scs 
          (fun s2 p2 => forall s3, network_rely W this s2 s3 -> P s3 p2).

Lemma alw_envsq A s1 (p1 : proc A) (P : _ -> _ -> Prop) : 
        always s1 p1 P ->
        always s1 p1 (fun s2 p2 => forall s3, network_rely W this s2 s3 -> P s3 p2).

Lemma alw_unfin' A s1 scs (P : state -> proc A -> Prop) :
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 Unfinished) -> 
        always_sc s1 Unfinished scs P.

Lemma alw_unfin A s1 (P : state -> proc A -> Prop) :
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 Unfinished) ->
        always s1 Unfinished P.

Lemma alw_ret' A s1 (v : A) scs (P : state -> proc A -> Prop) : 
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 (Ret v)) -> 
        always_sc s1 (Ret v) scs P.

Lemma alw_ret A s1 (v : A) (P : state -> proc A -> Prop) : 
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 (Ret v)) -> 
        always s1 (Ret v) P.

Lemma alw_act A s1 (a : action W A this) (P : state -> proc A -> Prop) :
        s1 \In coherent ->
        (forall s2, network_rely W this s1 s2 -> exists S : a_safe a s2,
        P s2 (Act a) /\
        forall s3 v s4, a_step S s3 v -> 
                        network_rely W this s3 s4 -> P s4 (Ret v)) ->
        always s1 (Act a) P. 

Notation alwsafe_sc s p scs := (always_sc s p scs (fun _ _ => True)).
Notation alwsafe s p := (always s p (fun _ _ => True)).

Lemma alw_imp' A s (p : proc A) scs (P1 P2 : state -> proc A -> Prop) : 
         (forall s p, s \In coherent -> P1 s p -> P2 s p) -> 
         always_sc s p scs P1 -> always_sc s p scs P2.

Lemma alw_imp A s (p : proc A) (P1 P2 : state -> proc A -> Prop) : 
        (forall s p, s \In coherent -> P1 s p -> P2 s p) -> 
        always s p P1 -> always s p P2.

Lemma alwA' A B s (p : proc A) scs (P : B -> state -> proc A -> Prop) : 
        alwsafe_sc s p scs ->
        (always_sc s p scs (fun s' p' => forall x, P x s' p') <->
         forall x, always_sc s p scs (fun s' p' => P x s' p')).

Lemma alwA A B s (p : proc A) (P : B -> state -> proc A -> Prop) : 
        alwsafe s p ->
        (always s p (fun s' p' => forall x, P x s' p') <->
         forall x, always s p (fun s' p' => P x s' p')).

Arguments alwA [A B s p P].

Lemma alwI' A s (p : proc A) scs (P : Prop) (Q : state -> proc A -> Prop) : 
        alwsafe s p ->
        (always_sc s p scs (fun s' p' => P -> Q s' p') <->
         (P -> always_sc s p scs (fun s' p' => Q s' p'))).

Lemma alwI A s (p : proc A) (P : Prop) (Q : state -> proc A -> Prop) : 
        alwsafe s p ->
         always s p (fun s' p' => P -> Q s' p') <->
         (P -> always s p (fun s' p' => Q s' p')). 

Arguments alwI [A s p P Q].

Lemma alw_bnd A B (p1 : proc A) (p12 : proc B) pp2 s1 
                 (P : state -> B -> Prop) :
        p12 \In pcat p1 pp2 -> 
        always s1 p1 (fun s2 p2 =>
                        
          forall p v, p2 = Ret v -> p \In pp2 v -> 
                      always s2 p (fun s q => forall v, q = Ret v -> P s v)) ->
        always s1 p12 (fun s p => forall v, p = Ret v -> P s v).

Lemma alwsafe_bnd A B (p1 : proc A) (p12 : proc B) s1 pp2 :
        p12 \In pcat p1 pp2 ->
        always s1 p1 (fun s2 p2 =>
          forall p v, p2 = Ret v -> p \In pp2 v -> alwsafe s2 p) ->
        alwsafe s1 p12.

Definition after A s (p : proc A) (P : A -> state -> Prop) := 
  always s p (fun s2 p2 => forall v, p2 = Ret v -> P v s2).

Lemma aft_bnd A B (p1 : proc A) (p12 : proc B) pp2 s1 P :
        p12 \In pcat p1 pp2 -> 
        after s1 p1 (fun v s => 
          forall p, p \In pp2 v -> after s p P) ->
        after s1 p12 P.

Lemma aftI A s (p : proc A) (P : Prop) (Q : A -> state -> Prop) : 
        alwsafe s p ->
         after s p (fun v s' => P -> Q v s') <->
         (P -> after s p (fun v s' => Q v s')).

Lemma aft_alwsf A s (p : proc A) :
        alwsafe s p <-> after s p (fun v s => True).

Lemma aft_imp A s (p : proc A) (P1 P2 : A -> state -> Prop) : 
        (forall v s, s \In coherent -> 
                     P1 v s -> P2 v s) -> 
        after s p P1 -> after s p P2.

Lemma aftA A B s (p : proc A) (P : B -> A -> state -> Prop) : 
        alwsafe s p ->
        (after s p (fun v s' => forall x, P x v s') <->
         forall x, after s p (fun v s' => P x v s')).

Arguments aftA [A B s p P].
Arguments aftI [A s p P Q].

End Always.

Section AlwaysInject.
Variables (V W : world) (K : hooks) (A : Type) (w : injects V W K) (this: nid).
Notation W2 := (inj_ext w).

Lemma rely_ext i j s : 
        i \In Coh V -> 
        network_rely W this (i \+ j) s ->  
        exists i' j', s = i' \+ j' /\ i' \In Coh V.

Lemma rely_split' z s1 s1' s2 s2' : 
  s1 \In Coh V -> s2 \In Coh V ->
  network_step W z (s1 \+ s1') (s2 \+ s2') ->
  network_step V z s1 s2 /\ network_step (inj_ext w) z s1' s2'.

Lemma rely_split s1 s1' s2 s2' : 
  s1 \In Coh V -> s2 \In Coh V ->
  network_rely W this (s1 \+ s1') (s2 \+ s2') ->
  network_rely V this s1 s2 /\ network_rely (inj_ext w) this s1' s2'.

Lemma alw_inject (p : proc this V A)
      (P : state -> proc this V A -> Prop) i j :
        i \+ j \In Coh W ->
        always i p P ->
        always (i \+ j) (Inject w p)
          (fun m q => exists i' j', 
             [/\ m = i' \+ j', i' \In Coh V, network_rely W2 this j j' &
                 (exists q', q = Inject w q' /\ P i' q') \/
                 (exists v', q = Ret v' /\ P i' (Ret v'))]).

Lemma aft_inject (p : proc this V A) (P : A -> state -> Prop) i j :
        i \+ j \In Coh W ->
        after i p P ->
        after (i \+ j) (Inject w p)
          (fun v m => exists i' j', 
             [/\ m = i' \+ j', i' \In Coh V, 
                 network_rely W2 this j j' & P v i']).

End AlwaysInject.

Notation alwsafe_sc s p scs := (always_sc s p scs (fun _ _ => True)).
Notation alwsafe s p := (always s p (fun _ _ => True)).

Module AlwaysInductiveInv.
Section AlwaysInductiveInv.
Import InductiveInv.
Variable pr : protocol.

Notation l := (plab pr).
Notation coh := (coh pr).
Variable I : dstatelet -> pred nid -> Prop.
Variable ii : InductiveInv pr I.

Variables (A : Type) (this: nid).
Notation V := (mkWorld pr).
Notation W := (mkWorld (ProtocolWithIndInv ii)).

Lemma alw_ind_inv (p : proc this V A)
      (P : state -> proc this V A -> Prop) i :
        i \In Coh W ->
        always i p P ->
        always i (WithInv pr I ii (erefl _) p)
          (fun m q => m \In Coh W /\
                 ((exists q', q = WithInv pr I ii (erefl _) q' /\ P m q') \/
                  (exists v', q = Ret v' /\ P m (Ret v')))).

Lemma aft_ind_inv (p : proc this V A) (P : A -> state -> Prop) i :
        i \In Coh W ->
        after i p P ->
        after i (WithInv pr I ii (erefl _) p)
          (fun v m => m \In Coh W /\ P v m).

End AlwaysInductiveInv.
End AlwaysInductiveInv.

Export AlwaysInductiveInv. *)
(* HoareTriples:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Domain Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Structure prog (W : world) A (this : nid) :=
  Prog {
      set_of : proc this W A -> Prop; 
      
      _ : set_of Unfinished
  }.

Section Programs.

Variable this : nid.
Variable W : world.
Variable A : Type.

Notation coherent := (Coh W).

Arguments Prog [W A].
Arguments Prog [W A this].

Coercion set_of : prog >-> Funclass. 
Canonical prog_PredType W A := mkPredType (fun p => @set_of W A this p). 

Lemma progE (T1 T2 : prog W A this) : 
        T1 = T2 <-> set_of T1 = set_of T2.

Definition pre := state -> Prop.

Definition post A := state -> A -> state -> Prop.
Definition cont A := A -> state -> Prop.
Definition spec A := prod pre (post A).

Definition has_spec (s : spec A) := 
  [Pred T : prog W A this | forall i t, 
     s.1 i -> i \In Coh W -> t \In T -> after i t (s.2 i)]. 

End Programs.

Module DTbin.
Section DTbin.

Variable this : nid.

Structure DTbin (W : world) A (s : spec A) := DTbin_make {
  prog_of : prog W A this; 
  _ : prog_of \In has_spec this W s}.

End DTbin.
End DTbin.

Notation DTbin := DTbin.DTbin.
Notation DTbin_make := DTbin.DTbin_make.

Coercion DTbin.prog_of : DTbin >-> prog.

Section Specs.

Variable this : nid.

Lemma stsepE (W : world) A (s : spec A) (e1 e2 : DTbin this W s) : 
        e1 = e2 <-> e1 = e2 :> prog W A this.

Lemma prog_unfin (W : world) A (s : spec A) (e : DTbin this W s) : 
        Unfinished \In DTbin.prog_of e.

Inductive DT (W: world) A :=
  with_spec (s : spec A) of DTbin this W s.

Definition spec_of W A (e : DT W A) := let: with_spec s _ := e in s.
Definition pre_of W A := fun e : DT W A => (spec_of e).1. 
Definition post_of W A := fun e : DT W A => (spec_of e).2. 

Definition code_of (W : world) A (e : DT W A) := 
  let: with_spec _ c := e return DTbin this W (spec_of e) in c.

Arguments pre_of [W A].
Arguments post_of [W A].
Arguments with_spec [W A].
Prenex Implicits pre_of post_of.

Coercion with_spec : DTbin >-> DT.

Definition verify (W : world) A (i : state) (e : DT W A) r := 
  i \In Coh W -> 
  forall p, p \In DTbin.prog_of (code_of e) -> after i p r. 

End Specs.

Module DTLattice.
Section DTLattice.

Variable this : nid.
Variable W : world.
Variables (A : Type) (s : spec A).
Notation prog A := (@prog W A this).
Notation DTbin s := (@DTbin this W A s).

Definition leq (e1 e2 : DTbin s) := 
  set_of (DTbin.prog_of e1) <== set_of (DTbin.prog_of e2).

Lemma leq_refl e : leq e e. 

Lemma leq_trans e1 e2 e3 : leq e1 e2 -> leq e2 e3 -> leq e1 e3.

Lemma leq_asym e1 e2 : leq e1 e2 -> leq e2 e1 -> e1 = e2.

Definition bot_set t := t = @Unfinished this W A. 
Definition bot_prg := @Prog _ _ _ bot_set (erefl _).

Lemma bot_spec : bot_prg \In has_spec this W s.

Definition bot := DTbin_make bot_spec.

Lemma bot_bot e : leq bot e.

Definition sup_set (es : Pred (DTbin s)) t := 
  t = Unfinished \/ exists e : DTbin s, t \In DTbin.prog_of e /\ e \In es.
Definition sup_prog es := @Prog _ _ _ (sup_set es) (or_introl (erefl _)).

Lemma sup_spec es : sup_prog es \In has_spec this W s.

Definition sup es := DTbin_make (@sup_spec es).

Lemma sup_supB es e : e \In es -> leq e (sup es).

Lemma sup_supL es e : (forall c, c \In es -> leq c e) -> leq (sup es) e.

End DTLattice.

Module Exports.
Section Exports.
Variable this : nid.
Variable W : world.
Variables (A : Type) (s : spec A).

Definition stPosetMixin := PosetMixin (@leq_refl this W A s) 
                                      (@leq_asym this W A s) (@leq_trans this W A s).
Canonical stPoset := Eval hnf in Poset (@DTbin this W A s) stPosetMixin.

Definition stLatticeMixin := LatticeMixin (@sup_supB this W A s) (@sup_supL this W A s).
Canonical stLattice := Eval hnf in Lattice (@DTbin this W A s) stLatticeMixin.

End Exports.
End Exports.

End DTLattice.

Export DTLattice.Exports.

Section Fix. 

Variable this : nid.
Variable W : world.
Variables (A : Type)  (B : A -> Type) (s : forall x, spec (B x)).

Notation tp := (forall x, DTbin this W (s x)).
Notation lat := (dfunLattice (fun x => [lattice of DTbin this W (s x)])).
Variable (f : tp -> tp).

Definition f' (e : lat) := sup [Pred t : lat | exists e', e' <== e /\ t = f e'].

Definition ffix : tp := tarski_lfp f'. 

End Fix.

Section Return.
Variable this : nid.
Variable W : world.
Variables (A : Type)  (x : A).

Definition ret_set t := t = Unfinished \/ t = @Ret this W A x.

Definition ret_prog := @Prog _ _ _ ret_set (or_introl (erefl _)).

Definition ret_s : spec A := 
  (fun i => True, fun i y m => network_rely W this i m /\ y = x). 

Lemma ret_has_spec : ret_prog \In has_spec this W ret_s.

Definition ret := with_spec (DTbin_make ret_has_spec). 

End Return.

Section Act.
Variable this : nid.
Variable W : world.
Variables (A : Type)  (x : A).
Variable a : action W A this.

Definition act_set t := t = Unfinished \/ t = @Act this W A a.
Definition act_prog := @Prog _ _ _ act_set (or_introl (erefl _)).

Definition act_s : spec A := 
  (fun i => forall j, network_rely W this i j -> a_safe a j,
   fun i y m => exists j k, 
       [/\ network_rely W this i j,
        exists (S: a_safe a j), a_step S k y & network_rely W this k m]). 

Lemma act_has_spec : act_prog \In has_spec this W act_s.

Definition act := with_spec (DTbin_make act_has_spec).

End Act.

Section Bind.

Variable this : nid.
Variable W : world.
Variables (A B : Type).

Section Prog.
Variables (T : prog W A this) (K : A -> prog W B this).

Definition bnd_set t := 
  t = Unfinished \/ exists t', t \In pcat t' K /\ t' \In T.
Definition bnd_prog := @Prog _ _ _ bnd_set (or_introl (erefl _)).

End Prog.

Variables (e1 : DT this W A) (e2 : A -> DT this W B).

Notation s1 := (spec_of e1).

Notation s2 := (fun x => spec_of (e2 x)).

Definition bind_s : spec B := 
  (fun i => s1.1 i /\ forall x s, s1.2 i x s -> (s2 x).1 s,
   fun i y m => exists x s, s1.2 i x s /\ (s2 x).2 s y m).

Lemma bind_has_spec : 
        bnd_prog (code_of e1) (fun x => let y := e2 x in code_of y) \In has_spec this W bind_s.

Definition bind := with_spec (DTbin_make bind_has_spec).

End Bind.

Section Inject.
Variables (this : nid) (V W : world) (K : hooks) (A : Type) (w : injects V W K). 
Variable (e : DT this V A).
Notation W2 := (inj_ext w). 
Notation s := (spec_of e).

Section Prog.

Variable T : prog V A this.

Definition inject_set t := 
  t = Unfinished \/ exists t', t' \In T /\ t = Inject w t'. 
Definition inject_prog := @Prog _ _ _ inject_set (or_introl (erefl _)).
End Prog.

Definition inject_s : spec A :=
  (fun i => exists i1 i2, i = i1 \+ i2 /\ i1 \In Coh V /\ s.1 i1, 
   fun i y m => forall i1 i2, i = i1 \+ i2 -> i1 \In Coh V -> 
     exists m1 m2, [/\ m = m1 \+ m2, s.2 i1 y m1 &
                       network_rely W2 this i2 m2]).

Lemma inject_has_spec : inject_prog (code_of e) \In has_spec this W inject_s.

Definition inject := with_spec (DTbin_make inject_has_spec).

End Inject.

From DiSeL
Require Import InductiveInv.

Section InductiveInv.
Variable pr : protocol.

Notation l := (plab pr).
Notation coh := (coh pr).
Variable I : dstatelet -> pred nid -> Prop.
Variable ii : InductiveInv pr I.

Variables (A : Type) (this: nid).
Notation V := (mkWorld pr).
Notation W := (mkWorld (ProtocolWithIndInv ii)).

Variable (e : DT this V A).
Notation s := (spec_of e).

Section Prog.

Variable T : prog V A this.

Definition with_inv_set t := 
  t = Unfinished \/ exists t', t' \In T /\ t = WithInv pr I ii (erefl _) t'. 
Definition with_inv_prog := @Prog _ _ _ with_inv_set (or_introl (erefl _)).
End Prog.

Notation getS i := (getStatelet i l).

Definition with_inv_s : spec A :=
  (fun i => s.1 i, 
   fun i y m => m \In Coh W /\ s.2 i y m).

Lemma with_inv_has_spec : with_inv_prog (code_of e) \In has_spec this W with_inv_s.

Definition with_inv := with_spec (DTbin_make with_inv_has_spec).

End InductiveInv.

Definition conseq (W : world) A this (e : DT this W A) (s : spec A) := 
  forall i, s.1 i -> verify i e (s.2 i). 

Lemma conseq_refl (W : world) A this (e : DT this W A) :
  conseq e (spec_of e).

Hint Resolve conseq_refl.

Section Do.

Variable this : nid.
Variables (W : world) (A : Type) (s2 : spec A).
Variables (e : DT this W A) (pf : conseq e s2).

Definition do_prog := DTbin.prog_of (code_of e).

Lemma do_has_spec : do_prog \In has_spec this W s2. 

Definition do' := DTbin_make do_has_spec.

End Do.

Notation iinject x := (@inject _ _ _ _ _ _ x).
Notation uinject x := (@inject _ _ _ Unit _ _ x).

Notation "'Do' e" := (@do' _ _ _ _ e _) (at level 80).

Notation "x '<--' c1 ';' c2" := (bind c1 (fun x => c2)) 
  (at level 81, right associativity).
Notation "c1 ';;' c2" := (bind c1 (fun _ => c2)) 
  (at level 81, right associativity). *)
(* InferenceRules:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Domain Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InductiveInv.
Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Definition logvar {B A} (s : A -> spec B) : spec B := 
  (fun i => exists x : A, (s x).1 i, 
   fun y i m => forall x : A, (s x).2 y i m).

Definition binarify {A} (p : pre) (q : cont A) : spec A := 
  (p, fun i y m => p i -> q y m).

Notation "'DHT' [ this , W ] ( p , q ) " := 
  (DTbin this W (binarify p q)) (at level 0, 
   format "'[hv ' DHT  [ this , W ]  ( '[' p , '/' q ']' ) ']'").  

Notation "{ x .. y }, 'DHT' [ this , W ] ( p , q )" :=
  (DTbin this W (logvar (fun x => .. (logvar (fun y => binarify p q)) .. )))
   (at level 0, x binder, y binder, right associativity,
    format "'[hv ' { x .. y }, '/ ' DHT  [ this , W ]  ( '[' p , '/' q ']' ) ']'").

Section BasicRules.

Variable this : nid.

Lemma vrf_coh W A (e : DT this W A) i r : 
        (i \In Coh W -> verify i e r) -> verify i e r.

Lemma vrf_pre W A (e : DT this W A) i i' (k : cont A) : 
        verify i e k -> network_rely W this i i' -> verify i' e k. 

Lemma vrf_post W A (e : DT this W A) i (k : cont A) : 
        verify i e k ->
        verify i e (fun x m => forall m', network_rely W this m m' -> k x m').

Lemma bind_rule W A B (e1 : DT this W A) (e2 : A -> DT this W B) i 
             (q : cont A) (r : cont B) : 
        verify i e1 q -> 
        (forall y j, q y j -> j \In Coh W  -> verify j (e2 y) r) ->
        verify i (bind e1 e2) r.

Arguments bind_rule [W A B e1 e2 i].

Lemma step W A B (e1 : DT this W A) (e2 : A -> DT this W B) i (r : cont B) : 
        verify i e1 (fun y m => verify m (e2 y) r) ->
        verify i (bind e1 e2) r.

Lemma call_rule' W A i (f : DT this W A) (k : cont A) : 
  
  (i \In Coh W -> pre_of f i) ->
  
  (forall x m, post_of f i x m -> m \In Coh W -> k x m) ->
  verify i f k.

Lemma call_rule W A (p : Pred state) (q : A -> Pred state) i
      {e} (k : cont A) : 
        (i \In Coh W -> p i) -> 
        (forall x m, q x m -> m \In Coh W -> k x m) ->
        verify i (@with_spec this W A (binarify p q) e) k.

Section GhostRules.

Variables (W : world) (A B C : Type). 

Lemma vrf_mono (e : DT this W A) i (r1 r2 : cont A) : 
        r1 <== r2 -> verify i e r1 -> verify i e r2. 

Variable (e : DT this W A).

Lemma ghE (s : B -> C -> spec A) : 
        conseq e (logvar (fun x => logvar (s x))) <->
        conseq e (logvar (fun xy => s xy.1 xy.2)).

Lemma ghC (p : B -> pre) (q : B -> A -> pre) :
        (forall i x, p x i -> i \In Coh W -> verify i e (q x)) ->
        conseq e (logvar (fun x => binarify (p x) (q x))).

Variables (s : C -> spec A) (f : DTbin this W (logvar s)).

Lemma gh_conseq t : conseq f (s t).

Lemma gh_ex g i (k : cont A) : 
        verify i (do' (@gh_conseq g)) k ->
        verify i (@with_spec this W A (logvar s) f) k.

End GhostRules.

Arguments gh_ex [W A C s f].

Lemma act_rule W A (a: action W A this) i (r : cont A) :
  (forall j, network_rely W this i j -> a_safe a j /\
   forall y k m, (exists pf : a_safe a j, a_step pf k y) -> network_rely W this k m -> r y m) ->
        verify i (act a) r. 

Lemma ret_rule W A i (v : A) (r : cont A) : 
       (forall m, network_rely W this i m -> r v m) ->       
       verify i (ret this W v) r. 

End BasicRules.

Section InjectLemmas.

Variable this : nid.
Variables (W V : world) (K : hooks) (A : Type) (w : injects V W K).
Notation W2 := (inj_ext w).

Variable (e1 : DT this V A).

Lemma inject_rule i j (r : cont A) : 
        i \In Coh V -> 
        verify i e1 (fun x i' => forall j', 
          i' \+ j' \In Coh W -> network_rely W2 this j j' -> r x (i' \+ j')) ->
        verify (i \+ j) (inject w e1) r.

End InjectLemmas.

Section InductiveInvLemmas.

Variable pr : protocol.

Notation l := (plab pr).
Variable I : dstatelet -> pred nid -> Prop.
Variable ii : InductiveInv pr I.

Variables (A : Type) (this: nid).
Notation V := (mkWorld pr).
Notation W := (mkWorld (ProtocolWithIndInv ii)).

Variable (e : DT this V A).

Notation getS i := (getStatelet i l).

Lemma with_inv_rule' i (r : cont A) : 
  verify i e (fun x m =>
              I (getS m) (nodes pr (getS m)) -> r x m) ->
        verify i (with_inv ii e) r.

Lemma with_inv_rule i (r : cont A) : 
        verify i e (fun x m => r x m) ->
        verify i (with_inv ii e) r.

End InductiveInvLemmas. *)
From DiSeL
Require Import TwoPhaseProtocol TwoPhaseCoordinator TwoPhaseParticipant.
(* TwoPhaseProtocol:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.

Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Module TPCProtocol.

Module States.

Definition data := seq nid.

Inductive CState :=

| CInit
         
| CSentPrep of data & seq nid

| CWaitPrepResponse of data & seq (nid * bool)

| CSentCommit of data & seq nid
| CSentAbort of data & seq nid
                        
| CWaitAckCommit of data & seq nid
                       
| CWaitAckAbort of data & seq nid.

Inductive PState :=
| PInit
| PGotRequest of data 
| PRespondedYes of data | PRespondedNo of data
| PCommitted of data | PAborted of data.

Definition st := ptr_nat 1.
Definition log := ptr_nat 2.

Definition Log := seq (bool * (seq nat)).

Definition CStateT := (nat * CState)%type.
Definition PStateT := (nat * PState)%type.

End States.

Import States.

Section TPCProtocol.

Variable cn : nid.

Variable pts : seq nid.

Variable others : seq nid.

Hypothesis Hnin : cn \notin pts.
Hypothesis Puniq : uniq pts.

Definition localCoh (n : nid) : Pred heap :=
  [Pred h | valid h /\
   if n == cn
   then exists (s : CStateT) (l : Log),
       h = st :-> s \+ log :-> l
   else if n \in pts
   then exists (s : PStateT) (l : Log),
       h = st :-> s \+ log :-> l
   else log \notin dom h].

Definition nodes := [:: cn] ++ pts ++ others.

Definition prep_req : nat := 0.
Definition prep_yes : nat := 1.
Definition prep_no : nat := 2.
Definition commit_req : nat := 3.
Definition abort_req : nat := 4.
Definition commit_ack : nat := 5.
Definition abort_ack : nat := 6.

Definition eval_req : nat := 7.
Definition eval_resp : nat := 8.

Definition ttag := nat.
Definition payload := seq nat.

Definition tags : seq ttag :=
  [:: prep_req;
     prep_yes;
     prep_no;
     commit_req;
     abort_req;
     commit_ack;
     abort_ack;
     eval_req;
     eval_resp].

Definition tagFromParticipant (t : nat) : bool :=
  (t \in [:: prep_yes; prep_no; commit_ack; abort_ack]).

Definition msgFromParticipant (tms : TaggedMessage) (y : nat) : bool :=
    tagFromParticipant (tag tms)
    && (tms_cont tms == [:: y]).

Definition tagFromCoordinator (t : nat) : bool :=
  (t \in [:: prep_req; commit_req; abort_req]).

Definition msgFromCoordinator (tms : TaggedMessage) (y : nat) : Prop :=
  let: body := tms_cont tms in
  if tag tms == prep_req
  then exists data, body = y :: data
  else if tag tms == commit_req
       then body = [:: y] 
       else if tag tms == abort_req
            then body = [:: y]
            else False.

Definition cohMsg (ms: msg TaggedMessage) (y : nat) : Prop :=
  if from ms == cn
  then to ms \in pts /\ msgFromCoordinator (content ms) y
  else if from ms \in pts
       then to ms == cn /\ msgFromParticipant (content ms) y
       else True.

Definition soupCoh : Pred soup :=
  [Pred s | valid s /\
            forall m ms, find m s = Some ms -> exists y, cohMsg ms y].

Definition tpc_coh d : Prop :=
  let: dl := dstate d in
  let: ds := dsoup d in
  [/\ soupCoh ds, dom dl =i nodes,
   valid dl &
   forall n, n \in nodes -> localCoh n (getLocal n d)].

Lemma l1 d: tpc_coh d -> valid (dstate d).

Lemma l2 d: tpc_coh d -> valid (dsoup d).

Lemma l3 d: tpc_coh d -> dom (dstate d) =i nodes.

Definition TPCCoh := CohPred (CohPredMixin l1 l2 l3).

Section TransitionLemmas.

Lemma send_soupCoh d m : 
    soupCoh (dsoup d) -> (exists y, cohMsg m y) -> soupCoh (post_msg (dsoup d) m).1.

Lemma trans_updDom this d s :
  this \in nodes -> TPCCoh d -> dom (upd this s (dstate d)) =i nodes.

Lemma consume_coh d m : TPCCoh d -> soupCoh (consume_msg (dsoup d) m).

Lemma this_not_pts this : this \in pts -> this == cn = false.

Lemma this_not_pts' this : this == cn -> this \notin pts.

End TransitionLemmas.

Lemma locCn n d (C : TPCCoh d):
  n \in nodes -> 
  valid (getLocal n d) /\
  if n == cn
  then exists (s : CStateT) (l : Log),
      getLocal n d = st :-> s \+ log :-> l
  else if n \in pts
       then exists (s : PStateT) (l : Log),
           getLocal n d = st :-> s \+ log :-> l
       else log \notin dom (getLocal n d).            

Lemma cohStC d (C : TPCCoh d) s:
  find st (getLocal cn d) = Some s ->
  dyn_tp s = CStateT. 

Lemma cohStP n d (C : TPCCoh d) (H : n \in pts) s:
  find st (getLocal n d) = Some s ->
  dyn_tp s = PStateT. 

Definition getStC d (C : TPCCoh d) : CStateT :=
  match find st (getLocal cn d) as f return _ = f -> _ with
    Some v => fun epf => icast (sym_eq (cohStC C epf)) (dyn_val v)
  | _ => fun epf => (0, CInit)
  end (erefl _).

Lemma getStC_K d (C : TPCCoh d) m (l : Log):
  getLocal cn d = st :-> m \+ log :-> l -> getStC C = m.

Program Definition getStP n d (C : TPCCoh d) (pf : n \in nodes) : PStateT.

Lemma getStP_K n d (C : TPCCoh d) (pf : n \in nodes) m (l : Log):
  n \in pts -> getLocal n d = st :-> m \+ log :-> l -> getStP C pf = m.

Lemma cohStL d (C : TPCCoh d) n (H : n \in nodes) l:
  find log (getLocal n d) = Some l -> dyn_tp l = Log.

Definition getStL n d (C : TPCCoh d) (pf : n \in nodes) : Log :=
  match find log (getLocal n d) as f return _ = f -> _ with
    Some v => fun epf => icast (sym_eq (cohStL C pf epf)) (dyn_val v) 
  | _ => fun epf => [::]
  end (erefl _).

Lemma getStL_Kc n d (C : TPCCoh d) (pf : n \in nodes) (m : CStateT) (l : Log):
  getLocal n d = st :-> m \+ log :-> l -> getStL C pf = l.

Lemma getStL_Kp n d (C : TPCCoh d) (pf : n \in nodes) (m : PStateT) (l : Log):
  getLocal n d = st :-> m \+ log :-> l -> getStL C pf = l.

Lemma cn_in : cn \in nodes.

Lemma pts_in n: n \in pts -> n \in nodes.

Lemma cn_pts_in this : this \in cn :: pts -> this \in nodes.

Lemma getStCE l i j pf pf' :
  getLocal cn (getStatelet j l) = getLocal cn (getStatelet i l) ->
  @getStC (getStatelet j l) pf' = @getStC (getStatelet i l) pf.

Lemma getStPE l n i j C C' pf :
  n \in pts -> 
  getLocal n (getStatelet j l) = getLocal n (getStatelet i l) ->
  @getStP n (getStatelet j l) C' pf = @getStP n (getStatelet i l) C pf.

Lemma getStLE l this i j pf pf' :
  forall (N : this \in cn :: pts),
  getLocal this (getStatelet j l) = getLocal this (getStatelet i l) ->
  @getStL _ (getStatelet j l) pf' (cn_pts_in N) =
  @getStL _ (getStatelet i l) pf (cn_pts_in N).

Definition cstep_send (cs: CStateT) (to : nid) (d : data) (l : Log) :
  CStateT * Log :=
  
  if to \in pts then
    let: (e, s) := cs in
    match s with
    | CInit =>
      if pts == [:: to]
      then (e, CWaitPrepResponse d [::], l)
      else (e, CSentPrep d [:: to], l)
    
    | CSentPrep d' tos =>
      
      if perm_eq (to :: tos) pts
      
      then (e, CWaitPrepResponse d' [::], l)
      else (e, CSentPrep d' (to :: tos), l)                  
    | CWaitPrepResponse d' res =>
      
      if (perm_eq (map fst res) pts)
      then if all (fun r => r) (map snd res)
           then if pts == [:: to]
                then (e, CWaitAckCommit d' [::], l)
                else (e, CSentCommit d' [:: to], l)
           else if pts == [:: to]
                then (e, CWaitAckAbort d' [::], l)
                else (e, CSentAbort  d' [:: to], l)
      else (cs, l)
    | CSentCommit d' tos =>
      
      if perm_eq (to :: tos) pts
      then (e, CWaitAckCommit d' [::], l)
      else (e, CSentCommit d' (to :: tos), l)                  
    | CSentAbort d' tos =>
      if perm_eq (to :: tos) pts
      then (e, CWaitAckAbort d' [::], l)
      else (e, CSentAbort d' (to :: tos), l)                  
    | _ => (cs, l) 
    end
  else (cs, l).

Definition c_matches_tag s mtag : bool :=
  match  s with
  | CWaitPrepResponse _ _ => (mtag == prep_yes) || (mtag == prep_no)
  | CWaitAckCommit _ _ => mtag == commit_ack
  | CWaitAckAbort _ _ => mtag == abort_ack
  | _ => false
  end.

Definition cstep_recv' (cs : CStateT) (from : nid) (mtag : ttag)
           (mbody : payload) (l : Log) : CStateT * Log  :=
  let: (e, s) := cs in
  match s with
  | CWaitPrepResponse d' res =>
        if (from \in (map fst res))
    then (cs, l)
    
    else (e, CWaitPrepResponse d' ((from, mtag == prep_yes) :: res), l)
  | CWaitAckCommit d' res =>
    if from \in res then (cs, l)
    else if (perm_eq (from :: res) pts)
         then ((e.+1, CInit), rcons l (true, d'))
         else (e, CWaitAckCommit d' (from :: res), l)
  | CWaitAckAbort d' res =>
    if from \in res then (cs, l)
    else if (perm_eq (from :: res) pts)
         then ((e.+1, CInit), rcons l (false, d'))
         else (e, CWaitAckAbort d' (from :: res), l)
  | _ => (cs, l)
  end.

Definition cstep_recv (cs: CStateT) (from : nid) (mtag : ttag)
           (mbody : payload) (l : Log) : CStateT * Log  :=
  if (from \notin pts) then (cs, l)
  else let: (e, s) := cs in
    
    if (head 0 mbody != e) then (cs, l) else
      cstep_recv' cs from mtag mbody l
.
    
Section CoordinatorGenericSendTransitions.

Notation coh := TPCCoh.

Definition HCn this to := (this == cn /\ to \in pts).
Definition mkLocal {T} (sl : T * Log) := st :-> sl.1 \+ log :-> sl.2.

Variable stag : ttag.

Variable prec : CStateT -> nid -> payload -> Prop.

Hypothesis cn_prec_safe :
  forall this to s m,
    HCn this to -> prec s to m -> cohMsg (Msg (TMsg stag m) this to true) s.1.

Definition cn_safe (this n : nid)
           (d : dstatelet) (msg : data) :=
  HCn this n /\
  exists (C : coh d), prec (getStC C) n msg.

Lemma cn_safe_coh this to d m : cn_safe this to d m -> coh d.

Lemma cn_this_in this to : HCn this to -> this \in nodes.

Lemma cn_to_in this to : HCn this to -> to \in nodes.

Lemma cn_safe_in this to d m : cn_safe this to d m ->
                                  this \in nodes /\ to \in nodes.

Definition cn_step (this to : nid) (d : dstatelet)
           (msg : seq nat)
           (pf : cn_safe this to d msg) :=
  let C := cn_safe_coh pf in 
  let s := getStC C in
  let l := getStL C (cn_this_in (proj1 pf)) in
  Some (mkLocal (cstep_send s to (behead msg) l)). 

Lemma cn_step_coh : s_step_coh_t coh stag cn_step.

Lemma cn_safe_def this to d msg :
      cn_safe this to d msg <->
      exists b pf, @cn_step this to d msg pf = Some b.

Definition cn_send_trans :=
  SendTrans cn_safe_coh cn_safe_in cn_safe_def cn_step_coh.

End CoordinatorGenericSendTransitions.

Section CoordinatorSendTransitions.

Definition send_prep_prec (p : CStateT) to (m : payload) :=
  (exists n, p = (n, CInit) /\ exists d, m = n :: d) \/
  exists n d ps, [/\ p = (n, CSentPrep d ps), m = n :: d & to \notin ps].

Program Definition cn_send_prep_trans : send_trans TPCCoh :=
  @cn_send_trans prep_req send_prep_prec _.

Definition send_commit_prec (p :  CStateT) to (m : payload) :=
  (exists n d res,
    [/\ p = (n, CWaitPrepResponse d res), m = [::n],
     perm_eq (map fst res) pts & all (fun r => r) (map snd res)])
  \/ exists n d ps, [/\ p = (n, CSentCommit d ps), m = [::n] & to \notin ps].

Program Definition cn_send_commit_trans : send_trans TPCCoh :=
  @cn_send_trans commit_req send_commit_prec _.

Definition send_abort_prec (p : CStateT) to (m : payload) :=
  (exists n d res,
    [/\ p = (n, CWaitPrepResponse d res), m = [::n],
        perm_eq (map fst res) pts & has (fun r => negb r) (map snd res)]) \/
    exists n d ps, [/\ p = (n, CSentAbort d ps), m = [::n] & to \notin ps].
  
Program Definition cn_send_abort_trans : send_trans TPCCoh :=
  @cn_send_trans abort_req send_abort_prec _.

End CoordinatorSendTransitions.

Section CoordinatorGenericReceiveTransitions.

Notation coh := TPCCoh.

Variable rc_tag : ttag.
Variable rc_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool.

Definition rc_step : receive_step_t coh :=
  fun this (from : nid) (m : seq nat) d (pf : coh d) (pt : this \in nodes) =>
    if (this == cn)
    then let s := getStC pf in
         let l := @getStL this d pf pt in
         mkLocal (cstep_recv s from rc_tag m l)
    else getLocal this d.

Lemma rc_step_coh : r_step_coh_t rc_wf rc_tag rc_step.

Definition rc_recv_trans := ReceiveTrans rc_step_coh.

End CoordinatorGenericReceiveTransitions.

Section CoordinatorReceiveTransitions.

Definition cn_msg_wf d (C : TPCCoh d) (this from : nid) :=
  [pred m : TaggedMessage | c_matches_tag (getStC C).2 (tag m)].

Definition cn_receive_prep_yes_trans := rc_recv_trans prep_yes cn_msg_wf.
Definition cn_receive_prep_no_trans := rc_recv_trans prep_no cn_msg_wf.

Definition cn_receive_commit_ack_trans := rc_recv_trans commit_ack cn_msg_wf.
Definition cn_receive_abort_ack_trans := rc_recv_trans abort_ack cn_msg_wf.

End CoordinatorReceiveTransitions.

Definition pstep_send (cs: PStateT) (l : Log) (commit : bool) : PStateT * Log :=
  let: (e, s) := cs in
  match s with
  | PGotRequest d =>
    if commit then (e, PRespondedYes d, l) else (e, PRespondedNo d, l)
  | PCommitted d => (e.+1, PInit, l)
  | PAborted d => (e.+1, PInit, l)
  | _ => (cs, l)
  end.

Definition p_matches_tag s mtag : bool :=
  match s with
  | PInit => mtag == prep_req
    | PRespondedYes _ => (mtag == commit_req) || (mtag == abort_req)
  | PRespondedNo _ => mtag == abort_req
  | _ => false
  end.

Definition pstep_recv (ps: PStateT) (from : nid) (mtag : ttag)
           (mbody : payload) (l : Log) : PStateT * Log :=
  if (negb (p_matches_tag ps.2 mtag)) || (from != cn) || (head 0 mbody != ps.1)
  then (ps, l)
  else let: (e, s) := ps in
       match s with
       | PInit => (e, PGotRequest (behead mbody), l)
       | PRespondedYes d =>
         if mtag == commit_req
         then (e, PCommitted d, rcons l (true, d))
         else
           
           (e, PAborted d, rcons l (false, d))
       | PRespondedNo d => (e, PAborted d, rcons l (false, d))
       | _ => (ps, l)
       end.

Section ParticipantGenericSendTransitions.

Notation coh := TPCCoh.

Definition HPn this to := (this \in pts /\ to == cn).

Variable ptag : ttag.

Variable prec : PStateT -> payload -> Prop.

Hypothesis pn_prec_safe :
  forall this to s m,
    HPn this to -> prec s m -> cohMsg (Msg (TMsg ptag m) this to true) s.1.

Lemma pn_this_in this to : HPn this to -> this \in nodes.

Definition pn_safe (this n : nid)
           (d : dstatelet) (msg : data) :=
  HPn this n /\ 
  exists (Hp : HPn this n) (C : coh d), prec (getStP C (pn_this_in Hp)) msg. 

Lemma pn_safe_coh this to d m : pn_safe this to d m -> coh d.

Lemma pn_to_in this to : HCn this to -> to \in nodes.

Lemma pn_safe_in this to d m : pn_safe this to d m ->
                               this \in nodes /\ to \in nodes.

Variable commit : bool.

Definition pn_step (this to : nid) (d : dstatelet)
           (msg : seq nat)
           (pf : pn_safe this to d msg) :=
  let C := pn_safe_coh pf in 
  let s := getStP C (pn_this_in (proj1 pf)) in
  let l := getStL C (pn_this_in (proj1 pf)) in
  Some (mkLocal (pstep_send s l commit)). 

Lemma pn_step_coh : s_step_coh_t coh ptag pn_step.

Lemma pn_safe_def this to d msg :
      pn_safe this to d msg <->
      exists b pf, @pn_step this to d msg pf = Some b.

Definition pn_send_trans :=
  SendTrans pn_safe_coh pn_safe_in pn_safe_def pn_step_coh.

End ParticipantGenericSendTransitions.

Section ParticipantSendTransitions.

Definition send_prep_resp_prec (ps : data -> PState)
           (p : PStateT) (m : payload) :=
  exists n d, p = (n, ps d) /\  m = [:: n].

Program Definition pn_gen_send_trans (t : ttag)
        (T: t \in [:: prep_yes; prep_no; commit_ack; abort_ack])
        (ps : data -> PState) c :=
  @pn_send_trans t (send_prep_resp_prec ps) _ c.

Program Definition pn_send_yes_trans :=
  @pn_gen_send_trans prep_yes _ PGotRequest true.

Program Definition pn_send_no_trans :=
  @pn_gen_send_trans prep_no _ PGotRequest false.

Program Definition pn_commit_ack_trans :=
  @pn_gen_send_trans commit_ack _ PCommitted true.

Program Definition pn_abort_ack_trans :=
  @pn_gen_send_trans abort_ack _ PAborted false.

End ParticipantSendTransitions.

Section ParticipantGenericReceiveTransitions.

Notation coh := TPCCoh.

Variable rp_tag : ttag.
Variable rp_wf : forall d, coh d -> nid -> nid -> pred payload.

Definition rp_step : receive_step_t coh :=
  fun this (from : nid) (m : seq nat) d (pf : coh d) (pt : this \in nodes) =>
    if (this \in pts)
    then let s := getStP pf pt in
         let l := @getStL this d pf pt in
         mkLocal (pstep_recv s from rp_tag m l)
    else getLocal this d.

Lemma rp_step_coh : r_step_coh_t rp_wf rp_tag rp_step.

Definition rp_recv_trans := ReceiveTrans rp_step_coh.

End ParticipantGenericReceiveTransitions.

Section ParticipantReceiveTransitions.

Definition pn_msg_wf d (_ : TPCCoh d) (this from : nid) :=
  [pred p : payload | true].

Definition pn_receive_got_prep_trans := rp_recv_trans prep_req pn_msg_wf.

Definition pn_receive_commit_ack_trans := rp_recv_trans commit_req pn_msg_wf.

Definition pn_receive_abort_ack_trans := rp_recv_trans abort_req pn_msg_wf.

End ParticipantReceiveTransitions.

Section Protocol.

Variable l : Label.

Definition tpc_sends :=
  [::
     cn_send_prep_trans;
     cn_send_commit_trans;
     cn_send_abort_trans;

     pn_send_yes_trans;
     pn_send_no_trans;
     pn_commit_ack_trans;
     pn_abort_ack_trans
  ].

Definition tpc_receives :=
  [::
     cn_receive_prep_yes_trans;
     cn_receive_prep_no_trans;
     cn_receive_commit_ack_trans;
     cn_receive_abort_ack_trans;

     pn_receive_got_prep_trans;
     pn_receive_commit_ack_trans;
     pn_receive_abort_ack_trans
  ].

Program Definition TwoPhaseCommitProtocol : protocol :=
  @Protocol _ l _ tpc_sends tpc_receives _ _.

End Protocol.
End TPCProtocol.

Module Exports.
Section Exports.
      
Definition TwoPhaseCommitProtocol := TwoPhaseCommitProtocol.

Definition cn_send_prep_trans := cn_send_prep_trans.
Definition cn_send_commit_trans := cn_send_commit_trans.
Definition cn_send_abort_trans := cn_send_abort_trans.

Definition pn_send_yes_trans := pn_send_yes_trans.
Definition pn_send_no_trans := pn_send_no_trans.
Definition pn_commit_ack_trans := pn_commit_ack_trans.
Definition pn_abort_ack_trans := pn_abort_ack_trans.

Definition cn_receive_prep_yes_trans := cn_receive_prep_yes_trans.
Definition cn_receive_prep_no_trans := cn_receive_prep_no_trans.
Definition cn_receive_commit_ack_trans := cn_receive_commit_ack_trans.
Definition cn_receive_abort_ack_trans := cn_receive_abort_ack_trans.

Definition pn_receive_got_prep_trans := pn_receive_got_prep_trans.
Definition pn_receive_commit_ack_trans := pn_receive_commit_ack_trans.
Definition pn_receive_abort_ack_trans := pn_receive_abort_ack_trans.

Definition prep_req := prep_req.
Definition prep_yes := prep_yes.
Definition prep_no := prep_no.
Definition commit_req := commit_req.
Definition abort_req := abort_req.
Definition commit_ack := commit_ack.
Definition abort_ack := abort_ack.

Definition getStC := getStC.
Definition getStP := getStP.
Definition getStL := getStL.

Definition getStCE := getStCE.
Definition getStPE := getStPE.
Definition getStCL := getStLE.

End Exports.
End Exports.

End TPCProtocol.

Export TPCProtocol.States.
Export TPCProtocol.Exports. *)
(* TwoPhaseCoordinator:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
From DiSeL
Require Import InductiveInv While.
From DiSeL
Require Import TwoPhaseProtocol.

Module TwoPhaseCoordinator.
Section TwoPhaseCoordinator.

Variable l : Label.
Variables (cn : nid) (pts : seq nid) (others : seq nid).
Hypothesis Hnin : cn \notin pts.
Hypothesis Puniq : uniq pts.
Hypothesis PtsNonEmpty : pts != [::].

Definition tpc := TwoPhaseCommitProtocol others Hnin l.
Notation W := (mkWorld tpc).

Section CoordinatorImplementation.

Program Definition send_prep e data to :=
  act (@send_action_wrapper W tpc cn l (prEq tpc) (cn_send_prep_trans cn pts others) _ (e :: data) to).

Program Definition send_commit e to :=
  act (@send_action_wrapper W tpc cn l (prEq tpc) (cn_send_commit_trans cn pts others) _ [:: e] to).

Program Definition send_abort e to :=
  act (@send_action_wrapper W tpc cn l (prEq tpc) (cn_send_abort_trans cn pts others) _ [:: e] to).

Program Definition tryrecv_prep_resp := act (@tryrecv_action_wrapper W cn
      
      (fun k _ t b => (k == l) && ((t == prep_yes) || (t == prep_no))) _).

Program Definition tryrecv_commit_ack :=
  act (@tryrecv_action_wrapper W cn (fun k _ t b => (k == l) && (t == commit_ack)) _).

Program Definition tryrecv_abort_ack :=
  act (@tryrecv_action_wrapper W cn (fun k _ t b => (k == l) && (t == abort_ack)) _).

Arguments TPCProtocol.TPCCoh [cn pts others].
Notation coh := (@TPCProtocol.TPCCoh cn pts others).
Notation getS s := (getStatelet s l).
Notation loc i := (getLocal cn (getStatelet i l)).

Export TPCProtocol.

Program Definition read_round :
  {(ecl : (nat * CState) * Log)}, DHT [cn, W]
  (fun i => loc i = st :-> ecl.1 \+ log :-> ecl.2, 

Definition send_prep_loop_spec (e : nat) d := forall to_send,
  {l : Log}, DHT [cn, W] 
  (fun i =>
     loc i = st :-> (e, CInit) \+ log :-> l /\ perm_eq pts to_send \/
     if to_send == [::]
     then loc i = st :-> (e, CWaitPrepResponse d [::]) \+ log :-> l 
     else exists (ps : seq nid),
         loc i = st :-> (e, CSentPrep d ps) \+ log :-> l /\
         perm_eq pts (ps ++ to_send),
   fun r m => r = tt /\ loc m = st :-> (e, CWaitPrepResponse d [::]) \+ log :-> l).

Program Definition send_prep_loop e d :
  {l : Log}, DHT [cn, W] 
  (fun i => loc i = st :-> (e, CInit) \+ log :-> l,
   fun r m => r = tt /\
              loc m = st :-> (e, CWaitPrepResponse d [::]) \+ log :-> l) :=
  Do (ffix (fun (rec : send_prep_loop_spec e d) to_send => 
              Do (match to_send with
                  | to :: tos => send_prep e d to ;; rec tos
                  | [::] => ret _ _ tt
                  end)) pts).

Definition rc_prep_cond (acc : seq (nid * bool)) := ~~ perm_eq (map fst acc) pts.

Definition rc_prep_inv (e : nat) (dl : data * Log) : cont (seq (nid * bool)) :=
  fun acc i => loc i = st :-> (e, CWaitPrepResponse dl.1 acc) \+ log :-> dl.2.

Program Definition receive_prep_loop (e : nat):
  {(dl : data * Log)}, DHT [cn, W]
  (fun i => loc i = st :-> (e, CWaitPrepResponse dl.1 [::]) \+ log :-> dl.2,

Definition read_res (st : CStateT) :=
  let: (_, s) := st in
  match s with
  | CWaitPrepResponse _ res => res
  | _ => [::]
  end.

Program Definition read_resp_result :
  {(e : nat) (d : data) (lg : Log) res}, DHT [cn, W]
  (fun i => loc i = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg,
   fun r m => loc m = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg /\
              r = all (fun i => i) (map snd res)) :=                        
  Do (act (@skip_action_wrapper W cn l tpc (prEq tpc) _
          (fun s pf => all (fun i => i) (map snd (read_res (getStC pf)))))).

Program Definition coordinator_prelude (d : data) :
  {(lg : Log)}, DHT [cn, W] 
  (fun i => exists (e : nat), loc i = st :-> (e, CInit) \+ log :-> lg,
   fun r m => let: (res, b) := r in
       exists (e : nat),
       [/\ loc m = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg,
           perm_eq (map fst res) pts &
           b = all id (map snd res)]) :=
  Do (e <-- read_round;
      send_prep_loop e d;;
      res <-- receive_prep_loop e;                     
      b <-- read_resp_result;
      ret _ _ (res, b)).

Definition send_commit_loop_spec (e : nat) d := forall to_send,
  {lg : Log}, DHT [cn, W]
  (fun i =>
     (exists res,
         [/\ loc i = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg,
          to_send = pts, perm_eq (map fst res) pts &
          all id (map snd res)]) \/
     if to_send == [::]
     then loc i = st :-> (e, CWaitAckCommit d [::]) \+ log :-> lg
     else exists (ps : seq nid),
         loc i = st :-> (e, CSentCommit d ps) \+ log :-> lg /\
         perm_eq pts (ps ++ to_send),
   fun (r : unit) m => loc m = st :-> (e, CWaitAckCommit d [::]) \+ log :-> lg).

Program Definition send_commit_loop e d : send_commit_loop_spec e d :=
  fun to_send  =>
    Do (fix rec to_send :=
          (match to_send with
           | to :: tos => send_commit e to ;; rec tos
           | [::] => ret _ _ tt
           end)) to_send.

Program Definition send_commits e d :
  {lg : Log}, DHT [cn, W]
  (fun i => exists res,
         [/\ loc i = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg,
          perm_eq (map fst res) pts &
          all id (map snd res)],
   fun (r : unit) m => loc m = st :-> (e, CWaitAckCommit d [::]) \+ log :-> lg)
  := Do (send_commit_loop e d pts).

Definition send_abort_loop_spec (e : nat) d := forall to_send,
  {lg : Log}, DHT [cn, W]
  (fun i =>
     (exists res,
         [/\ loc i = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg,
          to_send = pts, perm_eq (map fst res) pts &
          has (fun r => negb r) (map snd res)]) \/
     if to_send == [::]
     then loc i = st :-> (e, CWaitAckAbort d [::]) \+ log :-> lg
     else exists (ps : seq nid),
         loc i = st :-> (e, CSentAbort d ps) \+ log :-> lg /\
         perm_eq pts (ps ++ to_send),
   fun (r : unit) m => loc m = st :-> (e, CWaitAckAbort d [::]) \+ log :-> lg).

Program Definition send_abort_loop e d : send_abort_loop_spec e d :=
  fun to_send  =>
    Do (fix rec to_send :=
          (match to_send with
           | to :: tos => send_abort e to ;; rec tos
           | [::] => ret _ _ tt
           end)) to_send.

Program Definition send_aborts e d :
  {lg : Log}, DHT [cn, W]
  (fun i => exists res,
         [/\ loc i = st :-> (e, CWaitPrepResponse d res) \+ log :-> lg,
          perm_eq (map fst res) pts &
          has (fun r => negb r) (map snd res)],
   fun (r : unit) m => loc m = st :-> (e, CWaitAckAbort d [::]) \+ log :-> lg)
  := Do (send_abort_loop e d pts).

Definition rc_commit_cond (acc : seq nid) := ~~ perm_eq acc pts.

Definition rc_commit_inv (e : nat) (dl : data * Log) : cont (seq nid) :=
  fun acc i =>
    if perm_eq acc pts
    then loc i = st :-> (e.+1, CInit) \+ log :-> rcons dl.2 (true, dl.1)
    else loc i = st :-> (e, CWaitAckCommit dl.1 acc) \+ log :-> dl.2.

Program Definition receive_commit_loop (e : nat):
  {(dl : data * Log)}, DHT [cn, W]
  (fun i => loc i = st :-> (e, CWaitAckCommit dl.1 [::]) \+ log :-> dl.2,

Definition rc_abort_cond (acc : seq nid) := ~~ perm_eq acc pts.

Definition rc_abort_inv (e : nat) (dl : data * Log) : cont (seq nid) :=
  fun acc i =>
    if perm_eq acc pts
    then loc i = st :-> (e.+1, CInit) \+ log :-> rcons dl.2 (false, dl.1)
    else loc i = st :-> (e, CWaitAckAbort dl.1 acc) \+ log :-> dl.2.

Program Definition receive_abort_loop (e : nat):
  {(dl : data * Log)}, DHT [cn, W]
  (fun i => loc i = st :-> (e, CWaitAckAbort dl.1 [::]) \+ log :-> dl.2,
 
Program Definition coordinator_round (d : data) :
  {(e : nat)(lg : Log)}, DHT [cn, W] 
  (fun i => loc i = st :-> (e, CInit) \+ log :-> lg,
   fun res m => loc m = st :-> (e.+1, CInit) \+ log :-> rcons lg (res, d))

Definition coord_loop_spec := forall dts,
  {(el : nat * Log)}, DHT [cn, W] 
  (fun i =>  loc i = st :-> (el.1, CInit) \+ log :-> el.2,
   fun (_ : unit) m => exists (chs : seq bool),
     loc m = st :-> (el.1 + (size dts), CInit) \+ log :-> (el.2 ++ (seq.zip chs dts))).
                                               
Program Definition coord_loop : coord_loop_spec :=
  fun dts  =>
    Do (fix rec dts :=
          (match dts with
           | d :: dts => coordinator_round d ;; rec dts
           | [::] => ret _ _ tt
           end)) dts.

Program Definition coordinator_loop_zero (ds : seq data) : 
  DHT [cn, W] 
  (fun i =>  loc i = st :-> (0, CInit) \+ log :-> ([::] : seq (bool * data)),
   fun (_ : unit) m => exists (chs : seq bool),
       loc m = st :-> (size ds, CInit) \+ log :-> (seq.zip chs ds))

End CoordinatorImplementation.
End TwoPhaseCoordinator.

Module Exports.
Section Exports.

Definition coordinator_loop_zero := coordinator_loop_zero.
Definition coordinator_loop := coord_loop.
Definition coordinator_round := coordinator_round.

End Exports.
End Exports.

End TwoPhaseCoordinator.

Export TwoPhaseCoordinator.Exports. *)
(* TwoPhaseParticipant:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
From DiSeL
Require Import InductiveInv While.
From DiSeL
Require Import TwoPhaseProtocol.

Module TwoPhaseParticipant.
Section TwoPhaseParticipant.

Variable l : Label.
Variables (cn : nid) (pts : seq nid) (others : seq nid).
Hypothesis Hnin : cn \notin pts.
Hypothesis PtsNonEmpty : pts != [::].

Definition tpc := TwoPhaseCommitProtocol others Hnin l.
Notation W := (mkWorld tpc).

Variable p : nid.
Hypothesis Hpin : p \in pts.

Section ParticipantImplementation.

Program Definition tryrecv_prep_req := act (@tryrecv_action_wrapper W p
      (fun k _ t b => (k == l) && (t == prep_req)) _).

Program Definition tryrecv_commabrt_req c :=
  act (@tryrecv_action_wrapper W p
  (fun k _ t b => (k == l) &&
  (if c then (t == commit_req) || (t == abort_req) else (t == abort_req))) _).

Program Definition send_yes e to :=
  act (@send_action_wrapper W tpc p l (prEq tpc) (pn_send_yes_trans others Hnin) _ [:: e] to).

Program Definition send_no e to :=
  act (@send_action_wrapper W tpc p l (prEq tpc) (pn_send_no_trans others Hnin) _ [:: e] to).

Program Definition send_commit_ack e to :=
  act (@send_action_wrapper W tpc p l (prEq tpc) (pn_commit_ack_trans others Hnin) _ [:: e] to).

Program Definition send_abort_ack e to :=
  act (@send_action_wrapper W tpc p l (prEq tpc) (pn_abort_ack_trans others Hnin) _ [:: e] to).

Arguments TPCProtocol.TPCCoh [cn pts others].
Notation coh := (@TPCProtocol.TPCCoh cn pts others).
Notation getS s := (getStatelet s l).
Notation loc i := (getLocal p (getStatelet i l)).

Notation Pin := (TPCProtocol.pts_in cn others Hpin).

Program Definition read_round_p :
  {(ecl : (nat * PState) * Log)}, DHT [p, W]
  (fun i => loc i = st :-> ecl.1 \+ log :-> ecl.2, 

Export TPCProtocol.

Definition rp_prep_req_cond (res : option data) := res == None.

Definition rp_prep_req_inv (e : nat) (lg : Log) : cont (option data) :=
  fun res i =>
    if res is Some d
    then loc i = st :-> (e, PGotRequest d) \+ log :-> lg
    else loc i = st :-> (e, PInit) \+ log :-> lg.

Program Definition receive_prep_req_loop (e : nat):
  {(lg : Log)}, DHT [p, W]
  (fun i => loc i = st :-> (e, PInit) \+ log :-> lg,
   fun res m => exists d, res = Some d /\
       loc m = st :-> (e, PGotRequest d) \+ log :-> lg)
  :=
  Do _ (@while p W _ _ rp_prep_req_cond (rp_prep_req_inv e) _
        (fun _ => Do _ (
           r <-- tryrecv_prep_req;
           match r with
           | Some (from, tg, body) =>
             if (from == cn) && (head 0 body == e)
             then ret _ _ (Some (behead body))
             else ret _ _ None
           | None => ret _ _ None
           end              
        )) None).

Program Definition resp_to_req (e : nat) (doCommit : bool) :
  {(dl : (data * Log))}, DHT [p, W]
  (fun i => loc i = st :-> (e, PGotRequest dl.1) \+ log :-> dl.2,

Definition rp_commabrt_cond (res : option bool) := res == None.

Definition rp_commabrt_inv (e : nat) (c: bool) (ld : (Log * data)) :
  cont (option bool) :=
  fun res i =>
    let: (lg, d) := ld in
    if res is Some b
    then if b
         then loc i = st :-> (e, PCommitted d) \+ log :-> (rcons lg (b, d))
         else loc i = st :-> (e, PAborted d) \+ log :-> (rcons lg (b, d))
    else loc i = st :-> (e, if c then PRespondedYes d else PRespondedNo d) \+ log :-> lg.

Program Definition receive_commabrt_loop (e : nat) (c : bool):
  {(ld : (Log * data))}, DHT [p, W]
   (fun i => let: (lg, d) := ld in
    loc i = st :-> (e, if c then PRespondedYes d else PRespondedNo d) \+ log :->lg,
    fun (res : option bool) m => let: (lg, d) := ld in
    exists b, res = Some b /\
    if b 
    then loc m = st :-> (e, PCommitted d) \+ log :-> (rcons lg (b, d))
    else loc m = st :-> (e, PAborted d) \+ log :-> (rcons lg (b, d)))
  :=
  Do _ (@while p W _ _ rp_commabrt_cond (rp_commabrt_inv e c) _
        (fun _ => Do _ (
           r <-- tryrecv_commabrt_req c;
           match r with
           | Some (from, tg, body) =>
             if (from == cn) && (head 0 body == e)
             then ret _ _ (Some (tg == commit_req))
             else ret _ _ None
           | None => ret _ _ None
           end              
        )) None).

Program Definition send_ack (e : nat) (hasCommitted : bool) :
  {(dl : (data * Log))}, DHT [p, W]
  (fun i =>  let:  (d, lg) := dl in
     if hasCommitted
     then loc i = st :-> (e, PCommitted d) \+ log :-> lg
     else loc i = st :-> (e, PAborted d) \+ log :-> lg,
   fun (_ : seq nat) m => 
     let:  (d, lg) := dl in
     if hasCommitted
     then loc m = st :-> (e.+1, PInit) \+ log :-> lg

Definition get (r : option bool) : bool :=
  if r is Some b then b else false.

Program Definition participant_round (doCommit : bool) :
  {(el : nat * Log)}, DHT [p, W] 
  (fun i =>  loc i = st :-> (el.1, PInit) \+ log :-> el.2,

Definition part_with_choices_loop_spec := forall (chs : seq bool),
  {(el : nat * Log)}, DHT [p, W] 
  (fun i =>  loc i = st :-> (el.1, PInit) \+ log :-> el.2,
   fun (_ : unit) m => exists (bs : seq bool)(ds : seq data),
     loc m = st :-> (el.1 + (size chs), PInit) \+ log :-> (el.2 ++ (seq.zip bs ds))).
                                               
Program Definition participant_with_choices_loop : part_with_choices_loop_spec :=
  fun choices  =>
    Do (fix rec choices :=
          (match choices with
           | c :: chs => participant_round c ;; rec chs
           | [::] => ret _ _ tt
           end)) choices.

Program Definition participant_with_choices choices:
  DHT [p, W] 
  (fun i =>  loc i = st :-> (0, PInit) \+ log :-> ([::] : seq (bool * data)),
   fun (_ : unit) m => exists (bs : seq bool) (ds : seq data),
       loc m = st :-> (size choices, PInit) \+ log :-> (seq.zip bs ds))

End ParticipantImplementation.
End TwoPhaseParticipant.

Module Exports.
Section Exports.

Definition participant_round := participant_round.
Definition participant_with_choices_loop := participant_with_choices_loop.
Definition participant_with_choices := participant_with_choices.

End Exports.
End Exports.

End TwoPhaseParticipant.

Export TwoPhaseParticipant.Exports. *)
From DiSeL
Require TwoPhaseInductiveProof.
From DiSeL
Require Import QueryProtocol QueryHooked.
(* QueryProtocol:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely Actions.
From DiSeL
Require Import SeqLib.

Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Definition left_inverse {A B : Type} (op: A -> B) (inv : B -> A) :=
  forall x, inv (op x) = x.

Definition fresh_id (xs : seq (nid * nat)) : nat :=
   (last 0 (sort oleq (unzip2 xs))).+1.      

Lemma zip_in2 (A B : eqType) (a : A) (b : B) xs:
  (a, b) \in xs -> b \in unzip2 xs.

Lemma fresh_not_in z xs : (z, fresh_id xs) \notin xs.

Module QueryProtocol.
Section  QueryProtocol.

Variable Data : Type.
Variable nodes : seq nat.

Variable serialize : Data -> seq nat.
Variable deserialize : seq nat -> Data.
Hypothesis ds_inverse : left_inverse serialize deserialize.

Definition st := ptr_nat 1.

Definition reqs := seq (nid * nat)%type.
Definition resp := seq (nid * nat)%type.

Definition qstate := (reqs * resp)%type.

Definition localCoh (n : nid) : Pred heap :=
  [Pred h | exists (s : qstate), h = st :-> s /\ (uniq s.1 && uniq s.2)].

Definition treq : nat := 0.
Definition tresp : nat := 1.
Definition tags := [:: treq; tresp].

Definition cohMsg (ms: msg TaggedMessage) : Prop :=
  let body := content ms in
                                                             
  if tag body == treq then exists req_num, tms_cont body = [:: req_num]
                                                             
  else exists resp_num sdata, tms_cont body = resp_num :: sdata.

Definition soupCoh : Pred soup :=
  [Pred s | valid s /\ forall m ms, find m s = Some ms -> cohMsg ms].

Definition qcoh d : Prop :=
  let: dl := dstate d in
  let: ds := dsoup d in
  [/\ soupCoh ds, valid dl, dom dl =i nodes &
      forall n, n \in dom dl -> localCoh n (getLocal n d)].

Lemma l1 d: qcoh d -> valid (dstate d).

Lemma l2 d: qcoh d -> valid (dsoup d).

Lemma l3 d: qcoh d -> dom (dstate d) =i nodes.

Definition QCoh := CohPred (CohPredMixin l1 l2 l3).

Lemma send_soupCoh d m : 
    soupCoh (dsoup d) -> cohMsg m -> soupCoh (post_msg (dsoup d) m).1.

Lemma consume_coh d m : QCoh d -> soupCoh (consume_msg (dsoup d) m).

Lemma trans_updDom this d s :
  this \in nodes -> QCoh d -> dom (upd this s (dstate d)) =i nodes.

Lemma cohSt n d (C : QCoh d) s:
  find st (getLocal n d) = Some s ->
  dyn_tp s = qstate.

Definition getSt n d (C : QCoh d) : qstate :=
  match find st (getLocal n d) as f return _ = f -> _ with
    Some v => fun epf => icast (sym_eq (cohSt C epf)) (dyn_val v)
  | _ => fun epf => ([::], [::])
  end (erefl _).

Lemma getStK n d (C : QCoh d)  s :
  getLocal n d = st :-> s -> getSt n C = s.

Lemma getStE n i j C C' (pf : n \in nodes) :
  getLocal n j = getLocal n i ->
  @getSt n j C' = @getSt n i C.

Lemma getStE' n i j C C' (pf : n \in nodes) :
  @getSt n j C' = @getSt n i C ->
  getLocal n j = getLocal n i.

Notation coh := QCoh.

Definition send_step_fun (q : qstate) (to : nid) (tag : nat) (rid: nat) : qstate :=
  let: (xs, ys) := q in
  if tag == treq then ((to, fresh_id xs) :: xs, ys)
  else if (tag == tresp) && ((to, rid) \in ys)
       then (xs, seq.rem (to, rid) ys)
       else q.

Lemma send_step_uniq q to tag rid:
  uniq q.1 -> uniq q.2 ->

Definition receive_step_fun (q : qstate) (from : nid) (tag : nat) (rid : nat) :=
  let: (xs, ys) := q in
  if (tag == treq) && ((from, rid) \notin ys)
  then (xs, (from, rid) :: ys)
  else if (tag == tresp) && ((from, rid) \in xs)
       then (seq.rem (from, rid) xs, ys)
       else q.

Lemma receive_step_uniq q from tag rid:
  uniq q.1 -> uniq q.2 ->

Section GenericQuerySendTransitions.

Definition Hn this to := this \in nodes /\ to \in nodes.
Definition mkLocal (q : qstate) := st :-> q.

Variable stag : nat.

Variable prec : qstate -> nid -> seq nat -> Prop.

Definition prec_safe :=
    forall this to q m, Hn this to -> prec q to m ->
                      cohMsg (Msg (TMsg stag m) this to true).

Hypothesis psafe : prec_safe.

Definition send_safe (this n : nid)
           (d : dstatelet) (msg : seq nat) :=
  Hn this n /\ exists (C : coh d), prec (getSt this C) n msg.

Lemma send_safe_coh this to d m : send_safe this to d m -> coh d.

Lemma send_this_in this to : Hn this to -> this \in nodes.

Lemma send_safe_in this to d m : send_safe this to d m ->
                                 this \in nodes /\ to \in nodes.

Definition send_step (this to : nid) (d : dstatelet)
           (msg : seq nat)
           (pf : send_safe this to d msg) :=
  let C := send_safe_coh pf in 
  let q := getSt this C in
  Some (mkLocal (send_step_fun q to stag (head 0 msg))). 

Lemma send_step_coh : s_step_coh_t coh stag send_step.

Lemma send_safe_def this to d msg :
      send_safe this to d msg <->
      exists b pf, @send_step this to d msg pf = Some b.

Definition qsend_trans :=
  SendTrans send_safe_coh send_safe_in send_safe_def send_step_coh.

End GenericQuerySendTransitions.

Definition send_req_prec (q : qstate) (to : nid) (payload : seq nat) :=
  payload = [::(fresh_id q.1)].

Lemma send_req_prec_safe : prec_safe treq send_req_prec.

Definition send_resp_prec (q : qstate) (to : nid) (payload : seq nat) :=
  exists rid d, payload = rid :: (serialize d) /\
                (to, rid) \in q.2.

Lemma send_resp_prec_safe : prec_safe tresp send_resp_prec.

Definition qsend_req  := qsend_trans send_req_prec_safe.
Definition qsend_resp := qsend_trans send_resp_prec_safe.

Section GenericQueryReceiveTransitions.

Variable rtag : nat.
Variable rc_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool.

Definition receive_step : receive_step_t coh :=
  fun this (from : nid) (msg : seq nat) d (pf : coh d) (pt : this \in nodes) =>
    let q := getSt this pf in
    mkLocal (receive_step_fun q from rtag (head 0 msg)).

Lemma receive_step_coh : r_step_coh_t rc_wf rtag receive_step.

Definition qrecv_trans := ReceiveTrans receive_step_coh.

End GenericQueryReceiveTransitions.

Definition query_msg_wf d (C : coh d) (this from : nid) :=
  [pred m : TaggedMessage | (tag m == treq) || (tag m == tresp)].

Definition qrecv_req  := qrecv_trans treq query_msg_wf.
Definition qrecv_resp := qrecv_trans tresp query_msg_wf.

Section Protocol.

Definition query_sends := [:: qsend_req; qsend_resp ].

Definition query_receives := [:: qrecv_req; qrecv_resp ].

Program Definition QueryProtocol l : protocol :=
  @Protocol _ l _ query_sends query_receives _ _.

End Protocol.
End QueryProtocol.

Module Exports.
Section Exports.

Definition treq := treq.
Definition tresp := tresp.

Definition getSt := getSt.
Definition getStK := getStK.
Definition getStE := getStE.
Definition getStE' := getStE'.

Definition qsend_req := qsend_req.
Definition qsend_resp := qsend_resp.
Definition qrecv_req := qrecv_req.
Definition qrecv_resp := qrecv_resp.

Definition query_msg_wf := query_msg_wf.
Definition qst := st.

Definition QueryProtocol := QueryProtocol.

End Exports.
End Exports.

End QueryProtocol.

Export QueryProtocol.Exports. *)
(* QueryHooked:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq path.
Require Import Eqdep.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely Actions.
From DiSeL
Require Import SeqLib QueryProtocol NewStatePredicates Actions.
From DiSeL
Require Import Injection Process Always HoareTriples InferenceRules While.

Section QueryHooked.

Variables (lq : Label) (pc : protocol).
Variable Data : Type.
Variable qnodes : seq nat.
Variable serialize : Data -> seq nat.
Variable deserialize : seq nat -> Data.
Hypothesis ds_inverse : left_inverse serialize deserialize.
Definition pq := QueryProtocol qnodes serialize lq.

Variable core_state_to_data : nid -> heap -> Data -> Prop.

Hypothesis core_state_to_data_inj :
  forall n h d d', core_state_to_data n h d -> core_state_to_data n h d' -> d = d'.

Definition query_hook : hook_type :=
  fun hc hq ms to => 
    forall n rid d, ms = rid :: serialize d -> core_state_to_data n hc d.

Definition query_hookz := (1, (plab pc), (plab pq, tresp)) \\-> query_hook.

Definition W : world := ((plab pc \\-> pc) \+ (plab pq \\-> pq), query_hookz).

Hypothesis Lab_neq: lq != (plab pc).

Lemma W_valid : valid W.

Lemma W_complete : hook_complete W.

Lemma W_dom : dom W.1 =i [:: plab pc; lq].

Lemma eqW : 
  W = (plab pc \\-> pc, Unit) \+ (plab pq \\-> pq, Unit) \+ (Unit, query_hookz).

Lemma eqW' : 
  W = (plab pc \\-> pc, Unit) \+ ((plab pq \\-> pq, Unit) \+ (Unit, query_hookz)).

Lemma injW : injects (plab pc \\-> pc, Unit) W query_hookz.

Lemma labC : plab pc \in dom W.1.

Lemma labQ : lq \in dom W.1.

Lemma injWQ : inj_ext injW = (lq \\-> pq, Unit).

Lemma prEqC : getProtocol W (plab pc) = pc.

Lemma prEqQ : getProtocol W lq = pq.

Lemma prEqQ' : getProtocol (lq \\-> pq, Unit) lq = pq.

Variable this : nid.
Hypothesis this_in_qnodes: this \in qnodes.

Notation getSc s := (getStatelet s (plab pc)).
Notation getLc s := (getLocal this (getSc s)).
Notation getLc' s n := (getLocal n (getSc s)).

Notation getSq s := (getStatelet s (plab pq)).
Notation getLq s := (getLocal this (getSq s)).

Definition holds_res_perms d n (pp : nat -> Prop) :=
  exists (reqs resp : seq (nid * nat)),
    getLocal n d = qst :-> (reqs, resp) /\
    forall rn, (this, rn) \in resp -> pp rn.

Definition request_msg (t: nat) (_ : seq nat) :=  t == treq.
Definition response_msg (t: nat) (_ : seq nat) := t == tresp.

Definition query_init_state (to : nid) s :=
  [/\ to \in qnodes,
      holds_res_perms (getSq s) to (fun _ : nat => false),
      no_msg_from_to' this to request_msg (dsoup (getSq s)) &
      no_msg_from_to' to this response_msg (dsoup (getSq s))].    

Lemma query_init_step' z to s s' :
  this != z -> query_init_state to s ->
  network_step (lq \\-> pq, Unit) z s s' -> query_init_state to s'.

Lemma query_init_rely' to s s' :
  query_init_state to s ->
  network_rely (lq \\-> pq, Unit) this s s' -> query_init_state to s'.

Lemma query_init_rely to s s2 :
  query_init_state to s ->
  network_rely W this s s2 -> query_init_state to s2.

Definition msg_just_sent d (reqs resp : seq (nid * nat)) req_num to :=
  [/\ getLocal this d = qst :-> (reqs, resp),
   no_msg_from_to' to this response_msg (dsoup d), 
   (to, req_num) \in reqs, 
   msg_spec' this to treq ([:: req_num]) (dsoup d) &
   holds_res_perms d to (fun _ => false)].

Definition msg_received d (reqs resp : seq (nid * nat)) req_num to :=
  [/\ getLocal this d = qst :-> (reqs, resp),
   (to, req_num) \in reqs,
   no_msg_from_to' this to request_msg (dsoup d),
   no_msg_from_to' to this response_msg (dsoup d) &
   holds_res_perms d to (fun rn => rn == req_num)].

Definition msg_responded d (reqs resp : seq (nid * nat)) req_num to data :=
  [/\ getLocal this d = qst :-> (reqs, resp),
   (to, req_num) \in reqs,
   no_msg_from_to' this to request_msg (dsoup d),
   msg_spec' to this tresp (req_num :: serialize data) (dsoup d) &
   holds_res_perms d to (fun _ => false)].

Variable local_indicator : Data -> Pred heap.

Hypothesis core_state_stable_step : forall z s data s' n,
  this != z -> network_step (plab pc \\-> pc, Unit) z s s' ->
  n \in qnodes ->
  local_indicator data (getLc s) ->
  core_state_to_data n (getLc' s n) data  -> 
  core_state_to_data n (getLc' s' n) data.

Lemma prEqC' : (getProtocol (plab pc \\-> pc, Unit) (plab pc)) = pc.
  
Lemma core_state_stable_step_W s data s' z :
  this != z ->
  network_step W z s s' ->
  z \in qnodes ->
  local_indicator data (getLc s) ->
  core_state_to_data z (getLc' s z) data -> 
  core_state_to_data z (getLc' s' z) data.

Lemma core_state_stable s data s' z :
  network_rely W this s s' ->
  z \in qnodes ->
  local_indicator data (getLc s) ->
  core_state_to_data z (getLc' s z) data -> 
  core_state_to_data z (getLc' s' z) data.

Lemma cohQ s : Coh W s -> (QueryProtocol.QCoh qnodes) (getSq s).

Lemma send_lq_case1 req_num reqs resp to s
  (N : this != to) (Qn : to \in qnodes) 
  (M : msg_just_sent (getSq s) reqs resp req_num to)
  to' msg (n : heap) (C : Coh W s) (st : send_trans (Protocols.coh pq))

Lemma send_lq_case3 req_num data reqs resp to s
  (N : this != to) (Qn : to \in qnodes) (H : core_state_to_data to (getLc' s to) data)
  (L : local_indicator data (getLc' s this))
  (M : msg_responded (getSq s) reqs resp req_num to data)
  to' msg (n : heap) (C : Coh W s) (st : send_trans (Protocols.coh pq))

Lemma send_lq_all_cases req_num data reqs resp to s
  (N : this != to) (Qn : to \in qnodes) (H : core_state_to_data to (getLc' s to) data)
  (L : local_indicator data (getLc' s this))
  (M : [\/ msg_just_sent (getSq s) reqs resp req_num to, msg_received (getSq s) reqs resp req_num to
        | msg_responded (getSq s) reqs resp req_num to data])
  to' msg (n : heap) (C : Coh W s) (st : send_trans (Protocols.coh (getProtocol W (plab pq))))

Lemma send_lc_all_cases req_num data reqs resp to s
  (N : this != to) (Qn : to \in qnodes) (H : core_state_to_data to (getLc' s to) data)
  (L : local_indicator data (getLc' s this))
  (M : [\/ msg_just_sent (getSq s) reqs resp req_num to, msg_received (getSq s) reqs resp req_num to
        | msg_responded (getSq s) reqs resp req_num to data])
  to' msg (n : heap) (C : Coh W s) (st : send_trans (Protocols.coh (getProtocol W (plab pc))))

Lemma recv_lq_case1 req_num reqs resp to s
  (N : this != to) (Qn : to \in qnodes)
  (M : msg_just_sent (getSq s) reqs resp req_num to)
  i from msg (C : Coh W s) (C' : (coh pq) (getSq s))
  (pf : to \in nodes pq (getSq s))
  (rt : receive_trans (Protocols.coh pq)) : 

Lemma recv_lq_case2 req_num reqs resp to s
  (N : this != to) (Qn : to \in qnodes)
  (M : msg_received (getSq s) reqs resp req_num to)
  i from msg (C : Coh W s) (C' : (coh pq) (getSq s))
  (pf : to \in nodes pq (getSq s))
  (rt : receive_trans (Protocols.coh pq)) : 

Lemma recv_lq_case3 req_num reqs resp to s data
  (N : this != to) (Qn : to \in qnodes)
  (M : msg_responded (getSq s) reqs resp req_num to data)
  (H : core_state_to_data to (getLc' s to) data)
  (L : local_indicator data (getLc' s this))
  i from msg (C : Coh W s) (C' : (coh pq) (getSq s))
  (pf : to \in nodes pq (getSq s))
  (rt : receive_trans (Protocols.coh pq)) : 

Definition msg_story s req_num to data reqs resp :=
  [/\ to \in qnodes,
     core_state_to_data to (getLc' s to) data,
     local_indicator data (getLc s) & 
     let: d := getSq s in
     [\/ msg_just_sent d reqs resp req_num to,
      msg_received d reqs resp req_num to |
      msg_responded d reqs resp req_num to data]].

Lemma msg_story_step' req_num data reqs resp to s s' :
  this != to ->
  msg_story s req_num to data reqs resp ->
  network_step W to s s' ->
  msg_story s' req_num to data reqs resp.

Lemma msg_story_step req_num to data reqs resp z s s' :
  this != z ->
  msg_story s req_num to data reqs resp ->
  network_step W z s s' ->
  msg_story s' req_num to data reqs resp.

Lemma msg_story_rely req_num to data reqs resp s s2 :
  msg_story s req_num to data reqs resp ->
  network_rely W this s s2 ->
  msg_story s2 req_num to data reqs resp.

Program Definition read_request_id to :
  {rrd : seq (nid * nat) * seq (nid * nat) * Data}, DHT [this, W]
   (fun i =>
      let: (reqs, resp, data) := rrd in 
      [/\ getLq i = qst :-> (reqs, resp),
       local_indicator data (getLc i),
       query_init_state to i &
       core_state_to_data to (getLc' i to) data],
   fun (r : nat) m => 
     let: (reqs, resp, data) := rrd in 
     [/\ getLq m = qst :-> (reqs, resp),
       local_indicator data (getLc m),
       query_init_state to m,
       core_state_to_data to (getLc' m to) data &                                              
       r = fresh_id reqs]) :=
  Do _ (act (@skip_action_wrapper W this lq pq prEqQ _
                                (fun s pf => fresh_id (getSt this pf).1))).
    
Program Definition send_req rid to :=
  act (@send_action_wrapper W pq this (plab pq) prEqQ
                            (qsend_req qnodes) _ [:: rid] to).

Program Definition send_req_act (rid : nat) (to : nid) :
  {rrd : seq (nid * nat) * seq (nid * nat) * Data}, DHT [this, W]
   (fun i =>
      let: (reqs, resp, data) := rrd in 
      [/\ getLq i = qst :-> (reqs, resp),
       local_indicator data (getLc i),
       rid = fresh_id reqs,
       query_init_state to i &
       core_state_to_data to (getLc' i to) data],
   fun (r : seq nat) m => 
     let: (reqs, resp, data) := rrd in 
     [/\ getLq m = qst :-> ((to, rid) :: reqs, resp),
      local_indicator data (getLc m),
      r = [:: rid],
      msg_story m rid to data ((to, rid) :: reqs) resp &
      core_state_to_data to (getLc' m to) data])
  := Do (send_req rid to).

Program Definition tryrecv_resp (rid : nat) (to : nid) :=
  act (@tryrecv_action_wrapper W this
      (fun k n t (b : seq nat) => [&& k == lq, n == to, t == tresp,
                                   head 0 b == rid & to \in qnodes]) _).

Definition recv_resp_cond (res : option Data): bool :=
  if res is Some v then false else true.

Definition recv_resp_inv (rid : nat) to
           (rrd : (seq (nid * nat) * seq (nid * nat) * Data)) :
  cont (option Data) :=
  fun res i =>
    let: (reqs, resp, data) := rrd in
    if res is Some d
    then [/\ getLq i = qst :-> (reqs, resp),
          local_indicator data (getLc i),
          query_init_state to i,
          core_state_to_data to (getLc' i to) data &
          d = data]
    else [/\ getLq i = qst :-> ((to, rid) :: reqs, resp),
          local_indicator data (getLc i) &
          msg_story i rid to data ((to, rid) :: reqs) resp].

Program Definition receive_resp_loop (rid : nat) to :
  {(rrd : (seq (nid * nat) * seq (nid * nat) * Data))}, DHT [this, W]
  (fun i => let: (reqs, resp, data) := rrd in
    [/\ getLq i = qst :-> ((to, rid) :: reqs, resp),
     local_indicator data (getLc i),
     msg_story i rid to data ((to, rid) :: reqs) resp &
     core_state_to_data to (getLc' i to) data],
  fun res m =>
    let: (reqs, resp, data) := rrd in
    exists d, res = Some d /\
     [/\ getLq m = qst :-> (reqs, resp),
      local_indicator data (getLc m),
      query_init_state to m,
      core_state_to_data to (getLc' m to) data &
      d = data]) := 
  Do _ (@while this W _ _ recv_resp_cond (recv_resp_inv rid to) _
         (fun _ => Do _ (
           r <-- tryrecv_resp rid to;
             match r with
             | Some (from, tg, body) =>
               ret _ _ (Some (deserialize (behead body)))             
             | None => ret _ _ None
             end              
         )) None).

Variable default_data : Data.

Program Definition request_data_program to :
  {rrd : seq (nid * nat) * seq (nid * nat) * Data}, DHT [this, W]
   (fun i =>
      let: (reqs, resp, data) := rrd in 
      [/\ getLq i = qst :-> (reqs, resp),
       local_indicator data (getLc i),
       query_init_state to i &
       core_state_to_data to (getLc' i to) data],
    fun res m =>
      let: (reqs, resp, data) := rrd in
      [/\ getLq m = qst :-> (reqs, resp),
       local_indicator data (getLc m),
       query_init_state to m,
       core_state_to_data to (getLc' m to) data &
       res = data]) :=
  Do _ (
     rid <-- read_request_id to;
     send_req_act rid to;;
     r <-- receive_resp_loop rid to;
     ret _ _ (if r is Some d then d else default_data) 
     ).

End QueryHooked. *)

Section QueryPlusTPC.

Variables (lc lq : Label).
Variables (cn : nid) (pts : seq nid).
Hypothesis Lab_neq: lq != lc.
Hypothesis Hnin : cn \notin pts.
Hypothesis Puniq : uniq pts.
Hypothesis PtsNonEmpty : pts != [::].

Definition pc : protocol := TwoPhaseInductiveProof.tpc_with_inv lc [::] Hnin.
Definition Data : Type := (nat * Log).
Definition qnodes := cn :: pts.

Variable serialize : Data -> seq nat.
Variable deserialize : seq nat -> Data.
Hypothesis ds_inverse : left_inverse serialize deserialize.

Definition local_indicator (d : Data) :=
  [Pred h | h = st :-> (d.1, CInit) \+ log :-> d.2].

Definition core_state_to_data n h (d : Data)  :=
  if n == cn
  then h = st :-> (d.1, CInit) \+ log :-> d.2
  else h = st :-> (d.1, PInit) \+ log :-> d.2.                       

Lemma core_state_to_data_inj n h d d' :
  core_state_to_data n h d -> core_state_to_data n h d' -> d = d'.
Proof.
rewrite/core_state_to_data.
case:ifP=>_ E; rewrite E ![_ \+ log :-> _]joinC=>{E}E.
- have V: valid (log :-> d.2 \+ st :-> (d.1, CInit)).
  - by case: validUn=>//k; rewrite !domPt !inE/==>/eqP<-. 
  case: (hcancelV V E)=>E2=>{V E}V E. 
  case: (hcancelPtV V E)=>E1.
  by rewrite [d]surjective_pairing [d']surjective_pairing E1 E2.
have V: valid (log :-> d.2 \+ st :-> (d.1, PInit)).
- by case: validUn=>//k; rewrite !domPt !inE/==>/eqP<-. 
case: (hcancelV V E)=>E2=>{V E}V E. 
case: (hcancelPtV V E)=>E1.
by rewrite [d]surjective_pairing [d']surjective_pairing E1 E2.
Qed.

Lemma cn_in_qnodes : cn \in qnodes.
Proof. by rewrite inE eqxx. Qed.

Notation getLc s n := (getLocal n (getStatelet s lc)).
Notation cn_agree := TwoPhaseInductiveInv.cn_log_agreement.

Lemma core_state_stable_step z s d s' n :
  cn != z -> network_step (mkWorld pc) z s s' ->
  n \in qnodes ->
  local_indicator d (getLc s cn) ->
  core_state_to_data n (getLc s n) d  -> 
  core_state_to_data n (getLc s' n) d.
Proof.
move=>N S Qn L H0; case: (step_coh S)=>C1 C2.
have R: network_rely (plab pc \\-> pc, Unit) cn s s' by exists 1, z, s'. 
rewrite -(rely_loc' _ R) in L.
case: C2=>V1 V2 _ D /(_ lc)/=; rewrite prEq=>/=[[C2] Inv].
case/orP: Qn=>[|P]; first by move/eqP=>Z; subst n; rewrite /core_state_to_data eqxx.  
move: (@cn_agree lc cn pts [::] Hnin (getStatelet s' lc) d.1 d.2 n C2 L Inv P)=>H. 
rewrite /core_state_to_data; case:ifP=>//; by move=>/eqP Z; subst n. 
Qed.

Definition W := QueryHooked.W lq pc Data qnodes serialize core_state_to_data.

Notation loc_qry s := (getLocal cn (getStatelet s lq)).
Notation loc_tpc' s n := (getLocal n (getStatelet s lc)).
Notation loc_tpc s := (loc_tpc' s cn).
Notation qry_init := (query_init_state lq Data qnodes serialize cn).

Lemma loc_imp_core s d n :
  Coh W s -> n \in qnodes -> local_indicator d (loc_tpc s) ->
  core_state_to_data n (loc_tpc' s n) d.
Proof.
move=>C Nq E.
case/orP: Nq=>[|P]; first by move/eqP=>z; subst n; rewrite /core_state_to_data eqxx. 
case: (C)=>_ _ _ _/(_ lc); rewrite prEqC//=; case=> C2 Inv.
move: (@cn_agree lc cn pts [::] Hnin (getStatelet s lc) d.1 d.2 n C2 E Inv P)=>->.
rewrite /core_state_to_data; case:ifP=>//.
move=>/eqP Z; subst n; move/negbTE: Hnin=>Z.
suff X: cn \in pts by rewrite X in Z.
done.
Qed.

Lemma find_empty l i : l \notin dom i -> getStatelet i l = empty_dstatelet.
Proof. by rewrite /getStatelet; case: dom_find=>//->. Qed.
       
Definition cn_request_log :=
  request_data_program _ pc _ _ _ _ ds_inverse _ core_state_to_data_inj Lab_neq _ cn_in_qnodes
                       local_indicator core_state_stable_step (0, [::]).

Definition coordinator ds :=
  with_inv (TwoPhaseInductiveProof.ii _ _ _)
           (coordinator_loop_zero lc cn pts [::] Hnin Puniq PtsNonEmpty ds).

Program Definition coordinate_and_query (ds : seq data) to :
  {rr : seq (nid * nat) * seq (nid * nat)}, DHT [cn, W]
  (fun i =>
      let: (reqs, resp) := rr in 
     [/\ loc_tpc i = st :-> (0, CInit) \+ log :-> ([::] : seq (bool * data)),
        to \in qnodes,
        loc_qry i = qst :-> (reqs, resp) &
        qry_init to i],
   fun (res : Data) m =>
     let: (reqs, resp) := rr in
     exists (chs : seq bool),
       let: d := (size ds, seq.zip chs ds) in
       [/\ loc_tpc m = st :-> (d.1, CInit) \+ log :-> d.2,
        loc_qry m = qst :-> (reqs, resp),
        qry_init to m &
        res = d]) 
  := Do _ (
      iinject (coordinator ds);;    
      cn_request_log to).

Next Obligation.
by exact : (query_hookz lq pc Data qnodes serialize core_state_to_data).
Defined.

Next Obligation.
exact: (injW lq pc Data qnodes serialize core_state_to_data Lab_neq).
Defined.

Next Obligation.
apply:ghC=>i0[rq rs][P1 P2 P3 P4]C0; apply: step.

move: (C0)=>CD0; rewrite /W eqW in CD0; move: (coh_hooks CD0)=>{CD0}CD0.
case: (coh_split CD0); try apply: hook_complete0.
move=>i1[j1][C1 D1 Z].
subst i0; apply: inject_rule=>//.
have E : loc_tpc (i1 \+ j1) = loc_tpc i1 by rewrite (locProjL CD0 _ C1)// domPt inE andbC eqxx.
rewrite E{E} in P1.
apply: with_inv_rule'. 
apply: call_rule=>//_ i2 [chs]L2 C2 Inv j2 CD2/= R.

have E : loc_qry (i1 \+ j1) = loc_qry j1 by rewrite (locProjR CD0 _ D1)// domPt inE andbC eqxx.
rewrite E {E} -(rely_loc' _ R) in P3.
case: (rely_coh R)=>_ D2.
rewrite /W eqW in CD2; move: (coh_hooks CD2)=>{CD2}CD2.
rewrite /mkWorld/= in C2.
have C2': i2 \In Coh (plab pc \\-> pc, Unit).
- split=>//=.
  + by rewrite /valid/= valid_unit validPt.
  + by apply: (cohS C2).
  + by apply: hook_complete0.  
  + by move=>z; rewrite -(cohD C2) !domPt.
  move=>l; case B: (lc == l).
  + move/eqP:B=>B; subst l; rewrite /getProtocol findPt; split=>//.
    by move: (coh_coh lc C2); rewrite /getProtocol findPt.
  have X: l \notin dom i2 by rewrite -(cohD C2) domPt inE; move/negbT: B.
  rewrite /getProtocol/= (find_empty _ _ X).
  have Y: l \notin dom (lc \\-> pc) by rewrite domPt inE; move/negbT: B.
  by case: dom_find Y=>//->_. 
have D2': j2 \In Coh (lq \\-> pq lq Data qnodes serialize, Unit)
    by apply: (cohUnKR CD2 _); try apply: hook_complete0.

rewrite -(locProjL CD2 _ C2') in L2; last by rewrite domPt inE eqxx.
rewrite -(locProjR CD2 _ D2') in P3; last by rewrite domPt inE eqxx.
clear C2 D2.

rewrite injWQ in R.
rewrite /query_init_state/= in P4.
rewrite (locProjR CD0 _ D1) in P4; last by rewrite domPt inE eqxx.
have Q4: qry_init to j2.
- by apply: (query_init_rely' lq Data qnodes serialize cn to _ _ P4 R).
clear P4.
rewrite /query_init_state/= -(locProjR CD2 _ D2') in Q4;
  last by rewrite domPt inE eqxx.

apply (gh_ex (g:=(rq, rs, (size ds, seq.zip chs ds)))).
apply: call_rule=>//=; last by move=>d m[->->T1 T2->]_; eexists _. 
move=>CD2'; split=>//.
case/orP: P2=>[|P]; first by move/eqP=>Z; subst to; rewrite /core_state_to_data eqxx.  
rewrite !(locProjL CD2 _ C2') in L2 *;
  last by rewrite domPt inE eqxx.
move: (coh_coh lc C2'); rewrite prEq; case=>C3 _.
rewrite /core_state_to_data; case:ifP=>//[|_]; first by move=>/eqP Z; subst to. 
by apply: (@cn_agree lc cn pts [::] Hnin _ _ _ to C3 _ Inv).
Qed.

End QueryPlusTPC.
