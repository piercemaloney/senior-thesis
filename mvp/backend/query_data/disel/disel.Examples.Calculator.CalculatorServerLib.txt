From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.
(* Freshness:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Keys.
Variables (K : ordType) (V : Type) (U : union_map_class K V).
Implicit Types (k : K) (v : V) (f : U).

Lemma keys_last_mono f1 f2 k :
        path oleq k (dom f1) ->
        path oleq k (dom f2) ->
        (forall x, x \in dom f1 -> x \in dom f2) ->
        oleq (last k (dom f1)) (last k (dom f2)).

End Keys.

Section FreshLastKey.
Variable V : Type.
Implicit Type f : union_map [ordType of nat] V.

Definition last_key f := last 0 (dom f).

Lemma last_key0 : last_key Unit = 0.

Lemma last_key_dom f : valid f -> last_key f \notin dom f -> f = Unit.

Lemma dom_last_key f :  valid f -> ~~ empb f -> last_key f \in dom f.

Lemma last_key_max f x : x \in dom f -> x <= last_key f.

Lemma max_key_last f x :
        x \in dom f -> {in dom f, forall y, y <= x} -> last_key f = x.

Lemma last_keyPt (x : nat) v : last_key (x \\-> v) = x.

Lemma hist_path f : path oleq 0 (dom f).

Lemma last_key_mono f1 f2 :
        {subset dom f1 <= dom f2} -> last_key f1 <= last_key f2.

Lemma last_keyfUn f1 f2 :
        valid (f1 \+ f2) -> last_key f1 <= last_key (f1 \+ f2).

Lemma last_keyUnf f1 f2 :
        valid (f1 \+ f2) -> last_key f2 <= last_key (f1 \+ f2).

Definition fresh f := (last_key f).+1.

Lemma dom_ordfresh f x : x \in dom f -> x < fresh f.

Lemma dom_freshn f n : fresh f + n \notin dom f.

Lemma dom_fresh f : fresh f \notin dom f.

Lemma valid_fresh f v : valid (f \+ fresh f \\-> v) = valid f.

Lemma valid_fresh' f v i w :
  valid (f \+ i \\-> w) ->
  valid (f \+ fresh (f \+ i \\-> w) \\-> v).

Lemma last_fresh f v : valid f -> last_key (f \+ fresh f \\-> v) = fresh f.

End FreshLastKey. *)
(* State:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness DepMaps EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section TaggedMessages. 

  Structure TaggedMessage :=
    TMsg {
        tag: nat;
                tms_cont :> seq nat          
      }.

End TaggedMessages.

Section Shared.

  Definition Label := [ordType of nat].

  Structure msg (mtype : Type) :=
    Msg {content  : mtype;
         from     : nat;
         to       : nat;
         active   : bool }.

  Definition mid := [ordType of nat].

  Definition soup : Type :=
    union_map mid (msg (TaggedMessage)).

  Variables (s: soup) (V: valid s).

  Definition post_msg m : soup * mid :=
    let: f := fresh s in (s \+ f \\-> m, f).

  Lemma post_valid m :  valid (post_msg m).1.

  Lemma post_fresh m : (post_msg m).2 \notin dom s.

  Definition mark_msg T (m : msg T) : msg T :=
    Msg (content m) (from m) (to m) false.

  Definition consume_msg (s : soup) (id : mid) : soup :=
    let: mr := find id s in
    if mr is Some m then upd id (mark_msg m) s else s.

  Definition is_active (id : mid) :=
    exists m, find id s = Some m /\ active m.

  Definition is_consumed (id : mid) :=
    exists m, find id s = Some m /\ ~~ active m.

  Lemma find_consume s' (id: mid) m:
    valid s' -> find id s' = Some m ->
    find id (consume_msg s' id) = Some (mark_msg m).

  Lemma find_mark m s' msg :
    valid s' -> find m (consume_msg s' m) = Some msg ->
    exists msg', find m s' = Some msg' /\ msg = mark_msg msg'.

  Lemma mark_other m m' s' :
    valid s' -> m' == m = false -> find m' (consume_msg s' m) = find m' s'.

  Lemma consume_valid s' m : valid s' -> valid (consume_msg s' m).

  Lemma consumeUn (s': soup) (i : mid) mm
        (j : mid) : valid (s' \+ i \\-> mm) ->
    consume_msg (s' \+ i \\-> mm) j = 
    if i == j then s' \+ i \\-> mark_msg mm
    else (consume_msg s' j) \+ (i \\-> mm).

  Notation "'{{' m 'in' s 'at' id '}}'" := (find id s = Some m).
  Notation "'{{' m 'in' s '}}'" := (exists id, {{m in s at id}}).

End Shared.

Section Local.

  Variable U : Type.

  Definition nid := nat.

  Definition lstate_type := union_map [ordType of nid] U.

End Local.

Section Statelets.

  Structure dstatelet  :=
    DStatelet {
                dstate     : lstate_type heap;
        dsoup      : soup
    }.

  Fixpoint empty_lstate (ns : seq nid) :=
    if ns is n :: ns'
    then n \\-> Heap.empty \+ (empty_lstate ns')
    else  Unit.
    
  Definition empty_dstatelet : dstatelet :=
    @DStatelet (empty_lstate [::]) Unit.

  Lemma valid_mt_soup : valid (dsoup empty_dstatelet).

  Lemma valid_mt_state  : valid (dstate empty_dstatelet).

  Lemma mt_nodes : dom (dstate empty_dstatelet) =i [::].

End Statelets.

Module StateGetters.
Section StateGetters.

Definition state := union_map Label dstatelet.

Definition getStatelet (s: state) (i : Label) : dstatelet :=
  match find i s with
  | Some d => d
  | None => empty_dstatelet
  end.

End StateGetters.
End StateGetters.

Export StateGetters. *)
(* EqTypeX:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module EqualityX.

Definition axiom T (e : rel T) := forall x y, reflect (x = y) (e x y).

Structure mixin_of T := Mixin {op : rel T; _ : axiom op}.
Notation class_of := mixin_of (only parsing).

Section ClassDef.

Structure type := Pack {sort; _ : class_of sort; _ : Type}.
Local Coercion sort : type >-> Sortclass.
Variables (T : Type) (cT : type).

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Definition pack c := @Pack T c T.
Definition clone := fun c & cT -> T & phant_id (pack c) cT => pack c.

End ClassDef.

Module Exports.
Coercion sort : type >-> Sortclass.
Notation eqTypeX := type.
Notation EqMixinX := Mixin.
Notation EqTypeX T m := (@pack T m).
End Exports.

End EqualityX.
Export EqualityX.Exports.

Section EqualityConversion.

Variable U: eqTypeX.
Definition eq_opX T := EqualityX.op (EqualityX.class T).

Lemma eqxP : Equality.axiom (@eq_opX U).

Canonical eqMixinX := EqMixin eqxP.
Canonical eqTypeX' := EqType U eqMixinX.                                   

End EqualityConversion. *)
(* Protocols:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Definition getLocal (n : nid) (d : dstatelet) : heap :=
  match find n (dstate d) with
  | Some h => h
  | None => Unit
  end.

Lemma getLocalU n m d s :
  valid (dstate d) -> m \in dom (dstate d) ->
  getLocal n d = (getLocal n {| dstate := upd m (getLocal m d) (dstate d); dsoup := s |}).
        
Module Coherence.

Section CohDef.

Variable nodes: dstatelet -> pred nid.

Notation protocol_soup  := (soup (TaggedMessage)).

Structure mixin_of (coh : Pred dstatelet) := Mixin {
    _   : forall d, coh d -> valid (dstate d);
    _   : forall d, coh d -> valid (dsoup d);
    _   : forall d, coh d -> dom (dstate d) =i nodes d;
}.

End CohDef.

Section ClassDef.

Variable nodes: dstatelet -> pred nid.

Notation class_of := mixin_of (only parsing).

Structure cohpred : Type := Pack {sort : dstatelet -> Prop;
                                  _ : class_of nodes sort}.
Local Coercion sort : cohpred >-> Funclass.

Variables (T : dstatelet -> Prop) (cT : cohpred).

Definition class := let: Pack _ c as cT' := cT
                    return class_of nodes cT' in c.

Definition pack c := @Pack T c.
Definition clone := fun c & T = cT & phant_id (pack c) cT => pack c. 

End ClassDef.

Module Exports.
Section Exports.

Variable Lstate : Type.
Variable nodes: dstatelet -> pred nid.

Coercion sort : cohpred >-> Funclass.
Definition cohpred := cohpred.
Definition CohPredMixin := Mixin.
Definition CohPred T m := (@pack T m).

Notation "[ 'cohPredMixin' 'of' T ]" := (class _ : mixin_of T)
  (at level 0, format "[ 'cohPredMixin'  'of'  T ]") : form_scope.
Notation "[ 'cohpred' 'of' T 'for' C ]" := (@clone T C _ (erefl _) id)
  (at level 0, format "[ 'cohpred'  'of'  T  'for'  C ]") : form_scope.
Notation "[ 'cohpred' 'of' T ]" := (@clone T _ _ (erefl _) id)
  (at level 0, format "[ 'cohpred'  'of'  T ]") : form_scope.

Canonical cohpred_PredType := mkPredType (@sort nodes).

Variable coh : cohpred nodes.

Lemma cohVl d : d \In coh -> valid (dstate d).

Lemma cohVs d : d \In coh -> valid (dsoup d).

Lemma cohDom d : d \In coh -> dom (dstate d) =i nodes d.

End Exports.
End Exports.
End Coherence.

Export Coherence.Exports.

Module Transitions.
Section Transitions.

Variable nodes: dstatelet -> pred nid.

Variable coh : cohpred nodes.

Notation lstate := heap%type.

Definition send_step_t (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop) :=
  forall (this to : nid) (d : dstatelet)
         (msg : seq nat) (pf : send_safe this to d msg),
    option lstate.

Definition s_step_coh_t t_snd
           (send_safe : nid -> nid -> dstatelet -> seq nat -> Prop)
           (send_step : send_step_t send_safe) :=
  forall this to d msg (pf : send_safe this to d msg) b,
    let: f := dstate d in
    let: s := dsoup d  in
    Some b = @send_step this to d msg pf ->         
    let: f' := upd this b f in
    let: tms := TMsg t_snd msg in 
    let: s' := (post_msg s (Msg tms this to true)).1 in 
    coh (DStatelet f' s').

Structure send_trans := SendTrans
    {
      t_snd : nat;

      send_safe : nid -> nid -> dstatelet -> seq nat -> Prop;
      s_safe_coh : forall this to d m, send_safe this to d m -> coh d;
      s_safe_in  : forall this to d m, send_safe this to d m ->
                                       this \in nodes d /\ to \in nodes d;  

      send_step : send_step_t send_safe;

      s_safe_def : forall this to d msg,
          send_safe this to d msg <->
          exists b pf, @send_step this to d msg pf = Some b;

      s_step_coh : s_step_coh_t t_snd send_step 
    }.

Definition receive_step_t :=
  forall (this from: nid) (m : seq nat)
         (d : dstatelet) (pf : coh d)
         (pf' : this \in nodes d), lstate.

Definition r_step_coh_t (msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool)
           t_rcv (receive_step : receive_step_t) :=
  forall (d : dstatelet) from this i (C : coh d) (pf' : this \in nodes d)
         (m : TaggedMessage),
    let: f := dstate d in
    let: s := dsoup d  in
    this \in dom f ->
    find i s = Some (Msg m from this true) ->
    msg_wf d C this from m -> tag m = t_rcv ->
    let: loc' := receive_step this from m d C pf' in
    let: s'' := consume_msg s i in
    let: f' := upd this loc' f in
    coh (DStatelet f' s'').

Structure receive_trans := ReceiveTrans
    {
      t_rcv : nat;

      msg_wf : forall d, coh d -> nid -> nid -> TaggedMessage -> bool;

      receive_step : receive_step_t;

      r_step_coh : r_step_coh_t msg_wf t_rcv receive_step
    }.

End Transitions.

Module Exports.

Definition SendTrans := SendTrans.
Definition send_trans := send_trans.
Definition ReceiveTrans := ReceiveTrans.
Definition receive_trans := receive_trans.

Definition t_snd := t_snd.
Definition send_safe := send_safe.
Definition send_step := send_step.
Definition send_step_t := send_step_t.

Definition s_safe_coh := s_safe_coh.
Definition s_safe_in := s_safe_in.
Definition s_safe_def := s_safe_def.
Definition s_step_coh := s_step_coh.
Definition s_step_coh_t := s_step_coh_t.

Definition t_rcv := t_rcv.
Definition msg_wf := msg_wf.

Definition receive_step := receive_step.
Definition receive_step_t := receive_step_t.
Definition r_step_coh := r_step_coh.
Definition r_step_coh_t := r_step_coh_t.

End Exports.

End Transitions.

Export Transitions.Exports.

Module Protocols.
Section Protocols.

Definition snd_tags {nodes} {coh : cohpred nodes}
           (sts : seq (send_trans coh)) := 
  map (@t_snd nodes _) sts.

Definition rcv_tags {nodes} {coh : cohpred nodes} (sts : seq (receive_trans coh)) :=
  map (@t_rcv nodes _) sts.

Structure protocol := Protocol {
  nodes: dstatelet -> pred nid;
  plab : Label;                        
  coh : cohpred nodes ;
  snd_trans : seq (send_trans coh);
  rcv_trans : seq (receive_trans coh);

  snd_uniq : uniq (snd_tags snd_trans);
  rcv_uniq : uniq (rcv_tags rcv_trans);
}.

End Protocols.

Module Exports.
Section Exports.

Definition protocol := protocol.
Definition Protocol := Protocol.
Definition plab := plab.
Definition nodes := nodes.
Definition coh := coh.
Definition snd_trans := snd_trans.
Definition rcv_trans := rcv_trans.

Definition snd_tags p := snd_tags (snd_trans p).
Definition rcv_tags p := rcv_tags (rcv_trans p).

Definition snd_uniq := snd_uniq.
Definition rcv_uniq := rcv_uniq.

Definition cohMT d := d = empty_dstatelet.

Lemma pred0v1 d: cohMT d -> valid (dstate d).

Lemma pred0v2 d: cohMT d -> valid (dsoup d).

Lemma pred0v3 d: cohMT d -> dom (dstate d) =i [::].

Definition EmptyProtMixin := CohPredMixin pred0v1 pred0v2 pred0v3.
Definition empty_coh := CohPred EmptyProtMixin.

Lemma snd_uniq0 {nodes} {coh : cohpred nodes} :
  uniq (@Protocols.snd_tags _ coh ([::] : seq (send_trans coh))).

Lemma rcv_uniq0 {nodes} {coh : cohpred nodes} :
  uniq (@Protocols.rcv_tags nodes _ ([::] : seq (receive_trans coh))).

Definition EmptyProt i : protocol :=
  @Protocol (fun _ => pred0) i empty_coh [::] [::] snd_uniq0 rcv_uniq0.

End Exports.
End Exports.

End Protocols.

Export Protocols.Exports. *)
(* Worlds:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module WorldGetters.
Section WorldGetters.

Definition context := union_map Label protocol.

Definition hook_domain := [ordType of ((nat * Label) * (Label * nat))%type].

Definition hook_type := heap -> heap -> seq nat -> nid -> Prop.

Definition hooks := union_map hook_domain hook_type.
Definition world := (context * hooks)%type.

Definition getc (w: world) : context := fst w.
Coercion getc : world >-> context.

Definition geth (w: world) : hooks := snd w.
Coercion geth : world >-> hooks.

Variable w : world.

Variables (p : protocol).

Definition getProtocol i : protocol:=
  match find i (getc w) with
  | Some p => p
  | None => EmptyProt i 
  end.

End WorldGetters.
End WorldGetters.

Export WorldGetters.

Module Worlds.

Module Core.
Section Core.

Definition hooks_consistent (c : context) (h : hooks) : Prop :=
  forall z lc ls t, ((z, lc), (ls, t)) \in dom h ->
  (lc \in dom c) && (ls \in dom c).

Definition hook_complete w := hooks_consistent (getc w) (geth w).

Lemma hook_complete0 c : hook_complete (c, Unit).

Definition Coh (w : world) : Pred state := fun s =>
  let: c := fst w in
  let: h := snd w in                                           
  [/\ valid w, valid s, hook_complete w,
      dom c =i dom s &
      forall l, coh (getProtocol w l) (getStatelet s l)].

Lemma cohW w s : Coh w s -> valid w.

Lemma cohS w s : Coh w s -> valid s.

Lemma cohH w s : Coh w s -> hook_complete w.

Lemma cohD w s : Coh w s -> dom (getc w) =i dom s.

Lemma coh_coh w s l : Coh w s -> coh (getProtocol w l) (getStatelet s l).

Lemma unit_coh w s :
  Coh w s -> w = Unit <-> s = Unit.

Lemma Coh0 (w : world) (s : state) :
  w = Unit -> s = Unit -> Coh w s.

Lemma CohUn (w1 w2 : world) (s1 s2 : state) :
  Coh w1 s1 -> Coh w2 s2 ->
  valid (w1 \+ w2) -> Coh (w1 \+ w2) (s1 \+ s2).

Lemma coh_prec w: precise (Coh w).

Lemma locE i n k x y :
  k \in dom i -> valid i -> valid (dstate (getStatelet i k)) ->
  getLocal n (getStatelet (upd k
       {| dstate := upd n x (dstate (getStatelet i k));
          dsoup := y |} i) k) = x.

Lemma locE' d n x y :
  valid (dstate d) ->
  getLocal n {| dstate := upd n x (dstate d);
                dsoup := y |} = x.

Lemma locU n n' x st s :
  n != n' ->
  valid st ->
  getLocal n {| dstate := upd n' x st; dsoup := s |} =
  getLocal n {| dstate := st; dsoup := s |}.

Section MakeWorld.

Variable p : protocol.
Notation l := (plab p).

Definition mkWorld : world := (l \\-> p, Unit).

Lemma prEq : (getProtocol mkWorld l) = p.
                          
End MakeWorld.

End Core.
End Core.

End Worlds.

Export Worlds.Core. *)
(* NetworkSem:
From mathcomp.ssreflect 
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section NetworkSemantics.

Variable w : world.
Variable this: nid.

Notation getl := (getLocal).
Notation gets := (getStatelet).
Notation getp := (@getProtocol w).

Definition get_coh l := @coh (getp l).
Definition get_st l := @snd_trans (getp l).
Definition get_rt l := @rcv_trans (getp l).

Lemma getsE l s : l \in dom s -> find l s = Some (gets s l).

Lemma coh_s l s: Coh w s -> coh (getp l) (gets s l).

Lemma Coh_dom l s : l \in dom s -> Coh w s -> 
                     dom (dstate (gets s l)) =i nodes (getp l) (gets s l).

Definition all_hooks_fire (h : hooks) l st s n (msg : seq nat) to :=
  
  forall z lc hk, Some hk = find ((z, lc), (l, st)) h ->
  lc \in dom s -> l \in dom s ->               
  let: core_local   := getl n (gets s lc) in
  let: client_local := getl n (gets s l)  in              
  hk core_local client_local msg to.

Inductive network_step (s1 s2 : state) : Prop :=
  
  Idle of s1 \In Coh w /\ s1 = s2

| SendMsg 
          l st (_ : st \In @get_st l) to msg b
          (pf: this \in (nodes (getp l) (gets s1 l)))
          (pf' : l \in dom s1) (C: Coh w s1)
          
          (S : send_safe st this to (gets s1 l) msg)

          (pf_hooks : all_hooks_fire (geth w) l (t_snd st) s1 this msg to)
          
          (spf : Some b = send_step S) of
          
          let: d :=  gets s1 l in

          let: f' := upd this b (dstate d) in
          let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)
                                              this to true)).1 in
          s2 = upd l (DStatelet f' s') s1

| ReceiveMsg l rt (_ : rt \In @get_rt l) i from
             
             (pf: this \in (nodes (getp l)) (gets s1 l))
             (pf': l \in dom s1) (C: Coh w s1)
             (msg : TaggedMessage)
             (pf': tag msg = t_rcv rt) of
             let: d := (gets s1 l) in
             let: f := dstate d in
             let: s := dsoup d  in

             [/\ find i s = Some (Msg msg from this true),
              msg_wf rt (coh_s l C) this from msg &
              
              let loc' := receive_step rt from msg (coh_s l C) pf in
              let: f' := upd this loc' f in
              let: s'' := consume_msg s i in
              s2 = upd l (DStatelet f' s'') s1].

Lemma step_coh s1 s2: network_step s1 s2 ->
                      Coh w s1 /\ Coh w s2.

Lemma step_preserves_labels s1 s2 :
  network_step s1 s2 -> dom s1 =i dom s2.

Lemma step_is_local s1 s2 l: network_step s1 s2 ->
  forall z, z != this ->
  find z (dstate (gets s1 l)) = find z (dstate (gets s2 l)).

Lemma stepV1 s1 s2: network_step s1 s2 -> valid s1.

Lemma stepV2 s1 s2: network_step s1 s2 -> valid s2.

Lemma step_preserves_node_ids s1 s2 l:
  l \in dom s1 -> network_step s1 s2 ->
  dom (dstate (gets s1 l)) =i dom (dstate (gets s2 l)).

End NetworkSemantics. *)
(* Rely:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Rely.

Variable w : world.
Variable this: nid.

Notation getl := (getLocal).
Notation gets := getStatelet.
Notation getp := (@getProtocol _ w).

Fixpoint network_rely' n s1 s2 :=
  if n is n'.+1
  then exists z s3,
        [/\ this != z, network_step w z s1 s3 & network_rely' n' s3 s2]
    else s1 = s2 /\ s1 \In Coh w.

Definition network_rely s1 s2 := exists n, network_rely' n s1 s2.

Lemma rely_refl s : s \In Coh w -> network_rely s s.

Lemma rely_trans s1 s2 s3 :
  network_rely s1 s2 -> network_rely s2 s3 -> network_rely s1 s3.

Lemma rely_coh' n s1 s2 :
  network_rely' n s1 s2 -> Coh w s1 /\ Coh w s2.

Lemma rely_coh s1 s2 :
  network_rely s1 s2 -> Coh w s1 /\ Coh w s2.

Lemma rely_loc s1 s2 l:
  network_rely s1 s2 -> find this (dstate (gets s1 l)) = find this (dstate (gets s2 l)).

Lemma step_consume_other l s s' m tm from z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm from this true) ->
  find m (dsoup (gets s' l)) = Some (Msg tm from this true).

Lemma rely_consume_other l s s' m tm from:
  network_rely s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm from this true) ->
  find m (dsoup (gets s' l)) = Some (Msg tm from this true).

Lemma step_send_other l s s' m tm to b z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s' l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s l)) = Some (Msg tm this to b') /\ (b -> b').

Lemma rely_send_other l s s' m tm to b:
  network_rely s s' ->
  find m (dsoup (gets s' l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s l)) = Some (Msg tm this to b') /\ (b -> b').

Lemma step_send_other' l s s' m tm to b z:
  this != z -> network_step w z s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s' l)) = Some (Msg tm this to b') /\ (b' -> b).

Lemma rely_send_other' l s s' m tm to b:
  network_rely s s' ->
  find m (dsoup (gets s l)) = Some (Msg tm this to b) ->
  exists b', find m (dsoup (gets s' l)) = Some (Msg tm this to b') /\ (b' -> b).

Notation loc i l := (getLocal this (getStatelet i l)).
Notation msgs i l := (dsoup (getStatelet i l)).

Lemma rely_loc' l i j : network_rely i j -> loc j l = loc i l.

End Rely. *)
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
(* Actions:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem.
Require Classical_Prop.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module Actions.

Section Actions.

Variable W : world.
Notation getS s l := (getStatelet s l).

Structure action (V : Type) (this : nid)
  := Action
       {
         
         a_safe : state -> Prop;

         a_safe_coh : forall s, a_safe s -> s \In Coh W;

         a_step : forall s1, (a_safe s1) -> state -> V -> Prop;

         step_total : forall s (pf : a_safe s), exists s' r, a_step pf s' r;

         step_sem  : forall s1 (pf : a_safe s1) s2 r,
             a_step pf s2 r -> network_step W this s1 s2

       }.

Lemma step_other this V (a : action V this) l s1 s2 r n (pf : a_safe a s1):
  this != n -> a_step pf s2 r ->
  getLocal n (getS s1 l) = getLocal n (getS s2 l).

End Actions.

Section SkipActionWrapper.

Variable W : world.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.
Variable l : Label.
Variable p : protocol.
Variable pf : getP l = p.

Definition skip_safe s := Coh W s.

Variable V : Type.

Variable f : forall s, coh p (getS s l) -> V.

Lemma safe_local s : skip_safe s -> coh p (getS s l).

Definition skip_step s1 (pf : skip_safe s1) (s2 : state) r :=
  [/\ s1 \In Coh W, s1 = s2 & r = f (safe_local pf)].

Lemma skip_step_total s (S : skip_safe s) : exists s' r, skip_step S s' r.

Lemma skip_safe_coh s1 : skip_safe s1 -> Coh W s1.

Lemma skip_step_sem s1 (S : skip_safe s1) s2 r:
  skip_step S s2 r -> network_step W this s1 s2.

Definition skip_action_wrapper :=
  Action skip_safe_coh skip_step_total skip_step_sem.

End SkipActionWrapper.

Section TryReceiveActionWrapper.

Variable W : world.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.

Variable filter : Label -> nid -> nat -> pred (seq nat).

Variable f_valid_label : forall l n t m ,
    filter l n t m -> l \in dom (getc W).

Definition tryrecv_act_safe (s : state) := s \In Coh W.

Lemma tryrecv_act_safe_coh s : tryrecv_act_safe s -> Coh W s.

Definition tryrecv_act_step s1 s2 (r : option (nid * nat * seq nat)) :=
  exists (pf : s1 \In Coh W),
  
    ([/\ (forall l m tms from rt b,
          this \in nodes (getP l) (getS s1 l) -> 
          Some (Msg tms from this b) = find m (dsoup (getS s1 l)) ->
          rt \In (rcv_trans (getP l)) ->
          tag tms = (t_rcv rt) ->
          
          msg_wf rt (coh_s l pf) this from tms ->
             
          filter l from (t_rcv rt) (tms_cont tms) ->
          ~~b),
    r = None & s2 = s1] \/
   
   exists l m tms from rt (pf' : this \in nodes (getP l) (getS s1 l)),
     let: d :=  getS s1 l in
     [/\ [/\ Some (Msg tms from this true) = find m (dsoup (getS s1 l)),
          rt \In (rcv_trans (getP l)),
          tag tms = (t_rcv rt),
          
          msg_wf rt (coh_s l pf) this from tms &
             
          filter l from (t_rcv rt) (tms_cont tms)],
      let loc' := receive_step rt from tms (coh_s l pf) pf' in
      let: f' := upd this loc' (dstate d) in
      let: s' := consume_msg (dsoup d) m in
      s2 = upd l (DStatelet f' s') s1 &
      r = Some (from, tag tms, tms_cont tms)]).

Import Classical_Prop.

Lemma tryrecv_act_step_total s:
  tryrecv_act_safe s -> exists s' r , tryrecv_act_step s s' r.

Lemma tryrecv_act_step_safe s1 s2 r:
  tryrecv_act_step s1 s2 r -> tryrecv_act_safe s1.

Lemma tryrecv_act_step_sem s1 (S : tryrecv_act_safe s1) s2 r:
  tryrecv_act_step s1 s2 r -> network_step W this s1 s2.

Definition tryrecv_action_wrapper :=
  Action tryrecv_act_safe_coh tryrecv_act_step_total tryrecv_act_step_sem.

End TryReceiveActionWrapper.

Section SendActionWrapper.

Variable W : world.
Variable p : protocol.
Notation getP l := (getProtocol W l).
Notation getS s l := (getStatelet s l).
Variable this : nid.

Variable l : Label.

Variable pf : (getProtocol W l) = p.

Variable st: send_trans (coh p).

Variable pf' : st \In (snd_trans p).

Variable msg : seq nat.
Variable to  : nid.

Definition can_send (s : state) := (l \in dom s) && (this \in nodes p (getS s l)).

Definition filter_hooks (h : hooks) :=
  um_filter (fun e => e.2 == (l, t_snd st)) h.

Definition send_act_safe s :=
  [/\ Coh W s, send_safe st this to (getS s l) msg, can_send s &
               
      all_hooks_fire (filter_hooks (geth W)) l (t_snd st) s this msg to].

Lemma send_act_safe_coh s : send_act_safe s -> Coh W s.

Lemma safe_safe s : send_act_safe s -> send_safe st this to (getS s l) msg.

Definition send_act_step s1 (S: send_act_safe s1) s2 r :=
   r = msg /\
   exists b,
     Some b = send_step (safe_safe S) /\
     let: d :=  getS s1 l in
     let: f' := upd this b (dstate d) in
     let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg)
                                         this to true)).1 in
     s2 = upd l (DStatelet f' s') s1.

Lemma send_act_step_total s (S: send_act_safe s): exists s' r , send_act_step S s' r.

Lemma send_act_step_sem s1 (S : send_act_safe s1) s2 r:
  send_act_step S s2 r -> network_step W this s1 s2.

Definition send_action_wrapper :=
  Action send_act_safe_coh send_act_step_total send_act_step_sem.

End SendActionWrapper.

End Actions.

Module ActionExports.

Definition action := Actions.action.
Definition a_safe := Actions.a_safe.
Definition a_step := Actions.a_step.

Definition a_safe_coh := Actions.a_safe_coh.
Definition a_step_total := Actions.step_total.
Definition a_step_sem := Actions.step_sem.
Definition a_step_other := Actions.step_other.

Definition skip_action_wrapper := Actions.skip_action_wrapper.
Definition send_action_wrapper := Actions.send_action_wrapper.
Definition tryrecv_action_wrapper := Actions.tryrecv_action_wrapper.

End ActionExports.

Export ActionExports. *)
(* Injection:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Actions.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module Injection.
Section Injection.

Variable W : world.

Structure injects (U V : world) (K : hooks) := Inject {
  
  E : world;
                                       
  _ : hook_complete U /\ hook_complete E;

  _ : V = U \+ E \+ (Unit, K);

  _ : hooks_consistent (getc (U \+ E)) K;
  
  _ : forall s, Coh V s <-> exists s1 s2,
        [/\ s = s1 \+ s2, Coh U s1 & Coh E s2];

  _ : forall s1 s2 s this,
      s1 \+ s \In Coh V -> network_step U this s1 s2 ->
      network_step V this (s1 \+ s) (s2 \+ s);

  _ : forall s1 s2 s1' s2' this,
      s1 \In Coh U -> s2 \In Coh U ->
      network_step V this (s1 \+ s1') (s2 \+ s2') ->
      (network_step U this s1 s2   /\ s1' = s2') \/
      (network_step E this s1' s2' /\ s1 = s2); }.

End Injection.

Module Exports.
Section Exports.

Definition inj_ext := E.
Definition injects := injects. 
Definition Inject := Inject.

Lemma cohK (U V : world) (K : hooks) (w : injects U V K) :
  V = U \+ inj_ext w \+ (Unit, K).

Lemma cohE (U V : world) (K : hooks) (w : injects U V K) s :
  Coh V s <-> exists s1 s2,
      [/\ s = s1 \+ s2, Coh U s1 & Coh (inj_ext w) s2].

Lemma sem_extend (U V : world) (K : hooks) (w : injects U V K) s1 s2 s this: 
      s1 \+ s \In Coh V -> s2 \+ s \In Coh V ->
      network_step U this s1 s2 -> network_step V this (s1 \+ s) (s2 \+ s).

Lemma sem_split (U V : world) (K : hooks) (w : injects U V K) s1 s1' s2 s2' this: 
      s1 \In Coh U -> s2 \In Coh U ->
      network_step V this (s1 \+ s1') (s2 \+ s2') ->
      (network_step U this s1 s2   /\ s1' = s2') \/
      (network_step (inj_ext w) this s1' s2' /\ s1 = s2).

Definition extends (U V : world) (K : hooks) (w : injects U V K) s s1 := 
  exists s2, [/\ s = s1 \+ s2, s1 \In Coh U & s \In Coh V].

Notation dom_filt W := (fun k => k \in dom W).

Definition projectS (W : world) (s : state) :=
  um_filter (dom_filt (getc W)) s.

Lemma projectS_cohL W1 W2 s :
  s \In Coh (W1 \+ W2) -> hook_complete W1 -> projectS W1 s \In Coh W1.

Lemma projectS_cohR W1 W2 s :
  s \In Coh (W1 \+ W2) -> hook_complete W2 -> projectS W2 s \In Coh W2.

Lemma projectSE W1 W2 s :
  s \In Coh (W1 \+ W2) ->
  s = projectS W1 s \+ projectS W2 s.

Lemma coh_split W1 W2 s :
  s \In Coh (W1 \+ W2) ->
  hook_complete W1 -> hook_complete W2 ->
  exists s1 s2 : state,
    [/\ s1 \In Coh W1, s2 \In Coh W2 & s = s1 \+ s2].

Lemma injExtL' (W1 W2 : world) K (pf : injects W1 (W1 \+ W2) K) :
  valid (W1 \+ W2) -> inj_ext pf \+ (Unit, K) = W2.

Lemma injExtR' W1 W2 K (pf : injects W2 (W1 \+ W2) K) :
  valid (W1 \+ W2) -> inj_ext pf \+ (Unit, K) = W1.

Lemma injExtL W1 W2 (pf : injects W1 (W1 \+ W2) Unit) :
  valid (W1 \+ W2) -> inj_ext pf = W2.

Lemma injExtR W1 W2 (pf : injects W2 (W1 \+ W2) Unit) :
  valid (W1 \+ W2) -> inj_ext pf  = W1.

End Exports.
End Exports.

End Injection.

Export Injection.Exports.

Module InjectExtra.

Lemma cohUnKR U W s s':
  s \+ s' \In Coh (U \+ W) -> s \In Coh U ->
  hook_complete W -> s' \In Coh W.

Lemma cohUnKL U W s s':
  s \+ s' \In Coh (U \+ W) -> s' \In Coh W ->
  hook_complete U -> s \In Coh U .

Lemma getPUn (U W : world) l :
  valid (U \+ W) -> l \in dom U.1 ->

Lemma getSUn s1 s2 l :
  valid (s1 \+ s2) -> l \in dom s1 ->
  getStatelet s1 l = getStatelet (s1 \+ s2) l.

Lemma hook_completeL (U : world) K :
  valid (U \+ (Unit, K)) ->
  hook_complete (U \+ (Unit, K)) -> hook_complete U.

Lemma get_protocol_hooks (U: world) K l:
  valid U -> getProtocol (U \+ (Unit, K)) l = getProtocol U l.

Lemma coh_hooks (U : world) K s :
  s \In (Coh (U \+ (Unit, K))) -> s \In (Coh U).

Lemma inj_hooks_complete (U W : world) K:
  valid (U \+ W \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma inject_step U W K this s1 s2 s1' s2' :
  valid (U \+ W) ->
  s1 \In Coh U -> s2 \In Coh U ->
  hook_complete U -> hook_complete W ->
  network_step (U \+ W \+ (Unit, K)) this (s1 \+ s1') (s2 \+ s2') ->
  network_step U this s1 s2 /\ s1' = s2' \/
  network_step W this s1' s2' /\ s1 = s2.

Definition not_hooked_by (K : hooks) l :=
  forall z lc l' st, (z, lc, (l', st)) \in dom K -> l != l'.

Definition world_not_hooked (W: world) K :=
  forall l, l \in dom W.1 -> not_hooked_by K l.

Lemma hooks_frame (U W : world) (K : hooks) l st s s' n msg to :
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma inject_frame U W K this s1 s2 s:
  s1 \+ s \In Coh (U \+ W \+ (Unit, K)) ->
  network_step U this s1 s2 ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (U \+ W).1 K ->

Lemma injectL (U W : world) K :
  valid (U \+ W \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (getc (U \+ W)) K ->
  world_not_hooked U K ->
  injects U (U \+ W \+ (Unit, K)) K.

Lemma injectR (U W : world) K :
  valid (W \+ U \+ (Unit, K)) ->
  hook_complete U -> hook_complete W ->
  hooks_consistent (getc (U \+ W)) K ->
  world_not_hooked U K ->
  injects U (W \+ U \+ (Unit, K)) K.

Lemma locProjL (W1 W2 : world) l s1 s2:
  (s1 \+ s2) \In Coh (W1 \+ W2) -> l \in dom W1.1 ->

Lemma locProjR (W1 W2 : world) l s1 s2:
  (s1 \+ s2) \In Coh (W1 \+ W2) -> l \in dom W2.1 ->

End InjectExtra.

Export InjectExtra. *)
(* Process:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem.
From DiSeL
Require Import Actions Injection InductiveInv.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section ProcessSyntax.

Variable this : nid.

Inductive proc (W : world) A :=
  Unfinished | Ret of A | Act of action W A this |
  Seq B of proc W B & B -> proc W A |
  Inject V K of injects V W K & proc V A |
  WithInv p I (ii : InductiveInv p I) of
          W = mkWorld (ProtocolWithIndInv ii) & proc (mkWorld p) A.  

Definition pcat W A B (t : proc W A) (k : A -> Pred (proc W B)) :=
  [Pred s | exists q, s = Seq t q /\ forall x, q x \In k x].

Inductive schedule :=
  ActStep | SeqRet | SeqStep of schedule |  
  InjectStep of schedule | InjectRet |
  WithInvStep of schedule | WithInvRet.

End ProcessSyntax.

Arguments Unfinished [this W A].
Arguments Ret [this W A].
Arguments Act [this W A].
Arguments Seq [this W A B].
Arguments WithInv [this W A].

Section ProcessSemantics.

Variable this : nid.

Fixpoint step (W : world) A (s1 : state) (p1 : proc this W A)
         sc (s2 : state) (p2 : proc this W A) : Prop :=
  match sc, p1 with
    
  | ActStep, Act a => exists v pf, @a_step _ _ _ a s1 pf s2 v /\ p2 = Ret v
    
  | SeqRet, Seq _ (Ret v) k => s2 = s1 /\ p2 = k v
  | SeqStep sc', Seq _ p' k1 => 
    exists p'', step s1 p' sc' s2 p'' /\ p2 = Seq p'' k1
  
  | InjectRet, Inject V K pf (Ret v) =>
     exists s1', [/\ s2 = s1, p2 = Ret v & extends pf s1 s1']
  | InjectStep sc', Inject V K pf t1' =>
    exists s1' s2' s t2', 
    [/\ p2 = Inject pf t2', s1 = s1' \+ s, s2 = s2' \+ s, 
     s1' \In Coh V & step s1' t1' sc' s2' t2']
  
  | WithInvRet, WithInv p inv ii pf (Ret v) =>
     exists s1', [/\ s2 = s1, p2 = Ret v & s1 = s1']
  | WithInvStep sc', WithInv p inv ii pf t1' =>
    exists t2', p2 = WithInv p inv ii pf t2' /\  
                     step s1 t1' sc' s2 t2'   
  | _, _ => False
  end.

Fixpoint good (W : world) A (p : proc this W A) sc  : Prop :=
  match sc, p with
  | ActStep, Act _ => True
  | SeqRet, Seq _ (Ret _) _ => True
  | SeqStep sc', Seq _ p' _ => good p' sc'
  | InjectStep sc', Inject _ _ _ p' => good p' sc'
  | InjectRet, Inject _ _ _ (Ret _) => True
  | WithInvStep sc', WithInv _ _ _ _ p' => good p' sc'
  | WithInvRet, WithInv _ _ _ _ (Ret _) => True
  | _, _ => False
  end.

Fixpoint safe (W : world) A (p : proc this W A) sc (s : state)  : Prop :=
  match sc, p with
  | ActStep, Act a => a_safe a s
  | SeqRet, Seq _ (Ret _) _ => True
  | SeqStep sc', Seq _ p' _ => safe p' sc' s
  | InjectStep sc', Inject V K pf p' =>
      exists s', extends pf s s' /\ safe p' sc' s'
  | InjectRet, Inject V K pf (Ret _) => exists s', extends pf s s'
  | WithInvStep sc', WithInv _ _ _ _ p' => safe p' sc' s
  | WithInvRet, WithInv _ _ _ _ (Ret _) => True
  | _, _ => True
  end.

Definition pstep (W : world) A s1 (p1 : proc this W A) sc s2 p2 := 
  [/\ s1 \In Coh W, safe p1 sc s1 & step s1 p1 sc s2 p2].

Lemma pstep_safe (W : world) A s1 (t : proc this W A) sc s2 q : 
        pstep s1 t sc s2 q -> safe t sc s1.

Lemma proc_progress W A s (p : proc this W A) sc : 
        s \In Coh W -> safe p sc s -> good p sc ->  
        exists s' (p' : proc this W A), pstep s p sc s' p'.

Lemma stepUnfin W A s1 sc s2 (t : proc this W A) : 
        pstep s1 Unfinished sc s2 t <-> False.

Lemma stepRet W A s1 sc s2 (t : proc this W A) v : 
        pstep s1 (Ret v) sc s2 t <-> False.

Lemma stepAct W A s1 a sc s2 (t : proc this W A) : 
        pstep s1 (Act a) sc s2 t <->
        exists v pf, [/\ sc = ActStep, t = Ret v & @a_step _ _ _ a s1 pf s2 v].

Lemma stepSeq W A B s1 (t : proc this W B) k sc s2 (q : proc this W A) :
        pstep s1 (Seq t k) sc s2 q <->
        (exists v, [/\ sc = SeqRet, t = Ret v, q = k v, s2 = s1 &
                       s1 \In Coh W]) \/
         exists sc' p',
           [/\ sc = SeqStep sc', q = Seq p' k & pstep s1 t sc' s2 p'].

Lemma stepInject V W K A (em : injects V W K) 
                s1 (t : proc this V A) sc s2 (q : proc this W A) :
  pstep s1 (Inject em t) sc s2 q <->
  
  (exists s1' v, [/\ sc = InjectRet, t = Ret v, q = Ret v, s2 = s1 &
                     extends em s1 s1']) \/
  
  exists sc' t' s1' s2' s, 
    [/\ sc = InjectStep sc', q = Inject em t', 
     s1 = s1' \+ s, s2 = s2' \+ s, s1 \In Coh W &
              pstep s1' t sc' s2' t'].

Lemma stepWithInv W A pr I (ii : InductiveInv pr I) s1 
      (t : proc this (mkWorld pr) A) sc s2 (q : proc this W A) pf :
  pstep s1 (WithInv pr I ii pf t) sc s2 q <-> 
  (exists v, [/\ sc = WithInvRet, t = Ret v, q = Ret v, s2 = s1,
                 s1 \In Coh W & W = mkWorld (ProtocolWithIndInv ii)]) \/
  exists sc' t' , [/\ sc = WithInvStep sc', q = WithInv pr I ii pf t',
                      W = mkWorld (ProtocolWithIndInv ii),
                      s1 \In Coh W & pstep s1 t sc' s2 t'].

Lemma pstep_network_sem (W : world) A s1 (t : proc this W A) sc s2 q :
        pstep s1 t sc s2 q -> network_step W this s1 s2.

Lemma pstep_inv A pr I (ii : InductiveInv pr I) s1 s2 sc
      (t t' : proc this (mkWorld pr) A):
  s1 \In Coh (mkWorld (ProtocolWithIndInv ii)) ->
  pstep s1 t sc s2 t' -> 
  s2 \In Coh (mkWorld (ProtocolWithIndInv ii)).

End ProcessSemantics. *)
(* Always:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process InductiveInv.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Section Always.

Variable this : nid.
Variable W : world.

Notation coherent := (Coh W).

Arguments proc [this W].

Fixpoint always_sc A (s1 : state) p scs (P : state -> proc A -> Prop) : Prop :=
  s1 \In coherent /\ 
  if scs is sc :: scs' then 
    forall s2, network_rely W this s1 s2 -> 
      [/\ safe p sc s2, P s2 p &
          forall s3 q, @pstep this W A s2 p sc s3 q -> always_sc s3 q scs' P]
  else forall s2, network_rely W this s1 s2 -> P s2 p.

Definition always A s (p : proc A) P := forall scs, always_sc s p scs P.

Lemma alw_coh' A s (p : proc A) scs P : 
        always_sc s p scs P -> s \In coherent.

Lemma alw_coh A s (p : proc A) P : 
        always s p P -> s \In coherent.

Lemma alw_safe' A s (p : proc A) sc scs P : 
        always_sc s p (sc :: scs) P -> safe p sc s.

Lemma alw_safe A s (p : proc A) P :
        always s p P -> forall sc, safe p sc s.

Lemma alw_refl' A s (p : proc A) sc P : always_sc s p sc P -> P s p.

Lemma alw_refl A s (p : proc A) P : always s p P -> P s p.

Lemma alw_envs' A s1 (p : proc A) scs s2 P : 
        always_sc s1 p scs P -> network_rely W this s1 s2 -> always_sc s2 p scs P.
 
Lemma alw_envs A s1 (p : proc A) s2 P :
        always s1 p P -> network_rely W this s1 s2 -> always s2 p P.

Lemma alw_step A s1 (p : proc A) sc s2 q P :
        always s1 p P -> pstep s1 p sc s2 q -> always s2 q P.

Lemma alwp_envsq A s1 (p1 : proc A) scs (P : _ -> _ -> Prop) : 
        always_sc s1 p1 scs P ->
        always_sc s1 p1 scs 
          (fun s2 p2 => forall s3, network_rely W this s2 s3 -> P s3 p2).

Lemma alw_envsq A s1 (p1 : proc A) (P : _ -> _ -> Prop) : 
        always s1 p1 P ->
        always s1 p1 (fun s2 p2 => forall s3, network_rely W this s2 s3 -> P s3 p2).

Lemma alw_unfin' A s1 scs (P : state -> proc A -> Prop) :
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 Unfinished) -> 
        always_sc s1 Unfinished scs P.

Lemma alw_unfin A s1 (P : state -> proc A -> Prop) :
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 Unfinished) ->
        always s1 Unfinished P.

Lemma alw_ret' A s1 (v : A) scs (P : state -> proc A -> Prop) : 
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 (Ret v)) -> 
        always_sc s1 (Ret v) scs P.

Lemma alw_ret A s1 (v : A) (P : state -> proc A -> Prop) : 
        s1 \In coherent -> 
        (forall s2, network_rely W this s1 s2 -> P s2 (Ret v)) -> 
        always s1 (Ret v) P.

Lemma alw_act A s1 (a : action W A this) (P : state -> proc A -> Prop) :
        s1 \In coherent ->
        (forall s2, network_rely W this s1 s2 -> exists S : a_safe a s2,
        P s2 (Act a) /\
        forall s3 v s4, a_step S s3 v -> 
                        network_rely W this s3 s4 -> P s4 (Ret v)) ->
        always s1 (Act a) P. 

Notation alwsafe_sc s p scs := (always_sc s p scs (fun _ _ => True)).
Notation alwsafe s p := (always s p (fun _ _ => True)).

Lemma alw_imp' A s (p : proc A) scs (P1 P2 : state -> proc A -> Prop) : 
         (forall s p, s \In coherent -> P1 s p -> P2 s p) -> 
         always_sc s p scs P1 -> always_sc s p scs P2.

Lemma alw_imp A s (p : proc A) (P1 P2 : state -> proc A -> Prop) : 
        (forall s p, s \In coherent -> P1 s p -> P2 s p) -> 
        always s p P1 -> always s p P2.

Lemma alwA' A B s (p : proc A) scs (P : B -> state -> proc A -> Prop) : 
        alwsafe_sc s p scs ->
        (always_sc s p scs (fun s' p' => forall x, P x s' p') <->
         forall x, always_sc s p scs (fun s' p' => P x s' p')).

Lemma alwA A B s (p : proc A) (P : B -> state -> proc A -> Prop) : 
        alwsafe s p ->
        (always s p (fun s' p' => forall x, P x s' p') <->
         forall x, always s p (fun s' p' => P x s' p')).

Arguments alwA [A B s p P].

Lemma alwI' A s (p : proc A) scs (P : Prop) (Q : state -> proc A -> Prop) : 
        alwsafe s p ->
        (always_sc s p scs (fun s' p' => P -> Q s' p') <->
         (P -> always_sc s p scs (fun s' p' => Q s' p'))).

Lemma alwI A s (p : proc A) (P : Prop) (Q : state -> proc A -> Prop) : 
        alwsafe s p ->
         always s p (fun s' p' => P -> Q s' p') <->
         (P -> always s p (fun s' p' => Q s' p')). 

Arguments alwI [A s p P Q].

Lemma alw_bnd A B (p1 : proc A) (p12 : proc B) pp2 s1 
                 (P : state -> B -> Prop) :
        p12 \In pcat p1 pp2 -> 
        always s1 p1 (fun s2 p2 =>
                        
          forall p v, p2 = Ret v -> p \In pp2 v -> 
                      always s2 p (fun s q => forall v, q = Ret v -> P s v)) ->
        always s1 p12 (fun s p => forall v, p = Ret v -> P s v).

Lemma alwsafe_bnd A B (p1 : proc A) (p12 : proc B) s1 pp2 :
        p12 \In pcat p1 pp2 ->
        always s1 p1 (fun s2 p2 =>
          forall p v, p2 = Ret v -> p \In pp2 v -> alwsafe s2 p) ->
        alwsafe s1 p12.

Definition after A s (p : proc A) (P : A -> state -> Prop) := 
  always s p (fun s2 p2 => forall v, p2 = Ret v -> P v s2).

Lemma aft_bnd A B (p1 : proc A) (p12 : proc B) pp2 s1 P :
        p12 \In pcat p1 pp2 -> 
        after s1 p1 (fun v s => 
          forall p, p \In pp2 v -> after s p P) ->
        after s1 p12 P.

Lemma aftI A s (p : proc A) (P : Prop) (Q : A -> state -> Prop) : 
        alwsafe s p ->
         after s p (fun v s' => P -> Q v s') <->
         (P -> after s p (fun v s' => Q v s')).

Lemma aft_alwsf A s (p : proc A) :
        alwsafe s p <-> after s p (fun v s => True).

Lemma aft_imp A s (p : proc A) (P1 P2 : A -> state -> Prop) : 
        (forall v s, s \In coherent -> 
                     P1 v s -> P2 v s) -> 
        after s p P1 -> after s p P2.

Lemma aftA A B s (p : proc A) (P : B -> A -> state -> Prop) : 
        alwsafe s p ->
        (after s p (fun v s' => forall x, P x v s') <->
         forall x, after s p (fun v s' => P x v s')).

Arguments aftA [A B s p P].
Arguments aftI [A s p P Q].

End Always.

Section AlwaysInject.
Variables (V W : world) (K : hooks) (A : Type) (w : injects V W K) (this: nid).
Notation W2 := (inj_ext w).

Lemma rely_ext i j s : 
        i \In Coh V -> 
        network_rely W this (i \+ j) s ->  
        exists i' j', s = i' \+ j' /\ i' \In Coh V.

Lemma rely_split' z s1 s1' s2 s2' : 
  s1 \In Coh V -> s2 \In Coh V ->
  network_step W z (s1 \+ s1') (s2 \+ s2') ->
  network_step V z s1 s2 /\ network_step (inj_ext w) z s1' s2'.

Lemma rely_split s1 s1' s2 s2' : 
  s1 \In Coh V -> s2 \In Coh V ->
  network_rely W this (s1 \+ s1') (s2 \+ s2') ->
  network_rely V this s1 s2 /\ network_rely (inj_ext w) this s1' s2'.

Lemma alw_inject (p : proc this V A)
      (P : state -> proc this V A -> Prop) i j :
        i \+ j \In Coh W ->
        always i p P ->
        always (i \+ j) (Inject w p)
          (fun m q => exists i' j', 
             [/\ m = i' \+ j', i' \In Coh V, network_rely W2 this j j' &
                 (exists q', q = Inject w q' /\ P i' q') \/
                 (exists v', q = Ret v' /\ P i' (Ret v'))]).

Lemma aft_inject (p : proc this V A) (P : A -> state -> Prop) i j :
        i \+ j \In Coh W ->
        after i p P ->
        after (i \+ j) (Inject w p)
          (fun v m => exists i' j', 
             [/\ m = i' \+ j', i' \In Coh V, 
                 network_rely W2 this j j' & P v i']).

End AlwaysInject.

Notation alwsafe_sc s p scs := (always_sc s p scs (fun _ _ => True)).
Notation alwsafe s p := (always s p (fun _ _ => True)).

Module AlwaysInductiveInv.
Section AlwaysInductiveInv.
Import InductiveInv.
Variable pr : protocol.

Notation l := (plab pr).
Notation coh := (coh pr).
Variable I : dstatelet -> pred nid -> Prop.
Variable ii : InductiveInv pr I.

Variables (A : Type) (this: nid).
Notation V := (mkWorld pr).
Notation W := (mkWorld (ProtocolWithIndInv ii)).

Lemma alw_ind_inv (p : proc this V A)
      (P : state -> proc this V A -> Prop) i :
        i \In Coh W ->
        always i p P ->
        always i (WithInv pr I ii (erefl _) p)
          (fun m q => m \In Coh W /\
                 ((exists q', q = WithInv pr I ii (erefl _) q' /\ P m q') \/
                  (exists v', q = Ret v' /\ P m (Ret v')))).

Lemma aft_ind_inv (p : proc this V A) (P : A -> state -> Prop) i :
        i \In Coh W ->
        after i p P ->
        after i (WithInv pr I ii (erefl _) p)
          (fun v m => m \In Coh W /\ P v m).

End AlwaysInductiveInv.
End AlwaysInductiveInv.

Export AlwaysInductiveInv. *)
(* HoareTriples:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Domain Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Structure prog (W : world) A (this : nid) :=
  Prog {
      set_of : proc this W A -> Prop; 
      
      _ : set_of Unfinished
  }.

Section Programs.

Variable this : nid.
Variable W : world.
Variable A : Type.

Notation coherent := (Coh W).

Arguments Prog [W A].
Arguments Prog [W A this].

Coercion set_of : prog >-> Funclass. 
Canonical prog_PredType W A := mkPredType (fun p => @set_of W A this p). 

Lemma progE (T1 T2 : prog W A this) : 
        T1 = T2 <-> set_of T1 = set_of T2.

Definition pre := state -> Prop.

Definition post A := state -> A -> state -> Prop.
Definition cont A := A -> state -> Prop.
Definition spec A := prod pre (post A).

Definition has_spec (s : spec A) := 
  [Pred T : prog W A this | forall i t, 
     s.1 i -> i \In Coh W -> t \In T -> after i t (s.2 i)]. 

End Programs.

Module DTbin.
Section DTbin.

Variable this : nid.

Structure DTbin (W : world) A (s : spec A) := DTbin_make {
  prog_of : prog W A this; 
  _ : prog_of \In has_spec this W s}.

End DTbin.
End DTbin.

Notation DTbin := DTbin.DTbin.
Notation DTbin_make := DTbin.DTbin_make.

Coercion DTbin.prog_of : DTbin >-> prog.

Section Specs.

Variable this : nid.

Lemma stsepE (W : world) A (s : spec A) (e1 e2 : DTbin this W s) : 
        e1 = e2 <-> e1 = e2 :> prog W A this.

Lemma prog_unfin (W : world) A (s : spec A) (e : DTbin this W s) : 
        Unfinished \In DTbin.prog_of e.

Inductive DT (W: world) A :=
  with_spec (s : spec A) of DTbin this W s.

Definition spec_of W A (e : DT W A) := let: with_spec s _ := e in s.
Definition pre_of W A := fun e : DT W A => (spec_of e).1. 
Definition post_of W A := fun e : DT W A => (spec_of e).2. 

Definition code_of (W : world) A (e : DT W A) := 
  let: with_spec _ c := e return DTbin this W (spec_of e) in c.

Arguments pre_of [W A].
Arguments post_of [W A].
Arguments with_spec [W A].
Prenex Implicits pre_of post_of.

Coercion with_spec : DTbin >-> DT.

Definition verify (W : world) A (i : state) (e : DT W A) r := 
  i \In Coh W -> 
  forall p, p \In DTbin.prog_of (code_of e) -> after i p r. 

End Specs.

Module DTLattice.
Section DTLattice.

Variable this : nid.
Variable W : world.
Variables (A : Type) (s : spec A).
Notation prog A := (@prog W A this).
Notation DTbin s := (@DTbin this W A s).

Definition leq (e1 e2 : DTbin s) := 
  set_of (DTbin.prog_of e1) <== set_of (DTbin.prog_of e2).

Lemma leq_refl e : leq e e. 

Lemma leq_trans e1 e2 e3 : leq e1 e2 -> leq e2 e3 -> leq e1 e3.

Lemma leq_asym e1 e2 : leq e1 e2 -> leq e2 e1 -> e1 = e2.

Definition bot_set t := t = @Unfinished this W A. 
Definition bot_prg := @Prog _ _ _ bot_set (erefl _).

Lemma bot_spec : bot_prg \In has_spec this W s.

Definition bot := DTbin_make bot_spec.

Lemma bot_bot e : leq bot e.

Definition sup_set (es : Pred (DTbin s)) t := 
  t = Unfinished \/ exists e : DTbin s, t \In DTbin.prog_of e /\ e \In es.
Definition sup_prog es := @Prog _ _ _ (sup_set es) (or_introl (erefl _)).

Lemma sup_spec es : sup_prog es \In has_spec this W s.

Definition sup es := DTbin_make (@sup_spec es).

Lemma sup_supB es e : e \In es -> leq e (sup es).

Lemma sup_supL es e : (forall c, c \In es -> leq c e) -> leq (sup es) e.

End DTLattice.

Module Exports.
Section Exports.
Variable this : nid.
Variable W : world.
Variables (A : Type) (s : spec A).

Definition stPosetMixin := PosetMixin (@leq_refl this W A s) 
                                      (@leq_asym this W A s) (@leq_trans this W A s).
Canonical stPoset := Eval hnf in Poset (@DTbin this W A s) stPosetMixin.

Definition stLatticeMixin := LatticeMixin (@sup_supB this W A s) (@sup_supL this W A s).
Canonical stLattice := Eval hnf in Lattice (@DTbin this W A s) stLatticeMixin.

End Exports.
End Exports.

End DTLattice.

Export DTLattice.Exports.

Section Fix. 

Variable this : nid.
Variable W : world.
Variables (A : Type)  (B : A -> Type) (s : forall x, spec (B x)).

Notation tp := (forall x, DTbin this W (s x)).
Notation lat := (dfunLattice (fun x => [lattice of DTbin this W (s x)])).
Variable (f : tp -> tp).

Definition f' (e : lat) := sup [Pred t : lat | exists e', e' <== e /\ t = f e'].

Definition ffix : tp := tarski_lfp f'. 

End Fix.

Section Return.
Variable this : nid.
Variable W : world.
Variables (A : Type)  (x : A).

Definition ret_set t := t = Unfinished \/ t = @Ret this W A x.

Definition ret_prog := @Prog _ _ _ ret_set (or_introl (erefl _)).

Definition ret_s : spec A := 
  (fun i => True, fun i y m => network_rely W this i m /\ y = x). 

Lemma ret_has_spec : ret_prog \In has_spec this W ret_s.

Definition ret := with_spec (DTbin_make ret_has_spec). 

End Return.

Section Act.
Variable this : nid.
Variable W : world.
Variables (A : Type)  (x : A).
Variable a : action W A this.

Definition act_set t := t = Unfinished \/ t = @Act this W A a.
Definition act_prog := @Prog _ _ _ act_set (or_introl (erefl _)).

Definition act_s : spec A := 
  (fun i => forall j, network_rely W this i j -> a_safe a j,
   fun i y m => exists j k, 
       [/\ network_rely W this i j,
        exists (S: a_safe a j), a_step S k y & network_rely W this k m]). 

Lemma act_has_spec : act_prog \In has_spec this W act_s.

Definition act := with_spec (DTbin_make act_has_spec).

End Act.

Section Bind.

Variable this : nid.
Variable W : world.
Variables (A B : Type).

Section Prog.
Variables (T : prog W A this) (K : A -> prog W B this).

Definition bnd_set t := 
  t = Unfinished \/ exists t', t \In pcat t' K /\ t' \In T.
Definition bnd_prog := @Prog _ _ _ bnd_set (or_introl (erefl _)).

End Prog.

Variables (e1 : DT this W A) (e2 : A -> DT this W B).

Notation s1 := (spec_of e1).

Notation s2 := (fun x => spec_of (e2 x)).

Definition bind_s : spec B := 
  (fun i => s1.1 i /\ forall x s, s1.2 i x s -> (s2 x).1 s,
   fun i y m => exists x s, s1.2 i x s /\ (s2 x).2 s y m).

Lemma bind_has_spec : 
        bnd_prog (code_of e1) (fun x => let y := e2 x in code_of y) \In has_spec this W bind_s.

Definition bind := with_spec (DTbin_make bind_has_spec).

End Bind.

Section Inject.
Variables (this : nid) (V W : world) (K : hooks) (A : Type) (w : injects V W K). 
Variable (e : DT this V A).
Notation W2 := (inj_ext w). 
Notation s := (spec_of e).

Section Prog.

Variable T : prog V A this.

Definition inject_set t := 
  t = Unfinished \/ exists t', t' \In T /\ t = Inject w t'. 
Definition inject_prog := @Prog _ _ _ inject_set (or_introl (erefl _)).
End Prog.

Definition inject_s : spec A :=
  (fun i => exists i1 i2, i = i1 \+ i2 /\ i1 \In Coh V /\ s.1 i1, 
   fun i y m => forall i1 i2, i = i1 \+ i2 -> i1 \In Coh V -> 
     exists m1 m2, [/\ m = m1 \+ m2, s.2 i1 y m1 &
                       network_rely W2 this i2 m2]).

Lemma inject_has_spec : inject_prog (code_of e) \In has_spec this W inject_s.

Definition inject := with_spec (DTbin_make inject_has_spec).

End Inject.

From DiSeL
Require Import InductiveInv.

Section InductiveInv.
Variable pr : protocol.

Notation l := (plab pr).
Notation coh := (coh pr).
Variable I : dstatelet -> pred nid -> Prop.
Variable ii : InductiveInv pr I.

Variables (A : Type) (this: nid).
Notation V := (mkWorld pr).
Notation W := (mkWorld (ProtocolWithIndInv ii)).

Variable (e : DT this V A).
Notation s := (spec_of e).

Section Prog.

Variable T : prog V A this.

Definition with_inv_set t := 
  t = Unfinished \/ exists t', t' \In T /\ t = WithInv pr I ii (erefl _) t'. 
Definition with_inv_prog := @Prog _ _ _ with_inv_set (or_introl (erefl _)).
End Prog.

Notation getS i := (getStatelet i l).

Definition with_inv_s : spec A :=
  (fun i => s.1 i, 
   fun i y m => m \In Coh W /\ s.2 i y m).

Lemma with_inv_has_spec : with_inv_prog (code_of e) \In has_spec this W with_inv_s.

Definition with_inv := with_spec (DTbin_make with_inv_has_spec).

End InductiveInv.

Definition conseq (W : world) A this (e : DT this W A) (s : spec A) := 
  forall i, s.1 i -> verify i e (s.2 i). 

Lemma conseq_refl (W : world) A this (e : DT this W A) :
  conseq e (spec_of e).

Hint Resolve conseq_refl.

Section Do.

Variable this : nid.
Variables (W : world) (A : Type) (s2 : spec A).
Variables (e : DT this W A) (pf : conseq e s2).

Definition do_prog := DTbin.prog_of (code_of e).

Lemma do_has_spec : do_prog \In has_spec this W s2. 

Definition do' := DTbin_make do_has_spec.

End Do.

Notation iinject x := (@inject _ _ _ _ _ _ x).
Notation uinject x := (@inject _ _ _ Unit _ _ x).

Notation "'Do' e" := (@do' _ _ _ _ e _) (at level 80).

Notation "x '<--' c1 ';' c2" := (bind c1 (fun x => c2)) 
  (at level 81, right associativity).
Notation "c1 ';;' c2" := (bind c1 (fun _ => c2)) 
  (at level 81, right associativity). *)
(* InferenceRules:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Domain Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InductiveInv.
Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Definition logvar {B A} (s : A -> spec B) : spec B := 
  (fun i => exists x : A, (s x).1 i, 
   fun y i m => forall x : A, (s x).2 y i m).

Definition binarify {A} (p : pre) (q : cont A) : spec A := 
  (p, fun i y m => p i -> q y m).

Notation "'DHT' [ this , W ] ( p , q ) " := 
  (DTbin this W (binarify p q)) (at level 0, 
   format "'[hv ' DHT  [ this , W ]  ( '[' p , '/' q ']' ) ']'").  

Notation "{ x .. y }, 'DHT' [ this , W ] ( p , q )" :=
  (DTbin this W (logvar (fun x => .. (logvar (fun y => binarify p q)) .. )))
   (at level 0, x binder, y binder, right associativity,
    format "'[hv ' { x .. y }, '/ ' DHT  [ this , W ]  ( '[' p , '/' q ']' ) ']'").

Section BasicRules.

Variable this : nid.

Lemma vrf_coh W A (e : DT this W A) i r : 
        (i \In Coh W -> verify i e r) -> verify i e r.

Lemma vrf_pre W A (e : DT this W A) i i' (k : cont A) : 
        verify i e k -> network_rely W this i i' -> verify i' e k. 

Lemma vrf_post W A (e : DT this W A) i (k : cont A) : 
        verify i e k ->
        verify i e (fun x m => forall m', network_rely W this m m' -> k x m').

Lemma bind_rule W A B (e1 : DT this W A) (e2 : A -> DT this W B) i 
             (q : cont A) (r : cont B) : 
        verify i e1 q -> 
        (forall y j, q y j -> j \In Coh W  -> verify j (e2 y) r) ->
        verify i (bind e1 e2) r.

Arguments bind_rule [W A B e1 e2 i].

Lemma step W A B (e1 : DT this W A) (e2 : A -> DT this W B) i (r : cont B) : 
        verify i e1 (fun y m => verify m (e2 y) r) ->
        verify i (bind e1 e2) r.

Lemma call_rule' W A i (f : DT this W A) (k : cont A) : 
  
  (i \In Coh W -> pre_of f i) ->
  
  (forall x m, post_of f i x m -> m \In Coh W -> k x m) ->
  verify i f k.

Lemma call_rule W A (p : Pred state) (q : A -> Pred state) i
      {e} (k : cont A) : 
        (i \In Coh W -> p i) -> 
        (forall x m, q x m -> m \In Coh W -> k x m) ->
        verify i (@with_spec this W A (binarify p q) e) k.

Section GhostRules.

Variables (W : world) (A B C : Type). 

Lemma vrf_mono (e : DT this W A) i (r1 r2 : cont A) : 
        r1 <== r2 -> verify i e r1 -> verify i e r2. 

Variable (e : DT this W A).

Lemma ghE (s : B -> C -> spec A) : 
        conseq e (logvar (fun x => logvar (s x))) <->
        conseq e (logvar (fun xy => s xy.1 xy.2)).

Lemma ghC (p : B -> pre) (q : B -> A -> pre) :
        (forall i x, p x i -> i \In Coh W -> verify i e (q x)) ->
        conseq e (logvar (fun x => binarify (p x) (q x))).

Variables (s : C -> spec A) (f : DTbin this W (logvar s)).

Lemma gh_conseq t : conseq f (s t).

Lemma gh_ex g i (k : cont A) : 
        verify i (do' (@gh_conseq g)) k ->
        verify i (@with_spec this W A (logvar s) f) k.

End GhostRules.

Arguments gh_ex [W A C s f].

Lemma act_rule W A (a: action W A this) i (r : cont A) :
  (forall j, network_rely W this i j -> a_safe a j /\
   forall y k m, (exists pf : a_safe a j, a_step pf k y) -> network_rely W this k m -> r y m) ->
        verify i (act a) r. 

Lemma ret_rule W A i (v : A) (r : cont A) : 
       (forall m, network_rely W this i m -> r v m) ->       
       verify i (ret this W v) r. 

End BasicRules.

Section InjectLemmas.

Variable this : nid.
Variables (W V : world) (K : hooks) (A : Type) (w : injects V W K).
Notation W2 := (inj_ext w).

Variable (e1 : DT this V A).

Lemma inject_rule i j (r : cont A) : 
        i \In Coh V -> 
        verify i e1 (fun x i' => forall j', 
          i' \+ j' \In Coh W -> network_rely W2 this j j' -> r x (i' \+ j')) ->
        verify (i \+ j) (inject w e1) r.

End InjectLemmas.

Section InductiveInvLemmas.

Variable pr : protocol.

Notation l := (plab pr).
Variable I : dstatelet -> pred nid -> Prop.
Variable ii : InductiveInv pr I.

Variables (A : Type) (this: nid).
Notation V := (mkWorld pr).
Notation W := (mkWorld (ProtocolWithIndInv ii)).

Variable (e : DT this V A).

Notation getS i := (getStatelet i l).

Lemma with_inv_rule' i (r : cont A) : 
  verify i e (fun x m =>
              I (getS m) (nodes pr (getS m)) -> r x m) ->
        verify i (with_inv ii e) r.

Lemma with_inv_rule i (r : cont A) : 
        verify i e (fun x m => r x m) ->
        verify i (with_inv ii e) r.

End InductiveInvLemmas. *)
From DiSeL
Require Import InductiveInv While.
(* InductiveInv:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.
Require FunctionalExtensionality.
Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Module ProtocolWithInvariant.
Section ProtocolWithInvariant.

Variable p : protocol.

Notation l := (plab p).
Notation coh := (coh p).

Variable I : dstatelet -> pred nid -> Prop.

Variable d0 : dstatelet.

Definition W := mkWorld p.

Notation toSt d := (l \\-> d).

Definition cohI :=
  [Pred d | coh d /\ I d (nodes p d)].

Lemma cohIVd d : cohI d -> valid (dstate d).

Lemma cohIVs d : cohI d -> valid (dsoup d).

Lemma cohIDom d : cohI d -> dom (dstate d) =i nodes p d.

Definition CohI := CohPred (CohPredMixin cohIVd cohIVs cohIDom).

Lemma st_helper d : (getStatelet (toSt d) l) = d.

Lemma cohSt d : coh d -> Coh W (toSt d).

Section SendInvWrapper.

Variable st : send_trans coh.

Definition send_safeI this to d m :=
  send_safe st this to d m /\ I d (nodes p d).

Lemma s_safe_cohI this to d m : send_safeI this to d m -> CohI d.

Lemma s_safe_inI this to d m : send_safeI this to d m ->
                               this \in nodes p d /\ to \in nodes p d.

Definition send_stepI: send_step_t (send_safeI) :=
  fun this to d msg S => (@send_step _ _ st this to d msg (proj1 S)).

Lemma s_safe_defI this to d msg :
  send_safeI this to d msg <->
  exists b pf, @send_stepI this to d msg pf = Some b.

Definition S_inv := forall this to d msg (S : send_safe st this to d msg) b,
    I d (nodes p d) -> Some b = send_step S ->
    let: f' := upd this b (dstate d) in
    let: s' := (post_msg (dsoup d) (Msg (TMsg (t_snd st) msg) this to true)).1 in
    let: d' := DStatelet f' s' in
    (forall z, z == this = false -> getLocal z d' = getLocal z d) ->
    I d' (nodes p d').

Hypothesis HIstep : S_inv.

Lemma s_step_cohI : s_step_coh_t CohI (t_snd st) send_stepI.

Definition snd_transI := SendTrans s_safe_cohI s_safe_inI s_safe_defI s_step_cohI.

End SendInvWrapper.

Section ReceiveInvWrapper.

Variable rt : receive_trans coh.

Definition receive_stepI: receive_step_t CohI :=
  fun this from m d C pf => receive_step rt from m (proj1 C) pf.

Definition R_inv := forall d from this i (C : coh d) m
                           (pf: this \in nodes p d),
    I d (nodes p d) ->
    find i (dsoup d) = Some (Msg m from this true) ->
    this \in dom (dstate d) ->
    msg_wf rt C this from m -> tag m = t_rcv rt ->
    let: loc' := receive_step rt from m C pf in
    let: s'' := consume_msg (dsoup d) i in
    let: f' := upd this loc' (dstate d) in
    let: d' := (DStatelet f' s'') in
    (forall z, z == this = false -> getLocal z d' = getLocal z d) ->
    I d' (nodes p d').

Hypothesis HIstep : R_inv.

Notation msg_wfI := (fun d (C : CohI d) => msg_wf rt (proj1 C)).

Lemma r_step_cohI :
  r_step_coh_t msg_wfI (t_rcv rt) receive_stepI.

Definition rcv_transI := @ReceiveTrans _ CohI _ msg_wfI _ r_step_cohI.

End ReceiveInvWrapper.

Structure SendInv := SI {
  st : send_trans coh;
  st_inv : S_inv st;
}.

Structure ReceiveInv := RI {
  rt : receive_trans coh;
  rt_inv : R_inv rt;
}.

Structure InductiveInv := II {
  sts : seq SendInv;
  rts : seq ReceiveInv;
  _ : map st sts = snd_trans p;
  _ : map rt rts = rcv_trans p
}.

Definition stsI sts := map (fun stt =>
                          @snd_transI (st stt) (@st_inv stt)) sts.
Definition rtsI rts := map (fun rtt =>
                          @rcv_transI (rt rtt) (@rt_inv rtt)) rts.

Import FunctionalExtensionality.

Variable ii : InductiveInv.

Lemma us : uniq (map (@t_snd _ _) (stsI (sts ii))).

Lemma ur : uniq (map (@t_rcv _ _) (rtsI (rts ii))).

Definition ProtocolWithIndInv := @Protocol _ l _ _ _ us ur.

Lemma stIn (s : SendInv) :
  s \In (sts ii) ->
  (snd_transI (@st_inv s)) \In (snd_trans ProtocolWithIndInv).

Lemma rtIn (r : ReceiveInv) :
  r \In (rts ii) ->
  (rcv_transI (@rt_inv r)) \In (rcv_trans ProtocolWithIndInv).

Lemma getInvSendTrans st z to msg s1 h :
  st \In (snd_trans ProtocolWithIndInv) ->
  forall (S : send_safe st z to (getStatelet s1 (plab p)) msg),
  Some h = send_step S ->
  exists st', [/\ st' \In get_st (mkWorld p) (plab p),
     t_snd st' = t_snd st,
     all_hooks_fire (mkWorld p) (plab p) (t_snd st') s1 z msg to &          
     exists S': (send_safe st' z to (getStatelet s1 (plab p)) msg),
       Some h = send_step S'].

End ProtocolWithInvariant.

Section InductiveInvConj.

Variable p : protocol.

Definition s_inv_conj (I1 I2 : dstatelet -> pred nid -> Prop)
           (st : send_trans (coh p)) :=
  S_inv (fun d n => I1 d n /\ I2 d n) st.

Lemma s_inv_conjC I1 I2 st :
  s_inv_conj I1 I2 st <-> s_inv_conj I2 I1 st.

Lemma s_inv_conjA I1 I2 I3 st :
  s_inv_conj I1 (fun d n => I2 d n /\ I3 d n) st <->
  s_inv_conj (fun d n => I1 d n /\ I2 d n) I3 st.

Definition r_inv_conj (I1 I2 : dstatelet -> pred nid -> Prop)
           (rt : receive_trans (coh p)) :=
  R_inv (fun d n => I1 d n /\ I2 d n) rt.

Lemma r_inv_conjC I1 I2 rt :
  r_inv_conj I1 I2 rt <-> r_inv_conj I2 I1 rt.

Lemma r_inv_conjA I1 I2 I3 rt :
  r_inv_conj I1 (fun d n => I2 d n /\ I3 d n) rt <->
  r_inv_conj (fun d n => I1 d n /\ I2 d n) I3 rt.

End InductiveInvConj.

End ProtocolWithInvariant.

Module PWIExports.
Section PWIExports.

Import ProtocolWithInvariant.

Definition st_helper := st_helper.
Definition cohSt := cohSt.

Definition S_inv := ProtocolWithInvariant.S_inv.
Definition R_inv := ProtocolWithInvariant.R_inv.

Definition SendInv := SendInv.
Definition SI := SI.
Definition ReceiveInv := ReceiveInv.
Definition RI := RI.

Definition InductiveInv := InductiveInv.

Lemma with_inv_coh pr I (ii : InductiveInv pr I) s:
  s \In Coh (mkWorld (ProtocolWithIndInv ii)) ->    
  s \In Coh (mkWorld pr).

Lemma with_inv_nodes pr I (ii : InductiveInv pr I) l :
  nodes (getProtocol (mkWorld (ProtocolWithIndInv ii)) l) =
  nodes (getProtocol (mkWorld pr) l).

Lemma with_inv_labE pr I (ii : InductiveInv pr I):
  plab (ProtocolWithIndInv ii) = plab pr.

Lemma with_inv_step pr I (ii : InductiveInv pr I) z s1 s2:
  s1 \In Coh (mkWorld (ProtocolWithIndInv ii)) ->
  network_step (mkWorld pr) z s1 s2 ->
  network_step (mkWorld (ProtocolWithIndInv ii)) z s1 s2.

Lemma with_inv_step' pr I (ii : InductiveInv pr I) z s1 s2:
  network_step (mkWorld (ProtocolWithIndInv ii)) z s1 s2 ->
  network_step (mkWorld pr) z s1 s2.

Lemma with_inv_rely' pr I (ii : InductiveInv pr I) z s1 s2:
  network_rely (mkWorld (ProtocolWithIndInv ii)) z s1 s2 ->
  network_rely (mkWorld pr) z s1 s2.

Definition ProtocolWithIndInv := ProtocolWithIndInv.

End PWIExports.
End PWIExports.

Export PWIExports. *)
(* While:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX DepMaps Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Section While.
Variable this : nid.
Variable W : world.

Variable A B : Type.
Variable cond : B -> bool.
Variable I : A -> cont B.
Variable I_stable : forall a b s0 s1, I a b s0 -> network_rely W this s0 s1 -> I a b s1.

Notation body_spec' :=
  (fun b a => binarify (fun s => cond b /\ I a b s) (fun b' s1 => I a b' s1)).

Notation body_spec := (forall b : B, DTbin this W (logvar (body_spec' b))).

Variable body : body_spec.

Definition loop_spec := forall b, 
  {a : A}, DHT [this, W]
  (fun s => I a b s, fun b' s1 => ~~ cond b' /\ I a b' s1).

Program Definition while b0 : 
  {a : A}, DHT [this, W]
  (fun s => I a b0 s,
   fun b' s1 => ~~ cond b' /\ I a b' s1) :=
  Do (ffix (fun (rec : loop_spec) (b : B) =>
              Do (if cond b
                  then (b' <-- body b;
                       rec b')
                  else ret _ _ b)) b0).

End While. *)
From DiSeL
Require Import CalculatorProtocol CalculatorInvariant.
(* CalculatorProtocol:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
From DiSeL
Require Import SeqLib.
Set Implicit Arguments.
Unset Strict Implicit.
Import Prenex Implicits.

Module CalculatorProtocol.
Section CalculatorProtocol.

Definition input := seq nat.

Variable f : input -> option nat.
Variable prec : input -> bool.
Hypothesis prec_valid :
  forall i, prec i -> exists v, f i = Some v.

Variable cs: seq nid.
Variable cls : seq nid.

Notation nodes := (cs ++ cls).

Hypothesis Huniq : uniq nodes.

Definition st := ptr_nat 1.

Definition perm := (nid * nat * (seq nat))%type.
Definition cstate := seq perm.

Definition all_valid (s : cstate) := all (fun e => prec e.2) s.

Definition localCoh (n : nid) : Pred heap :=
  [Pred h | exists (s : cstate), h = st :-> s /\ all_valid s].

Definition req : nat := 0.
Definition resp : nat := 1.

Definition tags := [:: req; resp].

Definition cohMsg (ms: msg TaggedMessage) : Prop :=
  let body := content ms in
  if tag body == resp then
    [/\ from ms \in cs, to ms \in cls &
        exists v args, tms_cont body = [:: v] ++ args]
  else [/\ tag body == req,
        from ms \in cls, to ms \in cs &
        exists args,
          tms_cont body = args /\
          prec args].

Definition soupCoh : Pred soup :=
  [Pred s | valid s /\ forall m ms, find m s = Some ms -> cohMsg ms].

Definition calcoh d : Prop :=
  let: dl := dstate d in
  let: ds := dsoup d in
  [/\ soupCoh ds, dom dl =i nodes,
   valid dl &
   forall n, n \in nodes -> localCoh n (getLocal n d)].

Lemma l1 d: calcoh d -> valid (dstate d).

Lemma l2 d: calcoh d -> valid (dsoup d).

Lemma l3 d: calcoh d -> dom (dstate d) =i nodes.

Definition CalCoh := CohPred (CohPredMixin l1 l2 l3).

Lemma consume_coh d m : CalCoh d -> soupCoh (consume_msg (dsoup d) m).

Lemma trans_updDom this d s :
  this \in nodes -> CalCoh d -> dom (upd this s (dstate d)) =i nodes.

Lemma cs_in_nodes n : n \in cs -> n \in nodes.

Lemma cohSt n d (C : CalCoh d) s:
  find st (getLocal n d) = Some s ->
  dyn_tp s = cstate.

Definition getSt n d (C : CalCoh d) : cstate :=
  match find st (getLocal n d) as f return _ = f -> _ with
    Some v => fun epf => icast (sym_eq (cohSt C epf)) (dyn_val v) 
  | _ => fun epf => [::]
  end (erefl _).

Lemma getStK n d (C : CalCoh d)  s :
  getLocal n d = st :-> s -> getSt n C = s.

Lemma getStE n i j C C' (pf : n \in nodes) :
  getLocal n j = getLocal n i ->
  @getSt n j C' = @getSt n i C.

Lemma getStE' n i j C C' (pf : n \in nodes) :
  @getSt n j C' = @getSt n i C ->
  getLocal n j = getLocal n i.

Notation coh := CalCoh.

Section ServerReceiveTransition.

Definition sr_wf d (_ : coh d) (this from : nid) msg :=
  prec msg.

Definition sr_step : receive_step_t coh :=
  fun this (from : nid) (m : seq nat) d (pf : coh d) (pt : this \in nodes) =>
    if this \in cs
    then let s := getSt this pf in
         st :-> ((from, this, m) :: s)
    else getLocal this d.

Lemma sr_step_coh : r_step_coh_t sr_wf req sr_step.

Definition server_recv_trans := ReceiveTrans sr_step_coh.

End ServerReceiveTransition.

Section ServerSendTransition.

Definition entry_finder (to : nid) msg :=
  let: ans := head 0 msg in
  fun e : perm => 
    let: (n, _, args) := e in
    [&& n == to, f args == Some ans &
        msg == ans :: args].

Definition can_send (s : cstate) to msg :=
  has (entry_finder to msg) s.

Definition ss_safe (this to : nid)
           (d : dstatelet) (msg : seq nat) :=
  to \in cls /\ this \in cs /\
  exists (C : coh d), 
  has (entry_finder to msg) (getSt this C).         

Lemma ss_safe_coh this to d m : ss_safe this to d m -> coh d.

Lemma ss_safe_in this to d m : ss_safe this to d m ->
                             this \in nodes /\ to \in nodes.

Lemma ss_safe_this this to d m :
  ss_safe this to d m -> this \in cs.

Definition ss_step (this to : nid) (d : dstatelet)
           (msg : seq nat)
           (pf : ss_safe this to d msg) :=
  let C := ss_safe_coh pf in 
  let s := getSt this C in
  Some (st :-> remove_elem s (to, this, (behead msg))).

Lemma ss_step_coh : s_step_coh_t coh resp ss_step.

Lemma ss_safe_def this to d msg :
      ss_safe this to d msg <->
      exists b pf, @ss_step this to d msg pf = Some b.

Definition server_send_trans :=
  SendTrans ss_safe_coh ss_safe_in ss_safe_def ss_step_coh.

End ServerSendTransition.

Section ClientSendTransition.

Definition cs_safe (this to : nid)
           (d : dstatelet) (msg : seq nat) :=
  [/\ to \in cs, this \in cls, coh d & prec msg].         

Lemma cs_safe_coh this to d m : cs_safe this to d m -> coh d.

Lemma cs_safe_in this to d m : cs_safe this to d m ->
                             this \in nodes /\ to \in nodes.

Definition cs_step (this to : nid) (d : dstatelet)
           (msg : seq nat)
           (pf : cs_safe this to d msg) :=
  let C := cs_safe_coh pf in 
  let s := getSt this C in
  Some (st :-> ((this, to, msg)::s)).

Lemma cs_step_coh : s_step_coh_t coh req cs_step.

Lemma cs_safe_def this to d msg :
      cs_safe this to d msg <->
      exists b pf, @cs_step this to d msg pf = Some b.

Definition client_send_trans :=
  SendTrans cs_safe_coh cs_safe_in cs_safe_def cs_step_coh.

End ClientSendTransition.

Section ClientReceiveTransition.

Definition cr_wf d (C : coh d) this from (msg : seq nat) :=
  let s := getSt this C in
  let: args := (behead msg) in
  [&& (this, from, args) \in s &
     size msg > 2].

Definition cr_step : receive_step_t coh := 
  fun this (from : nid) (m : seq nat) d (pf : coh d) (pt : this \in nodes) =>
    let s := getSt this pf : seq perm in
    st :-> remove_elem s (this, from, (behead m) : seq nat).

Lemma cr_step_coh : r_step_coh_t cr_wf resp cr_step.

Definition client_recv_trans := ReceiveTrans cr_step_coh.

End ClientReceiveTransition.

Section Protocol.

Variable l : Label.

Definition cal_sends :=    [:: server_send_trans; client_send_trans].
Definition cal_receives := [:: server_recv_trans; client_recv_trans].

Program Definition CalculatorProtocol : protocol :=
  @Protocol _ l _ cal_sends cal_receives _ _.

End Protocol.
End CalculatorProtocol.

Module Exports.

Definition CalculatorProtocol := CalculatorProtocol.

Definition CalCoh := CalCoh.

Definition server_send_trans := server_send_trans.
Definition server_recv_trans := server_recv_trans.
Definition client_send_trans := client_send_trans.
Definition client_recv_trans := client_recv_trans.

Definition req := req.
Definition resp := resp.
Notation input := (seq nat).
Definition cstate := cstate.

Definition getSt := getSt.
Definition getStK := getStK.
Definition getStE := getStE.
Definition getStE' := getStE'.

End Exports.

End CalculatorProtocol.

Export CalculatorProtocol.Exports. *)
(* CalculatorInvariant:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
From DiSeL
Require Import InductiveInv StatePredicates.
From DiSeL
Require Import CalculatorProtocol.

Section CalculatorInductiveInv.

Variable l : Label.

Variable f : input -> option nat.
Variable prec : input -> bool.
Hypothesis prec_valid :
  forall i, prec i -> exists v, f i = Some v.

Variable cs: seq nid.
Variable cls : seq nid.

Notation nodes := (cs ++ cls).

Hypothesis Huniq : uniq nodes.

Notation cal := (CalculatorProtocol f prec cs cls l).
Notation sts := (snd_trans cal).
Notation rts := (rcv_trans cal).

Definition reqs := cstate.
Notation coh := (coh cal).

Notation loc n d := (getLocal n d).

Lemma nodes_falso z : z \in cs -> z \in cls -> False.

Definition CalcInv d :=
  forall (C: coh d) n to v args i s',
    n \in cls -> to \in cs -> 
    dsoup d = i \\-> (Msg (TMsg resp (v::args)) to n true) \+ s' ->
    f args = Some v.

Notation cal' := (CalculatorProtocol f prec cs cls l).
Notation coh' := (coh cal).
Notation Sinv := (@S_inv cal (fun d _ => CalcInv d)).
Notation Rinv := (@R_inv cal (fun d _ => CalcInv d)).
Notation PI := pf_irr.

Program Definition s1: Sinv (server_send_trans f prec cs cls).

Program Definition s2: Sinv (client_send_trans prec cs cls).

Program Definition r1: Rinv (server_recv_trans prec cs cls).

Program Definition r2: Rinv (client_recv_trans prec cs cls).

Definition sts' := [:: SI s1; SI s2].
Definition rts' := [:: RI r1; RI r2].

Program Definition ii := @ProtocolWithInvariant.II _ _ sts' rts' _ _.

Definition cal_with_inv := ProtocolWithIndInv ii.

End CalculatorInductiveInv. *)
From DiSeL
Require Import CalculatorClientLib.
(* CalculatorClientLib:
From mathcomp.ssreflect
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq.
From mathcomp
Require Import path.
Require Import Eqdep.
Require Import Relation_Operators.
From fcsl
Require Import axioms pred prelude ordtype finmap pcm unionmap heap.
From DiSeL
Require Import Freshness State EqTypeX Protocols Worlds NetworkSem Rely.
From DiSeL
Require Import Actions Injection Process Always HoareTriples InferenceRules.
From DiSeL
Require Import InductiveInv While.
From DiSeL
Require Import CalculatorProtocol CalculatorInvariant.
From DiSeL
Require Import SeqLib.

Section CalculatorRecieve.

Variable l : Label.

Variable f : input -> option nat.
Variable prec : input -> bool.

Variable cs: seq nid.
Variable cls : seq nid.

Notation nodes := (cs ++ cls).

Hypothesis Huniq : uniq nodes.

Notation cal := (cal_with_inv l f prec cs cls).
Notation sts := (snd_trans cal).
Notation rts := (rcv_trans cal).

Notation W := (mkWorld cal).

Variable cl : nid.
Hypothesis  Hc : cl \in cls.

Program Definition tryrecv_resp_act := act (@tryrecv_action_wrapper W cl
      (fun k _ t b => (k == l) && (t == resp)) _).

Notation loc i := (getLocal cl (getStatelet i l)).
Notation st := (ptr_nat 1).

Export CalculatorProtocol.

Program Definition tryrecv_resp :
  {rs : reqs}, DHT [cl, W]
  (fun i => loc i = st :-> rs,
   fun (r : option perm) m =>
     match r with
     | Some (from, _, ms) =>
       let v := head 0 ms in
       let args := behead ms in
       exists rs' : reqs,
       [/\ loc m = st :-> rs',
        perm_eq rs ((cl, from, args) :: rs') &
        f args = Some v]
     | None => loc m = st :-> rs
     end) 
  := Do tryrecv_resp_act.    

Definition receive_loop_cond (res : option nat) := res == None .

Definition receive_loop_inv (rs : reqs) :=
  fun r i =>
    match r with
     | Some v =>
       exists (rs' : reqs) from args ,
       [/\ loc i = st :-> rs',
        perm_eq rs ((cl, from, args) :: rs') &
        f args = r]
     | None => loc i = st :-> rs
    end.

Program Definition receive_loop' :
  {(rs : reqs)}, DHT [cl, W]
  (fun i => loc i = st :-> rs,
   fun (res : option nat) m => 
     exists (rs' : reqs) v from args ,
       [/\ res = Some v, loc m = st :-> rs',
        perm_eq rs ((cl, from, args) :: rs') &
        f args = res]) :=
  Do _ (@while cl W _ _ receive_loop_cond receive_loop_inv _
        (fun r => Do _ (
           r <-- tryrecv_resp;
           match r with
           | Some (_, _, msg) => ret _ _ (Some (head 0 msg))
           | None => ret _ _ None
           end)) None).

Program Definition blocking_receive_resp :
  {(rs : reqs)}, DHT [cl, W]
  (fun i => loc i = st :-> rs,
   fun (res :  nat) m => 
     exists (rs': reqs) from args ,
       [/\ loc m = st :-> rs',
        perm_eq rs ((cl, from, args) :: rs') &
        f args = Some res]) :=
  Do _ (r <-- receive_loop';
        match r with
        | Some res => ret _ _ res
        | None => ret _ _ 0
        end).

Definition client_send_trans :=
  ProtocolWithInvariant.snd_transI (s2 l f prec cs cls).

Program Definition send_request server args :=
  act (@send_action_wrapper W cal cl l (prEq cal) client_send_trans _
                            args server).

Program Definition compute_f (server : nid) (args: seq nat) : 
  DHT [cl, W]
  (fun i =>
     [/\ loc i = st :-> ([::] : reqs),
      prec args & server \in cs],
   fun (res : nat) m => loc m = st :-> ([::] : reqs) /\
                        f args = Some res) :=
  Do _ (send_request server args;;
        blocking_receive_resp).

Definition compute_list_spec server ys :=
  forall (xs_acc : (seq input) * (seq (input * nat))),
  DHT [cl, W]
   (fun i =>
     let: (xs, acc) := xs_acc in         
     [/\ loc i = st :-> ([::] : reqs),
      all prec xs,
      all (fun e => f e.1 == Some e.2) acc,
      ys = map fst acc ++ xs &
      server \in cs],
   fun (res : seq (input * nat)) m =>
     [/\ loc m = st :-> ([::] : reqs),
      all (fun e => f e.1 == Some e.2) res &
      ys = map fst res]).

Program Definition compute_list_f server (xs : seq input) :
  DHT [cl, W]
   (fun i =>
     [/\ loc i = st :-> ([::] : reqs),
      all prec xs &
      server \in cs],
   fun (res : seq (input * nat)) m =>
     [/\ loc m = st :-> ([::] : reqs),
      all (fun e => f e.1 == Some e.2) res &

End CalculatorRecieve. *)
From DiSeL
Require Import SeqLib.
(* SeqLib:
From mathcomp
Require Import ssreflect ssrbool ssrnat eqtype ssrfun seq path.
Require Import Eqdep.

Fixpoint remove_elem (xs : seq (nat * nat * seq nat)) e :=
  match xs with
  | x :: xs => if x == e then xs else x :: (remove_elem xs e)
  | [::] => [::]
  end.

Lemma remove_elem_all xs p e :
  all p xs -> all p (remove_elem xs e).

Lemma remove_elem_in xs e :
  if e \in xs
  then perm_eq (e :: (remove_elem xs e)) xs = true
  else (remove_elem xs e) = xs. *)

Section CalculatorServerLib.

Variable l : Label.
Variable f : input -> option nat.
Variable prec : input -> bool.
Variables (cs cls : seq nid).
Notation nodes := (cs ++ cls).
Hypothesis Huniq : uniq nodes.

Notation cal := (CalculatorProtocol f prec cs cls l).
Notation sts := (snd_trans cal).
Notation rts := (rcv_trans cal).
Notation W := (mkWorld cal).

Variable sv : nid.
Hypothesis  Hs : sv \in cs.
Notation loc i := (getLocal sv (getStatelet i l)).

Export CalculatorProtocol.

Program Definition tryrecv_req_act := act (@tryrecv_action_wrapper W sv
      (fun k _ t b => (k == l) && (t == req)) _).
Next Obligation. by case/andP:H=>/eqP->; rewrite domPt inE/=. Qed.

Program Definition tryrecv_req :
  {ps : reqs}, DHT [sv, W]
  (fun i => loc i = st :-> ps,
   fun (r : option perm) m =>
     match r with
     | Some (from, t, args) =>
       [/\ loc m = st :-> ((from, sv, args) :: ps),
        prec args & from \in cls]
     | None => loc m = st :-> ps
     end) 
  := Do tryrecv_req_act.    
Next Obligation.
apply: ghC=>i1 ps E1 C1.
apply: act_rule=>i2 R1; split=>//=; first by apply: (proj2 (rely_coh R1)).
move=>r i3 i4[_]/=St R3.
case: St=>C2; case.
- by move=>[]?->Z; subst i3;rewrite (rely_loc' _ R3) (rely_loc' _ R1).
case=>k[m][tms][from][rt][pf'][[F]]H1 H2 H3/andP[/eqP Z]H4/= Z'->; subst k i3. 
move: rt  pf' (coh_s l C2) H1 H2 H3 H4 R3.
rewrite prEq=>rt  pf' cohs H1 H2 H3 H4 R3.
case: H1 H4; last by case=>//=->. 
move=>Z _; subst rt; move: H3; rewrite /msg_wf/=/sr_wf=>->; split=>//.
set d := (getStatelet i2 l).
have P1: valid (dstate d) by apply: (cohVl cohs).
have P2: valid i2 by apply: (cohS (proj2 (rely_coh R1))).
have P3: l \in dom i2 by rewrite -(cohD(proj2(rely_coh R1)))domPt inE/=.
rewrite -(rely_loc' _ R1) in E1.
- by rewrite (rely_loc' _ R3)/= locE//=/sr_step Hs/= (getStK cohs E1).
case: (cohs)=>Cs _ _ _. move/esym: F=> F.
by case: Cs=>_/(_ _ _ F); rewrite /cohMsg/= H2/=; case.
Qed.

Definition receive_req_loop_cond (res : option (nid * input)) := res == None.

Definition receive_req_loop_inv (ps : reqs) :=
  fun (r : option (nid * input)) i =>
    match r with
     | Some (from, args) =>
       [/\ loc i = st :-> ((from, sv, args) :: ps),
        prec args & from \in cls]
     | None => loc i = st :-> ps
    end.

Program Definition receive_req_loop :
  {ps : reqs}, DHT [sv, W]
  (fun i => loc i = st :-> ps,
   fun (r : option (nid * input)) m =>
     exists from args,
     [/\ r = Some (from, args),
      loc m = st :-> ((from, sv, args) :: ps),
      from \in cls &
      prec args]) := 
  Do _ (@while sv W _ _ receive_req_loop_cond receive_req_loop_inv _
        (fun r => Do _ (
           r <-- tryrecv_req;
           match r with
           | Some (from, _, args) => ret _ _ (Some (from, args))
           | None => ret _ _ None
           end)) None).

Next Obligation. by apply: with_spec x. Defined.
Next Obligation.
by move:H; rewrite /receive_req_loop_inv (rely_loc' _ H0).
Qed.
Next Obligation.
apply:ghC=>i1 ps/=[/eqP H1]L1 C1; subst r.
apply: step; apply: (gh_ex (g:=ps)).
apply: call_rule=>//r i2/=; case: r; last first.
- by move=>L2 C2; apply: ret_rule=>i3 R2; rewrite -(rely_loc' _ R2) in L2.
case=>[[from to] args]E2 C2; apply: ret_rule=>i3 R2/=.
by rewrite (rely_loc' _ R2). 
Qed.
Next Obligation.
apply: ghC=>i ps E1 C1; apply: (gh_ex (g:=ps)).
apply: call_rule=>//res m[].
rewrite /receive_req_loop_cond; case: res=>//=[[from args]]_ [H1 H2]C2.
by exists from, args. 
Qed.

Program Definition blocking_receive_req :
  {ps : reqs}, DHT [sv, W]
  (fun i => loc i = st :-> ps,
   fun (r : nid * input) m =>
     [/\ loc m = st :-> ((r.1, sv, r.2) :: ps),
      r.1 \in cls &
      prec r.2]) :=
  Do _ (r <-- receive_req_loop;
        match r with
        | Some res => ret _ _ res
        | None => ret _ _ (0, [::])
        end).
Next Obligation.
apply: ghC=>i ps E1 C1; apply: step; apply: (gh_ex (g:=ps)).
apply: call_rule=>//res i2[from][args][Z]E2 H1 H2 C2.
by subst res; apply: ret_rule=>i3 R2/=; rewrite (rely_loc' _ R2).
Qed.

Program Definition send_ans_act to msg :=
  act (@send_action_wrapper W cal sv l (prEq cal)
        (server_send_trans f prec cs cls) _ msg to).
Next Obligation. by rewrite /cal_sends /InMem/=; left. Qed.

Program Definition send_answer (to : nid) (args : seq nat) (ans : nat) :
  {ps : reqs}, DHT [sv, W]
  (fun i => [/\ loc i = st :-> ps, to \in cls,
             (to, sv, args) \in ps &
             f args = Some ans],                    
   fun (r : seq nat) m =>
       [/\ loc m = st :-> (remove_elem ps (to, sv, args)) &
       r = ans :: args]) 
  := Do send_ans_act to (ans :: args).    
Next Obligation.
apply: ghC=>i1 ps [L1]H1 H2 H3 C1.
apply: act_rule=>i2 R1.
move: (proj2 (rely_coh R1))=>C2.
case: (C2)=>_ _ _ _/(_ l); rewrite prEq=>C.
set d := (getStatelet i2 l).
split=>//[|r i3 i4[Sf]St R3].
- split=>//; first 1 last.
  + by rewrite/Actions.can_send mem_cat Hs/=
       -(cohD C2)/= domPt/= inE eqxx.
  + rewrite/Actions.filter_hooks umfilt0=>???.
    move => F.
    apply sym_eq in F.
    move: F.
    move/find_some.
    by rewrite dom0.
  split=>//; split=>//.
  exists C; rewrite -(rely_loc' _ R1) in L1; rewrite (getStK C L1).
  by apply/hasP; exists (to, sv, args)=>//=; rewrite H3 !eqxx.
rewrite (rely_loc' _ R3)=>{R3}.
case: St=>->[b]/=[][]->->/=; split=>//.
have P1: valid (dstate (getStatelet i2 l)). by apply: (cohVl C).
have P2: valid i2 by apply: (cohS (proj2 (rely_coh R1))).
have P3: l \in dom i2 by rewrite -(cohD(proj2(rely_coh R1))) domPt inE/=. 
rewrite -(rely_loc' _ R1) in L1.
by rewrite (pf_irr (ss_safe_coh _ ) C) locE// (getStK C L1).
Qed.

End CalculatorServerLib.
