

Require Import abp_base.
(* abp_base:
Global Set Asymmetric Patterns.

Inductive act : Set :=
  | r1 : act
  | r2 : act
  | r3 : act
  | r5 : act
  | r6 : act
  | s2 : act
  | s3 : act
  | s4 : act
  | s5 : act
  | s6 : act
  | c2 : act
  | c3 : act
  | c5 : act
  | c6 : act
  | int : act
  | delta : act
  | tau : act.

Parameter proc : Set.
Parameter ia : forall E : Set, act -> E -> proc.

Inductive one : Set :=
    i : one.

Definition Delta := ia one delta i.

Inductive list (A : Set) : Set :=
  | nil : list A
  | cons : A -> list A -> list A.

Inductive ehlist : Set :=
  | ehnil : ehlist
  | ehcons : act -> ehlist -> ehlist.

Definition In_list (N : Set) (n : N) (Y : list N) : Prop :=
  (fix F (l : list N) : Prop :=
     match l with
     | nil => False
     | cons y l0 => n = y :>N \/ F l0
     end) Y.

Definition In_ehlist (a : act) (H : ehlist) : Prop :=
  (fix F (e : ehlist) : Prop :=
     match e with
     | ehnil => False
     | ehcons a0 e0 => a = a0 :>act \/ F e0
     end) H.

Parameter alt : proc -> proc -> proc.
Parameter seq : proc -> proc -> proc.
Parameter mer : proc -> proc -> proc.
Parameter Lmer : proc -> proc -> proc.
Parameter comm : proc -> proc -> proc.
Parameter cond : proc -> bool -> proc -> proc.
Parameter sum : forall A : Set, (A -> proc) -> proc.
Parameter enc : ehlist -> proc -> proc.
Parameter hide : ehlist -> proc -> proc.
Parameter GRD : proc -> Prop.

Infix "+" := sum (left associativity, at level 50).

Definition gamma (a b : act) :=
  match a, b with
  | r2, s2 => c2
  | r3, s3 => c3
  | r5, s5 => c5
  | r6, s5 => c6
  | s2, r2 => c2
  | s3, r3 => c3
  | s5, r5 => c5
  | s6, r6 => c6
  | _, _ => delta
  end.

Parameter EQ : Set -> Set -> Prop.
Axiom EQ_refl : forall S1 : Set, EQ S1 S1.
Axiom EQ_sym : forall S1 S2 : Set, EQ S1 S2 -> EQ S2 S1.

Section COMMUNICATION_F.
Variable a b : act.
Variable E F : Set.
Variable e e1 e2 : E.
Variable f : F.
Axiom CF1 : ia E (gamma a b) e = comm (ia E a e) (ia E b e).
Axiom CF2 : gamma a b = delta -> Delta = comm (ia E a e1) (ia E b e2).
Axiom CF2' : e1 <> e2 -> Delta = comm (ia E a e1) (ia E b e2).
Axiom CF2'' : ~ EQ E F -> Delta = comm (ia E a e) (ia F b f).
End COMMUNICATION_F.

Axiom
  EXTE :
    forall (D : Set) (x y : D -> proc), (forall d : D, x d = y d) -> x = y.

Section BPA.
Variable x y z : proc.
Axiom A1 : alt x y = alt y x.
Axiom A2 : alt x (alt y z) = alt (alt x y) z.
Axiom A3 : x = alt x x.
Axiom A4 : alt (seq x z) (seq y z) = seq (alt x y) z.
Axiom A5 : seq x (seq y z) = seq (seq x y) z.
Axiom A6 : x = alt x Delta.
Axiom A7 : Delta = seq Delta x.
End BPA.

Goal forall x : proc, x = alt Delta x.
intro.
elim A1.
apply A6.
Save A6'.

Section GUARDED.
Variable D : Set.
Variable d : D.
Variable x y : proc.
Variable z : D -> proc.
Variable a : act.
Variable B : bool.
Variable L : ehlist.
Axiom G2 : GRD (ia D a d).
Axiom G5 : (forall d : D, GRD (z d)) -> GRD (D + z).
Axiom G6 : GRD x -> GRD (seq x y).
Axiom G7 : GRD x -> GRD (Lmer x y).
Axiom G8 : GRD x -> GRD y -> GRD (alt x y).
Axiom G9 : GRD x -> GRD y -> GRD (mer x y).
Axiom G10 : GRD x -> GRD y -> GRD (comm x y).
Axiom G11 : GRD x -> GRD y -> GRD (cond x B y).
Axiom G12 : GRD x -> GRD (hide L x).
Axiom G13 : GRD x -> GRD (enc L x).
End GUARDED.

Section PARALLEL_OPERATORS.
Variable x y z : proc.
Variable E F : Set.
Variable e : E.
Variable f : F.
Variable a b : act.
Axiom CM1 : alt (alt (Lmer x y) (Lmer y x)) (comm x y) = mer x y.
Axiom CM2 : seq (ia E a e) x = Lmer (ia E a e) x.
Axiom CM3 : seq (ia E a e) (mer x y) = Lmer (seq (ia E a e) x) y.
Axiom CM4 : alt (Lmer x z) (Lmer y z) = Lmer (alt x y) z.
Axiom
  CM5 :
    seq (comm (ia E a e) (ia F b f)) x = comm (seq (ia E a e) x) (ia F b f).
Axiom
  CM6 :
    seq (comm (ia E a e) (ia F b f)) x = comm (ia E a e) (seq (ia F b f) x).
Axiom
  CM7 :
    seq (comm (ia E a e) (ia F b f)) (mer x y) =
    comm (seq (ia E a e) x) (seq (ia F b f) y).
Axiom CM8 : alt (comm x z) (comm y z) = comm (alt x y) z.
Axiom CM9 : alt (comm x y) (comm x z) = comm x (alt y z).
End PARALLEL_OPERATORS.

Section STANDARD_CONCURRENCY. 
Variable x y z : proc.
Axiom SC1 : Lmer x (mer y z) = Lmer (Lmer x y) z.
Axiom SC3 : comm y x = comm x y.
Axiom SC4 : comm x (comm y z) = comm (comm x y) z.
Axiom SC5 : Lmer (comm x y) z = comm x (Lmer y z).
End STANDARD_CONCURRENCY.

Goal forall x y : proc, mer x y = mer y x.
intros.
elim CM1.
elim CM1.
elim SC3.
elim (A1 (Lmer x y) (Lmer y x)).
apply refl_equal.
Save SC6.

Goal forall x y z : proc, mer x (mer y z) = mer (mer x y) z.
intros.
repeat elim CM1.

repeat elim CM8.
repeat elim CM9.
repeat elim CM4.
repeat elim SC5.
repeat elim SC4.
repeat elim CM1.
repeat elim A2.
repeat elim SC1.
repeat elim CM1.
elim (A1 (Lmer z x) (Lmer x z)).
repeat elim A2.
elim (SC3 x z).
elimtype
 (alt (Lmer z (alt (Lmer y x) (alt (Lmer x y) (comm y x))))
    (alt (Lmer (comm y z) x)
       (alt (Lmer (comm x y) z) (alt (Lmer (comm z x) y) (comm x (comm y z))))) =
  alt (Lmer (comm x y) z)
    (alt (Lmer z (alt (Lmer x y) (alt (Lmer y x) (comm x y))))
       (alt (comm (Lmer x y) z) (alt (comm (Lmer y x) z) (comm x (comm y z)))))).
apply refl_equal.
elim
 (A1
    (alt (Lmer z (alt (Lmer x y) (alt (Lmer y x) (comm x y))))
       (alt (comm (Lmer x y) z) (alt (comm (Lmer y x) z) (comm x (comm y z)))))
    (Lmer (comm x y) z)).
repeat elim A2.
elimtype
 (alt (Lmer (comm y z) x)
    (alt (Lmer (comm x y) z) (alt (Lmer (comm z x) y) (comm x (comm y z)))) =
  alt (comm (Lmer x y) z)
    (alt (comm (Lmer y x) z) (alt (comm x (comm y z)) (Lmer (comm x y) z)))).
elimtype
 (alt (Lmer y x) (alt (Lmer x y) (comm y x)) =
  alt (Lmer x y) (alt (Lmer y x) (comm x y))).
apply refl_equal.
elim SC3.
elim A1.
elim A2.
elim (A1 (comm x y) (Lmer y x)).
apply refl_equal.
elim (SC3 (Lmer y x) z).
elim SC5.
elim
 (A1 (alt (Lmer (comm z y) x) (alt (comm x (comm y z)) (Lmer (comm x y) z)))
    (comm (Lmer x y) z)).
repeat elim A2.
elimtype
 (alt (Lmer (comm x y) z) (alt (Lmer (comm z x) y) (comm x (comm y z))) =
  alt (comm x (comm y z)) (alt (Lmer (comm x y) z) (comm (Lmer x y) z))).
elim (SC3 y z).
apply refl_equal.
elim (A1 (alt (Lmer (comm x y) z) (comm (Lmer x y) z)) (comm x (comm y z))).
elim A2.
elim (SC3 (Lmer x y) z).
elim SC5.
apply refl_equal.
Save SC7.

Section CONDITION.
Variable x y : proc.
Axiom COND1 : x = cond x true y.
Axiom COND2 : y = cond x false y.
End CONDITION.

Section SUM.
Variable D : Set.
Variable d : D.
Variable x y : D -> proc.
Variable p : proc.
Variable L : ehlist.
Axiom SUM1 : p = D + (fun d : D => p).
Axiom SUM3 : alt (D + x) (x d) = D + x.
Axiom SUM4 : alt (D + x) (D + y) = D + (fun d : D => alt (x d) (y d)).
Axiom SUM5 : D + (fun d : D => seq (x d) p) = seq (D + x) p.
Axiom SUM6 : D + (fun d : D => Lmer (x d) p) = Lmer (D + x) p.
Axiom SUM7 : D + (fun d : D => comm (x d) p) = comm (D + x) p.
Axiom SUM8 : D + (fun d : D => hide L (x d)) = hide L (D + x).
Axiom SUM9 : D + (fun d : D => enc L (x d)) = enc L (D + x).
End SUM.

Section HIDE.
Variable x y : proc.
Variable E : Set.
Variable e : E.
Variable a : act.
Variable L : ehlist.
Axiom TI1 : ~ In_ehlist a L -> ia E a e = hide L (ia E a e).
Axiom TI2 : In_ehlist a L -> ia one tau i = hide L (ia E a e).
Axiom TI3 : Delta = hide L Delta.
Axiom TI4 : alt (hide L x) (hide L y) = hide L (alt x y). 
Axiom TI5 : seq (hide L x) (hide L y) = hide L (seq x y). 
End HIDE.

Section ENCAPSULATION. 
Variable x y : proc. 
Variable E : Set.
Variable e : E.
Variable a : act. 
Variable L : ehlist.
Axiom D1 : ~ In_ehlist a L -> ia E a e = enc L (ia E a e).
Axiom D2 : In_ehlist a L -> Delta = enc L (ia E a e). 
Axiom D3 : Delta = enc L Delta.
Axiom D4 : alt (enc L x) (enc L y) = enc L (alt x y).
Axiom D5 : seq (enc L x) (enc L y) = enc L (seq x y).
End ENCAPSULATION. 

Axiom Handshaking : forall x y z : proc, Delta = comm x (comm y z).

Axiom
  T1 :
    forall (D : Set) (d : D) (a : act),
    ia D a d = seq (ia D a d) (ia one tau i).

Goal
forall (D : Set) (d : D) (a : act) (x : proc),
seq (ia D a d) x = seq (ia D a d) (seq (ia one tau i) x).
intros.
elimtype
 (seq (seq (ia D a d) (ia one tau i)) x =
  seq (ia D a d) (seq (ia one tau i) x)).
elim T1.
apply refl_equal.
apply sym_equal.
apply A5.
Save T1'.
 
Axiom
  KFAR2 :
    forall (D : Set) (d : D) (int : act) (x y : proc) (I : ehlist),
    In_ehlist int I ->
    x = alt (seq (ia D int d) (seq (ia D int d) x)) y ->
    seq (ia one tau i) (hide I x) = seq (ia one tau i) (hide I y).

Axiom
  RSP :
    forall (D : Set) (x y : D -> proc) (G : (D -> proc) -> D -> proc),
    (forall (p : D -> proc) (d : D), GRD (G p d)) ->
    (forall d : D, x d = G x d) ->
    (forall d : D, y d = G y d) -> forall d : D, x d = y d.

Hint Resolve G2 G5 G6 G7 G8 G9 G10 G11 G12 G13.

Goal forall B : bool, true = B \/ false = B.
intro.
elim B.
auto.
auto.
Save Lemma4.

Section EXP2_.
Variable x y : proc.
Goal alt (Lmer x y) (alt (Lmer y x) (comm x y)) = mer x y.
elim CM1.
elim A2.
apply refl_equal.
Save EXP2.
End EXP2_.

Section EXP3_.
Variable x y z : proc. 
Goal
alt (Lmer x (mer y z))
  (alt (Lmer y (mer x z))
     (alt (Lmer z (mer x y))
        (alt (Lmer (comm y z) x)
           (alt (Lmer (comm x y) z) (Lmer (comm x z) y))))) = 
mer x (mer y z).

elim (EXP2 x (mer y z)).
elim EXP2.

elim CM4.
elim SC1.
elim (SC6 x z).
elim CM4.
elim SC1.
elim (SC6 x y).
elim CM9.
elim CM9.
elim Handshaking.
elim A6.

elim SC5.
elim SC5.
repeat elim A2.
reflexivity.

Save EXP3.
End EXP3_. 

Goal
forall x y z u : proc,
alt (Lmer x (mer y (mer z u)))
  (alt (Lmer y (mer x (mer z u)))
     (alt (Lmer z (mer x (mer y u)))
        (alt (Lmer u (mer x (mer y z)))
           (alt (Lmer (comm z u) (mer x y))
              (alt (Lmer (comm y z) (mer x u))
                 (alt (Lmer (comm y u) (mer x z))
                    (alt (Lmer (comm x y) (mer z u))
                       (alt (Lmer (comm x z) (mer y u))
                          (Lmer (comm x u) (mer y z)))))))))) =
mer x (mer y (mer z u)).

intros.
elim (EXP2 x (mer y (mer z u))).
elim EXP3.
repeat elim CM4.
repeat elim SC1.
repeat elim CM9.
repeat elim SC5.
repeat elim Handshaking.
unfold Delta in |- *.
repeat elim CM2.
repeat elim A7.
repeat elim A6.
repeat elim A2.
elim (SC6 x (mer z u)).
elim (SC6 x (mer y u)).
elim (SC6 x (mer y z)).
elim (SC6 x u).
elim (SC6 x y).
elim (SC6 x z).
elim (SC6 y z).
apply refl_equal.
Save EXP4.

Section EXPH4_.
Variable x y z u : proc.
Variable H : ehlist.

Goal
alt (enc H (Lmer x (mer y (mer z u))))
  (alt (enc H (Lmer y (mer x (mer z u))))
     (alt (enc H (Lmer z (mer x (mer y u))))
        (alt (enc H (Lmer u (mer x (mer y z))))
           (alt (enc H (Lmer (comm z u) (mer x y)))
              (alt (enc H (Lmer (comm y z) (mer x u)))
                 (alt (enc H (Lmer (comm y u) (mer x z)))
                    (alt (enc H (Lmer (comm x y) (mer z u)))
                       (alt (enc H (Lmer (comm x z) (mer y u)))
                          (enc H (Lmer (comm x u) (mer y z))))))))))) =
enc H (mer x (mer y (mer z u))).

elim EXP4.
repeat elim D4.
apply refl_equal.
Save EXPH4.
End EXPH4_. *)

Require Import abp_defs.
(* abp_defs:
Require Import abp_base.

Section BOOL.
Variable b : bool.
Parameter andb orb : bool -> bool -> bool.
Parameter notb : bool -> bool.
Axiom andb1 : b = andb true b.
Axiom andb2 : false = andb false b.
Axiom orb1 : true = orb true b.
Axiom orb2 : b = orb false b.
Axiom notb1 : false = notb true.
Axiom notb2 : true = notb false.
End BOOL.

Section BIT.
Parameter bit : Set.
Parameter e0 e1 : bit. 
Parameter eqb : bit -> bit -> bool.
Parameter toggle : bit -> bit.
Variable b : bit.
Axiom Toggle1 : e1 = toggle e0.
Axiom Toggle2 : e0 = toggle e1.
Axiom bit1 : true = eqb b b.
Axiom bit2 : false = eqb b (toggle b). 
Axiom bit3 : false = eqb (toggle b) b.
End BIT.

Section DATA.
Parameter D : Set.
Parameter eqD : D -> D -> bool.
Parameter ifD : bool -> D -> D -> D.
Variable d e : D.
Axiom eqD5 : d = ifD true d e.
Axiom eqD6 : e = ifD false d e.
Axiom eqD7 : true = eqD d d.
Axiom eqD8 : ifD (eqD d e) d e = e.

Axiom EQDi : ~ EQ D one.
End DATA.

Goal forall d e : D, d = e -> true = eqD d e.
intros.
elim H.
apply eqD7.

Save eqD_elim.

Goal forall d e : D, true = eqD d e -> d = e.

intros.
elim (eqD8 d e).
elim H.
elim eqD5.
apply refl_equal.
Save eqD_intro.

Goal forall d e : D, false = eqD d e -> d <> e.

intros.
red in |- *; intro.
cut (forall P : bool -> Prop, P true -> P false); intro L.
apply
 (L
    (fun P : bool =>
     match P return Prop with
     | true => True
     | false => False
     end)).
exact I.
intros.
elimtype (eqD d e = false).
elim H0.
elim eqD7.
assumption.
apply sym_equal.
assumption.
Save eqD_intro'.

Section FRAME1.
Parameter frame : Set.
Variable b b1 b2 : bit.
Variable d e : frame.
Parameter tuple : bit -> frame. 
Parameter sce : frame.
Parameter eqf : frame -> frame -> bool.
Parameter iff : bool -> frame -> frame -> frame.
Axiom eqf1 : true = eqf sce sce.
Axiom eqf2 : false = eqf sce (tuple b).
Axiom eqf3 : false = eqf (tuple b) sce.
Axiom eqf4 : eqb b1 b2 = eqf (tuple b1) (tuple b2).

Axiom eqf5 : d = iff true d e.
Axiom eqf6 : e = iff false d e.
Axiom eqf7 : true = eqf d d.
Axiom eqf8 : iff (eqf d e) d e = e.

Axiom EQfi : ~ EQ frame one.
Axiom EQfD : ~ EQ frame D.
End FRAME1.

Goal forall d e : frame, d = e -> true = eqf d e.
intros.
elim H.
apply eqf7.
 
Save eqf_elim.
 
Goal forall d e : frame, true = eqf d e -> d = e.
 
intros.
elim (eqf8 d e).
elim H.
elim eqf5.
apply refl_equal.
Save eqf_intro.
 
Goal forall d e : frame, false = eqf d e -> d <> e.
 
intros.
red in |- *; intro.
cut (forall P : bool -> Prop, P true -> P false); intro L.
apply
 (L
    (fun P : bool =>
     match P return Prop with
     | true => True
     | false => False
     end)).
exact I.
intros.
elimtype (eqf d e = false).
elim H0.
elim eqf7.
assumption.
apply sym_equal.
assumption.
Save eqf_intro'.
 
Section FRAME2.
Parameter Frame : Set.
Variable b b1 b2 : bit.
Variable d d1 d2 : D.

Variable e e' : Frame.
Parameter Tuple : bit -> D -> Frame. 
Parameter lce : Frame.
Parameter eqF : Frame -> Frame -> bool.
Parameter ifF : bool -> Frame -> Frame -> Frame. 
Axiom eqF1 : true = eqF lce lce.
Axiom eqF2 : false = eqF lce (Tuple b d).
Axiom eqF3 : false = eqF (Tuple b d) lce.
Axiom eqF4 : andb (eqb b1 b2) (eqD d1 d2) = eqF (Tuple b1 d1) (Tuple b2 d2).
 
Axiom eqF5 : e' = ifF true e' e.
Axiom eqF6 : e = ifF false e' e. 
Axiom eqF7 : true = eqF e e. 
Axiom eqF8 : ifF (eqF e e') e e' = e'. 
 
Axiom EQFi : ~ EQ Frame one.
Axiom EQFD : ~ EQ Frame D.
Axiom EQFf : ~ EQ Frame frame.
End FRAME2.

Hint Resolve EQFf .

Goal forall d e : Frame, d = e -> true = eqF d e.
intros.
elim H.
apply eqF7.

Save eqF_elim.

Goal forall d e : Frame, true = eqF d e -> d = e.

intros.
elim (eqF8 d e).
elim H.
elim eqF5.
apply refl_equal.
Save eqF_intro.

Goal forall d e : Frame, false = eqF d e -> d <> e.

intros.
red in |- *; intro.
cut (forall P : bool -> Prop, P true -> P false); intro L.
apply
 (L
    (fun P : bool =>
     match P return Prop with
     | true => True
     | false => False
     end)).
exact I.
intros.
elimtype (eqF d e = false).
elim H0.
elim eqF7.
assumption.
apply sym_equal.
assumption.
Save eqF_intro'.
 
Parameter K : one -> proc.
Parameter L : one -> proc.
Parameter S : one -> proc.
Parameter Sn : bit -> proc.
Parameter Sn_d : D -> bit -> proc.
Parameter Tn_d : D -> bit -> proc.
Parameter R : one -> proc.
Parameter Rn : bit -> proc.

Section PROC.
Variable b : bit.
Variable j : one.
Variable d : D.

Axiom
  ChanK :
    Frame +
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) = K j.

Axiom
  ChanL :
    frame +
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) = L j.

Axiom ProcS : seq (Sn e0) (seq (Sn e1) (S i)) = S j.

Axiom ProcSn : D + (fun d : D => seq (ia D r1 d) (Sn_d d b)) = Sn b.

Axiom ProcSn_d : seq (ia Frame s2 (Tuple b d)) (Tn_d d b) = Sn_d d b.

Axiom
  ProcTn_d :
    alt
      (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
         (Sn_d d b)) (ia frame r6 (tuple b)) = Tn_d d b.

Axiom ProcR : seq (Rn e1) (seq (Rn e0) (R i)) = R j.

Axiom
  ProcRn :
    alt
      (seq
         (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
         (seq (ia frame s5 (tuple b)) (Rn b)))
      (D +
       (fun d : D =>
        seq (ia Frame r3 (Tuple (toggle b) d))
          (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) = 
    Rn b.
End PROC.

Definition H :=
  ehcons r2
    (ehcons r3
       (ehcons r5
          (ehcons r6 (ehcons s2 (ehcons s3 (ehcons s5 (ehcons s6 ehnil))))))).

Definition ABP := enc H (mer (S i) (mer (K i) (mer (L i) (R i)))).
Definition X := enc H (mer (S i) (mer (K i) (mer (L i) (R i)))).

Definition X1 (d : D) :=
  enc H
    (mer (seq (Sn_d d e0) (seq (Sn e1) (S i))) (mer (K i) (mer (L i) (R i)))).

Definition X2 (d : D) :=
  enc H
    (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
       (mer (K i)
          (mer (L i) (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i)))))).

Definition Y :=
  enc H (mer (seq (Sn e1) (S i)) (mer (K i) (mer (L i) (seq (Rn e0) (R i))))).

Definition Y1 (d : D) :=
  enc H
    (mer (seq (Sn_d d e1) (S i)) (mer (K i) (mer (L i) (seq (Rn e0) (R i))))).

Definition Y2 (d : D) :=
  enc H
    (mer (seq (Tn_d d e1) (S i))
       (mer (K i) (mer (L i) (seq (ia frame s5 (tuple e1)) (R i))))).

Goal r1 <> r2.
discriminate.
Save neqr1r2.

Goal r1 <> r3.
discriminate.
Save neqr1r3. 

Goal r1 <> r5.
discriminate.
Save neqr1r5. 

Goal r1 <> r6.
discriminate.
Save neqr1r6. 

Goal r1 <> s2.
discriminate.
Save neqr1s2.

Goal r1 <> s3.
discriminate.
Save neqr1s3.

Goal r1 <> s4.
discriminate.
Save neqr1s4.

Goal r1 <> s5.
discriminate.
Save neqr1s5.

Goal r1 <> s6.
discriminate.
Save neqr1s6.

Goal r1 <> c2.
discriminate.
Save neqr1c2.

Goal r1 <> c3.
discriminate.
Save neqr1c3.

Goal r1 <> c5.
discriminate.
Save neqr1c5.

Goal r1 <> c6.
discriminate.
Save neqr1c6.

Goal r1 <> int.
discriminate.
Save neqr1int.

Goal r1 <> tau.
discriminate.
Save neqr1tau.

Hint Resolve neqr1r2 neqr1r3 neqr1r5 neqr1r6 neqr1s2 neqr1s3 neqr1s4 neqr1s5
  neqr1s6 neqr1c2 neqr1c3 neqr1c5 neqr1c6 neqr1int neqr1tau.

Goal r2 <> r1.
discriminate.
Save neqr2r1.

Goal r2 <> r3.
discriminate.
Save neqr2r3. 

Goal r2 <> r5.
discriminate.
Save neqr2r5. 

Goal r2 <> r6.
discriminate.
Save neqr2r6. 

Goal r2 <> s2.
discriminate.
Save neqr2s2.

Goal r2 <> s3.
discriminate.
Save neqr2s3.

Goal r2 <> s4.
discriminate.
Save neqr2s4.

Goal r2 <> s5.
discriminate.
Save neqr2s5.

Goal r2 <> s6.
discriminate.
Save neqr2s6.

Goal r2 <> c2.
discriminate.
Save neqr2c2.

Goal r2 <> c3.
discriminate.
Save neqr2c3.

Goal r2 <> c5.
discriminate.
Save neqr2c5.

Goal r2 <> c6.
discriminate.
Save neqr2c6.

Goal r2 <> int.
discriminate.
Save neqr2int.

Goal r2 <> tau.
discriminate.
Save neqr2tau.

Hint Resolve neqr2r1 neqr2r3 neqr2r5 neqr2r6 neqr2s2 neqr2s3 neqr2s4 neqr2s5
  neqr2s6 neqr2c2 neqr2c3 neqr2c5 neqr2c6 neqr2int neqr2tau.

Goal r3 <> r1.
discriminate.
Save neqr3r1.

Goal r3 <> r2.
discriminate.
Save neqr3r2.

Goal r3 <> r5.
discriminate.
Save neqr3r5. 

Goal r3 <> r6.
discriminate.
Save neqr3r6. 

Goal r3 <> s2.
discriminate.
Save neqr3s2.

Goal r3 <> s3.
discriminate.
Save neqr3s3.

Goal r3 <> s4.
discriminate.
Save neqr3s4.

Goal r3 <> s5.
discriminate.
Save neqr3s5.

Goal r3 <> s6.
discriminate.
Save neqr3s6.

Goal r3 <> c2.
discriminate.
Save neqr3c2.

Goal r3 <> c3.
discriminate.
Save neqr3c3.

Goal r3 <> c5.
discriminate.
Save neqr3c5.

Goal r3 <> c6.
discriminate.
Save neqr3c6.

Goal r3 <> int.
discriminate.
Save neqr3int.

Goal r3 <> tau.
discriminate.
Save neqr3tau.

Hint Resolve neqr3r2 neqr3r1 neqr3r5 neqr3r6 neqr3s2 neqr3s3 neqr3s4 neqr3s5
  neqr3s6 neqr3c2 neqr3c3 neqr3c5 neqr3c6 neqr3int neqr3tau.

Goal r5 <> r1.
discriminate.
Save neqr5r1.

Goal r5 <> r2.
discriminate.
Save neqr5r2.

Goal r5 <> r3.
discriminate.
Save neqr5r3. 

Goal r5 <> r6.
discriminate.
Save neqr5r6. 

Goal r5 <> s2.
discriminate.
Save neqr5s2.

Goal r5 <> s3.
discriminate.
Save neqr5s3.

Goal r5 <> s4.
discriminate.
Save neqr5s4.

Goal r5 <> s5.
discriminate.
Save neqr5s5.

Goal r5 <> s6.
discriminate.
Save neqr5s6.

Goal r5 <> c2.
discriminate.
Save neqr5c2.

Goal r5 <> c3.
discriminate.
Save neqr5c3.

Goal r5 <> c5.
discriminate.
Save neqr5c5.

Goal r5 <> c6.
discriminate.
Save neqr5c6.

Goal r5 <> int.
discriminate.
Save neqr5int.

Goal r5 <> tau.
discriminate.
Save neqr5tau.

Hint Resolve neqr5r2 neqr5r3 neqr5r1 neqr5r6 neqr5s2 neqr5s3 neqr5s4 neqr5s5
  neqr5s6 neqr5c2 neqr5c3 neqr5c5 neqr5c6 neqr5int neqr5tau.

Goal r6 <> r1.
discriminate.
Save neqr6r1.

Goal r6 <> r2.
discriminate.
Save neqr6r2.

Goal r6 <> r3.
discriminate.
Save neqr6r3. 

Goal r6 <> r5.
discriminate.
Save neqr6r5. 

Goal r6 <> s2.
discriminate.
Save neqr6s2.

Goal r6 <> s3.
discriminate.
Save neqr6s3.

Goal r6 <> s4.
discriminate.
Save neqr6s4.

Goal r6 <> s5.
discriminate.
Save neqr6s5.

Goal r6 <> s6.
discriminate.
Save neqr6s6.

Goal r6 <> c2.
discriminate.
Save neqr6c2.

Goal r6 <> c3.
discriminate.
Save neqr6c3.

Goal r6 <> c5.
discriminate.
Save neqr6c5.

Goal r6 <> c6.
discriminate.
Save neqr6c6.

Goal r6 <> int.
discriminate.
Save neqr6int.

Goal r6 <> tau.
discriminate.
Save neqr6tau.

Hint Resolve neqr6r2 neqr6r3 neqr1r5 neqr6r1 neqr6s2 neqr6s3 neqr6s4 neqr6s5
  neqr6s6 neqr6c2 neqr6c3 neqr6c5 neqr6c6 neqr6int neqr6tau.

Goal s2 <> r1.
discriminate.
Save neqs2r1.

Goal s2 <> r2.
discriminate.
Save neqs2r2.

Goal s2 <> r3.
discriminate.
Save neqs2r3. 

Goal s2 <> r5.
discriminate.
Save neqs2r5. 

Goal s2 <> r6.
discriminate.
Save neqs2r6. 

Goal s2 <> s3.
discriminate.
Save neqs2s3.

Goal s2 <> s4.
discriminate.
Save neqs2s4.

Goal s2 <> s5.
discriminate.
Save neqs2s5.

Goal s2 <> s6.
discriminate.
Save neqs2s6.

Goal s2 <> c2.
discriminate.
Save neqs2c2.

Goal s2 <> c3.
discriminate.
Save neqs2c3.

Goal s2 <> c5.
discriminate.
Save neqs2c5.

Goal s2 <> c6.
discriminate.
Save neqs2c6.

Goal s2 <> int.
discriminate.
Save neqs2int.

Goal s2 <> tau.
discriminate.
Save neqs2tau.

Hint Resolve neqs2r2 neqs2r3 neqs2r5 neqs2r6 neqs2r1 neqs2s3 neqs2s4 neqs2s5
  neqs2s6 neqs2c2 neqs2c3 neqs2c5 neqs2c6 neqs2int neqs2tau.

Goal s3 <> r1.
discriminate.
Save neqs3r1.

Goal s3 <> r2.
discriminate.
Save neqs3r2.

Goal s3 <> r3.
discriminate.
Save neqs3r3. 

Goal s3 <> r5.
discriminate.
Save neqs3r5. 

Goal s3 <> r6.
discriminate.
Save neqs3r6. 

Goal s3 <> s2.
discriminate.
Save neqs3s2.

Goal s3 <> s4.
discriminate.
Save neqs3s4.

Goal s3 <> s5.
discriminate.
Save neqs3s5.

Goal s3 <> s6.
discriminate.
Save neqs3s6.

Goal s3 <> c2.
discriminate.
Save neqs3c2.

Goal s3 <> c3.
discriminate.
Save neqs3c3.

Goal s3 <> c5.
discriminate.
Save neqs3c5.

Goal s3 <> c6.
discriminate.
Save neqs3c6.

Goal s3 <> int.
discriminate.
Save neqs3int.

Goal s3 <> tau.
discriminate.
Save neqs3tau.

Hint Resolve neqs3r2 neqs3r3 neqs3r5 neqs3r6 neqs3s2 neqs3s4 neqs3s5 neqs3s6
  neqs3c2 neqs3c3 neqs3c5 neqs3c6 neqs3int neqs3tau.

Goal s4 <> r1.
discriminate.
Save neqs4r1.

Goal s4 <> r2.
discriminate.
Save neqs4r2.

Goal s4 <> r3.
discriminate.
Save neqs4r3. 

Goal s4 <> r5.
discriminate.
Save neqs4r5. 

Goal s4 <> r6.
discriminate.
Save neqs4r6. 

Goal s4 <> s2.
discriminate.
Save neqs4s2.

Goal s4 <> s3.
discriminate.
Save neqs4s3.

Goal s4 <> s5.
discriminate.
Save neqs4s5.

Goal s4 <> s6.
discriminate.
Save neqs4s6.

Goal s4 <> c2.
discriminate.
Save neqs4c2.

Goal s4 <> c3.
discriminate.
Save neqs4c3.

Goal s4 <> c5.
discriminate.
Save neqs4c5.

Goal s4 <> c6.
discriminate.
Save neqs4c6.

Goal s4 <> int.
discriminate.
Save neqs4int.

Goal s4 <> tau.
discriminate.
Save neqs4tau.

Hint Resolve neqs4r2 neqs4r3 neqs4r5 neqs4r6 neqs4s2 neqs4s3 neqs4s5 neqs4s6
  neqs4c2 neqs4c3 neqs4c5 neqs4c6 neqs4int neqs4tau.

Goal s5 <> r1.
discriminate.
Save neqs5r1.

Goal s5 <> r2.
discriminate.
Save neqs5r2.

Goal s5 <> r3.
discriminate.
Save neqs5r3. 

Goal s5 <> r5.
discriminate.
Save neqs5r5. 

Goal s5 <> r6.
discriminate.
Save neqs5r6. 

Goal s5 <> s2.
discriminate.
Save neqs5s2.

Goal s5 <> s3.
discriminate.
Save neqs5s3.

Goal s5 <> s4.
discriminate.
Save neqs5s4.

Goal s5 <> s6.
discriminate.
Save neqs5s6.

Goal s5 <> c2.
discriminate.
Save neqs5c2.

Goal s5 <> c3.
discriminate.
Save neqs5c3.

Goal s5 <> c5.
discriminate.
Save neqs5c5.

Goal s5 <> c6.
discriminate.
Save neqs5c6.

Goal s5 <> int.
discriminate.
Save neqs5int.

Goal s5 <> tau.
discriminate.
Save neqs5tau.

Hint Resolve neqs5r2 neqs5r3 neqs5r5 neqs5r6 neqs5s2 neqs5s3 neqs5s4 neqs5r1
  neqs5s6 neqr1c2 neqs5c3 neqs5c5 neqs5c6 neqs5int neqs5tau.

Goal s6 <> r1.
discriminate.
Save neqs6r1.

Goal s6 <> r2.
discriminate.
Save neqs6r2.

Goal s6 <> r3.
discriminate.
Save neqs6r3. 

Goal s6 <> r5.
discriminate.
Save neqs6r5. 

Goal s6 <> r6.
discriminate.
Save neqs6r6. 

Goal s6 <> s2.
discriminate.
Save neqs6s2.

Goal s6 <> s3.
discriminate.
Save neqs6s3.

Goal s6 <> s4.
discriminate.
Save neqs6s4.

Goal s6 <> s5.
discriminate.
Save neqs6s5.

Goal s6 <> c2.
discriminate.
Save neqs6c2.

Goal s6 <> c3.
discriminate.
Save neqs6c3.

Goal s6 <> c5.
discriminate.
Save neqs6c5.

Goal s6 <> c6.
discriminate.
Save neqs6c6.

Goal s6 <> int.
discriminate.
Save neqs6int.

Goal s6 <> tau.
discriminate.
Save neqs6tau.

Hint Resolve neqs6r2 neqs6r3 neqs6r5 neqs6r6 neqs6s2 neqs6s3 neqs6s4 neqs6s5
  neqs6r1 neqs6c2 neqs6c3 neqs6c5 neqs6c6 neqs6int neqs6tau.

Goal c2 <> r1.
discriminate.
Save neqc2r1.

Goal c2 <> r2.
discriminate.
Save neqc2r2.

Goal c2 <> r3.
discriminate.
Save neqc2r3. 

Goal c2 <> r5.
discriminate.
Save neqc2r5. 

Goal c2 <> r6.
discriminate.
Save neqc2r6. 

Goal c2 <> s2.
discriminate.
Save neqc2s2.

Goal c2 <> s3.
discriminate.
Save neqc2s3.

Goal c2 <> s4.
discriminate.
Save neqc2s4.

Goal c2 <> s5.
discriminate.
Save neqc2s5.

Goal c2 <> s6.
discriminate.
Save neqc2s6.

Goal c2 <> c3.
discriminate.
Save neqc2c3.

Goal c2 <> c5.
discriminate.
Save neqc2c5.

Goal c2 <> c6.
discriminate.
Save neqc1c6.

Goal c2 <> int.
discriminate.
Save neqc2int.

Goal c2 <> tau.
discriminate.
Save neqc2tau.

Hint Resolve neqc2r2 neqc2r3 neqc2r5 neqc2r6 neqc2s2 neqc2s3 neqc2s4 neqc2s5
  neqc2s6 neqc2c3 neqc2c5   neqc2int neqc2tau.

Goal c3 <> r1.
discriminate.
Save neqc3r1.

Goal c3 <> r2.
discriminate.
Save neqc3r2.

Goal c3 <> r3.
discriminate.
Save neqc3r3. 

Goal c3 <> r5.
discriminate.
Save neqc3r5. 

Goal c3 <> r6.
discriminate.
Save neqc3r6. 

Goal c3 <> s2.
discriminate.
Save neqc3s2.

Goal c3 <> s3.
discriminate.
Save neqc3s3.

Goal c3 <> s4.
discriminate.
Save neqc3s4.

Goal c3 <> s5.
discriminate.
Save neqc3s5.

Goal c3 <> s6.
discriminate.
Save neqc3s6.

Goal c3 <> c2.
discriminate.
Save neqc3c2.

Goal c3 <> c5.
discriminate.
Save neqc3c5.

Goal c3 <> c6.
discriminate.
Save neqc3c6.

Goal c3 <> int.
discriminate.
Save neqc3int.

Goal c3 <> tau.
discriminate.
Save neqc3tau.

Hint Resolve neqc3r2 neqc3r3 neqc3r5 neqc3r6 neqc3s2 neqc3s3 neqc3s4 neqc3s5
  neqc3s6 neqc3c2 neqc3r1 neqc3c5 neqc3c6 neqc3int neqc3tau.

Goal c5 <> r1.
discriminate.
Save neqc5r1.

Goal c5 <> r2.
discriminate.
Save neqc5r2.

Goal c5 <> r3.
discriminate.
Save neqc5r3. 

Goal c5 <> r5.
discriminate.
Save neqc5r5. 

Goal c5 <> r6.
discriminate.
Save neqc5r6. 

Goal c5 <> s2.
discriminate.
Save neqc5s2.

Goal c5 <> s3.
discriminate.
Save neqc5s3.

Goal c5 <> s4.
discriminate.
Save neqc5s4.

Goal c5 <> s5.
discriminate.
Save neqc5s5.

Goal c5 <> s6.
discriminate.
Save neqc5s6.

Goal c5 <> c2.
discriminate.
Save neqc5c2.

Goal c5 <> c3.
discriminate.
Save neqc5c3.

Goal c5 <> c6.
discriminate.
Save neqc5c6.

Goal c5 <> int.
discriminate.
Save neqc5int.

Goal c5 <> tau.
discriminate.
Save neqc5tau.

Hint Resolve neqc5r2 neqc5r3 neqc5r5 neqc5r6 neqc5s2 neqc5s3 neqc5s4 neqc5s5
  neqc5s6 neqc5c2 neqc5c3 neqc5r1 neqc5c6 neqc5int neqc5tau.

Goal c6 <> r1.
discriminate.
Save neqc6r1.

Goal c6 <> r2.
discriminate.
Save neqc6r2.

Goal c6 <> r3.
discriminate.
Save neqc6r3. 

Goal c6 <> r5.
discriminate.
Save neqc6r5. 

Goal c6 <> r6.
discriminate.
Save neqc6r6. 

Goal c6 <> s2.
discriminate.
Save neqc6s2.

Goal c6 <> s3.
discriminate.
Save neqc6s3.

Goal c6 <> s4.
discriminate.
Save neqc6s4.

Goal c6 <> s5.
discriminate.
Save neqc6s5.

Goal c6 <> s6.
discriminate.
Save neqc6s6.

Goal c6 <> c2.
discriminate.
Save neqc6c2.

Goal c6 <> c3.
discriminate.
Save neqc6c3.

Goal c6 <> c5.
discriminate.
Save neqc6c5.

Goal c6 <> int.
discriminate.
Save neqc6int.

Goal c6 <> tau.
discriminate.
Save neqc6tau.

Hint Resolve neqc6r2 neqc6r3 neqc6r5 neqc6r6 neqc6s2 neqc6s3 neqc6s4 neqc6s5
  neqc6s6 neqc6c2 neqc6c3 neqc6c5 neqc6r1 neqc6int neqc6tau.

Goal int <> r1.
discriminate.
Save neqintr1.

Goal int <> r2.
discriminate.
Save neqintr2.

Goal int <> r3.
discriminate.
Save neqintr3. 

Goal int <> r5.
discriminate.
Save neqintr5. 

Goal int <> r6.
discriminate.
Save neqintr6. 

Goal int <> s2.
discriminate.
Save neqints2.

Goal int <> s3.
discriminate.
Save neqints3.

Goal int <> s4.
discriminate.
Save neqints4.

Goal int <> s5.
discriminate.
Save neqints5.

Goal int <> s6.
discriminate.
Save neqints6.

Goal int <> c2.
discriminate.
Save neqintc2.

Goal int <> c3.
discriminate.
Save neqintc3.

Goal int <> c5.
discriminate.
Save neqintc5.

Goal int <> c6.
discriminate.
Save neqintc6.

Goal int <> tau.
discriminate.
Save neqinttau.

Hint Resolve neqintr2 neqintr3 neqintr5 neqintr6 neqints2 neqints3 neqints4
  neqints5 neqints6 neqintc2 neqintc3 neqintc5 neqintc6 neqintr1 neqinttau.

Goal tau <> r1.
discriminate.
Save neqtaur1.

Goal tau <> r2.
discriminate.
Save neqtaur2.

Goal tau <> r3.
discriminate.
Save neqtaur3. 

Goal tau <> r5.
discriminate.
Save neqtaur5. 

Goal tau <> r6.
discriminate.
Save neqtaur6. 

Goal tau <> s2.
discriminate.
Save neqtaus2.

Goal tau <> s3.
discriminate.
Save neqtaus3.

Goal tau <> s4.
discriminate.
Save neqtaus4.

Goal tau <> s5.
discriminate.
Save neqtaus5.

Goal tau <> s6.
discriminate.
Save neqtaus6.

Goal tau <> c2.
discriminate.
Save neqtauc2.

Goal tau <> c3.
discriminate.
Save neqtauc3.

Goal tau <> c5.
discriminate.
Save neqtauc5.

Goal tau <> c6.
discriminate.
Save neqtauc6.

Goal tau <> int.
discriminate.
Save neqtauint.

Hint Resolve neqtaur2 neqtaur3 neqtaur5 neqtaur6 neqtaus2 neqtaus3 neqtaus4
  neqtaus5 neqtaus6 neqtauc2 neqtauc3 neqtauc5 neqtauc6 neqtauint neqtaur1.

Goal forall a : act, a = r2 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto.
Save HLemmar2.

Goal forall a : act, a = r3 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto.
Save HLemmar3.

Goal forall a : act, a = r5 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto.
Save HLemmar5.

Goal forall a : act, a = r6 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto.
Save HLemmar6.

Goal forall a : act, a = s2 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto 10.
Save HLemmas2.

Goal forall a : act, a = s3 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto 10.
Save HLemmas3.

Goal forall a : act, a = s5 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto 10.
Save HLemmas5.

Goal forall a : act, a = s6 -> In_ehlist a H.
intros a b.
unfold In_ehlist, H in |- *.
auto 10.
Save HLemmas6.

Goal
forall a : act,
a <> r2 ->
a <> r3 ->
a <> r5 ->
a <> r6 -> a <> s2 -> a <> s3 -> a <> s5 -> a <> s6 -> ~ In_ehlist a H.
intros a b b0 b1 b2 b3 b4 b5 b6.
red in |- *. unfold In_ehlist, H in |- *. 
intro I1. elim I1. assumption.
intro I2. elim I2. assumption.
intro I3. elim I3. assumption.
intro I4. elim I4. assumption.
intro I5. elim I5. assumption.
intro I6. elim I6. assumption.
intro I7. elim I7. assumption.
intro I8. elim I8. assumption.
intro. assumption.
Save HLemma.

Hint Resolve HLemmar2 HLemmar3 HLemmar5 HLemmar6 HLemmas2 HLemmas3 HLemmas5
  HLemmas6 HLemma.

Goal ~ In_ehlist r1 H.
apply HLemma; auto.
Save Inr1H.

Goal In_ehlist r2 H.
auto.
Save Inr2H.

Goal In_ehlist r3 H.
auto.
Save Inr3H.

Goal In_ehlist r5 H.
auto.
Save Inr5H.

Goal In_ehlist r6 H.
auto.
Save Inr6H.

Goal In_ehlist s2 H.
auto.
Save Ins2H.

Goal In_ehlist s3 H.
auto.
Save Ins3H.

Goal ~ In_ehlist s4 H.
apply HLemma; auto.
Save Ins4H.

Goal In_ehlist s5 H.
auto.
Save Ins5H.

Goal In_ehlist s6 H.
auto.
Save Ins6H.

Goal ~ In_ehlist int H.
apply HLemma; auto.
Save InintH.

Goal ~ In_ehlist c2 H.
apply HLemma; auto.
Save Inc2H.

Goal ~ In_ehlist c3 H. 
apply HLemma; auto.
Save Inc3H. 

Goal ~ In_ehlist c5 H. 
apply HLemma; auto.
Save Inc5H. 

Goal ~ In_ehlist c6 H. 
apply HLemma; auto.
Save Inc6H. 

Definition I' := ehcons c2 (ehcons c3 (ehcons c5 (ehcons c6 ehnil))).
Definition I'' := ehcons int ehnil.

Goal In_ehlist c2 I'.
unfold In_ehlist, I' in |- *. 
left; apply refl_equal. 
Save Inc2I. 

Goal In_ehlist c3 I'.
unfold In_ehlist, I' in |- *. 
right; left; apply refl_equal. 
Save Inc3I. 

Goal In_ehlist c5 I'.
unfold In_ehlist, I' in |- *. 
right; right; left; apply refl_equal. 
Save Inc5I. 

Goal In_ehlist c6 I'.
unfold In_ehlist, I' in |- *.
right; right; right; left; apply refl_equal.
Save Inc6I.

Goal ~ In_ehlist int I'.
red in |- *. unfold In_ehlist, I' in |- *.
intro; elim H0. intro. apply neqintc2. assumption.
intro; elim H1. intro. apply neqintc3. assumption.
intro; elim H2. intro. apply neqintc5. assumption.
intro; elim H3. intro. apply neqintc6. assumption.
intro; assumption.
Save InintI.

Goal ~ In_ehlist s4 I'.
red in |- *. unfold In_ehlist, I' in |- *.
intro; elim H0. intro. apply neqs4c2. assumption.
intro; elim H1. intro. apply neqs4c3. assumption.
intro; elim H2. intro. apply neqs4c5. assumption.
intro; elim H3. intro. apply neqs4c6. assumption.
intro; assumption.
Save Ins4I.

Goal ~ In_ehlist r1 I'.
red in |- *. unfold In_ehlist, I' in |- *.
intro; elim H0. intro. apply neqr1c2. assumption.
intro; elim H1. intro. apply neqr1c3. assumption.
intro; elim H2. intro. apply neqr1c5. assumption.
intro; elim H3. intro. apply neqr1c6. assumption.
intro; assumption.
Save Inr1I.

Goal In_ehlist int I''.
unfold In_ehlist, I'' in |- *.
left. apply refl_equal.
Save InintI''.

Goal ~ In_ehlist s4 I''.
red in |- *. unfold In_ehlist, I'' in |- *.
intro; elim H0. intro. apply neqints4. 
apply sym_equal. assumption.
intro. assumption.
Save Ins4I''.

Goal ~ In_ehlist r1 I''.
red in |- *; unfold In_ehlist, I'' in |- *.
intro; elim H0. intro. apply neqintr1. 
apply sym_equal. assumption.
intro; assumption.
Save Inr1I''.

Goal ~ In_ehlist tau I''.
red in |- *; unfold In_ehlist, I'' in |- *.
intro; elim H0. intro. apply neqinttau. 
apply sym_equal. assumption.
intro; assumption.
Save IntauI''. *)

Require Import abp_lem1.
(* abp_lem1:
Require Import abp_base.
Require Import abp_defs.

Goal
forall (b : bit) (x y : proc),
D + (fun d : D => seq (ia D r1 d) (enc H (mer (seq (Sn_d d b) y) x))) =
enc H (Lmer (seq (Sn b) y) x).

intros.
elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y).
elimtype
 ((fun d : D => seq (ia D r1 d) (seq (Sn_d d b) y)) =
  (fun d : D => seq (seq (ia D r1 d) (Sn_d d b)) y)).
2: apply EXTE; intro; elim A5; apply refl_equal.
elim (SUM6 D (fun d : D => seq (ia D r1 d) (seq (Sn_d d b) y)) x).
elim SUM9.
elimtype
 ((fun d : D => seq (ia D r1 d) (enc H (mer (seq (Sn_d d b) y) x))) =
  (fun d : D => enc H (Lmer (seq (ia D r1 d) (seq (Sn_d d b) y)) x))).
           
apply refl_equal.
apply EXTE; intro. 
elim CM3.
elim D5.
elim D1.
apply refl_equal.
exact Inr1H.
Save LmerSn.

Goal forall x : proc, Delta = enc H (Lmer (K i) x).
intro.
elim ChanK.
elim
 (SUM6 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) x).
elim SUM9.
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   enc H
     (Lmer
        (seq (ia Frame r2 d)
           (seq
              (alt (seq (ia one int i) (ia Frame s3 d))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) x))).
elim SUM1.
apply refl_equal.
apply EXTE. intro.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Inr2H.
Save LmerK.

Goal forall x : proc, Delta = enc H (Lmer (L i) x).
intro.
elim ChanL.
elim
 (SUM6 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) x).
elim SUM9.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   enc H
     (Lmer
        (seq (ia frame r5 d)
           (seq
              (alt (seq (ia one int i) (ia frame s6 d))
                 (seq (ia one int i) (ia frame s6 sce))) 
              (L i))) x))).
           
elim SUM1.
apply refl_equal.
apply EXTE. intro.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Inr5H.
Save LmerL.

Goal forall (b : bit) (x y : proc), Delta = enc H (Lmer (seq (Rn b) y) x).
intros.
elim ProcRn.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y).
elim
 (CM4
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
          (seq (ia frame s5 (tuple b)) (Rn b))) y)
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y) x).
elim D4.
cut
 (Delta =
  enc H
    (Lmer
       (seq
          (D +
           (fun d : D =>
            seq (ia Frame r3 (Tuple (toggle b) d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y) x)).
intro H0.
elim H0.
elim A6.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (ia frame s5 (tuple b)) (Rn b))).
elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y).
elim
 (CM4
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
          (seq (ia frame s5 (tuple b)) (Rn b))) y)
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y) x).
elim A5.
elim A5.

elim A5.

elim CM3.
elim D4.
elim D5.
elim D2.
elim A7.
elim A6.

elim SUM5.
elim SUM6.

elim SUM9.

elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   enc H
     (Lmer
        (seq (ia Frame r3 (Tuple b d))
           (seq (ia frame s5 (tuple b)) (seq (Rn b) y))) x))).

elim SUM1.
apply refl_equal.
apply EXTE.
intro.
elim CM3.
elim D5.
elim D2. 
elim A7.
apply refl_equal.
exact Inr3H.
exact Inr3H. 
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y).
elim
 (SUM6 D
    (fun d : D =>
     seq
       (seq (ia Frame r3 (Tuple (toggle b) d))
          (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y) x).
elim SUM9.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   enc H
     (Lmer
        (seq
           (seq (ia Frame r3 (Tuple (toggle b) d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y) x))).
elim SUM1.
apply refl_equal.
apply EXTE; intro.
elim A5.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Inr3H.

Save LmerRn.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (L i) (seq (Rn b) y)) x).
intros.
cut (Delta = comm (L i) (seq (Rn b) y)).
intro H0.
elim H0.
unfold Delta at 2 in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.

elim ChanL.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (Rn b) y))).
elim SUM1.
apply refl_equal.
apply EXTE.
intro.
elim ProcRn.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y).

elim CM9.

cut
 (Delta =
  comm
    (seq (ia frame r5 d)
       (seq
          (alt (seq (ia one int i) (ia frame s6 d))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i)))
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y)).
intro.
elim H.
elim A6.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b)) (Rn b)) y).
elim A4.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim CM9.
cut
 (Delta =
  comm
    (seq (ia frame r5 d)
       (alt (seq (seq (ia one int i) (ia frame s6 d)) (L i))
          (seq (seq (ia one int i) (ia frame s6 sce)) (L i))))
    (seq (ia Frame r3 lce) (seq (seq (ia frame s5 (tuple b)) (Rn b)) y))).

intro.
elim H0.
elim A6.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim SC3.
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b d0))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y))
     (seq (ia frame r5 d)
        (alt (seq (seq (ia one int i) (ia frame s6 d)) (L i))
           (seq (seq (ia one int i) (ia frame s6 sce)) (L i)))))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
red in |- *.
intro.
apply EQFf.
apply EQ_sym.
assumption.
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y).
elim SC3. 
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b))))) y)
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))))).
elim SUM1.   
apply refl_equal.
apply EXTE; intro.
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
Save CommLRn.

Goal forall x : proc, Delta = enc H (Lmer (comm (K i) (L i)) x).
cut (Delta = comm (K i) (L i)).
intro H0.
elim H0.
unfold Delta at 2 in |- *.
intro.
elim CM2.
elim A7.
elim D3.
apply refl_equal.
elim ChanK.
elim SUM7.
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (L i))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim ChanL.
elim SC3.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i)))
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.   
elim A7.
apply refl_equal.
red in |- *; intro.
apply EQFf.
apply EQ_sym.
assumption.

Save CommKL.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (K i) (seq (Rn b) y)) x).
intros.
cut (Delta = comm (K i) (seq (Rn b) y)).
intro H0.
elim H0.
unfold Delta at 2 in |- *.
elim CM2.
elim A7. 
elim D3.
apply refl_equal. 

elim ChanK.
elim SUM7.
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (Rn b) y))).
elim SUM1; apply refl_equal.  
apply EXTE; intro.
elim ProcRn.
elim A4.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y).
elim CM9.
cut
 (Delta =
  comm
    (seq (ia Frame r2 d)
       (alt (seq (seq (ia one int i) (ia Frame s3 d)) (K i))
          (seq (seq (ia one int i) (ia Frame s3 lce)) (K i))))
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y)).
intro.
elim H.
elim A6.
elim A5.
elim A5.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b)) (Rn b)) y).
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim CM9.
elim CM7.
elim CF2.
elim A7; elim A6.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim SC3.
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b d0))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y))
     (seq (ia Frame r2 d)
        (alt (seq (ia one int i) (seq (ia Frame s3 d) (K i)))
           (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2.
elim A7; apply refl_equal.  
apply refl_equal.
apply refl_equal.
elim SC3.

elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b))))) y)
     (seq (ia Frame r2 d)
        (alt (seq (seq (ia one int i) (ia Frame s3 d)) (K i))
           (seq (seq (ia one int i) (ia Frame s3 lce)) (K i)))))).
elim SUM1; apply refl_equal.  
apply EXTE; intro.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.  
Save CommKRn.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (seq (Sn b) y) (K i)) x).
intros.
cut (Delta = comm (seq (Sn b) y) (K i)).
intro H0. 
elim H0.
unfold Delta at 2 in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal.

elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D => comm (seq (seq (ia D r1 d) (Sn_d d b)) y) (K i))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim A5.
elim ChanK.
elim SC3.
elim SUM7.
elimtype
 ((fun d : Frame => Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia D r1 d) (seq (Sn_d d b) y)))).
elim SUM1; apply refl_equal.   
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFD.

Save CommSnK.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (seq (Sn b) y) (L i)) x).

intros.    
cut (Delta = comm (seq (Sn b) y) (L i)).
intro H0.   
elim H0.
unfold Delta at 2 in |- *.
elim CM2. 
elim A7.
elim D3.
apply refl_equal.

elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D => comm (seq (seq (ia D r1 d) (Sn_d d b)) y) (L i))).
elim SUM1; apply refl_equal.
apply EXTE; intro. 
elim A5.
elim ChanL.
elim SC3.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia D r1 d) (seq (Sn_d d b) y)))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQfD.
Save CommSnL.

Goal
forall (b b' : bit) (x y y' : proc),
Delta = enc H (Lmer (comm (seq (Sn b) y) (seq (Rn b') y')) x).
intros.
cut (Delta = comm (seq (Sn b) y) (seq (Rn b') y')). 
intro H0.   
elim H0.
unfold Delta at 2 in |- *. 
elim CM2. 
elim A7. 
elim D3.
apply refl_equal. 
 
elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y). 
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D => comm (seq (seq (ia D r1 d) (Sn_d d b)) y) (seq (Rn b') y'))).
elim SUM1; apply refl_equal.
apply EXTE; intro. 
elim A5.

elim ProcRn.
elim
 (A4
    (seq
       (alt (D + (fun d : D => ia Frame r3 (Tuple b' d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b')) (Rn b')))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b') d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y').

elim CM9.
cut
 (Delta =
  comm (seq (ia D r1 d) (seq (Sn_d d b) y))
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b') d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y')).
intro.
elim H.
elim A6.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b' d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b')) (Rn b')) y').
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b' d))) 
    (ia Frame r3 lce) (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')).  
elim CM9.
elim CM7.
elim CF2''.
elim A7; elim A6.
elim SC3.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b' d))
    (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b' d0))
        (seq (seq (ia frame s5 (tuple b')) (Rn b')) y'))
     (seq (ia D r1 d) (seq (Sn_d d b) y)))).
elim SUM1; apply refl_equal. 
apply EXTE; intro. 
elim CM7. 
elim CF2''. 
elim A7; apply refl_equal. 
exact EQFD.
red in |- *.
intro.
apply EQFD.
apply EQ_sym.
assumption.

elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b') d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b'))))) y').
elim SC3.
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b') d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b'))))) y')
     (seq (ia D r1 d) (seq (Sn_d d b) y)))).

elim SUM1; apply refl_equal.  
apply EXTE; intro. 
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFD.

Save CommSnRn.

Goal
forall (b : bit) (d : D) (x y : proc),
Delta = enc H (Lmer (seq (Sn_d d b) y) x).

intros.
elim ProcSn_d.
elim A5.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins2H.
Save LmerSnd.

Goal
forall (b : bit) (d : D) (x y : proc),
Delta = enc H (Lmer (seq (Tn_d d b) y) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM4.
elim CM4.
elim A5.
elim A5.
elim CM3.
elim CM3.
elim CM3.
elim D4.
elim D4.
elim D5.
elim D5.
elim D5.
elim D2.
elim D2.
elim D2.
elim A7.
elim A7.
elim A6.
elim A6.
apply refl_equal.
exact Inr6H.
exact Inr6H.
exact Inr6H.
Save LmerTnd.

Goal
forall (f : frame) (x y : proc),
Delta = enc H (Lmer (seq (ia frame s5 f) y) x).

intros.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins5H.
Save Lmers5.

Goal
forall (d : D) (x y : proc),
seq (ia D s4 d) (enc H (mer y x)) = enc H (Lmer (seq (ia D s4 d) y) x).

intros.
elim CM3.
elim D5.
elim D1.
apply refl_equal.
exact Ins4H.
Save Lmers4.

Goal
forall x y y' : proc,
alt (seq (ia one int i) (enc H (mer y x)))
  (seq (ia one int i) (enc H (mer y' x))) =
enc H (Lmer (alt (seq (ia one int i) y) (seq (ia one int i) y')) x).
 
intros.
elim CM4.
elim CM3.
elim CM3.
elim D4.
elim D5.
elim D5.
elim D1.
apply refl_equal.
exact InintH.
Save Lmeri.

Goal
forall (f : Frame) (x y : proc),
Delta = enc H (Lmer (seq (ia Frame s3 f) y) x).

intros.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins3H.
Save Lmers3.

Goal
forall (f : frame) (x y : proc),
Delta = enc H (Lmer (seq (ia frame s6 f) y) x).

intros.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins6H.
Save Lmers6.

Goal forall (c : bool) (p : proc), cond p c p = p.
intros.
elim c.
elim COND1.
apply refl_equal.
elim COND2.
apply refl_equal.
Save Bak4_2_1.

Goal
forall (c : bool) (x y z : proc),
(true = c -> x = y) -> cond x c z = cond y c z.
intro.
intro.
intro.
intro.
elim c.
intro.
elim COND1.
elim COND1.
elim H.
apply refl_equal.
apply refl_equal.

intro.
elim COND2.
elim COND2.
apply refl_equal.
Save Def4_3_1_2.

Goal
forall (c : bool) (x y z : proc),
(false = c -> x = y) -> cond z c x = cond z c y.

intro.
intro.
intro.
intro.
elim c.
intro.
elim COND1.
elim COND1.
apply refl_equal.

intro.
elim COND2.
elim COND2.
elim H.
apply refl_equal.
apply refl_equal.
Save Def4_3_1_2'.

Goal
forall (x : Frame -> proc) (d : Frame),
x d = Frame + (fun e : Frame => cond (x d) (eqF e d) Delta).

intros.
pattern (x d) at 1 in |- *.
elimtype (Frame + (fun e : Frame => x d) = x d).
cut (forall e : Frame, x d = alt (cond (x d) (eqF e d) Delta) (x d)).
intros.
elim (SUM3 Frame d (fun e : Frame => cond (x d) (eqF e d) Delta)).

elim eqF7.
elim COND1.
pattern (x d) at 3 in |- *.
elimtype (Frame + (fun e : Frame => x d) = x d).
cut
 (forall x y : Frame -> proc,
  Frame + (fun d : Frame => alt (x d) (y d)) = alt (Frame + x) (Frame + y)).
intro SUM4r.

elim SUM4r.
cut
 ((fun e : Frame => alt (cond (x d) (eqF e d) Delta) (x d)) =
  (fun e : Frame => x d)).
intros.
elim H0.
apply refl_equal.

apply EXTE.
intro; apply sym_equal; trivial.
intros.
apply sym_equal.
apply SUM4.

elim SUM1; auto.
intro.
elim (eqF e d).
elim COND1.
elim A3; auto.
elim COND2.
elim A1; elim A6; auto.
elim SUM1; auto.
Save Sum_EliminationF.

Goal
forall (x : frame -> proc) (d : frame),
x d = frame + (fun e : frame => cond (x d) (eqf e d) Delta).

intros.
pattern (x d) at 1 in |- *.
elimtype (frame + (fun e : frame => x d) = x d).
cut (forall e : frame, x d = alt (cond (x d) (eqf e d) Delta) (x d)).
intros.
elim (SUM3 frame d (fun e : frame => cond (x d) (eqf e d) Delta)).

elim eqf7.
elim COND1.
pattern (x d) at 3 in |- *.
elimtype (frame + (fun e : frame => x d) = x d).
cut
 (forall x y : frame -> proc,
  frame + (fun d : frame => alt (x d) (y d)) = alt (frame + x) (frame + y)).
intro SUM4r.

elim SUM4r.
cut
 ((fun e : frame => alt (cond (x d) (eqf e d) Delta) (x d)) =
  (fun e : frame => x d)).
intros.
elim H0.
apply refl_equal.

apply EXTE.
intro; apply sym_equal; trivial.
intros.
apply sym_equal.
apply SUM4.
 
elim SUM1; auto.
intro.
elim (eqf e d).
elim COND1.
elim A3; auto.
elim COND2.
elim A1; elim A6; auto.
elim SUM1; auto.
Save Sum_Eliminationf.
 
Goal
forall (x : D -> proc) (d : D),
x d = D + (fun e : D => cond (x d) (eqD e d) Delta).
 
intros.
pattern (x d) at 1 in |- *.
elimtype (D + (fun e : D => x d) = x d).
cut (forall e : D, x d = alt (cond (x d) (eqD e d) Delta) (x d)).
intros.  
elim (SUM3 D d (fun e : D => cond (x d) (eqD e d) Delta)).
 
elim eqD7.
elim COND1.
pattern (x d) at 3 in |- *.
elimtype (D + (fun e : D => x d) = x d).
cut
 (forall x y : D -> proc,
  D + (fun d : D => alt (x d) (y d)) = alt (D + x) (D + y)).
intro SUM4r.
 
elim SUM4r.
cut
 ((fun e : D => alt (cond (x d) (eqD e d) Delta) (x d)) = (fun e : D => x d)).
intros.  
elim H0.
apply refl_equal.
 
apply EXTE.
intro; apply sym_equal; trivial.
intros.  
apply sym_equal.
apply SUM4.
 
elim SUM1; auto.
intro.   
elim (eqD e d).
elim COND1.
elim A3; auto.
elim COND2.
elim A1; elim A6; auto.
elim SUM1; auto.
Save Sum_EliminationD.
 
Goal
forall (d : D) (n : bit) (y : proc),
seq (ia Frame c2 (Tuple n d))
  (mer y
     (seq
        (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
           (seq (ia one int i) (ia Frame s3 lce))) 
        (K i))) = comm (seq (ia Frame s2 (Tuple n d)) y) (K i).

intros.
pattern (K i) at 2 in |- *.
elim ChanK.
elim SC3.
elim SUM7.

elimtype
 ((fun d0 : Frame =>
   cond
     (seq (ia Frame c2 (Tuple n d))
        (mer y
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i)))) (eqF d0 (Tuple n d)) Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia Frame s2 (Tuple n d)) y))).

2: apply EXTE; intro.
2: elim CM7.
2: elim
    (Bak4_2_1 (eqF d0 (Tuple n d))
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y))).
2: elim
    (Def4_3_1_2' (eqF d0 (Tuple n d)) Delta
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y))
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y))).
2: elim
    (Def4_3_1_2 (eqF d0 (Tuple n d))
       (seq (ia Frame c2 (Tuple n d))
          (mer y
             (seq
                (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i))))
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y)) Delta).
2: apply refl_equal.
2: intros.
2: elim (eqF_intro d0 (Tuple n d)).
3: assumption.
2: elim CF1.
2: unfold gamma in |- *.
2: elim SC6.
2: apply refl_equal.

2: intro.
2: elim CF2'.
2: elim A7.
2: apply refl_equal.

2: apply eqF_intro'.
2: assumption.
elim
 (Sum_EliminationF
    (fun d' : Frame =>
     seq (ia Frame c2 d')
       (mer y
          (seq
             (alt (seq (ia one int i) (ia Frame s3 d'))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i)))) (Tuple n d)).
apply refl_equal.
Save comms2K.

Goal
forall (d : D) (n : bit) (y x : proc),
seq (ia Frame c2 (Tuple n d))
  (enc H
     (mer
        (mer y
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) x)) =
enc H (Lmer (comm (seq (ia Frame s2 (Tuple n d)) y) (K i)) x).

intros.
elim comms2K.
elim CM3.
elim D5.
elim D1.
apply refl_equal.
exact Inc2H.
Save Comms2K.

Goal
forall (d : D) (n n' : bit) (y y' : proc),
Delta = comm (seq (ia Frame s2 (Tuple n d)) y) (seq (Rn n') y').
intros.
elim ProcRn.
elim
 (A4
    (seq
       (alt (D + (fun d : D => ia Frame r3 (Tuple n' d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple n')) (Rn n')))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle n') d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle n')))))) y').
elim CM9.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple n' d))) 
    (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))).
elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple n' d)))
       (seq (ia frame s5 (tuple n')) (Rn n')))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))) y').           
elim
 (CM9 (seq (ia Frame s2 (Tuple n d)) y)
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple n' d)))
          (seq (ia frame s5 (tuple n')) (Rn n'))) y')
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))) y')).

elimtype
 (Delta =
  comm (seq (ia Frame s2 (Tuple n d)) y)
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle n') d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle n')))))) y')).

elimtype
 (Delta =
  comm (seq (ia Frame s2 (Tuple n d)) y)
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))) y')).

repeat elim A6.
elim
 (A5 (D + (fun d : D => ia Frame r3 (Tuple n' d)))
    (seq (ia frame s5 (tuple n')) (Rn n')) y').
elim SC3.

elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple n' d))
    (seq (seq (ia frame s5 (tuple n')) (Rn n')) y')).
elim SUM7.
elimtype
 ((fun d0 : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple n' d0))
        (seq (seq (ia frame s5 (tuple n')) (Rn n')) y'))
     (seq (ia Frame s2 (Tuple n d)) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
elim A5.
elim CM7.
elim CF2.
elim A7. 
apply refl_equal. 
apply refl_equal. 
elim SC3.
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle n') d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle n'))))) y').
elim SUM7.
elimtype
 ((fun d0 : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle n') d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle n'))))) y')
     (seq (ia Frame s2 (Tuple n d)) y))).

elim SUM1; apply refl_equal. 
apply EXTE; intro. 
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.

Save comms2Rn.

Goal
forall (n n' : bit) (d : D) (x y y' : proc),
Delta =
enc H (Lmer (comm (seq (ia Frame s2 (Tuple n d)) y) (seq (Rn n') y')) x).
intros.
elim comms2Rn.
unfold Delta in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal.

Save Comms2Rn.

Goal
forall (d : D) (n : bit) (y : proc),
Delta = comm (seq (ia Frame s2 (Tuple n d)) y) (L i).
intros.
elim ChanL.
elim SC3.
elim SUM7.
elimtype
 ((fun d0 : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia Frame s2 (Tuple n d)) y))).
elim SUM1.
apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
red in |- *.
intro.
apply EQFf.
apply EQ_sym.
assumption.
Save comms2L.

Goal
forall (d : D) (n : bit) (x y : proc),
Delta = enc H (Lmer (comm (seq (ia Frame s2 (Tuple n d)) y) (L i)) x).
intros.
elim comms2L.
unfold Delta in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal.
Save Comms2L.

Goal
forall x y y' : proc,
Delta =
enc H
  (Lmer (comm (alt (seq (ia one int i) y) (seq (ia one int i) y')) (L i)) x).
intros.
elim SC3.
elim CM9.
elim ChanL.
elimtype
 (Delta =
  comm
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i)))) (seq (ia one int i) y')).

elimtype
 (Delta =
  comm
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i)))) (seq (ia one int i) y)).
elim A6.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia one int i) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQfi.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia one int i) y'))).

elim SUM1; apply refl_equal. 
apply EXTE; intro.
elim CM7.
elim CF2''. 
elim A7.
apply refl_equal. 
exact EQfi.

Save CommiL.

Goal
forall x y y' : proc,
Delta =
enc H
  (Lmer (comm (alt (seq (ia one int i) y) (seq (ia one int i) y')) (K i)) x).
intros.
elim SC3.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (alt (seq (ia one int i) y) (seq (ia one int i) y'))).
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (alt (seq (ia one int i) y) (seq (ia one int i) y')))).
elim SUM1.
unfold Delta at 2 in |- *.
elim CM2.
elim D5. elim D3.
elim A7. apply refl_equal.
apply EXTE. intro.
elim A4.
elim CM9.
elim CM7.
elim CM7.
elim CF2''.
elim A7.
elim A7.
elim A6.
apply refl_equal.
exact EQFi.

Save CommiK.

Goal
forall (x y y' : proc) (b : bit),
Delta = enc H (Lmer (comm (seq (ia one int i) y) (seq (Rn b) y')) x).   
intros.
elim SC3.
elim ProcRn.
elimtype
 (Delta =
  comm
    (seq
       (alt
          (seq
             (alt (D + (fun d : D => ia Frame r3 (Tuple b d)))
                (ia Frame r3 lce)) (seq (ia frame s5 (tuple b)) (Rn b)))
          (D +
           (fun d : D =>
            seq (ia Frame r3 (Tuple (toggle b) d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))))) y')
    (seq (ia one int i) y)).

unfold Delta in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal. 

elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y').
elim CM8.
elimtype
 (Delta =
  comm
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y')
    (seq (ia one int i) y)).
elim A6.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b)) (Rn b)) y').
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')).
elim CM8.
elimtype
 (Delta =
  comm (seq (ia Frame r3 lce) (seq (seq (ia frame s5 (tuple b)) (Rn b)) y'))
    (seq (ia one int i) y)).
elim A6.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq (ia Frame r3 (Tuple b d))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')) 
     (seq (ia one int i) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFi.
elim CM7.
elim CF2''.
elim A7. 
apply refl_equal.
exact EQFi. 
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y').
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y')
     (seq (ia one int i) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFi.
Save commiRn.

Goal
forall (x y y' y'' : proc) (b : bit),
Delta =
enc H
  (Lmer
     (comm (alt (seq (ia one int i) y) (seq (ia one int i) y'))
        (seq (Rn b) y'')) x).   
intros.
elim CM8.
elim CM4.
elim D4.
elim commiRn.
elim commiRn.
elim A6.
apply refl_equal.
Save CommiRn.

Goal
forall (x y : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Tn_d d b) y) (L i)) x).
intros.
elim ProcTn_d.
elim ChanL.
elim A4.
elim
 (SC3
    (alt
       (seq
          (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
             (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))))).
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i)))
    (alt
       (seq
          (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
             (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))).
elim
 (SUM6 frame
    (fun d0 : frame =>
     comm
       (seq (ia frame r5 d0)
          (seq
             (alt (seq (ia one int i) (ia frame s6 d0))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i)))
       (alt
          (seq
             (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
                (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))) x).
elim SUM9.
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   enc H
     (Lmer
        (comm
           (seq (ia frame r5 d0)
              (seq
                 (alt (seq (ia one int i) (ia frame s6 d0))
                    (seq (ia one int i) (ia frame s6 sce))) 
                 (L i)))
           (alt
              (seq
                 (seq
                    (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
                    (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))) x))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM9.
elim A5.
elim A4.
elim A4.
elim CM9.
elim CM7.
elim CM7.
elim CM7.
elim CF2.
elim CF2.
elim CF2.
elim A7.
elim A7.
elim A6.
elim A6.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply refl_equal.
apply refl_equal.
apply refl_equal.
Save CommTn_dL.

Goal
forall (x y y' : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Tn_d d b) y) (seq (ia one int i) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim CM8.
elim A5.
elim A4.
elim CM8.
elim CM7.
elim CM7.
elim CM7.
elim CF2''.
elim CF2''.
elim CF2''.
elim A7.
elim A7.
elim A6.
elim A6.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
exact EQfi.
exact EQfi.
exact EQfi.
Save commTn_di1.

Goal
forall (x y y' y'' : proc) (b : bit) (d : D),
Delta =
enc H
  (Lmer
     (comm (seq (Tn_d d b) y)
        (alt (seq (ia one int i) y') (seq (ia one int i) y''))) x). 
intros.
elim CM9.
elim CM4.
elim D4.
elim commTn_di1.
elim commTn_di1.
elim A6.
apply refl_equal.
Save CommTn_di. 

Goal
forall (x y : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Sn_d d b) y) (L i)) x).
intros.
elim ProcSn_d.
elim A5.
elim SC3.
elim ChanL.
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))).
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))).
elim SUM1.
unfold Delta at 2 in |- *.
elim CM2.
elim D5. elim D3.
elim A7. apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
red in |- *. intro.
apply EQFf.
apply EQ_sym.
assumption.
Save CommSn_dL.

Goal
forall (x y : proc) (b : bit) (d : D),
seq (ia Frame c2 (Tuple b d))
  (enc H
     (mer (seq (Tn_d d b) y)
        (mer
           (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple b d)) (K i)))
              (seq (ia one int i) (seq (ia Frame s3 lce) (K i)))) x))) =
enc H (Lmer (comm (seq (Sn_d d b) y) (K i)) x).
intros.
elim ProcSn_d.
elim A5.
pattern (K i) at 3 in |- *.
elim ChanK.
elim
 (SC3 (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))
    (Frame +
     (fun x : Frame =>
      seq (ia Frame r2 x)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 x))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))))).
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))).
elimtype
 (Frame +
  (fun d0 : Frame =>
   cond
     (comm
        (seq (ia Frame r2 (Tuple b d))
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
     (eqF d0 (Tuple b d)) Delta) =
  Frame +
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))).
elim
 (Sum_EliminationF
    (fun d0 : Frame =>
     comm
       (seq (ia Frame r2 d0)
          (seq
             (alt (seq (ia one int i) (ia Frame s3 d0))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
    (Tuple b d)).
elim CM7; elim CF1.
elim CM3; elim D5.
elim A4.
elim A5.
elim A5.
elim
 (SC6 (seq (Tn_d d b) y)
    (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple b d)) (K i)))
       (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))).
elim SC7.
unfold gamma in |- *; trivial.
elim D1.
trivial.
exact Inc2H.
elimtype
 ((fun d0 : Frame =>
   cond
     (comm
        (seq (ia Frame r2 (Tuple b d))
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
     (eqF d0 (Tuple b d)) Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))).
trivial.
apply EXTE; intros.
cut (true = eqF d0 (Tuple b d) \/ false = eqF d0 (Tuple b d)).
cut
 (true = eqF d0 (Tuple b d) ->
  cond
    (comm
       (seq (ia Frame r2 (Tuple b d))
          (seq
             (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
    (eqF d0 (Tuple b d)) Delta =
  comm
    (seq (ia Frame r2 d0)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 d0))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))).
cut
 (false = eqF d0 (Tuple b d) ->
  cond
    (comm
       (seq (ia Frame r2 (Tuple b d))
          (seq
             (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
    (eqF d0 (Tuple b d)) Delta =
  comm
    (seq (ia Frame r2 d0)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 d0))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))). 
intros.
exact (or_ind H0 H H1).
intro.
elim H.
elim COND2.
elim CM7.
elim CF2'.
elim A7.
trivial.
exact (eqF_intro' d0 (Tuple b d) H).
intro.
elim (eqF_intro d0 (Tuple b d) H).
elim eqF7; elim COND1.
trivial.
apply Lemma4.
Save CommSn_dK.

Goal
forall (x y y' : proc) (b b' : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Sn_d d b) y) (seq (Rn b') y')) x).
intros.
elim SC3.
elim ProcRn.
elim
 (A4
    (seq
       (alt (D + (fun d : D => ia Frame r3 (Tuple b' d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b')) (Rn b')))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b') d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y').
elim
 (CM8
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b' d)))
             (ia Frame r3 lce)) (seq (ia frame s5 (tuple b')) (Rn b'))) y')
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b') d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y')
    (seq (Sn_d d b) y)).
elimtype
 (Delta =
  comm
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b' d)))
             (ia Frame r3 lce)) (seq (ia frame s5 (tuple b')) (Rn b'))) y')
    (seq (Sn_d d b) y)).
elim
 (A6'
    (comm
       (seq
          (D +
           (fun d : D =>
            seq (ia Frame r3 (Tuple (toggle b') d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y')
       (seq (Sn_d d b) y))).
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b') d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b'))))) y').
elim
 (SUM7 D
    (fun d : D =>
     seq
       (seq (ia Frame r3 (Tuple (toggle b') d))
          (seq (ia D s4 d) (ia frame s5 (tuple (toggle b'))))) y')
    (seq (Sn_d d b) y)).

elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b') d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b'))))) y')
     (seq (Sn_d d b) y))).
elim SUM1.
unfold Delta at 2 in |- *.
elim CM2. elim D5. elim D3. elim A7. apply refl_equal.
apply EXTE. intro.
elim A5.
elim ProcSn_d.
elim A5.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b' d))) 
    (ia Frame r3 lce) (seq (ia frame s5 (tuple b')) (Rn b'))). 
elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple b' d)))
       (seq (ia frame s5 (tuple b')) (Rn b')))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b')) (Rn b'))) y').
elim CM8.
elimtype
 (Delta =
  comm
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b' d)))
          (seq (ia frame s5 (tuple b')) (Rn b'))) y') 
    (seq (Sn_d d b) y)).
elim A6'.
elim A5.
elim ProcSn_d.
elim A5.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
elim
 (A5 (D + (fun d : D => ia Frame r3 (Tuple b' d)))
    (seq (ia frame s5 (tuple b')) (Rn b')) y').
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b' d))
    (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b' d0))
        (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')) 
     (seq (Sn_d d b) y))).
elim SUM1. apply refl_equal.
apply EXTE. intro.
elim ProcSn_d.
elim A5.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
Save CommSn_dRn.

Goal
forall (x y y' : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (ia D s4 d) y) (seq (Tn_d d b) y')) x).
intros.
elim SC3.
elim ProcTn_d.
elim A4.
elim A4. 
elim A4. 
elim CM8. 
elim CM8. 
elim A5. 
elim A5. 
elim CM7. 
elim CM7. 
elim CM7. 
elim CF2''. 
elim CF2''. 
elim CF2''. 
  
elim A7. 
elim A7. 
elim A6. 
elim A6. 
unfold Delta at 2 in |- *. 
elim CM2. 
elim D5. 
elim D3. 
elim A7. 
apply refl_equal.
exact EQfD.
exact EQfD.
exact EQfD.

Save CommTn_ds4.

Goal
forall (x y y' : proc) (b : bit) (d : D) (f : frame),
Delta = enc H (Lmer (comm (seq (ia frame s5 f) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF2.
elim CF2.
elim CF2.
 
elim A7.
elim A7.
elim A6.
elim A6.
unfold Delta at 2 in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.

apply refl_equal.
apply refl_equal.
apply refl_equal.
apply refl_equal.

Save CommTn_ds5.

Goal
forall (x y : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (K i) (seq (Tn_d d b) y)) x).

intros.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (Tn_d d b) y)).
elimtype
 ((fun f : Frame => Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (Tn_d d b) y))).
elim SUM1.
unfold Delta in |- *.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
apply EXTE.
intro.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF2''.
elim CF2''.
elim CF2''.

elim A7.
elim A7.
elim A6.
elim A6.
apply refl_equal.
exact EQFf.
exact EQFf.
exact EQFf.
Save CommTn_dK.

Goal
forall (x y : proc) (d : D),
Delta = enc H (Lmer (comm (seq (ia D s4 d) y) (L i)) x). 
intros.
elim SC3.
elim ChanL.
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia D s4 d) y)).
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia D s4 d) y))).
elim SUM1.
unfold Delta in |- *.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQfD.
Save CommLs4.

Goal
forall (x y : proc) (f : frame),
seq (ia frame c5 f)
  (enc H
     (mer y
        (mer
           (alt (seq (ia one int i) (seq (ia frame s6 f) (L i)))
              (seq (ia one int i) (seq (ia frame s6 sce) (L i)))) x))) =
enc H (Lmer (comm (seq (ia frame s5 f) y) (L i)) x).
intros.
pattern (L i) at 3 in |- *.
elim ChanL.
elim
 (SC3 (seq (ia frame s5 f) y)
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))))).
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia frame s5 f) y)).
elimtype
 ((fun d : frame =>
   cond
     (comm
        (seq (ia frame r5 f)
           (seq
              (alt (seq (ia one int i) (ia frame s6 f))
                 (seq (ia one int i) (ia frame s6 sce))) 
              (L i))) (seq (ia frame s5 f) y)) (eqf d f) Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia frame s5 f) y))).
elim
 (Sum_Eliminationf
    (fun e : frame =>
     comm
       (seq (ia frame r5 e)
          (seq
             (alt (seq (ia one int i) (ia frame s6 e))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i))) (seq (ia frame s5 e) y)) f).
elim CM7.
elim CF1.
unfold gamma in |- *.
elim CM3.
elim A4.
elim
 (SC6 y
    (alt (seq (seq (ia one int i) (ia frame s6 f)) (L i))
       (seq (seq (ia one int i) (ia frame s6 sce)) (L i)))).
elim SC7.
elim D5.
elim D1.
elim A5; elim A5.
trivial.
exact Inc5H.
apply EXTE; intro.
cut (true = eqf d f \/ false = eqf d f).
cut
 (true = eqf d f ->
  cond
    (comm
       (seq (ia frame r5 f)
          (seq
             (alt (seq (ia one int i) (ia frame s6 f))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i))) (seq (ia frame s5 f) y)) (eqf d f) Delta =
  comm
    (seq (ia frame r5 d)
       (seq
          (alt (seq (ia one int i) (ia frame s6 d))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia frame s5 f) y)).
cut
 (false = eqf d f ->
  cond
    (comm
       (seq (ia frame r5 f)
          (seq
             (alt (seq (ia one int i) (ia frame s6 f))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i))) (seq (ia frame s5 f) y)) (eqf d f) Delta =
  comm
    (seq (ia frame r5 d)
       (seq
          (alt (seq (ia one int i) (ia frame s6 d))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia frame s5 f) y)).
intros.
exact (or_ind H0 H H1).
intro.
elim H; elim COND2.
elim CM7; elim CF2'.
elim A7; trivial.
exact (eqf_intro' d f H).
2: apply Lemma4.
intros.
elim H.
elim COND1.
elim (eqf_intro d f H).
trivial.
Save CommLs5.

Goal
forall (x y : proc) (f : frame),
Delta = enc H (Lmer (comm (seq (ia frame s6 f) y) (K i)) x).
intros.
elim SC3.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia frame s6 f) y)).
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia frame s6 f) y))).
elim SUM1.
unfold Delta in |- *.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.

Save CommKs6.

Goal
forall (x y y' : proc) (b : bit) (f : frame),
Delta = enc H (Lmer (comm (seq (ia frame s6 f) y) (seq (Rn b) y')) x).
intros.
elim SC3.
elim ProcRn.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y').
elim
 (CM8
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
          (seq (ia frame s5 (tuple b)) (Rn b))) y')
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y')
    (seq (ia frame s6 f) y)).

elimtype
 (Delta =
  comm
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y')
    (seq (ia frame s6 f) y)).

elim
 (A6
    (comm
       (seq
          (seq
             (alt (D + (fun d : D => ia Frame r3 (Tuple b d)))
                (ia Frame r3 lce)) (seq (ia frame s5 (tuple b)) (Rn b))) y')
       (seq (ia frame s6 f) y))).
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (ia frame s5 (tuple b)) (Rn b))).

elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y').
elim
 (CM8
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
          (seq (ia frame s5 (tuple b)) (Rn b))) y')
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y')
    (seq (ia frame s6 f) y)).

elimtype
 (Delta =
  comm
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
          (seq (ia frame s5 (tuple b)) (Rn b))) y') 
    (seq (ia frame s6 f) y)).
elim A6'.
elim A5.
elim CM7.
elim CF2''.
elim A7.
unfold Delta at 2 in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
exact EQFf.
elim
 (A5 (D + (fun d : D => ia Frame r3 (Tuple b d)))
    (seq (ia frame s5 (tuple b)) (Rn b)) y').
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq (ia Frame r3 (Tuple b d))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y'))
     (seq (ia frame s6 f) y))).
elim SUM1.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y').
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y')
     (seq (ia frame s6 f) y))).
elim SUM1.
apply refl_equal. 
apply EXTE. intro. 
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
Save CommRns6.

Goal
forall (x y y' : proc) (b : bit) (d : D),
seq (ia frame c6 sce) (enc H (mer y (mer (seq (Sn_d d b) y') x))) =
enc H (Lmer (comm (seq (ia frame s6 sce) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF1.
elim CF2'.
elim CF2'.
elim A7.
elim A7.
elim A6.
elim A6'.
elim CM3.
elim D5.
elim D1.
elim SC7.
apply refl_equal.
exact Inc6H.
apply eqf_intro'.
apply eqf2.
apply eqf_intro'.
apply eqf2.
Save CommTn_ds6_sce.

Goal
forall (x y y' : proc) (b : bit) (d : D),
seq (ia frame c6 (tuple (toggle b)))
  (enc H (mer y (mer (seq (Sn_d d b) y') x))) =
enc H
  (Lmer (comm (seq (ia frame s6 (tuple (toggle b))) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF1.
elim CF2'.
elim CF2'.
elim A7.
elim A7.
elim A6.
elim A6.
elim CM3.
elim D5.
elim D1.
elim SC7.
apply refl_equal.
exact Inc6H.
apply eqf_intro'.
elim eqf4.
apply bit3.
apply eqf_intro'.
apply eqf3.

Save CommTn_ds6_b.

Goal
forall (x y y' : proc) (b : bit) (d : D),
seq (ia frame c6 (tuple b)) (enc H (mer y (mer y' x))) =
enc H (Lmer (comm (seq (ia frame s6 (tuple b)) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF1.
elim CF2'.
elim CF2'.
elim A7.
elim A6'.
elim A6'.
elim CM3.
elim D5.
elim D1.
elim SC7.
apply refl_equal.
exact Inc6H.
apply eqf_intro'.
apply eqf3.
apply eqf_intro'.
elim eqf4.
apply bit2.
Save CommTn_ds6_b'.

Goal
forall (x y : proc) (d : D),
Delta = enc H (Lmer (comm (K i) (seq (ia D s4 d) y)) x).   
intros.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia D s4 d) y)).
elimtype
 ((fun d : Frame => Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia D s4 d) y))).
elim SUM1. 
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFD.
Save CommKs4.

Goal
forall (x y : proc) (f : frame),
Delta = enc H (Lmer (comm (K i) (seq (ia frame s5 f) y)) x).
intros.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia frame s5 f) y)).
elimtype
 ((fun f : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia frame s5 f) y))).
elim SUM1.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
Save CommKs5.

Theorem CommTn_dRn :
 forall (x y y' : proc) (b b' : bit) (d : D),
 Delta = enc H (Lmer (comm (seq (Tn_d d b) y) (seq (Rn b') y')) x).

Theorem Comms3Tn_d :
 forall (x y y' : proc) (b : bit) (d : D) (f : Frame),
 Delta = enc H (Lmer (comm (seq (ia Frame s3 f) y) (seq (Tn_d d b) y')) x).

Theorem Comms3L :
 forall (x y : proc) (f : Frame),
 Delta = enc H (Lmer (comm (seq (ia Frame s3 f) y) (L i)) x).

Theorem Comms3Rn_lce :
 forall (x y y' : proc) (b : bit),
 seq (ia Frame c3 lce)
   (enc H (mer (mer y (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')) x)) =
 enc H (Lmer (comm (seq (ia Frame s3 lce) y) (seq (Rn b) y')) x).

Theorem Comms3Rn_b' :
 forall (x y y' : proc) (b : bit) (d : D),
 seq (ia Frame c3 (Tuple b d))
   (enc H (mer (mer (seq (ia frame s5 (tuple b)) (seq (Rn b) y')) y) x)) =
 enc H (Lmer (comm (seq (ia Frame s3 (Tuple b d)) y) (seq (Rn b) y')) x).

Theorem Comms3Rn_b :
 forall (x y y' : proc) (b : bit) (d : D),
 seq (ia Frame c3 (Tuple (toggle b) d))
   (enc H
      (mer y
         (mer (seq (ia D s4 d) (seq (ia frame s5 (tuple (toggle b))) y')) x))) =
 enc H
   (Lmer (comm (seq (ia Frame s3 (Tuple (toggle b) d)) y) (seq (Rn b) y')) x). *)

Require Import abp_lem2.
(* abp_lem2:
Require Import abp_base.
Require Import abp_defs.
Require Import abp_lem1.

Theorem Lem1 : D + (fun d : D => seq (ia D r1 d) (X1 d)) = X.

Theorem Lem2 : D + (fun d : D => seq (ia D r1 d) (Y1 d)) = Y.

Theorem Lem3 :
 forall d : D,
 seq (ia Frame c2 (Tuple e0 d))
   (enc H
      (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
         (mer
            (seq
               (alt (seq (ia one int i) (ia Frame s3 (Tuple e0 d)))
                  (seq (ia one int i) (ia Frame s3 lce))) 
               (K i)) (mer (L i) (R i))))) = X1 d.

Theorem Lem4 :
 forall d : D,
 alt
   (seq (ia one int i)
      (enc H
         (mer (seq (ia Frame s3 (Tuple e0 d)) (K i))
            (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (mer (L i) (R i))))))
   (seq (ia one int i)
      (enc H
         (mer (seq (ia Frame s3 lce) (K i))
            (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (mer (L i) (R i)))))) =
 enc H
   (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
      (mer
         (seq
            (alt (seq (ia one int i) (ia Frame s3 (Tuple e0 d)))
               (seq (ia one int i) (ia Frame s3 lce))) 
            (K i)) (mer (L i) (R i)))).

Theorem Lem5 :
 forall d : D,
 seq (ia Frame c3 lce)
   (enc H
      (mer (K i)
         (mer (seq (ia frame s5 (tuple e1)) (R i))
            (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (L i))))) =
 enc H
   (mer (seq (ia Frame s3 lce) (K i))
      (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (mer (L i) (R i)))).

Theorem Lem6 :
 forall d : D,
 seq (ia Frame c3 (Tuple e0 d))
   (enc H
      (mer (K i)
         (mer
            (seq (ia D s4 d)
               (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i))))
            (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (L i))))) =
 enc H
   (mer (seq (ia Frame s3 (Tuple e0 d)) (K i))
      (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (mer (L i) (R i)))).

Theorem Lem7 :
 forall d : D,
 seq (ia D s4 d) (X2 d) =
 enc H
   (mer (K i)
      (mer
         (seq (ia D s4 d) (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i))))
         (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (L i)))).

Theorem Lem8 :
 forall d : D,
 seq (ia frame c5 (tuple e1))
   (enc H
      (mer (R i)
         (mer
            (alt (seq (ia one int i) (seq (ia frame s6 (tuple e1)) (L i)))
               (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
            (mer (K i) (seq (Tn_d d e0) (seq (Sn e1) (S i))))))) =
 enc H
   (mer (K i)
      (mer (seq (ia frame s5 (tuple e1)) (R i))
         (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (L i)))).

Theorem Lem9 :
 forall d : D,
 alt
   (seq (ia one int i)
      (enc H
         (mer (seq (ia frame s6 (tuple e1)) (L i))
            (mer (R i) (mer (K i) (seq (Tn_d d e0) (seq (Sn e1) (S i))))))))
   (seq (ia one int i)
      (enc H
         (mer (seq (ia frame s6 sce) (L i))
            (mer (R i) (mer (K i) (seq (Tn_d d e0) (seq (Sn e1) (S i)))))))) =
 enc H
   (mer (R i)
      (mer
         (alt (seq (ia one int i) (seq (ia frame s6 (tuple e1)) (L i)))
            (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
         (mer (K i) (seq (Tn_d d e0) (seq (Sn e1) (S i)))))). *)

Require Import abp_lem25.
(* abp_lem25:
Require Import abp_base.
Require Import abp_defs.
Require Import abp_lem1.
Require Import abp_lem2.

Theorem Lem10 :
 forall d : D,
 seq (ia frame c6 (tuple e1)) (X1 d) =
 enc H
   (mer (seq (ia frame s6 (tuple e1)) (L i))
      (mer (R i) (mer (K i) (seq (Tn_d d e0) (seq (Sn e1) (S i)))))).

Theorem Lem11 :
 forall d : D,
 seq (ia frame c6 sce) (X1 d) =
 enc H
   (mer (seq (ia frame s6 sce) (L i))
      (mer (R i) (mer (K i) (seq (Tn_d d e0) (seq (Sn e1) (S i)))))).

Theorem Lem12 :
 forall d : D,
 seq (ia Frame c2 (Tuple e0 d))
   (alt
      (seq (ia one int i)
         (seq (ia Frame c3 (Tuple e0 d)) (seq (ia D s4 d) (X2 d))))
      (seq (ia one int i)
         (seq (ia Frame c3 lce)
            (seq (ia frame c5 (tuple e1))
               (seq
                  (alt (seq (ia one int i) (ia frame c6 (tuple e1)))
                     (seq (ia one int i) (ia frame c6 sce))) 
                  (X1 d)))))) = X1 d.

Theorem Lem13 :
 forall d : D,
 seq (ia Frame c2 (Tuple e1 d))
   (enc H
      (mer (seq (Tn_d d e1) (S i))
         (mer
            (seq
               (alt (seq (ia one int i) (ia Frame s3 (Tuple e1 d)))
                  (seq (ia one int i) (ia Frame s3 lce))) 
               (K i)) (mer (L i) (seq (Rn e0) (R i)))))) = 
 Y1 d.

Theorem Lem14 :
 forall d : D,
 alt
   (seq (ia one int i)
      (enc H
         (mer (seq (ia Frame s3 (Tuple e1 d)) (K i))
            (mer (seq (Tn_d d e1) (S i)) (mer (L i) (seq (Rn e0) (R i)))))))
   (seq (ia one int i)
      (enc H
         (mer (seq (ia Frame s3 lce) (K i))
            (mer (seq (Tn_d d e1) (S i)) (mer (L i) (seq (Rn e0) (R i))))))) =
 enc H
   (mer (seq (Tn_d d e1) (S i))
      (mer
         (seq
            (alt (seq (ia one int i) (ia Frame s3 (Tuple e1 d)))
               (seq (ia one int i) (ia Frame s3 lce))) 
            (K i)) (mer (L i) (seq (Rn e0) (R i))))).

Theorem Lem15 :
 forall d : D,
 seq (ia Frame c3 lce)
   (enc H
      (mer (K i)
         (mer (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i)))
            (mer (seq (Tn_d d e1) (S i)) (L i))))) =
 enc H
   (mer (seq (ia Frame s3 lce) (K i))
      (mer (seq (Tn_d d e1) (S i)) (mer (L i) (seq (Rn e0) (R i))))).

Theorem Lem16 :
 forall d : D,
 seq (ia Frame c3 (Tuple e1 d))
   (enc H
      (mer (K i)
         (mer (seq (ia D s4 d) (seq (ia frame s5 (tuple e1)) (R i)))
            (mer (seq (Tn_d d e1) (S i)) (L i))))) =
 enc H
   (mer (seq (ia Frame s3 (Tuple e1 d)) (K i))
      (mer (seq (Tn_d d e1) (S i)) (mer (L i) (seq (Rn e0) (R i))))).

Theorem Lem17 :
 forall d : D,
 seq (ia D s4 d) (Y2 d) =
 enc H
   (mer (K i)
      (mer (seq (ia D s4 d) (seq (ia frame s5 (tuple e1)) (R i)))
         (mer (seq (Tn_d d e1) (S i)) (L i)))).

Theorem Lem18 :
 forall d : D,
 seq (ia frame c5 (tuple e0))
   (enc H
      (mer (seq (Rn e0) (R i))
         (mer
            (alt (seq (ia one int i) (seq (ia frame s6 (tuple e0)) (L i)))
               (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
            (mer (K i) (seq (Tn_d d e1) (S i)))))) =
 enc H
   (mer (K i)
      (mer (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i)))
         (mer (seq (Tn_d d e1) (S i)) (L i)))).

Theorem Lem19 :
 forall d : D,
 alt
   (seq (ia one int i)
      (enc H
         (mer (seq (ia frame s6 (tuple e0)) (L i))
            (mer (seq (Rn e0) (R i)) (mer (K i) (seq (Tn_d d e1) (S i)))))))
   (seq (ia one int i)
      (enc H
         (mer (seq (ia frame s6 sce) (L i))
            (mer (seq (Rn e0) (R i)) (mer (K i) (seq (Tn_d d e1) (S i))))))) =
 enc H
   (mer (seq (Rn e0) (R i))
      (mer
         (alt (seq (ia one int i) (seq (ia frame s6 (tuple e0)) (L i)))
            (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
         (mer (K i) (seq (Tn_d d e1) (S i))))). *)

Require Import abp_lem3.
(* abp_lem3:
Require Import abp_base.
Require Import abp_defs.
Require Import abp_lem1.
Require Import abp_lem2.
Require Import abp_lem25.

Theorem Lem20 :
 forall d : D,
 seq (ia frame c6 (tuple e0)) (Y1 d) =
 enc H
   (mer (seq (ia frame s6 (tuple e0)) (L i))
      (mer (seq (Rn e0) (R i)) (mer (K i) (seq (Tn_d d e1) (S i))))) :>proc.

Theorem Lem21 :
 forall d : D,
 seq (ia frame c6 sce) (Y1 d) =
 enc H
   (mer (seq (ia frame s6 sce) (L i))
      (mer (seq (Rn e0) (R i)) (mer (K i) (seq (Tn_d d e1) (S i))))).

Goal
forall d : D,
seq (ia Frame c2 (Tuple e1 d))
  (alt
     (seq (ia one int i)
        (seq (ia Frame c3 (Tuple e1 d)) (seq (ia D s4 d) (Y2 d))))
     (seq (ia one int i)
        (seq (ia Frame c3 lce)
           (seq (ia frame c5 (tuple e0))
              (seq
                 (alt (seq (ia one int i) (ia frame c6 (tuple e0)))
                    (seq (ia one int i) (ia frame c6 sce))) 
                 (Y1 d)))))) = Y1 d.
intros.
pattern (Y1 d) at 2 in |- *.
elim Lem13.
elim Lem14.
elim Lem15.
elim Lem16.
elim Lem17.
elim Lem18.
elim Lem19.
elim Lem20.
elim Lem21.
elim A4.
elim A5.
elim A5.
apply refl_equal.
 
Save Lem22.

Goal
forall d : D,
seq (ia frame c5 (tuple e0))
  (enc H
     (mer (seq (Rn e0) (R i))
        (mer
           (alt (seq (ia one int i) (seq (ia frame s6 (tuple e0)) (L i)))
              (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
           (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i))))) = 
X2 d.

intros.
unfold X2 in |- *.
elim (EXPH4 (seq (Tn_d d e0) (seq (Sn e1) (S i)))).
elim LmerTnd.
elim LmerK.
elim LmerL.
elim Lmers5.
elim (SC3 (L i) (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i)))).
elim CommLs5.
elim CommKL.
elim CommKs5.
elim (SC3 (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)).
elim CommTn_dK.
elim CommTn_dL.
elim
 (SC3 (seq (Tn_d d e0) (seq (Sn e1) (S i)))
    (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i)))).
elim CommTn_ds5.
repeat elim A6.
repeat elim A6'.
apply refl_equal.

Save Lem23.

Goal
forall d : D,
alt
  (seq (ia one int i)
     (enc H
        (mer (seq (ia frame s6 (tuple e0)) (L i))
           (mer (seq (Rn e0) (R i))
              (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i))))))
  (seq (ia one int i)
     (enc H
        (mer (seq (ia frame s6 sce) (L i))
           (mer (seq (Rn e0) (R i))
              (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)))))) =
enc H
  (mer (seq (Rn e0) (R i))
     (mer
        (alt (seq (ia one int i) (seq (ia frame s6 (tuple e0)) (L i)))
           (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
        (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)))).
intros.
elim (EXPH4 (seq (Rn e0) (R i))). 
elim LmerRn.
elim Lmeri.
elim LmerTnd.
elim LmerK.
elim (SC3 (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)).
elim CommTn_dK.
elim
 (SC3 (seq (Rn e0) (R i))
    (alt (seq (ia one int i) (seq (ia frame s6 (tuple e0)) (L i)))
       (seq (ia one int i) (seq (ia frame s6 sce) (L i))))).
elim CommiRn.
elim (SC3 (seq (Rn e0) (R i)) (seq (Tn_d d e0) (seq (Sn e1) (S i)))).
elim CommTn_dRn.
elim (SC3 (seq (Rn e0) (R i)) (K i)).
elim CommKRn.
elim
 (SC3
    (alt (seq (ia one int i) (seq (ia frame s6 (tuple e0)) (L i)))
       (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
    (seq (Tn_d d e0) (seq (Sn e1) (S i)))).
elim CommTn_di.
elim CommiK. 
repeat elim A6. 
repeat elim A6'.
apply refl_equal.
Save Lem24.

Goal
forall d : D,
seq (ia frame c6 (tuple e0)) Y =
enc H
  (mer (seq (ia frame s6 (tuple e0)) (L i))
     (mer (seq (Rn e0) (R i))
        (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)))).
intros.
elim EXPH4. 
elim LmerRn.
elim Lmers6.
elim LmerTnd.
elim LmerK.
elim (SC3 (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)).
elim CommTn_dK.
elim (SC3 (seq (Rn e0) (R i)) (seq (Tn_d d e0) (seq (Sn e1) (S i)))).
elim CommTn_dRn.
elim CommRns6.
elim (SC3 (seq (Rn e0) (R i)) (K i)).
elim CommKRn.
elim CommKs6.
elim CommTn_ds6_b'.
repeat elim A6.
repeat elim A6'.
unfold Y in |- *.
elim (SC6 (mer (seq (Sn e1) (S i)) (mer (seq (Rn e0) (R i)) (K i))) (L i)).
elim SC7.
elim SC7.
elim (SC6 (mer (K i) (L i)) (seq (Rn e0) (R i))).
elim SC7.
apply refl_equal.
Save Lem25.

Goal
forall d : D,
seq (ia frame c6 sce)
  (enc H
     (mer (L i)
        (mer (seq (Sn_d d e0) (seq (Sn e1) (S i)))
           (mer (seq (Rn e0) (R i)) (K i))))) =
enc H
  (mer (seq (ia frame s6 sce) (L i))
     (mer (seq (Rn e0) (R i))
        (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)))).
     
intros.
elim (EXPH4 (seq (ia frame s6 sce) (L i))).
elim LmerRn.
elim Lmers6.
elim LmerTnd.
elim LmerK.
elim (SC3 (seq (Tn_d d e0) (seq (Sn e1) (S i))) (K i)).
elim CommTn_dK.
elim (SC3 (seq (Rn e0) (R i)) (seq (Tn_d d e0) (seq (Sn e1) (S i)))).
elim CommTn_dRn.
elim CommRns6. 
elim (SC3 (seq (Rn e0) (R i)) (K i)).
elim CommKRn.  
elim CommKs6.
elim CommTn_ds6_sce.
repeat elim A6.
repeat elim A6'.
apply refl_equal.

Save Lem26.

Goal
forall d : D,
seq (ia Frame c2 (Tuple e0 d))
  (enc H
     (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
        (mer
           (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple e0 d)) (K i)))
              (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))
           (mer (L i) (seq (Rn e0) (R i)))))) =
enc H
  (mer (L i)
     (mer (seq (Sn_d d e0) (seq (Sn e1) (S i)))
        (mer (seq (Rn e0) (R i)) (K i)))).
intros.
elim (EXPH4 (L i)).
elim LmerL.
elim LmerSnd.
elim LmerRn.
elim LmerK.
elim CommLRn.
elim (SC3 (seq (Rn e0) (R i)) (K i)).
elim CommKRn.
elim CommSn_dK.
elim (SC3 (L i) (seq (Sn_d d e0) (seq (Sn e1) (S i)))).
elim CommSn_dL.
elim (SC3 (L i) (K i)).
elim CommKL.
elim CommSn_dRn.
repeat elim A6.
repeat elim A6'.
apply refl_equal.

Save Lem27.

Goal
forall d : D,
alt
  (seq (ia one int i)
     (enc H
        (mer (seq (ia Frame s3 (Tuple e0 d)) (K i))
           (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
              (mer (L i) (seq (Rn e0) (R i)))))))
  (seq (ia one int i)
     (enc H
        (mer (seq (ia Frame s3 lce) (K i))
           (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
              (mer (L i) (seq (Rn e0) (R i))))))) =
enc H
  (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
     (mer
        (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple e0 d)) (K i)))
           (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))
        (mer (L i) (seq (Rn e0) (R i))))).
intros.
elim (EXPH4 (seq (Tn_d d e0) (seq (Sn e1) (S i)))).
elim LmerTnd.
elim Lmeri.
elim LmerL.
elim LmerRn.
elim CommTn_dRn.
elim CommTn_dL.
elim CommTn_di.
elim CommLRn.
elim CommiRn.
elim CommiL.
repeat elim A6.
repeat elim A6'.
apply refl_equal.
Save Lem28.

Goal
forall d : D,
seq (ia Frame c3 lce) (X2 d) =
enc H
  (mer (seq (ia Frame s3 lce) (K i))
     (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
        (mer (L i) (seq (Rn e0) (R i))))).
intros.   
elim EXPH4. 
elim Lmers3.
elim LmerTnd.
elim LmerL.
elim LmerRn.
elim CommLRn.
elim CommTn_dL.
elim CommTn_dRn.
elim Comms3Tn_d.
elim Comms3L.
elim Comms3Rn_lce.
repeat elim A6.
repeat elim A6'.

unfold X2 in |- *.
elim
 (SC6 (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (L i))
    (mer (K i) (seq (seq (ia frame s5 (tuple e0)) (Rn e0)) (R i)))).
elim SC7.
elim (SC6 (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i))) (L i)).
elim
 (SC6 (mer (K i) (seq (seq (ia frame s5 (tuple e0)) (Rn e0)) (R i))) (L i)).
elim SC7.
elim A5.
apply refl_equal.
Save Lem29.

Goal
forall d : D,
seq (ia Frame c3 (Tuple e0 d)) (X2 d) =
enc H
  (mer (seq (ia Frame s3 (Tuple e0 d)) (K i))
     (mer (seq (Tn_d d e0) (seq (Sn e1) (S i)))
        (mer (L i) (seq (Rn e0) (R i))))). 
intros.   
elim EXPH4.  
elim Lmers3. 
elim LmerTnd.
elim LmerL. 
elim LmerRn.
elim CommLRn. 
elim CommTn_dL.
elim CommTn_dRn.
elim Comms3Tn_d. 
elim Comms3L. 
elim Comms3Rn_b'.
repeat elim A6. 
repeat elim A6'. 
unfold X2 in |- *.
elim
 (SC6 (mer (seq (Tn_d d e0) (seq (Sn e1) (S i))) (L i))
    (mer (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i))) (K i))).

elim SC7.
elim
 (SC6 (mer (L i) (seq (ia frame s5 (tuple e0)) (seq (Rn e0) (R i)))) (K i)).
elim SC7.
apply refl_equal.
Save Lem30.

Goal
forall d : D,
seq (ia frame c5 (tuple e0))
  (alt
     (seq (ia one int i)
        (seq (ia frame c6 sce)
           (seq (ia Frame c2 (Tuple e0 d))
              (seq
                 (alt (seq (ia one int i) (ia Frame c3 lce))
                    (seq (ia one int i) (ia Frame c3 (Tuple e0 d)))) 
                 (X2 d)))))
     (seq (ia one int i) (seq (ia frame c6 (tuple e0)) Y))) = 
X2 d.
intros.
pattern (X2 d) at 2 in |- *.
elim Lem23.
elim Lem24.
elim Lem25.
elim Lem26.
elim Lem27.
elim Lem28.
elim Lem29.
elim Lem30.
elim
 (A1
    (seq (ia one int i)
       (seq (ia frame c6 sce)
          (seq (ia Frame c2 (Tuple e0 d))
             (alt
                (seq (ia one int i) (seq (ia Frame c3 (Tuple e0 d)) (X2 d)))
                (seq (ia one int i) (seq (ia Frame c3 lce) (X2 d)))))))
    (seq (ia one int i) (seq (ia frame c6 (tuple e0)) Y))).
elim A4.
elim
 (A1 (seq (ia one int i) (seq (ia Frame c3 lce) (X2 d)))
    (seq (ia one int i) (seq (ia Frame c3 (Tuple e0 d)) (X2 d)))).
elim A5.
elim A5.
apply refl_equal.
Save Lem31.

Goal
forall d : D,
seq (ia frame c5 (tuple e1))
  (enc H
     (mer (R i)
        (mer
           (alt (seq (ia one int i) (seq (ia frame s6 (tuple e1)) (L i)))
              (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
           (mer (seq (Tn_d d e1) (S i)) (K i))))) = 
Y2 d.

intros.
unfold Y2 in |- *.
elim (EXPH4 (seq (Tn_d d e1) (S i))).
elim LmerTnd.
elim LmerK.
elim LmerL.
elim Lmers5.
elim (SC3 (L i) (seq (ia frame s5 (tuple e1)) (R i))).
elim CommLs5.
elim CommKL.
elim CommKs5.
elim (SC3 (seq (Tn_d d e1) (S i)) (K i)).
elim CommTn_dK.
elim CommTn_dL.
elim (SC3 (seq (Tn_d d e1) (S i)) (seq (ia frame s5 (tuple e1)) (R i))).
elim CommTn_ds5.
repeat elim A6.
repeat elim A6'.
apply refl_equal.
Save Lem33.

Goal
forall d : D,
alt
  (seq (ia one int i)
     (enc H
        (mer (seq (ia frame s6 (tuple e1)) (L i))
           (mer (R i) (mer (seq (Tn_d d e1) (S i)) (K i))))))
  (seq (ia one int i)
     (enc H
        (mer (seq (ia frame s6 sce) (L i))
           (mer (R i) (mer (seq (Tn_d d e1) (S i)) (K i)))))) =
enc H
  (mer (R i)
     (mer
        (alt (seq (ia one int i) (seq (ia frame s6 (tuple e1)) (L i)))
           (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
        (mer (seq (Tn_d d e1) (S i)) (K i)))).
intros.
elim (EXPH4 (R i)).
elim Lmeri.
elim LmerTnd.
elim LmerK.
pattern (R i) at 3 9 10 11 in |- *.
elim ProcR.
elim LmerRn.
elim (SC3 (seq (Tn_d d e1) (S i)) (K i)).
elim CommTn_dK.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (K i)).
elim CommKRn.

elim
 (SC3 (seq (Rn e1) (seq (Rn e0) (R i)))
    (alt (seq (ia one int i) (seq (ia frame s6 (tuple e1)) (L i)))
       (seq (ia one int i) (seq (ia frame s6 sce) (L i))))).
elim CommiRn.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (seq (Tn_d d e1) (S i))).
elim CommTn_dRn.
elim
 (SC3
    (alt (seq (ia one int i) (seq (ia frame s6 (tuple e1)) (L i)))
       (seq (ia one int i) (seq (ia frame s6 sce) (L i))))
    (seq (Tn_d d e1) (S i))).

elim CommTn_di.
elim CommiK.
repeat elim A6.
repeat elim A6'.
apply refl_equal.
Save Lem34.

Goal
forall d : D,
seq (ia frame c6 (tuple e1)) X =
enc H
  (mer (seq (ia frame s6 (tuple e1)) (L i))
     (mer (R i) (mer (seq (Tn_d d e1) (S i)) (K i)))).

intros.
elim EXPH4.
pattern (R i) at 2 6 7 8 in |- *.
elim ProcR.
elim LmerRn.
elim Lmers6.
elim LmerTnd.
elim LmerK.
elim (SC3 (seq (Tn_d d e1) (S i)) (K i)).
elim CommTn_dK.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (seq (Tn_d d e1) (S i))).
elim CommTn_dRn.
elim CommRns6.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (K i)).
elim CommKRn.
elim CommKs6.
elim CommTn_ds6_b'.
repeat elim A6.
repeat elim A6'.
unfold X in |- *.
elim (SC6 (mer (S i) (mer (R i) (K i))) (L i)).
elim SC7.
elim SC7.
elim (SC6 (mer (K i) (L i)) (R i)).
elim SC7.
apply refl_equal.
Save Lem35.

Goal
forall d : D,
seq (ia frame c6 sce)
  (enc H (mer (L i) (mer (seq (Sn_d d e1) (S i)) (mer (R i) (K i))))) =
enc H
  (mer (seq (ia frame s6 sce) (L i))
     (mer (R i) (mer (seq (Tn_d d e1) (S i)) (K i)))).

intros.
elim (EXPH4 (seq (ia frame s6 sce) (L i))).
pattern (R i) at 3 7 8 9 in |- *.
elim ProcR.
elim LmerRn.
elim Lmers6.
elim LmerTnd.
elim LmerK.
elim (SC3 (seq (Tn_d d e1) (S i)) (K i)).
elim CommTn_dK.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (seq (Tn_d d e1) (S i))).
elim CommTn_dRn.
elim CommRns6.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (K i)).
elim CommKRn.
elim CommKs6.
elim CommTn_ds6_sce.
repeat elim A6.
repeat elim A6'.
apply refl_equal.
Save Lem36.

Goal
forall d : D,
seq (ia Frame c2 (Tuple e1 d))
  (enc H
     (mer (seq (Tn_d d e1) (S i))
        (mer
           (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple e1 d)) (K i)))
              (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))
           (mer (L i) (R i))))) =
enc H (mer (L i) (mer (seq (Sn_d d e1) (S i)) (mer (R i) (K i)))).
intros.
elim (EXPH4 (L i)).
elim LmerL.
elim LmerSnd.
pattern (R i) at 2 4 5 8 in |- *.
elim ProcR.
elim LmerRn.
elim LmerK.
elim CommLRn.
elim (SC3 (seq (Rn e1) (seq (Rn e0) (R i))) (K i)).
elim CommKRn.
elim CommSn_dK.
elim (SC3 (L i) (seq (Sn_d d e1) (S i))).
elim CommSn_dL.
elim (SC3 (L i) (K i)).
elim CommKL.
elim CommSn_dRn.
repeat elim A6.
repeat elim A6'.
apply refl_equal.
Save Lem37.

Goal
forall d : D,
alt
  (seq (ia one int i)
     (enc H
        (mer (seq (ia Frame s3 (Tuple e1 d)) (K i))
           (mer (seq (Tn_d d e1) (S i)) (mer (L i) (R i))))))
  (seq (ia one int i)
     (enc H
        (mer (seq (ia Frame s3 lce) (K i))
           (mer (seq (Tn_d d e1) (S i)) (mer (L i) (R i)))))) =
enc H
  (mer (seq (Tn_d d e1) (S i))
     (mer
        (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple e1 d)) (K i)))
           (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))
        (mer (L i) (R i)))).
intros.
elim (EXPH4 (seq (Tn_d d e1) (S i))).
elim LmerTnd.
elim Lmeri.
elim LmerL.
pattern (R i) at 5 6 8 11 in |- *.
elim ProcR.
elim LmerRn.
elim CommTn_dRn.
elim CommTn_dL.
elim CommTn_di.
elim CommLRn.
elim CommiRn.
elim CommiL.
repeat elim A6.
repeat elim A6'.
apply refl_equal.

Save Lem38.

Goal
forall d : D,
seq (ia Frame c3 lce) (Y2 d) =
enc H
  (mer (seq (ia Frame s3 lce) (K i))
     (mer (seq (Tn_d d e1) (S i)) (mer (L i) (R i)))).
intros.
elim EXPH4.
elim Lmers3.
elim LmerTnd.
elim LmerL.
pattern (R i) at 1 2 4 7 in |- *.
elim ProcR.
elim LmerRn.
elim CommLRn.
elim CommTn_dL.
elim CommTn_dRn.
elim Comms3Tn_d.
elim Comms3L.
elim Comms3Rn_lce.
repeat elim A6.
repeat elim A6'.
 
unfold Y2 in |- *.
elim
 (SC6 (mer (seq (Tn_d d e1) (S i)) (L i))
    (mer (K i)
       (seq (seq (ia frame s5 (tuple e1)) (Rn e1)) (seq (Rn e0) (R i))))).
elim SC7.
elim (SC6 (seq (ia frame s5 (tuple e1)) (R i)) (L i)).
elim
 (SC6
    (mer (K i)
       (seq (seq (ia frame s5 (tuple e1)) (Rn e1)) (seq (Rn e0) (R i))))
    (L i)).
elim SC7.
elim A5.
pattern (R i) at 1 in |- *.
elim ProcR.
apply refl_equal.
Save Lem39.

Goal
forall d : D,
seq (ia Frame c3 (Tuple e1 d)) (Y2 d) =
enc H
  (mer (seq (ia Frame s3 (Tuple e1 d)) (K i))
     (mer (seq (Tn_d d e1) (S i)) (mer (L i) (R i)))).
intros.
elim EXPH4.
elim Lmers3.
elim LmerTnd.
elim LmerL.
pattern (R i) at 1 2 4 7 in |- *.
elim ProcR.
elim LmerRn.
elim CommLRn.
elim CommTn_dL.
elim CommTn_dRn.
elim Comms3Tn_d.
elim Comms3L.
elim Comms3Rn_b'.
repeat elim A6.
repeat elim A6'.
unfold Y2 in |- *.
elim
 (SC6 (mer (seq (Tn_d d e1) (S i)) (L i))
    (mer (seq (ia frame s5 (tuple e1)) (seq (Rn e1) (seq (Rn e0) (R i))))
       (K i))).
 
elim SC7.
elim (SC6 (mer (L i) (seq (ia frame s5 (tuple e1)) (R i))) (K i)).
elim SC7.
pattern (R i) at 1 in |- *.
elim ProcR.
apply refl_equal.
Save Lem40.

Goal
forall d : D,
seq (ia frame c5 (tuple e1))
  (alt
     (seq (ia one int i)
        (seq (ia frame c6 sce)
           (seq (ia Frame c2 (Tuple e1 d))
              (seq
                 (alt (seq (ia one int i) (ia Frame c3 lce))
                    (seq (ia one int i) (ia Frame c3 (Tuple e1 d)))) 
                 (Y2 d)))))
     (seq (ia one int i) (seq (ia frame c6 (tuple e1)) X))) = 
Y2 d.
intros.
pattern (Y2 d) at 2 in |- *.
elim Lem33.
elim Lem34.
elim Lem35.
elim Lem36.
elim Lem37.
elim Lem38.
elim Lem39.
elim Lem40.
elim
 (A1
    (seq (ia one int i)
       (seq (ia frame c6 sce)
          (seq (ia Frame c2 (Tuple e1 d))
             (alt
                (seq (ia one int i) (seq (ia Frame c3 (Tuple e1 d)) (Y2 d)))
                (seq (ia one int i) (seq (ia Frame c3 lce) (Y2 d)))))))
    (seq (ia one int i) (seq (ia frame c6 (tuple e1)) X))).
elim A4.
elim
 (A1 (seq (ia one int i) (seq (ia Frame c3 lce) (Y2 d)))
    (seq (ia one int i) (seq (ia Frame c3 (Tuple e1 d)) (Y2 d)))).
elim A5.
elim A5.
apply refl_equal.

Save Lem41. *)



Require Import abp_lem1.
(* abp_lem1:
Require Import abp_base.
Require Import abp_defs.

Goal
forall (b : bit) (x y : proc),
D + (fun d : D => seq (ia D r1 d) (enc H (mer (seq (Sn_d d b) y) x))) =
enc H (Lmer (seq (Sn b) y) x).

intros.
elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y).
elimtype
 ((fun d : D => seq (ia D r1 d) (seq (Sn_d d b) y)) =
  (fun d : D => seq (seq (ia D r1 d) (Sn_d d b)) y)).
2: apply EXTE; intro; elim A5; apply refl_equal.
elim (SUM6 D (fun d : D => seq (ia D r1 d) (seq (Sn_d d b) y)) x).
elim SUM9.
elimtype
 ((fun d : D => seq (ia D r1 d) (enc H (mer (seq (Sn_d d b) y) x))) =
  (fun d : D => enc H (Lmer (seq (ia D r1 d) (seq (Sn_d d b) y)) x))).
           
apply refl_equal.
apply EXTE; intro. 
elim CM3.
elim D5.
elim D1.
apply refl_equal.
exact Inr1H.
Save LmerSn.

Goal forall x : proc, Delta = enc H (Lmer (K i) x).
intro.
elim ChanK.
elim
 (SUM6 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) x).
elim SUM9.
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   enc H
     (Lmer
        (seq (ia Frame r2 d)
           (seq
              (alt (seq (ia one int i) (ia Frame s3 d))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) x))).
elim SUM1.
apply refl_equal.
apply EXTE. intro.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Inr2H.
Save LmerK.

Goal forall x : proc, Delta = enc H (Lmer (L i) x).
intro.
elim ChanL.
elim
 (SUM6 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) x).
elim SUM9.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   enc H
     (Lmer
        (seq (ia frame r5 d)
           (seq
              (alt (seq (ia one int i) (ia frame s6 d))
                 (seq (ia one int i) (ia frame s6 sce))) 
              (L i))) x))).
           
elim SUM1.
apply refl_equal.
apply EXTE. intro.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Inr5H.
Save LmerL.

Goal forall (b : bit) (x y : proc), Delta = enc H (Lmer (seq (Rn b) y) x).
intros.
elim ProcRn.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y).
elim
 (CM4
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
          (seq (ia frame s5 (tuple b)) (Rn b))) y)
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y) x).
elim D4.
cut
 (Delta =
  enc H
    (Lmer
       (seq
          (D +
           (fun d : D =>
            seq (ia Frame r3 (Tuple (toggle b) d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y) x)).
intro H0.
elim H0.
elim A6.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (ia frame s5 (tuple b)) (Rn b))).
elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y).
elim
 (CM4
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
          (seq (ia frame s5 (tuple b)) (Rn b))) y)
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y) x).
elim A5.
elim A5.

elim A5.

elim CM3.
elim D4.
elim D5.
elim D2.
elim A7.
elim A6.

elim SUM5.
elim SUM6.

elim SUM9.

elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   enc H
     (Lmer
        (seq (ia Frame r3 (Tuple b d))
           (seq (ia frame s5 (tuple b)) (seq (Rn b) y))) x))).

elim SUM1.
apply refl_equal.
apply EXTE.
intro.
elim CM3.
elim D5.
elim D2. 
elim A7.
apply refl_equal.
exact Inr3H.
exact Inr3H. 
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y).
elim
 (SUM6 D
    (fun d : D =>
     seq
       (seq (ia Frame r3 (Tuple (toggle b) d))
          (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y) x).
elim SUM9.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   enc H
     (Lmer
        (seq
           (seq (ia Frame r3 (Tuple (toggle b) d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y) x))).
elim SUM1.
apply refl_equal.
apply EXTE; intro.
elim A5.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Inr3H.

Save LmerRn.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (L i) (seq (Rn b) y)) x).
intros.
cut (Delta = comm (L i) (seq (Rn b) y)).
intro H0.
elim H0.
unfold Delta at 2 in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.

elim ChanL.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (Rn b) y))).
elim SUM1.
apply refl_equal.
apply EXTE.
intro.
elim ProcRn.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y).

elim CM9.

cut
 (Delta =
  comm
    (seq (ia frame r5 d)
       (seq
          (alt (seq (ia one int i) (ia frame s6 d))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i)))
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y)).
intro.
elim H.
elim A6.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b)) (Rn b)) y).
elim A4.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim CM9.
cut
 (Delta =
  comm
    (seq (ia frame r5 d)
       (alt (seq (seq (ia one int i) (ia frame s6 d)) (L i))
          (seq (seq (ia one int i) (ia frame s6 sce)) (L i))))
    (seq (ia Frame r3 lce) (seq (seq (ia frame s5 (tuple b)) (Rn b)) y))).

intro.
elim H0.
elim A6.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim SC3.
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b d0))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y))
     (seq (ia frame r5 d)
        (alt (seq (seq (ia one int i) (ia frame s6 d)) (L i))
           (seq (seq (ia one int i) (ia frame s6 sce)) (L i)))))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
red in |- *.
intro.
apply EQFf.
apply EQ_sym.
assumption.
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y).
elim SC3. 
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b))))) y)
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))))).
elim SUM1.   
apply refl_equal.
apply EXTE; intro.
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
Save CommLRn.

Goal forall x : proc, Delta = enc H (Lmer (comm (K i) (L i)) x).
cut (Delta = comm (K i) (L i)).
intro H0.
elim H0.
unfold Delta at 2 in |- *.
intro.
elim CM2.
elim A7.
elim D3.
apply refl_equal.
elim ChanK.
elim SUM7.
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (L i))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim ChanL.
elim SC3.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i)))
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.   
elim A7.
apply refl_equal.
red in |- *; intro.
apply EQFf.
apply EQ_sym.
assumption.

Save CommKL.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (K i) (seq (Rn b) y)) x).
intros.
cut (Delta = comm (K i) (seq (Rn b) y)).
intro H0.
elim H0.
unfold Delta at 2 in |- *.
elim CM2.
elim A7. 
elim D3.
apply refl_equal. 

elim ChanK.
elim SUM7.
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (Rn b) y))).
elim SUM1; apply refl_equal.  
apply EXTE; intro.
elim ProcRn.
elim A4.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y).
elim CM9.
cut
 (Delta =
  comm
    (seq (ia Frame r2 d)
       (alt (seq (seq (ia one int i) (ia Frame s3 d)) (K i))
          (seq (seq (ia one int i) (ia Frame s3 lce)) (K i))))
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y)).
intro.
elim H.
elim A6.
elim A5.
elim A5.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b)) (Rn b)) y).
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim CM9.
elim CM7.
elim CF2.
elim A7; elim A6.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y)).
elim SC3.
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b d0))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y))
     (seq (ia Frame r2 d)
        (alt (seq (ia one int i) (seq (ia Frame s3 d) (K i)))
           (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2.
elim A7; apply refl_equal.  
apply refl_equal.
apply refl_equal.
elim SC3.

elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b))))) y)
     (seq (ia Frame r2 d)
        (alt (seq (seq (ia one int i) (ia Frame s3 d)) (K i))
           (seq (seq (ia one int i) (ia Frame s3 lce)) (K i)))))).
elim SUM1; apply refl_equal.  
apply EXTE; intro.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.  
Save CommKRn.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (seq (Sn b) y) (K i)) x).
intros.
cut (Delta = comm (seq (Sn b) y) (K i)).
intro H0. 
elim H0.
unfold Delta at 2 in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal.

elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D => comm (seq (seq (ia D r1 d) (Sn_d d b)) y) (K i))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim A5.
elim ChanK.
elim SC3.
elim SUM7.
elimtype
 ((fun d : Frame => Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia D r1 d) (seq (Sn_d d b) y)))).
elim SUM1; apply refl_equal.   
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFD.

Save CommSnK.

Goal
forall (b : bit) (x y : proc),
Delta = enc H (Lmer (comm (seq (Sn b) y) (L i)) x).

intros.    
cut (Delta = comm (seq (Sn b) y) (L i)).
intro H0.   
elim H0.
unfold Delta at 2 in |- *.
elim CM2. 
elim A7.
elim D3.
apply refl_equal.

elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D => comm (seq (seq (ia D r1 d) (Sn_d d b)) y) (L i))).
elim SUM1; apply refl_equal.
apply EXTE; intro. 
elim A5.
elim ChanL.
elim SC3.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia D r1 d) (seq (Sn_d d b) y)))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQfD.
Save CommSnL.

Goal
forall (b b' : bit) (x y y' : proc),
Delta = enc H (Lmer (comm (seq (Sn b) y) (seq (Rn b') y')) x).
intros.
cut (Delta = comm (seq (Sn b) y) (seq (Rn b') y')). 
intro H0.   
elim H0.
unfold Delta at 2 in |- *. 
elim CM2. 
elim A7. 
elim D3.
apply refl_equal. 
 
elim ProcSn.
elim (SUM5 D (fun d : D => seq (ia D r1 d) (Sn_d d b)) y). 
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D => comm (seq (seq (ia D r1 d) (Sn_d d b)) y) (seq (Rn b') y'))).
elim SUM1; apply refl_equal.
apply EXTE; intro. 
elim A5.

elim ProcRn.
elim
 (A4
    (seq
       (alt (D + (fun d : D => ia Frame r3 (Tuple b' d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b')) (Rn b')))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b') d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y').

elim CM9.
cut
 (Delta =
  comm (seq (ia D r1 d) (seq (Sn_d d b) y))
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b') d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y')).
intro.
elim H.
elim A6.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b' d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b')) (Rn b')) y').
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b' d))) 
    (ia Frame r3 lce) (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')).  
elim CM9.
elim CM7.
elim CF2''.
elim A7; elim A6.
elim SC3.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b' d))
    (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b' d0))
        (seq (seq (ia frame s5 (tuple b')) (Rn b')) y'))
     (seq (ia D r1 d) (seq (Sn_d d b) y)))).
elim SUM1; apply refl_equal. 
apply EXTE; intro. 
elim CM7. 
elim CF2''. 
elim A7; apply refl_equal. 
exact EQFD.
red in |- *.
intro.
apply EQFD.
apply EQ_sym.
assumption.

elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b') d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b'))))) y').
elim SC3.
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b') d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b'))))) y')
     (seq (ia D r1 d) (seq (Sn_d d b) y)))).

elim SUM1; apply refl_equal.  
apply EXTE; intro. 
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFD.

Save CommSnRn.

Goal
forall (b : bit) (d : D) (x y : proc),
Delta = enc H (Lmer (seq (Sn_d d b) y) x).

intros.
elim ProcSn_d.
elim A5.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins2H.
Save LmerSnd.

Goal
forall (b : bit) (d : D) (x y : proc),
Delta = enc H (Lmer (seq (Tn_d d b) y) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM4.
elim CM4.
elim A5.
elim A5.
elim CM3.
elim CM3.
elim CM3.
elim D4.
elim D4.
elim D5.
elim D5.
elim D5.
elim D2.
elim D2.
elim D2.
elim A7.
elim A7.
elim A6.
elim A6.
apply refl_equal.
exact Inr6H.
exact Inr6H.
exact Inr6H.
Save LmerTnd.

Goal
forall (f : frame) (x y : proc),
Delta = enc H (Lmer (seq (ia frame s5 f) y) x).

intros.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins5H.
Save Lmers5.

Goal
forall (d : D) (x y : proc),
seq (ia D s4 d) (enc H (mer y x)) = enc H (Lmer (seq (ia D s4 d) y) x).

intros.
elim CM3.
elim D5.
elim D1.
apply refl_equal.
exact Ins4H.
Save Lmers4.

Goal
forall x y y' : proc,
alt (seq (ia one int i) (enc H (mer y x)))
  (seq (ia one int i) (enc H (mer y' x))) =
enc H (Lmer (alt (seq (ia one int i) y) (seq (ia one int i) y')) x).
 
intros.
elim CM4.
elim CM3.
elim CM3.
elim D4.
elim D5.
elim D5.
elim D1.
apply refl_equal.
exact InintH.
Save Lmeri.

Goal
forall (f : Frame) (x y : proc),
Delta = enc H (Lmer (seq (ia Frame s3 f) y) x).

intros.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins3H.
Save Lmers3.

Goal
forall (f : frame) (x y : proc),
Delta = enc H (Lmer (seq (ia frame s6 f) y) x).

intros.
elim CM3.
elim D5.
elim D2.
elim A7.
apply refl_equal.
exact Ins6H.
Save Lmers6.

Goal forall (c : bool) (p : proc), cond p c p = p.
intros.
elim c.
elim COND1.
apply refl_equal.
elim COND2.
apply refl_equal.
Save Bak4_2_1.

Goal
forall (c : bool) (x y z : proc),
(true = c -> x = y) -> cond x c z = cond y c z.
intro.
intro.
intro.
intro.
elim c.
intro.
elim COND1.
elim COND1.
elim H.
apply refl_equal.
apply refl_equal.

intro.
elim COND2.
elim COND2.
apply refl_equal.
Save Def4_3_1_2.

Goal
forall (c : bool) (x y z : proc),
(false = c -> x = y) -> cond z c x = cond z c y.

intro.
intro.
intro.
intro.
elim c.
intro.
elim COND1.
elim COND1.
apply refl_equal.

intro.
elim COND2.
elim COND2.
elim H.
apply refl_equal.
apply refl_equal.
Save Def4_3_1_2'.

Goal
forall (x : Frame -> proc) (d : Frame),
x d = Frame + (fun e : Frame => cond (x d) (eqF e d) Delta).

intros.
pattern (x d) at 1 in |- *.
elimtype (Frame + (fun e : Frame => x d) = x d).
cut (forall e : Frame, x d = alt (cond (x d) (eqF e d) Delta) (x d)).
intros.
elim (SUM3 Frame d (fun e : Frame => cond (x d) (eqF e d) Delta)).

elim eqF7.
elim COND1.
pattern (x d) at 3 in |- *.
elimtype (Frame + (fun e : Frame => x d) = x d).
cut
 (forall x y : Frame -> proc,
  Frame + (fun d : Frame => alt (x d) (y d)) = alt (Frame + x) (Frame + y)).
intro SUM4r.

elim SUM4r.
cut
 ((fun e : Frame => alt (cond (x d) (eqF e d) Delta) (x d)) =
  (fun e : Frame => x d)).
intros.
elim H0.
apply refl_equal.

apply EXTE.
intro; apply sym_equal; trivial.
intros.
apply sym_equal.
apply SUM4.

elim SUM1; auto.
intro.
elim (eqF e d).
elim COND1.
elim A3; auto.
elim COND2.
elim A1; elim A6; auto.
elim SUM1; auto.
Save Sum_EliminationF.

Goal
forall (x : frame -> proc) (d : frame),
x d = frame + (fun e : frame => cond (x d) (eqf e d) Delta).

intros.
pattern (x d) at 1 in |- *.
elimtype (frame + (fun e : frame => x d) = x d).
cut (forall e : frame, x d = alt (cond (x d) (eqf e d) Delta) (x d)).
intros.
elim (SUM3 frame d (fun e : frame => cond (x d) (eqf e d) Delta)).

elim eqf7.
elim COND1.
pattern (x d) at 3 in |- *.
elimtype (frame + (fun e : frame => x d) = x d).
cut
 (forall x y : frame -> proc,
  frame + (fun d : frame => alt (x d) (y d)) = alt (frame + x) (frame + y)).
intro SUM4r.

elim SUM4r.
cut
 ((fun e : frame => alt (cond (x d) (eqf e d) Delta) (x d)) =
  (fun e : frame => x d)).
intros.
elim H0.
apply refl_equal.

apply EXTE.
intro; apply sym_equal; trivial.
intros.
apply sym_equal.
apply SUM4.
 
elim SUM1; auto.
intro.
elim (eqf e d).
elim COND1.
elim A3; auto.
elim COND2.
elim A1; elim A6; auto.
elim SUM1; auto.
Save Sum_Eliminationf.
 
Goal
forall (x : D -> proc) (d : D),
x d = D + (fun e : D => cond (x d) (eqD e d) Delta).
 
intros.
pattern (x d) at 1 in |- *.
elimtype (D + (fun e : D => x d) = x d).
cut (forall e : D, x d = alt (cond (x d) (eqD e d) Delta) (x d)).
intros.  
elim (SUM3 D d (fun e : D => cond (x d) (eqD e d) Delta)).
 
elim eqD7.
elim COND1.
pattern (x d) at 3 in |- *.
elimtype (D + (fun e : D => x d) = x d).
cut
 (forall x y : D -> proc,
  D + (fun d : D => alt (x d) (y d)) = alt (D + x) (D + y)).
intro SUM4r.
 
elim SUM4r.
cut
 ((fun e : D => alt (cond (x d) (eqD e d) Delta) (x d)) = (fun e : D => x d)).
intros.  
elim H0.
apply refl_equal.
 
apply EXTE.
intro; apply sym_equal; trivial.
intros.  
apply sym_equal.
apply SUM4.
 
elim SUM1; auto.
intro.   
elim (eqD e d).
elim COND1.
elim A3; auto.
elim COND2.
elim A1; elim A6; auto.
elim SUM1; auto.
Save Sum_EliminationD.
 
Goal
forall (d : D) (n : bit) (y : proc),
seq (ia Frame c2 (Tuple n d))
  (mer y
     (seq
        (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
           (seq (ia one int i) (ia Frame s3 lce))) 
        (K i))) = comm (seq (ia Frame s2 (Tuple n d)) y) (K i).

intros.
pattern (K i) at 2 in |- *.
elim ChanK.
elim SC3.
elim SUM7.

elimtype
 ((fun d0 : Frame =>
   cond
     (seq (ia Frame c2 (Tuple n d))
        (mer y
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i)))) (eqF d0 (Tuple n d)) Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia Frame s2 (Tuple n d)) y))).

2: apply EXTE; intro.
2: elim CM7.
2: elim
    (Bak4_2_1 (eqF d0 (Tuple n d))
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y))).
2: elim
    (Def4_3_1_2' (eqF d0 (Tuple n d)) Delta
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y))
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y))).
2: elim
    (Def4_3_1_2 (eqF d0 (Tuple n d))
       (seq (ia Frame c2 (Tuple n d))
          (mer y
             (seq
                (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i))))
       (seq (comm (ia Frame r2 d0) (ia Frame s2 (Tuple n d)))
          (mer
             (seq
                (alt (seq (ia one int i) (ia Frame s3 d0))
                   (seq (ia one int i) (ia Frame s3 lce))) 
                (K i)) y)) Delta).
2: apply refl_equal.
2: intros.
2: elim (eqF_intro d0 (Tuple n d)).
3: assumption.
2: elim CF1.
2: unfold gamma in |- *.
2: elim SC6.
2: apply refl_equal.

2: intro.
2: elim CF2'.
2: elim A7.
2: apply refl_equal.

2: apply eqF_intro'.
2: assumption.
elim
 (Sum_EliminationF
    (fun d' : Frame =>
     seq (ia Frame c2 d')
       (mer y
          (seq
             (alt (seq (ia one int i) (ia Frame s3 d'))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i)))) (Tuple n d)).
apply refl_equal.
Save comms2K.

Goal
forall (d : D) (n : bit) (y x : proc),
seq (ia Frame c2 (Tuple n d))
  (enc H
     (mer
        (mer y
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple n d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) x)) =
enc H (Lmer (comm (seq (ia Frame s2 (Tuple n d)) y) (K i)) x).

intros.
elim comms2K.
elim CM3.
elim D5.
elim D1.
apply refl_equal.
exact Inc2H.
Save Comms2K.

Goal
forall (d : D) (n n' : bit) (y y' : proc),
Delta = comm (seq (ia Frame s2 (Tuple n d)) y) (seq (Rn n') y').
intros.
elim ProcRn.
elim
 (A4
    (seq
       (alt (D + (fun d : D => ia Frame r3 (Tuple n' d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple n')) (Rn n')))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle n') d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle n')))))) y').
elim CM9.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple n' d))) 
    (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))).
elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple n' d)))
       (seq (ia frame s5 (tuple n')) (Rn n')))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))) y').           
elim
 (CM9 (seq (ia Frame s2 (Tuple n d)) y)
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple n' d)))
          (seq (ia frame s5 (tuple n')) (Rn n'))) y')
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))) y')).

elimtype
 (Delta =
  comm (seq (ia Frame s2 (Tuple n d)) y)
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle n') d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle n')))))) y')).

elimtype
 (Delta =
  comm (seq (ia Frame s2 (Tuple n d)) y)
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple n')) (Rn n'))) y')).

repeat elim A6.
elim
 (A5 (D + (fun d : D => ia Frame r3 (Tuple n' d)))
    (seq (ia frame s5 (tuple n')) (Rn n')) y').
elim SC3.

elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple n' d))
    (seq (seq (ia frame s5 (tuple n')) (Rn n')) y')).
elim SUM7.
elimtype
 ((fun d0 : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple n' d0))
        (seq (seq (ia frame s5 (tuple n')) (Rn n')) y'))
     (seq (ia Frame s2 (Tuple n d)) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
elim A5.
elim CM7.
elim CF2.
elim A7. 
apply refl_equal. 
apply refl_equal. 
elim SC3.
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle n') d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle n'))))) y').
elim SUM7.
elimtype
 ((fun d0 : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle n') d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle n'))))) y')
     (seq (ia Frame s2 (Tuple n d)) y))).

elim SUM1; apply refl_equal. 
apply EXTE; intro. 
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.

Save comms2Rn.

Goal
forall (n n' : bit) (d : D) (x y y' : proc),
Delta =
enc H (Lmer (comm (seq (ia Frame s2 (Tuple n d)) y) (seq (Rn n') y')) x).
intros.
elim comms2Rn.
unfold Delta in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal.

Save Comms2Rn.

Goal
forall (d : D) (n : bit) (y : proc),
Delta = comm (seq (ia Frame s2 (Tuple n d)) y) (L i).
intros.
elim ChanL.
elim SC3.
elim SUM7.
elimtype
 ((fun d0 : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia Frame s2 (Tuple n d)) y))).
elim SUM1.
apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
red in |- *.
intro.
apply EQFf.
apply EQ_sym.
assumption.
Save comms2L.

Goal
forall (d : D) (n : bit) (x y : proc),
Delta = enc H (Lmer (comm (seq (ia Frame s2 (Tuple n d)) y) (L i)) x).
intros.
elim comms2L.
unfold Delta in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal.
Save Comms2L.

Goal
forall x y y' : proc,
Delta =
enc H
  (Lmer (comm (alt (seq (ia one int i) y) (seq (ia one int i) y')) (L i)) x).
intros.
elim SC3.
elim CM9.
elim ChanL.
elimtype
 (Delta =
  comm
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i)))) (seq (ia one int i) y')).

elimtype
 (Delta =
  comm
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i)))) (seq (ia one int i) y)).
elim A6.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia one int i) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQfi.
elim SUM7.
elimtype
 ((fun d : frame => Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia one int i) y'))).

elim SUM1; apply refl_equal. 
apply EXTE; intro.
elim CM7.
elim CF2''. 
elim A7.
apply refl_equal. 
exact EQfi.

Save CommiL.

Goal
forall x y y' : proc,
Delta =
enc H
  (Lmer (comm (alt (seq (ia one int i) y) (seq (ia one int i) y')) (K i)) x).
intros.
elim SC3.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (alt (seq (ia one int i) y) (seq (ia one int i) y'))).
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (alt (seq (ia one int i) y) (seq (ia one int i) y')))).
elim SUM1.
unfold Delta at 2 in |- *.
elim CM2.
elim D5. elim D3.
elim A7. apply refl_equal.
apply EXTE. intro.
elim A4.
elim CM9.
elim CM7.
elim CM7.
elim CF2''.
elim A7.
elim A7.
elim A6.
apply refl_equal.
exact EQFi.

Save CommiK.

Goal
forall (x y y' : proc) (b : bit),
Delta = enc H (Lmer (comm (seq (ia one int i) y) (seq (Rn b) y')) x).   
intros.
elim SC3.
elim ProcRn.
elimtype
 (Delta =
  comm
    (seq
       (alt
          (seq
             (alt (D + (fun d : D => ia Frame r3 (Tuple b d)))
                (ia Frame r3 lce)) (seq (ia frame s5 (tuple b)) (Rn b)))
          (D +
           (fun d : D =>
            seq (ia Frame r3 (Tuple (toggle b) d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))))) y')
    (seq (ia one int i) y)).

unfold Delta in |- *.
elim CM2.
elim A7.
elim D3.
apply refl_equal. 

elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y').
elim CM8.
elimtype
 (Delta =
  comm
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y')
    (seq (ia one int i) y)).
elim A6.
elim
 (A5 (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
    (seq (ia frame s5 (tuple b)) (Rn b)) y').
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')).
elim CM8.
elimtype
 (Delta =
  comm (seq (ia Frame r3 lce) (seq (seq (ia frame s5 (tuple b)) (Rn b)) y'))
    (seq (ia one int i) y)).
elim A6.
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq (ia Frame r3 (Tuple b d))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')) 
     (seq (ia one int i) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFi.
elim CM7.
elim CF2''.
elim A7. 
apply refl_equal.
exact EQFi. 
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y').
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y')
     (seq (ia one int i) y))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFi.
Save commiRn.

Goal
forall (x y y' y'' : proc) (b : bit),
Delta =
enc H
  (Lmer
     (comm (alt (seq (ia one int i) y) (seq (ia one int i) y'))
        (seq (Rn b) y'')) x).   
intros.
elim CM8.
elim CM4.
elim D4.
elim commiRn.
elim commiRn.
elim A6.
apply refl_equal.
Save CommiRn.

Goal
forall (x y : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Tn_d d b) y) (L i)) x).
intros.
elim ProcTn_d.
elim ChanL.
elim A4.
elim
 (SC3
    (alt
       (seq
          (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
             (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))))).
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i)))
    (alt
       (seq
          (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
             (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))).
elim
 (SUM6 frame
    (fun d0 : frame =>
     comm
       (seq (ia frame r5 d0)
          (seq
             (alt (seq (ia one int i) (ia frame s6 d0))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i)))
       (alt
          (seq
             (seq (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
                (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))) x).
elim SUM9.
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   enc H
     (Lmer
        (comm
           (seq (ia frame r5 d0)
              (seq
                 (alt (seq (ia one int i) (ia frame s6 d0))
                    (seq (ia one int i) (ia frame s6 sce))) 
                 (L i)))
           (alt
              (seq
                 (seq
                    (alt (ia frame r6 (tuple (toggle b))) (ia frame r6 sce))
                    (Sn_d d b)) y) (seq (ia frame r6 (tuple b)) y))) x))).
elim SUM1; apply refl_equal.
apply EXTE; intro.
elim CM9.
elim A5.
elim A4.
elim A4.
elim CM9.
elim CM7.
elim CM7.
elim CM7.
elim CF2.
elim CF2.
elim CF2.
elim A7.
elim A7.
elim A6.
elim A6.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply refl_equal.
apply refl_equal.
apply refl_equal.
Save CommTn_dL.

Goal
forall (x y y' : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Tn_d d b) y) (seq (ia one int i) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim CM8.
elim A5.
elim A4.
elim CM8.
elim CM7.
elim CM7.
elim CM7.
elim CF2''.
elim CF2''.
elim CF2''.
elim A7.
elim A7.
elim A6.
elim A6.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
exact EQfi.
exact EQfi.
exact EQfi.
Save commTn_di1.

Goal
forall (x y y' y'' : proc) (b : bit) (d : D),
Delta =
enc H
  (Lmer
     (comm (seq (Tn_d d b) y)
        (alt (seq (ia one int i) y') (seq (ia one int i) y''))) x). 
intros.
elim CM9.
elim CM4.
elim D4.
elim commTn_di1.
elim commTn_di1.
elim A6.
apply refl_equal.
Save CommTn_di. 

Goal
forall (x y : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Sn_d d b) y) (L i)) x).
intros.
elim ProcSn_d.
elim A5.
elim SC3.
elim ChanL.
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))).
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))).
elim SUM1.
unfold Delta at 2 in |- *.
elim CM2.
elim D5. elim D3.
elim A7. apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
red in |- *. intro.
apply EQFf.
apply EQ_sym.
assumption.
Save CommSn_dL.

Goal
forall (x y : proc) (b : bit) (d : D),
seq (ia Frame c2 (Tuple b d))
  (enc H
     (mer (seq (Tn_d d b) y)
        (mer
           (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple b d)) (K i)))
              (seq (ia one int i) (seq (ia Frame s3 lce) (K i)))) x))) =
enc H (Lmer (comm (seq (Sn_d d b) y) (K i)) x).
intros.
elim ProcSn_d.
elim A5.
pattern (K i) at 3 in |- *.
elim ChanK.
elim
 (SC3 (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))
    (Frame +
     (fun x : Frame =>
      seq (ia Frame r2 x)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 x))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))))).
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))).
elimtype
 (Frame +
  (fun d0 : Frame =>
   cond
     (comm
        (seq (ia Frame r2 (Tuple b d))
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
     (eqF d0 (Tuple b d)) Delta) =
  Frame +
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))).
elim
 (Sum_EliminationF
    (fun d0 : Frame =>
     comm
       (seq (ia Frame r2 d0)
          (seq
             (alt (seq (ia one int i) (ia Frame s3 d0))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
    (Tuple b d)).
elim CM7; elim CF1.
elim CM3; elim D5.
elim A4.
elim A5.
elim A5.
elim
 (SC6 (seq (Tn_d d b) y)
    (alt (seq (ia one int i) (seq (ia Frame s3 (Tuple b d)) (K i)))
       (seq (ia one int i) (seq (ia Frame s3 lce) (K i))))).
elim SC7.
unfold gamma in |- *; trivial.
elim D1.
trivial.
exact Inc2H.
elimtype
 ((fun d0 : Frame =>
   cond
     (comm
        (seq (ia Frame r2 (Tuple b d))
           (seq
              (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                 (seq (ia one int i) (ia Frame s3 lce))) 
              (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
     (eqF d0 (Tuple b d)) Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))).
trivial.
apply EXTE; intros.
cut (true = eqF d0 (Tuple b d) \/ false = eqF d0 (Tuple b d)).
cut
 (true = eqF d0 (Tuple b d) ->
  cond
    (comm
       (seq (ia Frame r2 (Tuple b d))
          (seq
             (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
    (eqF d0 (Tuple b d)) Delta =
  comm
    (seq (ia Frame r2 d0)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 d0))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))).
cut
 (false = eqF d0 (Tuple b d) ->
  cond
    (comm
       (seq (ia Frame r2 (Tuple b d))
          (seq
             (alt (seq (ia one int i) (ia Frame s3 (Tuple b d)))
                (seq (ia one int i) (ia Frame s3 lce))) 
             (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y)))
    (eqF d0 (Tuple b d)) Delta =
  comm
    (seq (ia Frame r2 d0)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 d0))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia Frame s2 (Tuple b d)) (seq (Tn_d d b) y))). 
intros.
exact (or_ind H0 H H1).
intro.
elim H.
elim COND2.
elim CM7.
elim CF2'.
elim A7.
trivial.
exact (eqF_intro' d0 (Tuple b d) H).
intro.
elim (eqF_intro d0 (Tuple b d) H).
elim eqF7; elim COND1.
trivial.
apply Lemma4.
Save CommSn_dK.

Goal
forall (x y y' : proc) (b b' : bit) (d : D),
Delta = enc H (Lmer (comm (seq (Sn_d d b) y) (seq (Rn b') y')) x).
intros.
elim SC3.
elim ProcRn.
elim
 (A4
    (seq
       (alt (D + (fun d : D => ia Frame r3 (Tuple b' d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b')) (Rn b')))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b') d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y').
elim
 (CM8
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b' d)))
             (ia Frame r3 lce)) (seq (ia frame s5 (tuple b')) (Rn b'))) y')
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b') d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y')
    (seq (Sn_d d b) y)).
elimtype
 (Delta =
  comm
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b' d)))
             (ia Frame r3 lce)) (seq (ia frame s5 (tuple b')) (Rn b'))) y')
    (seq (Sn_d d b) y)).
elim
 (A6'
    (comm
       (seq
          (D +
           (fun d : D =>
            seq (ia Frame r3 (Tuple (toggle b') d))
              (seq (ia D s4 d) (ia frame s5 (tuple (toggle b')))))) y')
       (seq (Sn_d d b) y))).
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b') d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b'))))) y').
elim
 (SUM7 D
    (fun d : D =>
     seq
       (seq (ia Frame r3 (Tuple (toggle b') d))
          (seq (ia D s4 d) (ia frame s5 (tuple (toggle b'))))) y')
    (seq (Sn_d d b) y)).

elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b') d0))
           (seq (ia D s4 d0) (ia frame s5 (tuple (toggle b'))))) y')
     (seq (Sn_d d b) y))).
elim SUM1.
unfold Delta at 2 in |- *.
elim CM2. elim D5. elim D3. elim A7. apply refl_equal.
apply EXTE. intro.
elim A5.
elim ProcSn_d.
elim A5.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b' d))) 
    (ia Frame r3 lce) (seq (ia frame s5 (tuple b')) (Rn b'))). 
elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple b' d)))
       (seq (ia frame s5 (tuple b')) (Rn b')))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b')) (Rn b'))) y').
elim CM8.
elimtype
 (Delta =
  comm
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b' d)))
          (seq (ia frame s5 (tuple b')) (Rn b'))) y') 
    (seq (Sn_d d b) y)).
elim A6'.
elim A5.
elim ProcSn_d.
elim A5.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
elim
 (A5 (D + (fun d : D => ia Frame r3 (Tuple b' d)))
    (seq (ia frame s5 (tuple b')) (Rn b')) y').
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b' d))
    (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d0 : D =>
   comm
     (seq (ia Frame r3 (Tuple b' d0))
        (seq (seq (ia frame s5 (tuple b')) (Rn b')) y')) 
     (seq (Sn_d d b) y))).
elim SUM1. apply refl_equal.
apply EXTE. intro.
elim ProcSn_d.
elim A5.
elim A5.
elim CM7.
elim CF2.
elim A7.
apply refl_equal.
apply refl_equal.
Save CommSn_dRn.

Goal
forall (x y y' : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (seq (ia D s4 d) y) (seq (Tn_d d b) y')) x).
intros.
elim SC3.
elim ProcTn_d.
elim A4.
elim A4. 
elim A4. 
elim CM8. 
elim CM8. 
elim A5. 
elim A5. 
elim CM7. 
elim CM7. 
elim CM7. 
elim CF2''. 
elim CF2''. 
elim CF2''. 
  
elim A7. 
elim A7. 
elim A6. 
elim A6. 
unfold Delta at 2 in |- *. 
elim CM2. 
elim D5. 
elim D3. 
elim A7. 
apply refl_equal.
exact EQfD.
exact EQfD.
exact EQfD.

Save CommTn_ds4.

Goal
forall (x y y' : proc) (b : bit) (d : D) (f : frame),
Delta = enc H (Lmer (comm (seq (ia frame s5 f) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF2.
elim CF2.
elim CF2.
 
elim A7.
elim A7.
elim A6.
elim A6.
unfold Delta at 2 in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.

apply refl_equal.
apply refl_equal.
apply refl_equal.
apply refl_equal.

Save CommTn_ds5.

Goal
forall (x y : proc) (b : bit) (d : D),
Delta = enc H (Lmer (comm (K i) (seq (Tn_d d b) y)) x).

intros.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (Tn_d d b) y)).
elimtype
 ((fun f : Frame => Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (Tn_d d b) y))).
elim SUM1.
unfold Delta in |- *.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
apply EXTE.
intro.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF2''.
elim CF2''.
elim CF2''.

elim A7.
elim A7.
elim A6.
elim A6.
apply refl_equal.
exact EQFf.
exact EQFf.
exact EQFf.
Save CommTn_dK.

Goal
forall (x y : proc) (d : D),
Delta = enc H (Lmer (comm (seq (ia D s4 d) y) (L i)) x). 
intros.
elim SC3.
elim ChanL.
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia D s4 d) y)).
elimtype
 ((fun d : frame => Delta) =
  (fun d0 : frame =>
   comm
     (seq (ia frame r5 d0)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d0))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia D s4 d) y))).
elim SUM1.
unfold Delta in |- *.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQfD.
Save CommLs4.

Goal
forall (x y : proc) (f : frame),
seq (ia frame c5 f)
  (enc H
     (mer y
        (mer
           (alt (seq (ia one int i) (seq (ia frame s6 f) (L i)))
              (seq (ia one int i) (seq (ia frame s6 sce) (L i)))) x))) =
enc H (Lmer (comm (seq (ia frame s5 f) y) (L i)) x).
intros.
pattern (L i) at 3 in |- *.
elim ChanL.
elim
 (SC3 (seq (ia frame s5 f) y)
    (frame +
     (fun n : frame =>
      seq (ia frame r5 n)
        (seq
           (alt (seq (ia one int i) (ia frame s6 n))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))))).
elim
 (SUM7 frame
    (fun n : frame =>
     seq (ia frame r5 n)
       (seq
          (alt (seq (ia one int i) (ia frame s6 n))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia frame s5 f) y)).
elimtype
 ((fun d : frame =>
   cond
     (comm
        (seq (ia frame r5 f)
           (seq
              (alt (seq (ia one int i) (ia frame s6 f))
                 (seq (ia one int i) (ia frame s6 sce))) 
              (L i))) (seq (ia frame s5 f) y)) (eqf d f) Delta) =
  (fun d : frame =>
   comm
     (seq (ia frame r5 d)
        (seq
           (alt (seq (ia one int i) (ia frame s6 d))
              (seq (ia one int i) (ia frame s6 sce))) 
           (L i))) (seq (ia frame s5 f) y))).
elim
 (Sum_Eliminationf
    (fun e : frame =>
     comm
       (seq (ia frame r5 e)
          (seq
             (alt (seq (ia one int i) (ia frame s6 e))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i))) (seq (ia frame s5 e) y)) f).
elim CM7.
elim CF1.
unfold gamma in |- *.
elim CM3.
elim A4.
elim
 (SC6 y
    (alt (seq (seq (ia one int i) (ia frame s6 f)) (L i))
       (seq (seq (ia one int i) (ia frame s6 sce)) (L i)))).
elim SC7.
elim D5.
elim D1.
elim A5; elim A5.
trivial.
exact Inc5H.
apply EXTE; intro.
cut (true = eqf d f \/ false = eqf d f).
cut
 (true = eqf d f ->
  cond
    (comm
       (seq (ia frame r5 f)
          (seq
             (alt (seq (ia one int i) (ia frame s6 f))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i))) (seq (ia frame s5 f) y)) (eqf d f) Delta =
  comm
    (seq (ia frame r5 d)
       (seq
          (alt (seq (ia one int i) (ia frame s6 d))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia frame s5 f) y)).
cut
 (false = eqf d f ->
  cond
    (comm
       (seq (ia frame r5 f)
          (seq
             (alt (seq (ia one int i) (ia frame s6 f))
                (seq (ia one int i) (ia frame s6 sce))) 
             (L i))) (seq (ia frame s5 f) y)) (eqf d f) Delta =
  comm
    (seq (ia frame r5 d)
       (seq
          (alt (seq (ia one int i) (ia frame s6 d))
             (seq (ia one int i) (ia frame s6 sce))) 
          (L i))) (seq (ia frame s5 f) y)).
intros.
exact (or_ind H0 H H1).
intro.
elim H; elim COND2.
elim CM7; elim CF2'.
elim A7; trivial.
exact (eqf_intro' d f H).
2: apply Lemma4.
intros.
elim H.
elim COND1.
elim (eqf_intro d f H).
trivial.
Save CommLs5.

Goal
forall (x y : proc) (f : frame),
Delta = enc H (Lmer (comm (seq (ia frame s6 f) y) (K i)) x).
intros.
elim SC3.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia frame s6 f) y)).
elimtype
 ((fun d : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia frame s6 f) y))).
elim SUM1.
unfold Delta in |- *.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.

Save CommKs6.

Goal
forall (x y y' : proc) (b : bit) (f : frame),
Delta = enc H (Lmer (comm (seq (ia frame s6 f) y) (seq (Rn b) y')) x).
intros.
elim SC3.
elim ProcRn.
elim
 (A4
    (seq (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (D +
     (fun d : D =>
      seq (ia Frame r3 (Tuple (toggle b) d))
        (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y').
elim
 (CM8
    (seq
       (seq
          (alt (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce))
          (seq (ia frame s5 (tuple b)) (Rn b))) y')
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y')
    (seq (ia frame s6 f) y)).

elimtype
 (Delta =
  comm
    (seq
       (D +
        (fun d : D =>
         seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b)))))) y')
    (seq (ia frame s6 f) y)).

elim
 (A6
    (comm
       (seq
          (seq
             (alt (D + (fun d : D => ia Frame r3 (Tuple b d)))
                (ia Frame r3 lce)) (seq (ia frame s5 (tuple b)) (Rn b))) y')
       (seq (ia frame s6 f) y))).
elim
 (A4 (D + (fun d : D => ia Frame r3 (Tuple b d))) (ia Frame r3 lce)
    (seq (ia frame s5 (tuple b)) (Rn b))).

elim
 (A4
    (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
       (seq (ia frame s5 (tuple b)) (Rn b)))
    (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y').
elim
 (CM8
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
          (seq (ia frame s5 (tuple b)) (Rn b))) y')
    (seq (seq (ia Frame r3 lce) (seq (ia frame s5 (tuple b)) (Rn b))) y')
    (seq (ia frame s6 f) y)).

elimtype
 (Delta =
  comm
    (seq
       (seq (D + (fun d : D => ia Frame r3 (Tuple b d)))
          (seq (ia frame s5 (tuple b)) (Rn b))) y') 
    (seq (ia frame s6 f) y)).
elim A6'.
elim A5.
elim CM7.
elim CF2''.
elim A7.
unfold Delta at 2 in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
exact EQFf.
elim
 (A5 (D + (fun d : D => ia Frame r3 (Tuple b d)))
    (seq (ia frame s5 (tuple b)) (Rn b)) y').
elim
 (SUM5 D (fun d : D => ia Frame r3 (Tuple b d))
    (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')).
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq (ia Frame r3 (Tuple b d))
        (seq (seq (ia frame s5 (tuple b)) (Rn b)) y'))
     (seq (ia frame s6 f) y))).
elim SUM1.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
elim
 (SUM5 D
    (fun d : D =>
     seq (ia Frame r3 (Tuple (toggle b) d))
       (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y').
elim SUM7.
elimtype
 ((fun d : D => Delta) =
  (fun d : D =>
   comm
     (seq
        (seq (ia Frame r3 (Tuple (toggle b) d))
           (seq (ia D s4 d) (ia frame s5 (tuple (toggle b))))) y')
     (seq (ia frame s6 f) y))).
elim SUM1.
apply refl_equal. 
apply EXTE. intro. 
elim A5.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
Save CommRns6.

Goal
forall (x y y' : proc) (b : bit) (d : D),
seq (ia frame c6 sce) (enc H (mer y (mer (seq (Sn_d d b) y') x))) =
enc H (Lmer (comm (seq (ia frame s6 sce) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF1.
elim CF2'.
elim CF2'.
elim A7.
elim A7.
elim A6.
elim A6'.
elim CM3.
elim D5.
elim D1.
elim SC7.
apply refl_equal.
exact Inc6H.
apply eqf_intro'.
apply eqf2.
apply eqf_intro'.
apply eqf2.
Save CommTn_ds6_sce.

Goal
forall (x y y' : proc) (b : bit) (d : D),
seq (ia frame c6 (tuple (toggle b)))
  (enc H (mer y (mer (seq (Sn_d d b) y') x))) =
enc H
  (Lmer (comm (seq (ia frame s6 (tuple (toggle b))) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF1.
elim CF2'.
elim CF2'.
elim A7.
elim A7.
elim A6.
elim A6.
elim CM3.
elim D5.
elim D1.
elim SC7.
apply refl_equal.
exact Inc6H.
apply eqf_intro'.
elim eqf4.
apply bit3.
apply eqf_intro'.
apply eqf3.

Save CommTn_ds6_b.

Goal
forall (x y y' : proc) (b : bit) (d : D),
seq (ia frame c6 (tuple b)) (enc H (mer y (mer y' x))) =
enc H (Lmer (comm (seq (ia frame s6 (tuple b)) y) (seq (Tn_d d b) y')) x).
intros.
elim ProcTn_d.
elim A4.
elim A4.
elim A4.
elim CM9.
elim CM9.
elim A5.
elim A5.
elim CM7.
elim CM7.
elim CM7.
elim CF1.
elim CF2'.
elim CF2'.
elim A7.
elim A6'.
elim A6'.
elim CM3.
elim D5.
elim D1.
elim SC7.
apply refl_equal.
exact Inc6H.
apply eqf_intro'.
apply eqf3.
apply eqf_intro'.
elim eqf4.
apply bit2.
Save CommTn_ds6_b'.

Goal
forall (x y : proc) (d : D),
Delta = enc H (Lmer (comm (K i) (seq (ia D s4 d) y)) x).   
intros.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia D s4 d) y)).
elimtype
 ((fun d : Frame => Delta) =
  (fun d0 : Frame =>
   comm
     (seq (ia Frame r2 d0)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d0))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia D s4 d) y))).
elim SUM1. 
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFD.
Save CommKs4.

Goal
forall (x y : proc) (f : frame),
Delta = enc H (Lmer (comm (K i) (seq (ia frame s5 f) y)) x).
intros.
elim ChanK.
elim
 (SUM7 Frame
    (fun x : Frame =>
     seq (ia Frame r2 x)
       (seq
          (alt (seq (ia one int i) (ia Frame s3 x))
             (seq (ia one int i) (ia Frame s3 lce))) 
          (K i))) (seq (ia frame s5 f) y)).
elimtype
 ((fun f : Frame => Delta) =
  (fun d : Frame =>
   comm
     (seq (ia Frame r2 d)
        (seq
           (alt (seq (ia one int i) (ia Frame s3 d))
              (seq (ia one int i) (ia Frame s3 lce))) 
           (K i))) (seq (ia frame s5 f) y))).
elim SUM1.
unfold Delta in |- *.
elim CM2.
elim D5.
elim D3.
elim A7.
apply refl_equal.
apply EXTE. intro.
elim CM7.
elim CF2''.
elim A7.
apply refl_equal.
exact EQFf.
Save CommKs5.

Theorem CommTn_dRn :
 forall (x y y' : proc) (b b' : bit) (d : D),
 Delta = enc H (Lmer (comm (seq (Tn_d d b) y) (seq (Rn b') y')) x).

Theorem Comms3Tn_d :
 forall (x y y' : proc) (b : bit) (d : D) (f : Frame),
 Delta = enc H (Lmer (comm (seq (ia Frame s3 f) y) (seq (Tn_d d b) y')) x).

Theorem Comms3L :
 forall (x y : proc) (f : Frame),
 Delta = enc H (Lmer (comm (seq (ia Frame s3 f) y) (L i)) x).

Theorem Comms3Rn_lce :
 forall (x y y' : proc) (b : bit),
 seq (ia Frame c3 lce)
   (enc H (mer (mer y (seq (seq (ia frame s5 (tuple b)) (Rn b)) y')) x)) =
 enc H (Lmer (comm (seq (ia Frame s3 lce) y) (seq (Rn b) y')) x).

Theorem Comms3Rn_b' :
 forall (x y y' : proc) (b : bit) (d : D),
 seq (ia Frame c3 (Tuple b d))
   (enc H (mer (mer (seq (ia frame s5 (tuple b)) (seq (Rn b) y')) y) x)) =
 enc H (Lmer (comm (seq (ia Frame s3 (Tuple b d)) y) (seq (Rn b) y')) x).

Theorem Comms3Rn_b :
 forall (x y y' : proc) (b : bit) (d : D),
 seq (ia Frame c3 (Tuple (toggle b) d))
   (enc H
      (mer y
         (mer (seq (ia D s4 d) (seq (ia frame s5 (tuple (toggle b))) y')) x))) =
 enc H
   (Lmer (comm (seq (ia Frame s3 (Tuple (toggle b) d)) y) (seq (Rn b) y')) x). *)



Parameter X' Y' : proc.

Parameter X1' X2' Y1' Y2' : D -> proc.



Axiom

  Lin2' :

    forall d : D,

    alt (seq (ia one int i) (seq (ia D s4 d) (hide I' (X2 d))))

      (seq (ia one int i) (seq (ia one int i) (X1' d))) = 

    X1' d.



Axiom

  Lin3' :

    forall d : D,

    alt (seq (ia one int i) (seq (ia one int i) (X2' d)))

      (seq (ia one int i) (hide I' Y)) = X2' d.



Axiom

  Lin5' :

    forall d : D,

    alt (seq (ia one int i) (seq (ia D s4 d) (hide I' (Y2 d))))

      (seq (ia one int i) (seq (ia one int i) (Y1' d))) = 

    Y1' d.



Axiom

  Lin6' :

    forall d : D,

    alt (seq (ia one int i) (seq (ia one int i) (Y2' d)))

      (seq (ia one int i) (hide I' X)) = Y2' d.



Goal forall d : D, seq (ia one tau i) (X1' d) = hide I' (X1 d).

intros.

apply

 (RSP D (fun d : D => seq (ia one tau i) (X1' d))

    (fun d : D => hide I' (X1 d))

    (fun (X : D -> proc) (d : D) =>

     seq (ia one tau i)

       (alt (seq (ia one int i) (seq (ia D s4 d) (hide I' (X2 d))))

          (seq (ia one int i) (seq (ia one int i) (X d)))))).

auto.

intros.

pattern (X1' d0) at 1 in |- *.

elim Lin2'.

elim T1'.

apply refl_equal.



intros.

pattern (X1 d0) at 1 in |- *.

elim Lem12.

elim TI5.

elim TI4.

elim TI2.

elim TI5.

elim TI1.

elim TI5.

elim TI2.

elim TI5.

elim TI1.

elim TI5.

elim TI1.

elim TI5.

elim TI2.

elim TI5.

elim TI2.

elim TI5.

elim TI4.

elim TI5.

elim TI1.

elim TI2.

elim TI5.

elim TI1.

elim TI2.

elim A3.

repeat elim T1'.

elim T1.

apply refl_equal.

exact Inc6I.

exact InintI.

exact Inc6I.

exact InintI.

exact Inc5I.

exact Inc3I.

exact InintI.

exact Ins4I.

exact Inc3I.

exact InintI.

exact Inc2I.



Save LemLin2.



Goal forall d : D, seq (ia one tau i) (X2' d) = hide I' (X2 d).

intros.

apply

 (RSP D (fun d : D => seq (ia one tau i) (X2' d))

    (fun d : D => hide I' (X2 d))

    (fun (X : D -> proc) (d : D) =>

     seq (ia one tau i)

       (alt (seq (ia one int i) (seq (ia one int i) (X d)))

          (seq (ia one int i) (hide I' Y))))).

auto.

intro.

pattern (X2' d0) at 1 in |- *.

elim Lin3'.

elim T1'.

apply refl_equal.

intro.

pattern (X2 d0) at 1 in |- *.

elim Lem31.

elim TI5.

elim TI2.

elim TI4.

elim TI5.

elim TI1.

elim TI5.

elim TI2.



elim TI5.

elim TI2.

elim TI5.

elim TI4.

elim TI5.



elim TI1.

elim TI2.

elim TI5.

elim TI1.

elim TI2.

elim TI5.

elim TI1.

elim TI5.

elim TI2.

repeat elim T1'.

repeat elim T1.

elim A3.

apply refl_equal.

exact Inc6I.

exact InintI.

exact Inc3I.

exact InintI.

exact Inc3I.

exact InintI.

exact Inc2I.

exact Inc6I.

exact InintI.

exact Inc5I.

Save LemLin3.



Goal forall d : D, seq (ia one tau i) (Y1' d) = hide I' (Y1 d).

intros.

apply

 (RSP D (fun d : D => seq (ia one tau i) (Y1' d))

    (fun d : D => hide I' (Y1 d))

    (fun (Y : D -> proc) (d : D) =>

     seq (ia one tau i)

       (alt (seq (ia one int i) (seq (ia D s4 d) (hide I' (Y2 d))))

          (seq (ia one int i) (seq (ia one int i) (Y d)))))).

auto.

intros.

pattern (Y1' d0) at 1 in |- *.

elim Lin5'.

elim T1'.

apply refl_equal.

intros.

pattern (Y1 d0) at 1 in |- *.

elim Lem22.

elim TI5.

elim TI4.

elim TI2.

elim TI5.

elim TI1.

elim TI5.

elim TI2.

elim TI5.

elim TI1.

elim TI5.

elim TI1.

elim TI5.

elim TI2.

elim TI5.

elim TI2.

elim TI5.

elim TI4.

elim TI5.

elim TI1.

elim TI2.

elim TI5.

elim TI1.

elim TI2.

elim A3.

repeat elim T1'.

elim T1.

apply refl_equal.

exact Inc6I.

exact InintI.

exact Inc6I.

exact InintI.

exact Inc5I.

exact Inc3I.

exact InintI.

exact Ins4I.

exact Inc3I.

exact InintI.

exact Inc2I.

Save LemLin5.



Goal forall d : D, seq (ia one tau i) (Y2' d) = hide I' (Y2 d).

intros.

apply

 (RSP D (fun d : D => seq (ia one tau i) (Y2' d))

    (fun d : D => hide I' (Y2 d))

    (fun (Y : D -> proc) (d : D) =>

     seq (ia one tau i)

       (alt (seq (ia one int i) (seq (ia one int i) (Y d)))

          (seq (ia one int i) (hide I' X))))).

auto.

intro.

pattern (Y2' d0) at 1 in |- *.

elim Lin6'.

elim T1'.

apply refl_equal.

intro.

pattern (Y2 d0) at 1 in |- *.

elim Lem41.

elim TI5.

elim TI2.

elim TI4.

elim TI5.

elim TI1.

elim TI5.

elim TI2.



elim TI5.

elim TI2.

elim TI5.

elim TI4.

elim TI5.



elim TI1.

elim TI2.

elim TI5.

elim TI1.

elim TI2.

elim TI5.

elim TI1.

elim TI5.

elim TI2.

repeat elim T1'.

repeat elim T1.

elim A3.

apply refl_equal.

exact Inc6I.

exact InintI.

exact Inc3I.

exact InintI.

exact Inc3I.

exact InintI.

exact Inc2I.

exact Inc6I.

exact InintI.

exact Inc5I.

Save LemLin6.



Goal

forall d : D,

seq (ia one tau i) (seq (ia D s4 d) (hide I'' (hide I' (X2 d)))) =

seq (ia one tau i) (hide I'' (X1' d)).

intro.

apply sym_equal.

elimtype

 (seq (ia one tau i)

    (hide I'' (seq (ia one int i) (seq (ia D s4 d) (hide I' (X2 d))))) =

  seq (ia one tau i) (seq (ia D s4 d) (hide I'' (hide I' (X2 d))))).

apply (KFAR2 one i int).

exact InintI''.

pattern (X1' d) at 1 in |- *.

elim Lin2'.

elim A1.

apply refl_equal.

elim TI5.

elim TI2.

elim TI5.

elim TI1.

elim T1'.

apply refl_equal.

exact Ins4I''.

exact InintI''.

Save KFlin2.



Goal

forall d : D,

seq (ia one tau i) (hide I'' (hide I' Y)) =

seq (ia one tau i) (hide I'' (X2' d)).

intros.

apply sym_equal.

elimtype

 (seq (ia one tau i) (hide I'' (seq (ia one int i) (hide I' Y))) =

  seq (ia one tau i) (hide I'' (hide I' Y))).

apply (KFAR2 one i int).

exact InintI''.

pattern (X2' d) at 1 in |- *.

elim Lin3'.

apply refl_equal.

elim TI5.

elim TI2.

elim T1'.

apply refl_equal.

exact InintI''.

Save KFlin3.



Goal

forall d : D,

seq (ia one tau i) (seq (ia D s4 d) (hide I'' (hide I' (Y2 d)))) =

seq (ia one tau i) (hide I'' (Y1' d)).

intro.

apply sym_equal.

elimtype

 (seq (ia one tau i)

    (hide I'' (seq (ia one int i) (seq (ia D s4 d) (hide I' (Y2 d))))) =

  seq (ia one tau i) (seq (ia D s4 d) (hide I'' (hide I' (Y2 d))))).

apply (KFAR2 one i int).

exact InintI''.

pattern (Y1' d) at 1 in |- *.

elim Lin5'.

elim A1.

apply refl_equal.

elim TI5.

elim TI2.

elim TI5. 

elim TI1. 

elim T1'.

apply refl_equal.

exact Ins4I''. 

exact InintI''. 

Save KFlin5. 



Goal

forall d : D,

seq (ia one tau i) (hide I'' (hide I' X)) =

seq (ia one tau i) (hide I'' (Y2' d)). 

intros. 

apply sym_equal. 

elimtype

 (seq (ia one tau i) (hide I'' (seq (ia one int i) (hide I' X))) =

  seq (ia one tau i) (hide I'' (hide I' X))). 

apply (KFAR2 one i int). 

exact InintI''. 

pattern (Y2' d) at 1 in |- *. 

elim Lin6'.  



apply refl_equal. 

elim TI5. 

elim TI2.

elim T1'. 

apply refl_equal. 

exact InintI''.

Save KFlin6.



Parameter B : proc.

Axiom Specificat : D + (fun d : D => seq (ia D r1 d) (seq (ia D s4 d) B)) = B.



Goal B = hide I'' (hide I' ABP).



apply

 (RSP one (fun d : one => B) (fun d : one => hide I'' (hide I' X))

    (fun (Z : one -> proc) (d' : one) =>

     D +

     (fun d : D =>

      seq (ia D r1 d)

        (seq (ia D s4 d)

           (D + (fun d : D => seq (ia D r1 d) (seq (ia D s4 d) (Z d')))))))).

auto.

3: exact i.

intro.

pattern B at 1 in |- *.

elim Specificat.

pattern B at 1 in |- *.

elim Specificat.

apply refl_equal.

intro.

pattern X at 1 in |- *.

elim Lem1.

elim (SUM8 D (fun d : D => seq (ia D r1 d) (X1 d)) I').

elim (SUM8 D (fun d : D => hide I' (seq (ia D r1 d) (X1 d))) I'').

elimtype

 ((fun d : D =>

   seq (ia D r1 d)

     (seq (ia D s4 d)

        (D +

         (fun d0 : D =>

          seq (ia D r1 d0) (seq (ia D s4 d0) (hide I'' (hide I' X))))))) =

  (fun d : D => hide I'' (hide I' (seq (ia D r1 d) (X1 d))))).

apply refl_equal.

apply EXTE. intro.

elim TI5.

elim TI1.

elim LemLin2.

elim T1'.

elim TI5.

elim TI1.

elimtype

 (seq (ia D r1 d0) (seq (ia one tau i) (hide I'' (X1' d0))) =

  seq (ia D r1 d0) (hide I'' (X1' d0))).

2: apply sym_equal.

2: apply T1'.

elim KFlin2.

elim T1'.

elim LemLin3.



elim TI5.

elim TI1.

elim KFlin3.

elim T1'.

elim Lem2.

elim (SUM8 D (fun d : D => seq (ia D r1 d) (Y1 d)) I').

elim (SUM8 D (fun d : D => hide I' (seq (ia D r1 d) (Y1 d))) I'').



elimtype

 ((fun d0 : D => seq (ia D r1 d0) (seq (ia D s4 d0) (hide I'' (hide I' X)))) =

  (fun d : D => hide I'' (hide I' (seq (ia D r1 d) (Y1 d))))).

apply refl_equal.

apply EXTE. intro.

elim TI5.

elim TI1.

elim LemLin5.

elim T1'. 

elim TI5.

elim TI1.

elimtype

 (seq (ia D r1 d1) (seq (ia one tau i) (hide I'' (Y1' d1))) =

  seq (ia D r1 d1) (hide I'' (Y1' d1))).

2: apply sym_equal.

2: apply T1'.



elim KFlin5. 

elim T1'. 

elim LemLin6.

elim TI5.

elim TI1. 

elim KFlin6.

elim T1'.

apply refl_equal.

exact IntauI''.

exact Inr1I''.

exact Inr1I.

exact IntauI''.

exact Inr1I''.

exact Inr1I.

 

Save Hurrah.

