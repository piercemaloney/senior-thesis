

Require Import Bool.

Require Import Arith.

Require Import Compare_dec.

Require Import Peano_dec.

Require Import General.
(* General:
Require Export Bool.
Require Export Arith.
Require Export Compare_dec.
Require Export Peano_dec.
Require Export MyList.
Require Export MyRelations.

Set Implicit Arguments.
Unset Strict Implicit.

  Definition max_nat (n m : nat) :=
    match le_gt_dec n m with
    | left _ => m
    | right _ => n
    end.

  Lemma least_upper_bound_max_nat :
   forall n m p : nat, n <= p -> m <= p -> max_nat n m <= p.

Require Export Relation_Definitions.

  Definition decide (P : Prop) := {P} + {~ P}.

  Hint Unfold decide: core.

  Inductive Acc3 (A B C : Set) (R : relation (A * (B * C))) :
  A -> B -> C -> Prop :=
      Acc3_intro :
        forall (x : A) (x0 : B) (x1 : C),
        (forall (y : A) (y0 : B) (y1 : C),
         R (y, (y0, y1)) (x, (x0, x1)) -> Acc3 R y y0 y1) -> 
        Acc3 R x x0 x1.

  Lemma Acc3_rec :
   forall (A B C : Set) (R : relation (A * (B * C))) (P : A -> B -> C -> Set),
   (forall (x : A) (x0 : B) (x1 : C),
    (forall (y : A) (y0 : B) (y1 : C),
     R (y, (y0, y1)) (x, (x0, x1)) -> P y y0 y1) -> 
    P x x0 x1) ->
   forall (x : A) (x0 : B) (x1 : C), Acc3 R x x0 x1 -> P x x0 x1.

  Lemma Acc_Acc3 :
   forall (A B C : Set) (R : relation (A * (B * C))) (x : A) (y : B) (z : C),
   Acc R (x, (y, z)) -> Acc3 R x y z. 

Section Principal.

  Variables (A : Set) (P : A -> Prop) (R : A -> A -> Prop).

  Record ppal (x : A) : Prop := Pp_intro
    {pp_ok : P x; pp_least : forall y : A, P y -> R x y}.

  Definition ppal_dec : Set := {x : A | ppal x} + {(forall x : A, ~ P x)}.

End Principal. *)

Require Import MyList.
(* MyList:
Set Implicit Arguments.
Unset Strict Implicit.

Require Export List.

Section Listes.

  Variable A : Set.

  Let List := list A.

  Inductive item (x : A) : List -> nat -> Prop :=
    | item_hd : forall l : List, item x (x :: l) 0
    | item_tl :
        forall (l : List) (n : nat) (y : A),
        item x l n -> item x (y :: l) (S n).

  Lemma fun_item :
   forall (u v : A) (e : List) (n : nat), item u e n -> item v e n -> u = v.

  Lemma list_item :
   forall e n, {t : _ | item t e n} + {(forall t, ~ item t e n)}.

  Inductive trunc : nat -> List -> List -> Prop :=
    | trunc_O : forall e : List, trunc 0 e e
    | trunc_S :
        forall (k : nat) (e f : List) (x : A),
        trunc k e f -> trunc (S k) (x :: e) f.

  Lemma item_trunc :
   forall (n : nat) (e : List) (t : A),
   item t e n -> exists f : List, trunc (S n) e f.

End Listes.

  Hint Resolve item_hd item_tl trunc_O trunc_S: core. *)

Require Import MyRelations.
(* MyRelations:
Require Export Relation_Definitions.
Require Export Relation_Operators.
Require Export Operators_Properties.

Require Export Inclusion.
Require Export Transitive_Closure.
Require Export Union.
Require Export Inverse_Image.
Require Export Lexicographic_Product.

Hint Resolve rt_step rt_refl rst_step rst_refl t_step: core.
Hint Unfold transp union reflexive transitive: core.
Hint Immediate rst_sym: core.

  Lemma clos_refl_trans_ind_right :
   forall (A : Set) (R : relation A) (M : A) (P : A -> Prop),
   P M ->
   (forall P0 N : A, R N P0 -> clos_refl_trans A R P0 M -> P P0 -> P N) ->
   forall a : A, clos_refl_trans A R a M -> P a.

  Hint Resolve left_sym right_sym sp_swap sp_noswap: core. *)



Require Export Main.

Require Export SortV6.



Section CoqV6.



  Definition trm_v6 := term srt_v6.

  Definition env_v6 := env srt_v6.



  Definition v6 : CTS_spec srt_v6 :=

    Build_CTS_spec _ axiom_v6 rules_v6 univ_v6 (beta_delta_rule _).



  Definition v6_pts : PTS_sub_spec srt_v6 := cts_pts_functor _ v6.

  Definition le_type : red_rule srt_v6 :=

    Rule _ (Le_type _ (pts_le_type _ v6_pts)).



  Definition typ_v6 : env_v6 -> trm_v6 -> trm_v6 -> Prop := typ _ v6_pts.

  Definition wft_v6 : env_v6 -> trm_v6 -> Prop := wf_type _ v6_pts.

  Definition wf_v6 : env_v6 -> Prop := wf _ v6_pts.

  Definition v6_sn := sn srt_v6 (ctxt _ (Rule _ (head_reduct _ v6))).



  Hint Unfold le_type typ_v6 wft_v6 wf_v6 v6_sn: pts.



  Lemma whnf :

   forall (e : env_v6) (t : trm_v6),

   v6_sn e t ->

   {u : trm_v6 | red _ (beta_delta _) e t u & 

   head_normal _ (beta_delta _) e u}.

Proof beta_delta_whnf srt_v6.



  Lemma bd_conv_hnf :

   forall (e : env_v6) (x y : trm_v6),

   v6_sn e x -> v6_sn e y -> decide (conv_hn_inv _ (beta_delta_rule _) e x y).

Proof

  CR_WHNF_convert_hn srt_v6 v6_sort_dec (beta_delta_rule srt_v6)

    (church_rosser_beta_delta srt_v6) whnf.



  Theorem v6_is_subtype_dec : subtype_dec_CTS _ v6.

apply Build_subtype_dec_CTS.

exact (church_rosser_beta_delta srt_v6).



exact (bd_hn_sort srt_v6).



exact (bd_hn_prod srt_v6).



exact whnf.



exact bd_conv_hnf.



exact univ_v6_dec.

Qed.



  Lemma sound_v6_bd : rule_sound _ v6_pts (beta_delta _).

unfold beta_delta in |- *.

simpl in |- *.

apply union_sound.

apply beta_sound; auto with arith pts.

simpl in |- *.

apply cumul_inv_prod.

exact v6_is_subtype_dec.



apply delta_sound.

Qed.



  Axiom

    v6_normalise :

      forall (e : env_v6) (t T : trm_v6), typ_v6 e t T -> v6_sn e t.



  Lemma v6_is_norm_sound : norm_sound_CTS _ v6.

Proof.

refine (Build_norm_sound_CTS srt_v6 v6 sound_v6_bd v6_normalise _ _ _).

left.

apply v6_inf_axiom.



exact v6_inf_rule.



intros.

elim v6_inf_axiom with s1; intros.

split with x.

apply (pp_ok p).

Qed.



  Theorem v6_algorithms : PTS_TC _ v6_pts.

  Proof full_cts_type_checker srt_v6 v6 v6_is_subtype_dec v6_is_norm_sound.



  Lemma infer_type :

   forall (e : env_v6) (t : trm_v6), wf_v6 e -> infer_ppal_type _ v6_pts e t.

Proof ptc_inf_ppal_type _ _ v6_algorithms.



  Lemma check_wf_type :

   forall (e : env_v6) (t : trm_v6), wf_v6 e -> wft_dec _ v6_pts e t.

Proof ptc_chk_wft _ _ v6_algorithms.



  Lemma check_type :

   forall (e : env_v6) (t T : trm_v6), wf_v6 e -> check_dec _ v6_pts e t T.

Proof ptc_chk_typ _ _ v6_algorithms.



  Lemma add_type :

   forall (e : env_v6) (t : trm_v6), wf_v6 e -> decl_dec _ v6_pts e (Ax _ t).

Proof ptc_add_typ _ _ v6_algorithms.



  Lemma add_def :

   forall (e : env_v6) (t T : trm_v6),

   wf_v6 e -> decl_dec _ v6_pts e (Def _ t T).

Proof ptc_add_def _ _ v6_algorithms.



End CoqV6.
