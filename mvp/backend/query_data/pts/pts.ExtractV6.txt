Require Import MlExtract.
(* MlExtract:
Require Extraction.

  Extract Inductive bool => "bool" [ "true" "false" ].
  Extract Inductive sumbool => "bool" [ "true" "false" ].
  Extract Inductive sumor => "option" [ "Some" "None" ].
  Extract Inductive option => "option" [ "Some" "None" ]. *)
Require Import General.
(* General:
Require Export Bool.
Require Export Arith.
Require Export Compare_dec.
Require Export Peano_dec.
Require Export MyList.
Require Export MyRelations.

Set Implicit Arguments.
Unset Strict Implicit.

  Definition max_nat (n m : nat) :=
    match le_gt_dec n m with
    | left _ => m
    | right _ => n
    end.

  Lemma least_upper_bound_max_nat :
   forall n m p : nat, n <= p -> m <= p -> max_nat n m <= p.

Require Export Relation_Definitions.

  Definition decide (P : Prop) := {P} + {~ P}.

  Hint Unfold decide: core.

  Inductive Acc3 (A B C : Set) (R : relation (A * (B * C))) :
  A -> B -> C -> Prop :=
      Acc3_intro :
        forall (x : A) (x0 : B) (x1 : C),
        (forall (y : A) (y0 : B) (y1 : C),
         R (y, (y0, y1)) (x, (x0, x1)) -> Acc3 R y y0 y1) -> 
        Acc3 R x x0 x1.

  Lemma Acc3_rec :
   forall (A B C : Set) (R : relation (A * (B * C))) (P : A -> B -> C -> Set),
   (forall (x : A) (x0 : B) (x1 : C),
    (forall (y : A) (y0 : B) (y1 : C),
     R (y, (y0, y1)) (x, (x0, x1)) -> P y y0 y1) -> 
    P x x0 x1) ->
   forall (x : A) (x0 : B) (x1 : C), Acc3 R x x0 x1 -> P x x0 x1.

  Lemma Acc_Acc3 :
   forall (A B C : Set) (R : relation (A * (B * C))) (x : A) (y : B) (z : C),
   Acc R (x, (y, z)) -> Acc3 R x y z. 

Section Principal.

  Variables (A : Set) (P : A -> Prop) (R : A -> A -> Prop).

  Record ppal (x : A) : Prop := Pp_intro
    {pp_ok : P x; pp_least : forall y : A, P y -> R x y}.

  Definition ppal_dec : Set := {x : A | ppal x} + {(forall x : A, ~ P x)}.

End Principal. *)
Require Import CoqV6.
(* CoqV6:
Require Import Bool.
Require Import Arith.
Require Import Compare_dec.
Require Import Peano_dec.
Require Import General.
Require Import MyList.
Require Import MyRelations.

Require Export Main.
Require Export SortV6.

Section CoqV6.

  Definition trm_v6 := term srt_v6.
  Definition env_v6 := env srt_v6.

  Definition v6 : CTS_spec srt_v6 :=
    Build_CTS_spec _ axiom_v6 rules_v6 univ_v6 (beta_delta_rule _).

  Definition v6_pts : PTS_sub_spec srt_v6 := cts_pts_functor _ v6.
  Definition le_type : red_rule srt_v6 :=
    Rule _ (Le_type _ (pts_le_type _ v6_pts)).

  Definition typ_v6 : env_v6 -> trm_v6 -> trm_v6 -> Prop := typ _ v6_pts.
  Definition wft_v6 : env_v6 -> trm_v6 -> Prop := wf_type _ v6_pts.
  Definition wf_v6 : env_v6 -> Prop := wf _ v6_pts.
  Definition v6_sn := sn srt_v6 (ctxt _ (Rule _ (head_reduct _ v6))).

  Hint Unfold le_type typ_v6 wft_v6 wf_v6 v6_sn: pts.

  Lemma whnf :
   forall (e : env_v6) (t : trm_v6),
   v6_sn e t ->
   {u : trm_v6 | red _ (beta_delta _) e t u & 
   head_normal _ (beta_delta _) e u}.
Proof beta_delta_whnf srt_v6.

  Lemma bd_conv_hnf :
   forall (e : env_v6) (x y : trm_v6),
   v6_sn e x -> v6_sn e y -> decide (conv_hn_inv _ (beta_delta_rule _) e x y).
Proof
  CR_WHNF_convert_hn srt_v6 v6_sort_dec (beta_delta_rule srt_v6)
    (church_rosser_beta_delta srt_v6) whnf.

  Theorem v6_is_subtype_dec : subtype_dec_CTS _ v6.

  Lemma sound_v6_bd : rule_sound _ v6_pts (beta_delta _).

  Axiom
    v6_normalise :
      forall (e : env_v6) (t T : trm_v6), typ_v6 e t T -> v6_sn e t.

  Lemma v6_is_norm_sound : norm_sound_CTS _ v6.

  Theorem v6_algorithms : PTS_TC _ v6_pts.
  Proof full_cts_type_checker srt_v6 v6 v6_is_subtype_dec v6_is_norm_sound.

  Lemma infer_type :
   forall (e : env_v6) (t : trm_v6), wf_v6 e -> infer_ppal_type _ v6_pts e t.
Proof ptc_inf_ppal_type _ _ v6_algorithms.

  Lemma check_wf_type :
   forall (e : env_v6) (t : trm_v6), wf_v6 e -> wft_dec _ v6_pts e t.
Proof ptc_chk_wft _ _ v6_algorithms.

  Lemma check_type :
   forall (e : env_v6) (t T : trm_v6), wf_v6 e -> check_dec _ v6_pts e t T.
Proof ptc_chk_typ _ _ v6_algorithms.

  Lemma add_type :
   forall (e : env_v6) (t : trm_v6), wf_v6 e -> decl_dec _ v6_pts e (Ax _ t).
Proof ptc_add_typ _ _ v6_algorithms.

  Lemma add_def :
   forall (e : env_v6) (t T : trm_v6),
   wf_v6 e -> decl_dec _ v6_pts e (Def _ t T).
Proof ptc_add_def _ _ v6_algorithms.

End CoqV6. *)

Extraction
 Inline Acc3_rec full_cts_type_checker v6_algorithms lift_naif subst_naif.

Set Extraction AccessOpaque.

Extraction
 "kernel" env_v6 check_type infer_type check_wf_type add_type add_def
         sort_of_gen gen_of_sort.