

Require Import Ensembles.

Require Import Laws.
(* Laws:
Require Import Ensembles.
Section Basic_laws.
Variable U : Type.
Variable op : U -> U -> U.

Definition commutative := forall x y : U, op x y = op y x.

Definition associative := forall x y z : U, op x (op y z) = op (op x y) z.

Definition left_neutral (e : U) := forall x : U, op e x = x.

Definition right_neutral (e : U) := forall x : U, op x e = x.

Definition left_inverse (inv : U -> U) (e : U) :=
  forall x : U, op (inv x) x = e.

Definition right_inverse (inv : U -> U) (e : U) :=
  forall x : U, op x (inv x) = e.
Variable D : Ensemble U.

Definition endo_function (f : U -> U) :=
  forall x : U, In U D x -> In U D (f x).

Definition endo_operation (op : U -> U -> U) :=
  forall x y : U, In U D x -> In U D y -> In U D (op x y).
End Basic_laws.
Hint Unfold endo_function endo_operation commutative associative left_neutral
  right_neutral left_inverse right_inverse. *)

Require Import Group_definitions.
(* Group_definitions:
Require Import Ensembles.
Require Import Laws.
Section group_definition.
Variable U : Type.

Record Group : Type := group
  {G_ : Ensemble U;
   star_ : U -> U -> U;
   inv_ : U -> U;
   e_ : U;
   G0_ : endo_operation U G_ star_;
   G1_ : associative U star_;
   G2a_ : In U G_ e_;
   G2b_ : left_neutral U star_ e_;
   G2c_ : right_neutral U star_ e_;
   G3a_ : endo_function U G_ inv_;
   G3b_ : right_inverse U star_ inv_ e_;
   G3c_ : left_inverse U star_ inv_ e_}.

Inductive subgroup (g1 g2 : Group) : Prop :=
    Definition_of_subgroup :
      Included U (G_ g1) (G_ g2) -> star_ g1 = star_ g2 -> subgroup g1 g2.

Definition Setsubgroup (E : Ensemble U) (Gr : Group) : Prop :=
  ex (fun g : Group => subgroup g Gr /\ G_ g = E).
End group_definition. *)

Require Import gr.
(* gr:
Require Import Ensembles.
Require Import Laws.
Require Import Group_definitions.
Section group_trivialities.
Variable U : Type.
Variable Gr : Group U.

Let G : Ensemble U := G_ U Gr.

Let star : U -> U -> U := star_ U Gr.

Let inv : U -> U := inv_ U Gr.

Let e : U := e_ U Gr.

Definition G0 : forall a b : U, In U G a -> In U G b -> In U G (star a b) :=
  G0_ U Gr.

Definition G1 : forall a b c : U, star a (star b c) = star (star a b) c :=
  G1_ U Gr.

Definition G2a : In U G e := G2a_ U Gr.

Definition G2b : forall a : U, star e a = a := G2b_ U Gr.

Definition G2c : forall a : U, star a e = a := G2c_ U Gr.

Definition G3a : forall a : U, In U G a -> In U G (inv a) := G3a_ U Gr.

Definition G3b : forall a : U, star a (inv a) = e := G3b_ U Gr.

Definition G3c : forall a : U, star (inv a) a = e := G3c_ U Gr.
Hint Resolve G1.
Hint Resolve G2a G2b G2c.
Hint Resolve G3a G3b G3c.
Hint Resolve G0.

Theorem triv1 : forall a b : U, star (inv a) (star a b) = b.

Theorem triv2 : forall a b : U, star (star b a) (inv a) = b.

Theorem resolve : forall a b : U, star b a = e -> b = inv a.

Theorem self_inv : e = inv e.

Theorem inv_star : forall a b : U, star (inv b) (inv a) = inv (star a b).

Theorem cancellation : forall a b : U, star a b = a -> b = e.

Theorem inv_involution : forall a : U, a = inv (inv a).
End group_trivialities.
Hint Resolve G1.
Hint Resolve G2a G2b G2c.
Hint Resolve G3a G3b G3c.
Hint Resolve G0.
Hint Resolve triv1 triv2 resolve self_inv inv_star inv_involution. *)

Parameter U : Type.

Parameter Gr : Group U.



Definition G : Ensemble U := G_ U Gr.



Definition star : U -> U -> U := star_ U Gr.



Definition inv : U -> U := inv_ U Gr.



Definition e : U := e_ U Gr.



Definition G0' : forall a b : U, In U G a -> In U G b -> In U G (star a b) :=

  G0 U Gr.



Definition G1' : forall a b c : U, star a (star b c) = star (star a b) c :=

  G1 U Gr.



Definition G2a' : In U G e := G2a U Gr.



Definition G2b' : forall a : U, star e a = a := G2b U Gr.



Definition G2c' : forall a : U, star a e = a := G2c U Gr.



Definition G3a' : forall a : U, In U G a -> In U G (inv a) := G3a U Gr.



Definition G3b' : forall a : U, star a (inv a) = e := G3b U Gr.



Definition G3c' : forall a : U, star (inv a) a = e := G3c U Gr.

Hint Resolve G1'.

Hint Resolve G2a' G2b' G2c'.

Hint Resolve G3a' G3b' G3c'.

Hint Resolve G0'.



Definition triv1' : forall a b : U, star (inv a) (star a b) = b := triv1 U Gr.



Definition triv2' : forall a b : U, star (star b a) (inv a) = b := triv2 U Gr.



Definition resolve' : forall a b : U, star b a = e -> b = inv a :=

  resolve U Gr.



Definition self_inv' : e = inv e := self_inv U Gr.



Definition inv_star' :

  forall a b : U, star (inv b) (inv a) = inv (star a b) := 

  inv_star U Gr.



Definition cancellation' : forall a b : U, star a b = a -> b = e :=

  cancellation U Gr.



Definition inv_involution' : forall a : U, a = inv (inv a) :=

  inv_involution U Gr.

Hint Resolve triv1' triv2' inv_star' resolve' inv_involution'.



Section Elements.

Variable H : Group U.

Variable sub : subgroup U H Gr.



Lemma l1 : Included U (G_ U H) G.

Proof.

elim sub; auto with sets.

Qed.

Hint Resolve l1.



Lemma eH_in_G : In U G (e_ U H).

Proof.

elim sub.

elim H; auto with sets.

Qed.

Hint Resolve eH_in_G.



Lemma starH_is_star : star_ U H = star.

Proof.

elim sub; auto with sets.

Qed.

Hint Resolve starH_is_star.



Lemma eh_is_e : e_ U H = e.

Proof.

apply cancellation' with (a := e_ U H).

rewrite <- starH_is_star; auto with sets.

Qed.

Hint Resolve eh_is_e.



Theorem invH_is_inv : forall a : U, In U (G_ U H) a -> inv_ U H a = inv a.

Proof.

intros a H'.

apply resolve'; auto with sets.

rewrite <- starH_is_star.

rewrite <- eh_is_e.

generalize H'; clear H'.

elim H; auto with sets.

Qed.



Theorem Subgroup_inhabited : Inhabited U (G_ U H).

Proof.

apply Inhabited_intro with (x := e_ U H); auto with sets.

Qed.



Theorem star_endo : endo_operation U (G_ U H) star.

Proof.

rewrite <- starH_is_star; auto with sets.

Qed.



Theorem inv_endo : endo_function U (G_ U H) inv.

Proof.

red in |- *; intros a H'; rewrite <- (invH_is_inv a); auto with sets.

Qed.



End Elements.



Section Premier.



Variable H : Ensemble U.

Variable witness : U.

Variable inhabited : In U H witness.

Variable subset : Included U H G.

Variable hstar : endo_operation U H star.

Variable hinv : endo_function U H inv.

Hint Resolve inhabited subset hstar hinv.



Let assoc : associative U star.

Proof.

auto with sets.

Qed.

Hint Resolve assoc.



Let eH : U := star (inv witness) witness.



Let eH_in_H : In U H eH.

Proof.

unfold eH at 1 in |- *; auto with sets.

Qed.



Let eH_left_neutral : left_neutral U star eH.

Proof.

unfold eH, left_neutral in |- *.

rewrite (G3c' witness); auto with sets.

Qed.



Let eH_right_neutral : right_neutral U star eH.

Proof.

unfold eH, left_neutral in |- *.

rewrite (G3c' witness); auto with sets.

Qed.



Let inv_left_inverse : left_inverse U star inv eH.

Proof.

unfold eH, left_inverse in |- *.

intro x.

rewrite (G3c' x); auto with sets.

Qed.



Let inv_right_inverse : right_inverse U star inv eH.

Proof.

unfold eH, right_inverse in |- *.

intro x.

rewrite (G3b' x); auto with sets.

Qed.



Let GrH : Group U :=

  group U H star inv eH hstar assoc eH_in_H eH_left_neutral eH_right_neutral

    hinv inv_right_inverse inv_left_inverse.

Hint Resolve Definition_of_subgroup.



Theorem T_1_6_2 : Setsubgroup U H Gr.

Proof.

unfold Setsubgroup at 1 in |- *; simpl in |- *.

exists GrH.

unfold GrH in |- *; simpl in |- *; auto with sets.

Qed.



End Premier.



Require Import Zbase.
(* Zbase:
Inductive Z : Set :=
  | OZ : Z
  | pos : nat -> Z
  | neg : nat -> Z.

Definition IZ := pos 0.

Definition is_posn (x y : Z) :=
  match x, y with
  | pos n, pos m => n = m
  | _, _ => False
  end.

Lemma tech_pos_not_posZ : forall n m : nat, n <> m -> pos n <> pos m.

Lemma eq_OZ_dec : forall x : Z, {x = OZ} + {x <> OZ}.

Definition posOZ (n : nat) :=
  match n return Z with
  | O => OZ
  | S n' => pos n'
  end.

Definition negOZ (n : nat) :=
  match n return Z with
  | O => OZ
  | S n' => neg n'
  end.

Definition absZ (x : Z) :=
  match x return Z with
  | OZ => OZ
  | pos n => pos n
  | neg n => pos n
  end.

Definition sgnZ (x : Z) :=
  match x return Z with
  | OZ => OZ
  | pos n => pos 0
  | neg n => neg 0
  end. *)

Require Import Z_succ_pred.
(* Z_succ_pred:
Require Import Arith.
Require Import Zbase.

Definition succZ (x : Z) :=
  match x return Z with
  | OZ => IZ
  | pos n => pos (S n)
  | neg n => match n return Z with
             | O => OZ
             | S m => neg m
             end
  end.

Definition predZ (x : Z) :=
  match x return Z with
  | OZ => neg 0
  | pos n => match n return Z with
             | O => OZ
             | S m => pos m
             end
  | neg n => neg (S n)
  end.

Lemma pred_succZ : forall x : Z, predZ (succZ x) = x.

Lemma succ_predZ : forall x : Z, succZ (predZ x) = x.

Lemma succ_pred_pred_succZ : forall x : Z, succZ (predZ x) = predZ (succZ x).

Lemma tech_pred_posZ : forall n : nat, 0 < n -> predZ (pos n) = pos (pred n).

Lemma tech_succ_posOZ : forall n : nat, succZ (posOZ n) = pos n. *)

Require Import Zadd.
(* Zadd:
Require Import Arith.
Require Import Nat_complements.
Require Import Zbase.
Require Import Z_succ_pred.

Fixpoint add1 (x2 : Z) (n : nat) {struct n} : Z :=
  match n with
  | O => succZ x2
  | S n0 => succZ (add1 x2 n0)
  end
 
 with add2 (x2 : Z) (n : nat) {struct n} : Z :=
  match n with
  | O => predZ x2
  | S n0 => predZ (add2 x2 n0)
  end.

Definition addZ (x1 x2 : Z) : Z :=
  match x1 with
  | OZ => x2
  | pos n => add1 x2 n
  | neg n => add2 x2 n
  end.

Lemma addZ_eq1 : forall y : Z, addZ OZ y = y. 

Lemma addZ_eq2 : forall y : Z, addZ (pos 0) y = succZ y.

Lemma addZ_eq3 :
 forall (n1 : nat) (y : Z), addZ (pos (S n1)) y = succZ (addZ (pos n1) y).

Lemma addZ_eq4 : forall y : Z, addZ (neg 0) y = predZ y.

Lemma addZ_eq5 :
 forall (n1 : nat) (y : Z), addZ (neg (S n1)) y = predZ (addZ (neg n1) y).

Lemma succ_addZ_l : forall x y : Z, addZ (succZ x) y = succZ (addZ x y).

Lemma pred_addZ_l : forall x y : Z, addZ (predZ x) y = predZ (addZ x y).

Lemma tech_add_pos_succZ :
 forall (x : nat) (y : Z), addZ (pos (S x)) y = succZ (addZ (pos x) y).
Proof addZ_eq3.

Lemma tech_add_neg_predZ :
 forall (x : nat) (y : Z), addZ (neg (S x)) y = predZ (addZ (neg x) y).
Proof addZ_eq5.

Lemma succ_addZ_r : forall x y : Z, addZ x (succZ y) = succZ (addZ x y).

Lemma pred_addZ_r : forall x y : Z, addZ x (predZ y) = predZ (addZ x y).

Lemma add_OZ : forall x : Z, addZ x OZ = x.

Lemma add_IZ_succZ : forall x : Z, addZ x IZ = succZ x.

Lemma add_mIZ_predZ : forall x : Z, addZ x (neg 0) = predZ x.

Definition commutative (U : Set) (op : U -> U -> U) :=
  forall x y : U, op x y = op y x.

Theorem addZ_commutativity : commutative Z addZ.

Lemma tech_add_pos_neg_posZ :
 forall n1 n2 : nat, n2 < n1 -> addZ (pos n1) (neg n2) = pos (n1 - S n2).

Definition associative (U : Set) (op : U -> U -> U) :=
  forall x y z : U, op x (op y z) = op (op x y) z.

Theorem addZ_associativity : associative Z addZ.

Definition IdZ (x : Z) := True.

Definition neutral (S : Set) (G : S -> Prop) (Add : S -> S -> S) 
  (O : S) := G O /\ (forall x : S, G x -> Add x O = x /\ Add O x = x).

Theorem addZ_neutral : neutral Z IdZ addZ OZ.

Definition oppZ (x : Z) :=
  match x return Z with
  | OZ => OZ
  | pos n => neg n
  | neg n => pos n
  end.

Lemma opp_succZ : forall x : Z, oppZ (succZ x) = predZ (oppZ x).

Lemma opp_predZ : forall x : Z, oppZ (predZ x) = succZ (oppZ x).

Lemma tech_add_pos_negZ : forall n : nat, addZ (pos n) (neg n) = OZ.

Lemma tech_add_neg_posZ : forall n : nat, addZ (neg n) (pos n) = OZ.

Lemma tech_add_pos_posZ :
 forall n m : nat, addZ (pos n) (pos m) = pos (S (n + m)).

Lemma tech_add_neg_negZ :
 forall n m : nat, addZ (neg n) (neg m) = neg (S (n + m)).

Theorem abs_eq_or_oppZ : forall x : Z, {absZ x = x} + {absZ x = oppZ x}.

Lemma tech_opp_pos_negZ :
 forall n : nat, oppZ (pos n) = neg n /\ oppZ (neg n) = pos n. *)



Definition exp : Z -> U -> U.

Proof.

intros n a.

elim n; clear n.

exact e.

intro n; elim n; clear n.

exact a.

intros n valrec.

exact (star a valrec).

intro n; elim n; clear n.

exact (inv a).

intros n valrec.

exact (star (inv a) valrec).

Defined.



Theorem exp_endo : forall (a : U) (n : Z), In U G a -> In U G (exp n a).

Proof.

intros a n; elim n; simpl in |- *; auto with sets.

intro n0; elim n0; simpl in |- *; auto with sets.

intro n0; elim n0; simpl in |- *; auto with sets.

Qed.

Hint Resolve exp_endo.



Lemma exp_unfold_pos :

 forall (a : U) (n : nat),

 In U G a -> exp (pos (S n)) a = star a (exp (pos n) a).

Proof.

auto with sets.

Qed.



Lemma exp_unfold_neg :

 forall (a : U) (n : nat),

 In U G a -> exp (neg (S n)) a = star (inv a) (exp (neg n) a).

Proof.

auto with sets.

Qed.



Lemma exp_l1 :

 forall (a : U) (n : nat),

 In U G a -> star a (exp (neg (S n)) a) = exp (neg n) a.

Proof.

intros a n H'; try assumption.

rewrite (exp_unfold_neg a); trivial with sets.

rewrite (inv_involution' a); trivial with sets.

cut (inv (inv (inv a)) = inv a).

intro H'0; rewrite H'0; apply triv1'; auto with sets.

rewrite <- (inv_involution' a); auto with sets.

Qed.

Hint Resolve exp_l1.



Lemma exp_l2 :

 forall (a : U) (n : Z), In U G a -> star a (exp n a) = exp (succZ n) a.

Proof.

intros a n; elim n; auto with sets.

intro n0; elim n0; auto with sets.

intros n1 H' H'0.

rewrite (exp_l1 a n1); auto with sets.

Qed.



Lemma exp_l2' :

 forall (a : U) (n : Z), In U G a -> star (inv a) (exp n a) = exp (predZ n) a.

Proof.

intros a n; elim n; auto with sets.

intro n0; elim n0; auto with sets.

intros n1 H' H'0.

rewrite (exp_unfold_pos a n1); trivial with sets.

Qed.

Hint Resolve exp_l2 exp_l2' exp_unfold_pos exp_unfold_neg.

Hint Immediate sym_eq.



Theorem add_exponents :

 forall (a : U) (m n : Z),

 In U G a -> star (exp m a) (exp n a) = exp (addZ m n) a.

Proof.

intros a m; elim m; auto with sets.

intro n; elim n; auto with sets.

intros n0 H' n1 H'0.

rewrite (tech_add_pos_succZ n0 n1).

rewrite <- (exp_l2 a (addZ (pos n0) n1)); trivial with sets.

rewrite (exp_unfold_pos a n0); trivial with sets.

rewrite <- (H' n1); trivial with sets.

auto with sets.

intro n; elim n.

simpl in |- *.

intros n0 H'.

apply exp_l2'; auto with sets.

intros n0 H' n1 H'0.

rewrite (tech_add_neg_predZ n0 n1).

rewrite <- (exp_l2' a (addZ (neg n0) n1)); trivial with sets.

rewrite <- (H' n1); trivial with sets.

rewrite (exp_unfold_neg a n0); trivial with sets.

auto with sets.

Qed.



Lemma exp_commut1 :

 forall (a : U) (m : Z), In U G a -> star (exp m a) a = star a (exp m a).

Proof.

intros a m H'.

change (star (exp m a) (exp IZ a) = star (exp IZ a) (exp m a)) in |- *.

rewrite (add_exponents a m IZ); trivial with sets.

rewrite (add_exponents a IZ m); trivial with sets.

rewrite (addZ_commutativity IZ m); trivial with sets.

Qed.



Lemma tech_opp_pos_negZ1 : forall n : nat, oppZ (pos n) = neg n.

Proof.

intro n; elim n; auto with sets.

Qed.



Lemma tech_opp_pos_negZ2 : forall n : nat, oppZ (neg n) = pos n.

Proof.

intro n; elim n; auto with sets.

Qed.



Theorem change_exponent_sign :

 forall (a : U) (m : Z), In U G a -> inv (exp m a) = exp (oppZ m) a.

Proof.

intros a m; elim m.

simpl in |- *; auto with sets.

simpl in |- *; auto with sets.

intro H'; symmetry  in |- *; auto with sets.

intros n H'.

rewrite (tech_opp_pos_negZ1 n).

elim n; auto with sets.

intros n0 H'0.

rewrite (exp_unfold_pos a n0); trivial with sets.

rewrite (exp_unfold_neg a n0); trivial with sets.

rewrite <- (exp_commut1 a (pos n0)); trivial with sets.

rewrite <- (inv_star' (exp (pos n0) a) a); auto with sets.

rewrite H'0; trivial with sets.

intros n H'.

rewrite (tech_opp_pos_negZ2 n).

elim n.

simpl in |- *; symmetry  in |- *; auto with sets.

intros n0 H'0.

rewrite (exp_unfold_pos a n0); trivial with sets.

rewrite (exp_unfold_neg a n0); trivial with sets.

rewrite <- (exp_commut1 a (pos n0)); trivial with sets.

rewrite <- (inv_star' (inv a) (exp (neg n0) a)); auto with sets.

rewrite H'0; trivial with sets.

rewrite <- (inv_involution' a); trivial with sets.

Qed.



Inductive powers (a : U) : Ensemble U :=

    In_powers : forall (m : Z) (x : U), x = exp m a -> In U (powers a) x.



Theorem powers_of_one_element :

 forall a : U, In U G a -> Setsubgroup U (powers a) Gr.

Proof.

intros a H'.

apply T_1_6_2 with (witness := a).

apply In_powers with (m := IZ); auto with sets.

red in |- *.

intros x H'0; elim H'0.

intros m x0 H'1; rewrite H'1; auto with sets.

red in |- *.

intros x y H'0; elim H'0.

intros m x0 H'1 H'2; elim H'2.

intros m0 x1 H'3; rewrite H'3.

rewrite H'1.

rewrite (add_exponents a m m0); trivial with sets.

apply In_powers with (m := addZ m m0); trivial with sets.

red in |- *.

intros x H'0; elim H'0.

intros m x0 H'1.

apply In_powers with (m := oppZ m); trivial with sets.

rewrite H'1.

apply change_exponent_sign; trivial with sets.

Qed.



Section Second.



Variable H : Ensemble U.

Variable witness : U.

Variable h0 : In U H witness.

Variable h1 : Included U H G.

Variable h2 : forall a b : U, In U H a -> In U H b -> In U H (star a (inv b)).



Let eH : U := star witness (inv witness).



Theorem T_1_6_3 : Setsubgroup U H Gr.

Proof.

cut (In U H eH).

intro H'.

apply T_1_6_2 with (witness := witness); auto with sets.

red in |- *; intros a b H'0 H'1; try assumption.

lapply (h2 eH b);

 [ intro H'4; lapply H'4; [ intro H'5; try exact H'5; clear H'4 | clear H'4 ]

 | idtac ]; auto with sets.

unfold eH at 1 in H'5.

generalize H'5; clear H'5.

rewrite (G3b' witness).

rewrite (G2b' (inv b)).

intro H'4.

lapply (h2 a (inv b));

 [ intro H'5; lapply H'5;

    [ intro H'6; generalize H'6; clear H'5 | clear H'5 ]

 | idtac ]; auto with sets.

rewrite <- (inv_involution' b); auto with sets.

red in |- *; intros a H'0; try assumption.

rewrite <- (G2b' (inv a)).

apply h2; auto with sets.

unfold eH at 1 in H'.

rewrite <- (G3b' witness); auto with sets.

unfold eH at 1 in |- *; auto with sets.

Qed.



End Second.



Theorem Ex1 : Setsubgroup U (Singleton U e) Gr.

Proof.

apply T_1_6_2 with (witness := e); auto with sets.

red in |- *; intros x H'; elim H'; auto with sets.

red in |- *; intros a b H' H'0.

elim H'.

elim H'0.

rewrite (G2c' e); auto with sets.

red in |- *; intros a H'; elim H'.

rewrite <- (resolve' e e); auto with sets.

Qed.



Theorem Ex2 : Setsubgroup U (Singleton U e) Gr.

Proof.

apply T_1_6_3 with (witness := e); auto with sets.

red in |- *.

intros x H'; elim H'; auto with sets.

intros a b H'; elim H'.

intro H'0; elim H'0.

rewrite (G3b' e); auto with sets.

Qed.



Lemma Ex3 : forall n : Z, exp n e = e.

Proof.

intro n; elim n; auto with sets.

intro n0; elim n0; auto with sets.

intros n1 H'.

rewrite (exp_unfold_pos e n1); auto with sets.

rewrite H'; auto with sets.

intro n0; elim n0; auto with sets.

simpl in |- *.

symmetry  in |- *; auto with sets.

intros n1 H'.

rewrite (exp_unfold_neg e n1); auto with sets.

rewrite H'; auto with sets.

Qed.



Lemma Ex4 : powers e = Singleton U e.

Proof.

apply Extensionality_Ensembles; split; red in |- *; auto with sets.

intros x H'; elim H'.

intros m x0 H'0; rewrite H'0.

rewrite (Ex3 m); auto with sets.

intros x H'; elim H'.

apply In_powers with (m := IZ); auto with sets.

Qed.



Theorem Ex5 : Setsubgroup U (Singleton U e) Gr.

Proof.

rewrite <- Ex4.

apply powers_of_one_element; auto with sets.

Qed.

