
Require Import Ensembles.
Require Import Laws.
(* Laws:
Require Import Ensembles.
Section Basic_laws.
Variable U : Type.
Variable op : U -> U -> U.

Definition commutative := forall x y : U, op x y = op y x.

Definition associative := forall x y z : U, op x (op y z) = op (op x y) z.

Definition left_neutral (e : U) := forall x : U, op e x = x.

Definition right_neutral (e : U) := forall x : U, op x e = x.

Definition left_inverse (inv : U -> U) (e : U) :=
  forall x : U, op (inv x) x = e.

Definition right_inverse (inv : U -> U) (e : U) :=
  forall x : U, op x (inv x) = e.
Variable D : Ensemble U.

Definition endo_function (f : U -> U) :=
  forall x : U, In U D x -> In U D (f x).

Definition endo_operation (op : U -> U -> U) :=
  forall x y : U, In U D x -> In U D y -> In U D (op x y).
End Basic_laws.
Hint Unfold endo_function endo_operation commutative associative left_neutral
  right_neutral left_inverse right_inverse. *)
Require Import Group_definitions.
(* Group_definitions:
Require Import Ensembles.
Require Import Laws.
Section group_definition.
Variable U : Type.

Record Group : Type := group
  {G_ : Ensemble U;
   star_ : U -> U -> U;
   inv_ : U -> U;
   e_ : U;
   G0_ : endo_operation U G_ star_;
   G1_ : associative U star_;
   G2a_ : In U G_ e_;
   G2b_ : left_neutral U star_ e_;
   G2c_ : right_neutral U star_ e_;
   G3a_ : endo_function U G_ inv_;
   G3b_ : right_inverse U star_ inv_ e_;
   G3c_ : left_inverse U star_ inv_ e_}.

Inductive subgroup (g1 g2 : Group) : Prop :=
    Definition_of_subgroup :
      Included U (G_ g1) (G_ g2) -> star_ g1 = star_ g2 -> subgroup g1 g2.

Definition Setsubgroup (E : Ensemble U) (Gr : Group) : Prop :=
  ex (fun g : Group => subgroup g Gr /\ G_ g = E).
End group_definition. *)
Section group_trivialities.
Variable U : Type.
Variable Gr : Group U.

Let G : Ensemble U := G_ U Gr.

Let star : U -> U -> U := star_ U Gr.

Let inv : U -> U := inv_ U Gr.

Let e : U := e_ U Gr.

Definition G0 : forall a b : U, In U G a -> In U G b -> In U G (star a b) :=
  G0_ U Gr.

Definition G1 : forall a b c : U, star a (star b c) = star (star a b) c :=
  G1_ U Gr.

Definition G2a : In U G e := G2a_ U Gr.

Definition G2b : forall a : U, star e a = a := G2b_ U Gr.

Definition G2c : forall a : U, star a e = a := G2c_ U Gr.

Definition G3a : forall a : U, In U G a -> In U G (inv a) := G3a_ U Gr.

Definition G3b : forall a : U, star a (inv a) = e := G3b_ U Gr.

Definition G3c : forall a : U, star (inv a) a = e := G3c_ U Gr.
Hint Resolve G1.
Hint Resolve G2a G2b G2c.
Hint Resolve G3a G3b G3c.
Hint Resolve G0.

Theorem triv1 : forall a b : U, star (inv a) (star a b) = b.
intros a b; try assumption.
rewrite (G1 (inv a) a b); auto.
rewrite G3c; auto.
Qed.

Theorem triv2 : forall a b : U, star (star b a) (inv a) = b.
intros a b; try assumption.
rewrite <- (G1 b a (inv a)); auto.
rewrite (G3b a); auto.
Qed.

Theorem resolve : forall a b : U, star b a = e -> b = inv a.
intros a b H'1.
cut (star (star b a) (inv a) = inv a).
rewrite <- (G1 b a (inv a)); auto.
rewrite (G3b a); auto.
rewrite (G2c b); auto.
rewrite H'1.
rewrite (G2b (inv a)); auto.
Qed.

Theorem self_inv : e = inv e.
apply resolve; auto.
Qed.

Theorem inv_star : forall a b : U, star (inv b) (inv a) = inv (star a b).
intros a b.
apply resolve.
rewrite <- (G1 (inv b) (inv a) (star a b)).
rewrite (G1 (inv a) a b).
rewrite (G3c a).
rewrite (G2b b); auto.
Qed.

Theorem cancellation : forall a b : U, star a b = a -> b = e.
intros a b H'.
cut (star (inv a) (star a b) = b).
rewrite H'.
rewrite (G3c a); auto.
rewrite (G1 (inv a) a b).
rewrite (G3c a); auto.
Qed.

Theorem inv_involution : forall a : U, a = inv (inv a).
intro a; apply resolve; auto.
Qed.
End group_trivialities.
Hint Resolve G1.
Hint Resolve G2a G2b G2c.
Hint Resolve G3a G3b G3c.
Hint Resolve G0.
Hint Resolve triv1 triv2 resolve self_inv inv_star inv_involution.

