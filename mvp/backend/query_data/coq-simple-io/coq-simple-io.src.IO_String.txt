

From Coq Require Import

     Strings.String

     Strings.Ascii

     extraction.ExtrOcamlIntConv.



From SimpleIO Require Import

     IO_Pervasives.



Extraction Blacklist Bytes Pervasives String .



Module OString.



Parameter length : ocaml_string -> int.

Extract Inlined Constant length => "String.length".



Parameter get_opt : ocaml_string -> int -> option char.

Extract Constant get_opt =>

  "fun s i -> try Some (String.get s i)

              with Invalid_argument _ -> None".



Parameter concat : ocaml_string -> list ocaml_string -> ocaml_string.

Extract Inlined Constant concat => "String.concat".



Module Unsafe.



Parameter get : ocaml_string -> int -> char.

Extract Inlined Constant get => "String.get".



Parameter make : int -> char -> ocaml_string.

Extract Inlined Constant make => "String.make".



Parameter init : int -> (int -> char) -> ocaml_string.

Extract Inlined Constant init => "String.init".



Parameter sub : ocaml_string -> int -> int -> ocaml_string.

Extract Inlined Constant sub => "String.sub".



End Unsafe.



Parameter to_list : ocaml_string -> list char.

Parameter of_list : list char -> ocaml_string.



Axiom from_to_list :

  forall s, to_list (of_list s) = s.

Axiom to_from_list :

  forall s, of_list (to_list s) = s.



Extract Constant to_list =>

  "fun s ->

    let rec go n z =

      if n = -1 then z

      else go (n-1) (String.get s n :: z)

    in go (String.length s - 1) []".



Extract Constant of_list =>

  "fun z -> Bytes.unsafe_to_string (

    let b = Bytes.create (List.length z) in

    let rec go z i =

      match z with

      | c :: z -> Bytes.set b i c; go z (i+1)

      | [] -> b

    in go z 0)".



End OString.

