

Require Import Reals.

Require Import mathcomp.ssreflect.ssreflect.

Require Import Rcomplements.
(* Rcomplements:
Ltac evar_last :=
  match goal with
  | |- ?f ?x =>
    let tx := type of x in
    let tx := eval simpl in tx in
    let tmp := fresh "tmp" in
    evar (tmp : tx) ;
    refine (@eq_ind tx tmp f _ x _) ;
    unfold tmp ; clear tmp
  end.

Require Import Reals mathcomp.ssreflect.ssreflect.
Require Import Psatz.

Module MyNat.

Lemma neq_succ_0 (n : nat) : S n <> 0.

Lemma sub_succ (n m : nat) : S n - S m = n - m.

Lemma sub_succ_l (n m : nat) : n <= m -> S m - n = S (m - n).

Lemma lt_neq (n m : nat) : n < m -> n <> m.

Lemma minus_0_le (n m : nat) : n <= m -> n - m = 0.

Lemma sub_succ_r (n m : nat) : n - S m = pred (n - m).

Lemma sub_add (n m : nat) : n <= m -> m - n + n = m.

Lemma le_pred_le_succ (n m : nat) : pred n <= m <-> n <= S m.

End MyNat.

Require Import Even Div2.
Require Import mathcomp.ssreflect.seq mathcomp.ssreflect.ssrbool.

Open Scope R_scope.

Lemma floor_ex : forall x : R, {n : Z | IZR n <= x < IZR n + 1}.
Definition floor x := proj1_sig (floor_ex x).

Lemma floor1_ex : forall x : R, {n : Z | IZR n < x <= IZR n + 1}.
Definition floor1 x := proj1_sig (floor1_ex x).

Lemma nfloor_ex : forall x : R, 0 <= x -> {n : nat | INR n <= x < INR n + 1}.
Definition nfloor x pr := proj1_sig (nfloor_ex x pr).

Lemma nfloor1_ex : forall x : R, 0 < x -> {n : nat | INR n < x <= INR n + 1}.
Definition nfloor1 x pr := proj1_sig (nfloor1_ex x pr).

Lemma INRp1_pos : forall n, 0 < INR n + 1.

Lemma Rlt_nat (x : R) : (exists n : nat, x = INR (S n)) -> 0 < x.

Lemma Rle_pow_lin (a : R) (n : nat) :
  0 <= a -> 1 + INR n * a <= (1 + a) ^ n.

Lemma C_n_n: forall n, C n n = 1.

Lemma C_n_0: forall n, C n 0 = 1.

Fixpoint pow2 (n : nat) : nat :=
  match n with
    | O => 1%nat
    | S n => (2 * pow2 n)%nat
  end.

Lemma pow2_INR (n : nat) : INR (pow2 n) = 2^n.

Lemma pow2_pos (n : nat) : (0 < pow2 n)%nat.

Lemma Rinv_le_contravar :
  forall x y, 0 < x -> x <= y -> / y <= / x.

Lemma Rinv_lt_cancel (x y : R) :
  0 < y -> / y < / x -> x < y.

Lemma Rdiv_1 : forall x : R, x / 1 = x.

Lemma Rdiv_plus : forall a b c d : R, b <> 0 -> d <> 0 ->
  a / b + c / d = (a * d + c * b) / (b * d).

Lemma Rdiv_minus : forall a b c d : R, b <> 0 -> d <> 0 ->
  a / b - c / d = (a * d - c * b) / (b * d).

Lemma Rplus_lt_reg_l (x y z : R) : x + y < x + z -> y < z.

Lemma Rplus_lt_reg_r (x y z : R) : y + x < z + x -> y < z.

Lemma Rle_div_l : forall a b c, c > 0 -> (a / c <= b <-> a <= b * c).

Lemma Rle_div_r : forall a b c, c > 0 -> (a * c <= b <-> a <= b / c).

Lemma Rlt_div_l : forall a b c, c > 0 -> (a / c < b <-> a < b*c).

Lemma Rlt_div_r : forall a b c, c > 0 -> (a * c < b <-> a < b / c).

Lemma Rdiv_lt_0_compat : forall r1 r2 : R, 0 < r1 -> 0 < r2 -> 0 < r1 / r2.

Lemma Rdiv_le_0_compat : forall r1 r2 : R, 0 <= r1 -> 0 < r2 -> 0 <= r1 / r2.

Lemma Rdiv_lt_1 : forall r1 r2, 0 < r2 -> (r1 < r2 <-> r1 / r2 < 1).

Lemma Rdiv_le_1 : forall r1 r2, 0 < r2 -> (r1 <= r2 <-> r1/r2 <= 1).

Lemma Rle_mult_Rlt : forall c a b : R, 0 < b -> c < 1 -> a <= b*c -> a < b.

Lemma Rmult_le_0_r : forall a b, a <= 0 -> 0 <= b -> a * b <= 0.

Lemma Rmult_le_0_l : forall a b, 0 <= a -> b <= 0 -> a * b <= 0.

Lemma pow2_gt_0 (x : R) : x <> 0 -> 0 < x ^ 2.

Lemma Rminus_eq_0 : forall r : R, r - r = 0.

Lemma Rdiv_minus_distr : forall a b c, b <> 0 -> a / b - c = (a - b * c) / b.

Lemma Rmult_minus_distr_r: forall r1 r2 r3 : R, (r1 - r2) * r3 = r1 * r3 - r2 * r3.

Lemma Rminus_eq_compat_l : forall r r1 r2 : R, r1 = r2 <-> r - r1 = r - r2.

Lemma Ropp_plus_minus_distr : forall r1 r2 : R, - (r1 + r2) = - r1 - r2.

Lemma Rle_minus_l : forall a b c,(a - c <= b <-> a <= b + c).

Lemma Rlt_minus_r : forall a b c,(a < b - c <-> a + c < b).

Lemma Rlt_minus_l : forall a b c,(a - c < b <-> a < b + c).

Lemma Rle_minus_r : forall a b c,(a <= b - c <-> a + c <= b).

Lemma Rminus_le_0 : forall a b, a <= b <-> 0 <= b - a.

Lemma Rminus_lt_0 : forall a b, a < b <-> 0 < b - a.

Lemma sum_f_rw (a : nat -> R) (n m : nat) :
  (n < m)%nat -> sum_f (S n) m a = sum_f_R0 a m - sum_f_R0 a n.

Lemma sum_f_rw_0 (u : nat -> R) (n : nat) :
  sum_f O n u = sum_f_R0 u n.

Lemma sum_f_n_Sm (u : nat -> R) (n m : nat) :
  (n <= m)%nat -> sum_f n (S m) u = sum_f n m u + u (S m).
Lemma sum_f_u_Sk (u : nat -> R) (n m : nat) :
  (n <= m)%nat -> sum_f (S n) (S m) u = sum_f n m (fun k => u (S k)).
Lemma sum_f_u_add (u : nat -> R) (p n m : nat) :
  (n <= m)%nat -> sum_f (n + p)%nat (m + p)%nat u = sum_f n m (fun k => u (k + p)%nat).

Lemma sum_f_Sn_m (u : nat -> R) (n m : nat) :
  (n < m)%nat -> sum_f (S n) m u = sum_f n m u - u n.

Lemma sum_f_R0_skip (u : nat -> R) (n : nat) :
  sum_f_R0 (fun k => u (n - k)%nat) n = sum_f_R0 u n.

Lemma sum_f_chasles (u : nat -> R) (n m k : nat) :
  (n < m)%nat -> (m < k)%nat ->
  sum_f (S n) k u = sum_f (S n) m u + sum_f (S m) k u.

Lemma Rplus_max_distr_l :
  forall a b c, a + Rmax b c = Rmax (a + b) (a + c).

Lemma Rplus_max_distr_r :
  forall a b c, Rmax b c + a = Rmax (b + a) (c + a).

Lemma Rplus_min_distr_l :
  forall a b c, a + Rmin b c = Rmin (a + b) (a + c).

Lemma Rplus_min_distr_r :
  forall a b c, Rmin b c + a = Rmin (b + a) (c + a).

Lemma Rmult_max_distr_l :
  forall a b c, 0 <= a -> a * Rmax b c = Rmax (a * b) (a * c).

Lemma Rmult_max_distr_r :
  forall a b c, 0 <= a -> Rmax b c * a = Rmax (b * a) (c * a).

Lemma Rmult_min_distr_l :
  forall a b c, 0 <= a -> a * Rmin b c = Rmin (a * b) (a * c).

Lemma Rmult_min_distr_r :
  forall a b c, 0 <= a -> Rmin b c * a = Rmin (b * a) (c * a).

Lemma Rmin_assoc : forall x y z, Rmin x (Rmin y z) =
  Rmin (Rmin x y) z.

Lemma Rmax_assoc : forall x y z, Rmax x (Rmax y z) =
  Rmax (Rmax x y) z.

Lemma Rmax_le_compat : forall a b c d, a <= b -> c <= d -> Rmax a c <= Rmax b d.

Lemma Rmax_opp_Rmin : forall a b, Rmax (-a) (-b) = - Rmin a b.
Lemma Rmin_opp_Rmax : forall a b, Rmin (-a) (-b) = - Rmax a b.

Lemma Rmax_mult : forall a b c, 0 <= c -> Rmax a b * c = Rmax (a * c) (b * c).

Lemma Rmax_le_Rplus : forall a b : R, 0 <= a -> 0 <= b -> Rmax a b <= a + b.

Lemma Rplus_le_Rmax : forall a b : R, a + b <= 2*Rmax a b.

Lemma Rmin_Rmax_l : forall a b, Rmin a b <= a <= Rmax a b.

Lemma Rmin_Rmax_r : forall a b, Rmin a b <= b <= Rmax a b.

Lemma Rmin_Rmax : forall a b, Rmin a b <= Rmax a b.

Lemma Rabs_div : forall a b : R, b <> 0 -> Rabs (a/b) = (Rabs a) / (Rabs b).

Lemma Rabs_eq_0 : forall x, Rabs x = 0 -> x = 0.

Lemma Rabs_le_between : forall x y, (Rabs x <= y <-> -y <= x <= y).

Lemma Rabs_le_between' : forall x y z, Rabs (x - y) <= z <-> y-z <= x <= y+z.

Lemma Rabs_lt_between : forall x y, (Rabs x < y <-> -y < x < y).

Lemma Rabs_lt_between' : forall x y z, Rabs (x - y) < z <-> y-z < x < y+z.

Lemma Rabs_le_between_min_max : forall x y z, Rmin x y <= z <= Rmax x y -> Rabs (z - y) <= Rabs (x - y).

Lemma Rabs_le_between_Rmax : forall x m M,
  m <= x <= M -> Rabs x <= Rmax M (-m).

Lemma Rabs_lt_between_Rmax : forall x m M,
  m < x < M -> Rabs x < Rmax M (-m).

Lemma Rabs_maj2 : forall x, -x <= Rabs x.

Lemma Req_lt_aux : forall x y, (forall eps : posreal, Rabs (x - y) < eps) -> x = y.

Lemma Req_le_aux : forall x y, (forall eps : posreal, Rabs (x - y) <= eps) -> x = y.

Lemma is_pos_div_2 (eps : posreal) : 0 < eps / 2.
Definition pos_div_2 (eps : posreal) := mkposreal _ (is_pos_div_2 eps).

Definition sign (x : R) :=
  match total_order_T 0 x with
  | inleft (left _) => 1
  | inleft (right _) => 0
  | inright _ => -1
  end.

Lemma sign_0 : sign 0 = 0.

Lemma sign_opp (x : R) : sign (-x) = - sign x.

Lemma sign_eq_1 (x : R) : 0 < x -> sign x = 1.

Lemma sign_eq_m1 (x : R) : x < 0 -> sign x = -1.

Lemma sign_le (x y : R) : x <= y -> sign x <= sign y.

Lemma sign_ge_0 (x : R) : 0 <= x -> 0 <= sign x.

Lemma sign_le_0 (x : R) : x <= 0 -> sign x <= 0.

Lemma sign_neq_0 (x : R) : x <> 0 -> sign x <> 0.

Lemma sign_mult (x y : R) : sign (x * y) = sign x * sign y.

Lemma sign_min_max (a b : R) :
  sign (b - a) * (Rmax a b - Rmin a b) = b - a.

Lemma sum_INR : forall n, sum_f_R0 INR n = INR n * (INR n + 1) / 2.

Lemma interval_finite_subdiv (a b : R) (eps : posreal) : (a <= b) ->
  {l : seq R | head 0 l = a /\ last 0 l = b /\
    forall i, (S i < size l)%nat -> nth 0 l i < nth 0 l (S i) <= nth 0 l i + eps}.

Lemma interval_finite_subdiv_between (a b : R) (eps : posreal) (Hab : a <= b) :
  let l := proj1_sig (interval_finite_subdiv a b eps Hab) in
  forall i, (i < size l)%nat -> a <= nth 0 l i <= b.

Lemma SSR_leq (n m : nat) : is_true (ssrnat.leq n m) <-> (n <= m)%nat.
Lemma SSR_minus (n m : nat) : ssrnat.subn n m = (n - m)%nat.

Lemma rcons_ind {T : Type} (P : seq T -> Type) :
  P [::] -> (forall (s : seq T) (t : T), P s -> P (rcons s t)) -> forall s, P s.
Lemma rcons_dec {T : Type} (P : seq T -> Type) :
  (P [::]) -> (forall s t, P (rcons s t)) -> forall s, P s.
Lemma size_rcons_pos {T : Type} (s : seq T) (t : T) : (0 < size (rcons s t))%nat.

Lemma foldr_rcons {T T0 : Type} : forall (f : T0 -> T -> T) x0 s t,
  foldr f x0 (rcons s t) = foldr f (f t x0) s.
Lemma foldl_rcons {T T0 : Type} : forall (f : T -> T0 -> T) x0 s t,
  foldl f x0 (rcons s t) = f (foldl f x0 s) t.

Lemma head_rcons {T : Type} (x0 : T) (s : seq T) (t : T) : head x0 (rcons s t) = head t s.
Lemma behead_rcons {T : Type} (s : seq T) (t : T) :
  (0 < size s)%nat ->  behead (rcons s t) = rcons (behead s) t.
Definition belast {T : Type} (s : seq T) :=
  match s with
    | [::] => [::]
    | h :: s => belast h s
  end.
Lemma behead_rev {T : Type} (s : seq T) : behead (rev s) = rev (belast s).

Lemma pairmap_rcons {T T0 : Type} (f : T -> T -> T0) (s : seq T) h0 h x0 :
  pairmap f x0 (rcons (rcons s h0) h) = rcons (pairmap f x0 (rcons s h0)) (f h0 h).
Lemma map_pairmap {T T0 T1 : Type} (f : T0 -> T1) (g : T -> T -> T0) (s : seq T) (x0 : T) :
  map f (pairmap g x0 s) = pairmap (fun x y => f (g x y)) x0 s.
Lemma pairmap_map {T T0 T1 : Type} (f : T0 -> T0 -> T1) (g : T -> T0) (s : seq T) (x0 : T) :
  pairmap f (g x0) (map g s) = pairmap (fun x y => f (g x) (g y)) x0 s.

Lemma size_unzip1 {T T0 : Type} (s : seq (T * T0)) : size (unzip1 s) = size s.
Lemma size_unzip2 {T T0 : Type} (s : seq (T * T0)) : size (unzip2 s) = size s.
Lemma zip_cons {S T : Type} hs ht (s : seq S) (t : seq T) :
  zip (hs :: s) (ht :: t) = (hs,ht) :: zip s t.
Lemma zip_rcons {S T : Type} (s : seq S) (t : seq T) hs ht : size s = size t ->
  zip (rcons s hs) (rcons t ht) = rcons (zip s t) (hs,ht).
Lemma unzip1_rcons {S T : Type} (s : seq (S*T)) (h : S*T) :
  unzip1 (rcons s h) = rcons (unzip1 s) (fst h).
Lemma unzip2_rcons {S T : Type} (s : seq (S*T)) (h : S*T) :
  unzip2 (rcons s h) = rcons (unzip2 s) (snd h).
Lemma unzip1_belast {S T : Type} (s : seq (S*T)) :
  unzip1 (belast s) = belast (unzip1 s).
Lemma unzip2_belast {S T : Type} (s : seq (S*T)) :
  unzip2 (belast s) = belast (unzip2 s).
Lemma unzip1_behead {S T : Type} (s : seq (S*T)) :
  unzip1 (behead s) = behead (unzip1 s).
Lemma unzip2_behead {S T : Type} (s : seq (S*T)) :
  unzip2 (behead s) = behead (unzip2 s).
Lemma unzip1_fst {S T : Type} (s : seq (S*T)) :
  unzip1 s = map (@fst S T) s.
Lemma unzip2_snd {S T : Type} (s : seq (S*T)) :
  unzip2 s = map (@snd S T) s.
Lemma size_belast' {T : Type} (s : seq T) :
  size (belast s) = Peano.pred (size s).
Lemma head_map {T1 T2 : Type} (f : T1 -> T2) (s : seq T1) (x : T1) :
  head (f x) (map f s) = f (head x s).

Lemma StepFun_bound {a b : R} (f : StepFun a b) :
  exists s : R, forall x, Rmin a b <= x <= Rmax a b -> f x <= s.

Lemma Riemann_integrable_bound (f : R -> R) (a b : R) :
  Riemann_integrable f a b -> exists s : R, forall x, Rmin a b <= x <= Rmax a b -> f x <= s.

Lemma Riemann_integrable_ext : forall (f g : R -> R) (a b : R),
  (forall x, Rmin a b <= x <= Rmax a b -> f x = g x)
    -> Riemann_integrable f a b -> Riemann_integrable g a b.

Lemma RiemannInt_ext : forall (f g : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b) (pr_g : Riemann_integrable g a b)
  (Heq : forall x, Rmin a b <= x <= Rmax a b -> f x = g x),
    RiemannInt pr_f = RiemannInt pr_g.

Lemma Riemann_integrable_const : forall (c a b : R),
  Riemann_integrable (fun x => c) a b.

Lemma RiemannInt_const : forall (c a b : R) (pr : Riemann_integrable (fun x => c) a b),
  RiemannInt pr = c * (b-a).

Lemma Riemann_integrable_plus : forall (f g : R -> R) (a b : R),
  Riemann_integrable f a b -> Riemann_integrable g a b ->
    Riemann_integrable (fun x => f x + g x) a b.

Lemma RiemannInt_plus : forall (f g : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b) (pr_g : Riemann_integrable g a b)
  (pr : Riemann_integrable (fun x => f x + g x) a b),
  RiemannInt pr = RiemannInt pr_f + RiemannInt pr_g.

Lemma Riemann_integrable_minus : forall (f g : R -> R) (a b : R),
  Riemann_integrable f a b -> Riemann_integrable g a b ->
    Riemann_integrable (fun x => f x - g x) a b.

Lemma RiemannInt_minus : forall (f g : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b) (pr_g : Riemann_integrable g a b)
  (pr : Riemann_integrable (fun x => f x - g x) a b),
  RiemannInt pr = RiemannInt pr_f - RiemannInt pr_g.

Lemma Riemann_integrable_opp : forall (f : R -> R) (a b : R),
  Riemann_integrable f a b ->
    Riemann_integrable (fun x => - f x) a b.

Lemma RiemannInt_opp : forall (f : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b)
  (pr : Riemann_integrable (fun x => - f x) a b),
  RiemannInt pr = - RiemannInt pr_f.

Lemma Riemann_integrable_scal : forall (f : R -> R) (a b c : R),
  Riemann_integrable f a b ->
    Riemann_integrable (fun x => c * f x) a b.

Lemma RiemannInt_scal : forall (f : R -> R) (a b c : R)
  (pr_f : Riemann_integrable f a b)
  (pr : Riemann_integrable (fun x => c * f x) a b),
  RiemannInt pr = c * RiemannInt pr_f.

Lemma ln_pow x n : 0 < x -> ln (x^n) = INR n * ln x.

Lemma ln_le x y : 0 < x -> x <= y -> ln x <= ln y.

Lemma ln_div x y : 0 < x -> 0 < y -> ln (x / y) = ln x - ln y.

Lemma derivable_pt_lim_atan :
  forall x, derivable_pt_lim atan x (/(1 + x^2)). *)



Open Scope R_scope.



Inductive Rbar :=

  | Finite : R -> Rbar

  | p_infty : Rbar

  | m_infty : Rbar.

Definition real (x : Rbar) :=

  match x with

    | Finite x => x

    | _ => 0

  end.

Coercion Finite : R >-> Rbar.

Coercion real : Rbar >-> R.



Definition is_finite (x : Rbar) := Finite (real x) = x.

Lemma is_finite_correct (x : Rbar) :

  is_finite x <-> exists y : R, x = Finite y.

Proof.

  rewrite /is_finite ;

  case: x => /= ; split => // H.

  by exists r.

  by case: H.

  by case: H.

Qed.



Definition Rbar_lt (x y : Rbar) : Prop :=

  match x,y with

    | p_infty, _ | _, m_infty => False

    | m_infty, _ | _, p_infty => True

    | Finite x, Finite y => Rlt x y

  end.



Definition Rbar_le (x y : Rbar) : Prop :=

  match x,y with

    | m_infty, _ | _, p_infty => True

    | p_infty, _ | _, m_infty => False

    | Finite x, Finite y => Rle x y

  end.



Definition Rbar_opp (x : Rbar) :=

  match x with

    | Finite x => Finite (-x)

    | p_infty => m_infty

    | m_infty => p_infty

  end.



Definition Rbar_plus' (x y : Rbar) :=

  match x,y with

    | p_infty, m_infty | m_infty, p_infty => None

    | p_infty, _ | _, p_infty => Some p_infty

    | m_infty, _ | _, m_infty => Some m_infty

    | Finite x', Finite y' => Some (Finite (x' + y'))

  end.

Definition Rbar_plus (x y : Rbar) :=

  match Rbar_plus' x y with Some z => z | None => Finite 0 end.

Arguments Rbar_plus !x !y /.

Definition is_Rbar_plus (x y z : Rbar) : Prop :=

  Rbar_plus' x y = Some z.

Definition ex_Rbar_plus (x y : Rbar) : Prop :=

  match Rbar_plus' x y with Some _ => True | None => False end.

Arguments ex_Rbar_plus !x !y /.



Lemma is_Rbar_plus_unique (x y z : Rbar) :

  is_Rbar_plus x y z -> Rbar_plus x y = z.

Proof.

  unfold is_Rbar_plus, ex_Rbar_plus, Rbar_plus.

  case: Rbar_plus' => // a Ha.

  by inversion Ha.

Qed.

Lemma Rbar_plus_correct (x y : Rbar) :

  ex_Rbar_plus x y -> is_Rbar_plus x y (Rbar_plus x y).

Proof.

  unfold is_Rbar_plus, ex_Rbar_plus, Rbar_plus.

  by case: Rbar_plus'.

Qed.



Definition Rbar_minus (x y : Rbar) := Rbar_plus x (Rbar_opp y).

Arguments Rbar_minus !x !y /.

Definition is_Rbar_minus (x y z : Rbar) : Prop :=

  is_Rbar_plus x (Rbar_opp y) z.

Definition ex_Rbar_minus (x y : Rbar) : Prop :=

  ex_Rbar_plus x (Rbar_opp y).

Arguments ex_Rbar_minus !x !y /.



Definition Rbar_inv (x : Rbar) : Rbar :=

  match x with

    | Finite x => Finite (/x)

    | _ => Finite 0

  end.



Definition Rbar_mult' (x y : Rbar) :=

  match x with

    | Finite x => match y with

      | Finite y => Some (Finite (x * y))

      | p_infty => match (Rle_dec 0 x) with

        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some p_infty | right _ => None end

        | right _ => Some m_infty

      end

      | m_infty => match (Rle_dec 0 x) with

        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some m_infty | right _ => None end

        | right _ => Some p_infty

      end

    end

    | p_infty => match y with

      | Finite y => match (Rle_dec 0 y) with

        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some p_infty | right _ => None end

        | right _ => Some m_infty

      end

      | p_infty => Some p_infty

      | m_infty => Some m_infty

    end

    | m_infty => match y with

      | Finite y => match (Rle_dec 0 y) with

        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some m_infty | right _ => None end

        | right _ => Some p_infty

      end

      | p_infty => Some m_infty

      | m_infty => Some p_infty

    end

  end.

Definition Rbar_mult (x y : Rbar) :=

  match Rbar_mult' x y with Some z => z | None => Finite 0 end.

Arguments Rbar_mult !x !y /.



Definition is_Rbar_mult (x y z : Rbar) : Prop :=

  Rbar_mult' x y = Some z.

Definition ex_Rbar_mult (x y : Rbar) : Prop :=

  match x with

    | Finite x => match y with

      | Finite y => True

      | p_infty => x <> 0

      | m_infty => x <> 0

    end

    | p_infty => match y with

      | Finite y => y <> 0

      | p_infty => True

      | m_infty => True

    end

    | m_infty => match y with

      | Finite y => y <> 0

      | p_infty => True

      | m_infty => True

    end

  end.

Arguments ex_Rbar_mult !x !y /.



Definition Rbar_mult_pos (x : Rbar) (y : posreal) :=

  match x with

    | Finite x => Finite (x*y)

    | _ => x

  end.



Lemma is_Rbar_mult_unique (x y z : Rbar) :

  is_Rbar_mult x y z -> Rbar_mult x y = z.

Proof.

  unfold is_Rbar_mult ;

  case: x => [x | | ] ;

  case: y => [y | | ] ;

  case: z => [z | | ] //= H ;

  inversion H => // ;

  case: Rle_dec H => // H0 ;

  case: Rle_lt_or_eq_dec => //.

Qed.

Lemma Rbar_mult_correct (x y : Rbar) :

  ex_Rbar_mult x y -> is_Rbar_mult x y (Rbar_mult x y).

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //= H ;

  apply sym_not_eq in H ;

  unfold is_Rbar_mult ; simpl ;

  case: Rle_dec => // H0 ;

  case: Rle_lt_or_eq_dec => //.

Qed.

Lemma Rbar_mult_correct' (x y z : Rbar) :

  is_Rbar_mult x y z -> ex_Rbar_mult x y.

Proof.

  unfold is_Rbar_mult ;

  case: x => [x | | ] ;

  case: y => [y | | ] //= ;

  case: Rle_dec => //= H ; try (case: Rle_lt_or_eq_dec => //=) ; intros.

  by apply Rgt_not_eq.

  by apply Rlt_not_eq, Rnot_le_lt.

  by apply Rgt_not_eq.

  by apply Rlt_not_eq, Rnot_le_lt.

  by apply Rgt_not_eq.

  by apply Rlt_not_eq, Rnot_le_lt.

  by apply Rgt_not_eq.

  by apply Rlt_not_eq, Rnot_le_lt.

Qed.



Definition Rbar_div (x y : Rbar) : Rbar :=

  Rbar_mult x (Rbar_inv y).

Arguments Rbar_div !x !y /.

Definition is_Rbar_div (x y z : Rbar) : Prop :=

  is_Rbar_mult x (Rbar_inv y) z.

Definition ex_Rbar_div (x y : Rbar) : Prop :=

  ex_Rbar_mult x (Rbar_inv y).

Arguments ex_Rbar_div !x !y /.

Definition Rbar_div_pos (x : Rbar) (y : posreal) :=

  match x with

    | Finite x => Finite (x/y)

    | _ => x

  end.



Lemma Rbar_finite_eq (x y : R) :

  Finite x = Finite y <-> x = y.

Proof.

  split ; intros.

  apply Rle_antisym ; apply Rnot_lt_le ; intro.

  assert (Rbar_lt (Finite y) (Finite x)).

  simpl ; apply H0.

  rewrite H in H1 ; simpl in H1 ; by apply Rlt_irrefl in H1.

  assert (Rbar_lt (Finite x) (Finite y)).

  simpl ; apply H0.

  rewrite H in H1 ; simpl in H1 ; by apply Rlt_irrefl in H1.

  rewrite H ; reflexivity.

Qed.

Lemma Rbar_finite_neq (x y : R) :

  Finite x <> Finite y <-> x <> y.

Proof.

  split => H ; contradict H ; by apply Rbar_finite_eq.

Qed.



Lemma Rbar_lt_not_eq (x y : Rbar) :

  Rbar_lt x y -> x<>y.

Proof.

  destruct x ; destruct y ; simpl ; try easy.

  intros H H0.

  apply Rbar_finite_eq in H0 ; revert H0 ; apply Rlt_not_eq, H.

Qed.



Lemma Rbar_not_le_lt (x y : Rbar) :

  ~ Rbar_le x y -> Rbar_lt y x.

Proof.

  destruct x ; destruct y ; simpl ; intuition.

Qed.



Lemma Rbar_lt_not_le (x y : Rbar) :

  Rbar_lt y x -> ~ Rbar_le x y.

Proof.

  destruct x ; destruct y ; simpl ; intuition.

  apply (Rlt_irrefl r0).

  now apply Rlt_le_trans with (1 := H).

Qed.



Lemma Rbar_not_lt_le (x y : Rbar) :

  ~ Rbar_lt x y -> Rbar_le y x.

Proof.

  destruct x ; destruct y ; simpl ; intuition.

  now apply Rnot_lt_le.

Qed.



Lemma Rbar_le_not_lt (x y : Rbar) :

  Rbar_le y x -> ~ Rbar_lt x y.

Proof.

  destruct x ; destruct y ; simpl ; intuition ; contradict H0.

  now apply Rle_not_lt.

Qed.



Lemma Rbar_le_refl :

  forall x : Rbar, Rbar_le x x.

Proof.

intros [x| |] ; try easy.

apply Rle_refl.

Qed.



Lemma Rbar_lt_le :

  forall x y : Rbar,

  Rbar_lt x y -> Rbar_le x y.

Proof.

  intros [x| |] [y| |] ; try easy.

  apply Rlt_le.

Qed.



Lemma Rbar_total_order (x y : Rbar) :

  {Rbar_lt x y} + {x = y} + {Rbar_lt y x}.

Proof.

  destruct x ; destruct y ; simpl ; intuition.

  destruct (total_order_T r r0) ; intuition.

Qed.



Lemma Rbar_eq_dec (x y : Rbar) :

  {x = y} + {x <> y}.

Proof.

  intros ; destruct (Rbar_total_order x y) as [[H|H]|H].

  right ; revert H ; destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intros H ;

  try easy.

  contradict H.

  apply Rbar_finite_eq in H ; try apply Rle_not_lt, Req_le ; auto.

  left ; apply H.

  right ; revert H ; destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intros H ;

  try easy.

  contradict H.

  apply Rbar_finite_eq in H ; apply Rle_not_lt, Req_le ; auto.

Qed.



Lemma Rbar_lt_dec (x y : Rbar) :

  {Rbar_lt x y} + {~Rbar_lt x y}.

Proof.

  destruct (Rbar_total_order x y) as [H|H] ; [ destruct H as [H|H]|].

  now left.

  right ; rewrite H ; clear H ; destruct y ; auto ; apply Rlt_irrefl ; auto.

  right ; revert H ; destruct x as [x | | ] ; destruct y as [y | | ] ; intros H ; auto ;

  apply Rle_not_lt, Rlt_le ; auto.

Qed.



Lemma Rbar_lt_le_dec (x y : Rbar) :

  {Rbar_lt x y} + {Rbar_le y x}.

Proof.

  destruct (Rbar_total_order x y) as [[H|H]|H].

  now left.

  right.

  rewrite H.

  apply Rbar_le_refl.

  right.

  now apply Rbar_lt_le.

Qed.



Lemma Rbar_le_dec (x y : Rbar) :

  {Rbar_le x y} + {~Rbar_le x y}.

Proof.

  destruct (Rbar_total_order x y) as [[H|H]|H].

  left.

  now apply Rbar_lt_le.

  left.

  rewrite H.

  apply Rbar_le_refl.

  right.

  now apply Rbar_lt_not_le.

Qed.



Lemma Rbar_le_lt_dec (x y : Rbar) :

  {Rbar_le x y} + {Rbar_lt y x}.

Proof.

  destruct (Rbar_total_order x y) as [[H|H]|H].

  left.

  now apply Rbar_lt_le.

  left.

  rewrite H.

  apply Rbar_le_refl.

  now right.

Qed.



Lemma Rbar_le_lt_or_eq_dec (x y : Rbar) :

  Rbar_le x y -> { Rbar_lt x y } + { x = y }.

Proof.

  destruct (Rbar_total_order x y) as [[H|H]|H].

  now left.

  now right.

  intros K.

  now elim (Rbar_le_not_lt _ _ K).

Qed.



Lemma Rbar_lt_trans (x y z : Rbar) :

  Rbar_lt x y -> Rbar_lt y z -> Rbar_lt x z.

Proof.

  destruct x ; destruct y ; destruct z ; simpl ; intuition.

  now apply Rlt_trans with r0.

Qed.



Lemma Rbar_lt_le_trans (x y z : Rbar) :

  Rbar_lt x y -> Rbar_le y z -> Rbar_lt x z.

Proof.

  destruct x ; destruct y ; destruct z ; simpl ; intuition.

  now apply Rlt_le_trans with r0.

Qed.



Lemma Rbar_le_lt_trans (x y z : Rbar) :

  Rbar_le x y -> Rbar_lt y z -> Rbar_lt x z.

Proof.

  destruct x ; destruct y ; destruct z ; simpl ; intuition.

  now apply Rle_lt_trans with r0.

Qed.



Lemma Rbar_le_trans (x y z : Rbar) :

  Rbar_le x y -> Rbar_le y z -> Rbar_le x z.

Proof.

  destruct x ; destruct y ; destruct z ; simpl ; intuition.

  now apply Rle_trans with r0.

Qed.



Lemma Rbar_le_antisym (x y : Rbar) :

  Rbar_le x y -> Rbar_le y x -> x = y.

Proof.

  destruct x ; destruct y ; simpl ; intuition.

Qed.



Lemma Rbar_opp_involutive (x : Rbar) : (Rbar_opp (Rbar_opp x)) = x.

Proof.

  destruct x as [x| | ] ; auto ; simpl ; rewrite Ropp_involutive ; auto.

Qed.



Lemma Rbar_opp_lt (x y : Rbar) : Rbar_lt (Rbar_opp x) (Rbar_opp y) <-> Rbar_lt y x.

Proof.

  destruct x as [x | | ] ; destruct y as [y | | ] ;

  split ; auto ; intro H ; simpl ; try left.

  apply Ropp_lt_cancel ; auto.

  apply Ropp_lt_contravar ; auto.

Qed.



Lemma Rbar_opp_le (x y : Rbar) : Rbar_le (Rbar_opp x) (Rbar_opp y) <-> Rbar_le y x.

Proof.

  destruct x as [x| |] ; destruct y as [y| |] ; simpl ; intuition.

Qed.



Lemma Rbar_opp_eq (x y : Rbar) : (Rbar_opp x) = (Rbar_opp y) <-> x = y.

Proof.

  split ; intros H.

  rewrite <- (Rbar_opp_involutive x), H, Rbar_opp_involutive ; reflexivity.

  rewrite H ; reflexivity.

Qed.



Lemma Rbar_opp_real (x : Rbar) : real (Rbar_opp x) = - real x.

Proof.

  destruct x as [x | | ] ; simpl ; intuition.

Qed.



Lemma Rbar_plus'_comm :

  forall x y, Rbar_plus' x y = Rbar_plus' y x.

Proof.

intros [x| |] [y| |] ; try reflexivity.

apply (f_equal (fun x => Some (Finite x))), Rplus_comm.

Qed.



Lemma ex_Rbar_plus_comm :

  forall x y,

  ex_Rbar_plus x y -> ex_Rbar_plus y x.

Proof.

now intros [x| |] [y| |].

Qed.



Lemma ex_Rbar_plus_opp (x y : Rbar) :

  ex_Rbar_plus x y -> ex_Rbar_plus (Rbar_opp x) (Rbar_opp y).

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] => //.

Qed.



Lemma Rbar_plus_0_r (x : Rbar) : Rbar_plus x (Finite 0) = x.

Proof.

  case: x => //= ; intuition.

Qed.

Lemma Rbar_plus_0_l (x : Rbar) : Rbar_plus (Finite 0) x = x.

Proof.

  case: x => //= ; intuition.

Qed.



Lemma Rbar_plus_comm (x y : Rbar) : Rbar_plus x y = Rbar_plus y x.

Proof.

  case x ; case y ; intuition.

  simpl.

  apply f_equal, Rplus_comm.

Qed.



Lemma Rbar_plus_lt_compat (a b c d : Rbar) :

  Rbar_lt a b -> Rbar_lt c d -> Rbar_lt (Rbar_plus a c) (Rbar_plus b d).

Proof.

  case: a => [a | | ] // ; case: b => [b | | ] // ;

  case: c => [c | | ] // ; case: d => [d | | ] // ;

  apply Rplus_lt_compat.

Qed.



Lemma Rbar_plus_le_compat (a b c d : Rbar) :

  Rbar_le a b -> Rbar_le c d -> Rbar_le (Rbar_plus a c) (Rbar_plus b d).

Proof.

  case: a => [a | | ] // ; case: b => [b | | ] // ;

  case: c => [c | | ] // ; case: d => [d | | ] //.

  apply Rplus_le_compat.

  intros _ _.

  apply Rle_refl.

  intros _ _.

  apply Rle_refl.

Qed.



Lemma Rbar_plus_opp (x y : Rbar) :

  Rbar_plus (Rbar_opp x) (Rbar_opp y) = Rbar_opp (Rbar_plus x y).

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //= ; apply f_equal ; ring.

Qed.



Lemma Rbar_minus_eq_0 (x : Rbar) : Rbar_minus x x = 0.

Proof.

  case: x => //= x ; by apply f_equal, Rcomplements.Rminus_eq_0.

Qed.

Lemma Rbar_opp_minus (x y : Rbar) :

  Rbar_opp (Rbar_minus x y) = Rbar_minus y x.

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //=.

  by rewrite Ropp_minus_distr'.

  by rewrite Ropp_0.

  by rewrite Ropp_0.

Qed.



Lemma Rbar_inv_opp (x : Rbar) :

  x <> 0 -> Rbar_inv (Rbar_opp x) = Rbar_opp (Rbar_inv x).

Proof.

  case: x => [x | | ] /= Hx.

  rewrite Ropp_inv_permute => //.

  contradict Hx.

  by rewrite Hx.

  by rewrite Ropp_0.

  by rewrite Ropp_0.

Qed.



Lemma Rbar_mult'_comm (x y : Rbar) :

  Rbar_mult' x y = Rbar_mult' y x.

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //=.

  by rewrite Rmult_comm.

Qed.



Lemma Rbar_mult'_opp_r (x y : Rbar) :

  Rbar_mult' x (Rbar_opp y) = match Rbar_mult' x y with Some z => Some (Rbar_opp z) | None => None end.

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //= ;

  (try case: Rle_dec => Hx //=) ;

  (try case: Rle_lt_or_eq_dec => //= Hx0).

  by rewrite Ropp_mult_distr_r_reverse.

  rewrite -Ropp_0 in Hx0.

  apply Ropp_lt_cancel in Hx0.

  case Rle_dec => Hy //=.

  now elim Rle_not_lt with (1 := Hy).

  case Rle_dec => Hy //=.

  case Rle_lt_or_eq_dec => Hy0 //=.

  elim Rlt_not_le with (1 := Hy0).

  apply Ropp_le_cancel.

  by rewrite Ropp_0.

  elim Hy.

  apply Ropp_le_cancel.

  rewrite -Hx0 Ropp_0.

  apply Rle_refl.

  case Rle_dec => Hy //=.

  case Rle_lt_or_eq_dec => Hy0 //=.

  elim Hx.

  rewrite -Hy0 Ropp_0.

  apply Rle_refl.

  elim Hx.

  rewrite -Ropp_0.

  apply Ropp_le_contravar.

  apply Rlt_le.

  now apply Rnot_le_lt.

  case Rle_dec => Hy //=.

  elim Rlt_not_le with (1 := Hx0).

  rewrite -Ropp_0.

  now apply Ropp_le_contravar.

  case Rle_dec => Hy //=.

  case Rle_lt_or_eq_dec => Hy0 //=.

  elim Rlt_not_le with (1 := Hy0).

  apply Ropp_le_cancel.

  rewrite -Hx0 Ropp_0.

  apply Rle_refl.

  elim Hy.

  apply Ropp_le_cancel.

  rewrite -Hx0 Ropp_0.

  apply Rle_refl.

  case Rle_dec => Hy //=.

  case Rle_lt_or_eq_dec => Hy0 //=.

  elim Hx.

  rewrite -Hy0 Ropp_0.

  apply Rle_refl.

  elim Hx.

  rewrite -Ropp_0.

  apply Ropp_le_contravar.

  apply Rlt_le.

  now apply Rnot_le_lt.

Qed.



Lemma Rbar_mult_comm (x y : Rbar) :

  Rbar_mult x y = Rbar_mult y x.

Proof.

  unfold Rbar_mult.

  by rewrite Rbar_mult'_comm.

Qed.

Lemma Rbar_mult_opp_r (x y : Rbar) :

  Rbar_mult x (Rbar_opp y) = (Rbar_opp (Rbar_mult x y)).

Proof.

  unfold Rbar_mult.

  rewrite Rbar_mult'_opp_r.

  case Rbar_mult' => //=.

  apply f_equal, eq_sym, Ropp_0.

Qed.

Lemma Rbar_mult_opp_l (x y : Rbar) :

  Rbar_mult (Rbar_opp x) y = Rbar_opp (Rbar_mult x y).

Proof.

  rewrite ?(Rbar_mult_comm _ y).

  by apply Rbar_mult_opp_r.

Qed.

Lemma Rbar_mult_opp (x y : Rbar) :

  Rbar_mult (Rbar_opp x) (Rbar_opp y) = Rbar_mult x y.

Proof.

  by rewrite Rbar_mult_opp_l -Rbar_mult_opp_r Rbar_opp_involutive.

Qed.

Lemma Rbar_mult_0_l (x : Rbar) : Rbar_mult 0 x = 0.

Proof.

  case: x => [x | | ] //=.

  by rewrite Rmult_0_l.

  case: Rle_dec (Rle_refl 0) => // H _.

  case: Rle_lt_or_eq_dec (Rlt_irrefl 0) => // _ _.

  case: Rle_dec (Rle_refl 0) => // H _.

  case: Rle_lt_or_eq_dec (Rlt_irrefl 0) => // _ _.

Qed.

Lemma Rbar_mult_0_r (x : Rbar) : Rbar_mult x 0 = 0.

Proof.

  rewrite Rbar_mult_comm ; by apply Rbar_mult_0_l.

Qed.



Lemma Rbar_mult_eq_0 (y x : Rbar) :

  Rbar_mult x y = 0 -> x = 0 \/ y = 0.

Proof.

  case: x => [x | | ] //= ;

  case: y => [y | | ] //= ;

  (try case: Rle_dec => //= H) ;

  (try case: Rle_lt_or_eq_dec => //=) ;

  (try (left ; by apply f_equal)) ;

  (try (right ; by apply f_equal)).

  intros H.

  apply (f_equal real) in H.

  simpl in H.

  apply Rmult_integral in H ; case: H => ->.

  by left.

  by right.

Qed.



Lemma ex_Rbar_mult_sym (x y : Rbar) :

  ex_Rbar_mult x y -> ex_Rbar_mult y x.

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //.

Qed.

Lemma ex_Rbar_mult_opp_l (x y : Rbar) :

  ex_Rbar_mult x y -> ex_Rbar_mult (Rbar_opp x) y.

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //= Hx ;

  by apply Ropp_neq_0_compat.

Qed.

Lemma ex_Rbar_mult_opp_r (x y : Rbar) :

  ex_Rbar_mult x y -> ex_Rbar_mult x (Rbar_opp y).

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] //= Hx ;

  by apply Ropp_neq_0_compat.

Qed.



Lemma is_Rbar_mult_sym (x y z : Rbar) :

  is_Rbar_mult x y z -> is_Rbar_mult y x z.

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] ;

  case: z => [z | | ] //= ;

  unfold is_Rbar_mult, Rbar_mult' ;

  try (case: Rle_dec => // H) ;

  try (case: Rle_lt_or_eq_dec => // H0) ;

  try (case => <-) ; try (move => _).

  by rewrite Rmult_comm.

Qed.

Lemma is_Rbar_mult_opp_l (x y z : Rbar) :

  is_Rbar_mult x y z -> is_Rbar_mult (Rbar_opp x) y (Rbar_opp z).

Proof.

  case: x => [x | | ] ;

  case: y => [y | | ] ;

  case: z => [z | | ] //= ;

  unfold is_Rbar_mult, Rbar_mult' ;

  try (case: Rle_dec => // H) ;

  try (case: Rle_lt_or_eq_dec => // H0) ;

  try (case => <-) ; try (move => _).

  apply (f_equal (@Some _)), f_equal ; ring.

  apply Ropp_lt_contravar in H0 ; rewrite Ropp_0 in H0 ;

  now move/Rlt_not_le: H0 ; case: Rle_dec.

  apply Rnot_le_lt, Ropp_lt_contravar in H ; rewrite Ropp_0 in H ;

  move/Rlt_le: (H) ; case: Rle_dec => // H0 _ ;

  now move/Rlt_not_eq: H ; case: Rle_lt_or_eq_dec.

  apply Rnot_le_lt, Ropp_lt_contravar in H ; rewrite Ropp_0 in H ;

  move/Rlt_le: (H) ; case: Rle_dec => // H0 _ ;

  now move/Rlt_not_eq: H ; case: Rle_lt_or_eq_dec.

  apply Ropp_lt_contravar in H0 ; rewrite Ropp_0 in H0 ;

  now move/Rlt_not_le: H0 ; case: Rle_dec.

Qed.

Lemma is_Rbar_mult_opp_r (x y z : Rbar) :

  is_Rbar_mult x y z -> is_Rbar_mult x (Rbar_opp y) (Rbar_opp z).

Proof.

  move/is_Rbar_mult_sym => H.

  now apply is_Rbar_mult_sym, is_Rbar_mult_opp_l.

Qed.



Lemma is_Rbar_mult_p_infty_pos (x : Rbar) :

  Rbar_lt 0 x -> is_Rbar_mult p_infty x p_infty.

Proof.

  case: x => [x | | ] // Hx.

  unfold is_Rbar_mult, Rbar_mult'.

  case: Rle_dec (Rlt_le _ _ Hx) => // Hx' _.

  now case: Rle_lt_or_eq_dec (Rlt_not_eq _ _ Hx).

Qed.

Lemma is_Rbar_mult_p_infty_neg (x : Rbar) :

  Rbar_lt x 0 -> is_Rbar_mult p_infty x m_infty.

Proof.

  case: x => [x | | ] // Hx.

  unfold is_Rbar_mult, Rbar_mult'.

  case: Rle_dec (Rlt_not_le _ _ Hx) => // Hx' _.

Qed.

Lemma is_Rbar_mult_m_infty_pos (x : Rbar) :

  Rbar_lt 0 x -> is_Rbar_mult m_infty x m_infty.

Proof.

  case: x => [x | | ] // Hx.

  unfold is_Rbar_mult, Rbar_mult'.

  case: Rle_dec (Rlt_le _ _ Hx) => // Hx' _.

  now case: Rle_lt_or_eq_dec (Rlt_not_eq _ _ Hx).

Qed.

Lemma is_Rbar_mult_m_infty_neg (x : Rbar) :

  Rbar_lt x 0 -> is_Rbar_mult m_infty x p_infty.

Proof.

  case: x => [x | | ] // Hx.

  unfold is_Rbar_mult, Rbar_mult'.

  case: Rle_dec (Rlt_not_le _ _ Hx) => // Hx' _.

Qed.



Lemma is_Rbar_div_p_infty (x : R) :

  is_Rbar_div x p_infty 0.

Proof.

  apply (f_equal (@Some _)).

  by rewrite Rmult_0_r.

Qed.

Lemma is_Rbar_div_m_infty (x : R) :

  is_Rbar_div x m_infty 0.

Proof.

  apply (f_equal (@Some _)).

  by rewrite Rmult_0_r.

Qed.



Lemma Rbar_mult_pos_eq (x y : Rbar) (z : posreal) :

  x = y <-> (Rbar_mult_pos x z) = (Rbar_mult_pos y z).

Proof.

  case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ;

  split => //= H ; apply Rbar_finite_eq in H.

  by rewrite H.

  apply Rbar_finite_eq, (Rmult_eq_reg_r (z)) => // ;

  by apply Rgt_not_eq.

Qed.



Lemma Rbar_mult_pos_lt (x y : Rbar) (z : posreal) :

  Rbar_lt x y <-> Rbar_lt (Rbar_mult_pos x z) (Rbar_mult_pos y z).

Proof.

  case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ;

  split => //= H.

  apply (Rmult_lt_compat_r (z)) => //.

  apply (Rmult_lt_reg_r (z)) => //.

Qed.



Lemma Rbar_mult_pos_le (x y : Rbar) (z : posreal) :

  Rbar_le x y <-> Rbar_le (Rbar_mult_pos x z) (Rbar_mult_pos y z).

Proof.

  case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ;

  split => //= H.

  apply Rmult_le_compat_r with (2 := H).

  now apply Rlt_le.

  now apply Rmult_le_reg_r with (2 := H).

Qed.



Lemma Rbar_div_pos_eq (x y : Rbar) (z : posreal) :

  x = y <-> (Rbar_div_pos x z) = (Rbar_div_pos y z).

Proof.

  case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ;

  split => //= H ; apply Rbar_finite_eq in H.

  by rewrite H.

  apply Rbar_finite_eq, (Rmult_eq_reg_r (/z)) => // ;

  by apply Rgt_not_eq, Rinv_0_lt_compat.

Qed.



Lemma Rbar_div_pos_lt (x y : Rbar) (z : posreal) :

  Rbar_lt x y <-> Rbar_lt (Rbar_div_pos x z) (Rbar_div_pos y z).

Proof.

  case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ;

  split => //= H.

  apply (Rmult_lt_compat_r (/z)) => // ; by apply Rinv_0_lt_compat.

  apply (Rmult_lt_reg_r (/z)) => // ; by apply Rinv_0_lt_compat.

Qed.



Lemma Rbar_div_pos_le (x y : Rbar) (z : posreal) :

  Rbar_le x y <-> Rbar_le (Rbar_div_pos x z) (Rbar_div_pos y z).

Proof.

  case: z => z Hz ; case: x => [x | | ] ; case: y => [y | | ] ;

  split => //= H.

  apply Rmult_le_compat_r with (2 := H).

  now apply Rlt_le, Rinv_0_lt_compat.

  apply Rmult_le_reg_r with (2 := H).

  now apply Rinv_0_lt_compat.

Qed.



Definition Rbar_min (x y : Rbar) : Rbar :=

  match x, y with

  | z, p_infty | p_infty, z => z

  | _ , m_infty | m_infty, _ => m_infty

  | Finite x, Finite y => Rmin x y

  end.



Lemma Rbar_lt_locally (a b : Rbar) (x : R) :

  Rbar_lt a x -> Rbar_lt x b ->

  exists delta : posreal,

    forall y, Rabs (y - x) < delta -> Rbar_lt a y /\ Rbar_lt y b.

Proof.

  case: a => [ a /= Ha | | _ ] //= ; (try apply Rminus_lt_0 in Ha) ;

  case: b => [ b Hb | _ | ] //= ; (try apply Rminus_lt_0 in Hb).

  assert (0 < Rmin (x - a) (b - x)).

    by apply Rmin_case.

  exists (mkposreal _ H) => y /= Hy ; split.

  apply Rplus_lt_reg_r with (-x).

  replace (a+-x) with (-(x-a)) by ring.

  apply (Rabs_lt_between (y - x)).

  apply Rlt_le_trans with (1 := Hy).

  by apply Rmin_l.

  apply Rplus_lt_reg_r with (-x).

  apply (Rabs_lt_between (y - x)).

  apply Rlt_le_trans with (1 := Hy).

  by apply Rmin_r.

  exists (mkposreal _ Ha) => y /= Hy ; split => //.

  apply Rplus_lt_reg_r with (-x).

  replace (a+-x) with (-(x-a)) by ring.

  by apply (Rabs_lt_between (y - x)).

  exists (mkposreal _ Hb) => y /= Hy ; split => //.

  apply Rplus_lt_reg_r with (-x).

  by apply (Rabs_lt_between (y - x)).

  exists (mkposreal _ Rlt_0_1) ; by split.

Qed.



Lemma Rbar_min_comm (x y : Rbar) : Rbar_min x y = Rbar_min y x.

Proof.

  case: x => [x | | ] //= ;

  case: y => [y | | ] //=.

  by rewrite Rmin_comm.

Qed.



Lemma Rbar_min_r (x y : Rbar) : Rbar_le (Rbar_min x y) y.

Proof.

  case: x => [x | | ] //= ;

  case: y => [y | | ] //=.

  by apply Rmin_r.

  by apply Rle_refl.

Qed.



Lemma Rbar_min_l (x y : Rbar) : Rbar_le (Rbar_min x y) x.

Proof.

  rewrite Rbar_min_comm.

  by apply Rbar_min_r.

Qed.



Lemma Rbar_min_case (x y : Rbar) (P : Rbar -> Type) :

  P x -> P y -> P (Rbar_min x y).

Proof.

  case: x => [x | | ] //= ;

  case: y => [y | | ] //=.

  by apply Rmin_case.

Qed.

Lemma Rbar_min_case_strong (r1 r2 : Rbar) (P : Rbar -> Type) :

  (Rbar_le r1 r2 -> P r1) -> (Rbar_le r2 r1 -> P r2)

    -> P (Rbar_min r1 r2).

Proof.

  case: r1 => [x | | ] //= ;

  case: r2 => [y | | ] //= Hx Hy ;

  (try by apply Hx) ; (try by apply Hy).

  by apply Rmin_case_strong.

Qed.



Definition Rbar_abs (x : Rbar) :=

  match x with

    | Finite x => Finite (Rabs x)

    | _ => p_infty

  end.



Lemma Rbar_abs_lt_between (x y : Rbar) :

  Rbar_lt (Rbar_abs x) y <-> (Rbar_lt (Rbar_opp y) x /\ Rbar_lt x y).

Proof.

  case: x => [x | | ] ; case: y => [y | | ] /= ; try by intuition.

  by apply Rabs_lt_between.

Qed.



Lemma Rbar_abs_opp (x : Rbar) :

  Rbar_abs (Rbar_opp x) = Rbar_abs x.

Proof.

  case: x => [x | | ] //=.

  by rewrite Rabs_Ropp.

Qed.



Lemma Rbar_abs_pos (x : Rbar) :

  Rbar_le 0 x -> Rbar_abs x = x.

Proof.

  case: x => [x | | ] //= Hx.

  by apply f_equal, Rabs_pos_eq.

Qed.

Lemma Rbar_abs_neg (x : Rbar) :

  Rbar_le x 0 -> Rbar_abs x = Rbar_opp x.

Proof.

  case: x => [x | | ] //= Hx.

  rewrite -Rabs_Ropp.

  apply f_equal, Rabs_pos_eq.

  now rewrite -Ropp_0 ; apply Ropp_le_contravar.

Qed.

