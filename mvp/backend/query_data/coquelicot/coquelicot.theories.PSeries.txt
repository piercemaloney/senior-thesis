

Require Import Reals Even Div2 Omega Psatz.

Require Import mathcomp.ssreflect.ssreflect.

Require Import Rcomplements Rbar Lim_seq Lub Hierarchy.
(* Rcomplements:
Ltac evar_last :=
  match goal with
  | |- ?f ?x =>
    let tx := type of x in
    let tx := eval simpl in tx in
    let tmp := fresh "tmp" in
    evar (tmp : tx) ;
    refine (@eq_ind tx tmp f _ x _) ;
    unfold tmp ; clear tmp
  end.

Require Import Reals mathcomp.ssreflect.ssreflect.
Require Import Psatz.

Module MyNat.

Lemma neq_succ_0 (n : nat) : S n <> 0.

Lemma sub_succ (n m : nat) : S n - S m = n - m.

Lemma sub_succ_l (n m : nat) : n <= m -> S m - n = S (m - n).

Lemma lt_neq (n m : nat) : n < m -> n <> m.

Lemma minus_0_le (n m : nat) : n <= m -> n - m = 0.

Lemma sub_succ_r (n m : nat) : n - S m = pred (n - m).

Lemma sub_add (n m : nat) : n <= m -> m - n + n = m.

Lemma le_pred_le_succ (n m : nat) : pred n <= m <-> n <= S m.

End MyNat.

Require Import Even Div2.
Require Import mathcomp.ssreflect.seq mathcomp.ssreflect.ssrbool.

Open Scope R_scope.

Lemma floor_ex : forall x : R, {n : Z | IZR n <= x < IZR n + 1}.
Definition floor x := proj1_sig (floor_ex x).

Lemma floor1_ex : forall x : R, {n : Z | IZR n < x <= IZR n + 1}.
Definition floor1 x := proj1_sig (floor1_ex x).

Lemma nfloor_ex : forall x : R, 0 <= x -> {n : nat | INR n <= x < INR n + 1}.
Definition nfloor x pr := proj1_sig (nfloor_ex x pr).

Lemma nfloor1_ex : forall x : R, 0 < x -> {n : nat | INR n < x <= INR n + 1}.
Definition nfloor1 x pr := proj1_sig (nfloor1_ex x pr).

Lemma INRp1_pos : forall n, 0 < INR n + 1.

Lemma Rlt_nat (x : R) : (exists n : nat, x = INR (S n)) -> 0 < x.

Lemma Rle_pow_lin (a : R) (n : nat) :
  0 <= a -> 1 + INR n * a <= (1 + a) ^ n.

Lemma C_n_n: forall n, C n n = 1.

Lemma C_n_0: forall n, C n 0 = 1.

Fixpoint pow2 (n : nat) : nat :=
  match n with
    | O => 1%nat
    | S n => (2 * pow2 n)%nat
  end.

Lemma pow2_INR (n : nat) : INR (pow2 n) = 2^n.

Lemma pow2_pos (n : nat) : (0 < pow2 n)%nat.

Lemma Rinv_le_contravar :
  forall x y, 0 < x -> x <= y -> / y <= / x.

Lemma Rinv_lt_cancel (x y : R) :
  0 < y -> / y < / x -> x < y.

Lemma Rdiv_1 : forall x : R, x / 1 = x.

Lemma Rdiv_plus : forall a b c d : R, b <> 0 -> d <> 0 ->
  a / b + c / d = (a * d + c * b) / (b * d).

Lemma Rdiv_minus : forall a b c d : R, b <> 0 -> d <> 0 ->
  a / b - c / d = (a * d - c * b) / (b * d).

Lemma Rplus_lt_reg_l (x y z : R) : x + y < x + z -> y < z.

Lemma Rplus_lt_reg_r (x y z : R) : y + x < z + x -> y < z.

Lemma Rle_div_l : forall a b c, c > 0 -> (a / c <= b <-> a <= b * c).

Lemma Rle_div_r : forall a b c, c > 0 -> (a * c <= b <-> a <= b / c).

Lemma Rlt_div_l : forall a b c, c > 0 -> (a / c < b <-> a < b*c).

Lemma Rlt_div_r : forall a b c, c > 0 -> (a * c < b <-> a < b / c).

Lemma Rdiv_lt_0_compat : forall r1 r2 : R, 0 < r1 -> 0 < r2 -> 0 < r1 / r2.

Lemma Rdiv_le_0_compat : forall r1 r2 : R, 0 <= r1 -> 0 < r2 -> 0 <= r1 / r2.

Lemma Rdiv_lt_1 : forall r1 r2, 0 < r2 -> (r1 < r2 <-> r1 / r2 < 1).

Lemma Rdiv_le_1 : forall r1 r2, 0 < r2 -> (r1 <= r2 <-> r1/r2 <= 1).

Lemma Rle_mult_Rlt : forall c a b : R, 0 < b -> c < 1 -> a <= b*c -> a < b.

Lemma Rmult_le_0_r : forall a b, a <= 0 -> 0 <= b -> a * b <= 0.

Lemma Rmult_le_0_l : forall a b, 0 <= a -> b <= 0 -> a * b <= 0.

Lemma pow2_gt_0 (x : R) : x <> 0 -> 0 < x ^ 2.

Lemma Rminus_eq_0 : forall r : R, r - r = 0.

Lemma Rdiv_minus_distr : forall a b c, b <> 0 -> a / b - c = (a - b * c) / b.

Lemma Rmult_minus_distr_r: forall r1 r2 r3 : R, (r1 - r2) * r3 = r1 * r3 - r2 * r3.

Lemma Rminus_eq_compat_l : forall r r1 r2 : R, r1 = r2 <-> r - r1 = r - r2.

Lemma Ropp_plus_minus_distr : forall r1 r2 : R, - (r1 + r2) = - r1 - r2.

Lemma Rle_minus_l : forall a b c,(a - c <= b <-> a <= b + c).

Lemma Rlt_minus_r : forall a b c,(a < b - c <-> a + c < b).

Lemma Rlt_minus_l : forall a b c,(a - c < b <-> a < b + c).

Lemma Rle_minus_r : forall a b c,(a <= b - c <-> a + c <= b).

Lemma Rminus_le_0 : forall a b, a <= b <-> 0 <= b - a.

Lemma Rminus_lt_0 : forall a b, a < b <-> 0 < b - a.

Lemma sum_f_rw (a : nat -> R) (n m : nat) :
  (n < m)%nat -> sum_f (S n) m a = sum_f_R0 a m - sum_f_R0 a n.

Lemma sum_f_rw_0 (u : nat -> R) (n : nat) :
  sum_f O n u = sum_f_R0 u n.

Lemma sum_f_n_Sm (u : nat -> R) (n m : nat) :
  (n <= m)%nat -> sum_f n (S m) u = sum_f n m u + u (S m).
Lemma sum_f_u_Sk (u : nat -> R) (n m : nat) :
  (n <= m)%nat -> sum_f (S n) (S m) u = sum_f n m (fun k => u (S k)).
Lemma sum_f_u_add (u : nat -> R) (p n m : nat) :
  (n <= m)%nat -> sum_f (n + p)%nat (m + p)%nat u = sum_f n m (fun k => u (k + p)%nat).

Lemma sum_f_Sn_m (u : nat -> R) (n m : nat) :
  (n < m)%nat -> sum_f (S n) m u = sum_f n m u - u n.

Lemma sum_f_R0_skip (u : nat -> R) (n : nat) :
  sum_f_R0 (fun k => u (n - k)%nat) n = sum_f_R0 u n.

Lemma sum_f_chasles (u : nat -> R) (n m k : nat) :
  (n < m)%nat -> (m < k)%nat ->
  sum_f (S n) k u = sum_f (S n) m u + sum_f (S m) k u.

Lemma Rplus_max_distr_l :
  forall a b c, a + Rmax b c = Rmax (a + b) (a + c).

Lemma Rplus_max_distr_r :
  forall a b c, Rmax b c + a = Rmax (b + a) (c + a).

Lemma Rplus_min_distr_l :
  forall a b c, a + Rmin b c = Rmin (a + b) (a + c).

Lemma Rplus_min_distr_r :
  forall a b c, Rmin b c + a = Rmin (b + a) (c + a).

Lemma Rmult_max_distr_l :
  forall a b c, 0 <= a -> a * Rmax b c = Rmax (a * b) (a * c).

Lemma Rmult_max_distr_r :
  forall a b c, 0 <= a -> Rmax b c * a = Rmax (b * a) (c * a).

Lemma Rmult_min_distr_l :
  forall a b c, 0 <= a -> a * Rmin b c = Rmin (a * b) (a * c).

Lemma Rmult_min_distr_r :
  forall a b c, 0 <= a -> Rmin b c * a = Rmin (b * a) (c * a).

Lemma Rmin_assoc : forall x y z, Rmin x (Rmin y z) =
  Rmin (Rmin x y) z.

Lemma Rmax_assoc : forall x y z, Rmax x (Rmax y z) =
  Rmax (Rmax x y) z.

Lemma Rmax_le_compat : forall a b c d, a <= b -> c <= d -> Rmax a c <= Rmax b d.

Lemma Rmax_opp_Rmin : forall a b, Rmax (-a) (-b) = - Rmin a b.
Lemma Rmin_opp_Rmax : forall a b, Rmin (-a) (-b) = - Rmax a b.

Lemma Rmax_mult : forall a b c, 0 <= c -> Rmax a b * c = Rmax (a * c) (b * c).

Lemma Rmax_le_Rplus : forall a b : R, 0 <= a -> 0 <= b -> Rmax a b <= a + b.

Lemma Rplus_le_Rmax : forall a b : R, a + b <= 2*Rmax a b.

Lemma Rmin_Rmax_l : forall a b, Rmin a b <= a <= Rmax a b.

Lemma Rmin_Rmax_r : forall a b, Rmin a b <= b <= Rmax a b.

Lemma Rmin_Rmax : forall a b, Rmin a b <= Rmax a b.

Lemma Rabs_div : forall a b : R, b <> 0 -> Rabs (a/b) = (Rabs a) / (Rabs b).

Lemma Rabs_eq_0 : forall x, Rabs x = 0 -> x = 0.

Lemma Rabs_le_between : forall x y, (Rabs x <= y <-> -y <= x <= y).

Lemma Rabs_le_between' : forall x y z, Rabs (x - y) <= z <-> y-z <= x <= y+z.

Lemma Rabs_lt_between : forall x y, (Rabs x < y <-> -y < x < y).

Lemma Rabs_lt_between' : forall x y z, Rabs (x - y) < z <-> y-z < x < y+z.

Lemma Rabs_le_between_min_max : forall x y z, Rmin x y <= z <= Rmax x y -> Rabs (z - y) <= Rabs (x - y).

Lemma Rabs_le_between_Rmax : forall x m M,
  m <= x <= M -> Rabs x <= Rmax M (-m).

Lemma Rabs_lt_between_Rmax : forall x m M,
  m < x < M -> Rabs x < Rmax M (-m).

Lemma Rabs_maj2 : forall x, -x <= Rabs x.

Lemma Req_lt_aux : forall x y, (forall eps : posreal, Rabs (x - y) < eps) -> x = y.

Lemma Req_le_aux : forall x y, (forall eps : posreal, Rabs (x - y) <= eps) -> x = y.

Lemma is_pos_div_2 (eps : posreal) : 0 < eps / 2.
Definition pos_div_2 (eps : posreal) := mkposreal _ (is_pos_div_2 eps).

Definition sign (x : R) :=
  match total_order_T 0 x with
  | inleft (left _) => 1
  | inleft (right _) => 0
  | inright _ => -1
  end.

Lemma sign_0 : sign 0 = 0.

Lemma sign_opp (x : R) : sign (-x) = - sign x.

Lemma sign_eq_1 (x : R) : 0 < x -> sign x = 1.

Lemma sign_eq_m1 (x : R) : x < 0 -> sign x = -1.

Lemma sign_le (x y : R) : x <= y -> sign x <= sign y.

Lemma sign_ge_0 (x : R) : 0 <= x -> 0 <= sign x.

Lemma sign_le_0 (x : R) : x <= 0 -> sign x <= 0.

Lemma sign_neq_0 (x : R) : x <> 0 -> sign x <> 0.

Lemma sign_mult (x y : R) : sign (x * y) = sign x * sign y.

Lemma sign_min_max (a b : R) :
  sign (b - a) * (Rmax a b - Rmin a b) = b - a.

Lemma sum_INR : forall n, sum_f_R0 INR n = INR n * (INR n + 1) / 2.

Lemma interval_finite_subdiv (a b : R) (eps : posreal) : (a <= b) ->
  {l : seq R | head 0 l = a /\ last 0 l = b /\
    forall i, (S i < size l)%nat -> nth 0 l i < nth 0 l (S i) <= nth 0 l i + eps}.

Lemma interval_finite_subdiv_between (a b : R) (eps : posreal) (Hab : a <= b) :
  let l := proj1_sig (interval_finite_subdiv a b eps Hab) in
  forall i, (i < size l)%nat -> a <= nth 0 l i <= b.

Lemma SSR_leq (n m : nat) : is_true (ssrnat.leq n m) <-> (n <= m)%nat.
Lemma SSR_minus (n m : nat) : ssrnat.subn n m = (n - m)%nat.

Lemma rcons_ind {T : Type} (P : seq T -> Type) :
  P [::] -> (forall (s : seq T) (t : T), P s -> P (rcons s t)) -> forall s, P s.
Lemma rcons_dec {T : Type} (P : seq T -> Type) :
  (P [::]) -> (forall s t, P (rcons s t)) -> forall s, P s.
Lemma size_rcons_pos {T : Type} (s : seq T) (t : T) : (0 < size (rcons s t))%nat.

Lemma foldr_rcons {T T0 : Type} : forall (f : T0 -> T -> T) x0 s t,
  foldr f x0 (rcons s t) = foldr f (f t x0) s.
Lemma foldl_rcons {T T0 : Type} : forall (f : T -> T0 -> T) x0 s t,
  foldl f x0 (rcons s t) = f (foldl f x0 s) t.

Lemma head_rcons {T : Type} (x0 : T) (s : seq T) (t : T) : head x0 (rcons s t) = head t s.
Lemma behead_rcons {T : Type} (s : seq T) (t : T) :
  (0 < size s)%nat ->  behead (rcons s t) = rcons (behead s) t.
Definition belast {T : Type} (s : seq T) :=
  match s with
    | [::] => [::]
    | h :: s => belast h s
  end.
Lemma behead_rev {T : Type} (s : seq T) : behead (rev s) = rev (belast s).

Lemma pairmap_rcons {T T0 : Type} (f : T -> T -> T0) (s : seq T) h0 h x0 :
  pairmap f x0 (rcons (rcons s h0) h) = rcons (pairmap f x0 (rcons s h0)) (f h0 h).
Lemma map_pairmap {T T0 T1 : Type} (f : T0 -> T1) (g : T -> T -> T0) (s : seq T) (x0 : T) :
  map f (pairmap g x0 s) = pairmap (fun x y => f (g x y)) x0 s.
Lemma pairmap_map {T T0 T1 : Type} (f : T0 -> T0 -> T1) (g : T -> T0) (s : seq T) (x0 : T) :
  pairmap f (g x0) (map g s) = pairmap (fun x y => f (g x) (g y)) x0 s.

Lemma size_unzip1 {T T0 : Type} (s : seq (T * T0)) : size (unzip1 s) = size s.
Lemma size_unzip2 {T T0 : Type} (s : seq (T * T0)) : size (unzip2 s) = size s.
Lemma zip_cons {S T : Type} hs ht (s : seq S) (t : seq T) :
  zip (hs :: s) (ht :: t) = (hs,ht) :: zip s t.
Lemma zip_rcons {S T : Type} (s : seq S) (t : seq T) hs ht : size s = size t ->
  zip (rcons s hs) (rcons t ht) = rcons (zip s t) (hs,ht).
Lemma unzip1_rcons {S T : Type} (s : seq (S*T)) (h : S*T) :
  unzip1 (rcons s h) = rcons (unzip1 s) (fst h).
Lemma unzip2_rcons {S T : Type} (s : seq (S*T)) (h : S*T) :
  unzip2 (rcons s h) = rcons (unzip2 s) (snd h).
Lemma unzip1_belast {S T : Type} (s : seq (S*T)) :
  unzip1 (belast s) = belast (unzip1 s).
Lemma unzip2_belast {S T : Type} (s : seq (S*T)) :
  unzip2 (belast s) = belast (unzip2 s).
Lemma unzip1_behead {S T : Type} (s : seq (S*T)) :
  unzip1 (behead s) = behead (unzip1 s).
Lemma unzip2_behead {S T : Type} (s : seq (S*T)) :
  unzip2 (behead s) = behead (unzip2 s).
Lemma unzip1_fst {S T : Type} (s : seq (S*T)) :
  unzip1 s = map (@fst S T) s.
Lemma unzip2_snd {S T : Type} (s : seq (S*T)) :
  unzip2 s = map (@snd S T) s.
Lemma size_belast' {T : Type} (s : seq T) :
  size (belast s) = Peano.pred (size s).
Lemma head_map {T1 T2 : Type} (f : T1 -> T2) (s : seq T1) (x : T1) :
  head (f x) (map f s) = f (head x s).

Lemma StepFun_bound {a b : R} (f : StepFun a b) :
  exists s : R, forall x, Rmin a b <= x <= Rmax a b -> f x <= s.

Lemma Riemann_integrable_bound (f : R -> R) (a b : R) :
  Riemann_integrable f a b -> exists s : R, forall x, Rmin a b <= x <= Rmax a b -> f x <= s.

Lemma Riemann_integrable_ext : forall (f g : R -> R) (a b : R),
  (forall x, Rmin a b <= x <= Rmax a b -> f x = g x)
    -> Riemann_integrable f a b -> Riemann_integrable g a b.

Lemma RiemannInt_ext : forall (f g : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b) (pr_g : Riemann_integrable g a b)
  (Heq : forall x, Rmin a b <= x <= Rmax a b -> f x = g x),
    RiemannInt pr_f = RiemannInt pr_g.

Lemma Riemann_integrable_const : forall (c a b : R),
  Riemann_integrable (fun x => c) a b.

Lemma RiemannInt_const : forall (c a b : R) (pr : Riemann_integrable (fun x => c) a b),
  RiemannInt pr = c * (b-a).

Lemma Riemann_integrable_plus : forall (f g : R -> R) (a b : R),
  Riemann_integrable f a b -> Riemann_integrable g a b ->
    Riemann_integrable (fun x => f x + g x) a b.

Lemma RiemannInt_plus : forall (f g : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b) (pr_g : Riemann_integrable g a b)
  (pr : Riemann_integrable (fun x => f x + g x) a b),
  RiemannInt pr = RiemannInt pr_f + RiemannInt pr_g.

Lemma Riemann_integrable_minus : forall (f g : R -> R) (a b : R),
  Riemann_integrable f a b -> Riemann_integrable g a b ->
    Riemann_integrable (fun x => f x - g x) a b.

Lemma RiemannInt_minus : forall (f g : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b) (pr_g : Riemann_integrable g a b)
  (pr : Riemann_integrable (fun x => f x - g x) a b),
  RiemannInt pr = RiemannInt pr_f - RiemannInt pr_g.

Lemma Riemann_integrable_opp : forall (f : R -> R) (a b : R),
  Riemann_integrable f a b ->
    Riemann_integrable (fun x => - f x) a b.

Lemma RiemannInt_opp : forall (f : R -> R) (a b : R)
  (pr_f : Riemann_integrable f a b)
  (pr : Riemann_integrable (fun x => - f x) a b),
  RiemannInt pr = - RiemannInt pr_f.

Lemma Riemann_integrable_scal : forall (f : R -> R) (a b c : R),
  Riemann_integrable f a b ->
    Riemann_integrable (fun x => c * f x) a b.

Lemma RiemannInt_scal : forall (f : R -> R) (a b c : R)
  (pr_f : Riemann_integrable f a b)
  (pr : Riemann_integrable (fun x => c * f x) a b),
  RiemannInt pr = c * RiemannInt pr_f.

Lemma ln_pow x n : 0 < x -> ln (x^n) = INR n * ln x.

Lemma ln_le x y : 0 < x -> x <= y -> ln x <= ln y.

Lemma ln_div x y : 0 < x -> 0 < y -> ln (x / y) = ln x - ln y.

Lemma derivable_pt_lim_atan :
  forall x, derivable_pt_lim atan x (/(1 + x^2)). *)
(* Rbar:
Require Import Reals.
Require Import mathcomp.ssreflect.ssreflect.
Require Import Rcomplements.

Open Scope R_scope.

Inductive Rbar :=
  | Finite : R -> Rbar
  | p_infty : Rbar
  | m_infty : Rbar.
Definition real (x : Rbar) :=
  match x with
    | Finite x => x
    | _ => 0
  end.
Coercion Finite : R >-> Rbar.
Coercion real : Rbar >-> R.

Definition is_finite (x : Rbar) := Finite (real x) = x.
Lemma is_finite_correct (x : Rbar) :
  is_finite x <-> exists y : R, x = Finite y.

Definition Rbar_lt (x y : Rbar) : Prop :=
  match x,y with
    | p_infty, _ | _, m_infty => False
    | m_infty, _ | _, p_infty => True
    | Finite x, Finite y => Rlt x y
  end.

Definition Rbar_le (x y : Rbar) : Prop :=
  match x,y with
    | m_infty, _ | _, p_infty => True
    | p_infty, _ | _, m_infty => False
    | Finite x, Finite y => Rle x y
  end.

Definition Rbar_opp (x : Rbar) :=
  match x with
    | Finite x => Finite (-x)
    | p_infty => m_infty
    | m_infty => p_infty
  end.

Definition Rbar_plus' (x y : Rbar) :=
  match x,y with
    | p_infty, m_infty | m_infty, p_infty => None
    | p_infty, _ | _, p_infty => Some p_infty
    | m_infty, _ | _, m_infty => Some m_infty
    | Finite x', Finite y' => Some (Finite (x' + y'))
  end.
Definition Rbar_plus (x y : Rbar) :=
  match Rbar_plus' x y with Some z => z | None => Finite 0 end.
Arguments Rbar_plus !x !y /.
Definition is_Rbar_plus (x y z : Rbar) : Prop :=
  Rbar_plus' x y = Some z.
Definition ex_Rbar_plus (x y : Rbar) : Prop :=
  match Rbar_plus' x y with Some _ => True | None => False end.
Arguments ex_Rbar_plus !x !y /.

Lemma is_Rbar_plus_unique (x y z : Rbar) :
  is_Rbar_plus x y z -> Rbar_plus x y = z.
Lemma Rbar_plus_correct (x y : Rbar) :
  ex_Rbar_plus x y -> is_Rbar_plus x y (Rbar_plus x y).

Definition Rbar_minus (x y : Rbar) := Rbar_plus x (Rbar_opp y).
Arguments Rbar_minus !x !y /.
Definition is_Rbar_minus (x y z : Rbar) : Prop :=
  is_Rbar_plus x (Rbar_opp y) z.
Definition ex_Rbar_minus (x y : Rbar) : Prop :=
  ex_Rbar_plus x (Rbar_opp y).
Arguments ex_Rbar_minus !x !y /.

Definition Rbar_inv (x : Rbar) : Rbar :=
  match x with
    | Finite x => Finite (/x)
    | _ => Finite 0
  end.

Definition Rbar_mult' (x y : Rbar) :=
  match x with
    | Finite x => match y with
      | Finite y => Some (Finite (x * y))
      | p_infty => match (Rle_dec 0 x) with
        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some p_infty | right _ => None end
        | right _ => Some m_infty
      end
      | m_infty => match (Rle_dec 0 x) with
        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some m_infty | right _ => None end
        | right _ => Some p_infty
      end
    end
    | p_infty => match y with
      | Finite y => match (Rle_dec 0 y) with
        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some p_infty | right _ => None end
        | right _ => Some m_infty
      end
      | p_infty => Some p_infty
      | m_infty => Some m_infty
    end
    | m_infty => match y with
      | Finite y => match (Rle_dec 0 y) with
        | left H => match Rle_lt_or_eq_dec _ _ H with left _ => Some m_infty | right _ => None end
        | right _ => Some p_infty
      end
      | p_infty => Some m_infty
      | m_infty => Some p_infty
    end
  end.
Definition Rbar_mult (x y : Rbar) :=
  match Rbar_mult' x y with Some z => z | None => Finite 0 end.
Arguments Rbar_mult !x !y /.

Definition is_Rbar_mult (x y z : Rbar) : Prop :=
  Rbar_mult' x y = Some z.
Definition ex_Rbar_mult (x y : Rbar) : Prop :=
  match x with
    | Finite x => match y with
      | Finite y => True
      | p_infty => x <> 0
      | m_infty => x <> 0
    end
    | p_infty => match y with
      | Finite y => y <> 0
      | p_infty => True
      | m_infty => True
    end
    | m_infty => match y with
      | Finite y => y <> 0
      | p_infty => True
      | m_infty => True
    end
  end.
Arguments ex_Rbar_mult !x !y /.

Definition Rbar_mult_pos (x : Rbar) (y : posreal) :=
  match x with
    | Finite x => Finite (x*y)
    | _ => x
  end.

Lemma is_Rbar_mult_unique (x y z : Rbar) :
  is_Rbar_mult x y z -> Rbar_mult x y = z.
Lemma Rbar_mult_correct (x y : Rbar) :
  ex_Rbar_mult x y -> is_Rbar_mult x y (Rbar_mult x y).
Lemma Rbar_mult_correct' (x y z : Rbar) :
  is_Rbar_mult x y z -> ex_Rbar_mult x y.

Definition Rbar_div (x y : Rbar) : Rbar :=
  Rbar_mult x (Rbar_inv y).
Arguments Rbar_div !x !y /.
Definition is_Rbar_div (x y z : Rbar) : Prop :=
  is_Rbar_mult x (Rbar_inv y) z.
Definition ex_Rbar_div (x y : Rbar) : Prop :=
  ex_Rbar_mult x (Rbar_inv y).
Arguments ex_Rbar_div !x !y /.
Definition Rbar_div_pos (x : Rbar) (y : posreal) :=
  match x with
    | Finite x => Finite (x/y)
    | _ => x
  end.

Lemma Rbar_finite_eq (x y : R) :
  Finite x = Finite y <-> x = y.
Lemma Rbar_finite_neq (x y : R) :
  Finite x <> Finite y <-> x <> y.

Lemma Rbar_lt_not_eq (x y : Rbar) :
  Rbar_lt x y -> x<>y.

Lemma Rbar_not_le_lt (x y : Rbar) :
  ~ Rbar_le x y -> Rbar_lt y x.

Lemma Rbar_lt_not_le (x y : Rbar) :
  Rbar_lt y x -> ~ Rbar_le x y.

Lemma Rbar_not_lt_le (x y : Rbar) :
  ~ Rbar_lt x y -> Rbar_le y x.

Lemma Rbar_le_not_lt (x y : Rbar) :
  Rbar_le y x -> ~ Rbar_lt x y.

Lemma Rbar_le_refl :
  forall x : Rbar, Rbar_le x x.

Lemma Rbar_lt_le :
  forall x y : Rbar,
  Rbar_lt x y -> Rbar_le x y.

Lemma Rbar_total_order (x y : Rbar) :
  {Rbar_lt x y} + {x = y} + {Rbar_lt y x}.

Lemma Rbar_eq_dec (x y : Rbar) :
  {x = y} + {x <> y}.

Lemma Rbar_lt_dec (x y : Rbar) :
  {Rbar_lt x y} + {~Rbar_lt x y}.

Lemma Rbar_lt_le_dec (x y : Rbar) :
  {Rbar_lt x y} + {Rbar_le y x}.

Lemma Rbar_le_dec (x y : Rbar) :
  {Rbar_le x y} + {~Rbar_le x y}.

Lemma Rbar_le_lt_dec (x y : Rbar) :
  {Rbar_le x y} + {Rbar_lt y x}.

Lemma Rbar_le_lt_or_eq_dec (x y : Rbar) :
  Rbar_le x y -> { Rbar_lt x y } + { x = y }.

Lemma Rbar_lt_trans (x y z : Rbar) :
  Rbar_lt x y -> Rbar_lt y z -> Rbar_lt x z.

Lemma Rbar_lt_le_trans (x y z : Rbar) :
  Rbar_lt x y -> Rbar_le y z -> Rbar_lt x z.

Lemma Rbar_le_lt_trans (x y z : Rbar) :
  Rbar_le x y -> Rbar_lt y z -> Rbar_lt x z.

Lemma Rbar_le_trans (x y z : Rbar) :
  Rbar_le x y -> Rbar_le y z -> Rbar_le x z.

Lemma Rbar_le_antisym (x y : Rbar) :
  Rbar_le x y -> Rbar_le y x -> x = y.

Lemma Rbar_opp_involutive (x : Rbar) : (Rbar_opp (Rbar_opp x)) = x.

Lemma Rbar_opp_lt (x y : Rbar) : Rbar_lt (Rbar_opp x) (Rbar_opp y) <-> Rbar_lt y x.

Lemma Rbar_opp_le (x y : Rbar) : Rbar_le (Rbar_opp x) (Rbar_opp y) <-> Rbar_le y x.

Lemma Rbar_opp_eq (x y : Rbar) : (Rbar_opp x) = (Rbar_opp y) <-> x = y.

Lemma Rbar_opp_real (x : Rbar) : real (Rbar_opp x) = - real x.

Lemma Rbar_plus'_comm :
  forall x y, Rbar_plus' x y = Rbar_plus' y x.

Lemma ex_Rbar_plus_comm :
  forall x y,
  ex_Rbar_plus x y -> ex_Rbar_plus y x.

Lemma ex_Rbar_plus_opp (x y : Rbar) :
  ex_Rbar_plus x y -> ex_Rbar_plus (Rbar_opp x) (Rbar_opp y).

Lemma Rbar_plus_0_r (x : Rbar) : Rbar_plus x (Finite 0) = x.
Lemma Rbar_plus_0_l (x : Rbar) : Rbar_plus (Finite 0) x = x.

Lemma Rbar_plus_comm (x y : Rbar) : Rbar_plus x y = Rbar_plus y x.

Lemma Rbar_plus_lt_compat (a b c d : Rbar) :
  Rbar_lt a b -> Rbar_lt c d -> Rbar_lt (Rbar_plus a c) (Rbar_plus b d).

Lemma Rbar_plus_le_compat (a b c d : Rbar) :
  Rbar_le a b -> Rbar_le c d -> Rbar_le (Rbar_plus a c) (Rbar_plus b d).

Lemma Rbar_plus_opp (x y : Rbar) :
  Rbar_plus (Rbar_opp x) (Rbar_opp y) = Rbar_opp (Rbar_plus x y).

Lemma Rbar_minus_eq_0 (x : Rbar) : Rbar_minus x x = 0.
Lemma Rbar_opp_minus (x y : Rbar) :
  Rbar_opp (Rbar_minus x y) = Rbar_minus y x.

Lemma Rbar_inv_opp (x : Rbar) :
  x <> 0 -> Rbar_inv (Rbar_opp x) = Rbar_opp (Rbar_inv x).

Lemma Rbar_mult'_comm (x y : Rbar) :
  Rbar_mult' x y = Rbar_mult' y x.

Lemma Rbar_mult'_opp_r (x y : Rbar) :
  Rbar_mult' x (Rbar_opp y) = match Rbar_mult' x y with Some z => Some (Rbar_opp z) | None => None end.

Lemma Rbar_mult_comm (x y : Rbar) :
  Rbar_mult x y = Rbar_mult y x.
Lemma Rbar_mult_opp_r (x y : Rbar) :
  Rbar_mult x (Rbar_opp y) = (Rbar_opp (Rbar_mult x y)).
Lemma Rbar_mult_opp_l (x y : Rbar) :
  Rbar_mult (Rbar_opp x) y = Rbar_opp (Rbar_mult x y).
Lemma Rbar_mult_opp (x y : Rbar) :
  Rbar_mult (Rbar_opp x) (Rbar_opp y) = Rbar_mult x y.
Lemma Rbar_mult_0_l (x : Rbar) : Rbar_mult 0 x = 0.
Lemma Rbar_mult_0_r (x : Rbar) : Rbar_mult x 0 = 0.

Lemma Rbar_mult_eq_0 (y x : Rbar) :
  Rbar_mult x y = 0 -> x = 0 \/ y = 0.

Lemma ex_Rbar_mult_sym (x y : Rbar) :
  ex_Rbar_mult x y -> ex_Rbar_mult y x.
Lemma ex_Rbar_mult_opp_l (x y : Rbar) :
  ex_Rbar_mult x y -> ex_Rbar_mult (Rbar_opp x) y.
Lemma ex_Rbar_mult_opp_r (x y : Rbar) :
  ex_Rbar_mult x y -> ex_Rbar_mult x (Rbar_opp y).

Lemma is_Rbar_mult_sym (x y z : Rbar) :
  is_Rbar_mult x y z -> is_Rbar_mult y x z.
Lemma is_Rbar_mult_opp_l (x y z : Rbar) :
  is_Rbar_mult x y z -> is_Rbar_mult (Rbar_opp x) y (Rbar_opp z).
Lemma is_Rbar_mult_opp_r (x y z : Rbar) :
  is_Rbar_mult x y z -> is_Rbar_mult x (Rbar_opp y) (Rbar_opp z).

Lemma is_Rbar_mult_p_infty_pos (x : Rbar) :
  Rbar_lt 0 x -> is_Rbar_mult p_infty x p_infty.
Lemma is_Rbar_mult_p_infty_neg (x : Rbar) :
  Rbar_lt x 0 -> is_Rbar_mult p_infty x m_infty.
Lemma is_Rbar_mult_m_infty_pos (x : Rbar) :
  Rbar_lt 0 x -> is_Rbar_mult m_infty x m_infty.
Lemma is_Rbar_mult_m_infty_neg (x : Rbar) :
  Rbar_lt x 0 -> is_Rbar_mult m_infty x p_infty.

Lemma is_Rbar_div_p_infty (x : R) :
  is_Rbar_div x p_infty 0.
Lemma is_Rbar_div_m_infty (x : R) :
  is_Rbar_div x m_infty 0.

Lemma Rbar_mult_pos_eq (x y : Rbar) (z : posreal) :
  x = y <-> (Rbar_mult_pos x z) = (Rbar_mult_pos y z).

Lemma Rbar_mult_pos_lt (x y : Rbar) (z : posreal) :
  Rbar_lt x y <-> Rbar_lt (Rbar_mult_pos x z) (Rbar_mult_pos y z).

Lemma Rbar_mult_pos_le (x y : Rbar) (z : posreal) :
  Rbar_le x y <-> Rbar_le (Rbar_mult_pos x z) (Rbar_mult_pos y z).

Lemma Rbar_div_pos_eq (x y : Rbar) (z : posreal) :
  x = y <-> (Rbar_div_pos x z) = (Rbar_div_pos y z).

Lemma Rbar_div_pos_lt (x y : Rbar) (z : posreal) :
  Rbar_lt x y <-> Rbar_lt (Rbar_div_pos x z) (Rbar_div_pos y z).

Lemma Rbar_div_pos_le (x y : Rbar) (z : posreal) :
  Rbar_le x y <-> Rbar_le (Rbar_div_pos x z) (Rbar_div_pos y z).

Definition Rbar_min (x y : Rbar) : Rbar :=
  match x, y with
  | z, p_infty | p_infty, z => z
  | _ , m_infty | m_infty, _ => m_infty
  | Finite x, Finite y => Rmin x y
  end.

Lemma Rbar_lt_locally (a b : Rbar) (x : R) :
  Rbar_lt a x -> Rbar_lt x b ->
  exists delta : posreal,
    forall y, Rabs (y - x) < delta -> Rbar_lt a y /\ Rbar_lt y b.

Lemma Rbar_min_comm (x y : Rbar) : Rbar_min x y = Rbar_min y x.

Lemma Rbar_min_r (x y : Rbar) : Rbar_le (Rbar_min x y) y.

Lemma Rbar_min_l (x y : Rbar) : Rbar_le (Rbar_min x y) x.

Lemma Rbar_min_case (x y : Rbar) (P : Rbar -> Type) :
  P x -> P y -> P (Rbar_min x y).
Lemma Rbar_min_case_strong (r1 r2 : Rbar) (P : Rbar -> Type) :
  (Rbar_le r1 r2 -> P r1) -> (Rbar_le r2 r1 -> P r2)
    -> P (Rbar_min r1 r2).

Definition Rbar_abs (x : Rbar) :=
  match x with
    | Finite x => Finite (Rabs x)
    | _ => p_infty
  end.

Lemma Rbar_abs_lt_between (x y : Rbar) :
  Rbar_lt (Rbar_abs x) y <-> (Rbar_lt (Rbar_opp y) x /\ Rbar_lt x y).

Lemma Rbar_abs_opp (x : Rbar) :
  Rbar_abs (Rbar_opp x) = Rbar_abs x.

Lemma Rbar_abs_pos (x : Rbar) :
  Rbar_le 0 x -> Rbar_abs x = x.
Lemma Rbar_abs_neg (x : Rbar) :
  Rbar_le x 0 -> Rbar_abs x = Rbar_opp x. *)
(* Lim_seq:
Require Import Reals Psatz.
Require Import mathcomp.ssreflect.ssreflect.
Require Import Rcomplements.
Require Import Rbar Lub Markov Hierarchy.

Open Scope R_scope.

Definition is_sup_seq (u : nat -> Rbar) (l : Rbar) :=
  match l with
    | Finite l => forall (eps : posreal), (forall n, Rbar_lt (u n) (l+eps))
                                       /\ (exists n, Rbar_lt (l-eps) (u n))
    | p_infty => forall M : R, exists n, Rbar_lt M (u n)
    | m_infty => forall M : R, forall n, Rbar_lt (u n) M
  end.
Definition is_inf_seq (u : nat -> Rbar) (l : Rbar) :=
  match l with
    | Finite l => forall (eps : posreal), (forall n, Rbar_lt (Finite (l-eps)) (u n))
                                       /\ (exists n, Rbar_lt (u n) (Finite (l+eps)))
    | p_infty => forall M : R, forall n, Rbar_lt (Finite M) (u n)
    | m_infty => forall M : R, exists n, Rbar_lt (u n) (Finite M)
  end.

Lemma is_inf_opp_sup_seq (u : nat -> Rbar) (l : Rbar) :
  is_inf_seq (fun n => Rbar_opp (u n)) (Rbar_opp l)
  <-> is_sup_seq u l.
Lemma is_sup_opp_inf_seq (u : nat -> Rbar) (l : Rbar) :
  is_sup_seq (fun n => Rbar_opp (u n)) (Rbar_opp l)
  <-> is_inf_seq u l.

Lemma is_sup_seq_lub (u : nat -> Rbar) (l : Rbar) :
  is_sup_seq u l -> Rbar_is_lub (fun x => exists n, x = u n) l.

Lemma Rbar_is_lub_sup_seq (u : nat -> Rbar) (l : Rbar) :
  Rbar_is_lub (fun x => exists n, x = u n) l -> is_sup_seq u l.

Lemma is_inf_seq_glb (u : nat -> Rbar) (l : Rbar) :
  is_inf_seq u l -> Rbar_is_glb (fun x => exists n, x = u n) l.
Lemma Rbar_is_glb_inf_seq (u : nat -> Rbar) (l : Rbar) :
  Rbar_is_glb (fun x => exists n, x = u n) l -> is_inf_seq u l.

Lemma is_sup_seq_ext (u v : nat -> Rbar) (l : Rbar) :
  (forall n, u n = v n)
  -> is_sup_seq u l -> is_sup_seq v l.
Lemma is_inf_seq_ext (u v : nat -> Rbar) (l : Rbar) :
  (forall n, u n = v n)
  -> is_inf_seq u l -> is_inf_seq v l.

Lemma ex_sup_seq (u : nat -> Rbar) : {l : Rbar | is_sup_seq u l}.

Lemma ex_inf_seq (u : nat -> Rbar) : {l : Rbar | is_inf_seq u l}.

Definition Sup_seq (u : nat -> Rbar) := proj1_sig (ex_sup_seq u).

Definition Inf_seq (u : nat -> Rbar) := proj1_sig (ex_inf_seq u).

Lemma is_sup_seq_unique (u : nat -> Rbar) (l : Rbar) :
  is_sup_seq u l -> Sup_seq u = l.
Lemma Sup_seq_correct (u : nat -> Rbar) :
  is_sup_seq u (Sup_seq u).
Lemma is_inf_seq_unique (u : nat -> Rbar) (l : Rbar) :
  is_inf_seq u l -> Inf_seq u = l.
Lemma Inf_seq_correct (u : nat -> Rbar) :
  is_inf_seq u (Inf_seq u).

Lemma Sup_seq_ext (u v : nat -> Rbar) :
  (forall n, (u n) = (v n)) -> Sup_seq u = Sup_seq v.
Lemma Inf_seq_ext (u v : nat -> Rbar) :
  (forall n, (u n) = (v n)) -> Inf_seq u = Inf_seq v.

Lemma Rbar_sup_eq_lub (u : nat -> Rbar) :
  Sup_seq u = Rbar_lub (fun x => exists n, x = u n).
Lemma Inf_eq_glb (u : nat -> Rbar) :
  Inf_seq u = Rbar_glb (fun x => exists n, x = u n).

Lemma Sup_opp_inf (u : nat -> Rbar) :
  Sup_seq u = Rbar_opp (Inf_seq (fun n => Rbar_opp (u n))).
Lemma Inf_opp_sup (u : nat -> Rbar) :
  Inf_seq u = Rbar_opp (Sup_seq (fun n => Rbar_opp (u n))).

Lemma Sup_seq_scal_l (a : R) (u : nat -> Rbar) : 0 <= a ->
  Sup_seq (fun n => Rbar_mult a (u n)) = Rbar_mult a (Sup_seq u).
Lemma Inf_seq_scal_l (a : R) (u : nat -> Rbar) : 0 <= a ->
  Inf_seq (fun n => Rbar_mult a (u n)) = Rbar_mult a (Inf_seq u).

Lemma is_sup_seq_le (u v : nat -> Rbar) {l1 l2 : Rbar} :
  (forall n, Rbar_le (u n) (v n))
  -> (is_sup_seq u l1) -> (is_sup_seq v l2) -> Rbar_le l1 l2.
Lemma is_inf_seq_le (u v : nat -> Rbar) {l1 l2 : Rbar} :
  (forall n, Rbar_le (u n) (v n))
  -> (is_inf_seq u l1) -> (is_inf_seq v l2) -> Rbar_le l1 l2.

Lemma Sup_seq_le (u v : nat -> Rbar) :
  (forall n, Rbar_le (u n) (v n)) -> Rbar_le (Sup_seq u) (Sup_seq v).
Lemma Inf_seq_le (u v : nat -> Rbar) :
  (forall n, Rbar_le (u n) (v n)) -> Rbar_le (Inf_seq u) (Inf_seq v).

Lemma Inf_le_sup (u : nat -> Rbar) : Rbar_le (Inf_seq u) (Sup_seq u).

Lemma is_sup_seq_major (u : nat -> Rbar) (l : Rbar) (n : nat) :
  is_sup_seq u l -> Rbar_le (u n) l.

Lemma Sup_seq_minor_lt (u : nat -> Rbar) (M : R) :
  Rbar_lt M (Sup_seq u) <-> exists n, Rbar_lt M (u n).
Lemma Sup_seq_minor_le (u : nat -> Rbar) (M : R) (n : nat) :
  Rbar_le M (u n) -> Rbar_le M (Sup_seq u).

Definition is_LimSup_seq (u : nat -> R) (l : Rbar) :=
  match l with
    | Finite l => forall eps : posreal,
        (forall N : nat, exists n : nat, (N <= n)%nat /\ l - eps < u n)
        /\ (exists N : nat, forall n : nat, (N <= n)%nat -> u n < l + eps)
    | p_infty => forall M : R, (forall N : nat, exists n : nat, (N <= n)%nat /\ M < u n)
    | m_infty => forall M : R, (exists N : nat, forall n : nat, (N <= n)%nat -> u n < M)
  end.

Definition is_LimInf_seq (u : nat -> R) (l : Rbar) :=
  match l with
    | Finite l => forall eps : posreal,
        (forall N : nat, exists n : nat, (N <= n)%nat /\ u n < l + eps)
        /\ (exists N : nat, forall n : nat, (N <= n)%nat -> l - eps < u n)
    | p_infty => forall M : R, (exists N : nat, forall n : nat, (N <= n)%nat -> M < u n)
    | m_infty => forall M : R, (forall N : nat, exists n : nat, (N <= n)%nat /\ u n < M)
  end.

Lemma is_LimInf_opp_LimSup_seq (u : nat -> R) (l : Rbar) :
  is_LimInf_seq (fun n => - u n) (Rbar_opp l)
    <-> is_LimSup_seq u l.
Lemma is_LimSup_opp_LimInf_seq (u : nat -> R) (l : Rbar) :
  is_LimSup_seq (fun n => - u n) (Rbar_opp l)
    <-> is_LimInf_seq u l.

Lemma is_LimSup_infSup_seq (u : nat -> R) (l : Rbar) :
  is_LimSup_seq u l <-> is_inf_seq (fun m => Sup_seq (fun n => u (n + m)%nat)) l.
Lemma is_LimInf_supInf_seq (u : nat -> R) (l : Rbar) :
  is_LimInf_seq u l <-> is_sup_seq (fun m => Inf_seq (fun n => u (n + m)%nat)) l.

Lemma is_LimSup_seq_ext_loc (u v : nat -> R) (l : Rbar) :
  eventually (fun n => u n = v n) ->
  is_LimSup_seq u l -> is_LimSup_seq v l.
Lemma is_LimSup_seq_ext (u v : nat -> R) (l : Rbar) :
  (forall n, u n = v n)
  -> is_LimSup_seq u l -> is_LimSup_seq v l.

Lemma is_LimInf_seq_ext_loc (u v : nat -> R) (l : Rbar) :
  eventually (fun n => u n = v n) ->
  is_LimInf_seq u l -> is_LimInf_seq v l.
Lemma is_LimInf_seq_ext (u v : nat -> R) (l : Rbar) :
  (forall n, u n = v n)
  -> is_LimInf_seq u l -> is_LimInf_seq v l.

Lemma ex_LimSup_seq (u : nat -> R) :
  {l : Rbar | is_LimSup_seq u l}.
Lemma ex_LimInf_seq (u : nat -> R) :
  {l : Rbar | is_LimInf_seq u l}.

Definition LimSup_seq (u : nat -> R) :=
  proj1_sig (ex_LimSup_seq u).
Definition LimInf_seq (u : nat -> R) :=
  proj1_sig (ex_LimInf_seq u).

Lemma is_LimSup_seq_unique (u : nat -> R) (l : Rbar) :
  is_LimSup_seq u l -> LimSup_seq u = l.
Lemma is_LimInf_seq_unique (u : nat -> R) (l : Rbar) :
  is_LimInf_seq u l -> LimInf_seq u = l.

Lemma LimSup_InfSup_seq (u : nat -> R) :
  LimSup_seq u = Inf_seq (fun m => Sup_seq (fun n => u (n + m)%nat)).
Lemma LimInf_SupInf_seq (u : nat -> R) :
  LimInf_seq u = Sup_seq (fun m => Inf_seq (fun n => u (n + m)%nat)).

Lemma is_LimSup_LimInf_seq_le (u : nat -> R) (ls li : Rbar) :
  is_LimSup_seq u ls -> is_LimInf_seq u li -> Rbar_le li ls.
Lemma LimSup_LimInf_seq_le (u : nat -> R) :
  Rbar_le (LimInf_seq u) (LimSup_seq u).

Lemma is_LimSup_seq_const (a : R) :
  is_LimSup_seq (fun _ => a) a.
Lemma LimSup_seq_const (a : R) :
  LimSup_seq (fun _ => a) = a.

Lemma is_LimInf_seq_const (a : R) :
  is_LimInf_seq (fun _ => a) a.
Lemma LimInf_seq_const (a : R) :
  LimInf_seq (fun _ => a) = a.

Lemma LimSup_seq_opp (u : nat -> R) :
  LimSup_seq (fun n => - u n) = Rbar_opp (LimInf_seq u).
Lemma LimInf_seq_opp (u : nat -> R) :
  LimInf_seq (fun n => - u n) = Rbar_opp (LimSup_seq u).

Lemma LimSup_le (u v : nat -> R) :
  eventually (fun n => u n <= v n)
  -> Rbar_le (LimSup_seq u) (LimSup_seq v).
Lemma LimInf_le (u v : nat -> R) :
  eventually (fun n => u n <= v n)
  -> Rbar_le (LimInf_seq u) (LimInf_seq v).

Lemma is_LimSup_seq_scal_pos (a : R) (u : nat -> R) (l : Rbar) :
  (0 < a) -> is_LimSup_seq u l ->
    is_LimSup_seq (fun n => a * u n) (Rbar_mult a l).
Lemma is_LimInf_seq_scal_pos (a : R) (u : nat -> R) (l : Rbar) :
  (0 < a) -> is_LimInf_seq u l ->
    is_LimInf_seq (fun n => a * u n) (Rbar_mult a l).

Lemma is_LimSup_seq_ind_1 (u : nat -> R) (l : Rbar) :
  is_LimSup_seq u l <->
    is_LimSup_seq (fun n => u (S n)) l.
Lemma is_LimInf_seq_ind_1 (u : nat -> R) (l : Rbar) :
  is_LimInf_seq u l <->
    is_LimInf_seq (fun n => u (S n)) l.

Lemma is_LimSup_seq_ind_k (u : nat -> R) (k : nat) (l : Rbar) :
  is_LimSup_seq u l <->
    is_LimSup_seq (fun n => u (n + k)%nat) l.
Lemma is_LimInf_seq_ind_k (u : nat -> R) (k : nat) (l : Rbar) :
  is_LimInf_seq u l <->
    is_LimInf_seq (fun n => u (n + k)%nat) l.

Definition is_lim_seq (u : nat -> R) (l : Rbar) :=
  filterlim u eventually (Rbar_locally l).

Definition is_lim_seq' (u : nat -> R) (l : Rbar) :=
  match l with
    | Finite l => forall eps : posreal, eventually (fun n => Rabs (u n - l) < eps)
    | p_infty => forall M : R, eventually (fun n => M < u n)
    | m_infty => forall M : R, eventually (fun n => u n < M)
  end.
Definition ex_lim_seq (u : nat -> R) :=
  exists l, is_lim_seq u l.
Definition ex_finite_lim_seq (u : nat -> R) :=
  exists l : R, is_lim_seq u l.
Definition Lim_seq (u : nat -> R) : Rbar :=
  Rbar_div_pos (Rbar_plus (LimSup_seq u) (LimInf_seq u))
    {| pos := 2; cond_pos := Rlt_R0_R2 |}.

Lemma is_lim_seq_spec :
  forall u l,
  is_lim_seq' u l <-> is_lim_seq u l.

Lemma is_lim_seq_Reals (u : nat -> R) (l : R) :
  is_lim_seq u l <-> Un_cv u l.
Lemma is_lim_seq_p_infty_Reals (u : nat -> R) :
  is_lim_seq u p_infty <-> cv_infty u.

Lemma is_lim_LimSup_seq (u : nat -> R) (l : Rbar) :
  is_lim_seq u l -> is_LimSup_seq u l.
Lemma is_lim_LimInf_seq (u : nat -> R) (l : Rbar) :
  is_lim_seq u l -> is_LimInf_seq u l.
Lemma is_LimSup_LimInf_lim_seq (u : nat -> R) (l : Rbar) :
  is_LimSup_seq u l -> is_LimInf_seq u l -> is_lim_seq u l.

Lemma ex_lim_LimSup_LimInf_seq (u : nat -> R) :
  ex_lim_seq u <-> LimSup_seq u = LimInf_seq u.

Lemma is_lim_seq_ext_loc (u v : nat -> R) (l : Rbar) :
  eventually (fun n => u n = v n) ->
  is_lim_seq u l -> is_lim_seq v l.
Lemma ex_lim_seq_ext_loc (u v : nat -> R) :
  eventually (fun n => u n = v n) ->
  ex_lim_seq u -> ex_lim_seq v.
Lemma Lim_seq_ext_loc (u v : nat -> R) :
  eventually (fun n => u n = v n) ->
  Lim_seq u = Lim_seq v.

Lemma is_lim_seq_ext (u v : nat -> R) (l : Rbar) :
  (forall n, u n = v n) -> is_lim_seq u l -> is_lim_seq v l.
Lemma ex_lim_seq_ext (u v : nat -> R) :
  (forall n, u n = v n) -> ex_lim_seq u -> ex_lim_seq v.
Lemma Lim_seq_ext (u v : nat -> R) :
  (forall n, u n = v n) ->
  Lim_seq u = Lim_seq v.

Lemma is_lim_seq_unique (u : nat -> R) (l : Rbar) :
  is_lim_seq u l -> Lim_seq u = l.
Lemma Lim_seq_correct (u : nat -> R) :
  ex_lim_seq u -> is_lim_seq u (Lim_seq u).
Lemma Lim_seq_correct' (u : nat -> R) :
  ex_finite_lim_seq u -> is_lim_seq u (real (Lim_seq u)).

Lemma ex_finite_lim_seq_correct (u : nat -> R) :
  ex_finite_lim_seq u <-> ex_lim_seq u /\ is_finite (Lim_seq u).

Lemma ex_lim_seq_dec (u : nat -> R) :
  {ex_lim_seq u} + {~ex_lim_seq u}.

Lemma ex_finite_lim_seq_dec (u : nat -> R) :
  {ex_finite_lim_seq u} + {~ ex_finite_lim_seq u}.

Definition ex_lim_seq_cauchy (u : nat -> R) :=
  forall eps : posreal, exists N : nat, forall n m,
    (N <= n)%nat -> (N <= m)%nat -> Rabs (u n - u m) < eps.
Lemma ex_lim_seq_cauchy_corr (u : nat -> R) :
  (ex_finite_lim_seq u) <-> ex_lim_seq_cauchy u.

Lemma is_lim_seq_INR :
  is_lim_seq INR p_infty.
Lemma ex_lim_seq_INR :
  ex_lim_seq INR.
Lemma Lim_seq_INR :
  Lim_seq INR = p_infty.

Lemma is_lim_seq_const (a : R) :
  is_lim_seq (fun n => a) a.
Lemma ex_lim_seq_const (a : R) :
  ex_lim_seq (fun n => a).
Lemma Lim_seq_const (a : R) :
  Lim_seq (fun n => a) = a.

Lemma eventually_subseq_loc :
  forall phi,
  eventually (fun n => (phi n < phi (S n))%nat) ->
  filterlim phi eventually eventually.
Lemma eventually_subseq :
  forall phi,
  (forall n, (phi n < phi (S n))%nat) ->
  filterlim phi eventually eventually.

Lemma is_lim_seq_subseq (u : nat -> R) (l : Rbar) (phi : nat -> nat) :
  filterlim phi eventually eventually ->
  is_lim_seq u l ->
  is_lim_seq (fun n => u (phi n)) l.
Lemma ex_lim_seq_subseq (u : nat -> R) (phi : nat -> nat) :
  filterlim phi eventually eventually ->
  ex_lim_seq u ->
  ex_lim_seq (fun n => u (phi n)).
Lemma Lim_seq_subseq (u : nat -> R) (phi : nat -> nat) :
  filterlim phi eventually eventually ->
  ex_lim_seq u ->
  Lim_seq (fun n => u (phi n)) = Lim_seq u.

Lemma is_lim_seq_incr_1 (u : nat -> R) (l : Rbar) :
  is_lim_seq u l <-> is_lim_seq (fun n => u (S n)) l.
Lemma ex_lim_seq_incr_1 (u : nat -> R) :
  ex_lim_seq u <-> ex_lim_seq (fun n => u (S n)).
Lemma Lim_seq_incr_1 (u : nat -> R) :
  Lim_seq (fun n => u (S n)) = Lim_seq u.

Lemma is_lim_seq_incr_n (u : nat -> R) (N : nat) (l : Rbar) :
  is_lim_seq u l <-> is_lim_seq (fun n => u (n + N)%nat) l.
Lemma ex_lim_seq_incr_n (u : nat -> R) (N : nat) :
  ex_lim_seq u <-> ex_lim_seq (fun n => u (n + N)%nat).
Lemma Lim_seq_incr_n (u : nat -> R) (N : nat) :
  Lim_seq (fun n => u (n + N)%nat) = Lim_seq u.

Lemma filterlim_le :
  forall {T F} {FF : ProperFilter' F} (f g : T -> R) (lf lg : Rbar),
  F (fun x => f x <= g x) ->
  filterlim f F (Rbar_locally lf) ->
  filterlim g F (Rbar_locally lg) ->
  Rbar_le lf lg.

Lemma is_lim_seq_le_loc (u v : nat -> R) (l1 l2 : Rbar) :
  eventually (fun n => u n <= v n) ->
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  Rbar_le l1 l2.
Lemma Lim_seq_le_loc (u v : nat -> R) :
  eventually (fun n => u n <= v n) ->
  Rbar_le (Lim_seq u) (Lim_seq v).

Lemma is_lim_seq_le (u v : nat -> R) (l1 l2 : Rbar) :
  (forall n, u n <= v n) -> is_lim_seq u l1 -> is_lim_seq v l2 -> Rbar_le l1 l2.

Lemma filterlim_ge_p_infty :
  forall {T F} {FF : Filter F} (f g : T -> R),
  F (fun x => f x <= g x) ->
  filterlim f F (Rbar_locally p_infty) ->
  filterlim g F (Rbar_locally p_infty).

Lemma filterlim_le_m_infty :
  forall {T F} {FF : Filter F} (f g : T -> R),
  F (fun x => g x <= f x) ->
  filterlim f F (Rbar_locally m_infty) ->
  filterlim g F (Rbar_locally m_infty).

Lemma filterlim_le_le :
  forall {T F} {FF : Filter F} (f g h : T -> R) (l : Rbar),
  F (fun x => f x <= g x <= h x) ->
  filterlim f F (Rbar_locally l) ->
  filterlim h F (Rbar_locally l) ->
  filterlim g F (Rbar_locally l).

Lemma is_lim_seq_le_le_loc (u v w : nat -> R) (l : Rbar) :
  eventually (fun n => u n <= v n <= w n) -> is_lim_seq u l -> is_lim_seq w l -> is_lim_seq v l.

Lemma is_lim_seq_le_le (u v w : nat -> R) (l : Rbar) :
  (forall n, u n <= v n <= w n) -> is_lim_seq u l -> is_lim_seq w l -> is_lim_seq v l.

Lemma is_lim_seq_le_p_loc (u v : nat -> R) :
  eventually (fun n => u n <= v n) ->
  is_lim_seq u p_infty ->
  is_lim_seq v p_infty.

Lemma is_lim_seq_le_m_loc (u v : nat -> R) :
  eventually (fun n => v n <= u n) ->
  is_lim_seq u m_infty ->
  is_lim_seq v m_infty.

Lemma is_lim_seq_decr_compare (u : nat -> R) (l : R) :
  is_lim_seq u l
  -> (forall n, (u (S n)) <= (u n))
  -> forall n, l <= u n.
Lemma is_lim_seq_incr_compare (u : nat -> R) (l : R) :
  is_lim_seq u l
  -> (forall n, (u n) <= (u (S n)))
  -> forall n, u n <= l.

Lemma ex_lim_seq_decr (u : nat -> R) :
  (forall n, (u (S n)) <= (u n))
    -> ex_lim_seq u.
Lemma ex_lim_seq_incr (u : nat -> R) :
  (forall n, (u n) <= (u (S n)))
    -> ex_lim_seq u.

Lemma ex_finite_lim_seq_decr (u : nat -> R) (M : R) :
  (forall n, (u (S n)) <= (u n)) -> (forall n, M <= u n)
    -> ex_finite_lim_seq u.
Lemma ex_finite_lim_seq_incr (u : nat -> R) (M : R) :
  (forall n, (u n) <= (u (S n))) -> (forall n, u n <= M)
    -> ex_finite_lim_seq u.

Lemma filterlim_Rbar_opp :
  forall x,
  filterlim Ropp (Rbar_locally x) (Rbar_locally (Rbar_opp x)).

Lemma is_lim_seq_opp (u : nat -> R) (l : Rbar) :
  is_lim_seq u l <-> is_lim_seq (fun n => -u n) (Rbar_opp l).

Lemma ex_lim_seq_opp (u : nat -> R) :
  ex_lim_seq u <-> ex_lim_seq (fun n => -u n).

Lemma Lim_seq_opp (u : nat -> R) :
  Lim_seq (fun n => - u n) = Rbar_opp (Lim_seq u).

Lemma filterlim_Rbar_plus :
  forall x y z,
  is_Rbar_plus x y z ->
  filterlim (fun z => fst z + snd z) (filter_prod (Rbar_locally x) (Rbar_locally y)) (Rbar_locally z).

Lemma is_lim_seq_plus (u v : nat -> R) (l1 l2 l : Rbar) :
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  is_Rbar_plus l1 l2 l ->
  is_lim_seq (fun n => u n + v n) l.
Lemma is_lim_seq_plus' (u v : nat -> R) (l1 l2 : R) :
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  is_lim_seq (fun n => u n + v n) (l1 + l2).

Lemma ex_lim_seq_plus (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v ->
  ex_Rbar_plus (Lim_seq u) (Lim_seq v) ->
  ex_lim_seq (fun n => u n + v n).

Lemma Lim_seq_plus (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v ->
  ex_Rbar_plus (Lim_seq u) (Lim_seq v) ->
  Lim_seq (fun n => u n + v n) = Rbar_plus (Lim_seq u) (Lim_seq v).

Lemma is_lim_seq_minus (u v : nat -> R) (l1 l2 l : Rbar) :
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  is_Rbar_minus l1 l2 l ->
  is_lim_seq (fun n => u n - v n) l.
Lemma is_lim_seq_minus' (u v : nat -> R) (l1 l2 : R) :
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  is_lim_seq (fun n => u n - v n) (l1 - l2).

Lemma ex_lim_seq_minus (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v ->
  ex_Rbar_minus (Lim_seq u) (Lim_seq v) ->
  ex_lim_seq (fun n => u n - v n).

Lemma Lim_seq_minus (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v ->
  ex_Rbar_minus (Lim_seq u) (Lim_seq v) ->
  Lim_seq (fun n => u n - v n) = Rbar_minus (Lim_seq u) (Lim_seq v).

Lemma filterlim_Rbar_inv :
  forall l : Rbar, l <> 0 ->
  filterlim Rinv (Rbar_locally l) (Rbar_locally (Rbar_inv l)).

Lemma is_lim_seq_inv (u : nat -> R) (l : Rbar) :
  is_lim_seq u l -> l <> 0 ->
  is_lim_seq (fun n => / u n) (Rbar_inv l).

Lemma ex_lim_seq_inv (u : nat -> R) :
  ex_lim_seq u
  -> Lim_seq u <> 0
    -> ex_lim_seq (fun n => / u n).

Lemma Lim_seq_inv (u : nat -> R) :
  ex_lim_seq u -> (Lim_seq u <> 0)
    -> Lim_seq (fun n => / u n) = Rbar_inv (Lim_seq u).

Lemma filterlim_Rbar_mult :
  forall x y z,
  is_Rbar_mult x y z ->
  filterlim (fun z => fst z * snd z) (filter_prod (Rbar_locally x) (Rbar_locally y)) (Rbar_locally z).

Lemma is_lim_seq_mult (u v : nat -> R) (l1 l2 l : Rbar) :
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  is_Rbar_mult l1 l2 l ->
  is_lim_seq (fun n => u n * v n) l.
Lemma is_lim_seq_mult' (u v : nat -> R) (l1 l2 : R) :
  is_lim_seq u l1 -> is_lim_seq v l2 ->
  is_lim_seq (fun n => u n * v n) (l1 * l2).

Lemma ex_lim_seq_mult (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v ->
  ex_Rbar_mult (Lim_seq u) (Lim_seq v) ->
  ex_lim_seq (fun n => u n * v n).

Lemma Lim_seq_mult (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v ->
  ex_Rbar_mult (Lim_seq u) (Lim_seq v) ->
  Lim_seq (fun n => u n * v n) = Rbar_mult (Lim_seq u) (Lim_seq v).

Lemma filterlim_Rbar_mult_l :
  forall (a : R) (l : Rbar),
  filterlim (Rmult a) (Rbar_locally l) (Rbar_locally (Rbar_mult a l)).

Lemma filterlim_Rbar_mult_r :
  forall (a : R) (l : Rbar),
  filterlim (fun x => Rmult x a) (Rbar_locally l) (Rbar_locally (Rbar_mult l a)).

Lemma is_lim_seq_scal_l (u : nat -> R) (a : R) (lu : Rbar) :
  is_lim_seq u lu ->
  is_lim_seq (fun n => a * u n) (Rbar_mult a lu).

Lemma ex_lim_seq_scal_l (u : nat -> R) (a : R) :
  ex_lim_seq u -> ex_lim_seq (fun n => a * u n).

Lemma Lim_seq_scal_l (u : nat -> R) (a : R) :
  Lim_seq (fun n => a * u n) = Rbar_mult a (Lim_seq u).

Lemma is_lim_seq_scal_r (u : nat -> R) (a : R) (lu : Rbar) :
  is_lim_seq u lu ->
    is_lim_seq (fun n => u n * a) (Rbar_mult lu a).

Lemma ex_lim_seq_scal_r (u : nat -> R) (a : R) :
  ex_lim_seq u -> ex_lim_seq (fun n => u n * a).

Lemma Lim_seq_scal_r (u : nat -> R) (a : R) :
  Lim_seq (fun n => u n * a) = Rbar_mult (Lim_seq u) a.

Lemma is_lim_seq_div (u v : nat -> R) (l1 l2 l : Rbar) :
  is_lim_seq u l1 -> is_lim_seq v l2 -> l2 <> 0 ->
  is_Rbar_div l1 l2 l ->
  is_lim_seq (fun n => u n / v n) l.
Lemma is_lim_seq_div' (u v : nat -> R) (l1 l2 : R) :
  is_lim_seq u l1 -> is_lim_seq v l2 -> l2 <> 0 ->
  is_lim_seq (fun n => u n / v n) (l1 / l2).
Lemma ex_lim_seq_div (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v -> Lim_seq v <> 0 ->
  ex_Rbar_div (Lim_seq u) (Lim_seq v) ->
  ex_lim_seq (fun n => u n / v n).
Lemma Lim_seq_div (u v : nat -> R) :
  ex_lim_seq u -> ex_lim_seq v -> (Lim_seq v <> 0) ->
  ex_Rbar_div (Lim_seq u) (Lim_seq v) ->
  Lim_seq (fun n => u n / v n) = Rbar_div (Lim_seq u) (Lim_seq v).

Lemma ex_lim_seq_adj (u v : nat -> R) :
  (forall n, u n <= u (S n)) -> (forall n, v (S n) <= v n)
  -> is_lim_seq (fun n => v n - u n) 0
  -> ex_finite_lim_seq u /\ ex_finite_lim_seq v /\ Lim_seq u = Lim_seq v.

Lemma is_lim_seq_continuous (f : R -> R) (u : nat -> R) (l : R) :
  continuity_pt f l -> is_lim_seq u l
  -> is_lim_seq (fun n => f (u n)) (f l).

Lemma filterlim_Rabs :
  forall l : Rbar,
  filterlim Rabs (Rbar_locally l) (Rbar_locally (Rbar_abs l)).

Lemma is_lim_seq_abs (u : nat -> R) (l : Rbar) :
  is_lim_seq u l -> is_lim_seq (fun n => Rabs (u n)) (Rbar_abs l).
Lemma ex_lim_seq_abs (u : nat -> R) :
  ex_lim_seq u -> ex_lim_seq (fun n => Rabs (u n)).
Lemma Lim_seq_abs (u : nat -> R) :
  ex_lim_seq u ->
  Lim_seq (fun n => Rabs (u n)) = Rbar_abs (Lim_seq u).

Lemma is_lim_seq_abs_0 (u : nat -> R) :
  is_lim_seq u 0 <-> is_lim_seq (fun n => Rabs (u n)) 0.

Lemma is_lim_seq_geom (q : R) :
  Rabs q < 1 -> is_lim_seq (fun n => q ^ n) 0.
Lemma ex_lim_seq_geom (q : R) :
  Rabs q < 1 -> ex_lim_seq (fun n => q ^ n).
Lemma Lim_seq_geom (q : R) :
  Rabs q < 1 -> Lim_seq (fun n => q ^ n) = 0.

Lemma is_lim_seq_geom_p (q : R) :
  1 < q -> is_lim_seq (fun n => q ^ n) p_infty.
Lemma ex_lim_seq_geom_p (q : R) :
  1 < q -> ex_lim_seq (fun n => q ^ n).
Lemma Lim_seq_geom_p (q : R) :
  1 < q -> Lim_seq (fun n => q ^ n) = p_infty.

Lemma ex_lim_seq_geom_m (q : R) :
  q <= -1 -> ~ ex_lim_seq (fun n => q ^ n).

Lemma is_lim_seq_Rbar_loc_seq (x : Rbar) :
  is_lim_seq (Rbar_loc_seq x) x. *)
(* Lub:
Require Import Reals mathcomp.ssreflect.ssreflect.
Require Import Rbar Rcomplements Markov.

Open Scope R_scope.

Definition is_ub_Rbar (E : R -> Prop) (l : Rbar) :=
  forall (x : R), E x -> Rbar_le x l.
Definition is_lb_Rbar (E : R -> Prop) (l : Rbar) :=
  forall (x : R), E x -> Rbar_le l x.

Lemma is_ub_Rbar_opp (E : R -> Prop) (l : Rbar) :
  is_lb_Rbar E l <-> is_ub_Rbar (fun x => E (- x)) (Rbar_opp l).
Lemma is_lb_Rbar_opp (E : R -> Prop) (l : Rbar) :
  is_ub_Rbar E l <-> is_lb_Rbar (fun x => E (- x)) (Rbar_opp l).

Lemma is_ub_Rbar_dec (E : R -> Prop) :
  {l : R | is_ub_Rbar E l} + {(forall l : R, ~is_ub_Rbar E l)}.

Lemma is_lb_Rbar_dec (E : R -> Prop) :
  {l : R | is_lb_Rbar E l} + {(forall l : R, ~is_lb_Rbar E l)}.

Lemma is_ub_Rbar_subset (E1 E2 : R -> Prop) (l : Rbar) :
  (forall x : R, E2 x -> E1 x) -> is_ub_Rbar E1 l -> is_ub_Rbar E2 l.
Lemma is_lb_Rbar_subset (E1 E2 : R -> Prop) (l : Rbar) :
  (forall x : R, E2 x -> E1 x) -> is_lb_Rbar E1 l -> is_lb_Rbar E2 l.

Definition is_lub_Rbar (E : R -> Prop) (l : Rbar) :=
  is_ub_Rbar E l /\ (forall b, is_ub_Rbar E b -> Rbar_le l b).
Definition is_glb_Rbar (E : R -> Prop) (l : Rbar) :=
  is_lb_Rbar E l /\ (forall b, is_lb_Rbar E b -> Rbar_le b l).

Lemma is_lub_Rbar_opp (E : R -> Prop) (l : Rbar) :
  is_glb_Rbar E l <-> is_lub_Rbar (fun x => E (- x)) (Rbar_opp l).
Lemma is_glb_Rbar_opp (E : R -> Prop) (l : Rbar) :
  is_lub_Rbar E l <-> is_glb_Rbar (fun x => E (- x)) (Rbar_opp l).

Lemma ex_lub_Rbar (E : R -> Prop) : {l : Rbar | is_lub_Rbar E l}.
Lemma ex_glb_Rbar (E : R -> Prop) : {l : Rbar | is_glb_Rbar E l}.

Definition Lub_Rbar (E : R -> Prop) := proj1_sig (ex_lub_Rbar E).
Definition Glb_Rbar (E : R -> Prop) := proj1_sig (ex_glb_Rbar E).

Lemma is_lub_Rbar_unique (E : R -> Prop) (l : Rbar) :
  is_lub_Rbar E l -> Lub_Rbar E = l.
Lemma is_glb_Rbar_unique (E : R -> Prop) (l : Rbar) :
  is_glb_Rbar E l -> Glb_Rbar E = l.

Lemma Lub_Rbar_correct (E : R -> Prop) :
  is_lub_Rbar E (Lub_Rbar E).
Lemma Glb_Rbar_correct (E : R -> Prop) :
  is_glb_Rbar E (Glb_Rbar E).

Lemma is_lub_Rbar_subset (E1 E2 : R -> Prop) (l1 l2 : Rbar) :
  (forall x : R, E2 x -> E1 x) -> is_lub_Rbar E1 l1 -> is_lub_Rbar E2 l2
    -> Rbar_le l2 l1.
Lemma is_glb_Rbar_subset (E1 E2 : R -> Prop) (l1 l2 : Rbar) :
  (forall x : R, E2 x -> E1 x) -> is_glb_Rbar E1 l1 -> is_glb_Rbar E2 l2
    -> Rbar_le l1 l2.

Lemma is_lub_Rbar_eqset (E1 E2 : R -> Prop) (l : Rbar) :
  (forall x : R, E2 x <-> E1 x) -> is_lub_Rbar E1 l -> is_lub_Rbar E2 l.
Lemma is_glb_Rbar_eqset (E1 E2 : R -> Prop) (l : Rbar) :
  (forall x : R, E2 x <-> E1 x) -> is_glb_Rbar E1 l -> is_glb_Rbar E2 l.

Lemma Lub_Rbar_eqset (E1 E2 : R -> Prop) :
  (forall x, E1 x <-> E2 x) -> Lub_Rbar E1 = Lub_Rbar E2.
Lemma Glb_Rbar_eqset (E1 E2 : R -> Prop) :
  (forall x, E1 x <-> E2 x) -> Glb_Rbar E1 = Glb_Rbar E2.

Definition Rbar_is_upper_bound (E : Rbar -> Prop) (l : Rbar) :=
  forall x, E x -> Rbar_le x l.

Definition Rbar_is_lower_bound (E : Rbar -> Prop) (l : Rbar) :=
  forall x, E x -> Rbar_le l x.

Lemma Rbar_ub_lb (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_upper_bound (fun x => E (Rbar_opp x)) (Rbar_opp l)
    <-> Rbar_is_lower_bound E l.
Lemma Rbar_lb_ub (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_lower_bound (fun x => E (Rbar_opp x)) (Rbar_opp l)
    <-> Rbar_is_upper_bound E l.

Lemma is_ub_Rbar_correct (E : R -> Prop) (l : Rbar) :
  is_ub_Rbar E l <-> Rbar_is_upper_bound (fun x => is_finite x /\ E x) l.
Lemma is_lb_Rbar_correct (E : R -> Prop) (l : Rbar) :
  is_lb_Rbar E l <-> Rbar_is_lower_bound (fun x => is_finite x /\ E x) l.

Lemma Rbar_ub_p_infty (E : Rbar -> Prop) :
  Rbar_is_upper_bound E p_infty.
Lemma Rbar_lb_m_infty (E : Rbar -> Prop) :
  Rbar_is_lower_bound E m_infty.

Lemma Rbar_ub_Finite (E : Rbar -> Prop) (l : R) :
  Rbar_is_upper_bound E l ->
    is_upper_bound (fun (x : R) => E x) l.
Lemma Rbar_lb_Finite (E : Rbar -> Prop) (l : R) :
  Rbar_is_lower_bound E (Finite l) ->
    is_upper_bound (fun x => E (Finite (- x))) (- l).

Lemma Rbar_ub_m_infty (E : Rbar -> Prop) :
  Rbar_is_upper_bound E m_infty -> forall x, E x -> x = m_infty.
Lemma Rbar_lb_p_infty (E : Rbar -> Prop) :
  Rbar_is_lower_bound E p_infty -> (forall x, E x -> x = p_infty).

Lemma Rbar_lb_le_ub (E : Rbar -> Prop) (l1 l2 : Rbar) : (exists x, E x) ->
  Rbar_is_lower_bound E l1 -> Rbar_is_upper_bound E l2 -> Rbar_le l1 l2.
Lemma Rbar_lb_eq_ub (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_lower_bound E l -> Rbar_is_upper_bound E l -> forall x, E x -> x = l.

Lemma Rbar_ub_dec (E : Rbar -> Prop) (Hp : ~ E p_infty) :
  {M : R | Rbar_is_upper_bound E M}
    + {(forall (M : R), ~Rbar_is_upper_bound E M)}.
Lemma Rbar_lb_dec (E : Rbar -> Prop) (Hm : ~ E m_infty) :
  {M : R | Rbar_is_lower_bound E (Finite M)}
    + {(forall M, ~Rbar_is_lower_bound E (Finite M))}.

Lemma Rbar_is_ub_subset (E1 E2 : Rbar -> Prop) (l : Rbar) :
  (forall x, E1 x -> E2 x) -> (Rbar_is_upper_bound E2 l) -> (Rbar_is_upper_bound E1 l).
Lemma Rbar_is_lb_subset (E1 E2 : Rbar -> Prop) (l : Rbar) :
  (forall x, E1 x -> E2 x) -> (Rbar_is_lower_bound E2 l) -> (Rbar_is_lower_bound E1 l).

Definition Rbar_is_lub (E : Rbar -> Prop) (l : Rbar) :=
  Rbar_is_upper_bound E l /\
    (forall b : Rbar, Rbar_is_upper_bound E b -> Rbar_le l b).
Definition Rbar_is_glb (E : Rbar -> Prop) (l : Rbar) :=
  Rbar_is_lower_bound E l /\
    (forall b : Rbar, Rbar_is_lower_bound E b -> Rbar_le b l).

Lemma Rbar_lub_glb (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_lub (fun x => E (Rbar_opp x)) (Rbar_opp l)
    <-> Rbar_is_glb E l.
Lemma Rbar_glb_lub (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_glb (fun x => E (Rbar_opp x)) (Rbar_opp l)
    <-> Rbar_is_lub E l.

Lemma is_lub_Rbar_correct (E : R -> Prop) (l : Rbar) :
  is_lub_Rbar E l <-> Rbar_is_lub (fun x => is_finite x /\ E x) l.
Lemma is_glb_Rbar_correct (E : R -> Prop) (l : Rbar) :
  is_glb_Rbar E l <-> Rbar_is_glb (fun x => is_finite x /\ E x) l.

Lemma Rbar_ex_lub (E : Rbar -> Prop) :
  {l : Rbar | Rbar_is_lub E l}.

Lemma Rbar_ex_glb (E : Rbar -> Prop) :
  {l : Rbar | Rbar_is_glb E l}.

Definition Rbar_lub (E : Rbar -> Prop)
  := proj1_sig (Rbar_ex_lub E).
Definition Rbar_glb (E : Rbar -> Prop)
  := proj1_sig (Rbar_ex_glb E).

Lemma Rbar_opp_glb_lub (E : Rbar -> Prop) :
  Rbar_glb (fun x => E (Rbar_opp x)) = Rbar_opp (Rbar_lub E).
Lemma Rbar_opp_lub_glb (E : Rbar -> Prop) :
  Rbar_lub (fun x => E (Rbar_opp x)) = Rbar_opp (Rbar_glb E).

Lemma Rbar_is_lub_unique (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_lub E l -> Rbar_lub E = l.
Lemma Rbar_is_glb_unique (E : Rbar -> Prop) (l : Rbar) :
  Rbar_is_glb E l -> Rbar_glb E = l.

Lemma Rbar_glb_le_lub (E : Rbar -> Prop) :
  (exists x, E x) -> Rbar_le (Rbar_glb E) (Rbar_lub E).

Lemma Rbar_is_lub_subset (E1 E2 : Rbar -> Prop) (l1 l2 : Rbar) :
  (forall x, E1 x -> E2 x) -> (Rbar_is_lub E1 l1) -> (Rbar_is_lub E2 l2)
  -> Rbar_le l1 l2.
Lemma Rbar_is_glb_subset (E1 E2 : Rbar -> Prop) (l1 l2 : Rbar) :
  (forall x, E2 x -> E1 x) -> (Rbar_is_glb E1 l1) -> (Rbar_is_glb E2 l2)
  -> Rbar_le l1 l2.

Lemma Rbar_is_lub_eq (E1 E2 : Rbar -> Prop) (l1 l2 : Rbar) :
  (forall x, E1 x <-> E2 x) -> (Rbar_is_lub E1 l1) -> (Rbar_is_lub E2 l2)
  -> l1 = l2.
Lemma Rbar_is_glb_eq (E1 E2 : Rbar -> Prop) (l1 l2 : Rbar) :
  (forall x, E1 x <-> E2 x) -> (Rbar_is_glb E1 l1) -> (Rbar_is_glb E2 l2)
  -> l1 = l2.

Lemma Rbar_is_lub_ext (E1 E2 : Rbar -> Prop) (l : Rbar) :
  (forall x, E1 x <-> E2 x) -> (Rbar_is_lub E1 l) -> (Rbar_is_lub E2 l).
Lemma Rbar_is_glb_ext (E1 E2 : Rbar -> Prop) (l : Rbar) :
  (forall x, E1 x <-> E2 x) -> (Rbar_is_glb E1 l) -> (Rbar_is_glb E2 l).

Lemma Rbar_lub_subset (E1 E2 : Rbar -> Prop) :
  (forall x, E1 x -> E2 x) -> Rbar_le (Rbar_lub E1) (Rbar_lub E2).
Lemma Rbar_glb_subset (E1 E2 : Rbar -> Prop) :
  (forall x, E2 x -> E1 x) -> Rbar_le (Rbar_glb E1) (Rbar_glb E2).

Lemma Rbar_lub_rw (E1 E2 : Rbar -> Prop) :
  (forall x, E1 x <-> E2 x) -> Rbar_lub E1 = Rbar_lub E2.
Lemma Rbar_glb_rw (E1 E2 : Rbar -> Prop) :
  (forall x, E1 x <-> E2 x) -> Rbar_glb E1 = Rbar_glb E2.

Definition Empty (E : R -> Prop) :=
  Lub_Rbar (fun x => x = 0 \/ E x) = Glb_Rbar (fun x => x = 0 \/ E x)
  /\ Lub_Rbar (fun x => x = 1 \/ E x) = Glb_Rbar (fun x => x = 1 \/ E x).

Lemma Empty_correct_1 (E : R -> Prop) :
  Empty E -> forall x, ~ E x.

Lemma Empty_correct_2 (E : R -> Prop) :
  (forall x, ~ E x) -> Empty E.

Lemma Empty_dec (E : R -> Prop) :
  {~Empty E}+{Empty E}.
Lemma not_Empty_dec (E : R -> Prop) : (Decidable.decidable (exists x, E x)) ->

Lemma uniqueness_dec P : (exists ! x : R, P x) -> {x : R | P x}. *)
(* Hierarchy:
Require Import Reals mathcomp.ssreflect.ssreflect.
Require Import Rcomplements Rbar Markov Iter Lub.

Open Scope R_scope.

Class Filter {T : Type} (F : (T -> Prop) -> Prop) := {
  filter_true : F (fun _ => True) ;
  filter_and : forall P Q : T -> Prop, F P -> F Q -> F (fun x => P x /\ Q x) ;
  filter_imp : forall P Q : T -> Prop, (forall x, P x -> Q x) -> F P -> F Q
}.

Global Hint Mode Filter + + : typeclass_instances.

Class ProperFilter' {T : Type} (F : (T -> Prop) -> Prop) := {
  filter_not_empty : not (F (fun _ => False)) ;
  filter_filter' :> Filter F
}.

Class ProperFilter {T : Type} (F : (T -> Prop) -> Prop) := {
  filter_ex : forall P, F P -> exists x, P x ;
  filter_filter :> Filter F
}.

Global Instance Proper_StrongProper :
  forall {T : Type} (F : (T -> Prop) -> Prop),
  ProperFilter F -> ProperFilter' F.

Lemma filter_forall :
  forall {T : Type} {F} {FF: @Filter T F} (P : T -> Prop),
  (forall x, P x) -> F P.

Lemma filter_const :
  forall {T : Type} {F} {FF: @ProperFilter T F} (P : Prop),
  F (fun _ => P) -> P.

Definition filter_le {T : Type} (F G : (T -> Prop) -> Prop) :=
  forall P, G P -> F P.

Lemma filter_le_refl :
  forall T F, @filter_le T F F.

Lemma filter_le_trans :
  forall T F G H, @filter_le T F G -> filter_le G H -> filter_le F H.

Definition filtermap {T U : Type} (f : T -> U) (F : (T -> Prop) -> Prop) :=
  fun P => F (fun x => P (f x)).

Global Instance filtermap_filter :
  forall T U (f : T -> U) (F : (T -> Prop) -> Prop),
  Filter F -> Filter (filtermap f F).

Global Instance filtermap_proper_filter' :
  forall T U (f : T -> U) (F : (T -> Prop) -> Prop),
  ProperFilter' F -> ProperFilter' (filtermap f F).

Global Instance filtermap_proper_filter :
  forall T U (f : T -> U) (F : (T -> Prop) -> Prop),
  ProperFilter F -> ProperFilter (filtermap f F).

Definition filtermapi {T U : Type} (f : T -> U -> Prop) (F : (T -> Prop) -> Prop) :=
  fun P : U -> Prop => F (fun x => exists y, f x y /\ P y).

Global Instance filtermapi_filter :
  forall T U (f : T -> U -> Prop) (F : (T -> Prop) -> Prop),
  F (fun x => (exists y, f x y) /\ forall y1 y2, f x y1 -> f x y2 -> y1 = y2) ->
  Filter F -> Filter (filtermapi f F).

Global Instance filtermapi_proper_filter' :
  forall T U (f : T -> U -> Prop) (F : (T -> Prop) -> Prop),
  F (fun x => (exists y, f x y) /\ forall y1 y2, f x y1 -> f x y2 -> y1 = y2) ->
  ProperFilter' F -> ProperFilter' (filtermapi f F).

Global Instance filtermapi_proper_filter :
  forall T U (f : T -> U -> Prop) (F : (T -> Prop) -> Prop),
  F (fun x => (exists y, f x y) /\ forall y1 y2, f x y1 -> f x y2 -> y1 = y2) ->
  ProperFilter F -> ProperFilter (filtermapi f F).

Definition filterlim {T U : Type} (f : T -> U) F G :=
  filter_le (filtermap f F) G.

Lemma filterlim_id :
  forall T (F : (T -> Prop) -> Prop), filterlim (fun x => x) F F.

Lemma filterlim_comp :
  forall T U V (f : T -> U) (g : U -> V) F G H,
  filterlim f F G -> filterlim g G H ->
  filterlim (fun x => g (f x)) F H.

Lemma filterlim_ext_loc :
  forall {T U F G} {FF : Filter F} (f g : T -> U),
  F (fun x => f x = g x) ->
  filterlim f F G ->
  filterlim g F G.

Lemma filterlim_ext :
  forall {T U F G} {FF : Filter F} (f g : T -> U),
  (forall x, f x = g x) ->
  filterlim f F G ->
  filterlim g F G.

Lemma filterlim_filter_le_1 :
  forall {T U F G H} (f : T -> U),
  filter_le G F ->
  filterlim f F H ->
  filterlim f G H.

Lemma filterlim_filter_le_2 :
  forall {T U F G H} (f : T -> U),
  filter_le G H ->
  filterlim f F G ->
  filterlim f F H.

Definition filterlimi {T U : Type} (f : T -> U -> Prop) F G :=
  filter_le (filtermapi f F) G.

Lemma filterlimi_comp :
  forall T U V (f : T -> U) (g : U -> V -> Prop) F G H,
  filterlim f F G -> filterlimi g G H ->
  filterlimi (fun x => g (f x)) F H.

Lemma filterlimi_ext_loc :
  forall {T U F G} {FF : Filter F} (f g : T -> U -> Prop),
  F (fun x => forall y, f x y <-> g x y) ->
  filterlimi f F G ->
  filterlimi g F G.

Lemma filterlimi_ext :
  forall {T U F G} {FF : Filter F} (f g : T -> U -> Prop),
  (forall x y, f x y <-> g x y) ->
  filterlimi f F G ->
  filterlimi g F G.

Lemma filterlimi_filter_le_1 :
  forall {T U F G H} (f : T -> U -> Prop),
  filter_le G F ->
  filterlimi f F H ->
  filterlimi f G H.

Lemma filterlimi_filter_le_2 :
  forall {T U F G H} (f : T -> U -> Prop),
  filter_le G H ->
  filterlimi f F G ->
  filterlimi f F H.

Inductive filter_prod {T U : Type} (F G : _ -> Prop) (P : T * U -> Prop) : Prop :=
  Filter_prod (Q : T -> Prop) (R : U -> Prop) :
    F Q -> G R -> (forall x y, Q x -> R y -> P (x, y)) -> filter_prod F G P.

Global Instance filter_prod_filter :
  forall T U (F : (T -> Prop) -> Prop) (G : (U -> Prop) -> Prop),
  Filter F -> Filter G -> Filter (filter_prod F G).

Global Instance filter_prod_proper' {T1 T2 : Type}
  {F : (T1 -> Prop) -> Prop} {G : (T2 -> Prop) -> Prop}
  {FF : ProperFilter' F} {FG : ProperFilter' G} :
  ProperFilter' (filter_prod F G).

Global Instance filter_prod_proper {T1 T2 : Type}
  {F : (T1 -> Prop) -> Prop} {G : (T2 -> Prop) -> Prop}
  {FF : ProperFilter F} {FG : ProperFilter G} :
  ProperFilter (filter_prod F G).

Lemma filterlim_fst :
  forall {T U F G} {FG : Filter G},
  filterlim (@fst T U) (filter_prod F G) F.

Lemma filterlim_snd :
  forall {T U F G} {FF : Filter F},
  filterlim (@snd T U) (filter_prod F G) G.

Lemma filterlim_pair :
  forall {T U V F G H} {FF : Filter F},
  forall (f : T -> U) (g : T -> V),
  filterlim f F G ->
  filterlim g F H ->
  filterlim (fun x => (f x, g x)) F (filter_prod G H).

Lemma filterlim_comp_2 :
  forall {T U V W F G H I} {FF : Filter F},
  forall (f : T -> U) (g : T -> V) (h : U -> V -> W),
  filterlim f F G ->
  filterlim g F H ->
  filterlim (fun x => h (fst x) (snd x)) (filter_prod G H) I ->
  filterlim (fun x => h (f x) (g x)) F I.

Lemma filterlimi_comp_2 :
  forall {T U V W F G H I} {FF : Filter F},
  forall (f : T -> U) (g : T -> V) (h : U -> V -> W -> Prop),
  filterlim f F G ->
  filterlim g F H ->
  filterlimi (fun x => h (fst x) (snd x)) (filter_prod G H) I ->
  filterlimi (fun x => h (f x) (g x)) F I.

Definition within {T : Type} D (F : (T -> Prop) -> Prop) (P : T -> Prop) :=
  F (fun x => D x -> P x).

Global Instance within_filter :
  forall T D F, Filter F -> Filter (@within T D F).

Lemma filter_le_within :
  forall {T} {F : (T -> Prop) -> Prop} {FF : Filter F} D,
  filter_le (within D F) F.

Lemma filterlim_within_ext :
  forall {T U F G} {FF : Filter F} D (f g : T -> U),
  (forall x, D x -> f x = g x) ->
  filterlim f (within D F) G ->
  filterlim g (within D F) G.

Definition subset_filter {T} (F : (T -> Prop) -> Prop) (dom : T -> Prop) (P : {x|dom x} -> Prop) : Prop :=
  F (fun x => forall H : dom x, P (exist _ x H)).

Global Instance subset_filter_filter :
  forall T F (dom : T -> Prop),
  Filter F ->
  Filter (subset_filter F dom).

Lemma subset_filter_proper' :
  forall {T F} {FF : Filter F} (dom : T -> Prop),
  (forall P, F P -> ~ ~ exists x, dom x /\ P x) ->
  ProperFilter' (subset_filter F dom).

Lemma subset_filter_proper :
  forall {T F} {FF : Filter F} (dom : T -> Prop),
  (forall P, F P -> exists x, dom x /\ P x) ->
  ProperFilter (subset_filter F dom).

Module AbelianGroup.

Record mixin_of (G : Type) := Mixin {
  plus : G -> G -> G ;
  opp : G -> G ;
  zero : G ;
  ax1 : forall x y, plus x y = plus y x ;
  ax2 : forall x y z, plus x (plus y z) = plus (plus x y) z ;
  ax3 : forall x, plus x zero = x ;
  ax4 : forall x, plus x (opp x) = zero
}.

Notation class_of := mixin_of (only parsing).

Section ClassDef.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.
Definition class (cT : type) := let: Pack _ c _ := cT return class_of cT in c.

End ClassDef.

Module Exports.

Coercion sort : type >-> Sortclass.
Notation AbelianGroup := type.

End Exports.

End AbelianGroup.

Export AbelianGroup.Exports.

Section AbelianGroup1.

Context {G : AbelianGroup}.

Definition zero := AbelianGroup.zero _ (AbelianGroup.class G).
Definition plus := AbelianGroup.plus _ (AbelianGroup.class G).
Definition opp := AbelianGroup.opp _ (AbelianGroup.class G).
Definition minus x y := (plus x (opp y)).

Lemma plus_comm :
  forall x y : G,
  plus x y = plus y x.

Lemma plus_assoc :
  forall x y z : G,
  plus x (plus y z) = plus (plus x y) z.

Lemma plus_zero_r :
  forall x : G,
  plus x zero = x.

Lemma plus_opp_r :
  forall x : G,
  plus x (opp x) = zero.

Lemma plus_zero_l :
  forall x : G,
  plus zero x = x.

Lemma plus_opp_l :
  forall x : G,
  plus (opp x) x = zero.

Lemma opp_zero :
  opp zero = zero.

Lemma minus_zero_r :
  forall x : G,
  minus x zero = x.

Lemma minus_eq_zero (x : G) :
  minus x x = zero.

Lemma plus_reg_l :
  forall r x y : G,
  plus r x = plus r y -> x = y.
Lemma plus_reg_r :
  forall r x y : G,
  plus x r = plus y r -> x = y.

Lemma opp_opp :
  forall x : G,
  opp (opp x) = x.

Lemma opp_plus :
  forall x y : G,
  opp (plus x y) = plus (opp x) (opp y).
Lemma opp_minus (x y : G) :
  opp (minus x y) = minus y x.

Lemma minus_trans (r x y : G) :
  minus x y = plus (minus x r) (minus r y).

End AbelianGroup1.

Section Sums.

Context {G : AbelianGroup}.

Definition sum_n_m (a : nat -> G) n m :=
  iter_nat plus zero a n m.
Definition sum_n (a : nat -> G) n :=
  sum_n_m a O n.

Lemma sum_n_m_Chasles (a : nat -> G) (n m k : nat) :
  (n <= S m)%nat -> (m <= k)%nat
    -> sum_n_m a n k = plus (sum_n_m a n m) (sum_n_m a (S m) k).

Lemma sum_n_n (a : nat -> G) (n : nat) :
  sum_n_m a n n = a n.
Lemma sum_O (a : nat -> G) : sum_n a 0 = a O.
Lemma sum_n_Sm (a : nat -> G) (n m : nat) :
  (n <= S m)%nat -> sum_n_m a n (S m) = plus (sum_n_m a n m) (a (S m)).
Lemma sum_Sn_m (a : nat -> G) (n m : nat) :
  (n <= m)%nat -> sum_n_m a n m = plus (a n) (sum_n_m a (S n) m).
Lemma sum_n_m_S (a : nat -> G) (n m : nat) :
  sum_n_m (fun n => a (S n)) n m = sum_n_m a (S n) (S m).

Lemma sum_Sn (a : nat -> G) (n : nat) :
  sum_n a (S n) = plus (sum_n a n) (a (S n)).

Lemma sum_n_m_zero (a : nat -> G) (n m : nat) :
  (m < n)%nat -> sum_n_m a n m = zero.
Lemma sum_n_m_const_zero (n m : nat) :
  sum_n_m (fun _ => zero) n m = zero.

Lemma sum_n_m_ext_loc (a b : nat -> G) (n m : nat) :
  (forall k, (n <= k <= m)%nat -> a k = b k) ->
  sum_n_m a n m = sum_n_m b n m.
Lemma sum_n_m_ext (a b : nat -> G) n m :
  (forall n, a n = b n) ->
  sum_n_m a n m = sum_n_m b n m.

Lemma sum_n_ext_loc :
  forall (a b : nat -> G) N,
  (forall n, (n <= N)%nat -> a n = b n) ->
  sum_n a N = sum_n b N.
Lemma sum_n_ext :
  forall (a b : nat -> G) N,
  (forall n, a n = b n) ->
  sum_n a N = sum_n b N.

Lemma sum_n_m_plus :
  forall (u v : nat -> G) (n m : nat),
  sum_n_m (fun k => plus (u k) (v k)) n m = plus (sum_n_m u n m) (sum_n_m v n m).

Lemma sum_n_plus :
  forall (u v : nat -> G) (n : nat),
  sum_n (fun k => plus (u k) (v k)) n = plus (sum_n u n) (sum_n v n).

Lemma sum_n_switch :
  forall (u : nat -> nat -> G) (m n : nat),
  sum_n (fun i => sum_n (u i) n) m = sum_n (fun j => sum_n (fun i => u i j) m) n.

Lemma sum_n_m_sum_n (a:nat -> G) (n m : nat) :
  (n <= m)%nat -> sum_n_m a (S n) m = minus (sum_n a m) (sum_n a n).

End Sums.

Module Ring.

Record mixin_of (K : AbelianGroup) := Mixin {
  mult : K -> K -> K ;
  one : K ;
  ax1 : forall x y z, mult x (mult y z) = mult (mult x y) z ;
  ax2 : forall x, mult x one = x ;
  ax3 : forall x, mult one x = x ;
  ax4 : forall x y z, mult (plus x y) z = plus (mult x z) (mult y z) ;
  ax5 : forall x y z, mult x (plus y z) = plus (mult x y) (mult x z)
}.

Section ClassDef.

Record class_of (K : Type) := Class {
  base : AbelianGroup.class_of K ;
  mixin : mixin_of (AbelianGroup.Pack _ base K)
}.
Local Coercion base : class_of >-> AbelianGroup.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition AbelianGroup := AbelianGroup.Pack cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> AbelianGroup.class_of.
Coercion mixin : class_of >-> mixin_of.
Coercion sort : type >-> Sortclass.
Coercion AbelianGroup : type >-> AbelianGroup.type.
Canonical AbelianGroup.
Notation Ring := type.

End Exports.

End Ring.

Export Ring.Exports.

Section Ring1.

Context {K : Ring}.

Definition mult : K -> K -> K := Ring.mult _ (Ring.class K).
Definition one : K := Ring.one _ (Ring.class K).

Lemma mult_assoc :
  forall x y z : K,
  mult x (mult y z) = mult (mult x y) z.

Lemma mult_one_r :
  forall x : K,
  mult x one = x.

Lemma mult_one_l :
  forall x : K,
  mult one x = x.

Lemma mult_distr_r :
  forall x y z : K,
  mult (plus x y) z = plus (mult x z) (mult y z).

Lemma mult_distr_l :
  forall x y z : K,
  mult x (plus y z) = plus (mult x y) (mult x z).

Lemma mult_zero_r :
  forall x : K,
  mult x zero = zero.

Lemma mult_zero_l :
  forall x : K,
  mult zero x = zero.

Lemma opp_mult_r :
  forall x y : K,
  opp (mult x y) = mult x (opp y).

Lemma opp_mult_l :
  forall x y : K,
  opp (mult x y) = mult (opp x) y.

Lemma opp_mult_m1 :
  forall x : K,
  opp x = mult (opp one) x.

Lemma sum_n_m_mult_r :
 forall (a : K) (u : nat -> K) (n m : nat),
  sum_n_m (fun k => mult (u k) a) n m = mult (sum_n_m u n m) a.

Lemma sum_n_m_mult_l :
 forall (a : K) (u : nat -> K) (n m : nat),
  sum_n_m (fun k => mult a (u k)) n m = mult a (sum_n_m u n m).

Lemma sum_n_mult_r :
 forall (a : K) (u : nat -> K) (n : nat),
  sum_n (fun k => mult (u k) a) n = mult (sum_n u n) a.

Lemma sum_n_mult_l :
 forall (a : K) (u : nat -> K) (n : nat),
  sum_n (fun k => mult a (u k)) n = mult a (sum_n u n).

Fixpoint pow_n (x : K) (N : nat) {struct N} : K :=
  match N with
   | 0%nat => one
   | S i => mult x (pow_n x i)
  end.

Lemma pow_n_plus :
  forall (x : K) (n m : nat), pow_n x (n+m) = mult (pow_n x n) (pow_n x m).

Lemma pow_n_comm_1 :
  forall (x : K) (n : nat), mult (pow_n x n) x = mult x (pow_n x n).

Lemma pow_n_comm :
  forall (x : K) n m, mult (pow_n x n) (pow_n x m) = mult (pow_n x m) (pow_n x n).

End Ring1.

Module AbsRing.

Record mixin_of (K : Ring) := Mixin {
  abs : K -> R ;
  ax1 : abs zero = 0 ;
  ax2 : abs (opp one) = 1 ;
  ax3 : forall x y : K, abs (plus x y) <= abs x + abs y ;
  ax4 : forall x y : K, abs (mult x y) <= abs x * abs y ;
  ax5 : forall x : K, abs x = 0 -> x = zero
}.

Section ClassDef.

Record class_of (K : Type) := Class {
  base : Ring.class_of K ;
  mixin : mixin_of (Ring.Pack _ base K)
}.
Local Coercion base : class_of >-> Ring.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition AbelianGroup := AbelianGroup.Pack cT xclass xT.
Definition Ring := Ring.Pack cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> Ring.class_of.
Coercion mixin : class_of >-> mixin_of.
Coercion sort : type >-> Sortclass.
Coercion AbelianGroup : type >-> AbelianGroup.type.
Canonical AbelianGroup.
Coercion Ring : type >-> Ring.type.
Canonical Ring.
Notation AbsRing := type.

End Exports.

End AbsRing.

Export AbsRing.Exports.

Section AbsRing1.

Context {K : AbsRing}.

Definition abs : K -> R := AbsRing.abs _ (AbsRing.class K).

Lemma abs_zero :
  abs zero = 0.

Lemma abs_opp_one :
  abs (opp one) = 1.

Lemma abs_triangle :
  forall x y : K,
  abs (plus x y) <= abs x + abs y.

Lemma abs_mult :
  forall x y : K,
  abs (mult x y) <= abs x * abs y.

Lemma abs_eq_zero :
  forall x : K,
  abs x = 0 -> x = zero.

Lemma abs_opp :
  forall x, abs (opp x) = abs x.

Lemma abs_minus :
  forall x y : K, abs (minus x y) = abs (minus y x).

Lemma abs_one :
  abs one = 1.

Lemma abs_ge_0 :
  forall x, 0 <= abs x.

Lemma abs_pow_n :
  forall (x : K) n,
  abs (pow_n x n) <= (abs x)^n.

End AbsRing1.

Module UniformSpace.

Record mixin_of (M : Type) := Mixin {
  ball : M -> R -> M -> Prop ;
  ax1 : forall x (e : posreal), ball x e x ;
  ax2 : forall x y e, ball x e y -> ball y e x ;
  ax3 : forall x y z e1 e2, ball x e1 y -> ball y e2 z -> ball x (e1 + e2) z
}.

Notation class_of := mixin_of (only parsing).

Section ClassDef.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.
Definition class (cT : type) := let: Pack _ c _ := cT return class_of cT in c.

End ClassDef.

Module Exports.

Coercion sort : type >-> Sortclass.
Notation UniformSpace := type.

End Exports.

End UniformSpace.

Export UniformSpace.Exports.

Section UniformSpace1.

Context {M : UniformSpace}.

Definition ball := UniformSpace.ball _ (UniformSpace.class M).

Lemma ball_center :
  forall (x : M) (e : posreal),
  ball x e x.

Lemma ball_sym :
  forall (x y : M) (e : R),
  ball x e y -> ball y e x.

Lemma ball_triangle :
  forall (x y z : M) (e1 e2 : R),
  ball x e1 y -> ball y e2 z -> ball x (e1 + e2) z.

Lemma ball_le :
  forall (x : M) (e1 e2 : R), e1 <= e2 ->
  forall (y : M), ball x e1 y -> ball x e2 y.

Definition close (x y : M) : Prop := forall eps : posreal, ball x eps y.

Lemma close_refl (x : M) : close x x.

Lemma close_sym (x y : M) : close x y -> close y x.

Lemma close_trans (x y z : M) : close x y -> close y z -> close x z.

End UniformSpace1.

Section AbsRing_UniformSpace.

Variable K : AbsRing.

Definition AbsRing_ball (x : K) (eps : R) (y : K) := abs (minus y x) < eps.

Lemma AbsRing_ball_center :
  forall (x : K) (e : posreal),
  AbsRing_ball x e x.

Lemma AbsRing_ball_sym :
  forall (x y : K) (e : R),
  AbsRing_ball x e y -> AbsRing_ball y e x.

Lemma AbsRing_ball_triangle :
  forall (x y z : K) (e1 e2 : R),
  AbsRing_ball x e1 y -> AbsRing_ball y e2 z ->
  AbsRing_ball x (e1 + e2) z.

Definition AbsRing_UniformSpace_mixin :=
  UniformSpace.Mixin _ _ AbsRing_ball_center AbsRing_ball_sym AbsRing_ball_triangle.

Canonical AbsRing_UniformSpace :=
  UniformSpace.Pack K AbsRing_UniformSpace_mixin K.

End AbsRing_UniformSpace.

Section fct_UniformSpace.

Variable (T : Type) (U : UniformSpace).

Definition fct_ball (x : T -> U) (eps : R) (y : T -> U) :=
  forall t : T, ball (x t) eps (y t).

Lemma fct_ball_center :
  forall (x : T -> U) (e : posreal),
  fct_ball x e x.

Lemma fct_ball_sym :
  forall (x y : T -> U) (e : R),
  fct_ball x e y -> fct_ball y e x.

Lemma fct_ball_triangle :
  forall (x y z : T -> U) (e1 e2 : R),
  fct_ball x e1 y -> fct_ball y e2 z -> fct_ball x (e1 + e2) z.

Definition fct_UniformSpace_mixin :=
  UniformSpace.Mixin _ _ fct_ball_center fct_ball_sym fct_ball_triangle.

Canonical fct_UniformSpace :=
  UniformSpace.Pack (T -> U) fct_UniformSpace_mixin (T -> U).

End fct_UniformSpace.

Definition locally_dist {T : Type} (d : T -> R) (P : T -> Prop) :=
  exists delta : posreal, forall y, d y < delta -> P y.

Global Instance locally_dist_filter :
  forall T (d : T -> R), Filter (locally_dist d).

Section Locally.

Context {T : UniformSpace}.

Definition locally (x : T) (P : T -> Prop) :=
  exists eps : posreal, forall y, ball x eps y -> P y.

Global Instance locally_filter :
  forall x : T, ProperFilter (locally x).

Lemma locally_locally :
  forall (x : T) (P : T -> Prop),
  locally x P -> locally x (fun y => locally y P).

Lemma locally_singleton :
  forall (x : T) (P : T -> Prop),
  locally x P -> P x.

Lemma locally_ball :
  forall (x : T) (eps : posreal), locally x (ball x eps).

Lemma locally_not' :
  forall (x : T) (P : T -> Prop),
  not (forall eps : posreal, not (forall y, ball x eps y -> not (P y))) ->
  {d : posreal | forall y, ball x d y -> not (P y)}.

Lemma locally_not :
  forall (x : T) (P : T -> Prop),
  not (forall eps : posreal, not (forall y, ball x eps y -> not (P y))) ->
  locally x (fun y => not (P y)).

Lemma locally_ex_not :
  forall (x : T) (P : T -> Prop),
  locally x (fun y => not (P y)) ->
  {d : posreal | forall y, ball x d y -> not (P y)}.

Lemma locally_ex_dec :
  forall (x : T) (P : T -> Prop),
  (forall x, P x \/ ~P x) ->
  locally x P ->
  {d : posreal | forall y, ball x d y -> P y}.

Definition is_filter_lim (F : (T -> Prop) -> Prop) (x : T) :=
  forall P, locally x P -> F P.

Lemma is_filter_lim_filter_le :
  forall {F G} (x : T),
  filter_le G F ->
  is_filter_lim F x -> is_filter_lim G x.

Lemma is_filter_lim_close {F} {FF : ProperFilter F} (x y : T) :
  is_filter_lim F x -> is_filter_lim F y -> close x y.

Lemma is_filter_lim_locally_close (x y : T) :
  is_filter_lim (locally x) y -> close x y.

End Locally.

Lemma filterlim_const :
  forall {T} {U : UniformSpace} {F : (T -> Prop) -> Prop} {FF : Filter F},
  forall a : U, filterlim (fun _ => a) F (locally a).

Section Locally_fct.

Context {T : Type} {U : UniformSpace}.

Lemma filterlim_locally :
  forall {F} {FF : Filter F} (f : T -> U) y,
  filterlim f F (locally y) <->
  forall eps : posreal, F (fun x => ball y eps (f x)).

Lemma filterlimi_locally :
  forall {F} {FF : Filter F} (f : T -> U -> Prop) y,
  filterlimi f F (locally y) <->
  forall eps : posreal, F (fun x => exists z, f x z /\ ball y eps z).

Lemma filterlim_locally_close :
  forall {F} {FF: ProperFilter F} (f : T -> U) l l',
  filterlim f F (locally l) ->  filterlim f F (locally l') ->
  close l l'.

Lemma filterlimi_locally_close :
  forall {F} {FF: ProperFilter F} (f : T -> U -> Prop) l l',
  F (fun x => forall y1 y2, f x y1 -> f x y2 -> y1 = y2) ->
  filterlimi f F (locally l) ->  filterlimi f F (locally l') ->
  close l l'.

End Locally_fct.

Lemma is_filter_lim_filtermap {T: UniformSpace} {U : UniformSpace} :
forall F x (f : T -> U),
  filterlim f (locally x) (locally (f x))
  -> is_filter_lim F x
  -> is_filter_lim (filtermap f F) (f x).

Definition locally' {T : UniformSpace} (x : T) :=
  within (fun y => y <> x) (locally x).

Global Instance locally'_filter :
  forall {T : UniformSpace} (x : T), Filter (locally' x).

Section at_point.

Context {T : UniformSpace}.

Definition at_point (a : T) (P : T -> Prop) : Prop := P a.

Global Instance at_point_filter (a : T) :
  ProperFilter (at_point a).

End at_point.

Section Open.

Context {T : UniformSpace}.

Definition open (D : T -> Prop) :=
  forall x, D x -> locally x D.

Lemma locally_open :
  forall (D E : T -> Prop),
  open D ->
  (forall x : T, D x -> E x) ->
  forall x : T, D x ->
  locally x E.

Lemma open_ext :
  forall D E : T -> Prop,
  (forall x, D x <-> E x) ->
  open D -> open E.

Lemma open_and :
  forall D E : T -> Prop,
  open D -> open E ->
  open (fun x => D x /\ E x).

Lemma open_or :
  forall D E : T -> Prop,
  open D -> open E ->
  open (fun x => D x \/ E x).

Lemma open_true :
  open (fun x : T => True).

Lemma open_false :
  open (fun x : T => False).

End Open.

Lemma open_comp :
  forall {T U : UniformSpace} (f : T -> U) (D : U -> Prop),
  (forall x, D (f x) -> filterlim f (locally x) (locally (f x))) ->
  open D -> open (fun x : T => D (f x)).

Section Closed.

Context {T : UniformSpace}.

Definition closed (D : T -> Prop) :=
  forall x, not (locally x (fun x : T => not (D x))) -> D x.

Lemma open_not :
  forall D : T -> Prop,
  closed D -> open (fun x => not (D x)).

Lemma closed_not :
  forall D : T -> Prop,
  open D -> closed (fun x => not (D x)).

Lemma closed_ext :
  forall D E : T -> Prop,
  (forall x, D x <-> E x) ->
  closed D -> closed E.

Lemma closed_and :
  forall D E : T -> Prop,
  closed D -> closed E ->
  closed (fun x => D x /\ E x).

Lemma closed_true :
  closed (fun x : T => True).

Lemma closed_false :
  closed (fun x : T => False).

End Closed.

Lemma closed_comp :
  forall {T U : UniformSpace} (f : T -> U) (D : U -> Prop),
  (forall x, filterlim f (locally x) (locally (f x))) ->
  closed D -> closed (fun x : T => D (f x)).

Lemma closed_filterlim_loc :
  forall {T} {U : UniformSpace} {F} {FF : ProperFilter' F} (f : T -> U) (D : U -> Prop),
  forall y, filterlim f F (locally y) ->
  F (fun x => D (f x)) ->
  closed D -> D y.

Lemma closed_filterlim :
  forall {T} {U : UniformSpace} {F} {FF : ProperFilter' F} (f : T -> U) (D : U -> Prop),
  forall y, filterlim f F (locally y) ->
  (forall x, D (f x)) ->
  closed D -> D y.

Definition cauchy {T : UniformSpace} (F : (T -> Prop) -> Prop) :=
  forall eps : posreal, exists x, F (ball x eps).

Module CompleteSpace.

Record mixin_of (T : UniformSpace) := Mixin {
  lim : ((T -> Prop) -> Prop) -> T ;
  ax1 : forall F, ProperFilter F -> cauchy F -> forall eps : posreal, F (ball (lim F) eps) ;
  ax2 : forall F1 F2, filter_le F1 F2 -> filter_le F2 F1 -> close (lim F1) (lim F2)
}.

Section ClassDef.

Record class_of (T : Type) := Class {
  base : UniformSpace.class_of T ;
  mixin : mixin_of (UniformSpace.Pack _ base T)
}.
Local Coercion base : class_of >-> UniformSpace.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition UniformSpace := UniformSpace.Pack cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> UniformSpace.class_of.
Coercion mixin : class_of >-> mixin_of.
Coercion sort : type >-> Sortclass.
Coercion UniformSpace : type >-> UniformSpace.type.
Canonical UniformSpace.
Notation CompleteSpace := type.

End Exports.

End CompleteSpace.

Export CompleteSpace.Exports.

Section CompleteSpace1.

Context {T : CompleteSpace}.

Definition lim : ((T -> Prop) -> Prop) -> T := CompleteSpace.lim _ (CompleteSpace.class T).

Lemma complete_cauchy :
  forall F : (T -> Prop) -> Prop,
  ProperFilter F -> cauchy F ->
  forall eps : posreal,
  F (ball (lim F) eps).

Lemma close_lim :
  forall F1 F2 : (T -> Prop) -> Prop,
  filter_le F1 F2 -> filter_le F2 F1 ->
  close (lim F1) (lim F2).

Definition iota (P : T -> Prop) := lim (fun A => (forall x, P x -> A x)).

Lemma iota_correct_weak :
  forall P : T -> Prop,
  (forall x y, P x -> P y -> close x y) ->
  forall x, P x -> close (iota P) x.

Lemma close_iota :
  forall P Q : T -> Prop,
  (forall x, P x <-> Q x) ->
  close (iota P) (iota Q).

End CompleteSpace1.

Lemma cauchy_distance :
  forall {T : UniformSpace} {F} {FF : ProperFilter F},
  (forall eps : posreal, exists x, F (ball x eps)) <->
  (forall eps : posreal, exists P, F P /\ forall u v : T, P u -> P v -> ball u eps v).

Section fct_CompleteSpace.

Context {T : Type} {U : CompleteSpace}.

Lemma filterlim_locally_cauchy :
  forall {F} {FF : ProperFilter F} (f : T -> U),
  (forall eps : posreal, exists P, F P /\ forall u v : T, P u -> P v -> ball (f u) eps (f v)) <->
  exists y, filterlim f F (locally y).

Lemma filterlimi_locally_cauchy :
  forall {F} {FF : ProperFilter F} (f : T -> U -> Prop),
  F (fun x => (exists y, f x y) /\
    (forall y1 y2, f x y1 -> f x y2 -> y1 = y2)) ->
  ((forall eps : posreal, exists P, F P /\
   forall u v : T, P u -> P v -> forall u' v': U, f u u' -> f v v' -> ball u' eps v') <->
  exists y, filterlimi f F (locally y)).

Definition lim_fct (F : ((T -> U) -> Prop) -> Prop) (t : T) :=
  lim (fun P => F (fun g => P (g t))).

Lemma complete_cauchy_fct :
  forall (F : ((T -> U) -> Prop) -> Prop),
  ProperFilter F ->
  (forall eps : posreal, exists f : T -> U, F (ball f eps)) ->
  forall eps : posreal, F (ball (lim_fct F) eps).

Lemma close_lim_fct :
  forall F1 F2 : ((T -> U) -> Prop) -> Prop,
  filter_le F1 F2 -> filter_le F2 F1 ->
  close (lim_fct F1) (lim_fct F2).

Definition fct_CompleteSpace_mixin :=
  CompleteSpace.Mixin _ lim_fct complete_cauchy_fct close_lim_fct.

Canonical fct_CompleteSpace :=
  CompleteSpace.Pack (T -> U) (CompleteSpace.Class _ _ fct_CompleteSpace_mixin) (T -> U).

End fct_CompleteSpace.

Section Filterlim_switch.

Context {T1 T2 : Type}.

Lemma filterlim_switch_1 {U : UniformSpace}
  F1 (FF1 : ProperFilter F1) F2 (FF2 : Filter F2) (f : T1 -> T2 -> U) g h (l : U) :
  filterlim f F1 (locally g) ->
  (forall x, filterlim (f x) F2 (locally (h x))) ->
  filterlim h F1 (locally l) -> filterlim g F2 (locally l).

Lemma filterlim_switch_2 {U : CompleteSpace}
  F1 (FF1 : ProperFilter F1) F2 (FF2 : ProperFilter F2) (f : T1 -> T2 -> U) g h :
  filterlim f F1 (locally g) ->
  (forall x, filterlim (f x) F2 (locally (h x))) ->
  exists l : U, filterlim h F1 (locally l).

Lemma filterlim_switch {U : CompleteSpace}
  F1 (FF1 : ProperFilter F1) F2 (FF2 : ProperFilter F2) (f : T1 -> T2 -> U) g h :
  filterlim f F1 (locally g) ->
  (forall x, filterlim (f x) F2 (locally (h x))) ->
  exists l : U, filterlim h F1 (locally l) /\ filterlim g F2 (locally l).

End Filterlim_switch.

Lemma filterlim_switch_dom {T1 T2 : Type} {U : CompleteSpace}
  F1 (FF1 : ProperFilter F1) F2 (FF2 : Filter F2)
  (dom : T2 -> Prop) (HF2 : forall P, F2 P -> exists x, dom x /\ P x)
  (f : T1 -> T2 -> U) g h :
  filterlim (fun x (y : {z : T2 | dom z}) => f x (proj1_sig y)) F1 (locally (T := fct_UniformSpace _ _) (fun y : {z : T2 | dom z} => g (proj1_sig y))) ->
  (forall x, filterlim (f x) (within dom F2) (locally (h x))) ->
  exists l : U, filterlim h F1 (locally l) /\ filterlim g (within dom F2) (locally l).

Module ModuleSpace.

Record mixin_of (K : Ring) (V : AbelianGroup) := Mixin {
  scal : K -> V -> V ;
  ax1 : forall x y u, scal x (scal y u) = scal (mult x y) u ;
  ax2 : forall u, scal one u = u ;
  ax3 : forall x u v, scal x (plus u v) = plus (scal x u) (scal x v) ;
  ax4 : forall x y u, scal (plus x y) u = plus (scal x u) (scal y u)
}.

Section ClassDef.

Variable K : Ring.

Record class_of (V : Type) := Class {
  base : AbelianGroup.class_of V ;
  mixin : mixin_of K (AbelianGroup.Pack _ base V)
}.
Local Coercion base : class_of >-> AbelianGroup.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition AbelianGroup := AbelianGroup.Pack cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> AbelianGroup.class_of.
Coercion mixin : class_of >-> mixin_of.
Coercion sort : type >-> Sortclass.
Coercion AbelianGroup : type >-> AbelianGroup.type.
Canonical AbelianGroup.
Notation ModuleSpace := type.

End Exports.

End ModuleSpace.

Export ModuleSpace.Exports.

Section ModuleSpace1.

Context {K : Ring} {V : ModuleSpace K}.

Definition scal : K -> V -> V := ModuleSpace.scal _ _ (ModuleSpace.class K V).

Lemma scal_assoc :
  forall (x y : K) (u : V),
  scal x (scal y u) = scal (mult x y) u.

Lemma scal_one :
  forall (u : V), scal one u = u.

Lemma scal_distr_l :
  forall (x : K) (u v : V),
  scal x (plus u v) = plus (scal x u) (scal x v).

Lemma scal_distr_r :
  forall (x y : K) (u : V),
  scal (plus x y) u = plus (scal x u) (scal y u).

Lemma scal_zero_r :
  forall x : K,
  scal x zero = zero.

Lemma scal_zero_l :
  forall u : V,
  scal zero u = zero.

Lemma scal_opp_l :
  forall (x : K) (u : V),
  scal (opp x) u = opp (scal x u).

Lemma scal_opp_r :
  forall (x : K) (u : V),
  scal x (opp u) = opp (scal x u).

Lemma scal_opp_one :
  forall u : V,
  scal (opp one) u = opp u.

Lemma scal_minus_distr_l (x : K) (u v : V) :
   scal x (minus u v) = minus (scal x u) (scal x v).
Lemma scal_minus_distr_r (x y : K) (u : V) :
   scal (minus x y) u = minus (scal x u) (scal y u).

Lemma sum_n_m_scal_l :
  forall (a : K) (u : nat -> V) (n m : nat),
  sum_n_m (fun k => scal a (u k)) n m = scal a (sum_n_m u n m).

Lemma sum_n_scal_l :
  forall (a : K) (u : nat -> V) (n : nat),
  sum_n (fun k => scal a (u k)) n = scal a (sum_n u n).

End ModuleSpace1.

Section Ring_ModuleSpace.

Variable (K : Ring).

Definition Ring_ModuleSpace_mixin :=
  ModuleSpace.Mixin K _ _ mult_assoc mult_one_l mult_distr_l mult_distr_r.

Canonical Ring_ModuleSpace :=
  ModuleSpace.Pack K K (ModuleSpace.Class _ _ _ Ring_ModuleSpace_mixin) K.

End Ring_ModuleSpace.

Section AbsRing_ModuleSpace.

Variable (K : AbsRing).

Definition AbsRing_ModuleSpace_mixin :=
  ModuleSpace.Mixin K _ _ mult_assoc mult_one_l mult_distr_l mult_distr_r.

Canonical AbsRing_ModuleSpace :=
  ModuleSpace.Pack K K (ModuleSpace.Class _ _ _ AbsRing_ModuleSpace_mixin) K.

End AbsRing_ModuleSpace.

Module NormedModuleAux.

Section ClassDef.

Variable K : AbsRing.

Record class_of (T : Type) := Class {
  base : ModuleSpace.class_of K T ;
  mixin : UniformSpace.mixin_of T
}.
Local Coercion base : class_of >-> ModuleSpace.class_of.
Local Coercion mixin : class_of >-> UniformSpace.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition AbelianGroup := AbelianGroup.Pack cT xclass xT.
Definition ModuleSpace := ModuleSpace.Pack _ cT xclass xT.
Definition UniformSpace := UniformSpace.Pack cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> ModuleSpace.class_of.
Coercion mixin : class_of >-> UniformSpace.class_of.
Coercion sort : type >-> Sortclass.
Coercion AbelianGroup : type >-> AbelianGroup.type.
Canonical AbelianGroup.
Coercion ModuleSpace : type >-> ModuleSpace.type.
Canonical ModuleSpace.
Coercion UniformSpace : type >-> UniformSpace.type.
Canonical UniformSpace.
Notation NormedModuleAux := type.

End Exports.

End NormedModuleAux.

Export NormedModuleAux.Exports.

Module NormedModule.

Record mixin_of (K : AbsRing) (V : NormedModuleAux K) := Mixin {
  norm : V -> R ;
  norm_factor : R ;
  ax1 : forall (x y : V), norm (plus x y) <= norm x + norm y ;
  ax2 : forall (l : K) (x : V), norm (scal l x) <= abs l * norm x ;
  ax3 : forall (x y : V) (eps : R), norm (minus y x) < eps -> ball x eps y ;
  ax4 : forall (x y : V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps ;
  ax5 : forall x : V, norm x = 0 -> x = zero
}.

Section ClassDef.

Variable K : AbsRing.

Record class_of (T : Type) := Class {
  base : NormedModuleAux.class_of K T ;
  mixin : mixin_of K (NormedModuleAux.Pack K T base T)
}.
Local Coercion base : class_of >-> NormedModuleAux.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition AbelianGroup := AbelianGroup.Pack cT xclass xT.
Definition ModuleSpace := ModuleSpace.Pack _ cT xclass xT.
Definition UniformSpace := UniformSpace.Pack cT xclass xT.
Definition NormedModuleAux := NormedModuleAux.Pack _ cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> NormedModuleAux.class_of.
Coercion mixin : class_of >-> mixin_of.
Coercion sort : type >-> Sortclass.
Coercion AbelianGroup : type >-> AbelianGroup.type.
Canonical AbelianGroup.
Coercion ModuleSpace : type >-> ModuleSpace.type.
Canonical ModuleSpace.
Coercion UniformSpace : type >-> UniformSpace.type.
Canonical UniformSpace.
Coercion NormedModuleAux : type >-> NormedModuleAux.type.
Canonical NormedModuleAux.
Notation NormedModule := type.

End Exports.

End NormedModule.

Export NormedModule.Exports.

Section NormedModule1.

Context {K : AbsRing} {V : NormedModule K}.

Definition norm : V -> R := NormedModule.norm K _ (NormedModule.class K V).

Definition norm_factor : R := NormedModule.norm_factor K _ (NormedModule.class K V).

Lemma norm_triangle :
  forall x y : V,
  norm (plus x y) <= norm x + norm y.

Lemma norm_scal :
  forall (l : K) (x : V),
  norm (scal l x) <= abs l * norm x.

Lemma norm_compat1 :
  forall (x y : V) (eps : R),
  norm (minus y x) < eps -> ball x eps y.

Lemma norm_compat2 :
  forall (x y : V) (eps : posreal), ball x eps y -> norm (minus y x) < norm_factor * eps.

Lemma norm_eq_zero :
  forall x : V, norm x = 0 -> x = zero.

Lemma norm_zero :
  norm zero = 0.

Lemma norm_factor_gt_0 :
  0 < norm_factor.

Lemma norm_opp :
  forall x : V,
  norm (opp x) = norm x.

Lemma norm_ge_0 :
  forall x : V,
  0 <= norm x.

Lemma norm_triangle_inv :
  forall x y : V,
  Rabs (norm x - norm y) <= norm (minus x y).

Lemma eq_close :
  forall x y : V,
  close x y -> x = y.

Definition ball_norm (x : V) (eps : R) (y : V) := norm (minus y x) < eps.

Definition locally_norm (x : V) (P : V -> Prop) :=
  exists eps : posreal, forall y, ball_norm x eps y -> P y.

Lemma locally_le_locally_norm :
  forall x, filter_le (locally x) (locally_norm x).

Lemma locally_norm_le_locally :
  forall x, filter_le (locally_norm x) (locally x).

Lemma locally_norm_ball_norm :
  forall (x : V) (eps : posreal),
  locally_norm x (ball_norm x eps).

Lemma locally_norm_ball :
  forall (x : V) (eps : posreal),
  locally_norm x (ball x eps).

Lemma locally_ball_norm :
  forall (x : V) (eps : posreal),
  locally x (ball_norm x eps).

Lemma ball_norm_triangle (x y z : V) (e1 e2 : R) :
  ball_norm x e1 y -> ball_norm y e2 z -> ball_norm x (e1 + e2) z.

Lemma ball_norm_center (x : V) (e : posreal) :
  ball_norm x e x.

Lemma ball_norm_dec : forall (x y : V) (eps : posreal),
  {ball_norm x eps y} + {~ ball_norm x eps y}.

Lemma ball_norm_sym :
  forall (x y : V) (eps : posreal), ball_norm x eps y -> ball_norm y eps x.

Lemma ball_norm_le :
  forall (x : V) (e1 e2 : posreal), e1 <= e2 ->
  forall y, ball_norm x e1 y -> ball_norm x e2 y.

Lemma ball_norm_eq :
  forall x y : V,
  (forall eps : posreal, ball_norm x eps y) -> x = y.

Lemma is_filter_lim_unique :
  forall {F} {FF : ProperFilter' F} (x y : V),
  is_filter_lim F x -> is_filter_lim F y -> x = y.

Lemma is_filter_lim_locally_unique :
  forall (x y : V),
  is_filter_lim (locally x) y -> x = y.

End NormedModule1.

Section NormedModule2.

Context {T : Type} {K : AbsRing} {V : NormedModule K}.

Lemma filterlim_locally_unique :
  forall {F} {FF : ProperFilter' F} (f : T -> V) (x y : V),
  filterlim f F (locally x) -> filterlim f F (locally y) ->
  x = y.

Lemma filterlimi_locally_unique :
  forall {F} {FF : ProperFilter' F} (f : T -> V -> Prop) (x y : V),
  F (fun x => forall y1 y2, f x y1 -> f x y2 -> y1 = y2) ->
  filterlimi f F (locally x) -> filterlimi f F (locally y) ->
  x = y.

End NormedModule2.

Section AbsRing_NormedModule.

Variable (K : AbsRing).

Canonical AbsRing_NormedModuleAux :=
  NormedModuleAux.Pack K K (NormedModuleAux.Class _ _ (ModuleSpace.class _ (AbsRing_ModuleSpace K)) (UniformSpace.class (AbsRing_UniformSpace K))) K.

Lemma AbsRing_norm_compat2 :
  forall (x y : AbsRing_NormedModuleAux) (eps : posreal),
  ball x eps y -> abs (minus y x) < 1 * eps.

Definition AbsRing_NormedModule_mixin :=
  NormedModule.Mixin K _ abs 1 abs_triangle abs_mult (fun x y e H => H) AbsRing_norm_compat2 abs_eq_zero.

Canonical AbsRing_NormedModule :=
  NormedModule.Pack K _ (NormedModule.Class _ _ _ AbsRing_NormedModule_mixin) K.

End AbsRing_NormedModule.

Section NVS_continuity.

Context {K : AbsRing} {V : NormedModule K}.

Lemma filterlim_plus :
  forall x y : V,
  filterlim (fun z : V * V => plus (fst z) (snd z)) (filter_prod (locally x) (locally y)) (locally (plus x y)).

Lemma filterlim_scal (k : K) (x : V) :
  filterlim (fun z => scal (fst z) (snd z)) (filter_prod (locally k) (locally x)) (locally (scal k x)).
Lemma filterlim_scal_r (k : K) (x : V) :
  filterlim (fun z : V => scal k z) (locally x) (locally (scal k x)).
Lemma filterlim_scal_l (k : K) (x : V) :
  filterlim (fun z => scal z x) (locally k) (locally (scal k x)).

Lemma filterlim_opp :
  forall x : V,
  filterlim opp (locally x) (locally (opp x)).

End NVS_continuity.

Lemma filterlim_mult {K : AbsRing} (x y : K) :
  filterlim (fun z => mult (fst z) (snd z)) (filter_prod (locally x) (locally y)) (locally (mult x y)).

Lemma filterlim_locally_ball_norm :
  forall {K : AbsRing} {T} {U : NormedModule K} {F : (T -> Prop) -> Prop} {FF : Filter F} (f : T -> U) (y : U),
  filterlim f F (locally y) <-> forall eps : posreal, F (fun x => ball_norm y eps (f x)).

Module CompleteNormedModule.

Section ClassDef.

Variable K : AbsRing.

Record class_of (T : Type) := Class {
  base : NormedModule.class_of K T ;
  mixin : CompleteSpace.mixin_of (UniformSpace.Pack T base T)
}.
Local Coercion base : class_of >-> NormedModule.class_of.
Definition base2 T (cT : class_of T) : CompleteSpace.class_of T :=
  CompleteSpace.Class _ (base T cT) (mixin T cT).
Local Coercion base2 : class_of >-> CompleteSpace.class_of.

Structure type := Pack { sort; _ : class_of sort ; _ : Type }.
Local Coercion sort : type >-> Sortclass.

Variable cT : type.

Definition class := let: Pack _ c _ := cT return class_of cT in c.

Let xT := let: Pack T _ _ := cT in T.
Notation xclass := (class : class_of xT).

Definition AbelianGroup := AbelianGroup.Pack cT xclass xT.
Definition ModuleSpace := ModuleSpace.Pack _ cT xclass xT.
Definition NormedModuleAux := NormedModuleAux.Pack _ cT xclass xT.
Definition NormedModule := NormedModule.Pack _ cT xclass xT.
Definition UniformSpace := UniformSpace.Pack cT xclass xT.
Definition CompleteSpace := CompleteSpace.Pack cT xclass xT.

End ClassDef.

Module Exports.

Coercion base : class_of >-> NormedModule.class_of.
Coercion mixin : class_of >-> CompleteSpace.mixin_of.
Coercion base2 : class_of >-> CompleteSpace.class_of.
Coercion sort : type >-> Sortclass.
Coercion AbelianGroup : type >-> AbelianGroup.type.
Canonical AbelianGroup.
Coercion ModuleSpace : type >-> ModuleSpace.type.
Canonical ModuleSpace.
Coercion NormedModuleAux : type >-> NormedModuleAux.type.
Canonical NormedModuleAux.
Coercion NormedModule : type >-> NormedModule.type.
Canonical NormedModule.
Coercion UniformSpace : type >-> UniformSpace.type.
Canonical UniformSpace.
Coercion CompleteSpace : type >-> CompleteSpace.type.
Canonical CompleteSpace.
Notation CompleteNormedModule := type.

End Exports.

End CompleteNormedModule.

Export CompleteNormedModule.Exports.

Section CompleteNormedModule1.

Context {K : AbsRing} {V : CompleteNormedModule K}.

Lemma iota_unique :
  forall (P : V -> Prop) (x : V),
  (forall y, P y -> y = x) ->
  P x ->
  iota P = x.

Lemma iota_correct :
  forall P : V -> Prop,
  (exists! x : V, P x) ->
  P (iota P).

Lemma iota_is_filter_lim {F} {FF : ProperFilter' F} (l : V) :
  is_filter_lim F l ->
  iota (is_filter_lim F) = l.

Context {T : Type}.

Lemma iota_filterlim_locally {F} {FF : ProperFilter' F} (f : T -> V) l :
  filterlim f F (locally l) ->
  iota (fun x => filterlim f F (locally x)) = l.

Lemma iota_filterlimi_locally {F} {FF : ProperFilter' F} (f : T -> V -> Prop) l :
  F (fun x => forall y1 y2, f x y1 -> f x y2 -> y1 = y2) ->
  filterlimi f F (locally l) ->
  iota (fun x => filterlimi f F (locally x)) = l.

End CompleteNormedModule1.

Section prod_AbelianGroup.

Context {U V : AbelianGroup}.

Definition prod_plus (x y : U * V) :=
  (plus (fst x) (fst y), plus (snd x) (snd y)).

Definition prod_opp (x : U * V) :=
  (opp (fst x), opp (snd x)).

Definition prod_zero : U * V := (zero, zero).

Lemma prod_plus_comm :
  forall x y : U * V,
  prod_plus x y = prod_plus y x.

Lemma prod_plus_assoc :
  forall x y z : U * V,
  prod_plus x (prod_plus y z) = prod_plus (prod_plus x y) z.

Lemma prod_plus_zero_r :
  forall x : U * V,
  prod_plus x prod_zero = x.

Lemma prod_plus_opp_r :
  forall x : U * V,
  prod_plus x (prod_opp x) = prod_zero.

End prod_AbelianGroup.

Definition prod_AbelianGroup_mixin (U V : AbelianGroup) :=
  AbelianGroup.Mixin (U * V) _ _ _ prod_plus_comm prod_plus_assoc prod_plus_zero_r prod_plus_opp_r.

Canonical prod_AbelianGroup (U V : AbelianGroup) :=
  AbelianGroup.Pack (U * V) (prod_AbelianGroup_mixin U V) (U * V).

Section prod_UniformSpace.

Context {U V : UniformSpace}.

Definition prod_ball (x : U * V) (eps : R) (y : U * V) :=
  ball (fst x) eps (fst y) /\ ball (snd x) eps (snd y).

Lemma prod_ball_center :
  forall (x : U * V) (eps : posreal),
  prod_ball x eps x.

Lemma prod_ball_sym :
  forall (x y : U * V) (eps : R),
  prod_ball x eps y -> prod_ball y eps x.

Lemma prod_ball_triangle :
  forall (x y z : U * V) (e1 e2 : R),
  prod_ball x e1 y -> prod_ball y e2 z ->
  prod_ball x (e1 + e2) z.

End prod_UniformSpace.

Definition prod_UniformSpace_mixin (U V : UniformSpace) :=
  UniformSpace.Mixin (U * V) _ prod_ball_center prod_ball_sym prod_ball_triangle.

Canonical prod_UniformSpace (U V : UniformSpace) :=
  UniformSpace.Pack (U * V) (prod_UniformSpace_mixin U V) (U * V).

Section prod_ModuleSpace.

Context {K : Ring} {U V : ModuleSpace K}.

Definition prod_scal (x : K) (u : U * V) :=
  (scal x (fst u), scal x (snd u)).

Lemma prod_scal_assoc :
  forall (x y : K) (u : U * V),
  prod_scal x (prod_scal y u) = prod_scal (mult x y) u.

Lemma prod_scal_one :
  forall u : U * V,
  prod_scal one u = u.

Lemma prod_scal_distr_l :
  forall (x : K) (u v : U * V),
  prod_scal x (prod_plus u v) = prod_plus (prod_scal x u) (prod_scal x v).

Lemma prod_scal_distr_r :
  forall (x y : K) (u : U * V),
  prod_scal (plus x y) u = prod_plus (prod_scal x u) (prod_scal y u).

End prod_ModuleSpace.

Definition prod_ModuleSpace_mixin (K : Ring) (U V : ModuleSpace K) :=
  ModuleSpace.Mixin K _ _ (@prod_scal_assoc K U V) prod_scal_one prod_scal_distr_l prod_scal_distr_r.

Canonical prod_ModuleSpace (K : Ring) (U V : ModuleSpace K) :=
  ModuleSpace.Pack K (U * V) (ModuleSpace.Class _ _ _ (prod_ModuleSpace_mixin K U V)) (U * V).

Canonical prod_NormedModuleAux (K : AbsRing) (U V : NormedModuleAux K) :=
  NormedModuleAux.Pack K (U * V) (NormedModuleAux.Class _ _ (ModuleSpace.class K _) (UniformSpace.class (prod_UniformSpace U V))) (U * V).

Lemma sqrt_plus_sqr :
  forall x y : R, Rmax (Rabs x) (Rabs y) <= sqrt (x ^ 2 + y ^ 2) <= sqrt 2 * Rmax (Rabs x) (Rabs y).

Section prod_NormedModule.

Context {K : AbsRing} {U V : NormedModule K}.

Definition prod_norm (x : U * V) :=
  sqrt (norm (fst x) ^ 2 + norm (snd x) ^ 2).

Lemma prod_norm_triangle :
  forall x y : U * V,
  prod_norm (plus x y) <= prod_norm x + prod_norm y.

Lemma prod_norm_scal :
  forall (l : K) (x : U * V),
  prod_norm (scal l x) <= abs l * prod_norm x.

Lemma prod_norm_compat1 :
  forall (x y : U * V) (eps : R),
  prod_norm (minus y x) < eps -> ball x eps y.

Definition prod_norm_factor :=
  sqrt 2 * Rmax (@norm_factor K U) (@norm_factor K V).

Lemma prod_norm_compat2 :
  forall (x y : U * V) (eps : posreal),
  ball x eps y ->
  prod_norm (minus y x) < prod_norm_factor * eps.

Lemma prod_norm_eq_zero :
  forall x : U * V,
  prod_norm x = 0 -> x = zero.

End prod_NormedModule.

Definition prod_NormedModule_mixin (K : AbsRing) (U V : NormedModule K) :=
  NormedModule.Mixin K _ (@prod_norm K U V) prod_norm_factor prod_norm_triangle
  prod_norm_scal prod_norm_compat1 prod_norm_compat2 prod_norm_eq_zero.

Canonical prod_NormedModule (K : AbsRing) (U V : NormedModule K) :=
  NormedModule.Pack K (U * V) (NormedModule.Class K (U * V) _ (prod_NormedModule_mixin K U V)) (U * V).

Lemma norm_prod {K : AbsRing}
  {U : NormedModule K} {V : NormedModule K}
  (x : U) (y : V) :
  Rmax (norm x) (norm y) <= norm (x,y) <= sqrt 2 * Rmax (norm x) (norm y).

Fixpoint Tn (n : nat) (T : Type) : Type :=
  match n with
  | O => unit
  | S n => prod T (Tn n T)
  end.

Notation "[ x1 , .. , xn ]" := (pair x1 .. (pair xn tt) .. ).

Fixpoint mk_Tn {T} (n : nat) (u : nat -> T) : Tn n T :=
  match n with
    | O => (tt : Tn O T)
    | S n => (u O, mk_Tn n (fun n => u (S n)))
  end.
Fixpoint coeff_Tn {T} {n : nat} (x0 : T) : (Tn n T) -> nat -> T :=
  match n with
  | O => fun (_ : Tn O T) (_ : nat) => x0
  | S n' => fun (v : Tn (S n') T) (i : nat) => match i with
           | O => fst v
           | S i => coeff_Tn x0 (snd v) i
           end
  end.
Lemma mk_Tn_bij {T} {n : nat} (x0 : T) (v : Tn n T) :
  mk_Tn n (coeff_Tn x0 v) = v.
Lemma coeff_Tn_bij {T} {n : nat} (x0 : T) (u : nat -> T) :
  forall i, (i < n)%nat -> coeff_Tn x0 (mk_Tn n u) i = u i.
Lemma coeff_Tn_ext {T} {n : nat} (x1 x2 : T) (v1 v2 : Tn n T) :
  v1 = v2 <-> forall i, (i < n)%nat -> coeff_Tn x1 v1 i = coeff_Tn x2 v2 i.
Lemma mk_Tn_ext {T} (n : nat) (u1 u2 : nat -> T) :
  (forall i, (i < n)%nat -> (u1 i) = (u2 i))
    <-> (mk_Tn n u1) = (mk_Tn n u2).

Fixpoint Fn (n : nat) (T U : Type) : Type :=
  match n with
  | O => U
  | S n => T -> Fn n T U
  end.

Section Matrices.

Context {T : Type}.

Definition matrix (m n : nat) := Tn m (Tn n T).

Definition coeff_mat {m n : nat} (x0 : T) (A : matrix m n) (i j : nat) :=
  coeff_Tn x0 (coeff_Tn (mk_Tn _ (fun _ => x0)) A i) j.

Definition mk_matrix (m n : nat) (U : nat -> nat -> T) : matrix m n :=
  mk_Tn m (fun i => (mk_Tn n (U i))).

Lemma mk_matrix_bij {m n : nat} (x0 : T) (A : matrix m n) :
  mk_matrix m n (coeff_mat x0 A) = A.

Lemma coeff_mat_bij {m n : nat} (x0 : T) (u : nat -> nat -> T) :
  forall i j, (i < m)%nat -> (j < n)%nat -> coeff_mat x0 (mk_matrix m n u) i j = u i j.

Lemma coeff_mat_ext_aux {m n : nat} (x1 x2 : T) (v1 v2 : matrix m n) :
  v1 = v2 <-> forall i j, (i < m)%nat -> (j < n)%nat -> (coeff_mat x1 v1 i j) = (coeff_mat x2 v2 i j).

Lemma coeff_mat_ext {m n : nat} (x0 : T) (v1 v2 : matrix m n) :
  v1 = v2 <-> forall i j, (coeff_mat x0 v1 i j) = (coeff_mat x0 v2 i j).

Lemma mk_matrix_ext (m n : nat) (u1 u2 : nat -> nat -> T) :
  (forall i j, (i < m)%nat -> (j < n)%nat -> (u1 i j) = (u2 i j))
    <-> (mk_matrix m n u1) = (mk_matrix m n u2).

End Matrices.

Section MatrixGroup.

Context {G : AbelianGroup} {m n : nat}.

Definition Mzero := mk_matrix m n (fun i j => @zero G).

Definition Mplus (A B : @matrix G m n) :=
  mk_matrix m n (fun i j => plus (coeff_mat zero A i j) (coeff_mat zero B i j)).

Definition Mopp (A : @matrix G m n) :=
  mk_matrix m n (fun i j => opp (coeff_mat zero A i j)).

Lemma Mplus_comm :
  forall A B : @matrix G m n,
  Mplus A B = Mplus B A.

Lemma Mplus_assoc :
  forall A B C : @matrix G m n,
  Mplus A (Mplus B C) = Mplus (Mplus A B) C.

Lemma Mplus_zero_r :
  forall A : @matrix G m n,
  Mplus A Mzero = A.

Lemma Mplus_opp_r :
  forall A : @matrix G m n,
  Mplus A (Mopp A) = Mzero.

Definition matrix_AbelianGroup_mixin :=
  AbelianGroup.Mixin _ _ _ _ Mplus_comm Mplus_assoc Mplus_zero_r Mplus_opp_r.

Canonical matrix_AbelianGroup :=
  AbelianGroup.Pack _ matrix_AbelianGroup_mixin (@matrix G m n).

End MatrixGroup.

Section MatrixRing.

Context {T : Ring}.

Fixpoint Mone_seq i j : T :=
  match i,j with
    | O, O => one
    | O, S _ | S _, O => zero
    | S i, S j => Mone_seq i j end.

Definition Mone {n} : matrix n n :=
  mk_matrix n n Mone_seq.

Lemma Mone_seq_diag :
  forall i j : nat, i = j -> Mone_seq i j = @one T.
Lemma Mone_seq_not_diag :
  forall i j : nat, i <> j -> Mone_seq i j = @zero T.

Definition Mmult {n m k} (A : @matrix T n m) (B : @matrix T m k) :=
  mk_matrix n k (fun i j => sum_n (fun l => mult (coeff_mat zero A i l) (coeff_mat zero B l j)) (pred m)).

Lemma Mmult_assoc {n m k l} :
  forall (A : matrix n m) (B : matrix m k) (C : matrix k l),
  Mmult A (Mmult B C) = Mmult (Mmult A B) C.

Lemma Mmult_one_r {m n} :
  forall x : matrix m n, Mmult x Mone = x.

Lemma Mmult_one_l {m n} :
  forall x : matrix m n, Mmult Mone x = x.

Lemma Mmult_distr_r {m n k} :
  forall (A B : @matrix T m n) (C : @matrix T n k),
  Mmult (Mplus A B) C = Mplus (Mmult A C) (Mmult B C).

Lemma Mmult_distr_l {m n k} :
  forall (A : @matrix T m n) (B C : @matrix T n k),
  Mmult A (Mplus B C) = Mplus (Mmult A B) (Mmult A C).

Definition matrix_Ring_mixin {n} :=
  Ring.Mixin _ _ _ (@Mmult_assoc n n n n) Mmult_one_r Mmult_one_l Mmult_distr_r Mmult_distr_l.

Canonical matrix_Ring {n} :=
  Ring.Pack (@matrix T n n) (Ring.Class _ _ matrix_Ring_mixin) (@matrix T n n).

Definition matrix_ModuleSpace_mixin {m n} :=
  ModuleSpace.Mixin (@matrix_Ring m) (@matrix_AbelianGroup T m n) Mmult
    Mmult_assoc Mmult_one_l Mmult_distr_l Mmult_distr_r.

Canonical matrix_ModuleSpace {m n} :=
  ModuleSpace.Pack _ (@matrix T m n) (ModuleSpace.Class _ _ _ matrix_ModuleSpace_mixin) (@matrix T m n).

End MatrixRing.

Definition eventually (P : nat -> Prop) :=
  exists N : nat, forall n, (N <= n)%nat -> P n.

Global Instance eventually_filter : ProperFilter eventually.

Definition R_AbelianGroup_mixin :=
  AbelianGroup.Mixin _ _ _ _ Rplus_comm (fun x y z => sym_eq (Rplus_assoc x y z)) Rplus_0_r Rplus_opp_r.

Canonical R_AbelianGroup :=
  AbelianGroup.Pack _ R_AbelianGroup_mixin R.

Definition R_Ring_mixin :=
  Ring.Mixin _ _ _ (fun x y z => sym_eq (Rmult_assoc x y z)) Rmult_1_r Rmult_1_l Rmult_plus_distr_r Rmult_plus_distr_l.

Canonical R_Ring :=
  Ring.Pack R (Ring.Class _ _ R_Ring_mixin) R.

Lemma Rabs_m1 :
  Rabs (-1) = 1.

Definition R_AbsRing_mixin :=
  AbsRing.Mixin _ _ Rabs_R0 Rabs_m1 Rabs_triang (fun x y => Req_le _ _ (Rabs_mult x y)) Rabs_eq_0.

Canonical R_AbsRing :=
  AbsRing.Pack R (AbsRing.Class _ _ R_AbsRing_mixin) R.

Definition R_UniformSpace_mixin :=
  AbsRing_UniformSpace_mixin R_AbsRing.

Canonical R_UniformSpace :=
  UniformSpace.Pack R R_UniformSpace_mixin R.

Definition R_complete_lim (F : (R -> Prop) -> Prop) : R :=
  Lub_Rbar (fun x : R => F (ball (x + 1) (mkposreal _ Rlt_0_1))).

Lemma R_complete_ax1 :
  forall F : (R -> Prop) -> Prop,
  ProperFilter' F ->
  (forall eps : posreal, exists x : R, F (ball x eps)) ->
  forall eps : posreal, F (ball (R_complete_lim F) eps).

Lemma R_complete :
  forall F : (R -> Prop) -> Prop,
  ProperFilter F ->
  (forall eps : posreal, exists x : R, F (ball x eps)) ->
  forall eps : posreal, F (ball (R_complete_lim F) eps).

Lemma R_complete_ax2 :
  forall F1 F2 : (R -> Prop) -> Prop,
  filter_le F1 F2 -> filter_le F2 F1 ->
  R_complete_lim F1 = R_complete_lim F2.

Lemma R_complete_close :
  forall F1 F2 : (R -> Prop) -> Prop,
  filter_le F1 F2 -> filter_le F2 F1 ->
  close (R_complete_lim F1) (R_complete_lim F2).

Definition R_CompleteSpace_mixin :=
  CompleteSpace.Mixin _ R_complete_lim R_complete R_complete_close.

Canonical R_CompleteSpace :=
  CompleteSpace.Pack R (CompleteSpace.Class _ _ R_CompleteSpace_mixin) R.

Definition R_ModuleSpace_mixin :=
  AbsRing_ModuleSpace_mixin R_AbsRing.

Canonical R_ModuleSpace :=
  ModuleSpace.Pack _ R (ModuleSpace.Class _ _ _ R_ModuleSpace_mixin) R.

Canonical R_NormedModuleAux :=
  NormedModuleAux.Pack _ R (NormedModuleAux.Class _ _ (ModuleSpace.class _ R_ModuleSpace) (UniformSpace.class R_UniformSpace)) R.

Definition R_NormedModule_mixin :=
  AbsRing_NormedModule_mixin R_AbsRing.

Canonical R_NormedModule :=
  NormedModule.Pack _ R (NormedModule.Class _ _ _ R_NormedModule_mixin) R.

Canonical R_CompleteNormedModule :=
  CompleteNormedModule.Pack _ R (CompleteNormedModule.Class R_AbsRing _ (NormedModule.class _ R_NormedModule) R_CompleteSpace_mixin) R.

Definition at_left x := within (fun u : R => Rlt u x) (locally x).
Definition at_right x := within (fun u : R => Rlt x u) (locally x).

Global Instance at_right_proper_filter : forall (x : R),
  ProperFilter (at_right x).
Global Instance at_left_proper_filter : forall (x : R),
  ProperFilter (at_left x).

Lemma sum_n_Reals : forall a N, sum_n a N = sum_f_R0 a N.
Lemma sum_n_m_Reals a n m : (n <= m)%nat -> sum_n_m a n m = sum_f n m a.

Lemma sum_n_m_const (n m : nat) (a : R) :
  sum_n_m (fun _ => a) n m = INR (S m - n) * a.
Lemma sum_n_const (n : nat) (a : R) :
  sum_n (fun _ => a) n = INR (S n) * a.

Lemma norm_sum_n_m {K : AbsRing} {V : NormedModule K} (a : nat -> V) (n m : nat) :
  norm (sum_n_m a n m) <= sum_n_m (fun n => norm (a n)) n m.

Lemma sum_n_m_le (a b : nat -> R) (n m : nat) :
  (forall k, a k <= b k)
  -> sum_n_m a n m <= sum_n_m b n m.

Lemma pow_n_pow :
  forall (x : R) k, pow_n x k = x^k.

Lemma filterlim_norm {K : AbsRing} {V : NormedModule K} :
  forall (x : V), filterlim norm (locally x) (locally (norm x)).

Lemma filterlim_norm_zero {U} {K : AbsRing} {V : NormedModule K}
  {F : (U -> Prop) -> Prop} {FF : Filter F} (f : U -> V) :
  filterlim (fun x => norm (f x)) F (locally 0)
  -> filterlim f F (locally (zero (G := V))).

Lemma filterlim_bounded {K : AbsRing} {V : NormedModule K} (a : nat -> V) :
  (exists x, filterlim a eventually (locally x))
 -> {M : R | forall n, norm (a n) <= M}.

Lemma open_lt :
  forall y : R, open (fun u : R => u < y).

Lemma open_gt :
  forall y : R, open (fun u : R => y < u).

Lemma open_neq :
  forall y : R, open (fun u : R => u <> y).

Lemma closed_le :
  forall y : R, closed (fun u : R => u <= y).

Lemma closed_ge :
  forall y : R, closed (fun u : R => y <= u).

Lemma closed_eq :
  forall y : R, closed (fun u : R => u = y).

Lemma locally_interval (P : R -> Prop) (x : R) (a b : Rbar) :
  Rbar_lt a x -> Rbar_lt x b ->
  (forall (y : R), Rbar_lt a y -> Rbar_lt y b -> P y) ->
  locally x P.

Definition locally_2d (P : R -> R -> Prop) x y :=
  exists delta : posreal, forall u v, Rabs (u - x) < delta -> Rabs (v - y) < delta -> P u v.

Lemma locally_2d_locally :
  forall P x y,
  locally_2d P x y <-> locally (x,y) (fun z => P (fst z) (snd z)).

Lemma locally_2d_impl_strong :
  forall (P Q : R -> R -> Prop) x y, locally_2d (fun u v => locally_2d P u v -> Q u v) x y ->
  locally_2d P x y -> locally_2d Q x y.

Lemma locally_2d_singleton :
  forall (P : R -> R -> Prop) x y, locally_2d P x y -> P x y.

Lemma locally_2d_impl :
  forall (P Q : R -> R -> Prop) x y, locally_2d (fun u v => P u v -> Q u v) x y ->
  locally_2d P x y -> locally_2d Q x y.

Lemma locally_2d_forall :
  forall (P : R -> R -> Prop) x y, (forall u v, P u v) -> locally_2d P x y.

Lemma locally_2d_and :
  forall (P Q : R -> R -> Prop) x y, locally_2d P x y -> locally_2d Q x y ->
  locally_2d (fun u v => P u v /\ Q u v) x y.

Lemma locally_2d_align :
  forall (P Q : R -> R -> Prop) x y,
  ( forall eps : posreal, (forall u v, Rabs (u - x) < eps -> Rabs (v - y) < eps -> P u v) ->
    forall u v, Rabs (u - x) < eps -> Rabs (v - y) < eps -> Q u v ) ->
  locally_2d P x y -> locally_2d Q x y.

Lemma locally_2d_1d_const_x :
  forall (P : R -> R -> Prop) x y,
  locally_2d P x y ->
  locally y (fun t => P x t).

Lemma locally_2d_1d_const_y :
  forall (P : R -> R -> Prop) x y,
  locally_2d P x y ->
  locally x (fun t => P t y).

Lemma locally_2d_1d_strong :
  forall (P : R -> R -> Prop) x y,
  locally_2d P x y ->
  locally_2d (fun u v => forall t, 0 <= t <= 1 ->
    locally t (fun z => locally_2d P (x + z * (u - x)) (y + z * (v - y)))) x y.

Lemma locally_2d_1d :
  forall (P : R -> R -> Prop) x y,
  locally_2d P x y ->
  locally_2d (fun u v => forall t, 0 <= t <= 1 -> locally_2d P (x + t * (u - x)) (y + t * (v - y))) x y.

Lemma locally_2d_ex_dec :
  forall P x y,
  (forall x y, P x y \/ ~P x y) ->
  locally_2d P x y ->
  {d : posreal | forall u v, Rabs (u-x) < d -> Rabs (v-y) < d -> P u v}.

Definition Rbar_locally' (a : Rbar) (P : R -> Prop) :=
  match a with
    | Finite a => locally' a P
    | p_infty => exists M : R, forall x, M < x -> P x
    | m_infty => exists M : R, forall x, x < M -> P x
  end.
Definition Rbar_locally (a : Rbar) (P : R -> Prop) :=
  match a with
    | Finite a => locally a P
    | p_infty => exists M : R, forall x, M < x -> P x
    | m_infty => exists M : R, forall x, x < M -> P x
  end.

Global Instance Rbar_locally'_filter :
  forall x, ProperFilter (Rbar_locally' x).

Global Instance Rbar_locally_filter :
  forall x, ProperFilter (Rbar_locally x).

Lemma open_Rbar_lt :
  forall y, open (fun u : R => Rbar_lt u y).

Lemma open_Rbar_gt :
  forall y, open (fun u : R => Rbar_lt y u).

Lemma open_Rbar_lt' :
  forall x y, Rbar_lt x y -> Rbar_locally x (fun u => Rbar_lt u y).

Lemma open_Rbar_gt' :
  forall x y, Rbar_lt y x -> Rbar_locally x (fun u => Rbar_lt y u).

Lemma Rbar_locally'_le :
  forall x, filter_le (Rbar_locally' x) (Rbar_locally x).

Lemma Rbar_locally'_le_finite :
  forall x : R, filter_le (Rbar_locally' x) (locally x).

Definition Rbar_loc_seq (x : Rbar) (n : nat) := match x with
    | Finite x => x + / (INR n + 1)
    | p_infty => INR n
    | m_infty => - INR n
  end.

Lemma filterlim_Rbar_loc_seq :
  forall x, filterlim (Rbar_loc_seq x) eventually (Rbar_locally' x).

Lemma continuity_pt_locally :
  forall f x,
  continuity_pt f x <->
  forall eps : posreal, locally x (fun u => Rabs (f u - f x) < eps).

Lemma continuity_pt_locally' :
  forall f x,
  continuity_pt f x <->
  forall eps : posreal, locally' x (fun u => Rabs (f u - f x) < eps).

Lemma continuity_pt_filterlim :
  forall (f : R -> R) (x : R),
  continuity_pt f x <->
  filterlim f (locally x) (locally (f x)).

Lemma continuity_pt_filterlim' :
  forall f x,
  continuity_pt f x <->
  filterlim f (locally' x) (locally (f x)).

Lemma locally_pt_comp (P : R -> Prop) (f : R -> R) (x : R) :
  locally (f x) P -> continuity_pt f x ->
  locally x (fun x => P (f x)). *)

Require Import Continuity Derive Seq_fct Series.
(* Continuity:
Require Import Reals.
Require Import mathcomp.ssreflect.ssreflect.
Require Import Rcomplements Rbar Hierarchy.
Require Import Compactness Lim_seq.

Definition is_lim (f : R -> R) (x l : Rbar) :=
  filterlim f (Rbar_locally' x) (Rbar_locally l).

Definition is_lim' (f : R -> R) (x l : Rbar) :=
  match l with
    | Finite l =>
      forall eps : posreal, Rbar_locally' x (fun y => Rabs (f y - l) < eps)
    | p_infty => forall M : R, Rbar_locally' x (fun y => M < f y)
    | m_infty => forall M : R, Rbar_locally' x (fun y => f y < M)
  end.
Definition ex_lim (f : R -> R) (x : Rbar) := exists l : Rbar, is_lim f x l.
Definition ex_finite_lim (f : R -> R) (x : Rbar) := exists l : R, is_lim f x l.
Definition Lim (f : R -> R) (x : Rbar) := Lim_seq (fun n => f (Rbar_loc_seq x n)).

Lemma is_lim_spec :
  forall f x l,
  is_lim' f x l <-> is_lim f x l.

Lemma is_lim_Reals_0 (f : R -> R) (x l : R) :
  is_lim f x l -> limit1_in f (fun y => y <> x) l x.
Lemma is_lim_Reals_1 (f : R -> R) (x l : R) :
  limit1_in f (fun y => y <> x) l x -> is_lim f x l.
Lemma is_lim_Reals (f : R -> R) (x l : R) :
  is_lim f x l <-> limit1_in f (fun y => y <> x) l x.

Lemma is_lim_comp' :
  forall {T} {F} {FF : @Filter T F} (f : T -> R) (g : R -> R) (x l : Rbar),
  filterlim f F (Rbar_locally x) -> is_lim g x l ->
  F (fun y => Finite (f y) <> x) ->
  filterlim (fun y => g (f y)) F (Rbar_locally l).

Lemma is_lim_comp_seq (f : R -> R) (u : nat -> R) (x l : Rbar) :
  is_lim f x l ->
  eventually (fun n => Finite (u n) <> x) ->
  is_lim_seq u x -> is_lim_seq (fun n => f (u n)) l.

Lemma is_lim_unique (f : R -> R) (x l : Rbar) :
  is_lim f x l -> Lim f x = l.
Lemma Lim_correct (f : R -> R) (x : Rbar) :
  ex_lim f x -> is_lim f x (Lim f x).

Lemma ex_finite_lim_correct (f : R -> R) (x : Rbar) :
  ex_finite_lim f x <-> ex_lim f x /\ is_finite (Lim f x).
Lemma Lim_correct' (f : R -> R) (x : Rbar) :
  ex_finite_lim f x -> is_lim f x (real (Lim f x)).

Lemma is_lim_ext_loc (f g : R -> R) (x l : Rbar) :
  Rbar_locally' x (fun y => f y = g y)
  -> is_lim f x l -> is_lim g x l.
Lemma ex_lim_ext_loc (f g : R -> R) (x : Rbar) :
  Rbar_locally' x (fun y => f y = g y)
  -> ex_lim f x -> ex_lim g x.
Lemma Lim_ext_loc (f g : R -> R) (x : Rbar) :
  Rbar_locally' x (fun y => f y = g y)
  -> Lim g x = Lim f x.

Lemma is_lim_ext (f g : R -> R) (x l : Rbar) :
  (forall y, f y = g y)
  -> is_lim f x l -> is_lim g x l.
Lemma ex_lim_ext (f g : R -> R) (x : Rbar) :
  (forall y, f y = g y)
  -> ex_lim f x -> ex_lim g x.
Lemma Lim_ext (f g : R -> R) (x : Rbar) :
  (forall y, f y = g y)
  -> Lim g x = Lim f x.

Lemma is_lim_comp (f g : R -> R) (x k l : Rbar) :
  is_lim f l k -> is_lim g x l -> Rbar_locally' x (fun y => Finite (g y) <> l)
    -> is_lim (fun x => f (g x)) x k.
Lemma ex_lim_comp (f g : R -> R) (x : Rbar) :
  ex_lim f (Lim g x) -> ex_lim g x -> Rbar_locally' x (fun y => Finite (g y) <> Lim g x)
    -> ex_lim (fun x => f (g x)) x.
Lemma Lim_comp (f g : R -> R) (x : Rbar) :
  ex_lim f (Lim g x) -> ex_lim g x -> Rbar_locally' x (fun y => Finite (g y) <> Lim g x)
    -> Lim (fun x => f (g x)) x = Lim f (Lim g x).

Lemma is_lim_id (x : Rbar) :
  is_lim (fun y => y) x x.
Lemma ex_lim_id (x : Rbar) :
  ex_lim (fun y => y) x.
Lemma Lim_id (x : Rbar) :
  Lim (fun y => y) x = x.

Lemma is_lim_const (a : R) (x : Rbar) :
  is_lim (fun _ => a) x a.
Lemma ex_lim_const (a : R) (x : Rbar) :
  ex_lim (fun _ => a) x.
Lemma Lim_const (a : R) (x : Rbar) :
  Lim (fun _ => a) x = a.

Lemma is_lim_opp (f : R -> R) (x l : Rbar) :
  is_lim f x l -> is_lim (fun y => - f y) x (Rbar_opp l).
Lemma ex_lim_opp (f : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim (fun y => - f y) x.
Lemma Lim_opp (f : R -> R) (x : Rbar) :
  Lim (fun y => - f y) x = Rbar_opp (Lim f x).

Lemma is_lim_plus (f g : R -> R) (x lf lg l : Rbar) :
  is_lim f x lf -> is_lim g x lg ->
  is_Rbar_plus lf lg l ->
  is_lim (fun y => f y + g y) x l.
Lemma is_lim_plus' (f g : R -> R) (x : Rbar) (lf lg : R) :
  is_lim f x lf -> is_lim g x lg ->
  is_lim (fun y => f y + g y) x (lf + lg).
Lemma ex_lim_plus (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x ->
  ex_Rbar_plus (Lim f x) (Lim g x) ->
  ex_lim (fun y => f y + g y) x.
Lemma Lim_plus (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x ->
  ex_Rbar_plus (Lim f x) (Lim g x) ->
  Lim (fun y => f y + g y) x = Rbar_plus (Lim f x) (Lim g x).

Lemma is_lim_minus (f g : R -> R) (x lf lg l : Rbar) :
  is_lim f x lf -> is_lim g x lg ->
  is_Rbar_minus lf lg l ->
  is_lim (fun y => f y - g y) x l.
Lemma is_lim_minus' (f g : R -> R) (x : Rbar) (lf lg : R) :
  is_lim f x lf -> is_lim g x lg ->
  is_lim (fun y => f y - g y) x (lf - lg).
Lemma ex_lim_minus (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x ->
  ex_Rbar_minus (Lim f x) (Lim g x) ->
  ex_lim (fun y => f y - g y) x.
Lemma Lim_minus (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x ->
  ex_Rbar_minus (Lim f x) (Lim g x) ->
  Lim (fun y => f y - g y) x = Rbar_minus (Lim f x) (Lim g x).

Lemma is_lim_inv (f : R -> R) (x l : Rbar) :
  is_lim f x l -> l <> 0 -> is_lim (fun y => / f y) x (Rbar_inv l).
Lemma ex_lim_inv (f : R -> R) (x : Rbar) :
  ex_lim f x -> Lim f x <> 0 -> ex_lim (fun y => / f y) x.
Lemma Lim_inv (f : R -> R) (x : Rbar) :
  ex_lim f x -> Lim f x <> 0 -> Lim (fun y => / f y) x = Rbar_inv (Lim f x).

Lemma is_lim_mult (f g : R -> R) (x lf lg : Rbar) :
  is_lim f x lf -> is_lim g x lg ->
  ex_Rbar_mult lf lg ->
  is_lim (fun y => f y * g y) x (Rbar_mult lf lg).
Lemma ex_lim_mult (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x ->
  ex_Rbar_mult (Lim f x) (Lim g x) ->
  ex_lim (fun y => f y * g y) x.
Lemma Lim_mult (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x ->
  ex_Rbar_mult (Lim f x) (Lim g x) ->
  Lim (fun y => f y * g y) x = Rbar_mult (Lim f x) (Lim g x).

Lemma is_lim_scal_l (f : R -> R) (a : R) (x l : Rbar) :
  is_lim f x l -> is_lim (fun y => a * f y) x (Rbar_mult a l).
Lemma ex_lim_scal_l (f : R -> R) (a : R) (x : Rbar) :
  ex_lim f x -> ex_lim (fun y => a * f y) x.
Lemma Lim_scal_l (f : R -> R) (a : R) (x : Rbar) :
  Lim (fun y => a * f y) x = Rbar_mult a (Lim f x).

Lemma is_lim_scal_r (f : R -> R) (a : R) (x l : Rbar) :
  is_lim f x l -> is_lim (fun y => f y * a) x (Rbar_mult l a).
Lemma ex_lim_scal_r (f : R -> R) (a : R) (x : Rbar) :
  ex_lim f x -> ex_lim (fun y => f y * a) x.
Lemma Lim_scal_r (f : R -> R) (a : R) (x : Rbar) :
  Lim (fun y => f y * a) x = Rbar_mult (Lim f x) a.

Lemma is_lim_div (f g : R -> R) (x lf lg : Rbar) :
  is_lim f x lf -> is_lim g x lg -> lg <> 0 ->
  ex_Rbar_div lf lg ->
  is_lim (fun y => f y / g y) x (Rbar_div lf lg).
Lemma ex_lim_div (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x -> Lim g x <> 0 ->
  ex_Rbar_div (Lim f x) (Lim g x) ->
  ex_lim (fun y => f y / g y) x.
Lemma Lim_div (f g : R -> R) (x : Rbar) :
  ex_lim f x -> ex_lim g x -> Lim g x <> 0 ->
  ex_Rbar_div (Lim f x) (Lim g x) ->
  Lim (fun y => f y / g y) x = Rbar_div (Lim f x) (Lim g x).

Lemma is_lim_comp_lin (f : R -> R) (a b : R) (x l : Rbar) :
  is_lim f (Rbar_plus (Rbar_mult a x) b) l -> a <> 0
  -> is_lim (fun y => f (a * y + b)) x l.
Lemma ex_lim_comp_lin (f : R -> R) (a b : R) (x : Rbar) :
  ex_lim f (Rbar_plus (Rbar_mult a x) b)
  -> ex_lim (fun y => f (a * y + b)) x.
Lemma Lim_comp_lin (f : R -> R) (a b : R) (x : Rbar) :
  ex_lim f (Rbar_plus (Rbar_mult a x) b) -> a <> 0 ->
  Lim (fun y => f (a * y + b)) x = Lim f (Rbar_plus (Rbar_mult a x) b).

Lemma is_lim_continuity (f : R -> R) (x : R) :
  continuity_pt f x -> is_lim f x (f x).
Lemma ex_lim_continuity (f : R -> R) (x : R) :
  continuity_pt f x -> ex_finite_lim f x.
Lemma Lim_continuity (f : R -> R) (x : R) :
  continuity_pt f x -> Lim f x = f x.

Lemma C0_extension_right {T : UniformSpace} (f : R -> T) lb (a b : R) :
   a < b ->
   (forall c : R, a < c < b -> filterlim f (locally c) (locally (f c))) ->
   (filterlim f (at_left b) (locally lb)) ->
   {g : R -> T | (forall c, a < c -> filterlim g (locally c) (locally (g c)))
     /\ (forall c : R, c < b -> g c = f c) /\ g b = lb}.
Lemma filterlim_Ropp_left (x : R) :
  filterlim Ropp (at_left x) (at_right (- x)).
Lemma filterlim_Ropp_right (x : R) :
  filterlim Ropp (at_right x) (at_left (- x)).

Lemma C0_extension_left {T : UniformSpace} (f : R -> T) la (a b : R) :
   a < b ->
   (forall c : R, a < c < b -> filterlim f (locally c) (locally (f c))) ->
   (filterlim f (at_right a) (locally la)) ->
   {g : R -> T | (forall c, c < b -> filterlim g (locally c) (locally (g c)))
     /\ (forall c : R, a < c -> g c = f c) /\ g a = la}.

Lemma C0_extension_lt {T : UniformSpace} (f : R -> T) la lb (a b : R) :
  a < b ->
   (forall c : R, a < c < b -> filterlim f (locally c) (locally (f c))) ->
   (filterlim f (at_right a) (locally la)) ->
   (filterlim f (at_left b) (locally lb)) ->
   {g : R -> T | (forall c, filterlim g (locally c) (locally (g c)))
     /\ (forall c : R, a < c < b -> g c = f c) /\ g a = la /\ g b = lb}.

Lemma C0_extension_le {T : UniformSpace} (f : R -> T) (a b : R) :
   (forall c : R, a <= c <= b -> filterlim f (locally c) (locally (f c))) ->
   {g : R -> T | (forall c, filterlim g (locally c) (locally (g c)))
     /\ (forall c : R, a <= c <= b -> g c = f c)}.

Lemma bounded_continuity {K : AbsRing} {V : NormedModule K}
  (f : R -> V) a b :
  (forall x, a <= x <= b -> filterlim f (locally x) (locally (f x)))
  -> {M : R | forall x, a <= x <= b -> norm (f x) < M}.

Lemma is_lim_le_loc (f g : R -> R) (x lf lg : Rbar) :
  Rbar_locally' x (fun y => f y <= g y) ->
  is_lim f x lf -> is_lim g x lg ->
  Rbar_le lf lg.

Lemma is_lim_le_p_loc (f g : R -> R) (x : Rbar) :
  Rbar_locally' x (fun y => f y <= g y) ->
  is_lim f x p_infty ->
  is_lim g x p_infty.

Lemma is_lim_le_m_loc (f g : R -> R) (x : Rbar) :
  Rbar_locally' x (fun y => g y <= f y) ->
  is_lim f x m_infty ->
  is_lim g x m_infty.

Lemma is_lim_le_le_loc (f g h : R -> R) (x : Rbar) (l : Rbar) :
  Rbar_locally' x (fun y => f y <= h y <= g y) ->
  is_lim f x l -> is_lim g x l ->
  is_lim h x l.

Lemma IVT_gen (f : R -> R) (a b y : R) :
  Ranalysis1.continuity f

Lemma IVT_Rbar_incr (f : R -> R) (a b la lb : Rbar) (y : R) :
  is_lim f a la -> is_lim f b lb
  -> (forall (x : R), Rbar_lt a x -> Rbar_lt x b -> continuity_pt f x)
  -> Rbar_lt a b
  -> Rbar_lt la y /\ Rbar_lt y lb
  -> {x : R | Rbar_lt a x /\ Rbar_lt x b /\ f x = y}.

Lemma IVT_Rbar_decr (f : R -> R) (a b la lb : Rbar) (y : R) :
  is_lim f a la -> is_lim f b lb
  -> (forall (x : R), Rbar_lt a x -> Rbar_lt x b -> continuity_pt f x)
  -> Rbar_lt a b
  -> Rbar_lt lb y /\ Rbar_lt y la
  -> {x : R | Rbar_lt a x /\ Rbar_lt x b /\ f x = y}.

Definition continuity_2d_pt f x y :=
  forall eps : posreal, locally_2d (fun u v => Rabs (f u v - f x y) < eps) x y.

Lemma continuity_2d_pt_filterlim :
  forall f x y,
  continuity_2d_pt f x y <->
  filterlim (fun z : R * R => f (fst z) (snd z)) (locally (x,y)) (locally (f x y)).

Lemma uniform_continuity_2d :
  forall f a b c d,
  (forall x y, a <= x <= b -> c <= y <= d -> continuity_2d_pt f x y) ->
  forall eps : posreal, exists delta : posreal,
  forall x y u v,
  a <= x <= b -> c <= y <= d ->
  a <= u <= b -> c <= v <= d ->
  Rabs (u - x) < delta -> Rabs (v - y) < delta ->
  Rabs (f u v - f x y) < eps.

Lemma uniform_continuity_2d_1d :
  forall f a b c,
  (forall x, a <= x <= b -> continuity_2d_pt f x c) ->
  forall eps : posreal, exists delta : posreal,
  forall x y u v,
  a <= x <= b -> c - delta <= y <= c + delta ->
  a <= u <= b -> c - delta <= v <= c + delta ->
  Rabs (u - x) < delta ->
  Rabs (f u v - f x y) < eps.

Lemma uniform_continuity_2d_1d' :
  forall f a b c,
  (forall x, a <= x <= b -> continuity_2d_pt f c x) ->
  forall eps : posreal, exists delta : posreal,
  forall x y u v,
  a <= x <= b -> c - delta <= y <= c + delta ->
  a <= u <= b -> c - delta <= v <= c + delta ->
  Rabs (u - x) < delta ->
  Rabs (f v u - f y x) < eps.

Lemma continuity_2d_pt_neq_0 :
  forall f x y,
  continuity_2d_pt f x y -> f x y <> 0 ->
  locally_2d (fun u v => f u v <> 0) x y.

Lemma continuity_pt_id :
  forall x, continuity_pt (fun x => x) x.

Lemma continuity_2d_pt_id1 :
  forall x y, continuity_2d_pt (fun u v => u) x y.

Lemma continuity_2d_pt_id2 :
  forall x y, continuity_2d_pt (fun u v => v) x y.

Lemma continuity_2d_pt_const :
  forall x y c, continuity_2d_pt (fun u v => c) x y.

Lemma continuity_pt_ext_loc :
  forall f g x,
  locally x (fun x => f x = g x) ->
  continuity_pt f x -> continuity_pt g x.

Lemma continuity_pt_ext :
  forall f g x,
  (forall x, f x = g x) ->
  continuity_pt f x -> continuity_pt g x.

Lemma continuity_2d_pt_ext_loc :
  forall f g x y,
  locally_2d (fun u v => f u v = g u v) x y ->
  continuity_2d_pt f x y -> continuity_2d_pt g x y.

Lemma continuity_2d_pt_ext :
  forall f g x y,
  (forall x y, f x y = g x y) ->
  continuity_2d_pt f x y -> continuity_2d_pt g x y.

Lemma continuity_1d_2d_pt_comp :
  forall f g x y,
  continuity_pt f (g x y) ->
  continuity_2d_pt g x y ->
  continuity_2d_pt (fun x y => f (g x y)) x y.

Lemma continuity_2d_pt_opp (f : R -> R -> R) (x y : R) :
  continuity_2d_pt f x y ->
  continuity_2d_pt (fun u v => - f u v) x y.

Lemma continuity_2d_pt_plus (f g : R -> R -> R) (x y : R) :
  continuity_2d_pt f x y ->
  continuity_2d_pt g x y ->
  continuity_2d_pt (fun u v => f u v + g u v) x y.

Lemma continuity_2d_pt_minus (f g : R -> R -> R) (x y : R) :
  continuity_2d_pt f x y ->
  continuity_2d_pt g x y ->
  continuity_2d_pt (fun u v => f u v - g u v) x y.

Lemma continuity_2d_pt_inv (f : R -> R -> R) (x y : R) :
  continuity_2d_pt f x y ->
  f x y <> 0 ->
  continuity_2d_pt (fun u v => / f u v) x y.

Lemma continuity_2d_pt_mult (f g : R -> R -> R) (x y : R) :
  continuity_2d_pt f x y ->
  continuity_2d_pt g x y ->
  continuity_2d_pt (fun u v => f u v * g u v) x y.

Section Continuity.

Context {T U : UniformSpace}.

Definition continuous_on (D : T -> Prop) (f : T -> U) :=
  forall x, D x -> filterlim f (within D (locally x)) (locally (f x)).

Definition continuous (f : T -> U) (x : T) :=
  filterlim f (locally x) (locally (f x)).

Lemma continuous_continuous_on :
  forall (D : T -> Prop) (f : T -> U) (x : T),
  locally x D ->
  continuous_on D f ->
  continuous f x.

Lemma continuous_on_subset :
  forall (D E : T -> Prop) (f : T -> U),
  (forall x, E x -> D x) ->
  continuous_on D f ->
  continuous_on E f.

Lemma continuous_on_forall :
  forall (D : T -> Prop) (f : T -> U),
  (forall x, D x -> continuous f x) ->
  continuous_on D f.

Lemma continuous_ext_loc (f g : T -> U) (x : T) :
  locally x (fun y : T => g y = f y)
  -> continuous g x -> continuous f x.
Lemma continuous_ext :
  forall (f g : T -> U) (x : T),
  (forall x, f x = g x) ->
  continuous f x ->
  continuous g x.

Lemma continuous_on_ext :
  forall (D : T -> Prop) (f g : T -> U),
  (forall x, D x -> f x = g x) ->
  continuous_on D f ->
  continuous_on D g.

End Continuity.

Lemma continuous_comp {U V W : UniformSpace} (f : U -> V) (g : V -> W) (x : U) :
  continuous f x -> continuous g (f x)
  -> continuous (fun x => g (f x)) x.
Lemma continuous_comp_2 {U V W X : UniformSpace}
  (f : U -> V) (g : U -> W) (h : V -> W -> X) (x : U) :
  continuous f x -> continuous g x
  -> continuous (fun (x : V * W) => h (fst x) (snd x)) (f x,g x)
  -> continuous (fun x => h (f x) (g x)) x.

Lemma is_lim_comp_continuous (f g : R -> R) (x : Rbar) (l : R) :
  is_lim f x l -> continuous g l
    -> is_lim (fun x => g (f x)) x (g l).

Lemma continuous_fst {U V : UniformSpace} (x : U) (y : V) :
  continuous (fst (B:=V)) (x, y).
Lemma continuous_snd {U V : UniformSpace} (x : U) (y : V) :
  continuous (snd (B:=V)) (x, y).

Lemma continuous_const {U V : UniformSpace} (c : V) (x : U) :
  continuous (fun _ => c) x.

Lemma continuous_id {U : UniformSpace} (x : U) :
  continuous (fun y => y) x.

Section Continuity_op.

Context {U : UniformSpace} {K : AbsRing} {V : NormedModule K}.

Lemma continuous_opp (f : U -> V) (x : U) :
  continuous f x ->
  continuous (fun x : U => opp (f x)) x.

Lemma continuous_plus (f g : U -> V) (x : U) :
  continuous f x -> continuous g x ->
  continuous (fun x : U => plus (f x) (g x)) x.

Lemma continuous_minus (f g : U -> V) (x : U) :
  continuous f x -> continuous g x ->
  continuous (fun x : U => minus (f x) (g x)) x.

Lemma continuous_scal (k : U -> K) (f : U -> V) (x : U) :
  continuous k x -> continuous f x -> continuous (fun y => scal (k y) (f y)) x.
Lemma continuous_scal_r (k : K) (f : U -> V) (x : U) :
  continuous f x -> continuous (fun y => scal k (f y)) x.
Lemma continuous_scal_l (f : U -> K) (k : V) (x : U) :
  continuous f x -> continuous (fun y => scal (f y) k) x.

End Continuity_op.

Lemma continuous_mult {U : UniformSpace} {K : AbsRing}
  (f g : U -> K) (x : U) :
  continuous f x -> continuous g x
  -> continuous (fun y => mult (f y) (g y)) x.

Section UnifCont.

Context {V : UniformSpace}.

Lemma unifcont_1d (f : R -> V) a b :
  (forall x, a <= x <= b -> continuous f x) ->
  forall eps : posreal, {delta : posreal | forall x y,
    a <= x <= b -> a <= y <= b -> ball x delta y -> ~~ ball (f x) eps (f y)}.

End UnifCont.

Section UnifCont_N.

Context {K : AbsRing} {V : NormedModule K}.

Lemma unifcont_normed_1d (f : R -> V) a b :
  (forall x, a <= x <= b -> continuous f x) ->
  forall eps : posreal, {delta : posreal | forall x y,
    a <= x <= b -> a <= y <= b -> ball x delta y -> ball_norm (f x) eps (f y)}.

End UnifCont_N. *)
(* Seq_fct:
Require Import Reals Psatz.
Require Import mathcomp.ssreflect.ssreflect Rbar.
Require Import Rcomplements.
Require Import Lim_seq Continuity Derive Series.
Require Import Lub Hierarchy.

Open Scope R_scope.

Definition CVS_dom (fn : nat -> R -> R) (D : R -> Prop) :=
  forall x : R, D x -> ex_finite_lim_seq (fun n => fn n x).

Definition CVU_dom (fn : nat -> R -> R) (D : R -> Prop) :=
  forall eps : posreal, eventually (fun n => forall x : R,
    D x -> Rabs ((fn n x) - real (Lim_seq (fun n => fn n x))) < eps).
Definition CVU_cauchy (fn : nat -> R -> R) (D : R -> Prop) :=
  forall eps : posreal, exists N : nat,
  forall (n m : nat) (x : R), D x -> (N <= n)%nat -> (N <= m)%nat
    -> Rabs (fn n x - fn m x) < eps.

Lemma CVU_dom_Reals (fn : nat -> R -> R) (f : R -> R) (x : R) (r : posreal) :
  (forall y, (Boule x r y) -> (Finite (f y)) = Lim_seq (fun n => fn n y)) ->
  (CVU fn f x r <-> CVU_dom fn (Boule x r)).

Lemma CVU_CVS_dom (fn : nat -> R -> R) (D : R -> Prop) :
  CVU_dom fn D -> CVS_dom fn D.
Lemma CVU_dom_cauchy (fn : nat -> R -> R) (D : R -> Prop) :
  CVU_dom fn D <-> CVU_cauchy fn D.

Lemma CVU_dom_include (fn : nat -> R -> R) (D1 D2 : R -> Prop) :
  (forall y, D2 y -> D1 y) -> CVU_dom fn D1 -> CVU_dom fn D2.

Definition is_connected (D : R -> Prop) :=
  forall a b x, D a -> D b -> a <= x <= b -> D x.

Lemma CVU_limits_open (fn : nat -> R -> R) (D : R -> Prop) :
  open D
  -> CVU_dom fn D
  -> (forall x n, D x -> ex_finite_lim (fn n) x)
  -> forall x, D x -> ex_finite_lim_seq (fun n => real (Lim (fn n) x))
    /\ ex_finite_lim (fun y => real (Lim_seq (fun n => fn n y))) x
    /\ real (Lim_seq (fun n => real (Lim (fn n) x)))
      = real (Lim (fun y => real (Lim_seq (fun n => fn n y))) x).
Lemma CVU_cont_open (fn : nat -> R -> R) (D : R -> Prop) :
  open D ->
  CVU_dom fn D ->
  (forall n, forall x, D x -> continuity_pt (fn n) x)
    -> forall x, D x -> continuity_pt (fun y => real (Lim_seq (fun n => fn n y))) x.

Lemma CVU_Derive (fn : nat -> R -> R) (D : R -> Prop) :
  open D -> is_connected D
  -> CVU_dom fn D
  -> (forall n x, D x -> ex_derive (fn n) x)
  -> (forall n x, D x -> continuity_pt (Derive (fn n)) x)
  -> CVU_dom (fun n x => Derive (fn n) x) D
  -> (forall x , D x ->
       (is_derive (fun y => real (Lim_seq (fun n => fn n y))) x
         (real (Lim_seq (fun n => Derive (fn n) x))))).

Lemma Dini (fn : nat -> R -> R) (a b : R) :
  a < b -> CVS_dom fn (fun x => a <= x <= b)
  -> (forall (n : nat) (x : R), a <= x <= b -> continuity_pt (fn n) x)
  -> (forall (x : R), a <= x <= b -> continuity_pt (fun y => Lim_seq (fun n => fn n y)) x)
  -> (forall (n : nat) (x y : R), a <= x -> x <= y -> y <= b -> fn n x <= fn n y)
  -> CVU_dom fn (fun x => a <= x <= b).

Lemma CVN_CVU_r (fn : nat -> R -> R) (r : posreal) :
  CVN_r fn r -> forall x, (Rabs x < r) -> exists e : posreal,
    CVU (fun n => SP fn n) (fun x => Series (fun n => fn n x)) x e. *)
(* Series:
Require Import Reals Even Div2 Omega Psatz.
Require Import mathcomp.ssreflect.ssreflect.
Require Import Rcomplements Rbar Lim_seq Lub Hierarchy.
Require Import Continuity Derive Seq_fct Series.

Section Definitions.

Context {K : AbsRing} {V : NormedModule K}.

Definition is_pseries (a : nat -> V) (x:K) (l : V) :=
  is_series (fun k => scal (pow_n x k) (a k)) l.

Definition ex_pseries (a : nat -> V) (x : K) :=
  ex_series (fun k => scal (pow_n x k) (a k)).

End Definitions.

Definition PSeries (a : nat -> R) (x : R) : R :=
  Series (fun k => a k * x ^ k).

Lemma ex_pseries_dec {V : NormedModule R_AbsRing} (a : nat -> R) (x : R) :
  {ex_pseries a x} + {~ ex_pseries a x}.

Lemma is_pseries_R (a : nat -> R) (x l : R) :
  is_pseries a x l <-> is_series (fun n : nat => a n * x ^ n) l.

Lemma ex_pseries_R (a : nat -> R) (x : R) :
  ex_pseries a x <-> ex_series (fun n : nat => a n * x ^ n).

Lemma PSeries_eq (a : nat -> R) (x : R) :
  PSeries a x = Series (fun k => scal (pow_n x k) (a k)).

Lemma PSeries_1 (a : nat -> R) :
  PSeries a 1 = Series a.
Lemma ex_pseries_1 (a : nat -> R) :
  ex_pseries a 1 <-> ex_series a.

Lemma is_pseries_unique (a : nat -> R) (x l : R) :
  is_pseries a x l -> PSeries a x = l.
Lemma PSeries_correct (a : nat -> R) (x : R) :
  ex_pseries a x -> is_pseries a x (PSeries a x).

Lemma is_pseries_Reals (a : nat -> R) (x l : R) :
  is_pseries a x l <-> Pser a x l.

Section Extensionality.

Context {K : AbsRing} {V : NormedModule K}.

Lemma is_pseries_ext (a b : nat -> V) (x : K) (l:V) :
  (forall n, a n = b n) -> (is_pseries a x l)
    -> is_pseries b x l.

Lemma ex_pseries_ext (a b : nat -> V) (x : K) :
  (forall n, a n = b n) -> ex_pseries a x
    -> ex_pseries b x.

End Extensionality.

Lemma PSeries_ext (a b : nat -> R) (x : R) :
  (forall n, a n = b n) -> PSeries a x = PSeries b x.

Section ConvergenceCircle.

Context {K : AbsRing} {V : NormedModule K}.

Lemma is_pseries_0 (a : nat -> V) :
  is_pseries a zero (a O).

Lemma ex_pseries_0 (a : nat -> V) :
  ex_pseries a zero.

End ConvergenceCircle.

Lemma PSeries_0 (a : nat -> R) :
  PSeries a 0 = a O.

Definition CV_disk (a : nat -> R) (r : R) :=
  ex_series (fun n => Rabs (a n * r^n)).

Lemma CV_disk_le (a : nat -> R) (r1 r2 : R) :
  Rabs r1 <= Rabs r2 -> CV_disk a r2 -> CV_disk a r1.
Lemma CV_disk_correct (a : nat -> R) (x : R) :
  CV_disk a x -> ex_pseries a x.

Lemma CV_disk_0 (a : nat -> R) :
  CV_disk a 0.

Definition CV_radius (a : nat -> R) : Rbar :=
  Lub_Rbar (CV_disk a).

Lemma CV_radius_ge_0 (a : nat -> R) :
  Rbar_le (Finite 0) (CV_radius a).

Lemma CV_radius_bounded (a : nat -> R) :
  is_lub_Rbar (fun r => exists M, forall n, Rabs (a n * r ^ n) <= M) (CV_radius a).

Lemma CV_disk_inside (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> ex_series (fun n => Rabs (a n * x ^ n)).
Lemma CV_radius_inside (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> ex_pseries a x.

Lemma CV_disk_outside (a : nat -> R) (x : R) :
  Rbar_lt (CV_radius a) (Finite (Rabs x))
    -> ~ is_lim_seq (fun n => a n * x ^ n) 0.

Lemma CV_radius_ext (a b : nat -> R) :
  (forall n, a n = b n) -> CV_radius a = CV_radius b.

Lemma CV_disk_DAlembert_aux (a : nat -> R) (x k : R) :
  x <> 0 -> (forall n, a n <> 0) ->
  (is_lim_seq (fun n => Rabs (a (S n) / a n)) k
    <-> is_lim_seq (fun n => Rabs ((a (S n) * x^(S n)) / (a n * x ^ n))) (Rabs x * k)).

Lemma CV_disk_DAlembert (a : nat -> R) (x:R) l :
  (forall n:nat, a n <> 0) ->
  is_lim_seq (fun n:nat => Rabs (a (S n) / a n)) (Finite l) ->
  (l = 0 \/ (l <> 0 /\ Rabs x < / l))
    -> CV_disk a x.

Lemma CV_radius_finite_DAlembert (a : nat -> R) (l : R) :
  (forall n:nat, a n <> 0) -> 0 < l ->
  is_lim_seq (fun n:nat => Rabs (a (S n) / a n)) l ->
  CV_radius a = Finite (/l).

Lemma CV_radius_infinite_DAlembert (a : nat -> R) :
  (forall n:nat, a n <> 0) ->
  is_lim_seq (fun n:nat => Rabs (a (S n) / a n)) 0 ->
  CV_radius a = p_infty.

Lemma CV_radius_Reals_0 (a : nat -> R) (r : posreal) :
  Rbar_lt (Finite r) (CV_radius a) -> CVN_r (fun n x => a n * x ^ n) r.

Lemma CV_radius_Reals_1 (a : nat -> R) (r : posreal) :
  CVN_r (fun n x => a n * x ^ n) r -> Rbar_le (Finite r) (CV_radius a).

Lemma CV_radius_Reals_2 (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
  -> exists r : posreal, CVU (fun n x => sum_f_R0 (fun k => a k * x ^ k) n) (PSeries a) x r.

Section PS_plus.

Context {K : AbsRing} {V : NormedModule K}.

Definition PS_plus (a b : nat -> V) (n : nat) : V := plus (a n)  (b n).

Lemma is_pseries_plus (a b : nat -> V) (x :K) (la lb : V) :
  is_pseries a x la -> is_pseries b x lb
    -> is_pseries (PS_plus a b) x (plus la lb).

Lemma ex_pseries_plus (a b : nat -> V) (x : K) :
  ex_pseries a x -> ex_pseries b x
    -> ex_pseries (PS_plus a b) x.

End PS_plus.

Lemma PSeries_plus (a b : nat -> R) (x : R) :
  ex_pseries a x -> ex_pseries b x
    -> PSeries (PS_plus a b) x = PSeries a x + PSeries b x.

Lemma CV_disk_plus (a b : nat -> R) (x : R) :
  (CV_disk a x) -> (CV_disk b x)
  -> (CV_disk (PS_plus a b) x).
Lemma CV_radius_plus (a b : nat -> R) :
  Rbar_le (Rbar_min (CV_radius a) (CV_radius b)) (CV_radius (PS_plus a b)).

Section PS_scal.

Context {K : AbsRing} {V : NormedModule K}.

Definition PS_scal (c : K) (a : nat -> V) (n : nat) : V := scal c (a n).

Lemma is_pseries_scal (c : K) (a : nat -> V) (x : K) (l : V) :
  mult x c = mult c x -> is_pseries a x l -> is_pseries (PS_scal c a) x (scal c l).

Lemma ex_pseries_scal (c : K) (a : nat -> V) (x : K) :
  mult x c = mult c x -> ex_pseries a x -> ex_pseries (PS_scal c a) x.

End PS_scal.

Lemma PSeries_scal (c : R) (a : nat -> R) (x : R) :
  PSeries (PS_scal c a) x = c * PSeries a x.

Lemma CV_disk_scal (c : R) (a : nat -> R) (x : R) :
  (CV_disk a x)
  -> (CV_disk (PS_scal c a) x).

Lemma CV_radius_scal (c : R) (a : nat -> R) : c <> 0 ->
  (CV_radius (PS_scal c a)) = (CV_radius a).

Definition PS_scal_r (c : R) (a : nat -> R) (n : nat) : R :=
  a n * c.
Lemma PSeries_scal_r (c : R) (a : nat -> R) (x : R) :
  PSeries (PS_scal_r c a) x = PSeries a x * c.

Lemma CV_disk_scal_r (c : R) (a : nat -> R) (x : R) :
  (CV_disk a x)
  -> (CV_disk (PS_scal_r c a) x).
Lemma CV_radius_scal_r (c : R) (a : nat -> R) : c <> 0 ->
  (CV_radius (PS_scal_r c a)) = (CV_radius a).

Section PS_incr.

Context {K : AbsRing} {V : NormedModule K}.

Definition PS_incr_1 (a : nat -> V) (n : nat) : V :=
  match n with
    | 0 => zero
    | S n => a n
  end.

Lemma is_pseries_incr_1 (a : nat -> V) (x:K) (l : V) :
  is_pseries a x l -> is_pseries (PS_incr_1 a) x (scal x l).

Lemma ex_pseries_incr_1 (a : nat -> V) (x : K) :
  ex_pseries a x -> ex_pseries (PS_incr_1 a) x.

Fixpoint PS_incr_n (a : nat -> V) (n k : nat) : V :=
  match n with
    | O => a k
    | S n => PS_incr_1 (PS_incr_n a n) k
  end.

Lemma PS_incr_n_simplify (a : nat -> V) (n k : nat) :
  PS_incr_n a n k =
  match (le_lt_dec n k) with
    | left _ => a (k-n)%nat
    | right _ => zero
  end.

Lemma is_pseries_incr_n (a : nat -> V) (n : nat) (x : K) (l : V) :
  is_pseries a x l -> is_pseries (PS_incr_n a n) x (scal (pow_n x n) l).

Lemma ex_pseries_incr_n (a : nat -> V) (n : nat) (x : K) :
  ex_pseries a x -> ex_pseries (PS_incr_n a n) x.

Definition PS_decr_1 (a : nat -> V) (n : nat) : V := a (S n).

Lemma is_pseries_decr_1 (a : nat -> V) (x y : K) (l : V) :
  mult y x = one -> is_pseries a x l
    -> is_pseries (PS_decr_1 a) x (scal y (plus l (opp (a O)))).

Lemma ex_pseries_decr_1 (a : nat -> V) (x : K) :
 (x = zero \/ exists y, mult y x = one) ->
 ex_pseries a x -> ex_pseries (PS_decr_1 a) x.

Definition PS_decr_n (a : nat -> V) (n k : nat) : V := a (n + k)%nat.

Lemma is_pseries_decr_n (a : nat -> V) (n : nat) (x y:K) (l : V) :
  mult y x = one -> (0 < n)%nat -> is_pseries a x l
    -> is_pseries (PS_decr_n a n) x (scal (pow_n y n) (plus l (opp (sum_n (fun k => scal (pow_n x k) (a k)) (n-1)%nat)))).

Lemma ex_pseries_decr_n (a : nat -> V) (n : nat) (x : K) :
  (x = zero \/ exists y, mult y x = one) -> ex_pseries a x -> ex_pseries (PS_decr_n a n) x.

End PS_incr.

Lemma PSeries_incr_1 a x :
  PSeries (PS_incr_1 a) x = x * PSeries a x.

Lemma PSeries_incr_n (a : nat -> R) (n : nat) (x : R) :
  PSeries (PS_incr_n a n) x = x^n * PSeries a x.

Lemma PSeries_decr_1 (a : nat -> R) (x : R) :
  ex_pseries a x -> PSeries a x = a O + x * PSeries (PS_decr_1 a) x.

Lemma PSeries_decr_1_aux (a : nat -> R) (x : R) :
  a O = 0 -> (PSeries a x) = x * PSeries (PS_decr_1 a) x.

Lemma PSeries_decr_n (a : nat -> R) (n : nat) (x : R) :
  ex_pseries a x
    -> PSeries a x = sum_f_R0 (fun k => a k * x^k) n + x^(S n) * PSeries (PS_decr_n a (S n)) x.

Lemma PSeries_decr_n_aux (a : nat -> R) (n : nat) (x : R) :
  (forall k : nat, (k < n)%nat -> a k = 0)
    -> PSeries a x = x^n * PSeries (PS_decr_n a n) x.

Lemma CV_radius_incr_1 (a : nat -> R) :
  CV_radius (PS_incr_1 a) = CV_radius a.
Lemma CV_radius_decr_1 (a : nat -> R) :
  CV_radius (PS_decr_1 a) = CV_radius a.

Definition PS_mult (a b : nat -> R) n :=
  sum_f_R0 (fun k => a k * b (n - k)%nat) n.

Lemma is_pseries_mult (a b : nat -> R) (x la lb : R) :
  is_pseries a x la -> is_pseries b x lb
  -> Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b)
  -> is_pseries (PS_mult a b) x (la * lb).
Lemma ex_pseries_mult (a b : nat -> R) (x : R) :
  Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b)
  -> ex_pseries (PS_mult a b) x.
Lemma PSeries_mult (a b : nat -> R) (x : R) :
  Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b)
  -> PSeries (PS_mult a b) x = PSeries a x * PSeries b x.

Lemma is_pseries_odd_even (a : nat -> R) (x l1 l2 : R) :
  is_pseries (fun n => a (2*n)%nat) (x^2) l1 -> is_pseries (fun n => a (2*n+1)%nat) (x^2) l2
    -> is_pseries a x (l1 + x * l2).
Lemma ex_pseries_odd_even (a : nat -> R) (x : R) :
  ex_pseries (fun n => a (2*n)%nat) (x^2) -> ex_pseries (fun n => a (2*n+1)%nat) (x^2)
    -> ex_pseries a x.
Lemma PSeries_odd_even (a : nat -> R) (x : R) :
  ex_pseries (fun n => a (2*n)%nat) (x^2) -> ex_pseries (fun n => a (2*n+1)%nat) (x^2)
    -> PSeries a x = PSeries (fun n => a (2*n)%nat) (x^2) + x * PSeries (fun n => a (2*n+1)%nat) (x^2).

Lemma PSeries_const_0 : forall x, PSeries (fun _ => 0) x = 0.

Lemma CV_radius_const_0 : CV_radius (fun _ => 0) = p_infty.

Section PS_opp.

Context {K : AbsRing} {V : NormedModule K}.

Definition PS_opp (a : nat -> V) (n : nat) : V := opp (a n).

Lemma is_pseries_opp (a : nat -> V) (x :K) (l : V) :
  is_pseries a x l -> is_pseries (PS_opp a) x (opp l).

Lemma ex_pseries_opp (a : nat -> V) (x : K) :
  ex_pseries a x -> ex_pseries (PS_opp a) x.

End PS_opp.

Lemma PSeries_opp (a : nat -> R) (x : R) :
  PSeries (PS_opp a) x = - PSeries a x.

Lemma CV_radius_opp (a : nat -> R) :
  (CV_radius (PS_opp a)) = (CV_radius a).

Section PS_minus.

Context {K : AbsRing} {V : NormedModule K}.

Definition PS_minus (a b : nat -> V) (n : nat) : V := plus (a n) (opp (b n)).

Lemma is_pseries_minus (a b : nat -> V) (x:K) (la lb : V) :
  is_pseries a x la -> is_pseries b x lb
  -> is_pseries (PS_minus a b) x (plus la (opp lb)).

Lemma ex_pseries_minus (a b : nat -> V) (x : K) :
  ex_pseries a x -> ex_pseries b x
  -> ex_pseries (PS_minus a b) x.

End PS_minus.

Lemma PSeries_minus (a b : nat -> R) (x : R) :
  ex_pseries a x -> ex_pseries b x
  -> PSeries (PS_minus a b) x = PSeries a x - PSeries b x.

Lemma Abel (a : nat -> R) :
  Rbar_lt 0 (CV_radius a) -> Rbar_lt (CV_radius a) p_infty
  -> ex_pseries a (CV_radius a)
  -> filterlim (PSeries a) (at_left (CV_radius a)) (locally (PSeries a (CV_radius a))).

Lemma PSeries_continuity (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> continuity_pt (PSeries a) x.

Definition PS_derive (a : nat -> R) (n : nat) :=
  INR (S n) * a (S n).
Lemma CV_radius_derive (a : nat -> R) :
  CV_radius (PS_derive a) = CV_radius a.

Lemma is_derive_PSeries (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> is_derive (PSeries a) x (PSeries (PS_derive a) x).
Lemma ex_derive_PSeries (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> ex_derive (PSeries a) x.
Lemma Derive_PSeries (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> Derive (PSeries a) x = PSeries (PS_derive a) x.

Lemma is_pseries_derive (a : nat -> R) x :
  Rbar_lt (Rabs x) (CV_radius a)
    -> is_pseries (PS_derive a) x (Derive (PSeries a) x).
Lemma ex_pseries_derive (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> ex_pseries (PS_derive a) x.

Definition PS_derive_n (n : nat) (a : nat -> R) :=
  (fun k => (INR (fact (k + n)%nat) / INR (fact k)) * a (k + n)%nat).

Lemma is_derive_n_PSeries (n : nat) (a : nat -> R) :
  forall x, Rbar_lt (Rabs x) (CV_radius a)
    -> is_derive_n (PSeries a) n x (PSeries (PS_derive_n n a) x).
Lemma ex_derive_n_PSeries (n : nat) (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> ex_derive_n (PSeries a) n x.

Lemma Derive_n_PSeries (n : nat) (a : nat -> R) (x : R) :
  Rbar_lt (Finite (Rabs x)) (CV_radius a)
    -> Derive_n (PSeries a) n x = PSeries (PS_derive_n n a) x.

Lemma CV_radius_derive_n (n : nat) (a : nat -> R) :
  CV_radius (PS_derive_n n a) = CV_radius a.

Lemma Derive_n_coef (a : nat -> R) (n : nat) :
  Rbar_lt (Finite 0) (CV_radius a)
    -> Derive_n (PSeries a) n 0 = a n * (INR (fact n)).

Lemma PSeries_ext_recip (a b : nat -> R) (n : nat) :
  Rbar_lt (Finite 0) (CV_radius a) -> Rbar_lt (Finite 0) (CV_radius b)
  -> locally 0 (fun x => PSeries a x = PSeries b x)
    -> a n = b n.

Lemma mk_pseries (f : R -> R) (M : R) (r : Rbar) :
  (forall n x, Rbar_lt (Finite (Rabs x)) r
    -> (ex_derive_n f n x) /\ Rabs (Derive_n f n x) <= M)
  -> forall x, Rbar_lt (Finite (Rabs x)) r
    -> is_pseries (fun n => Derive_n f n 0 / INR (fact n))  x (f x). *)



Section Definitions.



Context {K : AbsRing} {V : NormedModule K}.



Definition is_pseries (a : nat -> V) (x:K) (l : V) :=

  is_series (fun k => scal (pow_n x k) (a k)) l.



Definition ex_pseries (a : nat -> V) (x : K) :=

  ex_series (fun k => scal (pow_n x k) (a k)).



End Definitions.



Definition PSeries (a : nat -> R) (x : R) : R :=

  Series (fun k => a k * x ^ k).



Lemma ex_pseries_dec {V : NormedModule R_AbsRing} (a : nat -> R) (x : R) :

  {ex_pseries a x} + {~ ex_pseries a x}.

Proof.

  apply ex_series_dec.

Qed.



Lemma is_pseries_R (a : nat -> R) (x l : R) :

  is_pseries a x l <-> is_series (fun n : nat => a n * x ^ n) l.

Proof.

  split ; apply is_series_ext ;

  intros n ; rewrite pow_n_pow /= ; apply Rmult_comm.

Qed.



Lemma ex_pseries_R (a : nat -> R) (x : R) :

  ex_pseries a x <-> ex_series (fun n : nat => a n * x ^ n).

Proof.

  split ; apply ex_series_ext ;

  intros n ; rewrite pow_n_pow /= ; apply Rmult_comm.

Qed.



Lemma PSeries_eq (a : nat -> R) (x : R) :

  PSeries a x = Series (fun k => scal (pow_n x k) (a k)).

Proof.

  apply Series_ext.

  intros n.

  apply Rmult_comm.

Qed.



Lemma PSeries_1 (a : nat -> R) :

  PSeries a 1 = Series a.

Proof.

  apply Series_ext => n.

  by rewrite pow1 Rmult_1_r.

Qed.

Lemma ex_pseries_1 (a : nat -> R) :

  ex_pseries a 1 <-> ex_series a.

Proof.

  assert (forall n : nat, scal (pow_n 1 n) (a n) = a n).

    now intros n ; rewrite pow_n_pow pow1 scal_one.

  split ; apply ex_series_ext => n ; by rewrite H.

Qed.



Lemma is_pseries_unique (a : nat -> R) (x l : R) :

  is_pseries a x l -> PSeries a x = l.

Proof.

  move => Ha; rewrite PSeries_eq.

  by apply is_series_unique.

Qed.

Lemma PSeries_correct (a : nat -> R) (x : R) :

  ex_pseries a x -> is_pseries a x (PSeries a x).

Proof.

  move => Ha; rewrite PSeries_eq.

  apply Series_correct.

  by apply Ha.

Qed.



Lemma is_pseries_Reals (a : nat -> R) (x l : R) :

  is_pseries a x l <-> Pser a x l.

Proof.

  split => H.

  move => e He ; set eps := mkposreal e He.

  apply (is_lim_seq_spec _ l) in H.

  case: (H eps) => {H} N H.

  exists N => n Hn.

  rewrite <- sum_n_Reals.

  rewrite (sum_n_ext _ (fun n0 : nat => scal (pow_n x n0) (a n0))).

  by apply H.

  intros k; rewrite pow_n_pow /=; apply Rmult_comm.

  apply (is_lim_seq_spec _ l).

  move => eps.

  case: (H eps (cond_pos eps)) => {H} N H.

  exists N => n Hn.

  rewrite (sum_n_ext _ (fun n0 : nat => a n0 * x ^ n0)).

  rewrite sum_n_Reals.

  by apply H.

  intros; now rewrite Rmult_comm pow_n_pow.

Qed.



Section Extensionality.



Context {K : AbsRing} {V : NormedModule K}.



Lemma is_pseries_ext (a b : nat -> V) (x : K) (l:V) :

  (forall n, a n = b n) -> (is_pseries a x l)

    -> is_pseries b x l.

Proof.

  move => Heq Ha.

  apply is_series_ext with (2 := Ha).

  move => n.

  by rewrite Heq.

Qed.



Lemma ex_pseries_ext (a b : nat -> V) (x : K) :

  (forall n, a n = b n) -> ex_pseries a x

    -> ex_pseries b x.

Proof.

  move => Heq [l Ha].

  exists l ; by apply is_pseries_ext with a.

Qed.



End Extensionality.



Lemma PSeries_ext (a b : nat -> R) (x : R) :

  (forall n, a n = b n) -> PSeries a x = PSeries b x.

Proof.

  move => Heq.

  apply Series_ext.

  move => n ;

  by rewrite Heq.

Qed.



Section ConvergenceCircle.



Context {K : AbsRing} {V : NormedModule K}.



Lemma is_pseries_0 (a : nat -> V) :

  is_pseries a zero (a O).

Proof.

  apply filterlim_ext with (fun _ => a O).

  elim => [ | n IH] /=.

  now rewrite sum_O scal_one.

  rewrite sum_Sn -IH /=.

  rewrite mult_zero_l.

  now rewrite scal_zero_l plus_zero_r.

  apply filterlim_const.

Qed.



Lemma ex_pseries_0 (a : nat -> V) :

  ex_pseries a zero.

Proof.

  exists (a O) ; by apply is_pseries_0.

Qed.



End ConvergenceCircle.



Lemma PSeries_0 (a : nat -> R) :

  PSeries a 0 = a O.

Proof.

  rewrite PSeries_eq.

  apply is_series_unique.

  apply @is_pseries_0.

Qed.



Definition CV_disk (a : nat -> R) (r : R) :=

  ex_series (fun n => Rabs (a n * r^n)).



Lemma CV_disk_le (a : nat -> R) (r1 r2 : R) :

  Rabs r1 <= Rabs r2 -> CV_disk a r2 -> CV_disk a r1.

Proof.

  move => H.

  apply @ex_series_le => n.

  rewrite /norm /= /abs /= Rabs_Rabsolu.

  rewrite ?Rabs_mult ; apply Rmult_le_compat_l.

  by apply Rabs_pos.

  rewrite -?RPow_abs ; apply pow_incr ; split.

  by apply Rabs_pos.

  by apply H.

Qed.

Lemma CV_disk_correct (a : nat -> R) (x : R) :

  CV_disk a x -> ex_pseries a x.

Proof.

  intros H; apply ex_series_Rabs.

  apply ex_series_ext with (2:=H).

  intros n; apply f_equal.

  now rewrite Rmult_comm pow_n_pow.

Qed.



Lemma CV_disk_0 (a : nat -> R) :

  CV_disk a 0.

Proof.

  exists (Rabs (a O)).

  apply (is_lim_seq_ext (fun _ => Rabs (a O)) _ (Rabs (a O))).

  elim => /= [ | n IH].

  by rewrite sum_O Rmult_1_r.

  by rewrite sum_Sn /= Rmult_0_l Rmult_0_r Rabs_R0 /plus /= Rplus_0_r.

  by apply is_lim_seq_const.

Qed.



Definition CV_radius (a : nat -> R) : Rbar :=

  Lub_Rbar (CV_disk a).



Lemma CV_radius_ge_0 (a : nat -> R) :

  Rbar_le (Finite 0) (CV_radius a).

Proof.

  rewrite /CV_radius /Lub_Rbar ;

  case: ex_lub_Rbar => /= l Hl.

  apply Hl, CV_disk_0.

Qed.



Lemma CV_radius_bounded (a : nat -> R) :

  is_lub_Rbar (fun r => exists M, forall n, Rabs (a n * r ^ n) <= M) (CV_radius a).

Proof.

  rewrite /CV_radius /Lub_Rbar ;

  case: ex_lub_Rbar => cv /= [ub lub].

  split.



  move => r /= [M Hr].



  have : forall y, Rabs y < Rabs r -> (CV_disk a) y.

    move => y Hy ; rewrite /CV_disk /=.

  set l := (Rabs (y / r)).

  assert (ex_series (fun n => M * l ^ n)).

  apply ex_series_ext with (fun n : nat => scal M (l ^ n)).

    by elim.

  apply: ex_series_scal_l.

  apply ex_series_geom.

  rewrite /l Rabs_Rabsolu Rabs_div.

  apply Rlt_div_l.

  apply Rle_lt_trans with (2 := Hy), Rabs_pos.

  by rewrite Rmult_1_l.

  have H : (Rabs r <> 0).

  apply Rgt_not_eq, Rle_lt_trans with (2 := Hy), Rabs_pos.

  contradict H.

  by rewrite H Rabs_R0.

  apply @ex_series_le with (2:=H) => n.

  rewrite /norm /= /abs /= Rabs_Rabsolu.

  replace (Rabs (a n * y ^ n)) with (Rabs (a n * r ^ n) * l^n).

  apply Rmult_le_compat_r.

  apply pow_le ; by apply Rabs_pos.

  by apply Hr.

  rewrite ?Rabs_mult Rmult_assoc ; apply Rmult_eq_compat_l.



  rewrite /l RPow_abs -Rabs_mult.

  apply f_equal.

  elim: n  => /= [ | n IH].

  ring.

  rewrite -IH ; field.

  have Hr0 : Rabs r <> 0.

    apply Rgt_not_eq, Rle_lt_trans with (2 := Hy), Rabs_pos.

  contradict Hr0 ; by rewrite Hr0 Rabs_R0.



  move => H.



  have : forall y, Rabs y < Rabs r -> Rbar_le (Finite (y)) cv.

  move => y Hy.

  apply ub.

  by apply (H y Hy).



  have Hc0 : Rbar_le (Finite 0) cv.

  apply ub, CV_disk_0.

  case: (cv) Hc0 => [c | | ] // Hc0 Hcv.



  case: (Rle_lt_dec r 0) => Hr0.

  by apply Rle_trans with (1 := Hr0).



  have H0 : forall e, 0 < e <= r -> r - e <= c.

    intros.

    apply Hcv.

    apply Rlt_le_trans with (2 := Rle_abs _).

    rewrite Rabs_pos_eq ; lra.



  apply Rnot_lt_le => H1.

  have H2: (c < ((c+r)/2) < r).

    lra.

  have H3 : 0 < ((r-c)/2) <= r.

    unfold Rbar_le in Hc0 ; lra.

  move: (H0 _ H3).

  lra.



  move => b Hb.

  apply lub => x Hx.

  apply Hb.

  apply ex_series_lim_0 in Hx.

  apply is_lim_seq_spec in Hx.

  case: (Hx (mkposreal _ Rlt_0_1)) => /= {Hx} N Hx.



  set M := fix f N := match N with

    | O => Rabs (a O * x ^ O)

    | S n => Rmax (f n) (Rabs (a (n) * x ^ (n))) end.

  exists (Rmax (M N) 1) => n.

  case: (le_lt_dec N n) => Hn.

  apply Rle_trans with (2 := Rmax_r _ _).

  move: (Hx n Hn).

  rewrite Rminus_0_r Rabs_Rabsolu.

  by apply Rlt_le.

  apply Rle_trans with (2 := Rmax_l _ _).

  elim: N n Hn {Hx} => [ | N IH] /= n Hn.

  by apply lt_n_O in Hn.

  apply lt_n_Sm_le, le_lt_eq_dec in Hn ; case: Hn => Hn.

  apply Rle_trans with (2 := Rmax_l _ _).

  by apply IH.

  rewrite Hn ; by apply Rle_trans with (2 := Rmax_r _ _), Rle_refl.

Qed.



Lemma CV_disk_inside (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> ex_series (fun n => Rabs (a n * x ^ n)).

Proof.

  move => Ha.

  assert (H : ~ ~ ex_series (fun n => Rabs (a n * x ^ n))).

    contradict Ha.

    apply Rbar_le_not_lt.

    rewrite /CV_radius /Lub_Rbar ;

    case: ex_lub_Rbar => l /= [ub lub].

    apply: lub => r Hr.

    apply Rnot_lt_le ; contradict Ha.

    move: Hr.

    apply CV_disk_le.

    by apply Rlt_le, Rlt_le_trans with (2 := Rle_abs _).

  by case: (ex_series_dec (fun n => Rabs (a n * x ^ n))).

Qed.

Lemma CV_radius_inside (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> ex_pseries a x.

Proof.

  move => Ha.

  by apply CV_disk_correct, CV_disk_inside.

Qed.



Lemma CV_disk_outside (a : nat -> R) (x : R) :

  Rbar_lt (CV_radius a) (Finite (Rabs x))

    -> ~ is_lim_seq (fun n => a n * x ^ n) 0.

Proof.

  case: (CV_radius_bounded a) => ub lub.

  move => Hx.

  have H : ~ (fun r : R => exists M : R, forall n : nat, Rabs (a n * r ^ n) <= M) x.

    contradict Hx ; apply Rbar_le_not_lt.

    apply ub.

    case: Hx => M Hx.

    exists M => n.

    by rewrite Rabs_mult RPow_abs Rabs_Rabsolu -Rabs_mult.

  contradict H.



  apply is_lim_seq_spec in H.

  case: (H (mkposreal _ Rlt_0_1)) => /= {Hx} N Hx.



  set M := fix f N := match N with

    | O => Rabs (a O * x ^ O)

    | S n => Rmax (f n) (Rabs (a (n) * x ^ (n))) end.

  exists (Rmax (M N) 1) => n.

  case: (le_lt_dec N n) => Hn.

  apply Rle_trans with (2 := Rmax_r _ _).

  move: (Hx n Hn).

  rewrite Rminus_0_r.

  by apply Rlt_le.

  apply Rle_trans with (2 := Rmax_l _ _).

  elim: N n Hn {Hx} => [ | N IH] /= n Hn.

  by apply lt_n_O in Hn.

  apply lt_n_Sm_le, le_lt_eq_dec in Hn ; case: Hn => Hn.

  apply Rle_trans with (2 := Rmax_l _ _).

  by apply IH.

  rewrite Hn ; by apply Rle_trans with (2 := Rmax_r _ _), Rle_refl.

Qed.



Lemma CV_radius_ext (a b : nat -> R) :

  (forall n, a n = b n) -> CV_radius a = CV_radius b.

Proof.

  move => Heq.

  rewrite /CV_radius /Lub_Rbar.

  case: ex_lub_Rbar => la [ub_a lub_a] ;

  case: ex_lub_Rbar => lb [ub_b lub_b] /=.

  apply Rbar_le_antisym.

  apply lub_a => x Hx.

  apply ub_b ; move: Hx.

  apply ex_series_ext => n ; by rewrite Heq.

  apply lub_b => x Hx.

  apply ub_a ; move: Hx.

  apply ex_series_ext => n ; by rewrite Heq.

Qed.



Lemma CV_disk_DAlembert_aux (a : nat -> R) (x k : R) :

  x <> 0 -> (forall n, a n <> 0) ->

  (is_lim_seq (fun n => Rabs (a (S n) / a n)) k

    <-> is_lim_seq (fun n => Rabs ((a (S n) * x^(S n)) / (a n * x ^ n))) (Rabs x * k)).

Proof.

  move => Hx Ha ; split => H.

  evar (l : Rbar).

  replace (Finite (Rabs x * k)) with l.

  apply is_lim_seq_ext with (fun n => Rabs x * Rabs (a (S n) / a n)).

  move => n ; rewrite ?Rabs_div => //=.

  rewrite ?Rabs_mult.

  field.

  split ; apply Rabs_no_R0 => //.

  by apply pow_nonzero.

  apply Rmult_integral_contrapositive_currified => //.

  by apply pow_nonzero.

  apply is_lim_seq_scal_l.

  apply H.

  by simpl.

  evar (l : Rbar).

  replace (Finite k) with l.

  apply is_lim_seq_ext with (fun n : nat => /Rabs x * Rabs (a (S n) * x ^ S n / (a n * x ^ n))).

  move => n ; rewrite /= ?Rabs_div ?Rabs_mult.

  field.

  repeat split ; apply Rabs_no_R0 => //.

  by apply pow_nonzero.

  by apply Ha.

  apply Rmult_integral_contrapositive_currified => //.

  by apply pow_nonzero.

  apply is_lim_seq_scal_l.

  apply H.

  apply Rbar_finite_eq ; field.

  apply Rabs_no_R0 => //.

Qed.



Lemma CV_disk_DAlembert (a : nat -> R) (x:R) l :

  (forall n:nat, a n <> 0) ->

  is_lim_seq (fun n:nat => Rabs (a (S n) / a n)) (Finite l) ->

  (l = 0 \/ (l <> 0 /\ Rabs x < / l))

    -> CV_disk a x.

Proof.

  move => Ha Hl H.

  case: (Req_dec x 0) => Hx.

  rewrite Hx.

  exists (Rabs (a O)).

  apply (is_lim_seq_ext (fun _ => Rabs (a O)) _ (Rabs (a 0%nat))).

  elim => /= [ | n IH].

  by rewrite sum_O Rmult_1_r.

  by rewrite sum_Sn /= Rmult_0_l Rmult_0_r Rabs_R0 /plus /= Rplus_0_r.

  apply is_lim_seq_const.



  apply ex_series_DAlembert with (Rabs x * l).

  case: H => H.

  rewrite H Rmult_0_r ; by apply Rlt_0_1.

  replace 1 with (/ l * l) by (field ; apply H).

  apply Rmult_lt_compat_r.

  apply Rnot_le_lt ; case => H0.

  case: H => H.

  apply Rle_not_lt.

  apply Rlt_le, Rlt_le_trans with 0.

  by apply Rinv_lt_0_compat.

  by apply Rabs_pos.

  by case: H.

  by apply H.

  move => n ; apply Rmult_integral_contrapositive_currified.

  by apply Ha.

  by apply pow_nonzero.

  by apply CV_disk_DAlembert_aux.

Qed.



Lemma CV_radius_finite_DAlembert (a : nat -> R) (l : R) :

  (forall n:nat, a n <> 0) -> 0 < l ->

  is_lim_seq (fun n:nat => Rabs (a (S n) / a n)) l ->

  CV_radius a = Finite (/l).

Proof.

  move => Ha Hl Hda.

  apply Rbar_le_antisym.

  rewrite /CV_radius /Lub_Rbar ;

  case: ex_lub_Rbar => /= cv [ub lub].

  apply lub => x Hax.

  case: (Rle_lt_dec x 0) => Hx.

  apply Rlt_le, Rle_lt_trans with 0.

  by apply Hx.

  by apply Rinv_0_lt_compat.

  rewrite -(Rabs_pos_eq x (Rlt_le _ _ Hx)).

  rewrite -(Rmult_1_l (/l)).

  replace (Rabs x) with ((Rabs x * l) /l) by (field ; apply Rgt_not_eq, Hl).

  apply Rmult_le_compat_r.

  by apply Rlt_le, Rinv_0_lt_compat.

  apply Rnot_lt_le.

  contradict Hax.

  have : CV_disk a x -> is_lim_seq (fun n => a n * x ^ n) 0.

    move => H.

    apply ex_series_lim_0.

    by apply ex_series_Rabs.

  move => H H0.

  move: (H H0) => {H H0}.

  apply not_ex_series_DAlembert with (Rabs x * l) => //.

  move => n.

  apply Rmult_integral_contrapositive_currified => //.

  by apply pow_nonzero, Rgt_not_eq.

  apply CV_disk_DAlembert_aux.

  by apply Rgt_not_eq.

  by apply Ha.

  by apply Hda.



  apply Rbar_not_lt_le.

  move : (CV_disk_outside a).

  rewrite /CV_radius /Lub_Rbar ;

  case: ex_lub_Rbar ;

  case => [cv | | ] /= [ub lub] Hnot_ex H ; try by auto.

  suff H0 : cv < ((cv+/l)/2) < /l.

  absurd (ex_series (fun n => Rabs (a n * ((cv+/l)/2)^n))).



  suff H1 : cv < Rabs ((cv + / l) / 2).

  move: (Hnot_ex ((cv + / l) / 2) H1) => {Hnot_ex} Hnot_ex.

  contradict Hnot_ex ; by apply ex_series_lim_0, ex_series_Rabs.

  apply Rlt_le_trans with (2 := Rle_abs _), H0.

  apply (CV_disk_DAlembert) with l.

  by apply Ha.

  by apply Hda.

  right ; split.

  by apply Rgt_not_eq.

  rewrite Rabs_pos_eq.

  by apply H0.

  apply Rlt_le, Rle_lt_trans with (2 := proj1 H0).

  apply ub.

  exists (Rabs (a O)).

  apply (is_lim_seq_ext (fun _ => Rabs (a O)) _ (Rabs (a 0%nat))).

    elim => [ | n IH] /=.

    by rewrite sum_O Rmult_1_r.

    by rewrite sum_Sn /= Rmult_0_l Rmult_0_r Rabs_R0 /plus /= Rplus_0_r.

    by apply is_lim_seq_const.

  lra.

  case: (ub 0) => //.

  exists (Rabs (a O)).

  apply (is_lim_seq_ext (fun _ => Rabs (a O)) _ (Rabs (a 0%nat))).

    elim => [ | n IH] /=.

    by rewrite sum_O Rmult_1_r.

    by rewrite sum_Sn /= Rmult_0_l Rmult_0_r Rabs_R0 /plus /= Rplus_0_r.

    by apply is_lim_seq_const.

Qed.



Lemma CV_radius_infinite_DAlembert (a : nat -> R) :

  (forall n:nat, a n <> 0) ->

  is_lim_seq (fun n:nat => Rabs (a (S n) / a n)) 0 ->

  CV_radius a = p_infty.

Proof.

  move => Ha Hda.

  rewrite /CV_radius /Lub_Rbar ;

  case: ex_lub_Rbar ; case => [cv | | ] //= [ub lub] ;

  have : False => //.

  have H : CV_disk a (cv + 1).

    have H : 0 < cv + 1.

      apply Rlt_le_trans with (0+1).

      rewrite Rplus_0_l ; by apply Rlt_0_1.

      apply Rplus_le_compat_r.

      apply ub.

      exists (Rabs (a O)).

      apply (is_lim_seq_ext (fun _ => Rabs (a O)) _ (Rabs (a 0%nat))).

      elim => [ | k IH] /=.

      by rewrite sum_O Rmult_1_r.

      by rewrite sum_Sn /= Rmult_0_l Rmult_0_r Rabs_R0 /plus /= Rplus_0_r.

      by apply is_lim_seq_const.



    apply ex_series_DAlembert with 0.

    by apply Rlt_0_1.

    move => n ; apply Rmult_integral_contrapositive_currified.

    by[].

    by apply Rgt_not_eq, pow_lt.

  rewrite -(Rmult_0_r (Rabs (cv + 1))).

  apply (CV_disk_DAlembert_aux a (cv + 1)).

  by apply Rgt_not_eq.

  by [].

  by [].

  move: (ub (cv+1) H).

  by apply Rbar_lt_not_le, Rlt_n_Sn.

  case: (ub 0) => //.

  exists (Rabs (a O)).

  apply (is_lim_seq_ext (fun _ => Rabs (a O)) _ (Rabs (a 0%nat))).

  elim => [ | k IH] /=.

  by rewrite sum_O Rmult_1_r.

  by rewrite sum_Sn /= Rmult_0_l Rmult_0_r Rabs_R0 /plus /= Rplus_0_r.

  by apply is_lim_seq_const.

Qed.



Lemma CV_radius_Reals_0 (a : nat -> R) (r : posreal) :

  Rbar_lt (Finite r) (CV_radius a) -> CVN_r (fun n x => a n * x ^ n) r.

Proof.

  move => Hr.

  rewrite /CVN_r /Boule.

  have H := CV_radius_bounded a.

  exists (fun n => Rabs (a n * r ^ n)).

  exists (Series (fun n => Rabs (a n * r ^ n))) ; split.

  rewrite -(Rabs_pos_eq r (Rlt_le _ _ (cond_pos r))) in Hr.

  apply CV_disk_inside in Hr.

  apply Lim_seq_correct' in Hr ;

  rewrite -/(Series (fun n : nat => Rabs (a n * r ^ n))) in Hr.

  move => e He.

  apply is_lim_seq_spec in Hr.

  case: (Hr (mkposreal e He)) => /= {Hr} N Hr.

  exists N => n Hn.

  replace (sum_f_R0 (fun k : nat => Rabs (Rabs (a k * r ^ k))) n)

    with (sum_f_R0 (fun k : nat => (Rabs (a k * r ^ k))) n).

  rewrite <- sum_n_Reals; by apply Hr.

  elim: n {Hn} => /= [ | n IH] ; rewrite Rabs_Rabsolu.

  by [].

  by rewrite IH.

  move => n x Hx.

  rewrite ?Rabs_mult -?RPow_abs.

  apply Rmult_le_compat_l.

  by apply Rabs_pos.

  apply pow_incr ; split.

  by apply Rabs_pos.

  rewrite (Rabs_pos_eq r).

  rewrite Rminus_0_r in Hx.

  by apply Rlt_le.

  by apply Rlt_le, r.

Qed.



Lemma CV_radius_Reals_1 (a : nat -> R) (r : posreal) :

  CVN_r (fun n x => a n * x ^ n) r -> Rbar_le (Finite r) (CV_radius a).

Proof.

  case => An [l [H H0]].

  have H1 : is_lub_Rbar (CV_disk a) (CV_radius a).

    rewrite /CV_radius /Lub_Rbar ; by case: ex_lub_Rbar.

  have H2 : forall (y : R), 0 < y < r -> (CV_disk a y).

    move => y Hy.

    apply @ex_series_le with An.

    move => n ; rewrite /norm /= /abs /= Rabs_Rabsolu.

    apply H0 ; rewrite /Boule Rabs_pos_eq Rminus_0_r.

    by apply Hy.

    by apply Rlt_le, Hy.

    exists l.

    apply (is_lim_seq_spec _ l).

    intros eps.

    case: (H eps (cond_pos eps)) => N {H} H.

    exists N => n Hn.

    set v := sum_n _ _.

    replace v with (sum_n (fun k : nat => Rabs (An k)) n).

    rewrite sum_n_Reals; by apply H.

    rewrite /v {v}.

    elim: n {Hn} => /= [ | n IH].

    rewrite !sum_O ; apply Rabs_pos_eq.

    apply Rle_trans with (Rabs (a O * 0 ^ O)).

    by apply Rabs_pos.

    apply H0 ; rewrite /Boule Rminus_0_r Rabs_R0 ; by apply r.

    rewrite !sum_Sn IH Rabs_pos_eq.

    by [].

    apply Rle_trans with (Rabs (a (S n) * 0 ^ (S n))).

    by apply Rabs_pos.

    apply H0 ; rewrite /Boule Rminus_0_r Rabs_R0 ; by apply r.

  have H3  : forall y, 0 < y < r -> Rbar_le (Finite (y)) (CV_radius a).

    move => y Hy.

    by apply H1, H2.

    have H4 := CV_radius_ge_0 a.

    case: (CV_radius a) H3 H4 => /= [cv | | ] // H3 H4.

    apply Rnot_lt_le => /= H5.

    have H6 : 0 < (cv+r)/2 < r.

      lra.

    move: (H3 _ H6).

    lra.

Qed.



Lemma CV_radius_Reals_2 (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

  -> exists r : posreal, CVU (fun n x => sum_f_R0 (fun k => a k * x ^ k) n) (PSeries a) x r.

Proof.

  move => Hx.

  have H : exists r : posreal, Rabs x < r /\ Rbar_lt (Finite r) (CV_radius a).

    case: (CV_radius a) Hx => /= [cv | | ] Hx.

    have H : 0 < (Rabs x + cv)/2.

      generalize (Rabs_pos x) ; lra.

    exists (mkposreal _ H) => /=.

    lra.

    have H : 0 < Rabs x + 1.

      apply Rle_lt_0_plus_1, Rabs_pos.

    exists (mkposreal _ H) => /=.

    split.

    by apply Rlt_plus_1.

    by [].

    by [].

  case: H => r H.

  apply CVN_CVU_r with r.

  by apply CV_radius_Reals_0, H.

  by apply H.

Qed.



Section PS_plus.



Context {K : AbsRing} {V : NormedModule K}.



Definition PS_plus (a b : nat -> V) (n : nat) : V := plus (a n)  (b n).



Lemma is_pseries_plus (a b : nat -> V) (x :K) (la lb : V) :

  is_pseries a x la -> is_pseries b x lb

    -> is_pseries (PS_plus a b) x (plus la lb).

Proof.

  move => Ha Hb.

  apply filterlim_ext with (f:=

    (fun n => plus (sum_n (fun k => scal (pow_n x k) (a k)) n) (sum_n (fun k => scal (pow_n x k) (b k)) n))).

  elim => [ | n IH].

  simpl ; rewrite /PS_plus !sum_O.

  now repeat rewrite scal_one.

  simpl ; rewrite !sum_Sn -IH /PS_plus.

  generalize (sum_n (fun k : nat => scal (pow_n x k) (a k)) n) => a' ;

  generalize (sum_n (fun k : nat => scal (pow_n x k) (b k)) n) => b'.

  repeat rewrite -plus_assoc; apply f_equal.

  rewrite plus_comm -plus_assoc; apply f_equal.

  rewrite scal_distr_l; apply plus_comm.

  now apply filterlim_comp_2 with (3 := filterlim_plus _ _).

Qed.



Lemma ex_pseries_plus (a b : nat -> V) (x : K) :

  ex_pseries a x -> ex_pseries b x

    -> ex_pseries (PS_plus a b) x.

Proof.

  move => [la Ha] [lb Hb].

  exists (plus la lb).

  by apply is_pseries_plus.

Qed.



End PS_plus.



Lemma PSeries_plus (a b : nat -> R) (x : R) :

  ex_pseries a x -> ex_pseries b x

    -> PSeries (PS_plus a b) x = PSeries a x + PSeries b x.

Proof.

  intros Ha Hb.

  apply is_pseries_unique.

  apply: is_pseries_plus ; rewrite PSeries_eq ;

  apply Series_correct.

  by apply Ha.

  by apply Hb.

Qed.



Lemma CV_disk_plus (a b : nat -> R) (x : R) :

  (CV_disk a x) -> (CV_disk b x)

  -> (CV_disk (PS_plus a b) x).

Proof.

  move => Ha Hb.

  move: (ex_series_plus _ _ Ha Hb).

  apply @ex_series_le => n ; rewrite /norm /= /abs /= Rabs_Rabsolu.

  rewrite Rmult_plus_distr_r.

  by apply Rabs_triang.

Qed.

Lemma CV_radius_plus (a b : nat -> R) :

  Rbar_le (Rbar_min (CV_radius a) (CV_radius b)) (CV_radius (PS_plus a b)).

Proof.

  wlog: a b / (Rbar_le (CV_radius a) (CV_radius b)) => [ Hw | Hle ].

    case: (Rbar_le_lt_dec (CV_radius a) (CV_radius b)) => Hle.

    by apply Hw.

    rewrite Rbar_min_comm.

    rewrite (CV_radius_ext (PS_plus a b) (PS_plus b a)).

    by apply Hw, Rbar_lt_le.

    now intros n ; apply Rplus_comm.



  replace (Rbar_min (CV_radius a) (CV_radius b)) with (CV_radius a).



  apply is_lub_Rbar_subset

    with (CV_disk (PS_plus a b))

    (fun x => (CV_disk a x) /\ (CV_disk b x)).

  move => x [Ha Hb] ; by apply CV_disk_plus.

  rewrite /CV_radius /Lub_Rbar ; by case: ex_lub_Rbar.



  have Ha : is_lub_Rbar (fun x : R => CV_disk a x) (CV_radius a).

    rewrite /CV_radius /Lub_Rbar ; by case: ex_lub_Rbar.

  have Hb : is_lub_Rbar (fun x : R => CV_disk b x) (CV_radius b).

    rewrite /CV_radius /Lub_Rbar ; by case: ex_lub_Rbar.



  split.

  intros y [Hay Hby].

  by apply Ha.



  case: (Rbar_le_lt_or_eq_dec _ _ (CV_radius_ge_0 a)) => Ha0.

  intros c Hc.

  assert (Rbar_le 0 c).

    apply Hc.

    split ; by apply CV_disk_0.

  case: c Hc H => [c | | ] //= Hc H.

  2: by case: (CV_radius a).

  apply Rbar_not_lt_le => Hac.

  move: (Rbar_lt_le_trans _ _ _ Hac Hle) => Hbc.



  eapply Rbar_le_not_lt.

  apply (Hc ((c + Rbar_min (c + 1) (CV_radius a)) / 2)).



  assert (Rbar_lt (Rabs ((c + Rbar_min (c + 1) (CV_radius a)) / 2)) (CV_radius a)).

    case: (CV_radius a) Hac => //= l Hl.

    rewrite Rabs_pos_eq.

    apply Rlt_div_l.

    by apply Rlt_0_2.

    replace (l * 2) with (l+l) by ring.

    apply Rplus_lt_le_compat => //.

    by apply Rmin_r.

    apply Rdiv_le_0_compat.

    apply Rplus_le_le_0_compat => //.

    apply Rmin_case.

    apply Rplus_le_le_0_compat => //.

    by apply Rle_0_1.

    now eapply Rle_trans, Rlt_le, Hl.

    by apply Rlt_0_2.

  split ; apply CV_disk_inside.

  by [].

  now eapply Rbar_lt_le_trans, Hle.

  case: (CV_radius a) Hac => [l | | ] //= Hl.

  apply Rmin_case.

  apply Rlt_div_r.

  by apply Rlt_0_2.

  apply Rminus_lt_0 ; simpl ; ring_simplify.

  by apply Rlt_0_1.

  apply Rlt_div_r.

  by apply Rlt_0_2.

  apply Rminus_lt_0 ; simpl ; ring_simplify.

  by rewrite Rplus_comm -Rminus_lt_0.

  apply Rlt_div_r.

  by apply Rlt_0_2.

  apply Rminus_lt_0 ; simpl ; ring_simplify.

  by apply Rlt_0_1.



  rewrite -Ha0 in Ha Hle |- *.

  intros c Hc.

  apply Hc ; split ; by apply CV_disk_0.



  apply Rbar_min_case_strong => //.

  by apply Rbar_le_antisym.

Qed.



Section PS_scal.



Context {K : AbsRing} {V : NormedModule K}.



Definition PS_scal (c : K) (a : nat -> V) (n : nat) : V := scal c (a n).



Lemma is_pseries_scal (c : K) (a : nat -> V) (x : K) (l : V) :

  mult x c = mult c x -> is_pseries a x l -> is_pseries (PS_scal c a) x (scal c l).

Proof.

  move => Hx Ha.

  apply (filterlim_ext (fun n => scal c (sum_n (fun k => scal (pow_n x k) (a k)) n))).

  elim => [ | n IH].

  simpl ; rewrite /PS_scal.

  rewrite !sum_O.

  now repeat rewrite scal_one.

  simpl ; rewrite !sum_Sn -IH /PS_scal.

  rewrite scal_distr_l; apply f_equal.

  rewrite 2! scal_assoc.

  apply f_equal2.

  rewrite -/(pow_n x (S n)).

  clear -Hx.

  elim: (S n) => {n} /= [ | n IH].

  by rewrite mult_one_l mult_one_r.

  by rewrite -mult_assoc -IH 2!mult_assoc Hx.

  by [].

  now apply filterlim_comp with (2 := filterlim_scal_r _ _).

Qed.



Lemma ex_pseries_scal (c : K) (a : nat -> V) (x : K) :

  mult x c = mult c x -> ex_pseries a x -> ex_pseries (PS_scal c a) x.

Proof.

  move => Hx [l Ha].

  exists (scal c l).

  by apply is_pseries_scal.

Qed.



End PS_scal.



Lemma PSeries_scal (c : R) (a : nat -> R) (x : R) :

  PSeries (PS_scal c a) x = c * PSeries a x.

Proof.

  rewrite -Series_scal_l.

  apply Series_ext.

  move => n /=.

  apply Rmult_assoc.

Qed.



Lemma CV_disk_scal (c : R) (a : nat -> R) (x : R) :

  (CV_disk a x)

  -> (CV_disk (PS_scal c a) x).

Proof.

  move => Ha.

  apply ex_series_ext with (fun n => Rabs c * Rabs (a n * x ^ n)).

  move => n ; rewrite -Rabs_mult ; apply f_equal ;

  by rewrite /PS_scal /= Rmult_assoc.

  apply @ex_series_scal.

  by apply Ha.

Qed.



Lemma CV_radius_scal (c : R) (a : nat -> R) : c <> 0 ->

  (CV_radius (PS_scal c a)) = (CV_radius a).

Proof.

  rewrite /CV_radius /Lub_Rbar ;

  case: ex_lub_Rbar => la [ub_a lub_a] ;

  case: ex_lub_Rbar => lc [ub_c lub_c] /= Hc.

  apply Rbar_le_antisym.

  apply lub_a => x Hx.

  apply ub_c.

  assert (CV_disk (PS_scal (/c) (PS_scal c a)) x).

  by apply CV_disk_scal.

  move: H ; apply ex_series_ext => n.

  apply f_equal.

  rewrite /PS_scal /scal /= /mult /= ; by field.

  apply lub_c => x Hx.

  apply ub_a.

  by apply CV_disk_scal.

Qed.



Definition PS_scal_r (c : R) (a : nat -> R) (n : nat) : R :=

  a n * c.

Lemma PSeries_scal_r (c : R) (a : nat -> R) (x : R) :

  PSeries (PS_scal_r c a) x = PSeries a x * c.

Proof.

  rewrite -Series_scal_r.

  apply Series_ext.

  move => n /=.

  rewrite /PS_scal_r ; ring.

Qed.



Lemma CV_disk_scal_r (c : R) (a : nat -> R) (x : R) :

  (CV_disk a x)

  -> (CV_disk (PS_scal_r c a) x).

Proof.

  move => Ha.

  apply ex_series_ext with (fun n => Rabs c * Rabs (a n * x ^ n)).

  move => n ; rewrite -Rabs_mult ; apply f_equal ;

  rewrite /PS_scal_r /= ; ring.

  by apply @ex_series_scal ; apply Ha.

Qed.

Lemma CV_radius_scal_r (c : R) (a : nat -> R) : c <> 0 ->

  (CV_radius (PS_scal_r c a)) = (CV_radius a).

Proof.

  intros Hc.

  rewrite -(CV_radius_scal c a).

  apply CV_radius_ext => n.

  apply Rmult_comm.

  by [].

Qed.



Section PS_incr.



Context {K : AbsRing} {V : NormedModule K}.



Definition PS_incr_1 (a : nat -> V) (n : nat) : V :=

  match n with

    | 0 => zero

    | S n => a n

  end.



Lemma is_pseries_incr_1 (a : nat -> V) (x:K) (l : V) :

  is_pseries a x l -> is_pseries (PS_incr_1 a) x (scal x l).

Proof.

  move => Ha.

  apply filterlim_ext_loc with  (fun n : nat => scal x (sum_n (fun k => scal (pow_n x k) (a k)) (pred n))).

  exists 1%nat; intros n; case n.

  intros Hn; contradict Hn ; apply lt_n_O.

  clear n; intros n _ ;induction n.

  now rewrite /= !sum_Sn !sum_O /= mult_one_r 2!scal_one plus_zero_l.

  apply trans_eq with (plus

   (sum_n (fun k : nat => scal (pow_n x k) (PS_incr_1 a k)) (S n))

      (scal (pow_n x (S (S n))) (PS_incr_1 a (S (S n))))).

 2: rewrite /= !sum_Sn ; reflexivity.

 rewrite -IHn; simpl.

 rewrite !sum_Sn scal_distr_l; apply f_equal.

 now rewrite scal_assoc.

 apply filterlim_comp with (f:= fun n => pred n) (G:=eventually)

  (g:=fun n => scal x (sum_n (fun k : nat => scal (pow_n x k) (a k)) n)).

 apply eventually_subseq_loc.

 exists 1%nat.

 intros n Hn.

 rewrite -pred_Sn.

 now apply lt_pred_n_n.

 now apply filterlim_comp with (2 := filterlim_scal_r _ _).

Qed.



Lemma ex_pseries_incr_1 (a : nat -> V) (x : K) :

  ex_pseries a x -> ex_pseries (PS_incr_1 a) x.

Proof.

  move => [l Ha] ; exists (scal x l) ; by apply is_pseries_incr_1.

Qed.



Fixpoint PS_incr_n (a : nat -> V) (n k : nat) : V :=

  match n with

    | O => a k

    | S n => PS_incr_1 (PS_incr_n a n) k

  end.



Lemma PS_incr_n_simplify (a : nat -> V) (n k : nat) :

  PS_incr_n a n k =

  match (le_lt_dec n k) with

    | left _ => a (k-n)%nat

    | right _ => zero

  end.

Proof.

  case: le_lt_dec => H.

  elim: n k H => [ | n IH] k H.

  rewrite /PS_incr_n ; by case: k H.

  case: k H => [ | k] H.

  by apply le_Sn_0 in H.

  rewrite /PS_incr_n -/PS_incr_n /PS_incr_1.

  rewrite IH.

  apply f_equal.

  by elim: n k H {IH} => /= [ | n IH] k H.

  by apply le_S_n.

  elim: n k H => [ | n IH] k H.

  by apply lt_n_O in H.

  rewrite /PS_incr_n -/PS_incr_n /PS_incr_1.

  case: k H => [ | k] H.

  by [].

  by apply IH, lt_S_n.

Qed.



Lemma is_pseries_incr_n (a : nat -> V) (n : nat) (x : K) (l : V) :

  is_pseries a x l -> is_pseries (PS_incr_n a n) x (scal (pow_n x n) l).

Proof.

  move => Ha.

  elim: n => /= [ | n IH].

  by rewrite scal_one.

  rewrite -scal_assoc.

  by apply is_pseries_incr_1.

Qed.



Lemma ex_pseries_incr_n (a : nat -> V) (n : nat) (x : K) :

  ex_pseries a x -> ex_pseries (PS_incr_n a n) x.

Proof.

  move => [l Ha].

  exists (scal (pow_n x n) l) ; by apply is_pseries_incr_n.

Qed.



Definition PS_decr_1 (a : nat -> V) (n : nat) : V := a (S n).



Lemma is_pseries_decr_1 (a : nat -> V) (x y : K) (l : V) :

  mult y x = one -> is_pseries a x l

    -> is_pseries (PS_decr_1 a) x (scal y (plus l (opp (a O)))).

Proof.

  move => Hx Ha.

  apply filterlim_ext with  (fun n : nat => scal y

    (sum_n (fun k => scal (pow_n x (S k)) (a (S k))) n)).

  intros n; induction n; unfold PS_decr_1; simpl.

  rewrite !sum_O mult_one_r scal_one scal_assoc.

  rewrite Hx; try assumption.

  apply @scal_one.

  rewrite !sum_Sn -IHn.

  rewrite scal_distr_l; apply f_equal.

  rewrite scal_assoc (mult_assoc y).

  rewrite Hx.

  now rewrite mult_one_l.

  apply filterlim_comp with (2 := filterlim_scal_r _ _).

  apply filterlim_ext with  (fun n : nat => plus

    (sum_n (fun k => scal (pow_n x k) (a k)) (S n)) (opp (a 0%nat))).

  intros n; induction n; simpl.

  rewrite sum_Sn !sum_O /= mult_one_r scal_one.

  rewrite plus_comm plus_assoc.

  now rewrite plus_opp_l plus_zero_l.

  rewrite !sum_Sn -IHn.

  apply sym_eq; rewrite plus_comm plus_assoc.

  apply f_equal2;[idtac|reflexivity].

  now rewrite !sum_Sn plus_comm.

  apply filterlim_comp_2 with (3 := filterlim_plus _ _).

  apply filterlim_comp with (f:= fun x => S x) (2:=Ha).

  apply eventually_subseq; intros n; omega.

  apply filterlim_const.

Qed.



Lemma ex_pseries_decr_1 (a : nat -> V) (x : K) :

 (x = zero \/ exists y, mult y x = one) ->

 ex_pseries a x -> ex_pseries (PS_decr_1 a) x.

Proof.

 case => [H | [y Hx]] [l Ha].

 rewrite H ; by apply ex_pseries_0.

 exists (scal y (plus l (opp (a 0%nat)))).

 now apply is_pseries_decr_1.

Qed.



Definition PS_decr_n (a : nat -> V) (n k : nat) : V := a (n + k)%nat.



Lemma is_pseries_decr_n (a : nat -> V) (n : nat) (x y:K) (l : V) :

  mult y x = one -> (0 < n)%nat -> is_pseries a x l

    -> is_pseries (PS_decr_n a n) x (scal (pow_n y n) (plus l (opp (sum_n (fun k => scal (pow_n x k) (a k)) (n-1)%nat)))).

Proof.

  move => Hx Hn Ha.

  case: n Hn => [ | n] Hn.

  by apply lt_irrefl in Hn.

  clear Hn ; simpl ; rewrite -minus_n_O /PS_decr_n /=.

  elim: n => /= [ | n IH].

  rewrite sum_O scal_one mult_one_r.

  now apply is_pseries_decr_1.

  set (ln := (scal (mult y (pow_n y n))

          (plus l (opp (sum_n (fun k : nat => scal (pow_n x k) (a k)) n))))) in IH.

  rewrite !sum_Sn /=.

  replace (scal (mult y (mult y (pow_n y n)))

     (plus l

        (opp

           (plus (sum_n (fun k : nat => scal (pow_n x k) (a k)) n)

              (scal (mult x (pow_n x n)) (a (S n)))))))

  with (scal y (plus ln (opp (a (S (n + 0)))))).

  assert (Y:is_pseries (fun k : nat => a (S (n + k))) x ln).

  apply IH.

  move: (is_pseries_decr_1 (fun k : nat => a (S (n + k))) x y ln Hx Y).

  rewrite /PS_decr_1 /=.

  apply is_pseries_ext => k.

  apply f_equal ; ring.

  rewrite -scal_assoc.

  apply f_equal; unfold ln.

  repeat rewrite (scal_distr_l _ l).

  rewrite -plus_assoc; apply f_equal.

  rewrite opp_plus scal_distr_l; apply f_equal.

  rewrite plus_0_r -scal_opp_l scal_assoc.

  apply trans_eq with (scal (opp (one : K)) (a (S n))).

  now rewrite scal_opp_l scal_one.

  apply f_equal2; try reflexivity.

  rewrite <- opp_mult_r; apply f_equal.

  clear -Hx.

  rewrite -?/(pow_n _ (S _)).

  elim: (S n) => {n} /= [ | n IH].

  by rewrite mult_one_l.

  rewrite -(pow_n_comm_1 x) mult_assoc.

  rewrite -(mult_assoc y (pow_n y n) (pow_n x n)).

  by rewrite -IH mult_one_r.

Qed.



Lemma ex_pseries_decr_n (a : nat -> V) (n : nat) (x : K) :

  (x = zero \/ exists y, mult y x = one) -> ex_pseries a x -> ex_pseries (PS_decr_n a n) x.

Proof.

  intros Hx H.

  induction n.

  unfold PS_decr_n; now simpl.

  apply ex_pseries_ext with ((PS_decr_1 (PS_decr_n a n))).

  intros m; unfold PS_decr_1, PS_decr_n.

  apply f_equal; ring.

  apply ex_pseries_decr_1.

  apply Hx.

  now apply IHn.

Qed.



End PS_incr.



Lemma PSeries_incr_1 a x :

  PSeries (PS_incr_1 a) x = x * PSeries a x.

Proof.

  rewrite -Series_scal_l.

  unfold PSeries, Series.

  rewrite -(Lim_seq_incr_1 (sum_n (fun k : nat => PS_incr_1 a k * x ^ k))) /=.

  apply f_equal, Lim_seq_ext.

  case.

  rewrite sum_Sn !sum_O /= /plus /zero /=.

  ring.

  elim => /= [ | n IH].

  rewrite !sum_Sn !sum_O /= /plus /zero /=.

  ring.

  rewrite sum_Sn IH !sum_Sn /= /plus /=.

  ring.

Qed.



Lemma PSeries_incr_n (a : nat -> R) (n : nat) (x : R) :

  PSeries (PS_incr_n a n) x = x^n * PSeries a x.

Proof.

  elim: n => /= [ | n IH].

  by rewrite Rmult_1_l.

  rewrite Rmult_assoc.

  by rewrite PSeries_incr_1 IH.

Qed.



Lemma PSeries_decr_1 (a : nat -> R) (x : R) :

  ex_pseries a x -> PSeries a x = a O + x * PSeries (PS_decr_1 a) x.

Proof.

  intros Ha.

  case: (Req_dec x 0) => Hx.

  rewrite Hx PSeries_0 ; ring.

  move: (is_pseries_decr_1 a x (/x) (PSeries a x) (Rinv_l _ Hx)

    (PSeries_correct _ _ Ha)) => Hb.

  rewrite (is_pseries_unique _ _ _ Hb).

  rewrite /plus /opp /scal /= /mult /=.

  now field.

Qed.



Lemma PSeries_decr_1_aux (a : nat -> R) (x : R) :

  a O = 0 -> (PSeries a x) = x * PSeries (PS_decr_1 a) x.

Proof.

  intros Ha0.

  rewrite -PSeries_incr_1.

  rewrite /PS_incr_1 /PS_decr_1 /=.

  apply Series_ext.

  case => //=.

  by rewrite Ha0.

Qed.



Lemma PSeries_decr_n (a : nat -> R) (n : nat) (x : R) :

  ex_pseries a x

    -> PSeries a x = sum_f_R0 (fun k => a k * x^k) n + x^(S n) * PSeries (PS_decr_n a (S n)) x.

Proof.

  intros Ha.

  case: (Req_dec x 0) => Hx.

  rewrite Hx PSeries_0 ; simpl ; ring_simplify.

  elim: n => /= [ | n IH].

  ring.

  rewrite -IH ; ring.

  assert (V:(pow_n x (S n) <> 0)).

  rewrite pow_n_pow; now apply pow_nonzero.

  move: (is_pseries_decr_n a (S n) x (/x) (PSeries a x) (Rinv_l x Hx) (lt_0_Sn _) (PSeries_correct _ _ Ha)) => Hb.

  rewrite (is_pseries_unique _ _ _ Hb).

  rewrite (sum_n_ext _ (fun k : nat => a k * x ^ k)).

  rewrite sum_n_Reals.

  replace (S n -1)%nat with n.

  rewrite /scal /plus /opp /= /mult /=.

  rewrite pow_n_pow -Rinv_pow ; try assumption.

  field.

  split; try assumption.

  now apply pow_nonzero.

  now apply plus_minus.

  intros m; rewrite pow_n_pow.

  apply Rmult_comm.

Qed.



Lemma PSeries_decr_n_aux (a : nat -> R) (n : nat) (x : R) :

  (forall k : nat, (k < n)%nat -> a k = 0)

    -> PSeries a x = x^n * PSeries (PS_decr_n a n) x.

Proof.

  elim: n => /= [ | n IH] Ha.

  rewrite Rmult_1_l.

  apply PSeries_ext => n ; by intuition.

  rewrite IH.

  rewrite PSeries_decr_1_aux.

  rewrite (Rmult_comm _ (x^n)) Rmult_assoc.

  repeat apply Rmult_eq_compat_l.

  apply PSeries_ext => k ; rewrite /PS_decr_1 /PS_decr_n ; by intuition.

  apply Ha ; by intuition.

  move => k Hk.

  apply Ha ; by intuition.

Qed.



Lemma CV_radius_incr_1 (a : nat -> R) :

  CV_radius (PS_incr_1 a) = CV_radius a.

Proof.

  assert (Ha := CV_radius_bounded a).

  assert (Ha' := CV_radius_bounded (PS_incr_1 a)).

  apply Rbar_le_antisym.

  apply Ha' => x [M Hx] ; apply Ha.

  move: (fun n => Hx (S n)) => {Hx} Hx ; simpl in Hx.

  case: (Req_dec x 0) => Hx0.

  rewrite Hx0 ; exists (Rabs (a O)) ; case => /= [ | n].

  rewrite Rmult_1_r ; by right.

  rewrite Rmult_0_l Rmult_0_r Rabs_R0.

  by apply Rabs_pos.

  exists (M / Rabs x) => n.

  apply Rle_div_r.

  by apply Rabs_pos_lt.

  by rewrite -Rabs_mult Rmult_assoc (Rmult_comm _ x).

  apply Ha => x [M Hx] ; apply Ha'.

  exists (M * Rabs x) ; case => [ | n] /=.

  rewrite Rmult_0_l Rabs_R0.

  apply Rmult_le_pos.

  eapply Rle_trans, (Hx O).

  by apply Rabs_pos.

  by apply Rabs_pos.

  rewrite (Rmult_comm x) -Rmult_assoc Rabs_mult.

  apply Rmult_le_compat_r.

  by apply Rabs_pos.

  by [].

Qed.

Lemma CV_radius_decr_1 (a : nat -> R) :

  CV_radius (PS_decr_1 a) = CV_radius a.

Proof.

  assert (Ha := CV_radius_bounded a).

  assert (Ha' := CV_radius_bounded (PS_decr_1 a)).

  apply Rbar_le_antisym.

  apply Ha' => x [M Hx] ; apply Ha.

  eexists ; case => [ | n] ; simpl.

  eapply Rle_trans, Rmax_l.

  rewrite Rmult_1_r ; apply Rle_refl.

  eapply Rle_trans, Rmax_r.

  rewrite (Rmult_comm x) -Rmult_assoc Rabs_mult.

  apply Rmult_le_compat_r.

  by apply Rabs_pos.

  by apply Hx.

  apply Ha => x [M Hx] ; apply Ha'.

  move: (fun n => Hx (S n)) => {Hx} Hx ; simpl in Hx.

  case: (Req_dec x 0) => Hx0.

  rewrite Hx0 ; exists (Rabs (a 1%nat)) ; case => /= [ | n].

  rewrite Rmult_1_r ; by right.

  rewrite Rmult_0_l Rmult_0_r Rabs_R0.

  by apply Rabs_pos.

  exists (M / Rabs x) => n.

  apply Rle_div_r.

  by apply Rabs_pos_lt.

  rewrite -Rabs_mult Rmult_assoc (Rmult_comm _ x).

  by apply Hx.

Qed.



Definition PS_mult (a b : nat -> R) n :=

  sum_f_R0 (fun k => a k * b (n - k)%nat) n.



Lemma is_pseries_mult (a b : nat -> R) (x la lb : R) :

  is_pseries a x la -> is_pseries b x lb

  -> Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b)

  -> is_pseries (PS_mult a b) x (la * lb).

Proof.

  move => Hla Hlb Ha Hb.

  apply is_series_ext with (fun n => sum_f_R0 (fun k => (fun l => a l * x ^ l) k * (fun l => b l * x ^ l) (n - k)%nat) n).

  move => n.

  rewrite /PS_mult /scal /= /mult /= scal_sum.

  apply sum_eq => i Hi.

  rewrite -{4}(MyNat.sub_add _ _ Hi).

  rewrite pow_n_pow pow_add.

  ring.

  apply (is_series_mult (fun l => a l * x ^ l) (fun l => b l * x ^ l)).

  now apply (is_pseries_R a x la).

  now apply (is_pseries_R b x lb).

  by apply CV_disk_inside.

  by apply CV_disk_inside.

Qed.

Lemma ex_pseries_mult (a b : nat -> R) (x : R) :

  Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b)

  -> ex_pseries (PS_mult a b) x.

Proof.

  move => Ha Hb.

  exists ((PSeries a x) * (PSeries b x)).

  apply is_pseries_mult => // ; by apply PSeries_correct, CV_radius_inside.

Qed.

Lemma PSeries_mult (a b : nat -> R) (x : R) :

  Rbar_lt (Rabs x) (CV_radius a) -> Rbar_lt (Rabs x) (CV_radius b)

  -> PSeries (PS_mult a b) x = PSeries a x * PSeries b x.

Proof.

  move => Ha Hb.

  apply is_pseries_unique.

  apply is_pseries_mult => // ; by apply PSeries_correct, CV_radius_inside.

Qed.



Lemma is_pseries_odd_even (a : nat -> R) (x l1 l2 : R) :

  is_pseries (fun n => a (2*n)%nat) (x^2) l1 -> is_pseries (fun n => a (2*n+1)%nat) (x^2) l2

    -> is_pseries a x (l1 + x * l2).

Proof.

  rewrite 3!is_pseries_R.

  move => H1 H2.

  apply filterlim_ext with (fun n =>

    (sum_n (fun k : nat => a (2 * k)%nat * (x ^ 2) ^ k) (div2 n)) +

    x * match n with | O => 0

    | S n => (sum_n (fun k : nat => a (2 * k + 1)%nat * (x ^ 2) ^ k) (div2 n)) end).

  case => [ | n].

  rewrite /= !sum_O /= ; ring.

  case: (even_odd_dec n) => Hn.



  rewrite 3!sum_n_Reals.

  rewrite -(even_div2 _ Hn) {3}(even_double _ Hn).

  elim: (div2 n) => {n Hn} [ | n] ;

  rewrite ?double_S /sum_f_R0 -/sum_f_R0.

  rewrite /double /= ; ring.

  rewrite -pow_mult.

  replace (2 * S n)%nat with (S (S (double n)))

    by (rewrite -double_S /double ; ring).

  replace (S (S (double n)) + 1)%nat with (S (S (S (double n)))) by ring.

  move => <- ; simpl ; ring.



  rewrite 3!sum_n_Reals.

  rewrite -(odd_div2 _ Hn) {3}(odd_double _ Hn).

  elim: (div2 n) => {n Hn} [ | n] ;

  rewrite ?double_S /sum_f_R0 -/sum_f_R0.

  rewrite /double /= ; ring.

  rewrite -?pow_mult.

  replace (2 * S n)%nat with (S (S (double n)))

    by (rewrite -double_S /double ; ring).

  replace (2 * S (S n))%nat with (S (S (S (S (double n)))))

    by (rewrite -double_S /double ; ring).

  replace (S (S (double n)) + 1)%nat with (S (S (S (double n)))) by ring.

  move => <- ; simpl ; ring.

  apply (is_lim_seq_plus' _ _ l1 (x*l2)).



  apply filterlim_comp with (2:=H1).

  intros P [N HN].

  exists (2*N+1)%nat.

  intros n Hn; apply HN.

  apply le_double.

  apply plus_le_reg_l with 1%nat.

  rewrite Plus.plus_comm.

  apply le_trans with (1:=Hn).

  apply le_trans with (1+double (div2 n))%nat.

  case (even_or_odd n); intros J.

  rewrite <- even_double; try exact J.

  now apply le_S.

  rewrite <- odd_double; easy.

  simpl; now rewrite plus_0_r.



  apply (is_lim_seq_scal_l _ x l2) => //.

  apply filterlim_ext_loc with

    (fun n => sum_n (fun k : nat => a (2 * k + 1)%nat * (x ^ 2) ^ k)

      (div2 (pred n))).

  exists 1%nat; intros y; case y.

  easy.

  intros n _; reflexivity.

  apply filterlim_comp with (2:=H2).

  intros P [N HN].

  exists (2*N+2)%nat.

  intros n Hn; apply HN.

  apply le_double.

  apply plus_le_reg_l with 2%nat.

  rewrite Plus.plus_comm.

  apply le_trans with (1:=Hn).

  apply le_trans with (1+(1+double (div2 (pred n))))%nat.

  case (even_or_odd (pred n)); intros J.

  rewrite <- even_double; try exact J.

  case n.

  simpl; now apply le_S, le_S.

  intros m; simpl; now apply le_S.

  rewrite <- odd_double; try exact J.

  case n; simpl; try easy.

  now apply le_S.

  simpl; now rewrite plus_0_r.

Qed.

Lemma ex_pseries_odd_even (a : nat -> R) (x : R) :

  ex_pseries (fun n => a (2*n)%nat) (x^2) -> ex_pseries (fun n => a (2*n+1)%nat) (x^2)

    -> ex_pseries a x.

Proof.

  move => [l1 H1] [l2 H2].

  exists (l1 + x * l2).

  by apply is_pseries_odd_even.

Qed.

Lemma PSeries_odd_even (a : nat -> R) (x : R) :

  ex_pseries (fun n => a (2*n)%nat) (x^2) -> ex_pseries (fun n => a (2*n+1)%nat) (x^2)

    -> PSeries a x = PSeries (fun n => a (2*n)%nat) (x^2) + x * PSeries (fun n => a (2*n+1)%nat) (x^2).

Proof.

  move => H1 H2 ;

  apply is_pseries_unique.

  apply (is_pseries_odd_even a x); by apply PSeries_correct.

Qed.



Lemma PSeries_const_0 : forall x, PSeries (fun _ => 0) x = 0.

Proof.

  move => x.

  replace 0 with (real 0) by auto.

  apply (f_equal real).

  rewrite -{2}(Lim_seq_const 0) /=.

  apply Lim_seq_ext.

  elim => /= [ | n IH].

  rewrite sum_O ; ring.

  rewrite sum_Sn /= /plus /= IH ; ring.

Qed.



Lemma CV_radius_const_0 : CV_radius (fun _ => 0) = p_infty.

Proof.

  suff : forall x, Rbar_le (Rabs x) (CV_radius (fun _ : nat => 0)).

  case H : (CV_radius (fun _ : nat => 0)) => [cv | | ] //= H0.

  case: (Rle_lt_dec 0 cv) => Hcv.

  move: (H0 (cv + 1)) => {H0} H0.

  contradict H0 ; apply Rlt_not_le => /=.

  apply Rlt_le_trans with (2 := Rle_abs _).

  apply Rminus_lt_0 ; ring_simplify ; by apply Rlt_0_1.

  contradict Hcv ; apply (Rbar_le_not_lt cv 0).

  rewrite -Rabs_R0.

  by apply H0.

  move: (H0 0) => {H0} H0.

  contradict H0 ; by apply Rbar_lt_not_le.

  move => x ; apply Rbar_not_lt_le => Hx.

  apply CV_disk_outside in Hx.

  apply: Hx.

  apply is_lim_seq_ext with (fun _ => 0).

  move => n ; ring.

  by apply is_lim_seq_const.

Qed.



Section PS_opp.



Context {K : AbsRing} {V : NormedModule K}.



Definition PS_opp (a : nat -> V) (n : nat) : V := opp (a n).



Lemma is_pseries_opp (a : nat -> V) (x :K) (l : V) :

  is_pseries a x l -> is_pseries (PS_opp a) x (opp l).

Proof.

  intros H.

  replace (opp l) with (scal (opp (one : K)) l).

  2: now rewrite scal_opp_l scal_one.

  apply is_pseries_ext with (PS_scal (opp one) a).

  intros n; unfold PS_scal, PS_opp.

  now rewrite scal_opp_l scal_one.

  apply is_pseries_scal.

  rewrite -opp_mult_l -opp_mult_r.

  by rewrite mult_one_l mult_one_r.

  by apply H.

Qed.



Lemma ex_pseries_opp (a : nat -> V) (x : K) :

  ex_pseries a x -> ex_pseries (PS_opp a) x.

Proof.

  intros [l Hl].

  exists (opp l).

  now apply is_pseries_opp.

Qed.



End PS_opp.



Lemma PSeries_opp (a : nat -> R) (x : R) :

  PSeries (PS_opp a) x = - PSeries a x.

Proof.

  replace (- PSeries a x) with ((-1) * PSeries a x) by ring.

  rewrite -PSeries_scal.

  apply PSeries_ext => n.

  by rewrite /PS_scal /PS_opp scal_opp_one.

Qed.



Lemma CV_radius_opp (a : nat -> R) :

  (CV_radius (PS_opp a)) = (CV_radius a).

Proof.

  rewrite -(CV_radius_scal (-1)).

  apply CV_radius_ext => n.

  by rewrite /PS_scal /PS_opp scal_opp_l scal_opp_r opp_opp scal_one.

  rewrite -Ropp_0 ; apply Rlt_not_eq, Ropp_lt_contravar, Rlt_0_1.

Qed.



Section PS_minus.



Context {K : AbsRing} {V : NormedModule K}.



Definition PS_minus (a b : nat -> V) (n : nat) : V := plus (a n) (opp (b n)).



Lemma is_pseries_minus (a b : nat -> V) (x:K) (la lb : V) :

  is_pseries a x la -> is_pseries b x lb

  -> is_pseries (PS_minus a b) x (plus la (opp lb)).

Proof.

  move => Ha Hb.

  apply is_pseries_plus.

  exact: Ha.

  by apply is_pseries_opp.

Qed.



Lemma ex_pseries_minus (a b : nat -> V) (x : K) :

  ex_pseries a x -> ex_pseries b x

  -> ex_pseries (PS_minus a b) x.

Proof.

  move => Ha Hb.

  apply ex_pseries_plus.

  exact: Ha.

  by apply ex_pseries_opp.

Qed.



End PS_minus.



Lemma PSeries_minus (a b : nat -> R) (x : R) :

  ex_pseries a x -> ex_pseries b x

  -> PSeries (PS_minus a b) x = PSeries a x - PSeries b x.

Proof.

  move => Ha Hb.

  rewrite PSeries_plus.

  by rewrite PSeries_opp.

  exact: Ha.

  by apply ex_pseries_opp.

Qed.



Lemma Abel (a : nat -> R) :

  Rbar_lt 0 (CV_radius a) -> Rbar_lt (CV_radius a) p_infty

  -> ex_pseries a (CV_radius a)

  -> filterlim (PSeries a) (at_left (CV_radius a)) (locally (PSeries a (CV_radius a))).

Proof.

  case Hcv : (CV_radius a) => [cv | | ] //= Hcv0 _ Ha1.



  wlog: cv a Hcv Hcv0 Ha1 / (cv = 1) => Hw.

    apply filterlim_ext with

      (fun x => PSeries (fun n => a n * cv ^ n) (x / cv)).

    intros x.

    apply Series_ext => n.

    rewrite Rmult_assoc -Rpow_mult_distr.

    apply f_equal, f_equal2 => //.

    field ; by apply Rgt_not_eq.

    apply filterlim_comp with (at_left 1).

    intros P [d Hd].

    unfold filtermap.

    eapply filter_imp.

    intros x Hx ; apply Hd.

    apply @norm_compat1.

    rewrite /minus /plus /opp /=.

    replace (x / cv + _) with ((x - cv) / cv)

      by (field ; exact: Rgt_not_eq).

    rewrite /norm /= /abs /= Rabs_div ; try by apply Rgt_not_eq.

    rewrite (Rabs_pos_eq cv) ; try by apply Rlt_le.

    apply Rlt_div_l => //.

    eapply (proj1 Hx).

    apply Rlt_div_l => //.

    rewrite Rmult_1_l.

    by apply (proj2 Hx).

    assert (Hd' : 0 < d * cv).

      apply Rmult_lt_0_compat.

      by apply d.

      by [].

    exists (mkposreal _ Hd') => /= y Hy Hy0 ; by split.

    replace (PSeries a cv) with (PSeries (fun n : nat => a n * cv ^ n) 1).

    apply (Hw 1 (fun n : nat => a n * cv ^ n)) ; clear Hw.

    apply Rbar_le_antisym.

    move: Hcv ; rewrite /CV_radius /Lub.Lub_Rbar /CV_disk.

    case: Lub.ex_lub_Rbar => l /= Hl Hl1 ;

    case: Lub.ex_lub_Rbar => l' /= Hl'.

    rewrite Hl1 in Hl => {l Hl1}.

    apply Hl'.

    intros x Hx.

    apply (Rmult_le_reg_l cv) => //.

    rewrite Rmult_1_r.

    apply Hl.

    move: Hx ; apply ex_series_ext => n.

    by rewrite Rpow_mult_distr Rmult_assoc.

    rewrite -Rabs_R1.

    apply Rbar_not_lt_le => Hcv'.

    apply CV_disk_outside in Hcv'.

    apply: Hcv'.

    apply ex_series_lim_0 ; move: Ha1 ;

    apply ex_series_ext => n.

    rewrite pow_n_pow pow1 Rmult_1_r.

    apply Rmult_comm.

    by apply Rlt_0_1.

    move: Ha1 ; apply ex_series_ext => n.

    rewrite !pow_n_pow pow1 scal_one.

    apply Rmult_comm.

    by [].

    apply Series_ext => n.

    by rewrite pow1 Rmult_1_r.

  rewrite Hw in Hcv Ha1 |- * => {cv Hw Hcv0}.

  wlog: a Hcv Ha1 / (PSeries a 1 = 0) => Hw.

    set b := fun n => match n with

      | O => a O - PSeries a 1

      | S n => a (S n)

      end.

    assert (CV_radius b = Finite 1).

      rewrite -Hcv.

      rewrite -(CV_radius_decr_1 a) -(CV_radius_decr_1 b).

      apply CV_radius_ext => n.

      reflexivity.

    assert (ex_pseries b 1).

      apply ex_series_incr_1.

      apply ex_series_incr_1 in Ha1.

      move: Ha1 ; apply ex_series_ext => n.

      reflexivity.

    assert (PSeries b 1 = 0).

      rewrite PSeries_decr_1 //.

      rewrite /b PSeries_decr_1 /PS_decr_1 //.

      ring.

    specialize (Hw b H H0 H1).

    apply filterlim_ext_loc with (fun x => PSeries b x + PSeries a 1).

    exists (mkposreal _ Rlt_0_1) => x Hx0 Hx.

    apply (Rabs_lt_between' x 1 1) in Hx0.

    rewrite Rminus_eq_0 in Hx0.

    rewrite PSeries_decr_1.

    rewrite /b (PSeries_decr_1 a x) /PS_decr_1.

    ring.

    apply CV_radius_inside.

    rewrite Hcv Rabs_pos_eq.

    by [].

    by apply Rlt_le, Hx0.

    apply CV_radius_inside.

    rewrite H Rabs_pos_eq.

    by [].

    by apply Rlt_le, Hx0.

    rewrite -{2}(Rplus_0_l (PSeries a 1)).

    eapply filterlim_comp_2.

    by apply Hw.

    by apply filterlim_const.

    rewrite H1.

    apply @filterlim_plus.

  apply PSeries_correct in Ha1.

  rewrite Hw in Ha1 |- * => {Hw}.



  set Sa := sum_n a.

  assert (forall n x, sum_n (fun k => scal (pow_n x k) (a k)) n = (1 - x) * sum_n (fun k => scal (pow_n x k) (Sa k)) n + scal (pow_n x (S n)) (Sa n)).

    elim => /= [ | n IH] x.

    rewrite /Sa !sum_O scal_one mult_one_r /=.

    rewrite /scal /= /mult /= ; ring.

    rewrite !sum_Sn IH ; clear IH.

    rewrite /Sa /= !sum_Sn -/(Sa n).

    rewrite /plus /scal /= /mult /=.

    ring.

  assert (forall x, Rabs x < 1 -> is_pseries Sa x (PSeries a x / (1 - x))).

    intros x Hx.

    destruct (CV_radius_inside a x) as [l Hl].

    rewrite Hcv.

    by apply Hx.

    rewrite (is_pseries_unique _ _ _ Hl).

    rewrite /is_pseries /is_series.

    replace (@locally R_NormedModule (l / (1 - x)))

      with (Rbar_locally (Rbar_mult (l - ((Rbar_mult x 0) * 0)) (/ (1 - x)))).

    apply (is_lim_seq_ext

      (fun n => (sum_n (fun k : nat => scal (pow_n (K := R_AbsRing) x k) (a k)) n

                     - scal (pow_n (K := R_AbsRing) x (S n)) (Sa n)) / (1 - x))

       (sum_n (fun k : nat => scal (pow_n (K := R_AbsRing) x k) (Sa k)))).

       intros n ; rewrite H.

       field.

       apply Rgt_not_eq ; apply -> Rminus_lt_0.

       by apply Rabs_lt_between, Hx.

    apply is_lim_seq_scal_r.

    apply is_lim_seq_minus'.

    apply Hl.

    apply is_lim_seq_mult'.

    apply is_lim_seq_mult'.

    apply is_lim_seq_const.

    eapply is_lim_seq_ext.

    intros n ; by apply sym_eq, pow_n_pow.

    apply is_lim_seq_geom.

    by apply Hx.

    move: Ha1 ; apply (is_lim_seq_ext _ _ 0).

    intros n ; apply sum_n_ext => k.

    by rewrite pow_n_pow pow1 scal_one.

    by replace (Rbar_mult (l - Rbar_mult x 0 * 0) (/ (1 - x)))

      with (Finite (l / (1 - x)))

      by (simpl ; apply f_equal ; unfold Rdiv ; ring).

  apply filterlim_ext_loc with (fun x => (1-x) * PSeries Sa x).

  exists (mkposreal _ Rlt_0_1) ; simpl ; intros x Hx Hx1.

  apply (Rabs_lt_between' x 1 1) in Hx.

  rewrite Rminus_eq_0 in Hx.

  assert (Rabs x < 1).

    rewrite Rabs_pos_eq.

    by apply Hx1.

    by apply Rlt_le, Hx.

  specialize (H0 x H1).

  rewrite (is_pseries_unique _ _ _ H0).

  field.

  by apply Rgt_not_eq ; apply -> Rminus_lt_0.

  apply filterlim_locally => eps.

  destruct (Ha1 (ball 0 (pos_div_2 eps))) as [N HN].

  apply locally_ball.



  eapply filter_imp.

  intros x Hx.

  rewrite (PSeries_decr_n _ N).

  rewrite (double_var eps) Rmult_plus_distr_l.

  eapply Rle_lt_trans.

  rewrite /minus opp_zero plus_zero_r.

  apply @abs_triangle.

  rewrite /abs /= 3!Rabs_mult.

  apply Rplus_lt_le_compat.

  eapply Rle_lt_trans.

  apply Rmult_le_compat_l.

  by apply Rabs_pos.

  eapply Rle_trans.

  apply Rsum_abs.

  apply sum_growing.

  intros n.

  rewrite Rabs_mult.

  apply Rmult_le_compat_l.

  by apply Rabs_pos.

  rewrite -RPow_abs.

  apply pow_incr ; split.

  apply Rabs_pos.

  apply Rlt_le.

  instantiate (1 := 1).

  eapply (proj1 Hx).

  destruct Hx as [Hx1 Hx].

  eapply Rle_lt_trans.

  apply Rmult_le_compat_l.

  by apply Rabs_pos.

  apply (Rmax_r 1).

  apply Rlt_div_r.

  eapply Rlt_le_trans, Rmax_l.

  by apply Rlt_0_1.

  eapply (proj1 Hx).

  destruct Hx as [Hx1 [Hx2 Hx]].

  eapply Rle_trans.

  apply Rmult_le_compat_l.

  by apply Rabs_pos.

  apply Rmult_le_compat ; try by apply Rabs_pos.

  rewrite -/(pow _ (S N)) -RPow_abs.

  apply pow_incr ; split.

  apply Rabs_pos.

  apply Rlt_le, Hx1.

  eapply Rle_trans.

  apply Series_Rabs.

  eapply @ex_series_le.

  intros n ; rewrite /norm /= /abs /= Rabs_Rabsolu.

  rewrite Rabs_mult.

  rewrite -RPow_abs.

  apply Rmult_le_compat_r.

  rewrite RPow_abs ; by apply Rabs_pos.

  rewrite /PS_decr_n.

  eapply Rle_trans, Rlt_le, HN.

  apply Req_le, f_equal.

  rewrite /minus opp_zero plus_zero_r.

  apply sum_n_ext => k.

  by rewrite pow_n_pow pow1 scal_one.

  apply le_trans with (1 := le_n_Sn _).

  apply le_plus_l.

  apply @ex_series_scal.

  apply ex_series_geom.

  by rewrite Rabs_Rabsolu.

  apply Series_le.

  intros n ; split.

  apply Rabs_pos.

  rewrite Rabs_mult.

  rewrite -RPow_abs.

  apply Rmult_le_compat_r.

  rewrite RPow_abs ; by apply Rabs_pos.

  rewrite /PS_decr_n.

  eapply Rle_trans, Rlt_le, HN.

  apply Req_le, f_equal.

  rewrite /minus opp_zero plus_zero_r.

  apply sum_n_ext => k.

  by rewrite pow_n_pow pow1 scal_one.

  apply le_trans with (1 := le_n_Sn _).

  apply le_plus_l.

  apply @ex_series_scal.

  apply ex_series_geom.

  by rewrite Rabs_Rabsolu.

  rewrite Series_scal_l Series_geom.

  rewrite pow1 Rmult_1_l !Rabs_pos_eq.

  apply Req_le ; simpl ; field.

  apply Rgt_not_eq ; apply -> Rminus_lt_0.

  eapply Rle_lt_trans, Hx1.

  by apply Rle_abs.

  apply Hx.

  apply -> Rminus_le_0.

  eapply Rle_trans, Rlt_le, Hx1.

  by apply Rle_abs.

  by rewrite Rabs_Rabsolu.

  eexists ; apply H0, Hx.

  assert (0 < Rmin (eps / 2 / Rmax 1 (sum_f_R0 (fun n : nat => Rabs (Sa n) * 1 ^ n) N)) 1).

    apply Rmin_case.

    apply Rdiv_lt_0_compat.

    by apply is_pos_div_2.

    eapply Rlt_le_trans, Rmax_l.

    by apply Rlt_0_1.

    by apply Rlt_0_1.

  exists (mkposreal _ H1) => /= y Hy Hy1.

  split.

  apply (Rabs_lt_between'

    y 1 (Rmin (eps / 2 / Rmax 1 (sum_f_R0 (fun n : nat => Rabs (Sa n) * 1 ^ n) N))

    1)) in Hy.

  rewrite {1}/Rminus -Rmax_opp_Rmin Rplus_max_distr_l Rplus_min_distr_l in Hy.

  rewrite -!/(Rminus _ _) Rminus_eq_0 in Hy.

  rewrite Rabs_pos_eq.

  by [].

  apply Rlt_le.

  eapply Rle_lt_trans, Hy.

  by apply Rmax_r.

  split.

  eapply Rlt_le_trans.

  rewrite -Rabs_Ropp Ropp_minus_distr'.

  apply Hy.

  by apply Rmin_l.

  apply (Rabs_lt_between'

    y 1 (Rmin (eps / 2 / Rmax 1 (sum_f_R0 (fun n : nat => Rabs (Sa n) * 1 ^ n) N))

    1)) in Hy.

  rewrite {1}/Rminus -Rmax_opp_Rmin Rplus_max_distr_l Rplus_min_distr_l in Hy.

  rewrite -!/(Rminus _ _) Rminus_eq_0 in Hy.

  eapply Rle_trans, Rlt_le, Hy.

  by apply Rmax_r.

Qed.



Lemma PSeries_continuity (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> continuity_pt (PSeries a) x.

Proof.

  move => H.

  case: (CV_radius_Reals_2 a x H) => r H0.

  apply (CVU_continuity

    (fun (n : nat) (x : R) => sum_f_R0 (fun k : nat => a k * x ^ k) n)

    (PSeries a) x r H0).

  move => n y Hy.

  apply continuity_pt_finite_SF.

  move => k Hk.

  apply continuity_pt_scal.

  elim: k {Hk} => /= [ | k IH].

  by apply continuity_pt_const => d f.

  apply continuity_pt_mult.

  apply derivable_continuous_pt, derivable_pt_id.

  by apply IH.

  rewrite /Boule Rminus_eq_0 Rabs_R0 ; by apply r.

Qed.



Definition PS_derive (a : nat -> R) (n : nat) :=

  INR (S n) * a (S n).

Lemma CV_radius_derive (a : nat -> R) :

  CV_radius (PS_derive a) = CV_radius a.

Proof.

  have H := (CV_radius_bounded a).

  have H0 := (CV_radius_bounded (PS_derive a)).



  apply Rbar_le_antisym.

  apply is_lub_Rbar_subset with (2 := H) (3 := H0) => x [M Ha].

  exists (Rmax (Rabs (a O)) (Rabs x * M)) ; case => /= [ | n].

  rewrite Rmult_1_r ; by apply Rmax_l.

  apply Rle_trans with (2 := Rmax_r _ _).

  replace (a (S n) * (x * x ^ n))

    with (x  * ((PS_derive a n * x ^ n) / INR (S n)))

    by (rewrite /PS_derive ; field ; apply not_0_INR, sym_not_eq, O_S).

  rewrite Rabs_mult ; apply Rmult_le_compat_l.

  by apply Rabs_pos.

  rewrite Rabs_div ; [ | by apply not_0_INR, sym_not_eq, O_S].

  apply Rle_div_l.

  by apply Rabs_pos_lt, not_0_INR, sym_not_eq, O_S.

  apply Rle_trans with (1 := Ha n).

  rewrite -{1}(Rmult_1_r M).

  apply Rmult_le_compat_l.

  by apply Rle_trans with (2 := Ha O), Rabs_pos.

  by apply Rle_trans with (2 := Rle_abs _), (le_INR 1), le_n_S, le_O_n.



  apply H => x [M Hx].



  have H1 : Rbar_le (Finite 0) (CV_radius (PS_derive a)).

    apply H0 ; exists (Rabs (PS_derive a O)) ; case => /= [ | n].

    rewrite Rmult_1_r ; by apply Rle_refl.

    rewrite Rmult_0_l Rmult_0_r Rabs_R0 ; by apply Rabs_pos.

  wlog: x Hx / (0 < x) => [Hw |  Hx0].

    case: (Rle_lt_dec x 0) => Hx0.

    apply Rbar_le_trans with (Finite 0).

    exact Hx0.

    by apply H1.

    by apply Hw.



  suff : forall y, 0 < y < x -> Rbar_le (Finite y) (CV_radius (PS_derive a)).

    case: (CV_radius (PS_derive a)) H1 => [l | | ] //= H1 H2.

    apply Rnot_lt_le => /= H3.

    have H4 : (0 < (x+l)/2 < x).

      split.

      apply Rdiv_lt_0_compat.

      by apply Rplus_lt_le_0_compat.

      by apply Rlt_R0_R2.

      apply Rminus_lt, Ropp_lt_cancel ; field_simplify.

      rewrite Rdiv_1 ; apply Rdiv_lt_0_compat.

      by apply -> Rminus_lt_0.

      by apply Rlt_R0_R2.

    move: (H2 _ H4).

    apply Rlt_not_le.

    apply Rminus_lt, Ropp_lt_cancel ; field_simplify.

    rewrite Rdiv_1 ; apply Rdiv_lt_0_compat.

    rewrite Rplus_comm ; by apply -> Rminus_lt_0.

    by apply Rlt_R0_R2.

  move => y Hy.

  apply H0 ; rewrite /PS_derive.

  have H2 : is_lim_seq (fun n => INR (S n) / x * (y/x) ^ n) 0.

    apply ex_series_lim_0.

    apply ex_series_Rabs.

    apply CV_disk_DAlembert with 1.

    move => n.

    apply Rgt_not_eq, Rdiv_lt_0_compat.

    by apply lt_0_INR, lt_O_Sn.

    apply Rlt_trans with y ; by apply Hy.

    apply is_lim_seq_spec.

    move => eps.

    case: (nfloor_ex (/eps)) => [ | N HN].

    by apply Rlt_le, Rinv_0_lt_compat, eps.

    exists (S N) => n Hn.

    apply Rabs_lt_between'.

    replace (INR (S (S n)) / x / (INR (S n) / x))

      with (INR (S (S n)) / (INR (S n)))

      by (field ; split ; [apply Rgt_not_eq, Rlt_trans with y ; by apply Hy |

       by apply Rgt_not_eq, lt_0_INR, lt_O_Sn]).

    rewrite Rabs_pos_eq.

    split.

    apply Rlt_div_r.

    by apply lt_0_INR, lt_O_Sn.

    rewrite ?S_INR Rminus_lt_0 ; ring_simplify.

    rewrite Rplus_assoc.

    apply Rplus_le_lt_0_compat.

    apply Rmult_le_pos.

    by apply (le_INR O), le_O_n.

    by apply Rlt_le, eps.

    by apply Rle_lt_0_plus_1, Rlt_le, eps.

    apply Rlt_div_l.

    by apply lt_0_INR, lt_O_Sn.

    rewrite ?S_INR Rminus_lt_0 ; ring_simplify.

    rewrite /Rminus Rplus_assoc -/(Rminus eps 1).

    rewrite -(Ropp_involutive (eps-1)) -Rminus_lt_0 Ropp_minus_distr'.

    apply Rlt_trans with 1.

    apply Rminus_lt_0 ; ring_simplify ; by apply eps.

    replace 1 with (eps*/eps) by (field ; apply Rgt_not_eq, eps).

    apply Rmult_lt_compat_l.

    by apply eps.

    apply Rlt_le_trans with (1 := proj2 HN).

    rewrite -S_INR ; by apply le_INR.

    apply Rlt_le, Rdiv_lt_0_compat ; by apply lt_0_INR, lt_O_Sn.

    right ; split.

    by apply Rgt_not_eq, Rlt_0_1.

    rewrite Rinv_1 Rabs_pos_eq.

    apply -> Rdiv_lt_1.

    by apply Hy.

    apply Rlt_trans with y ; by apply Hy.

    apply Rlt_le, Rdiv_lt_0_compat.

    by apply Hy.

    apply Rlt_trans with y ; by apply Hy.

    apply is_lim_seq_spec in H2.

    case: (H2 (mkposreal _ (Rlt_0_1))) ;

    simpl pos => {H2} N HN.

    set My := fix f n := match n with

      | O => 1

      | S n => Rmax (Rabs (INR (S n) / x * (y / x) ^ n)) (f n)

    end.

    exists (M * My N) => n.

    replace (INR (S n) * a (S n) * y ^ n)

      with ((a (S n) * x ^ (S n)) * (INR (S n) /x * (y / x) ^ n))

      by (rewrite /pow -/pow ; apply Rminus_diag_uniq ; field_simplify ;

      [rewrite ?Rdiv_1 | apply Rgt_not_eq, Rlt_trans with y ; by apply Hy ] ;

      rewrite ?Rmult_assoc -(Rmult_minus_distr_l (a (S n))) ;

      apply Rmult_eq_0_compat_l ;

      rewrite Rmult_comm Rmult_assoc -(Rmult_minus_distr_l (INR (S n))) ;

      apply Rmult_eq_0_compat_l, Rminus_diag_eq ;

      elim: n => /= [ | n IH] ; [ring

      | rewrite -IH ; field ; apply Rgt_not_eq, Rlt_trans with y ; by apply Hy]).

    rewrite Rabs_mult ; apply Rmult_le_compat.

    by apply Rabs_pos.

    by apply Rabs_pos.

    by apply Hx.

    case: (le_lt_dec N n) => Hn.

    apply Rle_trans with 1.

    move: (HN n Hn) ; rewrite Rminus_0_r ; by apply Rlt_le.

    move: (HN n Hn) => {HN Hn} ;

    elim: N => [ | N IH] H2.

    simpl ; by apply Rle_refl.

    apply Rle_trans with (1 := IH H2) ;

    rewrite /My -/My ; by apply Rmax_r.

    elim: N n Hn {HN} => [ | N IH] n Hn.

    by apply lt_n_O in Hn.

    apply le_S_n in Hn ; case: (le_lt_eq_dec _ _ Hn) => {Hn} Hn.

    apply Rle_trans with (2 := Rmax_r _ (My N)) ; by apply IH.

    rewrite Hn ; by apply (Rmax_l _ (My N)).

Qed.



Lemma is_derive_PSeries (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> is_derive (PSeries a) x (PSeries (PS_derive a) x).

Proof.

  move => Hx.



  case: (CV_radius_Reals_2 _ _ Hx) => r0 Hr0 ;

  rewrite -CV_radius_derive in Hx ;

  case: (CV_radius_Reals_2 _ _ Hx) => r1 Hr1 ;

  rewrite CV_radius_derive in Hx.

  apply CVU_dom_Reals in Hr0 ;

  apply CVU_dom_Reals in Hr1.

  have Hr : 0 < (Rmin r0 r1).

    apply Rmin_case.

    by apply r0.

    by apply r1.



  set D := (Boule x (mkposreal _ Hr)).



  assert (Ho : open D).

    move => y Hy.

    apply Rabs_lt_between' in Hy ; simpl in Hy.

    have H : 0 < Rmin ((x+Rmin r0 r1)-y) (y-(x-Rmin r0 r1)).

    apply Rmin_case.

    rewrite -(Rminus_eq_0 y) ; by apply Rplus_lt_compat_r, Hy.

    rewrite -(Rminus_eq_0 ((x-Rmin r0 r1))) /Rminus ;

    by apply Rplus_lt_compat_r , Hy.

    exists (mkposreal _ H) => /= z Hz.

    apply Rabs_lt_between' ; split ; apply (Rplus_lt_reg_l (-y)) ; simpl.

    apply Ropp_lt_cancel.

    apply Rle_lt_trans with (1 := Rabs_maj2 _).

    rewrite Ropp_plus_distr ?Ropp_involutive (Rplus_comm (-y)).

    apply Rlt_le_trans with (1 := Hz).

    exact: Rmin_r.

    apply Rle_lt_trans with (1 := Rle_abs _).

    rewrite ?(Rplus_comm (-y)).

    apply Rlt_le_trans with (1 := Hz).

    exact: Rmin_l.



  have Hc : is_connected D.

    move => x0 y z Hx0 Hy Hx0yz.

    rewrite /D.

    case: Hx0yz => H1 H2.

    apply (Rplus_le_compat_r (-x)) in H1.

    apply (Rplus_le_compat_r (-x)) in H2.

    move: (conj H1 H2) => {H1 H2} Hxyz.

    apply Rabs_le_between_Rmax in Hxyz.

    apply Rle_lt_trans with (1 := Hxyz) => /=.

    apply Rmax_case.

    apply Rle_lt_trans with (1 := Rle_abs _).

    exact: Hy.

    apply Rle_lt_trans with (1 := Rabs_maj2 _).

    exact: Hx0.



  have Hfn : CVU_dom

    (fun (n : nat) (y : R) => sum_f_R0 (fun k : nat => a k * y ^ k) n) D.

    apply CVU_dom_include with (Boule x r0).

    move => y Hy.

    by apply Rlt_le_trans with (1 := Hy), Rmin_l.

    exact: Hr0.



  have Idn : (forall (n : nat) (x : R), (0 < n)%nat ->

    is_derive (fun (y : R) =>

      sum_f_R0 (fun k : nat => a k * y ^ k) n) x

      (sum_f_R0 (fun k : nat => (PS_derive a) k * x ^ k) (pred n))).

    case => [ y Hn | n y _ ].

    by apply lt_irrefl in Hn.

    elim: n => [ | n] ; simpl pred ; rewrite /sum_f_R0 -/sum_f_R0.

    replace (PS_derive a 0 * y ^ 0)

      with (0 + a 1%nat * (1 * 1))

      by (rewrite /PS_derive /= ; ring).

    apply: is_derive_plus.

    simpl.

    apply: is_derive_const.

    apply is_derive_scal.

    apply: is_derive_scal_l.

    apply: is_derive_id.

    move => IH.

    apply: is_derive_plus.

    apply IH.

    rewrite /PS_derive.

    replace (INR (S (S n)) * a (S (S n)) * y ^ S n)

      with (a (S (S n)) * (INR (S (S n)) * y^S n))

      by ring.

    by apply is_derive_Reals, derivable_pt_lim_scal, derivable_pt_lim_pow.



  have Edn : (forall (n : nat) (x : R), D x ->

    ex_derive (fun (y : R) =>

      sum_f_R0 (fun k : nat => a k * y ^ k) n) x).

    case => [ | n] y Hy.

    simpl.

    apply: ex_derive_const.

    exists (sum_f_R0 (fun k : nat => PS_derive a k * y ^ k) (pred (S n))).

    apply (Idn (S n) y).

    by apply lt_O_Sn.



  have Cdn : (forall (n : nat) (x : R), D x ->

    continuity_pt

      (Derive ((fun (n0 : nat) (y : R) =>

        sum_f_R0 (fun k : nat => a k * y ^ k) n0) n)) x).

    have Cdn : (forall (n : nat) (x : R), D x ->

      continuity_pt (fun x => sum_f_R0 (fun k : nat => PS_derive a k * x ^ k) n) x).

      move => n y Hy.

      apply derivable_continuous_pt.

      elim: n => [ /= | n IH].

      exact: derivable_pt_const.

      apply derivable_pt_plus ; rewrite -/sum_f_R0.

      exact: IH.

      apply derivable_pt_scal, derivable_pt_pow.

    case => [ | n] y Hy.

    simpl ; by apply continuity_pt_const => z.

    move => e He ; case: (Cdn n y Hy e He) => {Cdn} d [Hd Cdn].

    destruct (Ho y Hy) as [d0 Hd0].

    have Hd1 : 0 < Rmin d d0.

      apply Rmin_case ; [exact: Hd | by apply d0].

    exists (mkposreal _ Hd1) ; split.

    exact: Hd1.

    move => z Hz ; simpl in Hz.

    rewrite (is_derive_unique _ _ _ (Idn (S n) z (lt_O_Sn _))).

    rewrite (is_derive_unique _ _ _ (Idn (S n) y (lt_O_Sn _))).

    apply (Cdn z) ; split.

    by apply Hz.

    apply Rlt_le_trans with (1 := proj2 Hz), Rmin_l.



  have Hdn : CVU_dom (fun (n : nat) (x : R) =>

          Derive

            ((fun (n0 : nat) (y : R) =>

              sum_f_R0 (fun k : nat => a k * y ^ k) n0) n) x) D.

    apply CVU_dom_include with (Boule x r1).

    move => y Hy.

    by apply Rlt_le_trans with (1 := Hy), Rmin_r.

    apply CVU_dom_cauchy ; apply CVU_dom_cauchy in Hr1.

    move => eps.

    case: (Hr1 eps) => {Hr1} N Hr1.

    exists (S N) => n m y Hy Hn Hm.

    case: n Hn => [ | n] Hn.

    by apply le_Sn_O in Hn.

    apply le_S_n in Hn.

    case: m Hm => [ | m] Hm.

    by apply le_Sn_O in Hm.

    apply le_S_n in Hm.

    rewrite (is_derive_unique _ _ _ (Idn (S n) y (lt_O_Sn _))).

    rewrite (is_derive_unique _ _ _ (Idn (S m) y (lt_O_Sn _))).

    by apply Hr1.



  have Hx' : D x.

    by rewrite /D /Boule /= Rminus_eq_0 Rabs_R0.

  have H := (CVU_Derive (fun n y => (sum_f_R0 (fun k : nat => a k * y ^ k)) n) D Ho Hc Hfn Edn Cdn Hdn x Hx').

  replace (PSeries (PS_derive a) x)

    with (real (Lim_seq

         (fun n : nat =>

          Derive (fun y : R => sum_f_R0 (fun k : nat => a k * y ^ k) n) x))).

  apply: is_derive_ext H.

  simpl => t.

  apply (f_equal real), Lim_seq_ext.

  intros n; apply sym_eq, sum_n_Reals.

  rewrite -Lim_seq_incr_1.

  apply (f_equal real), Lim_seq_ext => n.

  rewrite sum_n_Reals.

  apply is_derive_unique, Idn.

  by apply lt_O_Sn.

  move => y Hy.

  apply sym_eq.

  apply is_lim_seq_unique.

  apply is_lim_seq_spec.

  move => eps.

  case: (Hr1 eps (cond_pos eps)) => {Hr1} N Hr1.

  exists N => n Hn.

  rewrite -Rabs_Ropp Ropp_minus_distr'.

  by apply Hr1.

  move => y Hy.

  apply sym_eq.

  apply is_lim_seq_unique.

  apply is_lim_seq_spec.

  move => eps.

  case: (Hr0 eps (cond_pos eps)) => {Hr0} N Hr0.

  exists N => n Hn.

  rewrite -Rabs_Ropp Ropp_minus_distr'.

  by apply Hr0.

  move => y Hy.

  apply sym_eq.

  apply is_lim_seq_unique.

  apply is_lim_seq_spec.

  move => eps.

  case: (Hr1 eps (cond_pos eps)) => {Hr1} N Hr1.

  exists N => n Hn.

  rewrite -Rabs_Ropp Ropp_minus_distr'.

  by apply Hr1.

Qed.

Lemma ex_derive_PSeries (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> ex_derive (PSeries a) x.

Proof.

  move => Hx ; exists (PSeries (PS_derive a) x).

  by apply is_derive_PSeries.

Qed.

Lemma Derive_PSeries (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> Derive (PSeries a) x = PSeries (PS_derive a) x.

Proof.

  move => H.

  apply is_derive_unique.

  by apply is_derive_PSeries.

Qed.



Lemma is_pseries_derive (a : nat -> R) x :

  Rbar_lt (Rabs x) (CV_radius a)

    -> is_pseries (PS_derive a) x (Derive (PSeries a) x).

Proof.

  intros Hx.

  assert (Ha := is_derive_PSeries _ _ Hx).

  apply is_derive_unique in Ha.

  rewrite Ha.

  apply PSeries_correct.

  by apply CV_radius_inside ; rewrite CV_radius_derive.

Qed.

Lemma ex_pseries_derive (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> ex_pseries (PS_derive a) x.

Proof.

  move => Hx.

  eexists.

  by apply is_pseries_derive.

Qed.



Definition PS_derive_n (n : nat) (a : nat -> R) :=

  (fun k => (INR (fact (k + n)%nat) / INR (fact k)) * a (k + n)%nat).



Lemma is_derive_n_PSeries (n : nat) (a : nat -> R) :

  forall x, Rbar_lt (Rabs x) (CV_radius a)

    -> is_derive_n (PSeries a) n x (PSeries (PS_derive_n n a) x).

Proof.

  elim: n => [ | n IH] x Hx.

  simpl ; rewrite /PS_derive_n /=.

  apply PSeries_ext => n.

  rewrite -plus_n_O.

  field.

  apply Rgt_not_eq.

  by apply INR_fact_lt_0.

  simpl ; rewrite /PS_derive_n /=.

  apply is_derive_ext_loc

    with (PSeries (fun k : nat => INR (fact (k + n)) / INR (fact k) * a (k + n)%nat)).

  case Ha : (CV_radius a) => [cva | | ].

  move: (Hx) ; rewrite Ha ; move/Rminus_lt_0 => Hx0.

  exists (mkposreal _ Hx0) => /= y Hy.

  apply sym_eq.

  apply is_derive_n_unique.

  apply IH.

  rewrite Ha /=.

  replace y with ((y-x) + x) by ring.

  apply Rle_lt_trans with (1 := Rabs_triang _ _).

  by apply Rlt_minus_r.

  exists (mkposreal _ Rlt_0_1) => /= y Hy.

  apply sym_eq.

  apply is_derive_n_unique.

  apply IH.

  by rewrite Ha /=.

  by rewrite Ha in Hx.

  evar (l : R).

  replace (PSeries _ x) with l.

  rewrite /l {l}.

  apply is_derive_PSeries.

  replace (CV_radius (fun k : nat => INR (fact (k + n)) / INR (fact k) * a (k + n)%nat))

    with (CV_radius a).

  by apply Hx.

  elim: n {IH} => [ | n IH].

  apply CV_radius_ext => n.

  rewrite -plus_n_O.

  field.

  apply Rgt_not_eq.

  by apply INR_fact_lt_0.

  rewrite IH.

  rewrite -CV_radius_derive.

  apply CV_radius_ext => k.

  rewrite /PS_derive.

  rewrite -plus_n_Sm plus_Sn_m /fact -/fact ?mult_INR ?S_INR.

  field.

  rewrite -S_INR ; split ; apply Rgt_not_eq.

  by apply INR_fact_lt_0.

  apply (lt_INR O), lt_O_Sn.

  rewrite /l {l}.

  apply PSeries_ext.

  move => k ; rewrite /PS_derive.

  rewrite -plus_n_Sm plus_Sn_m /fact -/fact ?mult_INR ?S_INR.

  field.

  rewrite -S_INR ; split ; apply Rgt_not_eq.

  by apply INR_fact_lt_0.

  apply (lt_INR O), lt_O_Sn.

Qed.

Lemma ex_derive_n_PSeries (n : nat) (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> ex_derive_n (PSeries a) n x.

Proof.

  elim: n a x => [ | n IH] a x Hx.

  by simpl.

  simpl.

  exists (PSeries (PS_derive_n (S n) a) x).

  by apply (is_derive_n_PSeries (S n)).

Qed.



Lemma Derive_n_PSeries (n : nat) (a : nat -> R) (x : R) :

  Rbar_lt (Finite (Rabs x)) (CV_radius a)

    -> Derive_n (PSeries a) n x = PSeries (PS_derive_n n a) x.

Proof.

  move => H.

  apply is_derive_n_unique.

  by apply is_derive_n_PSeries.

Qed.



Lemma CV_radius_derive_n (n : nat) (a : nat -> R) :

  CV_radius (PS_derive_n n a) = CV_radius a.

Proof.

  elim: n a => [ | n IH] /= a.

  apply CV_radius_ext.

  move => k ; rewrite /PS_derive_n /=.

  rewrite plus_0_r ; field.

  by apply INR_fact_neq_0.

  rewrite -(CV_radius_derive a).

  rewrite -(IH (PS_derive a)).

  apply CV_radius_ext.

  move => k ; rewrite /PS_derive_n /PS_derive.

  rewrite -plus_n_Sm /fact -/fact mult_INR ; field.

  by apply INR_fact_neq_0.

Qed.



Lemma Derive_n_coef (a : nat -> R) (n : nat) :

  Rbar_lt (Finite 0) (CV_radius a)

    -> Derive_n (PSeries a) n 0 = a n * (INR (fact n)).

Proof.

  elim: n a => [ | n IH] a Ha.

  rewrite Rmult_1_r.

  rewrite /= /PSeries /Series -(Lim_seq_ext (fun _ => a O)).

  by rewrite Lim_seq_const.

  elim => /= [ | n IH].

  rewrite sum_O ; ring.

  rewrite sum_Sn -IH /plus /= ; ring.

  simpl Derive_n.

  replace (Derive (Derive_n (PSeries a) n) 0)

    with (Derive_n (PSeries (PS_derive a)) n 0).

  rewrite IH.

  rewrite /fact -/fact mult_INR /PS_derive ; ring.

  by rewrite CV_radius_derive.

  transitivity (Derive_n (Derive (PSeries a)) n 0).

  apply Derive_n_ext_loc.

  case: (Rbar_eq_dec (CV_radius a) p_infty) => H.

  exists (mkposreal _ Rlt_0_1) => /= x Hx.

  apply sym_eq ; apply Derive_PSeries.

  by rewrite H.

  have Hc : 0 < real (CV_radius a).

    case: (CV_radius a) Ha H => /= [c | | ] Ha H ; by [].

  exists (mkposreal _ Hc) => /= x Hx.

  apply sym_eq ; apply Derive_PSeries.

  case: (CV_radius a) Hx Ha => /= [c | | ] Hx Ha //.

  by rewrite /ball /= /AbsRing_ball /= /minus /plus /opp /= -/(Rminus _ _) Rminus_0_r in Hx.

  move: (Derive_n_comp (PSeries a) n 1%nat 0) => /= ->.

  by replace (n+1)%nat with (S n) by ring.

Qed.



Lemma PSeries_ext_recip (a b : nat -> R) (n : nat) :

  Rbar_lt (Finite 0) (CV_radius a) -> Rbar_lt (Finite 0) (CV_radius b)

  -> locally 0 (fun x => PSeries a x = PSeries b x)

    -> a n = b n.

Proof.

  move => Ha Hb Hab.

  have H : a n * (INR (fact n)) = b n * (INR (fact n)).

  rewrite -?Derive_n_coef => //.

  by apply Derive_n_ext_loc.

  replace (a n) with ((a n * INR (fact n)) / (INR (fact n))).

  rewrite H ; field ; exact: INR_fact_neq_0.

  field ; exact: INR_fact_neq_0.

Qed.



Lemma mk_pseries (f : R -> R) (M : R) (r : Rbar) :

  (forall n x, Rbar_lt (Finite (Rabs x)) r

    -> (ex_derive_n f n x) /\ Rabs (Derive_n f n x) <= M)

  -> forall x, Rbar_lt (Finite (Rabs x)) r

    -> is_pseries (fun n => Derive_n f n 0 / INR (fact n))  x (f x).

Proof.

  move => Hd x Hx.



  wlog: r Hx Hd /(Finite (real r) = r) => [Hw | Hr].

    case: r Hx Hd => /= [r | | ] Hx Hd.

    by apply (Hw (Finite r)).

    apply (Hw (Finite (Rabs x+1))).

    simpl ; exact: Rlt_plus_1.

    move => n y Hy ; by apply Hd.

    by [].

    by [].

    rewrite -Hr in Hx Hd.

    move: (real r) Hx Hd => /= {r Hr} r Hx Hd.



  wlog: x Hx f Hd / (0 < x) => [Hw | Hx'].

    case: (total_order_T 0 x) => Hx'.

    case: Hx' => Hx'.

    by apply Hw.

    rewrite -Hx'.

    replace (f 0) with (Derive_n f O 0 / INR (fact O))

      by (simpl ; field).

    apply @is_pseries_0.

    rewrite -Rabs_Ropp in Hx.

    suff Hf : (forall (n : nat) (x : R),

      ((Rabs x)) < r ->

      ex_derive_n (fun x0 : R => f (- x0)) n x /\

      Rabs (Derive_n (fun x0 : R => f (- x0)) n x) <= M).



   move: (Hw _ Hx (fun x => f (-x)) Hf (Ropp_0_gt_lt_contravar _ Hx')) => {Hw} Hw.

   rewrite Ropp_involutive in Hw.



   apply is_series_ext with (2:=Hw).

   intros n; rewrite Derive_n_comp_opp; simpl.

   rewrite /scal /= /mult /=.

   apply trans_eq with ((pow_n (K := R_AbsRing) (- x) n * (-1) ^ n) *

     (Derive_n f n (- 0) / INR (fact n)));[unfold Rdiv; ring|idtac].

   rewrite Ropp_0.

   apply f_equal2; try reflexivity.

   clear; induction n; simpl.

   apply Rmult_1_l.

   rewrite /mult /=.

   rewrite <- IHn; ring.

   rewrite Ropp_0 ;

    exists (mkposreal r (Rle_lt_trans _ _ _ (Rabs_pos _) Hx)) => /= y Hy k Hk.

   rewrite /ball /= /AbsRing_ball /= /minus /plus /opp /= -/(Rminus _ _) Rminus_0_r in Hy.

   by apply (Hd k).

   move => {x Hx Hx'} n x Hx.

   rewrite Derive_n_comp_opp.

   split.

   apply ex_derive_n_comp_opp.



    apply Rabs_lt_between in Hx.

    case: Hx => Hx1 Hx2.

    apply Rminus_lt_0 in Hx1.

    apply Rminus_lt_0 in Hx2.

    have Hx := Rmin_pos _ _ Hx1 Hx2 => {Hx1 Hx2}.

    exists (mkposreal _ Hx) => /= y Hy k Hk.

    rewrite /ball /= /AbsRing_ball /= in Hy.

    apply Rabs_lt_between' in Hy.

    rewrite /Rminus -Rmax_opp_Rmin Rplus_max_distr_l Rplus_min_distr_l in Hy.

    case: Hy => Hy1 Hy2.

    apply Rle_lt_trans with (1 := Rmax_r _ _) in Hy1.

    ring_simplify in Hy1.

    apply Rlt_le_trans with (2 := Rmin_l _ _) in Hy2.

    ring_simplify in Hy2.

    apply (Hd k y).

    apply Rabs_lt_between.

    by split.



    rewrite Rabs_mult -RPow_abs Rabs_Ropp Rabs_R1 pow1 Rmult_1_l.

    apply Hd.

    by rewrite Rabs_Ropp.



    apply Rabs_lt_between in Hx.

    case: Hx => Hx1 Hx2.

    apply Rminus_lt_0 in Hx1.

    apply Rminus_lt_0 in Hx2.

    have Hx := Rmin_pos _ _ Hx1 Hx2 => {Hx1 Hx2}.

    exists (mkposreal _ Hx) => /= y Hy k Hk.

    rewrite /ball /= /AbsRing_ball /= in Hy.

    apply Rabs_lt_between' in Hy.

    rewrite /Rminus -Rmax_opp_Rmin Rplus_max_distr_l Rplus_min_distr_l in Hy.

    case: Hy => Hy1 Hy2.

    apply Rle_lt_trans with (1 := Rmax_r _ _) in Hy1.

    ring_simplify in Hy1.

    apply Rlt_le_trans with (2 := Rmin_l _ _) in Hy2.

    ring_simplify in Hy2.

    apply (Hd k y).

    apply Rabs_lt_between.

    by split.



  move => P [eps Heps].

  have : exists N, forall n, (N <= n)%nat -> r ^ (S n) * M / INR (fact (S n)) < eps.

    have H : is_lim_seq (fun n => r ^ n * M / INR (fact n)) 0.

    case: (Rlt_dec 0 M) => H.

    have H0 : forall n : nat, 0 < r ^ n * M / INR (fact n).

      move => n.

      apply Rdiv_lt_0_compat.

      apply Rmult_lt_0_compat.

      apply pow_lt.

      apply Rle_lt_trans with (2 := Hx), Rabs_pos.

      exact: H.

      exact: INR_fact_lt_0.



    apply ex_series_lim_0, ex_series_Rabs, ex_series_DAlembert with 0.

    exact: Rlt_0_1.

    move => n ; apply Rgt_not_eq, Rlt_gt, H0.



    apply is_lim_seq_ext with (fun n => r / INR (S n)).

    move => n ; rewrite Rabs_pos_eq.

    rewrite /fact -/fact /pow -/pow ?mult_INR ; field.

    repeat split ; apply Rgt_not_eq, Rlt_gt.

    exact: INR_fact_lt_0.

    by apply (lt_INR O), lt_O_Sn.

    exact: H.

    apply pow_lt, Rle_lt_trans with (Rabs x), Hx ; by apply Rabs_pos.

    apply Rlt_le, Rdiv_lt_0_compat ; by apply H0.

    rewrite -(Rmult_0_r r) ; apply (is_lim_seq_scal_l _ _ 0) => //.

    apply (is_lim_seq_incr_1 (fun n => / INR n)).

    replace (Finite 0) with (Rbar_inv p_infty) by auto.

    apply is_lim_seq_inv.

    by apply is_lim_seq_INR.

    by [].

    apply Rnot_lt_le in H ; case: H => H.

    contradict H.

    apply Rle_not_lt.

    apply Rle_trans with (Rabs (Derive_n f O x)).

    by apply Rabs_pos.

    by apply Hd.

    rewrite H.

    apply is_lim_seq_ext with (fun _ => 0).

    move => n ; rewrite /Rdiv ; ring.

    exact: is_lim_seq_const.

    apply is_lim_seq_incr_1 in H.

    apply is_lim_seq_spec in H.

    case: (H eps) => {H} N H.

    exists N => n Hn.

    apply Rle_lt_trans with (2 := H n Hn).

    rewrite Rminus_0_r.

    exact: Rle_abs.



  case => N HN.

  exists N => n Hn.

  apply Heps.



  case: (Taylor_Lagrange f n 0 x).

    by apply Hx'.

    move => t Ht k Hk.

    apply Hd.

    rewrite Rabs_right.

    apply Rle_lt_trans with (1 := proj2 Ht).

    by apply Rle_lt_trans with (1 := Rle_abs _), Hx.

    by apply Rle_ge, Ht.

  move => y [Hy ->].

  rewrite Rminus_0_r.

  rewrite (sum_n_ext _ (fun m : nat => x ^ m / INR (fact m) * Derive_n f m 0)).

  rewrite sum_n_Reals.

  apply Rle_lt_trans with (2 := HN n Hn).

  replace (r ^ S n * M / INR (fact (S n)))

    with ((r^S n / INR (fact (S n))) * M)

    by (rewrite /Rdiv ; ring).

  change minus with Rminus.

  ring_simplify (sum_f_R0 (fun m : nat => x ^ m / INR (fact m) * Derive_n f m 0) n

    - (sum_f_R0 (fun m : nat => x ^ m / INR (fact m) * Derive_n f m 0) n +

    x ^ S n / INR (fact (S n)) * Derive_n f (S n) y)).

  change abs with Rabs.

  rewrite Rabs_mult Rabs_Ropp.

  apply Rmult_le_compat.

  by apply Rabs_pos.

  by apply Rabs_pos.

  rewrite Rabs_div.

  apply Rmult_le_compat.

  apply Rabs_pos.

  apply Rlt_le, Rinv_0_lt_compat.

  apply Rabs_pos_lt.

  exact: INR_fact_neq_0.

  rewrite -RPow_abs.

  apply pow_incr ; split.

  apply Rabs_pos.

  by apply Rlt_le.

  apply Rle_Rinv.

  exact: (INR_fact_lt_0 (S n)).

  apply Rabs_pos_lt, INR_fact_neq_0.

  apply Rle_abs.

  apply INR_fact_neq_0.

  apply Hd.

  apply Rlt_trans with (2 := Hx).

  rewrite ?Rabs_pos_eq.

  by apply Hy.

  apply Rlt_le, Hx'.

  apply Rlt_le, Hy.

  intros m; rewrite pow_n_pow.

  rewrite /scal /= /mult /= /Rdiv ; ring.

Qed.

