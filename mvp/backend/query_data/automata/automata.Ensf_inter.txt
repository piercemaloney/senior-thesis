

Require Import Ensf_types.
(* Ensf_types:
Inductive Ensf : Set :=
  | empty : Ensf
  | add : Elt -> Ensf -> Ensf
with Elt : Set :=
  | natural : nat -> Elt
  | couple : Elt -> Elt -> Elt
  | up : Ensf -> Elt
  | word : Word -> Elt
with Word : Set :=
  | nil : Word
  | cons : Elt -> Word -> Word.

Definition natural_inv (e : Elt) : nat :=
  match e with
  | natural n => n
  | _ => 0
  end.

Lemma nat_invol : forall n : nat, natural_inv (natural n) = n.

Definition word_inv (e : Elt) : Word :=
  match e with
  | word w => w
  | _ => nil
  end.

Lemma add_add :
 forall (a b : Elt) (c d : Ensf), a = b -> c = d -> add a c = add b d.
Hint Resolve add_add.

Lemma couple_couple :
 forall a b c d : Elt, a = b -> c = d -> couple a c = couple b d.

Lemma word_word : forall a b : Word, a = b -> word a = word b.
Hint Resolve word_word.
 
Lemma word_word_inv : forall a b : Word, word a = word b -> a = b.

Definition zero : Elt := natural 0.
Definition un : Elt := natural 1.
Definition singleton (e : Elt) : Ensf := add e empty.

Lemma False_imp_P : forall P : Prop, False -> P.

Lemma equal_add : forall (a b : Ensf) (e : Elt), a = b -> add e a = add e b. *)

Require Import Ensf_dans.
(* Ensf_dans:
Require Import Ensf_types.

Inductive dans : Elt -> Ensf -> Prop :=
  | dans_add1 : forall (x : Elt) (e : Ensf), dans x (add x e)
  | dans_add2 : forall (x y : Elt) (e : Ensf), dans x e -> dans x (add y e).
Hint Resolve dans_add1 dans_add2.
 
Lemma dans_add :
 forall (x y : Elt) (e : Ensf), dans x (add y e) -> y = x \/ dans x e.
 
Lemma dans_add_contr :
 forall (x y : Elt) (e : Ensf), y <> x -> ~ dans x e -> ~ dans x (add y e).
 
Lemma empty_empty : forall E : Elt, ~ dans E empty.
Hint Resolve empty_empty.
 
Lemma dans_empty_imp_P : forall (x : Elt) (P : Prop), dans x empty -> P.
 
Lemma singl2 : forall x : Elt, dans x (singleton x).
Hint Resolve singl2.

Unset Structural Injection.

Lemma singl2_inv : forall x e : Elt, dans x (singleton e) -> x = e :>Elt.
Hint Resolve singl2_inv. *)

Require Import Ensf_union.
(* Ensf_union:
Require Import Ensf_types.
Require Import Ensf_dans.

Fixpoint union (A : Ensf) : Ensf -> Ensf :=
  fun B : Ensf =>
  match A return Ensf with
  | empty =>
        B
       
  | add x e => add x (union e B)
  end.

Lemma union_a_empty : forall a : Ensf, a = union a empty :>Ensf.
Hint Resolve union_a_empty.

Lemma dans_union :
 forall (x : Elt) (a b : Ensf), dans x (union a b) -> dans x a \/ dans x b.
Hint Resolve dans_union.

Lemma union_g : forall (x : Elt) (a b : Ensf), dans x a -> dans x (union a b).
Hint Resolve union_g.

Lemma union_d : forall (x : Elt) (a b : Ensf), dans x b -> dans x (union a b).
Hint Resolve union_d.

Lemma dans_union_inv :
 forall (x : Elt) (a b : Ensf), dans x a \/ dans x b -> dans x (union a b). *)

Require Import Ensf_inclus.
(* Ensf_inclus:
Require Import Ensf_types.

Require Import Ensf_dans.
Require Import Ensf_union.
Require Import Ensf_produit.

Definition inclus (A B : Ensf) : Prop := forall x : Elt, dans x A -> dans x B.

Hint Unfold inclus.

Lemma empty_inclus : forall x : Ensf, inclus empty x.
Hint Resolve empty_inclus.

Lemma refl_inclus : forall x : Ensf, inclus x x.
Hint Resolve refl_inclus.

Lemma inclus_trans :
 forall a b c : Ensf, inclus a b -> inclus b c -> inclus a c.

Lemma cart_inclus :
 forall a b c d : Ensf,
 inclus a b -> inclus c d -> inclus (prodcart a c) (prodcart b d).
Hint Resolve cart_inclus.

Lemma inclus_add :
 forall (a b : Ensf) (y : Elt), inclus a b -> inclus a (add y b).
Hint Resolve inclus_add.

Lemma singl_inclus_add :
 forall (e : Elt) (a : Ensf), inclus (singleton e) (add e a).
Hint Resolve singl_inclus_add.

Lemma inclus_singl :
 forall (e : Elt) (a : Ensf), inclus (singleton e) a -> dans e a.

Lemma add_inclus :
 forall (x : Elt) (a b : Ensf), dans x b -> inclus a b -> inclus (add x a) b.
Hint Resolve add_inclus.

Lemma dans_trans :
 forall (x : Elt) (a b : Ensf), dans x a -> inclus a b -> dans x b.

Lemma union_inclus :
 forall a b c : Ensf, inclus a c -> inclus b c -> inclus (union a b) c.
Hint Resolve union_inclus.

Lemma inclus_g : forall a b : Ensf, inclus a (union a b).

Lemma inclus_d : forall a b : Ensf, inclus b (union a b).

Lemma inclus_g2 : forall A B C : Ensf, inclus A B -> inclus A (union B C).
Hint Resolve inclus_g2.

Lemma inclus_d2 : forall A B C : Ensf, inclus A C -> inclus A (union B C).
Hint Resolve inclus_d2. *)



Definition inter (A B C : Ensf) : Prop :=

  inclus C A /\

  inclus C B /\ (forall x : Elt, dans x A -> dans x B -> dans x C).



Lemma union_inter :

 forall a b c : Ensf,

 inter a b empty -> inter a c empty -> inter a (union b c) empty.

unfold inter in |- *.

intros.

elim H0; clear H0.

intros H0 H1; elim H1; clear H1; intros H1 H2.

elim H; clear H.

intros H3 H4; elim H4; clear H4; intros H4 H5.

split; auto.

split.

apply empty_inclus.

intros.

cut (dans x b \/ dans x c); auto.

intro H7; elim H7; auto.

Qed.



Lemma inter_union :

 forall A B C : Ensf,

 inter A C empty -> inter B C empty -> inter (union A B) C empty.

unfold inter in |- *.

intros.

elim H0; clear H0.

intros H0 H1; elim H1; clear H1; intros H1 H2.

elim H; clear H.

intros H3 H4; elim H4; clear H4; intros H4 H5.

split; auto.

split; auto.

intros.

cut (dans x A \/ dans x B); auto.

intro H7; elim H7; auto.

Qed.



Lemma inter_dans :

 forall (A B : Ensf) (x : Elt), inter A B empty -> dans x A -> ~ dans x B.

unfold inter in |- *.

intros.

elim H; clear H; intros H Ht; elim Ht; clear Ht; intros H1 H2.

red in |- *; intro.

cut (dans x empty); auto.

intro.

apply dans_empty_imp_P with x; auto.

Qed.



Lemma sym_inter : forall A B C : Ensf, inter A B C -> inter B A C.

unfold inter in |- *.

intros.

elim H; clear H; intros H Ht; elim Ht; clear Ht; intros H0 H1.

auto.

Qed.
