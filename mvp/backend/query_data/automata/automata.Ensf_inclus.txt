

Require Import Ensf_types.
(* Ensf_types:
Inductive Ensf : Set :=
  | empty : Ensf
  | add : Elt -> Ensf -> Ensf
with Elt : Set :=
  | natural : nat -> Elt
  | couple : Elt -> Elt -> Elt
  | up : Ensf -> Elt
  | word : Word -> Elt
with Word : Set :=
  | nil : Word
  | cons : Elt -> Word -> Word.

Definition natural_inv (e : Elt) : nat :=
  match e with
  | natural n => n
  | _ => 0
  end.

Lemma nat_invol : forall n : nat, natural_inv (natural n) = n.

Definition word_inv (e : Elt) : Word :=
  match e with
  | word w => w
  | _ => nil
  end.

Lemma add_add :
 forall (a b : Elt) (c d : Ensf), a = b -> c = d -> add a c = add b d.
Hint Resolve add_add.

Lemma couple_couple :
 forall a b c d : Elt, a = b -> c = d -> couple a c = couple b d.

Lemma word_word : forall a b : Word, a = b -> word a = word b.
Hint Resolve word_word.
 
Lemma word_word_inv : forall a b : Word, word a = word b -> a = b.

Definition zero : Elt := natural 0.
Definition un : Elt := natural 1.
Definition singleton (e : Elt) : Ensf := add e empty.

Lemma False_imp_P : forall P : Prop, False -> P.

Lemma equal_add : forall (a b : Ensf) (e : Elt), a = b -> add e a = add e b. *)



Require Import Ensf_dans.
(* Ensf_dans:
Require Import Ensf_types.

Inductive dans : Elt -> Ensf -> Prop :=
  | dans_add1 : forall (x : Elt) (e : Ensf), dans x (add x e)
  | dans_add2 : forall (x y : Elt) (e : Ensf), dans x e -> dans x (add y e).
Hint Resolve dans_add1 dans_add2.
 
Lemma dans_add :
 forall (x y : Elt) (e : Ensf), dans x (add y e) -> y = x \/ dans x e.
 
Lemma dans_add_contr :
 forall (x y : Elt) (e : Ensf), y <> x -> ~ dans x e -> ~ dans x (add y e).
 
Lemma empty_empty : forall E : Elt, ~ dans E empty.
Hint Resolve empty_empty.
 
Lemma dans_empty_imp_P : forall (x : Elt) (P : Prop), dans x empty -> P.
 
Lemma singl2 : forall x : Elt, dans x (singleton x).
Hint Resolve singl2.

Unset Structural Injection.

Lemma singl2_inv : forall x e : Elt, dans x (singleton e) -> x = e :>Elt.
Hint Resolve singl2_inv. *)

Require Import Ensf_union.
(* Ensf_union:
Require Import Ensf_types.
Require Import Ensf_dans.

Fixpoint union (A : Ensf) : Ensf -> Ensf :=
  fun B : Ensf =>
  match A return Ensf with
  | empty =>
        B
       
  | add x e => add x (union e B)
  end.

Lemma union_a_empty : forall a : Ensf, a = union a empty :>Ensf.
Hint Resolve union_a_empty.

Lemma dans_union :
 forall (x : Elt) (a b : Ensf), dans x (union a b) -> dans x a \/ dans x b.
Hint Resolve dans_union.

Lemma union_g : forall (x : Elt) (a b : Ensf), dans x a -> dans x (union a b).
Hint Resolve union_g.

Lemma union_d : forall (x : Elt) (a b : Ensf), dans x b -> dans x (union a b).
Hint Resolve union_d.

Lemma dans_union_inv :
 forall (x : Elt) (a b : Ensf), dans x a \/ dans x b -> dans x (union a b). *)

Require Import Ensf_produit.
(* Ensf_produit:
Require Import Ensf_types.
Require Import Ensf_dans.
Require Import Ensf_union.
Require Import Ensf_couple.

Fixpoint singleprod (x : Elt) (A : Ensf) {struct A} : Ensf :=
  match A with
  | empty => empty
  | add y e => add (couple x y) (singleprod x e)
  end.

Fixpoint prodcart (A : Ensf) : Ensf -> Ensf :=
  fun B : Ensf =>
  match A with
  | empty => empty
  | add x e => union (singleprod x B) (prodcart e B)
  end.

Lemma dans_singleprod :
 forall (x y x0 : Elt) (b : Ensf),
 dans (couple x y) (singleprod x0 b) -> x = x0 :>Elt /\ dans y b.

Lemma coupl2 :
 forall (x y : Elt) (a b : Ensf),
 dans (couple x y) (prodcart a b) -> dans x a /\ dans y b.

Lemma dans_single :
 forall (x y : Elt) (a : Ensf),
 dans y a -> dans (couple x y) (singleprod x a).

Lemma coupl2_inv :
 forall (x y : Elt) (a b : Ensf),
 dans x a -> dans y b -> dans (couple x y) (prodcart a b).
Hint Resolve coupl2_inv.

Lemma dans_singleprod2 :
 forall (x x0 : Elt) (b : Ensf),
 dans x (singleprod x0 b) -> exists y : Elt, x = couple x0 y /\ dans y b.

Lemma coupl3 :
 forall (a b : Ensf) (x : Elt),
 dans x (prodcart a b) ->
 exists x1 : Elt,
   (exists x2 : Elt, dans x1 a /\ dans x2 b /\ x = couple x1 x2). *)



Definition inclus (A B : Ensf) : Prop := forall x : Elt, dans x A -> dans x B.



Hint Unfold inclus.



Lemma empty_inclus : forall x : Ensf, inclus empty x.

unfold inclus in |- *; intros.

absurd (dans x0 empty); auto.

Qed.

Hint Resolve empty_inclus.



Lemma refl_inclus : forall x : Ensf, inclus x x.

auto.

Qed.

Hint Resolve refl_inclus.



Lemma inclus_trans :

 forall a b c : Ensf, inclus a b -> inclus b c -> inclus a c.

auto.

Qed.



Lemma cart_inclus :

 forall a b c d : Ensf,

 inclus a b -> inclus c d -> inclus (prodcart a c) (prodcart b d).

unfold inclus in |- *.

intros.

cut

 (exists x1 : Elt,

    (exists x2 : Elt, dans x1 a /\ dans x2 c /\ x = couple x1 x2)).

2: apply coupl3; auto.

intro H2; elim H2; clear H2.

intros x1 H2; elim H2; clear H2.

intros x2 H2; elim H2; clear H2.

intros H2 H3; elim H3; clear H3.

intros H3 H4.

rewrite H4.

auto.

Qed.

Hint Resolve cart_inclus.



Lemma inclus_add :

 forall (a b : Ensf) (y : Elt), inclus a b -> inclus a (add y b).

auto.

Qed.

Hint Resolve inclus_add.



Lemma singl_inclus_add :

 forall (e : Elt) (a : Ensf), inclus (singleton e) (add e a).

unfold inclus in |- *.

intros e a x H.

cut (x = e); auto.

intro H0.

rewrite H0; auto.

Qed.

Hint Resolve singl_inclus_add.



Lemma inclus_singl :

 forall (e : Elt) (a : Ensf), inclus (singleton e) a -> dans e a.

auto.

Qed.



Lemma add_inclus :

 forall (x : Elt) (a b : Ensf), dans x b -> inclus a b -> inclus (add x a) b.

unfold inclus in |- *.

intros.

cut (x = x0 \/ dans x0 a).

2: apply dans_add; auto.

intro H2; elim H2; clear H2.

intro H2; rewrite <- H2; auto.

auto.

Qed.

Hint Resolve add_inclus.



Lemma dans_trans :

 forall (x : Elt) (a b : Ensf), dans x a -> inclus a b -> dans x b.

auto.

Qed.



Lemma union_inclus :

 forall a b c : Ensf, inclus a c -> inclus b c -> inclus (union a b) c.

unfold inclus in |- *.

intros.

cut (dans x a \/ dans x b); auto.

intro H2; elim H2; auto.

Qed.

Hint Resolve union_inclus.



Lemma inclus_g : forall a b : Ensf, inclus a (union a b).

auto.

Qed.



Lemma inclus_d : forall a b : Ensf, inclus b (union a b).

auto.

Qed.



Lemma inclus_g2 : forall A B C : Ensf, inclus A B -> inclus A (union B C).

auto.

Qed.

Hint Resolve inclus_g2.



Lemma inclus_d2 : forall A B C : Ensf, inclus A C -> inclus A (union B C).

auto.

Qed.

Hint Resolve inclus_d2.

