

Require Import Ensf.
(* Ensf:
Require Export Ensf_types.

Require Export Ensf_dans.

Require Export Ensf_union.

Require Export Ensf_couple.

Require Export Ensf_produit.

Require Export Ensf_inclus.

Require Export Ensf_inter.

Require Export Ensf_map.

Require Export Ensf_disj. *)



Axiom Pdec : forall (P : Elt -> Prop) (x : Elt), {P x} + {~ P x}.



Fixpoint tq (f : Elt -> Prop) (e : Ensf) {struct e} : Ensf :=

  match e return Ensf with

  | empty =>

        empty

       

  | add x F =>

      match Pdec f x return Ensf with

      | left fx =>

          	 add x (tq f F)

          	

      | right nfx => tq f F

      end

  end.



Lemma dans_tq_imp :

 forall (x : Elt) (f : Elt -> Prop) (E : Ensf),

 dans x (tq f E) -> dans x E /\ f x.

intros x f.

simple induction E.

replace (tq f empty) with empty; auto.

intro.

apply (dans_empty_imp_P x); auto.

intros a b H.

replace (tq f (add a b)) with

 match Pdec f a return Ensf with

 | left fa => add a (tq f b)

 | right nfa => tq f b

 end; auto.

elim (Pdec f a).

intros a0 H0.

cut (a = x :>Elt \/ dans x (tq f b)).

2: apply dans_add; auto.

intro H1; elim H1; clear H1.

intro H1; rewrite <- H1; auto.

intro.

cut (dans x b /\ f x); auto.

intro H2; elim H2; auto.

intros.

cut (dans x b /\ f x); auto.

intro H1; elim H1; auto.

Qed.



Lemma imp_dans_tq :

 forall (x : Elt) (f : Elt -> Prop) (E : Ensf),

 dans x E -> f x -> dans x (tq f E).

intros x f.

simple induction E.

intro.

apply (dans_empty_imp_P x); auto.

intros a b H H0 x0.

replace (tq f (add a b)) with

 match Pdec f a return Ensf with

 | left fa => add a (tq f b)

 | right nfa => tq f b

 end; auto.

elim (Pdec f a).



intro.

cut (a = x :>Elt \/ dans x b). 

2: apply dans_add; auto.

intro H1; elim H1; clear H1.

intro H1; rewrite H1; auto.

auto.



intro.

cut (a = x :>Elt \/ dans x b). 

2: apply dans_add; auto.

intro H1; elim H1; clear H1.

intro.

absurd (f a); auto.

rewrite H1; auto.

auto.

Qed.



Lemma inclus_tq : forall (f : Elt -> Prop) (a : Ensf), inclus (tq f a) a.

unfold inclus in |- *.

intros.

cut (dans x a /\ f x); auto.

2: apply dans_tq_imp; auto.

intro H0; elim H0; auto.

Qed.
