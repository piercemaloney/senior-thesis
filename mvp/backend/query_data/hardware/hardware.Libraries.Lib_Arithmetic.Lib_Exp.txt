
Require Export Lib_Mult.
(* Lib_Mult:
Require Export Lib_Plus.

Lemma plus_mult : forall n : nat, n + n = 2 * n.
Hint Resolve plus_mult.

Lemma lt_mult_lt_O : forall n m : nat, 0 < n * m -> 0 < m -> 0 < n.

Lemma le_mult_cst : forall x y a : nat, x <= y -> a * x <= a * y.

Lemma le_mult_csts : forall a b c d : nat, a <= b -> c <= d -> a * c <= b * d.
Hint Resolve le_mult_csts.

Lemma lt_mult_n_Sn : forall n m : nat, 0 < m -> n * m < S n * m.
Hint Resolve lt_mult_n_Sn.

Lemma lt_mult_cst : forall x y a : nat, x < y -> 0 < a -> a * x < a * y.
Hint Resolve lt_mult_cst.

Lemma lt_mult_csts : forall a b c d : nat, a < b -> c < d -> a * c < b * d.
Hint Resolve lt_mult_csts.

Lemma pred_mult : forall n m : nat, 0 < n -> n * m = pred n * m + m.
Hint Resolve pred_mult.

Lemma le_lt_plus_mult :
 forall n m p n' p' : nat, n <= n' -> p < p' -> n * m + p < n' * m + p'.

Lemma le_mult_l : forall n m : nat, 0 < m -> n <= m * n.
Hint Resolve le_mult_l.

Lemma le_mult_r : forall n m : nat, 0 < m -> n <= n * m.
Hint Resolve le_mult_r.

Lemma lt_mult : forall n m : nat, 1 < m -> 0 < n -> n < n * m.
Hint Resolve lt_mult.

Lemma lt_SO_mult : forall n m : nat, 1 < n -> 0 < m -> 1 < n * m.

Lemma plus_m_mult_n_m : forall n m : nat, m + n * m = S n * m.

Lemma y_eq_multxy : forall x y : nat, x = 1 \/ y = 0 -> y = x * y.

Lemma mult_plus_distr_left : forall n m p : nat, p * (n + m) = p * n + p * m.
Hint Resolve mult_plus_distr_left.

Lemma mult_minus_distr_left : forall n m p : nat, p * (n - m) = p * n - p * m.
Hint Resolve mult_minus_distr_left.

Lemma mult_eq_zero : forall a b : nat, a * b = 0 -> a = 0 \/ b = 0.
Hint Resolve mult_eq_zero.

Lemma lt_mult_S_S : forall n m : nat, 0 < S n * S m.
Hint Resolve lt_mult_S_S.

Lemma mult_S_O : forall n m : nat, 0 = S n * m -> 0 = m.

Lemma mult_reg_l : forall a b p : nat, p * a = p * b -> p = 0 \/ a = b.
Hint Resolve mult_reg_l.

Lemma mult_reg_l_bis : forall a b p : nat, 0 < p -> p * a = p * b -> a = b.
Hint Immediate mult_reg_l_bis.

Lemma mult_eq_zero_bis : forall a b : nat, 0 < a -> a * b = 0 -> b = 0.
Hint Immediate mult_eq_zero_bis.

Lemma lt_nm_mult : forall n m : nat, 0 < n -> 0 < m -> 0 < n * m.
Hint Resolve lt_nm_mult.
 
Lemma same_quotient_order :
 forall b q q' r r' : nat, r < b -> q < q' -> q * b + r < q' * b + r'.
Hint Resolve same_quotient_order. *)

Fixpoint exp_2 (n : nat) : nat :=
  match n return nat with
  | O =>
        1 
       
  | S p => 2 * exp_2 p
  end.

Fixpoint exp_n (n m : nat) {struct m} : nat :=
  match m return nat with
  | O =>
        1 
       
  | S p => n * exp_n n p
  end.

Lemma eq_exp_2_exp_n : forall n : nat, exp_2 n = exp_n 2 n.
simple induction n; auto with arith.
intros.
change (exp_2 (S n0) = 2 * exp_n 2 n0) in |- *.
elim H; auto with arith.
Qed.
Hint Resolve eq_exp_2_exp_n.

Lemma exp_2_n_plus_n : forall n : nat, exp_2 n + exp_2 n = exp_2 (S n).
intro.
rewrite plus_mult.
change (2 * exp_2 n = 2 * exp_2 n) in |- *.
reflexivity.
Qed.
Hint Resolve exp_2_n_plus_n.

Lemma exp_2_plus_pn_pn :
 forall n : nat, 0 < n -> exp_2 (pred n) + exp_2 (pred n) = exp_2 n.
intros.
rewrite exp_2_n_plus_n.
rewrite S_pred_n; auto with arith.
Qed.
Hint Resolve exp_2_plus_pn_pn.

Lemma exp_2_le_pn_n : forall n : nat, exp_2 (pred n) <= exp_2 n.
simple induction n; auto with arith.
intros.
simpl in |- *.
elim plus_n_O; auto with arith.
Qed.
Hint Resolve exp_2_le_pn_n.

Lemma exp_2_pos : forall n : nat, 0 < exp_2 n.
simple induction n; auto with arith.
intros.
simpl in |- *.
elim plus_n_O; auto with arith.
Qed.
Hint Resolve exp_2_pos.

Lemma exp_2_incr : forall n m : nat, n <= m -> exp_2 n <= exp_2 m.
intros.
elim H; auto with arith.
intros.
simpl in |- *.
elim plus_n_O.
elim H1; auto with arith.
Qed.
Hint Resolve exp_2_incr.

Lemma exp_2_n_plus_m : forall n m : nat, exp_2 (n + m) = exp_2 n * exp_2 m.
simple induction n.
intro.
simpl in |- *.
elim plus_n_O; reflexivity.
intros.
simpl in |- *.
elim plus_n_O.
apply sym_equal.
elim plus_n_O.
rewrite H.
elim mult_plus_distr_r; reflexivity.
Qed.
Hint Resolve exp_2_n_plus_m.

Lemma exp_n_incr : forall n m p : nat, n <= m -> exp_n n p <= exp_n m p.
simple induction p; auto with arith.
intros.
simpl in |- *.
apply le_mult_csts; auto with arith.
Qed.
Hint Resolve exp_n_incr.

Lemma exp_n_neutre : forall n : nat, exp_n 1 n = 1.
simple induction n; auto with arith.
intros.
simpl in |- *.
rewrite H; auto with arith.
Qed.
Hint Resolve exp_n_neutre.

Lemma exp_n_plus_mult :
 forall n m p : nat, exp_n n (m + p) = exp_n n m * exp_n n p.
simple induction p.
simpl in |- *.
elim plus_n_O.
elim mult_n_Sm.
auto with arith.
elim mult_n_O; auto with arith.

clear p; intros p H_rec.
elim plus_n_Sm.
simpl in |- *.
rewrite H_rec.
elim mult_assoc_reverse.
rewrite (mult_comm n (exp_n n m)).
auto with arith.
Qed.
Hint Resolve exp_n_plus_mult.

Lemma exp_n_permut :
 forall n m p : nat, exp_n n (m * p) = exp_n (exp_n n p) m.
simple induction m; auto with arith.
intros.
simpl in |- *.
elim H.
elim exp_n_plus_mult; auto with arith.
Qed.
Hint Resolve exp_n_permut.

Lemma exp_n_plus_p1 : forall n p : nat, exp_n n (p + 1) = n * exp_n n p.
simple induction p; simpl in |- *.
auto with arith.
intros no H; rewrite H; auto with arith.
Qed.
Hint Resolve exp_n_plus_p1.

Lemma exp_n_pos : forall n p : nat, 0 < n -> 0 < exp_n n p.
simple induction p.
simpl in |- *; auto with arith.
intros.
simpl in |- *.
apply lt_nm_mult; auto with arith.
Qed.
Hint Resolve exp_n_pos.

Lemma le_exp_n_mult : forall n p : nat, 0 < n -> exp_n n p <= n * exp_n n p.
auto with arith.
Qed.
Hint Resolve le_exp_n_mult.

