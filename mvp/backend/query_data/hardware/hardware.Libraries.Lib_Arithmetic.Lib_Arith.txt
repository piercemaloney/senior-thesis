
Require Export Lib_Dec.
(* Lib_Dec:
Require Export Arith.
Require Export Compare_dec.
Require Export Lib_Prop.

Lemma lt_or_eq_O_dec : forall n : nat, {0 < n} + {n = 0}.
Hint Resolve lt_or_eq_O_dec.

Lemma lt_SO_or_eq_O_or_SO_dec : forall n : nat, {1 < n} + {n = 0} + {n = 1}.
Hint Resolve lt_SO_or_eq_O_or_SO_dec.

Lemma O_or_no_dec : forall n : nat, {n = 0} + {n <> 0}.
Hint Resolve O_or_no_dec.

Lemma eq_or_not : forall n m : nat, {n = m} + {n <> m}.

Lemma nat_order_dec : forall a b : nat, or3 (a < b) (a = b) (b < a). *)
Require Export Lib_Mult.
(* Lib_Mult:
Require Export Lib_Plus.

Lemma plus_mult : forall n : nat, n + n = 2 * n.
Hint Resolve plus_mult.

Lemma lt_mult_lt_O : forall n m : nat, 0 < n * m -> 0 < m -> 0 < n.

Lemma le_mult_cst : forall x y a : nat, x <= y -> a * x <= a * y.

Lemma le_mult_csts : forall a b c d : nat, a <= b -> c <= d -> a * c <= b * d.
Hint Resolve le_mult_csts.

Lemma lt_mult_n_Sn : forall n m : nat, 0 < m -> n * m < S n * m.
Hint Resolve lt_mult_n_Sn.

Lemma lt_mult_cst : forall x y a : nat, x < y -> 0 < a -> a * x < a * y.
Hint Resolve lt_mult_cst.

Lemma lt_mult_csts : forall a b c d : nat, a < b -> c < d -> a * c < b * d.
Hint Resolve lt_mult_csts.

Lemma pred_mult : forall n m : nat, 0 < n -> n * m = pred n * m + m.
Hint Resolve pred_mult.

Lemma le_lt_plus_mult :
 forall n m p n' p' : nat, n <= n' -> p < p' -> n * m + p < n' * m + p'.

Lemma le_mult_l : forall n m : nat, 0 < m -> n <= m * n.
Hint Resolve le_mult_l.

Lemma le_mult_r : forall n m : nat, 0 < m -> n <= n * m.
Hint Resolve le_mult_r.

Lemma lt_mult : forall n m : nat, 1 < m -> 0 < n -> n < n * m.
Hint Resolve lt_mult.

Lemma lt_SO_mult : forall n m : nat, 1 < n -> 0 < m -> 1 < n * m.

Lemma plus_m_mult_n_m : forall n m : nat, m + n * m = S n * m.

Lemma y_eq_multxy : forall x y : nat, x = 1 \/ y = 0 -> y = x * y.

Lemma mult_plus_distr_left : forall n m p : nat, p * (n + m) = p * n + p * m.
Hint Resolve mult_plus_distr_left.

Lemma mult_minus_distr_left : forall n m p : nat, p * (n - m) = p * n - p * m.
Hint Resolve mult_minus_distr_left.

Lemma mult_eq_zero : forall a b : nat, a * b = 0 -> a = 0 \/ b = 0.
Hint Resolve mult_eq_zero.

Lemma lt_mult_S_S : forall n m : nat, 0 < S n * S m.
Hint Resolve lt_mult_S_S.

Lemma mult_S_O : forall n m : nat, 0 = S n * m -> 0 = m.

Lemma mult_reg_l : forall a b p : nat, p * a = p * b -> p = 0 \/ a = b.
Hint Resolve mult_reg_l.

Lemma mult_reg_l_bis : forall a b p : nat, 0 < p -> p * a = p * b -> a = b.
Hint Immediate mult_reg_l_bis.

Lemma mult_eq_zero_bis : forall a b : nat, 0 < a -> a * b = 0 -> b = 0.
Hint Immediate mult_eq_zero_bis.

Lemma lt_nm_mult : forall n m : nat, 0 < n -> 0 < m -> 0 < n * m.
Hint Resolve lt_nm_mult.
 
Lemma same_quotient_order :
 forall b q q' r r' : nat, r < b -> q < q' -> q * b + r < q' * b + r'.
Hint Resolve same_quotient_order. *)
Require Export Lib_Square.
(* Lib_Square:
Require Export Lib_Exp.

Definition Square (n : nat) := n * n.

Lemma Square_exp_2 : forall n : nat, Square (exp_2 n) = exp_2 (2 * n).
Hint Resolve Square_exp_2.

Lemma eq_Square_exp_n : forall n : nat, Square n = exp_n n 2.
Hint Resolve eq_Square_exp_n.

Lemma Square_inc : forall n m : nat, n <= m -> Square n <= Square m.
Hint Resolve Square_inc.

Lemma Square_strict_inc : forall n m : nat, n < m -> Square n < Square m.
Hint Resolve Square_strict_inc.

Lemma le_n_Square : forall n : nat, n <= Square n.
Hint Resolve le_n_Square. *)
Require Export Lib_Div_Even_Odd.
(* Lib_Div_Even_Odd:
Require Export Lib_Mult.

Inductive even (n : nat) : Prop :=
    even_intro : forall q : nat, n = 2 * q -> even n.

Inductive odd (n : nat) : Prop :=
    odd_intro : forall q : nat, n = 2 * q + 1 -> odd n.

Lemma no_zero_div :
 forall n m : nat, 0 < n -> forall q : nat, n = m * q -> 0 < q.

Lemma lt_quotient2_n :
 forall n : nat, 0 < n -> forall q : nat, n = 2 * q -> q < n.
Hint Resolve lt_quotient2_n.

Lemma less_div : forall n a b : nat, 0 < n -> n = a * b -> b <= n.

Lemma even_or_odd : forall n : nat, {even n} + {odd n}.

Lemma even_odd : forall a : nat, even a -> ~ odd a.

Lemma odd_even : forall a : nat, odd a -> ~ even a.

Lemma plus_even_even : forall a b : nat, even a -> even b -> even (a + b).

Lemma S_odd_even : forall a : nat, odd a -> even (S a).

Lemma pred_odd_even : forall a : nat, odd a -> even (pred a).

Lemma plus_even_odd : forall a b : nat, even a -> odd b -> odd (a + b).
Hint Resolve plus_even_odd.

Lemma plus_odd_even : forall a b : nat, odd a -> even b -> odd (a + b).

Lemma S_even_odd : forall a : nat, even a -> odd (S a).

Lemma plus_odd_odd : forall a b : nat, odd a -> odd b -> even (a + b).

Lemma mult_even : forall a b : nat, even a -> even (a * b).

Lemma mult_odd_odd : forall a b : nat, odd a -> odd b -> odd (a * b).

Definition div (d a : nat) := exists k : nat, a = d * k.

Lemma div_odd_even : forall n d : nat, div d (2 * n) -> odd d -> div d n.

Lemma div_odd_odd : forall n : nat, odd n -> forall d : nat, div d n -> odd d.

Lemma div_plus : forall n m d : nat, div d n -> div d m -> div d (n + m).
Hint Resolve div_plus.

Lemma div_minus : forall n m d : nat, div d n -> div d m -> div d (n - m).
Hint Resolve div_minus.

Inductive Even (n : nat) : Set :=
    Even_intro : forall q : nat, n = 2 * q -> Even n.

Inductive Odd (n : nat) : Set :=
    Odd_intro : forall q : nat, n = 2 * q + 1 -> Odd n.

Lemma Even_or_Odd : forall n : nat, Even n + Odd n.

Lemma Odd_odd : forall n : nat, Odd n -> odd n.
Hint Resolve Odd_odd. *)
Require Export Lib_Eq_Le_Lt.
(* Lib_Eq_Le_Lt:
Require Export Arith.
Require Export Compare.

Lemma not_S_eq : forall n m : nat, S n <> S m -> n <> m.
Hint Resolve not_S_eq.

Lemma neq_O_le : forall n : nat, n <> 0 -> 1 <= n.
Hint Resolve neq_O_le.

Lemma lt_O : forall m n : nat, m < n -> 0 < n.
Hint Immediate lt_O.

Lemma lt_Ex_n : forall n : nat, 0 < n -> exists n0 : nat, n = S n0.
Hint Resolve lt_Ex_n.

Lemma lt_m_neq : forall m n : nat, m < n -> n <> m.

Hint Resolve lt_m_neq. *)
Require Export Lib_Fact.
(* Lib_Fact:
Require Export Arith.

Fixpoint factorial (n : nat) : nat :=
  match n with
  | O => 1
  | S p => S p * factorial p
  end.

Lemma fact_pred :
 forall n : nat, 0 < n -> factorial n = n * factorial (pred n).
Hint Resolve fact_pred. *)

