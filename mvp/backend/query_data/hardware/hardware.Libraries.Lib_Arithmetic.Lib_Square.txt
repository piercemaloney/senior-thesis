
Require Export Lib_Exp.
(* Lib_Exp:
Require Export Lib_Mult.

Fixpoint exp_2 (n : nat) : nat :=
  match n return nat with
  | O =>
        1 
       
  | S p => 2 * exp_2 p
  end.

Fixpoint exp_n (n m : nat) {struct m} : nat :=
  match m return nat with
  | O =>
        1 
       
  | S p => n * exp_n n p
  end.

Lemma eq_exp_2_exp_n : forall n : nat, exp_2 n = exp_n 2 n.
Hint Resolve eq_exp_2_exp_n.

Lemma exp_2_n_plus_n : forall n : nat, exp_2 n + exp_2 n = exp_2 (S n).
Hint Resolve exp_2_n_plus_n.

Lemma exp_2_plus_pn_pn :
 forall n : nat, 0 < n -> exp_2 (pred n) + exp_2 (pred n) = exp_2 n.
Hint Resolve exp_2_plus_pn_pn.

Lemma exp_2_le_pn_n : forall n : nat, exp_2 (pred n) <= exp_2 n.
Hint Resolve exp_2_le_pn_n.

Lemma exp_2_pos : forall n : nat, 0 < exp_2 n.
Hint Resolve exp_2_pos.

Lemma exp_2_incr : forall n m : nat, n <= m -> exp_2 n <= exp_2 m.
Hint Resolve exp_2_incr.

Lemma exp_2_n_plus_m : forall n m : nat, exp_2 (n + m) = exp_2 n * exp_2 m.
Hint Resolve exp_2_n_plus_m.

Lemma exp_n_incr : forall n m p : nat, n <= m -> exp_n n p <= exp_n m p.
Hint Resolve exp_n_incr.

Lemma exp_n_neutre : forall n : nat, exp_n 1 n = 1.
Hint Resolve exp_n_neutre.

Lemma exp_n_plus_mult :
 forall n m p : nat, exp_n n (m + p) = exp_n n m * exp_n n p.
Hint Resolve exp_n_plus_mult.

Lemma exp_n_permut :
 forall n m p : nat, exp_n n (m * p) = exp_n (exp_n n p) m.
Hint Resolve exp_n_permut.

Lemma exp_n_plus_p1 : forall n p : nat, exp_n n (p + 1) = n * exp_n n p.
Hint Resolve exp_n_plus_p1.

Lemma exp_n_pos : forall n p : nat, 0 < n -> 0 < exp_n n p.
Hint Resolve exp_n_pos.

Lemma le_exp_n_mult : forall n p : nat, 0 < n -> exp_n n p <= n * exp_n n p.
Hint Resolve le_exp_n_mult. *)

Definition Square (n : nat) := n * n.

Lemma Square_exp_2 : forall n : nat, Square (exp_2 n) = exp_2 (2 * n).
intro.
unfold Square in |- *.
elim exp_2_n_plus_m.
rewrite plus_mult; reflexivity.
Qed.
Hint Resolve Square_exp_2.

Lemma eq_Square_exp_n : forall n : nat, Square n = exp_n n 2.
unfold Square in |- *.
simpl in |- *.
intro; elim (mult_comm 1 n); simpl in |- *; auto with arith.
Qed.
Hint Resolve eq_Square_exp_n.

Lemma Square_inc : forall n m : nat, n <= m -> Square n <= Square m.
intros.
unfold Square in |- *.
apply le_mult_csts; assumption.
Qed.
Hint Resolve Square_inc.

Lemma Square_strict_inc : forall n m : nat, n < m -> Square n < Square m.
intros.
unfold Square in |- *.
apply lt_mult_csts; assumption.
Qed.
Hint Resolve Square_strict_inc.

Lemma le_n_Square : forall n : nat, n <= Square n.
simple induction n; auto with arith.
intros.
unfold Square in |- *.
simpl in |- *.
apply le_n_S.
elim mult_comm; simpl in |- *.
change (n0 <= n0 + (n0 + Square n0)) in |- *.
apply le_plus_l.
Qed.
Hint Resolve le_n_Square.
