
Require Export Lib_Eq_Le_Lt.
(* Lib_Eq_Le_Lt:
Require Export Arith.
Require Export Compare.

Lemma not_S_eq : forall n m : nat, S n <> S m -> n <> m.
Hint Resolve not_S_eq.

Lemma neq_O_le : forall n : nat, n <> 0 -> 1 <= n.
Hint Resolve neq_O_le.

Lemma lt_O : forall m n : nat, m < n -> 0 < n.
Hint Immediate lt_O.

Lemma lt_Ex_n : forall n : nat, 0 < n -> exists n0 : nat, n = S n0.
Hint Resolve lt_Ex_n.

Lemma lt_m_neq : forall m n : nat, m < n -> n <> m.

Hint Resolve lt_m_neq. *)
Require Export Lib_Prop.
(* Lib_Prop:
Inductive or3 (A B C : Prop) : Set :=
  | or3_Left : A -> or3 A B C
  | or3_Middle : B -> or3 A B C
  | or3_Right : C -> or3 A B C.

Lemma sym_and : forall A B : Prop, A /\ B -> B /\ A.
Hint Immediate sym_and.

Lemma sym_or : forall A B : Prop, A \/ B -> B \/ A.
Hint Immediate sym_or.

Lemma no_and_l : forall A B : Prop, ~ A -> ~ (A /\ B).
Hint Resolve no_and_l.

Lemma no_and_r : forall A B : Prop, ~ B -> ~ (A /\ B).
Hint Resolve no_and_r.

Lemma no_or : forall A B : Prop, ~ A -> B \/ A -> B.

Lemma no_or_inv : forall A B : Prop, ~ A -> A \/ B -> B.

Lemma no_or_and : forall A B C D : Prop, ~ C -> A /\ B \/ C /\ D -> A /\ B.

Lemma no_or_and_inv :
 forall A B C D : Prop, ~ D -> C /\ D \/ A /\ B -> A /\ B.

Lemma no_no_A : forall A : Prop, A -> ~ ~ A.
Hint Resolve no_no_A.

Lemma impl_no_no : forall A B : Prop, (A -> B) -> ~ B -> ~ A.

Lemma no_or_r : forall A B : Prop, ~ A -> A \/ B -> B.

Lemma no_or_l : forall A B : Prop, ~ B -> A \/ B -> A. *)

Lemma pred_diff_O : forall n : nat, n <> 0 -> n <> 1 -> pred n <> 0.
simple induction n; auto with arith.
Qed.
Hint Resolve pred_diff_O.

Lemma S_pred_n : forall n : nat, 1 <= n -> S (pred n) = n.
simple induction n; auto with arith.
Qed.
Hint Resolve S_pred_n.

Lemma eq_pred : forall n m : nat, n = m -> pred n = pred m.
intros n m H.
rewrite H; auto with arith.
Qed.
Hint Resolve eq_pred.

Lemma pred_diff_lt : forall n : nat, n <> 0 -> n <> 1 -> 0 < pred n.
intros; apply neq_O_lt.
apply sym_not_equal; auto with arith.
Qed.
Hint Resolve pred_diff_lt.

Lemma pred_n_O : forall n : nat, pred n = 0 -> n = 0 \/ n = 1.
simple induction n; auto with arith.
Qed. 
Hint Resolve pred_n_O.

Lemma pred_O : forall n : nat, n = 0 -> pred n = 0.
intros.
rewrite H; auto with arith.
Qed.
Hint Resolve pred_O.

Lemma pred_no_O : forall n : nat, pred n <> 0 -> n <> 0.
simple induction n; auto with arith.
Qed.
Hint Resolve pred_no_O.

Lemma lt_pred : forall n : nat, 0 < n -> pred n < n.
simple induction n; auto with arith.
Qed.
Hint Resolve lt_pred.

Lemma dif_0_pred_eq_0_eq_1 : forall n : nat, n <> 0 -> pred n = 0 -> n = 1.
intros n H0 H1.
cut (n = 0 \/ n = 1).
intros H_Cut.
apply no_or_r with (n = 0); try trivial with arith.
apply pred_n_O; try trivial with arith.
Qed.

Lemma lt_le_pred : forall n m : nat, n < m -> n <= pred m.
simple induction n; simple induction m; auto with arith.
Qed.
Hint Resolve lt_le_pred.

