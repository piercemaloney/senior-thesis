
Require Export Arith.
Require Export Compare_dec.
Require Export Lib_Prop.
(* Lib_Prop:
Inductive or3 (A B C : Prop) : Set :=
  | or3_Left : A -> or3 A B C
  | or3_Middle : B -> or3 A B C
  | or3_Right : C -> or3 A B C.

Lemma sym_and : forall A B : Prop, A /\ B -> B /\ A.
Hint Immediate sym_and.

Lemma sym_or : forall A B : Prop, A \/ B -> B \/ A.
Hint Immediate sym_or.

Lemma no_and_l : forall A B : Prop, ~ A -> ~ (A /\ B).
Hint Resolve no_and_l.

Lemma no_and_r : forall A B : Prop, ~ B -> ~ (A /\ B).
Hint Resolve no_and_r.

Lemma no_or : forall A B : Prop, ~ A -> B \/ A -> B.

Lemma no_or_inv : forall A B : Prop, ~ A -> A \/ B -> B.

Lemma no_or_and : forall A B C D : Prop, ~ C -> A /\ B \/ C /\ D -> A /\ B.

Lemma no_or_and_inv :
 forall A B C D : Prop, ~ D -> C /\ D \/ A /\ B -> A /\ B.

Lemma no_no_A : forall A : Prop, A -> ~ ~ A.
Hint Resolve no_no_A.

Lemma impl_no_no : forall A B : Prop, (A -> B) -> ~ B -> ~ A.

Lemma no_or_r : forall A B : Prop, ~ A -> A \/ B -> B.

Lemma no_or_l : forall A B : Prop, ~ B -> A \/ B -> A. *)

Lemma lt_or_eq_O_dec : forall n : nat, {0 < n} + {n = 0}.
simple induction n; auto with arith.
Qed.
Hint Resolve lt_or_eq_O_dec.

Lemma lt_SO_or_eq_O_or_SO_dec : forall n : nat, {1 < n} + {n = 0} + {n = 1}.
intros n; case n; auto with arith.
intros p; case p; auto with arith.
Qed.
Hint Resolve lt_SO_or_eq_O_or_SO_dec.

Lemma O_or_no_dec : forall n : nat, {n = 0} + {n <> 0}.
simple induction n; auto with arith.
Qed.
Hint Resolve O_or_no_dec.

Lemma eq_or_not : forall n m : nat, {n = m} + {n <> m}.
auto with arith.
Qed.

Lemma nat_order_dec : forall a b : nat, or3 (a < b) (a = b) (b < a).
simple induction a; simple induction b.
apply or3_Middle; auto with arith.
intros.
apply or3_Left; auto with arith.
apply or3_Right; auto with arith.
intros.
elim (H n0).
intro.
apply or3_Left.
apply lt_n_S; assumption.
intro.
apply or3_Middle.
apply eq_S; assumption.
intro.
apply or3_Right.
apply lt_n_S; assumption.
Qed.

