
Require Export Factorization.
(* Factorization:
Require Export Numerals.

Section factorization.

   Variable A : Set.
   Variable BASE : BT.
   Let b := base BASE.
   Let Num := num BASE.
   Let Digit := digit BASE.
   Let Tl := tl Digit.

   Let Cons := cons Digit.
   Let Nil := nil Digit.
   Let Val_bound := val_bound BASE.

 Section Definitions_for_Relations.
   
   Definition Diveucl (a b q r : nat) : Prop := a = b * q + r /\ r < b.
   Definition Zero : inf 1 := Val_bound 0 Nil.

   Variable R : forall n : nat, A -> inf n -> inf n -> A -> Prop.
         
   Definition factorizable : Prop :=
     forall (m n : nat) (q q' : inf m) (r r' : inf n) 
       (a a1 a' : A) (x x' : inf (m * n)),
     Diveucl (val_inf (m * n) x) n (val_inf m q) (val_inf n r) ->
     Diveucl (val_inf (m * n) x') n (val_inf m q') (val_inf n r') ->
     R m a q q' a1 -> R n a1 r r' a' -> R (m * n) a x x' a'.

    Definition proper : Prop := forall a : A, R 1 a Zero Zero a.

 End Definitions_for_Relations.

 Section Three_inputs.

  Variable FR : forall n : nat, A -> inf n -> inf n -> A.

  Let R (n : nat) (a : A) (x y : inf n) (a' : A) : Prop := a' = FR n a x y.

  Lemma prop_Rel :
   proper R ->
   forall (X Y : Num 0) (a : A), R 1 a (Val_bound 0 X) (Val_bound 0 Y) a.

   Lemma fact_Rel :
    factorizable R ->
    forall (n : nat) (X Y : Num (S n)) (a a' : A),
    R (exp b n) (FR b a (Hd Digit n X) (Hd Digit n Y))
      (Val_bound n (Tl (S n) X)) (Val_bound n (Tl (S n) Y)) a' ->
    R (exp b (S n)) a (Val_bound (S n) X) (Val_bound (S n) Y) a'.

 End Three_inputs.

End factorization. *)

 Section Factorization_for_Synthesis.
 
   Variable A : Set.
   Variable BASE : BT.
   Let b := base BASE.
   Let Num := num BASE.
   Let Digit := digit BASE.
   Let Val_bound := val_bound BASE.
   Definition Tl := tl Digit.

   Variable FR : forall n : nat, A -> inf n -> inf n -> A.

   Let R (n : nat) (a : A) (x y : inf n) (a' : A) : Prop := a' = FR n a x y.

   Notation Factorizable := (factorizable _) (only parsing).
   Notation Proper := (proper _) (only parsing).

   Theorem factorization_for_synthesis :
    factorizable _ R ->
    proper _ BASE R ->
    forall (n : nat) (X Y : Num n) (a : A),
    {a' : A | R (exp b n) a (Val_bound n X) (Val_bound n Y) a'}.
  intros F P.
  simple induction n.
  intros X Y a.
  exists a.
  simpl in |- *.
  unfold R in |- *; unfold Val_bound in |- *; apply prop_Rel.
  try trivial.
  clear n; intros n H_rec X Y a.
  elim
   (H_rec (Tl (S n) X) (Tl (S n) Y) (FR b a (Hd Digit n X) (Hd Digit n Y))).
  intros a' H; exists a'.
  unfold b in |- *; unfold R in |- *; unfold Val_bound in |- *.
  apply fact_Rel; try trivial.
  Defined.

End Factorization_for_Synthesis.

