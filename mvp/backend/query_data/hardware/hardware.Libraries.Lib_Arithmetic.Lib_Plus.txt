
Require Export Lib_Minus.
(* Lib_Minus:
Require Export Lib_Pred.

Lemma minus_SS_n : forall n : nat, S (S n) - n = 2.
Hint Resolve minus_SS_n.

Lemma minus_S : forall n m : nat, n - m = S n - S m.
Hint Resolve minus_S.

Lemma pred_minus_minus : forall n m : nat, pred (n - m) = n - S m.
Hint Resolve pred_minus_minus.

Lemma minus_pred_S : forall n m p : nat, n = m - p -> pred n = m - S p.
Hint Resolve minus_pred_S.

Lemma pred_minus : forall n : nat, pred n = n - 1.
Hint Resolve pred_minus.

Lemma O_minus_S : forall n m : nat, 0 = n - m -> 0 = n - S m.
Hint Resolve O_minus_S.

Lemma minus_minus_plus : forall n m p : nat, n - m - p = n - (m + p).
Hint Resolve minus_minus_plus.

Lemma lt_O_minus : forall n m : nat, n < m -> 0 < m - n.
Hint Resolve lt_O_minus.

Lemma le_minus : forall n m : nat, n - m <= n.
Hint Resolve le_minus.

Lemma le_minus_n_Sn : forall n m : nat, n - m <= S n - m.
Hint Resolve le_minus_n_Sn.

Lemma le_reg_minus : forall n m p : nat, n <= m -> n - p <= m - p.
Hint Resolve le_reg_minus.

Lemma lt_transp_r : forall n m p : nat, 0 < n -> p < n + m -> p - m < n.

Lemma lt_neq_O_pred : forall n m : nat, S n < m -> pred (m - n) <> 0.
Hint Resolve lt_neq_O_pred.

Lemma minus_Sn_n : forall n : nat, S n - n = 1.
Hint Resolve minus_Sn_n.

Lemma eq_minus_plus : forall n m : nat, m <= n -> n - m + m = n.
Hint Immediate eq_minus_plus. *)

Lemma plus_opp : forall n m : nat, n + m - m = n.
intros n m; elim (plus_comm m n); apply minus_plus.
Qed.
Hint Resolve plus_opp.

Lemma S_plus : forall n : nat, S n = n + 1.
intro; elim plus_comm; auto with arith.
Qed.
Hint Resolve S_plus.

Lemma lt_plus : forall n m : nat, 0 < n -> m < n + m.
simple induction n; simple induction m; auto with arith.
intros.
simpl in |- *; apply lt_n_S.
auto with arith.
Qed.
Hint Resolve lt_plus.

Lemma le_minus_plus : forall n m : nat, n - m <= n + m.
simple induction n; auto with arith.
Qed.
Hint Resolve le_minus_plus.

Lemma le_le_assoc_plus_minus :
 forall n m p : nat, n <= m -> n <= p -> m - n + p = m + (p - n).
intros.
elim H.
elim minus_n_n; simpl in |- *; elim le_plus_minus; auto with arith.
intros.
elim minus_Sn_m; simpl in |- *.
apply eq_S; auto with arith.
assumption.
Qed.
Hint Resolve le_le_assoc_plus_minus.

Lemma le_lt_plus : forall n m p q : nat, n <= p -> m < q -> n + m < p + q.
intros.
apply lt_le_trans with (n + q).
apply plus_lt_compat_l; try trivial with arith.
apply plus_le_compat_r; try trivial with arith.
Qed.

Lemma plus_eq_zero : forall a b : nat, a + b = 0 -> a = 0 /\ b = 0.
intros a b H.
split; apply sym_equal; apply le_n_O_eq; elim H; auto with arith.
Qed.
Hint Resolve plus_eq_zero.

Lemma le_transp_l : forall n m p : nat, n + m <= p -> m <= p - n.
simple induction n; intros.
simpl in H; elim minus_n_O; assumption.
elim H0.
elim plus_comm; rewrite plus_opp; auto with arith.
intros.
simpl in |- *; apply H; auto with arith.
Qed.
Hint Resolve le_transp_l.

Lemma le_transp_r : forall n m p : nat, n + m <= p -> n <= p - m.
intros.
apply le_transp_l.
elim plus_comm; assumption.
Qed.
Hint Resolve le_transp_r.

