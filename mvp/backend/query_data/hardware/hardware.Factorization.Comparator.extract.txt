

Require Import Factorization_Synth.
(* Factorization_Synth:
Require Export Factorization.

 Section Factorization_for_Synthesis.
 
   Variable A : Set.
   Variable BASE : BT.
   Let b := base BASE.
   Let Num := num BASE.
   Let Digit := digit BASE.
   Let Val_bound := val_bound BASE.
   Definition Tl := tl Digit.

   Variable FR : forall n : nat, A -> inf n -> inf n -> A.

   Let R (n : nat) (a : A) (x y : inf n) (a' : A) : Prop := a' = FR n a x y.

   Notation Factorizable := (factorizable _) (only parsing).
   Notation Proper := (proper _) (only parsing).

   Theorem factorization_for_synthesis :
    factorizable _ R ->
    proper _ BASE R ->
    forall (n : nat) (X Y : Num n) (a : A),
    {a' : A | R (exp b n) a (Val_bound n X) (Val_bound n Y) a'}.

End Factorization_for_Synthesis. *)

Require Import Comp_Synth.
(* Comp_Synth:
Require Import Factorization_Synth.
Require Import Comparator_Relation.

Parameter BASE : BT.
Definition b := base BASE.
Definition Num := num BASE.
Definition Val_bound := val_bound BASE.
 
Lemma Comparator :
 forall (n : nat) (o : order) (X Y : Num n),
 {o' : order | R (exp b n) o (Val_bound n X) (Val_bound n Y) o'}. *)

Require Extraction.



Extraction Inline Tl val_inf.

Extraction Implicit Comparator_Relation.FR [n].

 

Extraction Inline factorization_for_synthesis.



Extraction "Factorization/Comparator/comp.ml" Comparator.

