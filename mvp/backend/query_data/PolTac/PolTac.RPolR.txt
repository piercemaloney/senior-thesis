Require Import ZArith.
Require Import Reals.
Require Import PolSBase.
(* PolSBase:
Require Export ZArith.
Require Export List.
Require Import PolAuxList.
 
Section PolSimplBase.

Variable C : Set.

Variable Cplus : C -> C ->  C.
Variable Cmul : C -> C ->  C.
Variable Cop : C ->  C.

Variable C0 : C.
Variable C1 : C.

Variable isC1 : C ->  bool.

Variable isC0 : C ->  bool.

Variable isPos : C ->  bool.

Variable Cdivide : C -> C ->  bool.

Variable Cdiv : C -> C ->  C.

Definition le_pos p1 p2 := Zle_bool (Zpos p1) (Zpos p2).

Definition eq_pos p1 p2 := Zeq_bool (Zpos p1) (Zpos p2).

Inductive PExpr : Set :=
  PEc: C ->  PExpr
 | PEX: positive ->  PExpr
 | PEadd: PExpr -> PExpr ->  PExpr
 | PEsub: PExpr -> PExpr ->  PExpr
 | PEmul: PExpr -> PExpr ->  PExpr
 | PEopp: PExpr ->  PExpr .

Definition isP0 e :=
   match e with PEc c => isC0 c | _ => false end.

Definition isP1 e :=
   match e with PEc c => isC1 c | _ => false end.

Definition mkPEmulc (c: C) (e: PExpr) := 
  if isC0 c then  PEc C0 else
  if isC1 c then e else
  match e with
     (PEc c1) => PEc (Cmul c c1)
   | (PEopp e1) =>  PEmul (PEc (Cop c)) e1
   | (PEmul (PEc c1) e1)  => PEmul (PEc (Cmul c c1)) e1
   | _ => PEmul (PEc c) e
  end.
 
Definition mkPEmul (e1 e2 : PExpr) := 
   match e1 with
     (PEc c1) => mkPEmulc c1 e2
   | (PEopp e3) => 
                match e2 with
                 (PEc c2) => mkPEmulc (Cop c2) e3
                | (PEmul (PEc c2) e4) => mkPEmulc (Cop c2) (PEmul e3 e4)
                | (PEopp e4) => PEmul e3 e4
                |  _ => PEopp (PEmul e3 e2)
                end
   | (PEmul (PEc c1) e3)  => 
                match e2 with
                 (PEc c2) => mkPEmulc (Cmul c1 c2) e3
                | (PEmul (PEc c2) (PEopp e4)) => mkPEmulc (Cmul c1 c2)
                                                    (PEmul e3 e4)
                | (PEopp e4) => mkPEmulc (Cop c1) (PEmul e3 e4)
                |  _ => mkPEmulc c1 (PEmul e3 e2)
                end
   | _ => 
                match e2 with
                 (PEc c2) => mkPEmulc c2 e1
                | (PEmul (PEc c2) e4) => mkPEmulc c2 (PEmul e1 e4)
                | (PEopp e4) => PEopp (PEmul e1 e4)
                | _ => PEmul e1 e2
                end
   end.

Definition mkPEadd (e1 e2 : PExpr) :=
   match e1, e2 with
    (PEc c1), (PEc c2) => (PEc (Cplus c1 c2))
  | _, _ => 
   if isP0 e1 then e2
     else if isP0 e2 then e1
            else match e2 with
                   PEmul (PEc c1) e3 =>
                     if isPos c1 then PEadd e1 e2
                       else PEsub e1 (mkPEmul (PEc (Cop c1)) e3)
                  | PEc c1 =>
                      if isPos c1 then PEadd e1 e2 else PEsub e1 (PEc (Cop c1))
                  | _ => PEadd e1 e2
                 end
end.

Definition mkPEopp (e1 : PExpr) :=
   match e1 with
     PEopp e2 => e2
    | PEc c1 => PEc (Cop c1)
    | PEmul (PEc c1) e2 => PEmul (PEc (Cop c1)) e2
    | _ => PEopp e1
   end.

Definition mkPEsub (e1 e2 : PExpr) :=
  match e1, e2 with
    (PEc c1), (PEc c2) => (PEc (Cplus c1 (Cop c2)))
  | _ , _ => 
   if isP0 e1 then mkPEopp e2
     else if isP0 e2 then e1
            else match e2 with
                   PEmul (PEc c1) e3 =>
                     if isPos c1 then PEsub e1 e2
                       else PEadd e1 (mkPEmul (PEc (Cop c1)) e3)
                  | PEc c1 =>
                      if isPos c1 then PEsub e1 e2 else PEadd e1 (PEc (Cop c1))
                  | _ => PEsub e1 e2
                 end
end.

Definition lift_make_mul (e1 e2 : PExpr) : PExpr :=
   match e1 with
     PEc c1 =>
       match e2 with
         PEc c2 => PEc (Cmul c1 c2)
        | PEmul (PEc c2) e4 => PEmul (PEc (Cmul c1 c2)) e4
        | _ => PEmul (PEc c1) e2
       end
    | PEmul (PEc c1) e3 =>
        match e2 with
          PEc c2 => PEmul (PEc (Cmul c1 c2)) e3
         | PEmul (PEc c2) e4 => PEmul (PEc (Cmul c1 c2)) (PEmul e3 e4)
         | _ => PEmul (PEc c1) (PEmul e3 e2)
        end
    | _ =>
        match e2 with
          PEc c2 => PEmul (PEc c2) e1
         | PEmul (PEc c2) e4 => PEmul (PEc c2) (PEmul e1 e4)
         | _ => PEmul (PEc C1) (PEmul e1 e2)
        end
   end.

Definition list_mult_one e :=
   match e with PEX _ => PEmul (PEc C1) e | _ => e end.

Fixpoint lift_const (e : PExpr) : PExpr :=
 match e with
   PEadd e1 e2 =>
     PEadd (list_mult_one (lift_const e1)) (list_mult_one (lift_const e2))
  | PEsub e1 e2 =>
      PEsub (list_mult_one (lift_const e1)) (list_mult_one (lift_const e2))
  | PEmul e1 e2 => lift_make_mul (lift_const e1) (lift_const e2)
  | PEopp e1 => PEopp (list_mult_one (lift_const e1))
  | _ => list_mult_one e
 end.

Definition pos := positive.

Definition init_pos : pos := 1%positive.

Definition next_pos (p : pos) : pos := (1 + p)%positive.

Definition mon_pos := list pos.

Definition prod_pos (e1 e2 : mon_pos) : mon_pos := app e1 e2.

Fixpoint pos_in_mon (p : pos) (l : mon_pos) {struct l} : bool :=
 match l with
   nil => false
  | cons p1 l1 => if eq_pos p p1 then true else pos_in_mon p l1
 end.

Fixpoint pos_remove (p : pos) (l : mon_pos) {struct l} : mon_pos :=
 match l with
   nil => nil
  | cons p1 l1 => if eq_pos p p1 then l1 else cons p1 (pos_remove p l1)
 end.

Fixpoint insert_list_pos (p1 : pos) (l : list pos) {struct l} : list pos :=
 match l with
   nil => cons p1 nil
  | cons p2 l1 =>
      if eq_pos p1 p2 then l
        else if le_pos p1 p2 then cons p1 l else cons p2 (insert_list_pos p1 l1)
 end.

Definition append_pos (l1 l2 : list pos) : list pos :=
   fold_left (fun l a => insert_list_pos a l) l1 l2.

Fixpoint list_pos_intersect (l1 l2 : list pos) {struct l2} : bool :=
 match l2 with
   nil => false
  | cons p1 l3 => if pos_in_mon p1 l1 then true else list_pos_intersect l1 l3
 end.

Definition exp := positive.

Definition mon_exp := list exp.

Fixpoint mon_exp_eq (l1 l2 : mon_exp) {struct l1} : bool :=
 match l1, l2 with
   nil, nil => true
  | cons p1 l3, cons p2 l4 => if eq_pos p1 p2 then mon_exp_eq l3 l4 else false
  | _, _ => false
 end.

Fixpoint insert_exp (p1 : exp) (l : mon_exp) {struct l} : mon_exp :=
 match l with
   nil => cons p1 nil
  | cons p2 l1 => if le_pos p1 p2 then cons p1 l else cons p2 (insert_exp p1 l1)
 end.

Definition prod_exp (l1 l2 : mon_exp) : mon_exp :=
   fold_left (fun l a => insert_exp a l) l1 l2.

Definition env := (list (pos * C))%type.

Definition empty_env : env := nil.

Definition add_env n c e : env := cons (n, c) e.

Fixpoint is_bound_env (n : pos) (e : env) {struct e} : bool :=
 match e with
   nil => false
  | cons ((n1, c)) e1 => if eq_pos n n1 then true else is_bound_env n e1
 end.

Fixpoint number_of_zero_env (e : env) : Z :=
 match e with
   nil => 0%Z
  | cons ((n1, c)) e1 =>
      if isC0 c then (1 + number_of_zero_env e1)%Z else number_of_zero_env e1
 end.

Fixpoint value_env (n : pos) (e : env) {struct e} : C :=
 match e with
   nil => C0
  | cons ((n1, c)) e1 => if eq_pos n n1 then c else value_env n e1
 end.

Fixpoint update_env (n : pos) (c : C) (e : env) {struct e} : env :=
 match e with
   nil => cons (n, c) nil
  | cons ((n1, c1)) e1 =>
      if eq_pos n n1 then cons (n, c) e1 else cons (n1, c1) (update_env n c e1)
 end.

Definition merge_env (e1 e2 : env) : env :=
   fold_left (fun env x =>
                 match x with (y, val) => update_env y val env end) e1 e2.

Let restrict_env (l : list pos) (e : env) : env :=
   map (fun x => (x, value_env x e)) l.

Fixpoint number_of_equality_env (e1 e2 : env) {struct e1} : Z :=
 match e1 with
   nil => 0%Z
  | cons ((n1, c)) e3 =>

      if isC0 c then number_of_equality_env e3 e2
      else if isC0 (value_env n1 e2) then number_of_equality_env e3 e2
      else if isPos (Cmul c (value_env n1 e2))
        then (1 + number_of_equality_env e3 e2)%Z
        else number_of_equality_env e3 e2
 end.

Definition mon := ((C * mon_pos) * mon_exp)%type.

Definition get_pos (m : mon) := fst m.

Definition get_exp (m : mon) := snd m.

Definition make_const_mon n : list mon := cons ((C1, cons n nil), nil) nil.

Definition make_exp_mon x : list mon := cons ((C1, nil), cons x nil) nil.

Definition opp_mon (m : mon) : mon :=
   match m with
     ((c, l1), l2) => ((Cop c, l1), l2)
   end.

Definition prod_mon (m1 m2 : mon) : mon :=
   match m1, m2 with
     ((c1, l1), l2), ((c2, l3), l4) =>
       ((Cmul c1 c2, prod_pos l1 l3), prod_exp l2 l4)
   end.

Definition insert_mon (m : mon) (l : list mon) : list mon := map (prod_mon m) l.

Definition app_mon (l1 l2 : list mon) : list mon :=
   flat_map (fun x => insert_mon x l1) l2.

Definition list_res := ((list mon * env) * pos)%type.

Definition list_get_list (r : list_res) : list mon := fst (fst r).

Definition list_get_env (e : list_res) :=
   match e with ((_, e), _) => e end.

Definition list_get_pos (e : list_res) : pos :=
   match e with ((_, _), n) => n end.

Definition make_list_res l e n : list_res := ((l, e), n).

Fixpoint make_list (p : PExpr) (e : env) (n : pos) {struct p} : list_res :=
 match p with
   PEc c => make_list_res (make_const_mon n) (add_env n c e) (next_pos n)
  | PEX x => make_list_res (make_exp_mon x) e n
  | PEopp p1 =>
      let r1 := make_list p1 e n in
        make_list_res
         (map opp_mon (list_get_list r1)) (list_get_env r1) (list_get_pos r1)
  | PEadd p1 p2 =>
      let r1 := make_list p1 e n in
        let r2 := make_list p2 (list_get_env r1) (list_get_pos r1) in
          make_list_res
           (app (list_get_list r1) (list_get_list r2)) (list_get_env r2)
           (list_get_pos r2)
  | PEsub p1 p2 =>
      let r1 := make_list p1 e n in
        let r2 := make_list p2 (list_get_env r1) (list_get_pos r1) in
          make_list_res
           (app (list_get_list r1) (map opp_mon (list_get_list r2)))
           (list_get_env r2) (list_get_pos r2)
  | PEmul p1 p2 =>
      let r1 := make_list p1 e n in
        let r2 := make_list p2 (list_get_env r1) (list_get_pos r1) in
          make_list_res
           (app_mon (list_get_list r1) (list_get_list r2)) (list_get_env r2)
           (list_get_pos r2)
 end.

Definition factor := (C * mon_pos)%type.

Definition factor_pos (l : list factor) : list pos :=
   fold_left (fun l a => append_pos (snd a) l) l nil.

Fixpoint eval_factors (e : env) (eq : list factor) {struct eq} : C :=
 match eq with
   nil => C0
  | cons ((c, l1)) eq1 =>
      Cplus
       (Cmul c (fold_left (fun a b => Cmul a (value_env b e)) l1 C1))
       (eval_factors e eq1)
 end.

Definition group := (mon_exp * list factor)%type.

Definition make_group e1 e2 : group := (e1, e2).

Fixpoint add_groups (m : mon) (l : list group) {struct l} : list group :=
 match l with
   nil => cons (make_group (get_exp m) (cons (get_pos m) nil)) nil
  | cons ((e, p)) l1 =>
      if mon_exp_eq e (get_exp m) then cons (e, cons (get_pos m) p) l1
        else cons (e, p) (add_groups m l1)
 end.

Definition make_groups (l : list mon) : list group :=
   fold_left (fun l a => add_groups a l) l nil.

Definition equation := (C * list factor)%type.

Definition make_equation (c : C) (f : list factor) : equation := (c, f).

Definition get_const (f : equation) : C := fst f.

Definition get_factors (f : equation) : list factor := snd f.

Definition system := list (list pos * list equation).
 
Fixpoint add_equation_to_system_aux
 (l : list pos) (f : list equation) (s : system) {struct s} : system :=
 match s with
   nil => cons (l,f) nil
  | cons ((l1, f1)) s1 =>
      if list_pos_intersect l l1 
        then add_equation_to_system_aux 
               (append_pos l l1) (app f f1) s1
        else cons (l1, f1) (add_equation_to_system_aux l f s1)
 end.

Definition add_equation_to_system (l : list pos) (f : equation) (s : system)
                                 : system :=
  add_equation_to_system_aux l (cons f nil) s.

Fixpoint make_system (e : env) (l : list group) {struct l} : system :=
 match l with
   nil => nil
  | cons ((_, f)) l1 =>
      add_equation_to_system
       (factor_pos f) (make_equation (eval_factors e f) f) (make_system e l1)
 end.

Fixpoint pos_subst (p : pos) (c : C) (cumul : C) (l : list factor) {struct l} :
 equation :=
 match l with
   nil => (cumul, nil)
  | cons ((c1, l1)) l2 =>
      if pos_in_mon p l1
        then if isC0 (Cmul c c1) then pos_subst p c cumul l2
               else match pos_remove p l1 with
                      nil => pos_subst p c (Cplus cumul (Cop (Cmul c c1))) l2
                     | cons x y =>
                         let r1 := pos_subst p c cumul l2 in
                           (fst r1, cons (Cmul c c1, cons x y) (snd r1))
                    end else let r1 := pos_subst p c cumul l2 in
                               (fst r1, cons (c1, l1) (snd r1))
 end.

Definition update_res := option (equation * option (pos * C)).

Definition update_equation (p : pos) (c : C) (e : equation) : update_res :=
   match pos_subst p c (get_const e) (get_factors e) with
     (c1, nil) => if isC0 c1 then Some ((c1, nil), None) else None
    | (c1, cons ((c2, cons p1 nil)) nil) =>
        if Cdivide c2 c1 then Some ((C0, nil), Some (p1, Cdiv c1 c2)) else None
    | (c1, cons ((c2, l1)) nil) =>
        if Cdivide c2 c1 then Some ((c1, cons (c2, l1) nil), None) else None
    | (c1, l1) => Some ((c1, l1), None)
   end.

Definition updates_res := option (list equation * list (positive * C)).
 
Definition list_of_option (e : option (positive * C)) :=
   match e with None => nil | Some e => cons e nil end.
 
Definition ocons := fun (x: equation) y =>
  match x with (_, nil) => y | _ => (cons x y) end.

Fixpoint update_equations (p : pos) (c : C) (l : list equation) {struct l} :
 updates_res :=
 match l with
   nil => Some (nil, nil)
  | cons eq l1 =>
      match update_equation p c eq with
        None => None
       | Some ((eq1, v1)) =>
           match update_equations p c l1 with
             None => None
            | Some ((l2, l3)) => Some (ocons eq1 l2, app (list_of_option v1) l3)
           end
      end
 end.

Definition propagate_res := option (list equation * env).
 
Fixpoint propagate (n : nat) (p : pos) (c : C) (e : env) (l : list equation)
                   {struct n} : propagate_res :=
 match update_equations p c l with
   None => None
  | Some ((l1, nil)) => Some (l1, update_env p c e)
  | Some ((l1, l2)) =>
      match n with
        0 => None
       | S n1 =>
           fold_left
            (fun res a =>
                match res with
                  None => None
                 | Some ((l1, e1)) => propagate n1 (fst a) (snd a) e1 l1
                end) l2 (Some (l1, update_env p c e))
      end
 end.

Definition candidat := option ((Z * Z) * env).

Definition get_best (c1 c2 : candidat) : candidat :=
   match c1 with
     None => c2
    | Some (((i1, j1), _)) =>
        match c2 with
          None => c1
         | Some (((i2, j2), _)) =>
             if Zeq_bool i1 i2 then if Zle_bool j2 j1 then c1 else c2
               else if Zle_bool i1 i2 then c2 else c1
        end
   end.

Definition is_possible (best : candidat) (e : env) (vars : list pos) : bool :=
   match best with
     None => true
    | Some (((i1, j1), _)) => Zeq_bool i1 (number_of_zero_env e + Zlength vars)
   end.
 
Definition make_candidat (init_e e : env) : candidat :=
   Some ((number_of_zero_env e, number_of_equality_env e init_e), e).

Fixpoint search_best_aux (best : candidat) (n: nat) (init_e e : env) (l : list equation)
                         (vars : list pos)  {struct vars} : candidat :=
 if is_possible best e vars
   then match vars with
          nil => match l with nil => get_best best (make_candidat init_e e)
                    | _ => best
                    end
        | cons x vars1 =>
             if is_bound_env x e then search_best_aux best n init_e e l vars1
               else let best1 :=
                     match propagate n x C0 e l with
                       None => best
                      | Some ((l1, e1)) =>
                          search_best_aux best n init_e e1 l1 vars1
                     end in
                      let best2 :=
                       match propagate n x (value_env x init_e) e l
                        with
                         None => best
                        | Some ((l1, e1)) =>
                            search_best_aux best1 n init_e e1 l1 vars1
                       end in
                        search_best_aux best2 n init_e e l vars1
        end else best.
 
Definition search_best (init_e : env) (s : system) : env :=
   flat_map
    (fun x =>
        match x with
          (vars, eqs) =>
            match search_best_aux None  (S (length vars)) (restrict_env vars init_e) nil eqs vars
             with None => nil | Some ((_, e)) => e end
        end) s.

Fixpoint make_PExpr_aux (p : PExpr) (e : env) (n : pos) {struct p} :
 (PExpr * pos)%type :=
 match p with
   PEc c => (PEc (value_env n e), next_pos n)
  | PEX x => (p, n)
  | PEopp p1 => let (fr1,sr1) := make_PExpr_aux p1 e n in
                  (mkPEopp fr1, sr1)
  | PEadd p1 p2 =>
      let (fr1, sr1) := make_PExpr_aux p1 e n in
        let (fr2, sr2) := make_PExpr_aux p2 e sr1 in
          (mkPEadd fr1 fr2, sr2)
  | PEsub p1 p2 =>
      let (fr1, sr1) := make_PExpr_aux p1 e n in
        let (fr2, sr2) := make_PExpr_aux p2 e sr1 in
          (mkPEsub fr1 fr2, sr2)
  | PEmul p1 p2 =>
      let (fr1, sr1) := make_PExpr_aux p1 e n in
        let (fr2, sr2) := make_PExpr_aux p2 e sr1 in
          (mkPEmul fr1 fr2, sr2)
 end.
 
Definition make_PExpr (p : PExpr) (e : env) :=
   fst (make_PExpr_aux p e init_pos).

Definition make_PExpr_minus (p : PExpr) (e : env) :=
   fst match p with
         PEsub p1 p2 =>
           let r1 := make_PExpr_aux p1 e init_pos in
             let r2 := make_PExpr_aux p2 e (snd r1) in
               (PEsub (fst r1) (fst r2), snd r2)
        | _ => make_PExpr_aux p e init_pos
       end.

Definition simpl (e : PExpr) : PExpr :=
   let exp := lift_const e in
     let res := make_list exp empty_env init_pos in
       make_PExpr
        exp
        (search_best
          (list_get_env res)
          (make_system (list_get_env res) (make_groups (list_get_list res)))).

Definition simpl_minus (e : PExpr) :=
   let exp := lift_const e in
     let res := make_list exp empty_env init_pos in
       make_PExpr_minus
        exp
        (search_best
          (list_get_env res)
          (make_system (list_get_env res) (make_groups (list_get_list res)))).

Fixpoint convert_back (F : Set) (f : F) (Fadd Fsub Fmult : F -> F ->  F)
                      (Fop : F ->  F) (C2F : C ->  F) (l : list F) (e : PExpr)
                      {struct e} : F :=
 match e with
   PEc c => C2F c
  | PEX x => pos_nth f x l
  | PEopp e1 => Fop (convert_back F f Fadd Fsub Fmult Fop C2F l e1)
  | PEadd e1 e2 =>
      Fadd
       (convert_back F f Fadd Fsub Fmult Fop C2F l e1)
       (convert_back F f Fadd Fsub Fmult Fop C2F l e2)
  | PEsub e1 e2 =>
      Fsub
       (convert_back F f Fadd Fsub Fmult Fop C2F l e1)
       (convert_back F f Fadd Fsub Fmult Fop C2F l e2)
  | PEmul e1 e2 =>
      Fmult
       (convert_back F f Fadd Fsub Fmult Fop C2F l e1)
       (convert_back F f Fadd Fsub Fmult Fop C2F l e2)
 end.

End PolSimplBase.

Arguments PEc [C].
Arguments PEX [C].
Arguments PEadd [C].
Arguments PEsub [C].
Arguments PEmul [C].
Arguments PEopp [C].

Ltac term_eq t1 t2 :=
  constr:(ltac:(first[constr_eq t1 t2; exact true| exact false])).

Ltac IN a l :=
 match l with
 | (cons ?b ?l1) => 
    let t := term_eq a b in
    match t with
    true => constr:(true)
    | _ => IN a l1
    end
 |  nil => false
 end.

Ltac AddFv a l :=
 match (IN a l) with
 | true => constr:(l)
 | _ => constr:(cons a l)
 end.

Ltac Find_at a l :=
 match l with
 | nil  => constr:(xH)
 | (cons ?b ?l) => 
     let t := term_eq a b in
     match t with
     | true =>  constr:(xH)
     | false => let p := Find_at a l in eval compute in (Pos.succ p)
     end
 end.
		      
Ltac FV Cst add mul sub opp t fv :=
 let rec TFV t fv :=
  match t with
  | (add ?t1 ?t2) => 
    let fv1 := TFV t1 fv in let fv2 := TFV t2 fv1 in constr:(fv2)
  | (mul ?t1 ?t2) => 
    let fv1 := TFV t1 fv in let fv2 := TFV t2 fv1 in constr:(fv2)
  | (sub ?t1 ?t2) => 
    let fv1 := TFV t1 fv in let fv2 := TFV t2 fv1 in constr:(fv2)
  | (opp ?t1) => 
    let fv1 := TFV t1 fv in constr:(fv1)
  | _ =>  
    match Cst t with
    | false => let fv1 := AddFv t fv in constr:(fv1)
    | _ => constr:(fv)
    end
  end 
 in TFV t fv.

 Ltac mkPolexpr T Cst add mul sub opp t fv := 
 let rec mkP t :=
 match Cst t with
    | false => 
       match t with 
        | (add ?t1 ?t2) => 
          let e1 := mkP t1 in
          let e2 := mkP t2 in constr:(PEadd e1 e2)
        | (mul ?t1 ?t2) => 
          let e1 := mkP t1 in
          let e2 := mkP t2 in constr:(PEmul e1 e2)
        | (sub ?t1 ?t2) => 
          let e1 := mkP t1 in
          let e2 := mkP t2 in constr:(PEsub e1 e2)
        | (opp ?t1) =>
          let e1 := mkP t1 in constr:(PEopp e1)
        | _ => let p := Find_at t fv in constr:(@PEX T p)
        end
    | ?c => constr:(PEc c)
  end
  in mkP t. *)
Require Import PolAux.
(* PolAux:
Require Import ZArith.
Require Import NArith.
Require Import NAux.
Require Export Replace2.
Require Import P.

Require Import Reals.

Definition Natopp := (fun x:nat => 0%nat).

Definition Nopp := (fun x:N => 0%N).

Definition is_Z0 := (Zeq_bool 0).
Definition is_Z1 := (Zeq_bool 1).
Definition is_Zpos := (Zle_bool 0).
Definition is_Zdiv :=
  fun x y => if Zeq_bool x Z0 then false else Zeq_bool Z0 (Zmod y x).
Definition Zgcd :=
 fun x y => (if (is_Zdiv x y) then x else if (is_Zdiv y x) then y else 1%Z).

Ltac is_NatCst p :=
  match p with
  | O => constr:(true)
  | S ?p' => is_NatCst p'
  | _ => constr:(false)
end.

Ltac NatCst t :=
  match is_NatCst t with
  | false => constr:(false)
  | _ => let res := eval compute in (Z_of_nat t) in constr:(res)
end.

Ltac is_PCst p :=
  match p with
  | xH => constr:(true)
  | xO ?p' => is_PCst p'
  | xI ?p' => is_PCst p'
  | _ => constr:(false)
end.

Ltac is_NCst p :=
  match p with
  | N0 => constr:(true)
  | Npos ?p' => is_PCst p'
  | _ => constr:(false)
end.

Ltac NCst t :=
  match is_NCst t with
  | false => constr:(false)
  | _ => let res := eval compute in (Z_of_N t) in constr:(res)
end.

Ltac ZCst t :=
  match t with
  | Z0 => constr:(t)
  | Zpos ?p => match is_PCst p with
               | false => constr:(false)
               | _ => constr:(t)
               end
  | Zneg ?p => match is_PCst p with
               | false => constr:(false)
               | _ => constr:(t)
               end
  | _ => constr:(false)
  end.

Ltac is_ZCst t := match t with
                | Z0 => constr:(true)
                | Zpos ?p => is_PCst p
                | Zneg ?p => is_PCst p
                | _ => constr:(false) end.

Fixpoint P2R (z: positive) {struct z}: R :=
  match z with
     xH => 1%R
  | (xO xH) => 2%R
  | (xI xH) => 3%R
  | (xO z1) => (2*(P2R z1))%R
  | (xI z1) => (1+2*(P2R z1))%R
 end.

Definition Z2R (z: Z): R :=
  match z with
     Z0 => 0%R
  | (Zpos z1) => (P2R z1)%R
  | (Zneg z1) => (-(P2R z1))%R
 end.

Ltac RCst t :=
  match t with
   | R0 => constr:(Z0)
   | R1 => constr:(Zpos xH)
   | Rplus ?e1 ?e2 =>
       match (RCst e1) with
        false => constr:(false)
      | ?e3 => match (RCst e2) with
                 false => constr:(false)
              |  ?e4 =>  eval vm_compute in (Zplus e3  e4)
              end
      end
   | Rminus ?e1 ?e2 =>
       match (RCst e1) with
        false => constr:(false)
      | ?e3 => match (RCst e2) with
                 false => constr:(false)
              |  ?e4 => eval vm_compute in (Zminus e3  e4)
              end
      end
   | Rmult ?e1 ?e2 =>
       match (RCst e1) with
        false => constr:(false)
      | ?e3 => match (RCst e2) with
                 false => constr:(false)
              |  ?e4 => eval vm_compute in (Zmult e3  e4)
              end
      end
   | Ropp ?e1 =>
       match (RCst e1) with
        false => constr:(false)
      | ?e3 => eval vm_compute in (Z.opp e3)
      end
   | IZR ?e1 =>
       match (ZCst e1) with
        false => constr:(false)
      | ?e3 => e3
      end

   | _ => constr:(false)
 end.

Ltac clean_zabs term :=
  match term with
   context id [(Z.abs_nat ?X)] =>
     match is_ZCst X with
       true =>
         let x := eval vm_compute in (Z.abs_nat X) in
         let y := context id [x] in
           clean_zabs y
     | false => term
     end
    | _ => term
  end.

Ltac clean_zabs_N term :=
  match term with
   context id [(Z.abs_N ?X)] =>
     match is_ZCst X with
       true =>
         let x := eval vm_compute in (Z.abs_N X) in
         let y := context id [x] in
           clean_zabs_N y
     | false => term
     end
    | _ => term
  end.

Ltac eqterm t1 t2 :=
  match constr:((t1,t2)) with (?X, ?X) => true | _ => false end.

Theorem trans_equal_r : forall (A: Set) (x y z:A), y = z -> x = y -> x = z.

Open Scope nat_scope.

Theorem plus_eq_compat_l: forall a b c, b = c -> a + b = a + c.

Theorem plus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.

Theorem plus_ge_compat_l: forall n m p : nat, n >= m -> p + n >= p + m.

Theorem plus_neg_reg_l: forall a b c,  a + b <> a + c -> b <> c.

Theorem plus_ge_reg_l: forall n m p : nat, p + n >= p + m -> n >= m.

Theorem eq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).
Theorem eq_lt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).
Theorem eq_gt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).
Theorem eq_gt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).
Theorem eq_le_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).
Theorem eq_le_trans_r : forall x y z, (y = z) -> (x <= y) -> (x <= z).
Theorem eq_ge_trans_l : forall x y z, (x = z) -> (x >= y) -> (z >= y).
Theorem eq_ge_trans_r : forall x y z, (y = z) -> (x >= y) -> (x >= z).

Theorem ge_trans: forall x y z, (x >= z) -> (z >= y) -> (x >= y).

Close Scope nat_scope.

Open Scope N_scope.

Theorem Nplus_eq_compat_l: forall a b c, b = c -> a + b = a + c.

Theorem Nplus_neg_compat_l: forall a b c, b <> c -> a + b <> a + c.

Theorem Nplus_lt_compat_l: forall n m p, n < m -> p + n < p + m.

Theorem Nplus_gt_compat_l: forall n m p, n > m -> p + n > p + m.

Theorem Nplus_le_compat_l: forall n m p, n <= m -> p + n <= p + m.

Theorem Nplus_ge_compat_l: forall n m p, n >= m -> p + n >= p + m.

Theorem Nplus_neg_reg_l: forall a b c,  a + b <> a + c -> b <> c.

Theorem Nplus_lt_reg_l: forall n m p, p + n < p + m -> n < m.

Theorem Nplus_gt_reg_l: forall n m p, p + n > p + m -> n > m.

Theorem Nplus_le_reg_l: forall n m p, p + n <= p + m -> n <= m.

Theorem Nplus_ge_reg_l: forall n m p, p + n >= p + m -> n >= m.

Theorem Neq_lt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).

Theorem Neq_lt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).

Theorem Neq_gt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).
Theorem Neq_gt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).
Theorem Neq_le_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).
Theorem Neq_le_trans_r : forall x y z, (y = z) -> (x <= y) -> (x <= z).
Theorem Neq_ge_trans_l : forall x y z, (x = z) -> (x >= y) -> (z >= y).
Theorem Neq_ge_trans_r : forall x y z, (y = z) -> (x >= y) -> (x >= z).

Theorem Nge_trans: forall x y z, (x >= z) -> (z >= y) -> (x >= y).

Close Scope N_scope.

Open Scope Z_scope.

Theorem Zplus_eq_compat_l: forall a b c:Z, (b = c -> a + b = a + c)%Z.

Theorem Zplus_neg_compat_l: forall a b c: Z, (b <> c -> a + b <> a + c)%Z.

Theorem Zplus_ge_compat_l: forall n m p : Z, (n >= m -> p + n >= p + m)%Z.

Theorem Zplus_neg_reg_l: forall a b c: Z,  (a + b <> a + c -> b <> c)%Z.

Theorem Zplus_ge_reg_l: forall n m p : Z, (p + n >= p + m -> n >= m)%Z.

Theorem Zle_sign_pos_pos: forall x y: Z, (0 <= x -> 0 <= y  -> 0 <= x * y)%Z.

Theorem Zle_sign_neg_neg: forall x y: Z, (x <= 0 -> y <= 0  -> 0 <= x * y)%Z.

Theorem Zopp_le: forall n m, (m <= n -> -n <= -m)%Z.

Theorem Zle_pos_neg: forall x, (0 <= -x -> x <= 0)%Z.

Theorem Zle_sign_pos_neg: forall x y: Z, (0 <= x -> y <= 0  -> x * y <= 0)%Z.

Theorem Zle_sign_neg_pos: forall x y: Z, (x <= 0 -> 0 <= y  -> x * y <= 0)%Z.

Theorem Zlt_sign_pos_pos: forall x y: Z, (0 < x -> 0 < y  -> 0 < x * y)%Z.

Theorem Zlt_sign_neg_neg: forall x y: Z, (x < 0 -> y < 0  -> 0 < x * y)%Z.

Theorem Zlt_pos_neg: forall x, (0 < -x -> x < 0)%Z.

Theorem Zlt_sign_pos_neg: forall x y: Z, (0 < x -> y < 0  -> x * y < 0)%Z.

Theorem Zlt_sign_neg_pos: forall x y: Z, (x < 0 -> 0 < y  -> x * y < 0)%Z.

Theorem Zge_sign_neg_neg: forall x y: Z, (0 >= x -> 0 >= y  -> x * y >= 0)%Z.

Theorem Zge_sign_pos_pos: forall x y: Z, (x >= 0 -> y >= 0  -> x * y >= 0)%Z.

Theorem Zge_neg_pos: forall x, (0 >= -x -> x >= 0)%Z.

Theorem Zge_sign_neg_pos: forall x y: Z, (0 >= x -> y >= 0  -> 0>= x * y)%Z.

Theorem Zge_sign_pos_neg: forall x y: Z, (x >= 0 -> 0 >= y  -> 0 >= x * y)%Z.

Theorem Zgt_sign_neg_neg: forall x y: Z, (0 > x -> 0 > y  -> x * y > 0)%Z.

Theorem Zgt_sign_pos_pos: forall x y: Z, (x > 0 -> y > 0  -> x * y > 0)%Z.

Theorem Zgt_neg_pos: forall x, (0 > -x -> x > 0)%Z.

Theorem Zgt_sign_neg_pos: forall x y: Z, (0 > x -> y > 0  -> 0> x * y)%Z.

Theorem Zgt_sign_pos_neg: forall x y: Z, (x > 0 -> 0 > y  -> 0 > x * y)%Z.

Theorem Zle_sign_pos_pos_rev: forall x y: Z, (0 < x -> 0 <= x * y -> 0 <= y)%Z.

Theorem Zle_sign_neg_neg_rev: forall x y: Z, (x < 0 -> 0 <= x * y ->  y <= 0)%Z.

Theorem Zle_sign_pos_neg_rev: forall x y: Z, (0 < x -> x * y <= 0 -> y <= 0)%Z.

Theorem Zle_sign_neg_pos_rev: forall x y: Z, (x < 0 -> x * y <= 0 ->  0 <= y)%Z.

Theorem Zge_sign_pos_pos_rev: forall x y: Z, (x > 0 -> x * y >= 0 -> y >= 0)%Z.

Theorem Zge_sign_neg_neg_rev: forall x y: Z, (0 > x -> x * y  >= 0->  0 >= y)%Z.

Theorem Zge_sign_pos_neg_rev: forall x y: Z, (x > 0 -> 0 >= x * y -> 0 >= y)%Z.

Theorem Zge_sign_neg_pos_rev: forall x y: Z, (0 > x -> 0 >= x * y ->  y >= 0)%Z.

Theorem Zlt_sign_pos_pos_rev: forall x y: Z, (0 < x -> 0 < x * y -> 0 < y)%Z.

Theorem Zlt_sign_neg_neg_rev: forall x y: Z, (x < 0 -> 0 < x * y ->  y < 0)%Z.

Theorem Zlt_sign_pos_neg_rev: forall x y: Z, (0 < x -> x * y < 0 -> y < 0)%Z.

Theorem Zlt_sign_neg_pos_rev: forall x y: Z, (x < 0 -> x * y < 0 ->  0 < y)%Z.

Theorem Zgt_sign_pos_pos_rev: forall x y: Z, (x > 0 -> x * y > 0 -> y > 0)%Z.

Theorem Zgt_sign_neg_neg_rev: forall x y: Z, (0 > x -> x * y  > 0->  0 > y)%Z.

Theorem Zgt_sign_pos_neg_rev: forall x y: Z, (x > 0 -> 0 > x * y -> 0 > y)%Z.

Theorem Zgt_sign_neg_pos_rev: forall x y: Z, (0 > x -> 0 > x * y ->  y > 0)%Z.

Theorem Zmult_le_neg_compat_l:
  forall n m p : Z, (m <= n)%Z -> (p <= 0)%Z -> (p * n <= p * m)%Z.

Theorem Zopp_lt: forall n m, (m < n -> -n < -m)%Z.

Theorem Zmult_lt_neg_compat_l:
  forall n m p : Z, (m < n)%Z -> (p < 0)%Z -> (p * n < p * m)%Z.

Theorem Zopp_ge: forall n m, (m >= n -> -n >= -m)%Z.

Theorem Zmult_ge_neg_compat_l:
  forall n m p : Z, (m >= n)%Z -> (0 >= p)%Z -> (p * n >= p * m)%Z.

Theorem Zopp_gt: forall n m, (m > n -> -n > -m)%Z.

Theorem Zmult_gt_neg_compat_l:
  forall n m p : Z, (m > n)%Z -> (0 > p)%Z -> (p * n > p * m)%Z.

Theorem Zmult_le_compat_l_rev:
  forall n m p : Z, (0 < p)%Z -> (p * n <= p * m)%Z -> (n <= m)%Z.

Theorem Zmult_le_neg_compat_l_rev:
  forall n m p : Z, (p < 0)%Z -> (p * n <= p * m)%Z -> (m <= n)%Z.

Theorem Zmult_lt_compat_l_rev:
  forall n m p : Z, (0 < p)%Z -> (p * n < p * m)%Z -> (n < m)%Z.

Theorem Zmult_lt_neg_compat_l_rev:
  forall n m p : Z, (p < 0)%Z -> (p * n < p * m)%Z -> (m < n)%Z.

Theorem Zmult_ge_compat_l_rev:
  forall n m p : Z, (p > 0)%Z -> (p * n >= p * m)%Z -> (n >= m)%Z.

Theorem Zmult_ge_neg_compat_l_rev:
  forall n m p : Z, (0 > p)%Z -> (p * n >= p * m)%Z -> (m >= n)%Z.

Theorem Zmult_gt_compat_l_rev:
  forall n m p : Z, (p > 0)%Z -> (p * n > p * m)%Z -> (n > m)%Z.

Theorem Zmult_gt_neg_compat_l_rev:
  forall n m p : Z, (0 > p)%Z -> (p * n > p * m)%Z -> (m > n)%Z.

Theorem eq_Zlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).
Theorem eq_Zlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).
Theorem eq_Zgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).
Theorem eq_Zgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).
Theorem eq_Zle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).
Theorem eq_Zle_trans_r : forall x y z, (y = z) -> (x <= y) -> (x <= z).
Theorem eq_Zge_trans_l : forall x y z, (x = z) -> (x >= y) -> (z >= y).
Theorem eq_Zge_trans_r : forall x y z, (y = z) -> (x >= y) -> (x >= z).

Theorem Zge_trans: forall x y z, (x >= z) -> (z >= y) -> (x >= y).

Close Scope Z_scope.

Open Scope R_scope.

Theorem Rplus_eq_compat_l: forall a b c:R, (b = c -> a + b = a + c)%R.

Theorem Rplus_neg_compat_l: forall a b c: R, (b <> c -> a + b <> a + c)%R.

Theorem Rplus_ge_compat_l: forall n m p : R, (n >= m -> p + n >= p + m)%R.

Theorem Rplus_neg_reg_l: forall a b c: R,  (a + b <> a + c -> b <> c)%R.

Theorem Rplus_ge_reg_l: forall n m p : R, (p + n >= p + m -> n >= m)%R.

Theorem Rle_sign_pos_pos: forall x y, (0 <= x -> 0 <= y  -> 0 <= x * y)%R.

Theorem Rle_sign_neg_neg: forall x y, (x <= 0 -> y <= 0  -> 0 <= x * y)%R.

Theorem Rle_pos_neg: forall x, (0 <= -x -> x <= 0)%R.

Theorem Rle_sign_pos_neg: forall x y: R, (0 <= x -> y <= 0  -> x * y <= 0)%R.

Theorem Rle_sign_neg_pos: forall x y, (x <= 0 -> 0 <= y  -> x * y <= 0)%R.

Theorem Rlt_sign_pos_pos: forall x y, (0 < x -> 0 < y  -> 0 < x * y)%R.

Theorem Rlt_sign_neg_neg: forall x y, (x < 0 -> y < 0  -> 0 < x * y)%R.

Theorem Rlt_pos_neg: forall x, (0 < -x -> x < 0)%R.

Theorem Rlt_sign_pos_neg: forall x y, (0 < x -> y < 0  -> x * y < 0)%R.

Theorem Rlt_sign_neg_pos: forall x y, (x < 0 -> 0 < y  -> x * y < 0)%R.

Theorem Rge_sign_neg_neg: forall x y, (0 >= x -> 0 >= y  -> x * y >= 0)%R.

Theorem Rge_sign_pos_pos: forall x y, (x >= 0 -> y >= 0  -> x * y >= 0)%R.

Theorem Rge_neg_pos: forall x, (0 >= -x -> x >= 0)%R.

Theorem Rge_sign_neg_pos: forall x y: R, (0 >= x -> y >= 0  -> 0>= x * y)%R.

Theorem Rge_sign_pos_neg: forall x y, (x >= 0 -> 0 >= y  -> 0 >= x * y)%R.

Theorem Rgt_sign_neg_neg: forall x y, (0 > x -> 0 > y  -> x * y > 0)%R.

Theorem Rgt_sign_pos_pos: forall x y, (x > 0 -> y > 0  -> x * y > 0)%R.

Theorem Rgt_neg_pos: forall x, (0 > -x -> x > 0)%R.

Theorem Rgt_sign_neg_pos: forall x y, (0 > x -> y > 0  -> 0> x * y)%R.

Theorem Rgt_sign_pos_neg: forall x y, (x > 0 -> 0 > y  -> 0 > x * y)%R.

Theorem Rle_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 <= x * y -> 0 <= y)%R.

Theorem Rle_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 <= x * y ->  y <= 0)%R.

Theorem Rle_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y <= 0 -> y <= 0)%R.

Theorem Rle_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y <= 0 ->  0 <= y)%R.

Theorem Rge_sign_pos_pos_rev: forall x y: R, (x > 0 -> x * y >= 0 -> y >= 0)%R.

Theorem Rge_sign_neg_neg_rev: forall x y: R, (0 > x -> x * y  >= 0->  0 >= y)%R.

Theorem Rge_sign_pos_neg_rev: forall x y: R, (x > 0 -> 0 >= x * y -> 0 >= y)%R.

Theorem Rge_sign_neg_pos_rev: forall x y: R, (0 > x -> 0 >= x * y ->  y >= 0)%R.

Theorem Rlt_sign_pos_pos_rev: forall x y: R, (0 < x -> 0 < x * y -> 0 < y)%R.

Theorem Rlt_sign_neg_neg_rev: forall x y: R, (x < 0 -> 0 < x * y ->  y < 0)%R.

Theorem Rlt_sign_pos_neg_rev: forall x y: R, (0 < x -> x * y < 0 -> y < 0)%R.

Theorem Rlt_sign_neg_pos_rev: forall x y: R, (x < 0 -> x * y < 0 ->  0 < y)%R.

Theorem Rgt_sign_pos_pos_rev: forall x y: R, (x > 0 -> x * y > 0 -> y > 0)%R.

Theorem Rgt_sign_neg_neg_rev: forall x y: R, (0 > x -> x * y  > 0->  0 > y)%R.

Theorem Rgt_sign_pos_neg_rev: forall x y: R, (x > 0 -> 0 > x * y -> 0 > y)%R.

Theorem Rgt_sign_neg_pos_rev: forall x y: R, (0 > x -> 0 > x * y ->  y > 0)%R.

Theorem Rmult_le_compat_l:
  forall n m p : R, (m <= n)%R -> (0 <= p)%R -> (p * m <= p * n)%R.

Theorem Rmult_le_neg_compat_l:
  forall n m p : R, (m <= n)%R -> (p <= 0)%R -> (p * n <= p * m)%R.

Theorem Ropp_lt: forall n m, (m < n -> -n < -m)%R.

Theorem Rmult_lt_neg_compat_l:
  forall n m p : R, (m < n)%R -> (p < 0)%R -> (p * n < p * m)%R.

Theorem Ropp_ge: forall n m, (m >= n -> -n >= -m)%R.

Theorem Rmult_ge_compat_l:
  forall n m p : R, (m >= n)%R -> (p >= 0)%R -> (p * m >= p * n)%R.

Theorem Rmult_ge_neg_compat_l:
  forall n m p : R, (m >= n)%R -> (0 >= p)%R -> (p * n >= p * m)%R.

Theorem Ropp_gt: forall n m, (m > n -> -n > -m)%R.

Theorem Rmult_gt_compat_l:
  forall n m p : R, (n > m)%R -> (p > 0)%R -> (p * n > p * m)%R.

Theorem Rmult_gt_neg_compat_l:
  forall n m p : R, (m > n)%R -> (0 > p)%R -> (p * n > p * m)%R.

Theorem Rmult_le_compat_l_rev:
  forall n m p : R, (0 < p)%R -> (p * n <= p * m)%R -> (n <= m)%R.

Theorem Rmult_le_neg_compat_l_rev:
  forall n m p : R, (p < 0)%R -> (p * n <= p * m)%R -> (m <= n)%R.

Theorem Rmult_lt_compat_l_rev:
  forall n m p : R, (0 < p)%R -> (p * n < p * m)%R -> (n < m)%R.

Theorem Rmult_lt_neg_compat_l_rev:
  forall n m p : R, (p < 0)%R -> (p * n < p * m)%R -> (m < n)%R.

Theorem Rmult_ge_compat_l_rev:
  forall n m p : R, (p > 0)%R -> (p * n >= p * m)%R -> (n >= m)%R.

Theorem Rmult_ge_neg_compat_l_rev:
  forall n m p : R, (0 > p)%R -> (p * n >= p * m)%R -> (m >= n)%R.

Theorem Rmult_gt_compat_l_rev:
  forall n m p : R, (p > 0)%R -> (p * n > p * m)%R -> (n > m)%R.

Theorem Rmult_gt_neg_compat_l_rev:
  forall n m p : R, (0 > p)%R -> (p * n > p * m)%R -> (m > n)%R.

Theorem eq_Rlt_trans_l : forall x y z, (x = z) -> (x < y) -> (z < y).
Theorem eq_Rlt_trans_r : forall x y z, (y = z) -> (x < y) -> (x < z).
Theorem eq_Rgt_trans_l : forall x y z, (x = z) -> (x > y) -> (z > y).
Theorem eq_Rgt_trans_r : forall x y z, (y = z) -> (x > y) -> (x > z).
Theorem eq_Rle_trans_l : forall x y z, (x = z) -> (x <= y) -> (z <= y).
Theorem eq_Rle_trans_r : forall x y z, (y = z) -> (x <= y) -> (x <= z).
Theorem eq_Rge_trans_l : forall x y z, (x = z) -> (x >= y) -> (z >= y).
Theorem eq_Rge_trans_r : forall x y z, (y = z) -> (x >= y) -> (x >= z).

Theorem Rge_trans: forall x y z, (x >= z) -> (z >= y) -> (x >= y).

Theorem Z2R_correct: forall p, (Z2R p) = (IZR p).

Theorem Z2R_le: forall p q, (p <= q)%Z -> (Z2R p <= Z2R q)%R.

Theorem Z2R_lt: forall p q, (p < q)%Z -> (Z2R p < Z2R q)%R.

Theorem Z2R_ge: forall p q, (p >= q)%Z -> (Z2R p >= Z2R q)%R.

Theorem Z2R_gt: forall p q, (p > q)%Z -> (Z2R p > Z2R q)%R.

Close Scope R_scope. *)
Require Import PolAuxList.
(* PolAuxList:
Require Import List.
Require Import ZArith.

Section AUXLIST.

 Variable A:Set.
 Variable default:A.

 Definition hd l := match l with hd :: _ => hd | _ => default end. 

 Definition tl (l: list A) := match l with _ :: tl => tl | _ => nil end. 

 Fixpoint jump (p:positive) (l:list A) {struct p} : (list A) :=
  match p with
  | xH => tl l
  | xO p => jump p (jump p l)
  | xI p  => jump p (jump p (tl l))
  end.

 Fixpoint pos_nth (p:positive) (l:list A) {struct p} : A:=
  match p with
  | xH => hd l
  | xO p => pos_nth p (jump p l)
  | xI p => pos_nth p (jump p (tl l))
  end. 

End AUXLIST.

Arguments pos_nth [A] _ _ _.

 Ltac Trev l :=  
  let rec rev_append rev l :=
   match l with
   |  nil  => constr:(rev)
   | (cons ?h ?t) => let rev := constr:(cons h rev) in rev_append rev t 
   end in
 match type of l with
  (list ?X) => rev_append (@nil X) l
 end. *)
Require Import RPolS.
(* RPolS:
Require Import Reals.
Require Import PolSBase.
Require Import PolAuxList.
Require Import PolAux.

Definition Rconvert_back (e : PExpr Z) (l : list R) : R :=
   convert_back Z R R0 Rplus Rminus Rmult Ropp Z2R l e.

Definition Rsimpl_minus (e : PExpr Z) :=
    (simpl_minus
      Z Zplus Zmult Z.opp Z0 1%Z is_Z1 is_Z0 is_Zpos is_Zdiv Z.div e).

Definition Rsimpl (e : PExpr Z) :=
    (simpl
      Z Zplus Zmult Z.opp Z0 1%Z is_Z1 is_Z0 is_Zpos is_Zdiv Z.div e).

Ltac
rs term1 term2 :=
let term := constr:(Rminus term1 term2) in
let rfv := FV RCst Rplus Rmult Rminus Ropp term (@nil R) in
let fv := Trev rfv in
let expr1 := mkPolexpr Z RCst Rplus Rmult Rminus Ropp term1 fv in
let expr2 := mkPolexpr Z RCst Rplus Rmult Rminus Ropp term2 fv in
let re := eval vm_compute in (Rsimpl_minus (PEsub expr1 expr2)) in
let expr3 := match re with (PEsub ?X1 _) => X1 end in
let expr4 := match re with (PEsub _ ?X1 ) => X1 end in
let re1 :=  constr:(PEsub expr1 expr3) in
let
 re1' :=
  eval
     unfold
      Rconvert_back, convert_back,  pos_nth,  jump,
         hd,  tl, Z2R, P2R in (Rconvert_back (PEadd re1 expr3) fv) in
let re1'' := eval lazy beta in re1' in
let
 re2' :=
  eval
     unfold
      Rconvert_back, convert_back,  pos_nth,  jump,
         hd,  tl, Z2R, P2R in (Rconvert_back (PEadd re1 expr4) fv) in
let re2'' := eval lazy beta in re2' in
replace2_tac term1 term2 re1'' re2''; [idtac| ring | ring].

Ltac
rpols :=
match goal with
| |- (?X1 = ?X2)%R =>
rs X1 X2; try apply Rplus_eq_compat_l
| |- (?X1 <> ?X2)%R =>
rs X1 X2; apply Rplus_neg_compat_l
| |- Rlt ?X1 ?X2 =>
rs X1 X2; apply Rplus_lt_compat_l
| |- Rgt ?X1 ?X2 =>
rs X1 X2; apply Rplus_gt_compat_l
| |- Rle ?X1 ?X2 =>
rs X1 X2; apply Rplus_le_compat_l
| |- Rge ?X1 ?X2 =>
rs X1 X2; apply Rplus_ge_compat_l
| _ => fail end.

Ltac
hyp_rpols H :=
generalize H;
let tmp := fresh "tmp" in
match (type of H) with
   (?X1 = ?X2)%R =>
rs X1 X2; intros tmp; generalize (Rplus_eq_reg_l _ _ _ tmp); clear H tmp; intro H
|  (?X1 <> ?X2)%nat =>
rs X1 X2; intros tmp; generalize (Rplus_neg_reg_l _ _ _ tmp); clear H tmp; intro H
|  Rlt ?X1 ?X2 =>
rs X1 X2; intros tmp; generalize (Rplus_lt_reg_r _ _ _ tmp); clear H tmp; intro H
|  Rgt ?X1 ?X2 =>
rs X1 X2; intros tmp; generalize (Rplus_gt_reg_l _ _ _ tmp); clear H tmp; intro H
|  Rle ?X1 ?X2 =>
rs X1 X2; intros tmp; generalize (Rplus_le_reg_l _ _ _ tmp); clear H tmp; intro H
|  Rge ?X1 ?X2 =>
rs X1 X2; intros tmp; generalize (Rplus_ge_reg_l _ _ _ tmp); clear H tmp; intro H
| _ => fail end. *)
Require Import RPolF.
(* RPolF:
Require Import ZArith.
Require Import Reals.
Require Import RPolS.
Require Import PolSBase.
Require Import PolFBase.
Require Import PolAux.
Require Import PolAuxList.
Require Import RSignTac.

Definition Rfactor :=
  factor Z Zplus Zmult Z.opp 0%Z 1%Z is_Z1 is_Z0 is_Zpos is_Zdiv Z.div Zgcd.

Definition Rfactor_minus :=
  factor_sub Z Zplus Zmult Z.opp 0%Z 1%Z is_Z1 is_Z0 is_Zpos is_Zdiv Z.div Zgcd.

Ltac Rfactor_term term1 term2 :=
let term := constr:(Rminus term1 term2) in
let rfv := FV RCst Rplus Rmult Rminus Ropp term (@nil R) in
let fv := Trev rfv in
let expr1 := mkPolexpr Z RCst Rplus Rmult Rminus Ropp term1 fv in
let expr2 := mkPolexpr Z RCst Rplus Rmult Rminus Ropp term2 fv in
let re := eval vm_compute in (Rfactor_minus (PEsub expr1 expr2)) in
let factor := match re with (PEmul ?X1 _) => X1 end in
let expr3 := match re with (PEmul _ (PEsub ?X1 _)) => X1 end in
let expr4 := match re with (PEmul _ (PEsub _ ?X1 )) => X1 end in
let
 re1' :=
  eval
     unfold
      Rconvert_back, convert_back,  pos_nth,  jump,
         hd,  tl, Z2R, P2R in (Rconvert_back (PEmul factor expr3) fv) in
let re1'' := eval lazy beta in re1' in
let
 re2' :=
  eval
     unfold
      Rconvert_back, convert_back,  pos_nth,  jump,
         hd,  tl, Z2R, P2R in (Rconvert_back (PEmul factor expr4) fv) in
let re2'' := eval lazy beta in re2' in
replace2_tac term1 term2 re1'' re2''; [idtac| ring | ring].

Ltac rpolf :=
progress (
(try
match goal with
| |- (?X1 = ?X2)%R =>  Rfactor_term X1 X2
| |- (?X1 <> ?X2)%R =>  Rfactor_term X1 X2
| |- Rlt ?X1 ?X2 => Rfactor_term X1 X2
| |- Rgt ?X1 ?X2 =>Rfactor_term X1 X2
| |- Rle ?X1 ?X2 => Rfactor_term X1 X2
| |- Rge ?X1 ?X2 =>Rfactor_term X1 X2
| _ => fail end)); try (rsign_tac); try repeat (rewrite Rmult_1_l || rewrite Rmult_1_r).

Ltac hyp_rpolf H :=
progress (
generalize H;
(try
match type of H with
  (?X1 = ?X2)%R =>  Rfactor_term X1 X2
| (?X1 <> ?X2)%R =>  Rfactor_term X1 X2
| Rlt ?X1 ?X2 => Rfactor_term X1 X2
| Rgt ?X1 ?X2 =>Rfactor_term X1 X2
| Rle ?X1 ?X2 => Rfactor_term X1 X2
| Rge ?X1 ?X2 =>Rfactor_term X1 X2
| _ => fail end)); clear H; intros H; try (hyp_rsign_tac H); try repeat rewrite Rmult_1_l in H. *)
Require Import PolRBase.
(* PolRBase:
Require Import Arith.
Require Import PolSBase.

Section PolReplaceBase.

Variable C : Set.

Variable Cplus : C -> C ->  C.
Variable Cmul : C -> C ->  C.
Variable Cop : C ->  C.

Variable C0 : C.
Variable C1 : C.

Variable isC1 : C ->  bool.

Variable isC0 : C ->  bool.

Variable isPos : C ->  bool.

Variable Cdivide : C -> C ->  bool.

Variable Cdiv : C -> C ->  C.

Let mkMul := mkPEmul C Cmul Cop C0 isC1 isC0.
Let mkOpp := mkPEopp  C Cop.
Let mkAdd := mkPEadd C Cplus Cmul Cop C0 isC1 isC0 isPos.
Let mkSub := mkPEsub C Cplus Cmul Cop C0 isC1 isC0 isPos.
Let mkAdd0 e1 e2 := if isP0 _ isC0 e1 then e2 else PEadd e1 e2.
Let mkSub0 e1 e2 := if isP0 _ isC0 e1 then (PEopp e2) else PEsub e1 e2.

Definition is_replace_eq :=  fun x y => 
  let r :=  simpl_minus C Cplus Cmul Cop C0 C1 isC1 isC0 isPos Cdivide Cdiv (PEsub y x) in
   match r with
     PEsub (PEc c) r1  => if (isC0 c) then true else false
  |  _          => false
  end.

Definition replace_eq :=  fun x y z => 
  let r :=  simpl_minus C Cplus Cmul Cop C0 C1 isC1 isC0 isPos Cdivide Cdiv (PEsub y x) in
   match r with
     PEsub (PEc c) r1  => if (isC0 c) then (Some (mkAdd0 r1 z)) else None
  |  _          => None
  end.

Definition is_replace_op :=  fun x y => 
  let r :=  simpl_minus C Cplus Cmul Cop C0 C1 isC1 isC0 isPos Cdivide Cdiv (PEsub (PEopp y) x) in
   match r with
     PEsub (PEc c) r1  => if (isC0 c) then true else false
  |  _          => false
  end.

Definition replace_op :=  fun x y z => 
  let r :=  simpl_minus C Cplus Cmul Cop C0 C1 isC1 isC0 isPos Cdivide Cdiv (PEsub (PEopp y) x) in
   match r with
     PEsub (PEc c) r1  => if (isC0 c) then (Some (mkSub0 r1 z)) else None
  |  _          => None
  end.

Definition is_replace_eq_or_op :=
   fun x y => 
         match (is_replace_eq x y) with true => true | _ => is_replace_op x y end.

Definition replace_eq_or_op :=
   fun x y  z=> 
         match (replace_eq x y z) with Some r => Some r| _ => replace_op x y z end.

Definition bool_nat:= fun x => match x with true => 1%nat | false => 0 %nat end.
 
Fixpoint bcount_replace  (b: bool) (e from: PExpr C) {struct e}: nat  :=
 let (b1, n) := if b then (b,0) else
                 if is_replace_eq_or_op  e from then (true, 1) else (true, 0)
          in
          n + 
          match e with
               PEadd e1 e2  =>  
                 bcount_replace b1 e1 from + bcount_replace b1 e2 from
            | PEsub e1 e2  =>  
                 bcount_replace b1 e1 from + bcount_replace b1 e2 from
             | PEopp e1        =>
                bcount_replace b1 e1 from
            | PEmul e1 e2  =>  
                 bcount_replace false e1 from + bcount_replace false e2 from
            | _ => 0
            end.

Definition count_replace :=  bcount_replace false.

Fixpoint replace_aux (b: bool) (l: list bool) (e from to: PExpr C) {struct e}: list bool * PExpr C :=
  let v := replace_eq_or_op e from to in
  let b1 := if b then b else if  v then true else false in
  let b2 := if b then false else if b1 then (nth 0 l false) else false in
  let ll := if b then l else if  b1 then tail l else l in
  let el := match v with (Some v1) => v1 | None => e end in
            match e with
               PEadd e1 e2  =>  
                 let (l1,e3) := replace_aux b1 ll e1 from to in 
                 let (l2,e4) := replace_aux b1 l1 e2 from to in
                   (l2, if b2 then el else PEadd e3 e4)
            | PEsub e1 e2  =>  
                let (l1,e3) := replace_aux b1 ll e1 from to in 
                 let (l2,e4) := replace_aux b1 l1 e2 from to in
                   (l2, if b2 then el else PEsub e3 e4)
            | PEopp e1        =>
               let (l1,e3) := replace_aux b1 ll e1 from to in 
                   (l1, if b2 then el else PEopp e3)
            | PEmul e1 e2  =>  
                let (l1,e3) := replace_aux false ll e1 from to in 
                 let (l2,e4) := replace_aux false l1 e2 from to in
                   (l2, if b2 then el else PEmul e3 e4)
            | _ => (ll, if b2 then el else e)
            end.

Fixpoint make_all_const (b: bool) (n:nat) {struct n}: list bool :=
match n with 0 => nil | (S n1) => b::make_all_const b n1 end.

Fixpoint make_one_true  (n1 n2:nat)  {struct n1}: list bool :=
match n1, n2 with O, _ => nil 
   | S n3, O => true::make_all_const false n3  
   | S n3, S n4 => false::make_one_true n3 n4 
 end.

Definition replace (e from to: PExpr C) (n: Z) := 
  let c := count_replace e from in
  let l :=
    match n with
      Z0 => make_all_const true c
   | Zpos n1 => make_one_true c  (pred (nat_of_P n1))
   | Zneg n1 => if (Zlt_bool (Z_of_nat c) n) 
                          then make_all_const false c 
                          else make_one_true c (c - (nat_of_P n1))%nat
    end
    in
     snd (replace_aux false l e from to).

End PolReplaceBase. *)

Definition Rreplace_term_aux :=
  replace Z Zplus Zmult Z.opp 0%Z 1%Z is_Z1 is_Z0 is_Zpos is_Zdiv Z.div.

Ltac
Rreplace_term term from to occ id :=
let rfv := FV RCst Rplus Rmult Rminus Ropp term (@nil R) in
let rfv1 := FV RCst Rplus Rmult Rminus Ropp from rfv in
let rfv2 := FV RCst Rplus Rmult Rminus Ropp to rfv1 in
let fv := Trev rfv2 in
let expr := mkPolexpr Z RCst Rplus Rmult Rminus Ropp term fv in
let expr_from := mkPolexpr Z RCst Rplus Rmult Rminus Ropp from fv in
let expr_to := mkPolexpr Z RCst Rplus Rmult Rminus Ropp to fv in
let re := eval vm_compute in (Rreplace_term_aux expr expr_from expr_to occ) in
let term1 := eval
     unfold Rconvert_back, convert_back,  pos_nth,  jump,
         hd,  tl, Z2R, P2R in (Rconvert_back re fv) in
match id with
     true => term1
  | false =>
     match eqterm term term1 with
       |false => term1
    end
end
.

Ltac rpol_is_compare term :=
match term with
| (_ < _)%R => constr:(true)
| (_ > _)%R => constr:(true)
| (_ <= _)%R => constr:(true)
| (_ >= _)%R => constr:(true)
| (?X = _)%R => match type of X with R => constr:(true) end
| _ => constr:(false)
end.

Ltac rpol_get_term dir term :=
match term with
|  (?op ?X  ?Y)%R =>
     match dir with P.L => X | P.R => Y end
|  (?X = ?Y)%R =>
     match dir with P.L => X | P.R => Y end
| _ => fail 1 "Unknown term in pol_get_term"
end.

Ltac rpol_replace_term term1 term2 dir1 dir2 occ id :=
  let dir2opp := eval compute in (P.pol_dir_opp dir2) in
  let t1 := rpol_get_term dir2 term2 in
  let t2 := match id with true => t1 | false => rpol_get_term dir2opp term2 end in
 match term1 with
   | (?op ?X ?Y) =>
     match dir1 with
       P.L  =>
             Rreplace_term X t1 t2 occ id
       | P.R =>
            Rreplace_term Y t1 t2 occ id
      end
  | (?X = ?Y)%R  =>
     match dir1 with
       P.L  =>
             Rreplace_term X t1 t2 occ id
     | P.R =>
             Rreplace_term Y  t1 t2 occ id
      end
  end.

Ltac rpol_aux_dir term dir :=
  match term with
   (_ < _)%R => dir
  | (_ > _)%R => dir
  | (_ <= _)%R => eval compute in (P.pol_dir_opp dir)
  | (_ >= _)%R  => eval compute in (P.pol_dir_opp dir)
end.

Ltac R_eq_trans_l t:=
   match goal with
     |  |- (?X >= ?Y)%R => apply eq_Rge_trans_l with t
     |  |- (?X > ?Y)%R => apply eq_Rgt_trans_l with t
     |  |- (?X <= ?Y)%R => apply eq_Rle_trans_l with t
     |  |- (?X < ?Y)%R => apply eq_Rlt_trans_l with t
     |  |- ?G  => apply trans_equal with t
    end.

Ltac R_eq_trans_r t:=
   match goal with
     |  |- (?X >= ?Y)%R => apply eq_Rge_trans_r with t
     |  |- (?X > ?Y)%R => apply eq_Rgt_trans_r with t
     |  |- (?X <= ?Y)%R => apply eq_Rle_trans_r with t
     |  |- (?X < ?Y)%R => apply eq_Rlt_trans_r with t
     |  |- ?G  => apply trans_equal_r with t
    end.

Ltac Rreplace_tac_full term dir1 dir2 occ :=
match term with
 (?T1 = ?T2)%R =>
  
  match goal with
     |-  ?G => let  t := rpol_replace_term G term dir1 dir2 occ false in
              match dir1 with
               P.L => R_eq_trans_l t
              | P.R => R_eq_trans_r t
              end
  end
| _ =>
   match goal with
     |- (?X <= ?Y)%R  =>
            let  t := rpol_replace_term (X <= Y)%R term dir1 dir2 occ false in
               apply Rle_trans with t
     |  |- (?X >= ?Y)%R =>
            let  t := rpol_replace_term (X >= Y)%R term dir1 dir2 occ false in
               apply Rge_trans with t
     | |- (?X < ?Y)%R  =>
           let  t := rpol_replace_term (X < Y)%R term dir1 dir2 occ false in
           match rpol_aux_dir term dir1 with
                P.L =>
                                    (apply Rlt_le_trans with t)
               |P.R =>
                                    (apply Rle_lt_trans with t)
            end
     | |- (?X > ?Y)%R   =>
            let  t := rpol_replace_term (X > Y)%R term dir1 dir2 occ false in
           match rpol_aux_dir term dir1 with
                P.L =>
                                    (apply Rgt_ge_trans with t)
               |P.R =>
                                    (apply Rge_gt_trans with t)
            end
   end
end.

Ltac Rreplace_tac_full_id term dir1 dir2 occ :=
  match goal with
     |-  ?G => let t1 := rpol_replace_term G term dir1 dir2 occ true in
                match dir1 with
                  P.L => R_eq_trans_l t1
               | P.R => R_eq_trans_r t1
                end; [ring | idtac]
end.

Ltac rpolrx term dir1 dir2 occ :=
match rpol_is_compare term with
  true => Rreplace_tac_full_id term dir1 dir2 occ; [Rreplace_tac_full term dir1 dir2 occ]
| false =>
     let t := type of term in
     match rpol_is_compare t with  true =>
       Rreplace_tac_full_id t dir1 dir2 occ; [Rreplace_tac_full t dir1 dir2 occ]
     end
end.

Ltac rpolr term :=
  rpolrx term P.L P.L 1%Z ||
  rpolrx term P.R P.L 1%Z ||
  rpolrx term P.L P.R 1%Z ||
  rpolrx term P.R P.R 1%Z.
