Require Import PolTac.

Require Import ZArith.



Open Scope  Z_scope.



Ltac cg g := match goal with |- g => idtac end.



Goal forall a b c d, a + c = d -> b + d = c + d -> a + b + c = c + d.

intros a b c d H1 H2.

polr H1.

rewrite H1; auto. 

auto.

Qed.



Goal forall a b c d, d = 0 -> a + b + c = c + 0 -> a + b + c = c + d.

intros a b c d H1 H2.

polr H1.

rewrite H1; auto.

auto.

Qed.



Goal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.

intros a b c d H1 H2.

polr H1.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d,  a + b  <= 0 -> 0 <= d -> a + b + c <= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Require Import NAux.
(* NAux:
Require Export NArith.
Require Import ZArith.

Open Scope N_scope.

Theorem Nle_le: forall n  m, (N.to_nat n <= N.to_nat m)%nat -> n <= m.

Theorem le_Nle: forall n m, N.of_nat n <= N.of_nat m -> (n <= m)%nat.

Theorem Nle_le_rev: forall n  m, n <= m -> (N.to_nat n <= N.to_nat m)%nat.

Theorem Nlt_lt: forall n  m, (N.to_nat n < N.to_nat m)%nat -> n < m.

Theorem lt_Nlt: forall n m, N.of_nat n < N.of_nat m -> (n < m)%nat.

Theorem Nlt_lt_rev: forall n  m, n < m -> (N.to_nat n < N.to_nat m)%nat.

Theorem Nge_ge: forall n  m, (N.to_nat n >= N.to_nat m)%nat -> n >= m.

Theorem ge_Nge: forall n m, N.of_nat n >= N.of_nat m -> (n >= m)%nat.

Theorem Nge_ge_rev: forall n  m, n >= m -> (N.to_nat n >= N.to_nat m)%nat.

Theorem Ngt_gt: forall n  m, (N.to_nat n > N.to_nat m)%nat -> n > m.

Theorem gt_Ngt: forall n m, N.of_nat n > N.of_nat m -> (n > m)%nat.

Theorem Ngt_gt_rev: forall n  m, n > m -> (N.to_nat n > N.to_nat m)%nat.

Theorem Neq_eq_rev: forall n  m, n = m -> (N.to_nat n = N.to_nat m)%nat.

Import BinPos.

Ltac to_nat_op  :=
  match goal with
      H: (N.lt _ _) |- _ => generalize (Nlt_lt_rev _ _ H); clear H; intros H
|     H: (N.gt _ _) |- _ => generalize (Ngt_gt_rev _ _ H); clear H; intros H
|     H: (N.le _ _) |- _ => generalize (Nle_le_rev _ _ H); clear H; intros H
|     H: (N.ge _ _) |- _ => generalize (Nge_ge_rev _ _ H); clear H; intros H
|     H: (@eq N _ _) |- _ => generalize (Neq_eq_rev _ _ H); clear H; intros H
|      |- (N.lt _ _)  => apply Nlt_lt
|      |- (N.le _ _)  => apply Nle_le
|      |- (N.gt _ _)  => apply Ngt_gt
|      |- (N.ge _ _)  => apply Nge_ge
|      |- (@eq N _ _)  => apply Nat2N.inj
end.

Ltac set_to_nat :=
let nn := fresh "nn" in
match goal with
       |- context [(N.to_nat (?X + ?Y)%N)]  => rewrite N2Nat.inj_add
|      |- context [(N.to_nat (?X * ?Y)%N)]  => rewrite N2Nat.inj_mul
|      |- context [(N.to_nat ?X)]  => set (nn:=N.to_nat X) in * |- *
|      H: context [(N.to_nat (?X + ?Y)%N)] |- _ => rewrite N2Nat.inj_add in H
|      H: context [(N.to_nat (?X + ?Y)%N)] |- _ => rewrite N2Nat.inj_mul in H
|      H: context [(N.to_nat ?X)] |- _ => set (nn:=N.to_nat X) in * |- *
end.

Ltac to_nat := repeat to_nat_op; repeat set_to_nat.

Theorem Nle_gt_trans: forall n m p, m <= n -> m > p -> n > p.

Theorem Ngt_le_trans: forall n m p, n > m -> p <= m -> n > p.

Theorem Nle_add_l :
  forall x y, x <= y + x.

Close Scope N_scope. *)

Open Scope  N_scope.



Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.

intros.

polr (a + c = d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.

intros.

polr (d = 0).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b <= 0 -> 0 <= d -> a + b + c <= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Require Import Arith.



Open Scope  nat_scope.



Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.

intros.

polr (a + c = d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.

intros.

polr (d = 0).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b <= 0 -> 0 <= d -> a + b + c <= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z. 

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c > d -> c <= b -> a + b + c > c + d.

intros.



polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, 0 <= a + b -> 0 > d -> a + b + c > c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Require Import Reals.

Open Scope  R_scope.



Goal forall a b c d, a + c = d -> b = c -> a + b + c = c + d.

intros.

polr (a + c = d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, 0 = d -> a + b = 0 -> a + b + c = c + d.

intros.

polr (d = 0).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c <= d -> b <= c -> a + b + c <= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b <= 0 -> 0 <= d -> a + b + c <= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c >= d -> b >= c -> a + b + c >= c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + b >= 0 -> 0 >= d -> a + b + c >= c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.



Goal forall a b c d, a + c < d -> b <= c -> a + b + c < c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed.

 

Goal forall a b c d, a + b <= 0 -> 0 < d -> a + b + c < c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed. 



Goal forall a b c d, a + c > d -> b >= c -> a + b + c > c + d.

intros.

polr (a + c < d).

pols.

auto.

pols.

auto.

Qed. 



Goal forall a b c d, a + b >= 0 -> 0 > d -> a + b + c > c + d.

intros.

polrx (0 < d) P.R P.R 1%Z.

pols.

auto.

pols.

auto.

Qed.

