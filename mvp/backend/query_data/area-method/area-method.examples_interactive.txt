

Require Import area_method.
(* area_method:
Require Export general_tactics.
Require Export Rgeometry_tools.
Require Export constructed_points_elimination.
Require Export free_points_elimination.
Require Export simplify_constructions.
Require Export construction_tactics.
Require Export my_field_tac.

Ltac decomp_non_zero_mult_div H := 
  (apply (multnonzero) in H || apply (divnonzero) in H; use H).

Ltac decomp_all_non_zero_mult_div := repeat match goal with
 H: ?X <> 0 |- _ => decomp_non_zero_mult_div H
end.

Ltac field_and_conclude := 
  (abstract (field;decomp_all_non_zero_mult_div;solve_conds)) ||
  (abstract (Ffield)).

Ltac DecomposeMratio :=
  repeat
   match goal with
   | H:(mratio _ _ _ _) |- _ =>
       unfold mratio in H; decompose [and] H; clear H
   end.

Ltac prepare_half_free_construction :=
repeat  match goal with
   | H:(on_line ?X1 ?X2 ?X3) |- _ => 
    let T:= fresh in 
    (assert (T:=(on_line_to_on_line_d X1 X2 X3 H));clear H;set ((X2**X1)/(X2**X3)) in * )
   | H:(on_parallel ?X1 ?X2 ?X3 ?X4) |- _ =>    
    let T:= fresh in 
    (assert (T:=(on_parallel_to_on_parallel_d X1 X2 X3 X4 H));clear H;set ((X2**X1)/(X3**X4)) in * )
   | H:(on_perp ?X1 ?X2 ?X3 ) |- _ => 
    let T:= fresh in 
    (assert (T:=(on_perp_to_on_perp_d X1 X2 X3 H));clear H;set ((2 + 2) * S X2 X3 X1 / Py X2 X3 X2) in * )

end.

Ltac add_non_zero_hyps :=
 repeat
 match goal with 
   | H:?A<>?B |- _ =>  
           assert_if_not_exist (A**B<>0);[apply neq_not_zero;assumption|revert H]
end;intros.

Ltac check_ratio_hyps_aux A B C D :=
    ((match goal with
 | H : parallel A B C D , H2 : C<>D |- _ => fail 2 
end) || fail 3 "Error, one the following hypotheses are missing : parallel" A B C D ", " C "<>" D) || idtac.

Ltac check_ratio_hyps :=
 try    match goal with
| H : _ |- context [?A**?B/?C**?D] => check_ratio_hyps_aux A B C D
end.

Lemma test_check_ratio_hyp : forall A B C D, 
   parallel A B C D -> 
C<>D ->
 A**B / C**D = A**B/C**D.

Ltac unfold_non_primitive_constructions := 
 unfold is_midpoint, m_ratio, on_circle, inter_lc,
  inversion, eq_angle, eq_distance, co_circle, harmonic in *.

Definition parallel_s (A B C D : Point) : Prop := S A C B = S B A D.

Lemma parallel_equiv : forall A B C D, parallel_s A B C D <-> parallel A B C D.

Ltac assert_non_zero_hyps_circum_ortho_center :=
  repeat
( match goal with 
| H: is_circumcenter ?O ?A ?B ?C |- _ => 
 assert_if_not_exist (2 * (Py A B A * Py A C A - Py B A C * Py B A C) <> 0);
 [(apply  (is_circumcenter_non_zero O A B C H))|idtac]
| H: is_orthocenter ?O ?A ?B ?C |- _ => 
 assert_if_not_exist ((Py A B A * Py A C A - Py B A C * Py B A C) <> 0);
 [(apply  (is_orthocenter_non_zero O A B C H))|idtac]
end).

Ltac geoInit :=
  unfold_non_primitive_constructions; intros; 
  unfold perp, S4, Py4 in |- *; 
  unfold Col in *; DecomposeMratio;
  prepare_half_free_construction;
  DecompAndAll;
  check_ratio_hyps;
  assert_non_zero_hyps_circum_ortho_center;
  unfold is_circumcenter,  is_orthocenter, is_centroid, is_Lemoine in *;
  add_non_zero_hyps; 
  put_on_inter_line_parallel;repeat split;
  try (apply -> parallel_equiv);
  unfold parallel_s.

Ltac simpl_left  := apply f_equal2;[solve [ring] | idtac];idtac "simpl gauche".
Ltac simpl_right := apply f_equal2;[idtac | solve[ring]];idtac "simpl droite".
Ltac simpl_left_right := repeat (simpl_left || simpl_right).
          
Lemma f_equal2_sym: 
  forall (f : F -> F -> F), 
  (forall x y, f x y = f y x) ->
  forall (x1 y1 : F) (x2 y2 : F),
       x1 = y1 -> x2 = y2 -> f x1 x2 = f y2 y1.

Ltac simpl_left_sym := 
  apply (f_equal2_sym Fplus Fplus_sym);[solve [ring] | idtac];idtac "simpl gauche sym".

Ltac simpl_right_sym := 
  apply (f_equal2_sym Fplus Fplus_sym);[idtac | solve[ring]];idtac "simpl droite sym".

Ltac simpl_left_right_sym := repeat (simpl_left_sym || simpl_right_sym).

Ltac simpl_eq :=  simpl_left_right;simpl_left_right_sym.

Lemma eq_simpl_1 : forall a b c,
	b=c -> a+b = a+c .

Lemma eq_simpl_2 : forall a b c,
	b=c -> b+a = c+a .

Lemma eq_simpl_3 : forall a b c,
	b=c -> a+b = c+a .

Lemma eq_simpl_4 : forall a b c,
	b=c -> b+a = a+c .

Lemma eq_simpl_5 : forall a b c,
	b=c -> a*b = a*c .

Lemma eq_simpl_6 : forall a b c,
	b=c -> b*a = c*a .

Lemma eq_simpl_7 : forall a b c,
	b=c -> a*b = c*a .

Lemma eq_simpl_8 : forall a b c,
	b=c -> b/a = c/a .

Lemma eq_simpl_9 : forall b c,
	b=c -> -b = -c .

Lemma eq_simpl_10 : forall a b c,
	b=c -> a-b = a-c .

Lemma test_simpl_left_right_1 : forall a b c, 
(a)+(c+b) = (a+a-a)+(b+c).

Lemma test_simpl_left_right_2 : forall a b c, 
(c+b)+((a)+(c+b)) = (c+b)+ ((a+a-a)+(b+c)).

Lemma test_simpl_left_right_3 : forall a b c, 
a+(b+c) = (c+b)+a.

Ltac turn_into_ring_eq := 
  try (field_simplify_eq;
  [idtac|solve [repeat split; repeat apply nonzeromult;auto with Geom]]).

Ltac am_before_field :=  idtac "   initialisation...";geoInit;idtac "   elimination..."; eliminate_All; idtac "   uniformize areas...";
  uniformize_pys;Runiformize_signed_areas;idtac "   simplification...";basic_simpl.

Ltac set_all := repeat
   match goal with
   | H:context[(S ?X1 ?X2 ?X3)] |- _ => set (S X1 X2 X3) in *
   | _:_ |- context[(S ?X1 ?X2 ?X3)] => set (S X1 X2 X3) in *
   end.

Ltac unfold_Py :=
 repeat (rewrite pyth_simpl_3 in *); unfold Py in *.

Ltac area_method := 
  idtac "Area method:";
  am_before_field;
  idtac "   before field...";
 
  (solve [set_all; unfold_Py; basic_simpl; uniformize_dir_seg; field_and_conclude ] ||
  (idtac "   we need to make geometric quantities independant...";
  only_use_area_coordinates;set_all; field_and_conclude)). *)



Lemma midpoint_elim : forall O A B,

 on_line_d O A B (1 / 2) ->

 O<>A ->

 B ** O / O ** A =1.

Proof.

intros.

unfold on_line_d in H.

use H.

assert (B**A + A**O = B**O) by auto with Geom.

rewrite <- H.

replace (O**A) with (- A**O).

rewrite H4.

uniformize_dir_seg.

field.

split;auto with Geom.

symmetry;auto with Geom.

Qed.



Lemma l6_15 : forall A B O C D r,

  is_midpoint O A B ->

  on_line_d C O A r ->

  on_line_d D O A (1/r) ->

  r <> 0 ->

  parallel A C C B ->

  parallel D A D B ->

  C<>B ->

  D<>B ->

  A<>D ->

  A<>C ->

  r+1 <> 0 ->

  harmonic A B C D.

Proof.

geoInit.

eliminate D.

replace (A ** O / O ** A) with (0-1).

eliminate C.

replace (A ** O / O ** A) with (0-1).

replace (B ** O / O ** A) with (1).

field.

repeat split;auto with field_hints.

symmetry;apply midpoint_elim;auto.

replace (A**O) with (- O**A) by (symmetry; auto with Geom).

field;auto with Geom.

intuition.

replace (A**O) with (- O**A) by (symmetry; auto with Geom).

field;auto with Geom.

intuition.

intuition.

Qed.



Lemma l_6_295 : forall A B C D F P Q R S,

on_foot F B A C ->

on_line D B F ->

is_midpoint P A B ->

is_midpoint Q B C ->

is_midpoint R C D ->

is_midpoint S D A ->

eq_distance S Q P R.

Proof.

geoInit.

eliminate S.

eliminate R.

repeat rewrite <- Fmult_Fplus_distr.

apply f_equal2.

auto.

apply f_equal2.

auto.

eliminate D.

eliminate F.

eliminate Q.

eliminate P.

basic_simpl.

unfold_Py.

uniformize_dir_seg.

field;decomp_all_non_zero_mult_div;solve_conds.

Qed.



Lemma l6_63 : forall A B C D E H,

on_foot D C A B ->

on_foot E B A C ->

inter_ll H C D B E ->

Py C H D = Py B H E.

Proof.

geoInit.

eliminate H.

smart_field_simplify_eq.

ring_simplify_eq.

eliminate D.

smart_field_simplify_eq.

eliminate E.

smart_field_simplify_eq.

uniformize_pys.

unfold_Py.

uniformize_signed_areas.

uniformize_dir_seg.

basic_simpl.

ring.

Qed.



Lemma l_6_273 : forall B C X A A1 C1,

 on_perp_d A B C 1 ->

 on_foot A1 A B X ->

 on_foot C1 C B X ->

 eq_distance A A1 B C1.

Proof.

am_before_field.

field_simplify_eq;auto.

replace (- (2 * (2 * (2 * 2))) * S B C X * S B C X) with (- (2 * (2 * (2 * 2))) * ( S B C X * S B C X) ) by ring.

rewrite (herron_qin B C X).

unfold_Py.

uniformize_dir_seg.

field_and_conclude.

solve_conds.

unfold not;intro H1; rewrite H1 in *; basic_simpl;intuition.

Qed.



Lemma l6_144 : forall A B I A1 A2 B1 B2 C,

on_foot A1 B I A ->

on_line_d A2 A1 B (0-1) ->

on_foot B1 A I B ->

on_line_d B2 B1 A (0-1) ->

inter_ll C A A2 B B2 ->

eq_angle A C I I C B.

Proof.

geoInit.

eliminate C.

smart_field_simplify_eq.

eliminate A2.

eliminate A1.

eliminate B2.

replace (1 - (0 - 1)) with 2 in * by ring.

eliminate B1.

uniformize_signed_areas.

unfold_Py;uniformize_dir_seg.

basic_simpl.

field.

solve_conds.

intro;rewrite H1 in H; basic_simpl;intuition.

intro;rewrite H1 in H0; basic_simpl;intuition.

Qed.



Lemma l_6_191 : forall A B C  E F G O1 O2 O3 r,

 1+2<>0 ->

 r*r = (2+1) ->

 is_midpoint E A C ->

 on_perp_d O2 E A (r / (2+1)) ->

 is_midpoint F B C ->

 on_perp_d O1 F C (r / (2+1)) ->

 is_midpoint G A B ->

 on_perp_d O3 G B (r/ (2+1)) ->

 eq_distance O1 O2 O2 O3.

Proof.

geoInit.

am_before_field.

uniformize_signed_areas.

uniformize_pys.

unfold_Py.

uniformize_dir_seg.

basic_simpl.

field_simplify_eq.

ring_simplify_eq.

assert (r * r * A ** B * A ** B = ( r * r) * A ** B * A ** B).

ring.

replace (-

(2 *

 (2 *

  (2 *

   (2 *

    (2 *

     (2 *

      (2 *

       (2 *

        (2 *

         (2 *

          (2 *

           (2 *

            (2 *

             (2 *

              (2 *

               (2 *

                (2 *

                 (2 *

                  (2 *

                   (2 *

                    (2 *

                     (2 *

                      (2 *

                       (2 *

                        (2 *

                         (2 *

                          (2 *

                           (2 *

                            (2 *

                             (2 *

                              (2 *

                               (2 *

                                (2 *

                                 (2 *

                                  (2 *

                                   (2 *

                                    (2 *

                                     (2 *

                                      (2 *

                                       (1 +

                                        2 *

                                        (1 +

                                         2 *

                                         (2 *

                                          (1 +

                                           2 *

                                           (2 *

                                            (1 +

                                             2 *

                                             (1 +

                                              2 *

                                              (2 *

                                               (2 *

                                                (1 +

                                                 2 *

                                                 (2 *

                                                  (2 *

                                                   (1 +

                                                    2 *

                                                    (1 +

                                                     2 *

                                                     (1 +

                                                      2 *

                                                      (1 +

                                                       2 *

                                                       (2 *

                                                        (1 +

                                                         2 *

                                                         (2 *

                                                          (1 +

                                                           2 *

                                                           (1 +

                                                            2 * (2 * (1 + 2)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) *

r * r * A ** B * A ** B) with (-

(2 *

 (2 *

  (2 *

   (2 *

    (2 *

     (2 *

      (2 *

       (2 *

        (2 *

         (2 *

          (2 *

           (2 *

            (2 *

             (2 *

              (2 *

               (2 *

                (2 *

                 (2 *

                  (2 *

                   (2 *

                    (2 *

                     (2 *

                      (2 *

                       (2 *

                        (2 *

                         (2 *

                          (2 *

                           (2 *

                            (2 *

                             (2 *

                              (2 *

                               (2 *

                                (2 *

                                 (2 *

                                  (2 *

                                   (2 *

                                    (2 *

                                     (2 *

                                      (2 *

                                       (1 +

                                        2 *

                                        (1 +

                                         2 *

                                         (2 *

                                          (1 +

                                           2 *

                                           (2 *

                                            (1 +

                                             2 *

                                             (1 +

                                              2 *

                                              (2 *

                                               (2 *

                                                (1 +

                                                 2 *

                                                 (2 *

                                                  (2 *

                                                   (1 +

                                                    2 *

                                                    (1 +

                                                     2 *

                                                     (1 +

                                                      2 *

                                                      (1 +

                                                       2 *

                                                       (2 *

                                                        (1 +

                                                         2 *

                                                         (2 *

                                                          (1 +

                                                           2 *

                                                           (1 +

                                                            2 * (2 * (1 + 2)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) *

(r * r) * A ** B * A ** B).

2:ring.

rewrite H0.

replace (2 *

(2 *

 (2 *

  (2 *

   (2 *

    (2 *

     (2 *

      (2 *

       (2 *

        (2 *

         (2 *

          (2 *

           (2 *

            (2 *

             (2 *

              (2 *

               (2 *

                (2 *

                 (2 *

                  (2 *

                   (2 *

                    (2 *

                     (2 *

                      (2 *

                       (2 *

                        (2 *

                         (2 *

                          (2 *

                           (2 *

                            (2 *

                             (2 *

                              (2 *

                               (2 *

                                (2 *

                                 (2 *

                                  (2 *

                                   (2 *

                                    (2 *

                                     (2 *

                                      (1 +

                                       2 *

                                       (1 +

                                        2 *

                                        (2 *

                                         (1 +

                                          2 *

                                          (2 *

                                           (1 +

                                            2 *

                                            (1 +

                                             2 *

                                             (2 *

                                              (2 *

                                               (1 +

                                                2 *

                                                (2 *

                                                 (2 *

                                                  (1 +

                                                   2 *

                                                   (1 +

                                                    2 *

                                                    (1 +

                                                     2 *

                                                     (1 +

                                                      2 *

                                                      (2 *

                                                       (1 +

                                                        2 *

                                                        (2 *

                                                         (1 +

                                                          2 *

                                                          (1 +

                                                           2 * (2 * (1 + 2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) *

r * r * B ** C * B ** C)

with 

(2 *

(2 *

 (2 *

  (2 *

   (2 *

    (2 *

     (2 *

      (2 *

       (2 *

        (2 *

         (2 *

          (2 *

           (2 *

            (2 *

             (2 *

              (2 *

               (2 *

                (2 *

                 (2 *

                  (2 *

                   (2 *

                    (2 *

                     (2 *

                      (2 *

                       (2 *

                        (2 *

                         (2 *

                          (2 *

                           (2 *

                            (2 *

                             (2 *

                              (2 *

                               (2 *

                                (2 *

                                 (2 *

                                  (2 *

                                   (2 *

                                    (2 *

                                     (2 *

                                      (1 +

                                       2 *

                                       (1 +

                                        2 *

                                        (2 *

                                         (1 +

                                          2 *

                                          (2 *

                                           (1 +

                                            2 *

                                            (1 +

                                             2 *

                                             (2 *

                                              (2 *

                                               (1 +

                                                2 *

                                                (2 *

                                                 (2 *

                                                  (1 +

                                                   2 *

                                                   (1 +

                                                    2 *

                                                    (1 +

                                                     2 *

                                                     (1 +

                                                      2 *

                                                      (2 *

                                                       (1 +

                                                        2 *

                                                        (2 *

                                                         (1 +

                                                          2 *

                                                          (1 +

                                                           2 * (2 * (1 + 2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) *

(r * r) * B ** C * B ** C).

rewrite H0.

ring.

ring.

solve_conds.

Qed.
