
Require Export pythagoras_difference_lemmas.
(* pythagoras_difference_lemmas:
Require Export euclidean_constructions.
Require Export area_elimination_lemmas.
Require Export ratios_elimination_lemmas.

Lemma l_24_a : forall A B P D,
Col A D B -> perp A B P D ->
A<>B -> B<>D ->
 A**D / D**B = Py P A B / Py P B A.

Lemma perp4_perp : forall A B P, 
perp A B P A -> Py P A B = 0.

Lemma perp_not_eq_not_perp : forall A B P D, perp A B P D ->
Col A D B ->
 A <> B ->  B <> D -> A <> D -> 
Py P A B <> 0.

Lemma l_24_b : forall A B P D,
Col A D B -> perp A B P D ->
A<>B -> 
 A**D / A**B = Py P A B / (2 * A**B * A**B).

Lemma l_24_c : forall A B P D,
Col A D B -> perp A B P D ->
A<>B -> 
 D**B / A**B = Py P B A / (2 * A**B * A**B).

Lemma l_24_c_on_foot : forall P U V Y,
on_foot Y P U V ->
U**Y / U**V = Py P U V / Py U V U.

Lemma per_area: forall A B C,
  per A B C -> 
  2 * 2 * S A B C * S A B C = A**B * A**B * B**C * B**C.

Lemma per_col_eq : forall A B C,
 per A B C -> Col A B C -> A = B \/ B = C.

Lemma perp_col_perp : forall P Q B C,
 Q<>B ->
 per P Q B -> Col Q B C -> per P Q C.

Lemma l_3_4 : forall A B C P,
 Col A B C -> Py P A C <> 0 ->
 Py P A B / Py P A C = A**B/ A**C.

Require Export Classical.

Lemma per_dec : forall A B C,
 per A B C \/ ~ per A B C.

Ltac cases_per A B C := elim (per_dec A B C);intros.

Lemma l_3_4_b : forall A B C P,
 Col A B C ->
 Py P A B * A**C =  Py P A C * A**B.

Lemma l_28_b : forall A B U V Y,
U <> V ->
Col Y U V -> 
Py A B Y = U**Y/U**V * Py A B V + Y**V/U**V * Py A B U.

Lemma l3_5_py : forall A B U V Y,
  U <> V ->
  Col Y U V ->  
  Py A Y B = U**Y / U**V * Py A V B + Y**V/ U**V * Py A U B 
  - (U**Y/ U**V) * (Y**V / U**V) * Py U V U.

Lemma midpoint_ratio_1 : forall O B D,
mid_point O B D ->  B<>D -> B ** O / B ** D = 1/2.

Lemma midpoint_ratio_2 : forall O B D,
mid_point O B D ->  B<>D -> O ** D / B ** D = 1/2.

Lemma l_28_midpoint : forall O A B P Q,
 mid_point O A B ->
 2 * Py O P Q = Py A P Q + Py B P Q.

Lemma l_28_b_midpoint : forall O A B P Q,
 mid_point O A B ->
 2 * Py P O Q = Py P A Q + Py P B Q - 1/ 2 * Py A B A.

Lemma l_27_a : forall A B C D P Q, weak_3_parallelogram A B C D ->
Py A P Q + Py C P Q = Py B P Q + Py D P Q.

Lemma l_27_b : forall A B C D P Q, weak_3_parallelogram A B C D ->
Py4 A P B Q = Py4 D P C Q.

Lemma midpoint_is_midpoint: forall I A B, 
 mid_point I A B -> A<>B -> is_midpoint I A B.

Lemma midpoint_on_line_d: forall I A B, 
 mid_point I A B -> A<>B -> on_line_d A I B (0-1).

Lemma symmetric_point_unicity : forall O B C D, 
 mid_point O B D ->
 mid_point O D C ->
 B=C.

Lemma weak_3_parallelogram_parallel : forall A B C D,
   weak_3_parallelogram A B C D -> parallel B C A D.

Lemma eq_half_eq_zero : forall x : F, x = 1/2 * x -> x=0.

Lemma weak_3_parallelogram_eq_side : forall A B C D,
   weak_3_parallelogram A B C D -> B**C= A**D.

Lemma l3_6 : forall A B C D, 
  weak_3_parallelogram A B C D ->
 A**C * A**C + B**D * B**D = 2*A**B * A**B + 2*B**C*B**C.

Lemma l3_6_b : forall A B C D, 
  weak_3_parallelogram A B C D ->
  Py A B C = - Py B A D.

Lemma l_27_c : forall A B C D P Q, weak_3_parallelogram A B C D ->
Py P A Q + Py P C Q = Py P B Q + Py P D Q + 2 * Py B A D.

Lemma l3_8_a : forall A B C D P, weak_3_parallelogram A B C D ->
Py P A B = Py4 P D A C.

Lemma l3_8_b : forall A B C D P, weak_3_parallelogram A B C D ->
Py P A B = Py P D C - Py A D C.

Lemma l_28_a : forall A B U V Y,
Col Y U V -> U <> V ->
S A B Y = U**Y/U**V * S A B V + Y**V/U**V * S A B U.

Lemma on_foot_per : forall A B C F, 
  on_foot F A B C ->
  per A F B.

Lemma herron_qin : forall A B C,
S A B C * S A B C = 1 / (2*2*2*2) * (Py A B A * Py A C A - Py B A C * Py B A C).

Lemma l3_9_aux : forall B D P Q R S Y ,
 Col Y B D ->
 B<>D ->
 B ** Y = Q ** S ->
 weak_3_parallelogram B Y S Q ->
 Py4 P Q R S = Q ** S / B ** D * Py4 P B R D.

Lemma l3_9 : forall P Q R S A B C D,
  parallel P R A C ->
  parallel Q S B D ->
  B<>D -> A<>C -> ~ perp A C B D ->
  Py4 P Q R S / Py4 A B C D = (P**R / A**C) * (Q**S / B**D).

Lemma l3_10 : forall A B C D,
 parallel A B C D ->
 C<>D ->
 A**B/C**D = Py4 A C B D / - Py C D C.

Lemma l3_10b : forall A B C D,
 parallel A B C D ->
 C<>D ->
 A**B/C**D = Py4 B C A D / Py C D C.

Lemma perp_not_parallel : forall A B C D,
  perp A B C D ->
  A <> B -> C <> D ->
  ~ parallel A B C D.

Lemma not_perp_to_itself : forall A B,
A <> B ->~ perp A B A B.

Lemma parallel_not_perp : forall A B C D,
  parallel A B C D ->
  A <> B -> C <> D ->
  ~ perp A B C D.

Lemma l_25_a : forall A B P Q Y,
  P<>Q -> Q<>Y -> Py Q A B <> 0 ->
 on_inter_line_perp Y A P Q A B ->
 P**Y / Q**Y = Py P A B / Py Q A B.

Lemma l_25_b : forall A B P Q Y,
  P<>Q -> Q<>Y -> Py Q A B <> 0 ->
 on_inter_line_perp Y A P Q A B ->
 P**Y / P**Q = Py P A B / Py4 P A Q B.

Lemma l_25_c : forall A B P Q Y,
  P<>Q -> Q<>Y -> Py Q A B <> 0 ->
 on_inter_line_perp Y A P Q A B ->
 Q**Y / P**Q = Py Q A B / Py4 P A Q B. *)

Lemma on_perp_d_ex : forall U V r,
 U<>V -> r<> 0 ->
 exists Y, on_perp_d Y U V r.
Proof.
intros.
assert (exists M: Point, ~ Col U V M).
apply build_point_not_collinear_1;auto.

elim H1;intros M HM; clear H1.
elim (proj_ex M U V);[intros N Hn|auto].

cases_equality U N.
subst.
unfold on_foot in *.
use Hn.
clear H3 H4.
assert (N<> M)
 by (intro;subst;auto with Geom).

elim (on_line_dex N M (r * Py N V N / (2*2*S V M N)) H2).
intros Y HY.
exists Y.
unfold on_perp_d.
repeat split;auto.
use HY.
apply (perp_para_perp N M N V Y N);auto with Geom.
use HY.
assert (~ Col V N M) by auto with Geom.
assert (Col N Y M) by auto with Geom.
IsoleVar r H4.
rewrite (A6 N Y M V H2 H5 H6) in H4.
rewrite H4.
uniformize_signed_areas.
field.
split;auto with Geom.
cut (S V M N <> 0).
auto with field_hints.
intro.
rewrite H10 in H8.
basic_simpl.
intuition.
auto with Geom.
repeat apply nonzeromult;auto with Geom.
auto with Geom.

assert (U<>M) by (intro;subst;intuition).

assert (~ Col U M N).
unfold on_foot in *.
use Hn.
assert (N<>M).
intro;subst;intuition.
assert (T:=perp_not_parallel N M U V H3 H4 H6).
intro.
assert (Col N M V).
apply (col_trans_1 N U M V); auto with Geom.
unfold parallel, S4 in T.
rewrite H8 in T.
assert (Col N U M) by auto with Geom.
rewrite H9 in T.
basic_simpl;intuition.

assert (M<>N) by (intro; subst;intuition).

elim (on_parallel_d_ex M N U (-(1)) H4).
2:auto with Geom.
intros B HB.

assert (U<>B).
intro;subst.
unfold on_parallel_d in *.
use HB.
basic_simpl.
assert (M=N).
auto with Geom.
intuition.

elim (on_line_dex U B (r*Py U V U / (2*2*S U V B)) H5).
intros Y HY.
use HY.

exists Y.
unfold on_perp_d.
repeat split; auto.

unfold on_parallel_d in HB.
use HB.
unfold on_foot in *.
use Hn.

assert (perp B U U V).
apply (perp_para_perp M N U V B U H8);auto with Geom.

apply (perp_para_perp U B U V Y U H5); auto with Geom.

assert (~ Col U V B).
intro.
unfold on_parallel_d in HB.
use HB.
unfold on_foot in *.
use Hn.

assert (Col U Y V)
by (apply (col_trans_1 U B Y V);auto with Geom).

assert (Col U Y N)
by (apply (col_trans_1 U V Y N);auto with Geom).

unfold parallel, S4 in H11.
assert (Col U B N).
apply (col_trans_1 U V B N);auto with Geom.
assert (Col B U N) by auto with Geom.
rewrite H18 in H11.
basic_simpl.
assert (Col B M U) by auto with Geom.
assert (Col U M N).
apply (col_trans_1 U B M N);auto with Geom.
intuition.

IsoleVar (r * Py U V U) H7.
rewrite H7.
rewrite (A6 U Y B V H5).
uniformize_signed_areas.
field.
cut (S U V B <> 0).
auto with field_hints.
intuition.
auto with Geom.
auto with Geom.
repeat apply nonzeromult; auto with Geom.
auto with Geom.
Qed.
