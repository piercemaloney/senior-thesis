
Require Export pythagoras_difference_lemmas.
(* pythagoras_difference_lemmas:
Require Export euclidean_constructions.
Require Export area_elimination_lemmas.
Require Export ratios_elimination_lemmas.

Lemma l_24_a : forall A B P D,
Col A D B -> perp A B P D ->
A<>B -> B<>D ->
 A**D / D**B = Py P A B / Py P B A.

Lemma perp4_perp : forall A B P, 
perp A B P A -> Py P A B = 0.

Lemma perp_not_eq_not_perp : forall A B P D, perp A B P D ->
Col A D B ->
 A <> B ->  B <> D -> A <> D -> 
Py P A B <> 0.

Lemma l_24_b : forall A B P D,
Col A D B -> perp A B P D ->
A<>B -> 
 A**D / A**B = Py P A B / (2 * A**B * A**B).

Lemma l_24_c : forall A B P D,
Col A D B -> perp A B P D ->
A<>B -> 
 D**B / A**B = Py P B A / (2 * A**B * A**B).

Lemma l_24_c_on_foot : forall P U V Y,
on_foot Y P U V ->
U**Y / U**V = Py P U V / Py U V U.

Lemma per_area: forall A B C,
  per A B C -> 
  2 * 2 * S A B C * S A B C = A**B * A**B * B**C * B**C.

Lemma per_col_eq : forall A B C,
 per A B C -> Col A B C -> A = B \/ B = C.

Lemma perp_col_perp : forall P Q B C,
 Q<>B ->
 per P Q B -> Col Q B C -> per P Q C.

Lemma l_3_4 : forall A B C P,
 Col A B C -> Py P A C <> 0 ->
 Py P A B / Py P A C = A**B/ A**C.

Require Export Classical.

Lemma per_dec : forall A B C,
 per A B C \/ ~ per A B C.

Ltac cases_per A B C := elim (per_dec A B C);intros.

Lemma l_3_4_b : forall A B C P,
 Col A B C ->
 Py P A B * A**C =  Py P A C * A**B.

Lemma l_28_b : forall A B U V Y,
U <> V ->
Col Y U V -> 
Py A B Y = U**Y/U**V * Py A B V + Y**V/U**V * Py A B U.

Lemma l3_5_py : forall A B U V Y,
  U <> V ->
  Col Y U V ->  
  Py A Y B = U**Y / U**V * Py A V B + Y**V/ U**V * Py A U B 
  - (U**Y/ U**V) * (Y**V / U**V) * Py U V U.

Lemma midpoint_ratio_1 : forall O B D,
mid_point O B D ->  B<>D -> B ** O / B ** D = 1/2.

Lemma midpoint_ratio_2 : forall O B D,
mid_point O B D ->  B<>D -> O ** D / B ** D = 1/2.

Lemma l_28_midpoint : forall O A B P Q,
 mid_point O A B ->
 2 * Py O P Q = Py A P Q + Py B P Q.

Lemma l_28_b_midpoint : forall O A B P Q,
 mid_point O A B ->
 2 * Py P O Q = Py P A Q + Py P B Q - 1/ 2 * Py A B A.

Lemma l_27_a : forall A B C D P Q, weak_3_parallelogram A B C D ->
Py A P Q + Py C P Q = Py B P Q + Py D P Q.

Lemma l_27_b : forall A B C D P Q, weak_3_parallelogram A B C D ->
Py4 A P B Q = Py4 D P C Q.

Lemma midpoint_is_midpoint: forall I A B, 
 mid_point I A B -> A<>B -> is_midpoint I A B.

Lemma midpoint_on_line_d: forall I A B, 
 mid_point I A B -> A<>B -> on_line_d A I B (0-1).

Lemma symmetric_point_unicity : forall O B C D, 
 mid_point O B D ->
 mid_point O D C ->
 B=C.

Lemma weak_3_parallelogram_parallel : forall A B C D,
   weak_3_parallelogram A B C D -> parallel B C A D.

Lemma eq_half_eq_zero : forall x : F, x = 1/2 * x -> x=0.

Lemma weak_3_parallelogram_eq_side : forall A B C D,
   weak_3_parallelogram A B C D -> B**C= A**D.

Lemma l3_6 : forall A B C D, 
  weak_3_parallelogram A B C D ->
 A**C * A**C + B**D * B**D = 2*A**B * A**B + 2*B**C*B**C.

Lemma l3_6_b : forall A B C D, 
  weak_3_parallelogram A B C D ->
  Py A B C = - Py B A D.

Lemma l_27_c : forall A B C D P Q, weak_3_parallelogram A B C D ->
Py P A Q + Py P C Q = Py P B Q + Py P D Q + 2 * Py B A D.

Lemma l3_8_a : forall A B C D P, weak_3_parallelogram A B C D ->
Py P A B = Py4 P D A C.

Lemma l3_8_b : forall A B C D P, weak_3_parallelogram A B C D ->
Py P A B = Py P D C - Py A D C.

Lemma l_28_a : forall A B U V Y,
Col Y U V -> U <> V ->
S A B Y = U**Y/U**V * S A B V + Y**V/U**V * S A B U.

Lemma on_foot_per : forall A B C F, 
  on_foot F A B C ->
  per A F B.

Lemma herron_qin : forall A B C,
S A B C * S A B C = 1 / (2*2*2*2) * (Py A B A * Py A C A - Py B A C * Py B A C).

Lemma l3_9_aux : forall B D P Q R S Y ,
 Col Y B D ->
 B<>D ->
 B ** Y = Q ** S ->
 weak_3_parallelogram B Y S Q ->
 Py4 P Q R S = Q ** S / B ** D * Py4 P B R D.

Lemma l3_9 : forall P Q R S A B C D,
  parallel P R A C ->
  parallel Q S B D ->
  B<>D -> A<>C -> ~ perp A C B D ->
  Py4 P Q R S / Py4 A B C D = (P**R / A**C) * (Q**S / B**D).

Lemma l3_10 : forall A B C D,
 parallel A B C D ->
 C<>D ->
 A**B/C**D = Py4 A C B D / - Py C D C.

Lemma l3_10b : forall A B C D,
 parallel A B C D ->
 C<>D ->
 A**B/C**D = Py4 B C A D / Py C D C.

Lemma perp_not_parallel : forall A B C D,
  perp A B C D ->
  A <> B -> C <> D ->
  ~ parallel A B C D.

Lemma not_perp_to_itself : forall A B,
A <> B ->~ perp A B A B.

Lemma parallel_not_perp : forall A B C D,
  parallel A B C D ->
  A <> B -> C <> D ->
  ~ perp A B C D.

Lemma l_25_a : forall A B P Q Y,
  P<>Q -> Q<>Y -> Py Q A B <> 0 ->
 on_inter_line_perp Y A P Q A B ->
 P**Y / Q**Y = Py P A B / Py Q A B.

Lemma l_25_b : forall A B P Q Y,
  P<>Q -> Q<>Y -> Py Q A B <> 0 ->
 on_inter_line_perp Y A P Q A B ->
 P**Y / P**Q = Py P A B / Py4 P A Q B.

Lemma l_25_c : forall A B P Q Y,
  P<>Q -> Q<>Y -> Py Q A B <> 0 ->
 on_inter_line_perp Y A P Q A B ->
 Q**Y / P**Q = Py Q A B / Py4 P A Q B. *)
Require Export euclidean_constructions_2.
(* euclidean_constructions_2:
Require Export pythagoras_difference_lemmas.

Lemma on_perp_d_ex : forall U V r,
 U<>V -> r<> 0 ->
 exists Y, on_perp_d Y U V r. *)
Require Export construction_lemmas_2.
(* construction_lemmas_2:
Require Export area_elimination_lemmas.

Theorem on_inter_line_parallel_ex: forall P Q R U V:Point,
 ~(parallel P Q U V) -> 
 exists Y:Point, (parallel Y R P Q) /\ (Col Y U V).

Theorem on_inter_parallel_parallel_ex_aux: forall P Q R U V W:Point,
 ~(parallel P Q U V) -> 
{Y:Point | (parallel Y R P Q) /\ (parallel Y W U V)}.

Lemma on_inter_parallel_parallel_ex : forall P Q R U V W:Point,
 ~ parallel P Q U V -> ~ Col R U V ->
 {Y :Point | (on_inter_parallel_parallel Y R P Q W U V)}. *)
Require Export ratios_elimination_lemmas.
(* ratios_elimination_lemmas:
Require Export area_elimination_lemmas.

Theorem non_zero_denom_on_line_d_1_length_ratio :
 forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P<>Q.

Theorem non_zero_denom_on_line_d_1_length_ratio_seg :
 forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P**Q <> 0.

Theorem non_zero_denom_on_line_1_length_ratio :
 forall (Y P Q : Point), on_line Y P Q -> P<>Q.

Theorem non_zero_denom_on_line_1_length_ratio_seg :
 forall (Y P Q : Point), on_line Y P Q -> P**Q <> 0.

Theorem elim_length_ratio_on_line_d_1 :
 forall (A C D P Q Y : Point) (lambda : F),
 on_line_d Y P Q lambda ->
 S A P Q = 0 ->
 C <> D -> 
 A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).

Theorem elim_length_ratio_on_line_1 :
 forall (A C D P Q Y : Point),
 on_line Y P Q ->
 S A P Q = 0 ->
 C <> D -> 
 A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).

Lemma
  invariant_par_on_line_d_1_length_ratio :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda -> S A P Q = 0 -> 
    parallel A Y C D -> parallel A P P Q.

Lemma
  invariant_par_on_line_1_length_ratio :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> S A P Q = 0 -> 
    parallel A Y C D -> parallel A P P Q.

Lemma
  invariant_par_on_line_d_1_length_ratio_2 :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> 
parallel A Y C D -> parallel C D P Q.

Lemma invariant_par_on_line_1_length_ratio_2 :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> S A P Q = 0 -> Y<>A -> 
parallel A Y C D -> parallel C D P Q.

Lemma invariant_par_on_line_1_length_ratio_3 :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> S A P Q = 0 -> 
    parallel A Y C D -> parallel P Y P Q.

Lemma invariant_par_on_line_d_1_length_ratio_3 :
    forall (A C D P Q Y : Point) (lambda:F),
    on_line_d Y P Q lambda -> S A P Q = 0 -> 
    parallel A Y C D -> parallel P Y P Q.

Lemma non_zero_denom_on_line_d_2_length_ratio :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda -> 
    S A P Q <> 0 -> 
    parallel A Y C D ->
    C<>D -> 
    S4 C P D Q <> 0.

Lemma non_zero_denom_on_line_2_length_ratio :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> 
    S A P Q <> 0 -> 
    parallel A Y C D -> 
    C <> D ->
    S4 C P D Q <> 0.

Lemma elim_length_ratio_on_line_d_2 :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda ->
    S A P Q <> 0 ->
    C <> D -> 
    parallel A Y C D ->
    A ** Y / C ** D = S A P Q / S4 C P D Q.

Lemma elim_length_ratio_on_line_2 :
    forall (A C D P Q Y : Point),
    on_line Y P Q ->
    ~ Col A P Q ->
    C <> D -> parallel A Y C D -> 
   A ** Y / C ** D = S A P Q / S4 C P D Q.

Lemma non_zero_denom_inter_ll_1_length_ratio :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V -> 
    S A U V <> 0 -> 
    parallel A Y C D -> 
    C <> D ->
    S4 C U D V <> 0.

Lemma elim_length_ratio_inter_ll_1 :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V ->
    S A U V <> 0 -> 
    C <> D -> 
    parallel A Y C D -> 
    A ** Y / C ** D = S A U V / S4 C U D V.

Lemma non_zero_denom_inter_ll_2_length_ratio :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V -> 
    S A U V = 0 ->
    C<>D ->
    A<>Y ->
    parallel A Y C D ->
    S4 C P D Q <> 0.

Lemma elim_length_ratio_inter_ll_2 :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V ->
    S A U V = 0 ->
    C <> D ->
    parallel A Y C D ->
    A<>Y ->
    A ** Y / C ** D = S A P Q / S4 C P D Q.

Lemma non_zero_denom_on_parallel_d_1_length_ratio :
    forall (A C D P Q R Y : Point) (l : F),
    on_parallel_d Y R P Q l ->
    S A R Y = 0 -> 
    P <> Q.

Lemma non_zero_denom_on_parallel_d_2_length_ratio :
    forall (A C D P Q R Y : Point) (l : F),
    on_parallel_d Y R P Q l ->
    parallel A Y C D ->
    C <> D ->
    S A R Y <> 0 -> 
    S4 C P D Q <> 0.

Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda,
   on_parallel_d Y R P Q lambda -> 
   (R=Y <-> lambda = 0).

Lemma invariant_par_on_parallel_d_1_length_ratio :
    forall (A C D P Q R Y : Point) (lambda : F),
    on_parallel_d Y R P Q lambda -> 
    S A R Y = 0 -> 
    R <> Y -> 
    parallel A Y C D -> 
    parallel A R P Q.

Lemma invariant_par_on_parallel_d_1_length_ratio_2 :
    forall (A C D P Q R Y : Point) (lambda : F),
    on_parallel_d Y R P Q lambda -> 
    S A R Y = 0 -> 
    R<>Y ->
    A<>Y ->
    parallel A Y C D -> 
    parallel C D P Q.

Theorem elim_length_ratio_on_parallel_d_1 :
 forall (A C D P Q R Y : Point) (lambda : F),
 on_parallel_d Y R P Q lambda ->
 S A R Y = 0 ->
 C <> D ->
 A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).

Lemma elim_length_ratio_on_parallel_d_2 :
    forall (A C D P Q R Y : Point) (lambda : F),
    on_parallel_d Y R P Q lambda ->
    ~ Col A R Y ->
    C <> D -> 
    parallel A Y C D -> 
    A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

Lemma elim_area_on_inter_parallel_parallel :
    forall P Q R U V W Y A B : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    R <> Y ->
    S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.

Lemma elim_area_on_inter_parallel_parallel_RY :
    forall P Q R U V W Y A B : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    R = Y ->
    S A B Y = S A B W +
(W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.

Lemma elim_length_ratio_on_inter_line_parallel_1 :
    forall A C D U V R P Q Y : Point,
    on_inter_line_parallel Y R U V P Q ->
    S A U V <> 0->
    C <> D -> 
    parallel A Y C D -> 
    A ** Y / C ** D = S A U V / S4 C U D V.

Lemma elim_length_ratio_on_inter_line_parallel_2 :
    forall A C D U V R P Q Y : Point,
    on_inter_line_parallel Y R U V P Q ->
    S A U V = 0 ->
    C <> D -> 
    Y <> A ->
    Y <> R ->
    parallel A Y C D -> 
    A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

Lemma elim_length_ratio_on_inter_parallel_parallel_1 :
    forall A C D P Q R U V W Y : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    ~ parallel A Y P Q ->
    Y <> R ->
    C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

Lemma elim_length_ratio_on_inter_parallel_parallel_2 :
    forall A C D P Q R U V W Y : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    parallel A Y P Q ->
    Y <> A ->
    C <> D ->
    Y <> W ->
    parallel A Y C D ->
    A ** Y / C ** D = S4 A U W V / S4 C U D V.

Theorem aux_co_side_1 :
   forall A B P Q M : Point, 
   Q <> M -> 
   inter_ll M A B P Q -> 
   S Q A B <> 0.

Hint Resolve aux_co_side_1: Geom.

Theorem co_side_elim_1 :
  forall A B P Q M : Point,
  Q <> M -> 
  inter_ll M A B P Q -> 
  P ** M / Q ** M = S P A B / S Q A B.

Lemma inter_ll_comm1 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P A B D C.

Lemma inter_ll_comm2 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P B A C D.

Lemma inter_ll_comm3 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P B A D C.

Lemma inter_ll_comm4 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P C D A B.

Hint Resolve inter_ll_comm1 inter_ll_comm2 inter_ll_comm3 inter_ll_comm4: Geom.

Theorem aux_co_side_2 :
 forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.

Theorem co_side_elim_2 : forall A B P Q M : Point,
 P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.

Theorem aux_co_side_3 :
 forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.

Theorem co_side_elim_3 : forall A B P Q M : Point,
 B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.

Theorem aux_co_side_4 :
 forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.

Theorem co_side_elim_4 : forall A B P Q M : Point,
 A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.

Lemma elim_length_ratio_inter_ll_1_spec :
 forall A C U V P Q Y : Point,
 inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> 
 A ** Y / C ** Y = S A U V / S C U V.

Lemma elim_length_ratio_inter_ll_2_spec :
 forall A C U V P Q Y : Point,
 inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y ->
 A ** Y / C ** Y = S A P Q/ S C P Q. *)

Lemma grid_existence : 
  forall O U, O<>U ->
  exists V, 
  perp O U O V /\ O**U <> 0 /\ O**V <> 0.
Proof.
intros.
assert ( exists Y : Point, on_perp_d Y O U 1).
apply (on_perp_d_ex O U 1 H).
auto with field_hints.
elim H0;intros V HV.
exists V.
unfold on_perp_d in HV.
use HV.
repeat split;auto with Geom.
intro.
assert (O=V) by auto with Geom.
subst.
basic_simpl.
unfold Py in H2.
uniformize_dir_seg.
basic_simpl.
ring_simplify in H2.
assert (U=V).
cases_equality U V.
auto.
assert (U**V<>0).
auto with Geom.
assert (2 * U ** V * U ** V <> 0).
repeat (apply (nonzeromult));auto with Geom.
intuition.
intuition.
Qed.

Ltac construct_grid O U V H := 
 elim grid_existence;let H:= fresh in (
 intros O H; elim H; clear H;intros U H;elim H;clear H;intro V;intros H;decompose [and] H).

Lemma area_grid : forall O U V, perp O U O V -> 
O ** U <> 0 -> O ** V <> 0 ->
 2*2*(S O U V * S O U V) = O**U*O**U*O**V*O**V.
Proof.
intros.
assert ( 2 * 2 * S U O V * S U O V = U ** O * U ** O * O ** V * O ** V).
apply (per_area U O V).
assert (perp U O O V) by auto with Geom.
auto with Geom.
uniformize_signed_areas.
basic_simpl.
ring_simplify_eq.
rewrite H2.
uniformize_dir_seg.
ring.
Qed.

Lemma grid_not_col : forall O U V, perp O U O V -> 
O ** U <> 0 -> O ** V <> 0 -> ~ Col O U V.
Proof.
intros.
intro.
assert (parallel O U O V) by auto with Geom.
assert (~ parallel O U O V) by
(apply (perp_not_parallel);auto with Geom).
intuition.
Qed.

Lemma degen_py_elim : forall O U V, perp O U O V -> 
O ** U <> 0 -> O ** V <> 0 ->
forall A B,  
Py A B A = 2*2*2*(
   (S O V A-S O V B) * (S O V A-S O V B) / (O**V * O**V) +
   (S O U A-S O U B) * (S O U A-S O U B) / (O**U * O**U)).
Proof.
intros.

cases_col A O V.
assert (Col O V A) by auto with Geom.
rewrite H3.
replace ((0 - S O V B) * (0 - S O V B)) with (S O V B  * S O V B) by ring.

replace (S O V A) with 0.
2:auto with Geom.
admit.
cases_col B O U.
admit.

assert ({Y : Point | on_inter_parallel_parallel Y A O U B O V}).
apply (on_inter_parallel_parallel_ex O U A O V B).
apply perp_not_parallel;auto with Geom.
auto.
elim H4;intros M HM;clear H4.

cases_equality M A.
subst M.
unfold on_inter_parallel_parallel in *.
use HM.
assert (parallel O V A B) by auto with Geom.
unfold parallel, S4 in H7.
admit.

cases_equality M B.
admit.

assert (T:=HM).
unfold on_inter_parallel_parallel in HM.
use HM.
assert ( perp M A O V) 
by (apply (perp_para_perp O U O V M A);auto with Geom).
assert (perp M B M A)
by (apply (perp_para_perp O V M A M B);auto with Geom).
assert (per A M B).
assert (perp A M M B) by auto with Geom.
auto with Geom.
unfold per, Py in *.
uniformize_dir_seg.
basic_simpl.
IsoleVar (A ** B * A ** B) H12.
rewrite H12.
basic_simpl.
assert (A ** M / O ** U = S4 A O B V / S4 O O U V).
apply (elim_length_ratio_on_inter_parallel_parallel_2 A O U O U A O V B M);
auto with Geom.
assert (B ** M / O ** V = S4 B O A U / S4 O O V U).
apply (elim_length_ratio_on_inter_parallel_parallel_2 B O V O V B O U A M);
auto with Geom.
unfold on_inter_parallel_parallel in *.
use T;repeat split;auto with Geom.
basic_simpl.
replace (S4 B O A U) with (- S4 O B U A) in * by auto with Geom.
replace (S4 A O B V) with (- S4 O A V B) in * by auto with Geom.
unfold S4 in *.
IsoleVar (A**M) H13.
IsoleVar (B**M) H14.
assert (~ Col O U V).
apply grid_not_col;auto with Geom.
assert ( 2 * 2 * (S O U V * S O U V) = O ** U * O ** U * O ** V * O ** V).
apply area_grid;auto with Geom.
IsoleVar (S O U V * S O U V) H16.
assert (A ** M * A ** M = O ** U * O**U * ( (S O A V + S O V B) * (S O A V + S O V B) / (S O U V * S O U V))).
rewrite H13.
field;auto with Geom.
rewrite H16 in H18.
assert (B ** M * B ** M = O**V * O**V* ((S O B U + S O U A)* (S O B U + S O U A) / (S O V U * S O V U)
)).
rewrite H14.
field;auto with Geom.
uniformize_signed_areas.
basic_simpl.
rewrite H16 in H19.
rewrite H18.
rewrite H19.
field; auto with Geom.
apply nonzeromult;auto with Geom.
Qed.

Lemma py_to_pys : forall A B C,
 Py A B C = 1/2 * (Py A B A + Py B C B - Py A C A).
Proof.
intros.
unfold Py.
uniformize_dir_seg.
basic_simpl.
field;auto with Geom.
Qed.

Lemma py_elim :  forall O U V, perp O U O V -> 
O ** U <> 0 -> O ** V <> 0 ->
forall A B C, 
~ Col A O V -> ~ Col B O U ->
Py A B C = 
(- (2*2*2)* O ** U * O ** U * S O V A * S O V B +
    2*2*2 * O ** U * O ** U * S O V A * S O V C +
    2*2*2 * O ** U * O ** U * S O V B * S O V B -
    2*2*2 * O ** U * O ** U * S O V B * S O V C -
    2*2*2 * O ** V * O ** V * S O U A * S O U B +
    2*2*2 * O ** V * O ** V * S O U A * S O U C +
    2*2*2 * O ** V * O ** V * S O U B * S O U B -
    2*2*2 * O ** V * O ** V * S O U B * S O U C) /
(O ** V * O ** V * O ** U * O ** U).
Proof.
intros.
rewrite py_to_pys.
repeat (rewrite (degen_py_elim O U V H) by auto with Geom).
field;auto with Geom.
Qed.

Ltac elim_pys O U V H1 H2 H3 :=
repeat (rewrite (degen_py_elim O U V H1 H2 H3));
repeat (rewrite (py_elim O U V H1 H2 H3)).

