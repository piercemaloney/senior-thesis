
Require Export area_elimination_lemmas.
(* area_elimination_lemmas:
Require Export advanced_parallel_lemmas.
Require Export geometry_tools.

Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.

Theorem non_zero_denom_inter_ll_area :
 forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.

Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.

Theorem non_zero_denom_on_inter_line_parallel_area :
 forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.

Theorem non_zero_denom_on_inter_parallel_parallel_area :
 forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.

Theorem elim_area_on_line_d :
 forall (A B P Q Y : Point) (lambda : F),
 on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.

Theorem elim_area_on_line :
 forall A B P Q Y : Point,
 on_line Y P Q ->
 S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.

Theorem elim_area_inter_ll :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V ->
 S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P). 

Theorem elim_area_on_parallel_d :
 forall (A B P Q R Y : Point) (lambda : F),
 on_parallel_d Y R P Q lambda -> 
 S A B Y = S A B R + lambda * S4 A P B Q. 

Theorem elim_area_on_parallel :
 forall A B P Q R Y : Point,
 on_parallel Y R P Q -> 
 S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.

Lemma parallel_transitivity : forall A B C D E F, 
  C<> D -> 
  parallel A B C D -> 
  parallel C D E F -> 
  parallel A B E F.

Lemma elim_area_on_inter_line_parallel :
    forall P Q R U V Y A B : Point,
    on_inter_line_parallel Y R U V P Q ->
    R <>Y ->
    S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V. *)

Theorem on_inter_line_parallel_ex: forall P Q R U V:Point,
 ~(parallel P Q U V) -> 
 exists Y:Point, (parallel Y R P Q) /\ (Col Y U V).
Proof with Geometry.
intros.
assert (P<>Q).
unfold not;intro.
assert (parallel P Q U V).
subst P.
Geometry.
intuition.

cases_col R P Q.

assert {Y : Point | Col Y P Q /\ Col Y U V}.
apply inter_llex...
DecompEx H2 Y.
exists Y.
intuition idtac.
cut (parallel P Q R Y).
Geometry.
unfold parallel,S4.
replace (S P R Q) with (- S R P Q).
2:symmetry;Geometry.
replace (S P Q Y) with (S Y P Q).
2:symmetry;Geometry.
rewrite H1.
rewrite H2.
ring.

assert ({Y':Point | (parallel P Q R Y') /\ R<>Y'}).
apply euclid_parallel_existence_strong...
DecompExAnd H2 Y'.

suppose (~ parallel Y' R U V).

assert {Y:Point | (Col Y Y' R) /\ (Col Y U V) }.
eapply inter_llex...

DecompExAnd H3 Y.
exists Y.
split;try assumption.

cut (parallel P Q R Y).
Geometry.
eapply col_par_par.
apply H5.
assumption.
Geometry.

unfold not;intro.
assert (parallel P Q U V).
eapply parallel_transitivity;eauto.
Geometry.
intuition.
Qed.

Theorem on_inter_parallel_parallel_ex_aux: forall P Q R U V W:Point,
 ~(parallel P Q U V) -> 
{Y:Point | (parallel Y R P Q) /\ (parallel Y W U V)}.
Proof with Geometry.
intros.

assert (P<>Q).
unfold not;intro.
assert (parallel P Q U V).
subst P.
Geometry.
intuition.

assert (U<>V).
unfold not;intro.
assert (parallel P Q U V).
subst U.
Geometry.
intuition.

assert ({R':Point | (parallel P Q R R') /\ R<>R'}).
apply euclid_parallel_existence_strong...
DecompExAnd H2 R'.

assert ({W':Point | (parallel U V W W') /\ W<>W'}).
apply euclid_parallel_existence_strong...
DecompExAnd H2 W'.

assert {Y : Point | Col Y R R' /\ Col Y W W'}.
apply inter_llex...

unfold not;intro.
assert (parallel R R' U V).
eapply parallel_transitivity.
apply H7.
Geometry.
Geometry.
assert (parallel P Q U V).
eapply parallel_transitivity;apply H5 || Geometry .
intuition.

DecompExAnd H2 Y.
exists Y.
split.

cut (parallel P Q R Y).
Geometry.
eapply col_par_par.
apply H5.
Geometry.
Geometry.

cut (parallel U V W Y).
Geometry.
eapply col_par_par.
apply H7.
Geometry.
Geometry.
Qed.

Lemma on_inter_parallel_parallel_ex : forall P Q R U V W:Point,
 ~ parallel P Q U V -> ~ Col R U V ->
 {Y :Point | (on_inter_parallel_parallel Y R P Q W U V)}.
Proof.
intros.
assert ({Y:Point | (parallel Y R P Q) /\ (parallel Y W U V)}).
apply on_inter_parallel_parallel_ex_aux;auto.
elim H1;intros Y HY;use HY;clear H1.
exists Y.
unfold on_inter_parallel_parallel.
repeat split;auto with Geom.
Qed.

