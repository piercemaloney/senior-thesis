
Require Export pythagoras_difference.
(* pythagoras_difference:
Require Export advanced_parallel_lemmas.

Definition Py A B C := A**B * A**B + B**C * B**C - A**C * A**C.
Definition Py4 A B C D := Py A B D - Py C B D.
Definition per A B C := Py A B C = 0.
Definition perp A B C D := Py4 A C B D = 0.
Definition on_foot (Y P U V : Point) := perp Y P U V /\ Col Y U V /\ U<>V.

Axiom perp_perp_para : forall A B C D E F,
 C<>D ->
 perp A B C D -> perp E F C D -> parallel A B E F.

Axiom perp_para_perp : forall A B C D E F, 
  A<>B ->
  perp A B C D -> parallel A B E F -> perp E F C D.

Axiom on_foot_area : forall A B C F, 
  on_foot F A B C ->
  2 * 2 * S A B C * S A B C = A**F * A**F * B**C * B**C.

Lemma on_foot_area_paper : forall A B C F, 
  perp F A B C -> Col F B C ->
  2 * 2 * S A B C * S A B C = A**F * A**F * B**C * B**C.

Lemma pyth_simpl_1 : forall A B, Py A A B = 0.

Lemma pyth_simpl_2 : forall A B, Py A B B = 0.

Hint Rewrite pyth_simpl_1  pyth_simpl_2 : seg_simplifications.
Hint Resolve pyth_simpl_1 pyth_simpl_2 : Geom.

Lemma test_basic_simpl : forall A B, Py A A B = 0.

Lemma pyth_sym : forall A B C, Py A B C = Py C B A.

Hint Resolve pyth_sym : Geom.

Lemma pyth_simpl_3 : forall A B, Py A B A = 2 * A**B * A**B.

Lemma pyth_simpl_4 : forall A B, Py A B A = Py B A B.

Hint Immediate pyth_simpl_4 : Geom.

Ltac uniformize_pys :=
  repeat (rewrite pyth_simpl_1);
  repeat (rewrite pyth_simpl_2);
  repeat
   match goal with
   |  |- context [(Py ?A ?B ?C)] =>
    (match goal with
       |  |- context [(Py C B A)] => rewrite (pyth_sym A B C) in *   
       end)
   |  |- context [(Py ?A ?B ?A)] =>
    (match goal with
       |  |- context [(Py B A B)] => rewrite (pyth_simpl_4 A B) in *   
       end)
   end.

Lemma test_uniformize_pys : forall A B C, 
 Py A B C - Py C B A + Py A A C + Py A C C + Py A B A - Py B A B = 0.

Lemma square_to_py : forall A B, A**B * A**B = Py A B A / 2.

Lemma col_pyth : forall A B C, Col A B C -> Py A B C = 2 * B**A * B**C.

Lemma py4_1 : forall A B C D, Py4 A B C D = - Py4 A D C B.

Lemma py4_2 : forall A B C D, Py4 A B C D = Py4 B A D C.

Lemma py4_3 : forall A B C D, Py4 A B C D = - Py4 B C D A.

Lemma py4_4 : forall A B C D, Py4 A B C D = Py4 C D A B.

Lemma py4_5 : forall A B C D, Py4 A B C D = - Py4 C B A D.

Lemma py4_6 : forall A B C D, Py4 A B C D = Py4 D C B A.

Lemma py4_7 : forall A B C D, Py4 A B C D = - Py4 D A B C.

Hint Resolve py4_1 py4_2 py4_3 py4_4 py4_5 py4_6 py4_7 : Geom.

Lemma py4_simpl_1 : forall A B C, Py4 A A B C = - Py B A C.

Lemma py4_simpl_2 : forall A B C, Py4 B A A C = Py B A C.

Lemma py4_simpl_3 : forall A B C, Py4 A B A C = 0.

Lemma py4_simpl_4 : forall A B C, Py4 B A C A = 0.

Lemma py4_simpl_5 : forall A B C, Py4 B C A A = - Py B A C.

Lemma py4_simpl_6 : forall A B C, Py4 A B C A = Py B A C.

Hint Resolve 
py4_simpl_1 
py4_simpl_2 
py4_simpl_3 
py4_simpl_4 
py4_simpl_5 
py4_simpl_6 : Geom.

Hint Rewrite
pyth_simpl_1
pyth_simpl_2
py4_simpl_1 
py4_simpl_2 
py4_simpl_3 
py4_simpl_4 
py4_simpl_5 
py4_simpl_6 : py_simplifications.

Ltac py_simpl := autorewrite with py_simplifications in *.

Lemma test_py_simpl : forall A B C, Py A A B = 0 -> Py A A B + Py B A A + Py4 B A C A = 0.

Lemma perp_1 : forall A B C D,
perp A B C D -> perp A B D C.

Lemma perp_2 : forall A B C D,
perp A B C D -> perp B A C D.

Lemma perp_3 : forall A B C D,
perp A B C D -> perp B A D C.

Lemma perp_4 : forall A B C D,
perp A B C D -> perp C D A B.

Lemma perp_5 : forall A B C D,
perp A B C D -> perp C D B A.

Lemma perp_6 : forall A B C D,
perp A B C D -> perp D C A B.

Lemma perp_7 : forall A B C D,
perp A B C D -> perp D C B A.

Lemma perp_8 : forall A B C,
perp A B B C -> per A B C.

Lemma perp_9 : forall A B C,
per A B C -> perp A B B C.

Hint Resolve 
perp_1
perp_2
perp_3
perp_4
perp_5
perp_6
perp_7 : Geom.

Hint Immediate perp_8 perp_9 : Geom.

Lemma not_eq_py_not_zero : forall A B, A<>B -> Py A B A <> 0.

Hint Resolve not_eq_py_not_zero : Geom.

Lemma py_zero_eq : forall A B, Py A B A = 0 -> A = B.

Hint Resolve py_zero_eq : Geom. *)

Definition on_perp (A' B C : Point) : Prop := B <> C /\ perp A' B B C /\ S B C A' <> 0.

Definition on_perp_d (Y U V : Point)  (lambda : F) : Prop := 
     U <> V  /\ perp Y U U V /\ lambda * Py U V U = (2+2) * S U V Y /\ lambda <> 0.

Definition on_inter_line_perp (Y R U V P Q : Point) : Prop :=
  Col Y U V /\ perp Y R P Q /\ ~ perp P Q U V.

Lemma proj_ex : forall A P Q, P<>Q -> exists X, on_foot X A P Q.
Proof.
intros.
unfold on_foot.
assert (T:=on_line_dex P Q (Py A P Q/Py P Q P) H).
elim T;clear T.
intros Y HY.
use HY.
exists Y.
repeat split;auto.

unfold perp, Py4.
rewrite col_pyth by assumption.
rewrite H1.
unfold Py.
basic_simpl.
uniformize_dir_seg.
basic_simpl.
field.
replace (P ** Q * P ** Q + P ** Q * P ** Q) with (2*P ** Q * P ** Q) by ring.
repeat apply nonzeromult; auto with Geom.
Qed.

Lemma on_perp_to_on_perp_d : forall A B C : Point,
       on_perp A B C  -> on_perp_d A B C ((2 + 2) * S B C A / Py B C B).
Proof.
intros.
unfold on_perp, on_perp_d in *.
decompose [and] H; clear H.
repeat split; try assumption.
field.
auto with Geom.
replace (2+2) with (2*2) by ring.
repeat apply nonzeromult;auto with Geom.
intro.
assert ( Py B C B * / Py B C B = 0 * Py B C B).
rewrite H.
ring.
replace (Py B C B * / Py B C B) with 1 in H1.
2: field;auto with Geom.
basic_simpl.
intuition.
Qed.

Lemma on_line_d_iff_on_parallel_d : forall A B C r,
 on_line_d A B C r <-> on_parallel_d A B C B (0-r).
Proof.
intros.
unfold on_line_d, on_parallel_d.
unfold parallel, S4, Col.
split.
intros.
decompose [and] H; clear H.
repeat split.
auto.
basic_simpl.
uniformize_signed_areas.
rewrite H0.
ring.
auto.
rewrite H3.
uniformize_dir_seg.
ring.
intros.
decompose [and] H; clear H.
repeat split.
basic_simpl.
uniformize_signed_areas.
rewrite H2;ring.
auto.
uniformize_dir_seg.
rewrite H3;ring.
Qed.

Lemma on_line_iff_on_parallel : forall A B C,
 on_line A B C <-> on_parallel A B C B.
Proof.
intros.
unfold on_line, on_parallel.
unfold parallel, S4, Col.
split.
intros.
decompose [and] H; clear H.
split.
auto.
basic_simpl.
uniformize_signed_areas.
auto.
intros.
decompose [and] H; clear H.
split.
basic_simpl.
uniformize_signed_areas.
auto.
auto.
Qed.

Definition eq_distance A B C D := Py A B A = Py C D C.

Definition harmonic A B C D := A**C / C**B = D**A / D**B.

Definition eq_product A B C D P Q R S := Py A B A * Py C D C = Py P Q P * Py R S R.

Definition tangent O1 A O2 B :=
Py O1 O2 O1 * Py O1 O2 O1 / (2+2) + 
Py O1 A O1   * Py O1 A O1 / (2+2) +  
Py O1 B O1   * Py O1 B O1 / (2+2) -
Py O1 O2 O1 * Py O1 A O1 / 2 -
Py O1 O2 O1 * Py O1 B O1 / 2 -
 Py O1 A O1 * Py O1 B O1 / 2.

Definition m_ratio Y U V r := 1+r<>0 /\ on_parallel_d Y U U V (r/(1+r)).

Definition inversion P Q O A := Py O Q O <> 0 /\ on_line_d P O Q (Py O A O / Py O Q O).

Definition eq_angle A B C D E F := 
  S A B C * Py D E F = S D E F  * Py A B C.

Definition co_circle A B C D :=
  S C A D * Py C B D = S C B D * Py C A D.

Lemma check_co_circle : forall A B C D, 
 co_circle A B C D <-> eq_angle C A D C B D.
Proof.
intros.
unfold co_circle, eq_angle.
intuition.
Qed.

Definition inter_lc Y U V O N := on_foot N O U V /\ on_parallel_d Y N N U 1.

Definition on_circle Y O P Q' N' :=  inter_lc Y P Q' O N'.
