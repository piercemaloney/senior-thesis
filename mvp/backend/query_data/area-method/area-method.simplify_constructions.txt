
Require Export area_elimination_lemmas.
(* area_elimination_lemmas:
Require Export advanced_parallel_lemmas.
Require Export geometry_tools.

Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.

Theorem non_zero_denom_inter_ll_area :
 forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.

Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.

Theorem non_zero_denom_on_inter_line_parallel_area :
 forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.

Theorem non_zero_denom_on_inter_parallel_parallel_area :
 forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.

Theorem elim_area_on_line_d :
 forall (A B P Q Y : Point) (lambda : F),
 on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.

Theorem elim_area_on_line :
 forall A B P Q Y : Point,
 on_line Y P Q ->
 S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.

Theorem elim_area_inter_ll :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V ->
 S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P). 

Theorem elim_area_on_parallel_d :
 forall (A B P Q R Y : Point) (lambda : F),
 on_parallel_d Y R P Q lambda -> 
 S A B Y = S A B R + lambda * S4 A P B Q. 

Theorem elim_area_on_parallel :
 forall A B P Q R Y : Point,
 on_parallel Y R P Q -> 
 S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.

Lemma parallel_transitivity : forall A B C D E F, 
  C<> D -> 
  parallel A B C D -> 
  parallel C D E F -> 
  parallel A B E F.

Lemma elim_area_on_inter_line_parallel :
    forall P Q R U V Y A B : Point,
    on_inter_line_parallel Y R U V P Q ->
    R <>Y ->
    S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V. *)

Theorem combine_inter_parallel : forall A B C E F X Y r, 
(on_parallel_d X C A B r) -> 
(inter_ll Y C X E F) ->
~ Col C A B ->
(on_inter_line_parallel Y C E F A B).
Proof.
intro.
unfold on_parallel_d, inter_ll, on_inter_line_parallel.
intros.
DecompAndAll.
repeat split;try assumption.

assert (C<>X).
unfold not;intro.
assert (parallel C X E F).
subst C.
Geometry.
intuition.
cut  (parallel A B C Y).
Geometry.
eapply col_par_par.
apply H.
Geometry.
Geometry.

unfold not;intro.
assert (parallel C X E F).
assert (parallel C X A B).
Geometry.
eapply parallel_transitivity;eauto.
intuition.

Qed.

Ltac put_on_inter_line_parallel :=
  repeat match goal with
  | H:(on_parallel_d  ?X ?C ?A ?B), G:(inter_ll ?Y ?C ?X ?E ?F) |- _ =>
         let T:= fresh in  assert (T:=combine_inter_parallel A B C E F X Y H G);clear H G
end.

