
Require Export advanced_parallel_lemmas.
(* advanced_parallel_lemmas:
Require Export construction_lemmas.

Definition weak_parallelogram (A B C D : Point) : Prop :=
  A<>C /\ B<>D /\
  exists O, mid_point O A C /\ mid_point O B D.

Lemma parallelogram_weak_parallelogram : forall A B C D,
 parallelogram A B C D -> weak_parallelogram A B C D.

Theorem weak_parallelogram_parallelogram : forall A B C D,
~ Col A B C -> weak_parallelogram A B C D -> parallelogram A B C D.

Theorem l2_11a_strong :
 forall A B C D P Q : Point,
 weak_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

Theorem l2_11a :
 forall A B C D P Q : Point,
 parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.
 
Definition weak_2_parallelogram (A B C D : Point) : Prop :=
  (A=C <-> B=D) /\
  exists O, mid_point O A C /\ mid_point O B D.

Theorem l2_11a_strong_strong :
 forall A B C D P Q : Point,
 weak_2_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

Definition  weak_3_parallelogram (A B C D : Point) : Prop :=
  exists O, mid_point O A C /\ mid_point O B D.

Lemma weak_para_1 : forall W S V U, 
weak_3_parallelogram W S V U -> weak_3_parallelogram U V S W.

Hint Resolve weak_para_1 : Geom.

Theorem l2_11a_strong_strong_strong_aux :
 forall A B C D P Q : Point, A=C ->
 weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

Theorem l2_11a_strong_strong_strong :
 forall A B C D P Q : Point, 
 weak_3_parallelogram A B C D -> S A P Q + S C P Q = S B P Q + S D P Q.

Theorem l2_11b :
 forall A B C D P Q : Point, parallelogram A B C D -> 
 S4 P A Q B = S4 P D Q C.

Theorem l2_11b_strong_strong : 
  forall A B C D P Q : Point, weak_2_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.

Theorem l2_11b_strong_strong_strong : 
  forall A B C D P Q : Point, weak_3_parallelogram A B C D -> S4 P A Q B = S4 P D Q C.

Theorem l2_12a :
 forall A B C D P : Point,
 parallelogram A B C D -> 
 S P A B = S P D C - S A D C.

Theorem l2_12a_strong_3 :
 forall A B C D P : Point,
 weak_3_parallelogram A B C D -> 
 S P A B = S P D C - S A D C.

Theorem l2_12b :
 forall A B C D P : Point, parallelogram A B C D -> 
  S P A B = S4 P D A C.

Theorem l2_12b_strong_3 :
 forall A B C D P : Point, weak_3_parallelogram A B C D -> 
  S P A B = S4 P D A C.

Theorem pascalian_ax :
 forall A B C P Q R : Point,
 Col A B C -> Col P Q R -> 
 parallel A Q R B -> parallel B P Q C -> 
 parallel A P R C.

Theorem l1_25_aux :
 forall A B C X Y Z : Point,
 ~ Col Z B Y ->
 ~ Col C B Y ->
 Col A B C ->
 Col X Y Z ->
 parallel A X B Y ->
 parallel B Y C Z -> 
 B <> C -> Z <> Y -> 
 A ** B / C ** B = X ** Y / Z ** Y.

Theorem l1_25 :
 forall A B C X Y Z : Point,
 ~ Col C B Y ->
 Col A B C ->
 Col X Y Z -> parallel A X B Y -> parallel B Y C Z -> 
 A ** B / C ** B = X ** Y / Z ** Y.

Theorem thales :
 forall S B C Z Y : Point,
 ~ Col C B Y ->
 Col S B C ->
 Col S Y Z ->
 parallel Y B Z C-> Z <> Y -> 
 S ** B / C ** B = S ** Y / Z ** Y.

Theorem thales_2 :
 forall S A B A' B' : Point,
 ~ Col S A A' ->
 Col S A B ->
 Col S A' B' ->
 parallel A A' B B' -> 
 S ** B / S**A  = S ** B' / S**A'.

Theorem on_line_dex_spec :
 forall P Q C D : Point, P <> Q -> {Y : Point | Col Y P Q /\ P ** Y = C ** D}.

Lemma diff_not_col_par_not_col : forall A B P Q,
 A<>B ->
 ~ Col A Q P ->
 parallel A B P Q ->
 ~ Col A B P.

Lemma two_sides_par_eq_parallelogram : 
  forall A B C D, 
  parallel A B C D ->
  ~ Col A B C ->
  A**B=D**C ->
  parallelogram A B C D.

Lemma parallel_side_eq_weak_para :   forall P Q C D,
  parallel P Q C D ->
  C <> D -> P <> D -> Q<> C ->
  P ** Q = C ** D -> 
  weak_parallelogram P Q D C.

Lemma weak_parallelogram_weak_2_parallelogram :
 forall A B C D, weak_parallelogram A B C D -> 
 weak_2_parallelogram A B  C D.

Lemma weak_2_parallelogram_weak_3_parallelogram :
 forall A B C D, weak_2_parallelogram A B C D -> 
 weak_3_parallelogram A B  C D.

Lemma weak_parallelogram_weak_3_parallelogram :
forall A B C D, weak_parallelogram A B C D -> 
 weak_3_parallelogram A B  C D.

Lemma parallelogram_weak_3_parallelogram :
  forall A B C D, parallelogram A B C D -> 
  weak_3_parallelogram A B  C D.

Lemma parallel_side_eq_weak_weak_para :   forall P Q C D,
  parallel P Q C D ->
  (P = D <-> Q = C) ->
  P ** Q = C ** D -> 
  weak_2_parallelogram P Q D C.

Lemma parallel_side_eq_weak_weak_weak_para :   forall P Q C D,
  parallel P Q C D ->
  P ** Q = C ** D -> 
  weak_3_parallelogram P Q D C.

Lemma on_line_dex_spec_strong_f :
   forall P Q C D : Point,
   parallel P Q C D -> P<>Q -> 
    exists Y : Point, Col Y P Q /\ P ** Y = C ** D /\ weak_3_parallelogram P Y D C.

Lemma on_line_dex_spec_strong_ter :
   forall P Q C D : Point,
   parallel P Q C D -> P<>Q -> 
   (P=D -> C=D) -> (Col C P Q -> P**C <> C**D) ->
    exists Y : Point, Col Y P Q /\ P ** Y = C ** D /\ weak_2_parallelogram P Y D C.

Lemma on_line_dex_spec_strong_bis :
    forall P Q C D : Point,
    parallel P Q C D ->
    C <> D ->
    P <> D -> 
    Q<> C ->
    P <> Q-> 
     (parallel P C C D -> P**C <> C**D) ->
    {Y : Point | Col Y P Q /\ P ** Y = C ** D /\ weak_parallelogram P Y D C}.

Lemma on_line_dex_spec_strong :
    forall P Q C D : Point,
    parallel P Q C D ->
    C <> D ->
    ~ Col P Q D ->
    {Y : Point | Col Y P Q /\ P ** Y = C ** D /\ parallelogram P Y D C}.

Theorem l2_15 :
  forall A B P Q : Point,
  parallel P Q A B -> ~ Col A Q P -> 
  A ** B / P ** Q = S P A B / S A Q P.

Lemma weak_3_parallelogram_weak_3_parallelogram_1 : 
  forall A B C D, 
  weak_3_parallelogram A B C D -> 
  weak_3_parallelogram B C D A.

Lemma weak_3_parallelogram_weak_3_parallelogram_2 : 
  forall A B C D, 
  weak_3_parallelogram A B C D -> 
  weak_3_parallelogram C D A B.

Lemma weak_3_parallelogram_weak_3_parallelogram_3 : 
  forall A B C D, 
  weak_3_parallelogram A B C D -> 
  weak_3_parallelogram D A B C.

Lemma weak_3_parallelogram_weak_3_parallelogram_4 : 
  forall A B C D, 
  weak_3_parallelogram A B C D -> 
  weak_3_parallelogram D C B A.

Hint Resolve 
weak_3_parallelogram_weak_3_parallelogram_1
weak_3_parallelogram_weak_3_parallelogram_2
weak_3_parallelogram_weak_3_parallelogram_3 
weak_3_parallelogram_weak_3_parallelogram_4
: Geom. *)
Require Export geometry_tools.
(* geometry_tools:
Require Export geometry_tools_lemmas.
Require Export my_field_tac.

Ltac uniformize_signed_areas_goal :=
  repeat
   match goal with
   |  |- context [(- - ?X1)] =>
       replace (- - X1) with X1 by apply simplring1
   |  |- context [(S ?X1 ?X1 ?X2)] =>
       replace (S X1 X1 X2) with 0 by apply trivial_col1
   |  |- context [(S ?X2 ?X1 ?X1)] =>
       replace (S X2 X1 X1) with 0 by apply trivial_col2
   |  |- context [(S ?X1 ?X2 ?X1)] =>
       replace (S X1 X2 X1) with 0 by apply trivial_col3
   |  |- context [(S ?X1 ?X2 ?X3)] =>
    ( let Truc := fresh in
    match goal with
       |  |- context [(S ?X4 ?X5 ?X6)] =>
            (assert (Truc : S X4 X5 X6 = - S X1 X2 X3);
             [ apply S_3 || apply S_2 || apply S_4
             | rewrite Truc; clear Truc ]) ||
             (assert (Truc : S X4 X5 X6 = S X1 X2 X3);
               [ apply S_0 || apply S_1 | rewrite Truc; clear Truc ])
       end)
   end.

Ltac generalize_all_areas :=
   repeat match goal with
          H: context [(S ?X1 ?X2 ?X3)] |- _=> revert H
 end.

Ltac uniformize_signed_areas :=
  generalize_all_areas;uniformize_signed_areas_goal;intros.

Lemma S4Simpl_1 : forall A B C : Point, S4 A B B C = S A B C.

Lemma S4Simpl_2 : forall A B C : Point, S4 A B C C = S A B C.

Lemma S4Simpl_3 : forall A B C : Point, S4 A A B C = S A B C.

Lemma S4Simpl_4 : forall A B C : Point, S4 A B C A = S A B C.

Lemma S4Simpl_5 : forall A C D : Point, S4 C A D A = 0.

Lemma S4Simpl_6 : forall A C D : Point, S4 A C A D = 0.

Lemma half : 1- 1/2 = 1/2.

Ltac uniformize_signed_areas4_goal :=
  repeat
   match goal with
   |  |- context [(- - ?X1)] =>      
       replace (- - X1) with X1; [ idtac | apply simplring1 ]
   |  |- context [(S4 ?X1 ?X2 ?X1 ?X3)] =>
	rewrite (S4Simpl_6 X1 X2 X3)
   |  |- context [(S4 ?X2 ?X1 ?X3 ?X1)] =>
        rewrite (S4Simpl_5 X1 X2 X3)
   |  |- context [(S4 ?X1 ?X2 ?X2 ?X3)] =>
        rewrite (S4Simpl_1 X1 X2 X3)
   |  |- context [(S4 ?X1 ?X2 ?X3 ?X3)] =>
        rewrite (S4Simpl_2 X1 X2 X3)
   |  |- context [(S4 ?X1 ?X1 ?X2 ?X3)] =>
        rewrite (S4Simpl_3 X1 X2 X3)
   |  |- context [(S4 ?X1 ?X2 ?X3 ?X1)] =>
        rewrite (S4Simpl_4 X1 X2 X3)
   |  |- context [(S4 ?X1 ?X2 ?X3 ?X4)] =>
       match goal with
       |  |- context [(S4 ?X5 ?X6 ?X7 ?X8)] =>
           (assert (Truc : S4 X5 X6 X7 X8 = - S4 X1 X2 X3 X4);
             [ apply S4_5 || apply S4_6 || apply S4_7 || apply S4_8
             | rewrite Truc; clear Truc ]) ||
             (assert (Truc : S4 X5 X6 X7 X8 = S4 X1 X2 X3 X4);
               [ apply S4_2 || apply S4_3 || apply S4_4
               | rewrite Truc; clear Truc ])
       end
   end.

Ltac generalize_all_areas4 :=
   repeat match goal with
          H: context [(S4 ?X1 ?X2 ?X3 ?X4)] |- _=> revert H
 end.

Ltac uniformize_signed_areas4 :=
  generalize_all_areas4;uniformize_signed_areas4_goal;intros.

Ltac uniformize_dir_seg_goal :=
  repeat
   match goal with
   |  |- context [(- - ?X1)] =>
       replace (- - X1) with X1; [ idtac | apply simplring1 ]
   |  |- context [(?X1 ** ?X1)] =>
       rewrite <- (nuldirseg X1)
   |  |- context [(?X1 ** ?X2)] =>
       match goal with
       |  |- context [(?X3 ** ?X4)] =>
           match constr:((X3, X4)) with
           | (?X2, ?X1) => rewrite (A1a X1 X2)
           end
       end
   end.

Ltac generalize_all_seg :=
   repeat match goal with
          H: context [(?X1 ** ?X2)] |- _=> revert H
 end.

Ltac uniformize_dir_seg_general :=
  generalize_all_seg;uniformize_dir_seg_goal;intros.

Ltac try_rw A B := try rewrite <- (A1a B A) in *;
                   try rewrite    (A1a A B) in *.

Ltac uniformize_dir_seg_spec := match reverse goal with

 | [A : Point, B : Point, C : Point, 
    D : Point, E : Point, F : Point,
    G : Point |- _ ] => fail 1

 | [A : Point, B : Point, C : Point, D: Point, E: Point, F: Point |- _ ] => 
     try_rw A B; try_rw A C; try_rw A D; try_rw A E; try_rw A F; 
     try_rw B C; try_rw B D; try_rw B E; try_rw B F;
     try_rw C D; try_rw C E; try_rw C F;
     try_rw D E; try_rw D F;
     try_rw E F

 | [A : Point, B : Point, C : Point, D: Point, E: Point |- _ ] => 
     try_rw A B; try_rw A C; try_rw A D; try_rw A E; 
     try_rw B C; try_rw B D; try_rw B E;
     try_rw C D; try_rw C E;
     try_rw D E

 | [A : Point, B : Point, C : Point, D: Point |- _ ] => 
     try_rw A B; try_rw A C; try_rw A D; try_rw B C; try_rw B D; try_rw C D

 | [A : Point, B : Point, C : Point |- _ ] => 
     try_rw A B; try_rw A C;try_rw B C

 | [A : Point, B : Point |- _ ] => 
     try_rw A B
end.
 
Ltac uniformize_dir_seg := uniformize_dir_seg_spec || uniformize_dir_seg_general.

Lemma test_uniformize_dir_seg_1 : forall A B,
A ** B = - B**A.

Lemma test_uniformize_dir_seg_2 : forall A B,
A ** B = - B**A ->
A ** B = - B**A.

Lemma test_uniformize_dir_seg_3 : forall A B C,
A ** B = - B**A + A**C + C**A + B**C + C**A ->
A ** B = - B**A.

Lemma test_uniformize_dir_seg_4 : forall A B C D,
A ** B = - B**A + A**C + C**A + B**C + C**A + D**A + A**D->
A ** B = - B**A.

Lemma test_uniformize_dir_seg_5 : forall A B C D, forall  E F G H I : Point,
A ** B = - B**A + A**C + C**A + B**C + C**A + D**A + A**D->
A ** B = - B**A.

Hint Rewrite S4Simpl_1  S4Simpl_2 S4Simpl_3 S4Simpl_4 S4Simpl_5 S4Simpl_6 : S4_simplifications.
Hint Rewrite <- trivial_col1: S_simplifications.
Hint Rewrite <- trivial_col2: S_simplifications.
Hint Rewrite <- trivial_col3: S_simplifications.
Hint Rewrite <- nuldirseg : seg_simplifications.
Hint Rewrite half  : seg_simplifications.

Ltac basic_non_field_simpl:= autorewrite with ring_simplification 
                               S4_simplifications 
                             S_simplifications
          seg_simplifications in *.

Ltac basic_simpl := repeat (progress (basic_non_field_simpl;basic_field_simpl)). *)

Theorem non_zero_denom_on_line_area : forall A B C : Point, on_line A B C -> B <> C.
unfold on_line in |- *.
Proof.
intuition.
Qed.

Theorem non_zero_denom_inter_ll_area :
 forall A B C D E : Point, inter_ll A B C D E -> S4 B D C E <> 0.
Proof.
unfold inter_ll in |- *.
unfold parallel in |- *.
intuition.
Qed.

Theorem non_zero_denom_on_parallel_d_area : forall A B C D : Point, on_parallel A B C D -> C <> D.
Proof.
unfold on_parallel in |- *.
intuition.
Qed.

Theorem non_zero_denom_on_inter_line_parallel_area :
 forall A B C D E G : Point, on_inter_line_parallel A B C D E G -> S4 E C G D <> 0.
Proof.
unfold on_inter_line_parallel in |- *.
unfold parallel in |- *.
intuition.
Qed.

Theorem non_zero_denom_on_inter_parallel_parallel_area :
 forall A B C D E G H : Point, on_inter_parallel_parallel A B C D E G H -> S4 C G D H <> 0.
Proof with Geometry.
unfold on_inter_parallel_parallel in |- *.
unfold parallel in |- *.
intros.
assert (S4 G C H D = - S4 C G D H)...
rewrite H1 in H0.
intuition.
Qed.

Theorem elim_area_on_line_d :
 forall (A B P Q Y : Point) (lambda : F),
 on_line_d Y P Q lambda -> S A B Y = lambda * S A B Q + (1 - lambda) * S A B P.
Proof with Geometry.
intros.
unfold on_line_d in *.
DecompAndAll.
RewriteVar lambda H3...
clear H3.
assert (1 - P ** Y / P ** Q = Y ** Q / P ** Q)...
assert (Y ** P + P ** Q = Y ** Q)...
rewrite <- H1...
assert (P ** Y = - Y ** P)...
rewrite H3; field...
rewrite H1...
replace (S A B Y) with (S Y A B)...
replace (S A B Q) with (S Q A B)...
replace (S A B P) with (S P A B)...
apply l2_9...
Qed.

Theorem elim_area_on_line :
 forall A B P Q Y : Point,
 on_line Y P Q ->
 S A B Y = P ** Y / P ** Q * S A B Q + (1 - P ** Y / P ** Q) * S A B P.
Proof with Geometry.
intros.
assert (on_line_d Y P Q (P ** Y / P ** Q)).
apply on_line_to_on_line_d...
apply elim_area_on_line_d...
Qed.

Theorem elim_area_inter_ll :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V ->
 S A B Y = 1 / S4 P U Q V * (S P U V * S A B Q + S Q V U * S A B P). 
Proof with Geometry.
intros.
unfold inter_ll in *.
DecompAndAll.
assert (P <> Q);eauto with Geom.
assert (S Y A B = P ** Y / P ** Q * S Q A B + Y ** Q / P ** Q * S P A B)...
apply l2_9...
unfold parallel in H3.
assert (P ** Y / P ** Q = S P U V / S4 P U Q V)...
assert (Q ** Y / P ** Q = S Q U V / S4 P U Q V)...
replace (Q**Y) with (- Y**Q) in H5.
2:symmetry;Geometry.
uniformize_signed_areas.
IsoleVar (Y ** Q) H5...
rewrite H1.
rewrite H4.
rewrite H5.
field...
Qed.

Theorem elim_area_on_parallel_d :
 forall (A B P Q R Y : Point) (lambda : F),
 on_parallel_d Y R P Q lambda -> 
 S A B Y = S A B R + lambda * S4 A P B Q. 
Proof with Geometry.
intros.
unfold on_parallel_d in H.
DecompAndAll.

cases_equality R Y.
subst R;basic_simpl.
IsoleVar lambda H3...
assert (lambda = 0).
rewrite H3.
field...
rewrite H1.
ring.

assert (parallel R Y P Q)...

assert (Th := on_line_dex_spec_strong_f R Y P Q H1 H)...
DecompExAnd Th T.
assert (R <> T).
unfold not;intro;subst R;basic_simpl...

assert (S A B Y = lambda * S A B T + (1 - lambda) * S A B R).
apply elim_area_on_line_d.
rewrite <- H7 in H3.
unfold on_line_d in *...

assert (S R A B + S Q A B = S T A B + S P A B).
apply l2_11a_strong_strong_strong...
IsoleVar (S T A B) H9.
uniformize_signed_areas.
rewrite H9 in H6.
replace (S4 A P B Q) with (S Q A B - S P A B).
rewrite H6;ring.
unfold S4 in |- *;uniformize_signed_areas;ring.
Qed.

Theorem elim_area_on_parallel :
 forall A B P Q R Y : Point,
 on_parallel Y R P Q -> 
 S A B Y = S A B R + R ** Y / P ** Q * S4 A P B Q.
Proof with auto.
intros. 
assert (on_parallel_d Y R P Q (R ** Y / P ** Q)).
apply on_parallel_to_on_parallel_d...
apply elim_area_on_parallel_d...
Qed.

Lemma parallel_transitivity : forall A B C D E F, 
  C<> D -> 
  parallel A B C D -> 
  parallel C D E F -> 
  parallel A B E F.
Proof.
intros.

cases_equality A B.

subst;Geometry.

assert (on_parallel E F C D).
unfold on_parallel;intuition Geometry.
assert (on_parallel_d E F C D (F ** E / C ** D)).
apply on_parallel_to_on_parallel_d.
assumption.
set (F ** E / C ** D).
unfold parallel,S4.
replace (S A E B) with (S B A E) by Geometry.
assert (T: S B A E = S B A F + f * S4 B C A D). 
apply (elim_area_on_parallel_d B A C D F E).
auto.
rewrite T.
unfold S4.
replace (S B C A) with (S A B C) by Geometry.
assert (on_parallel_d C D A B ( D ** C / A ** B)). 
unfold on_parallel_d.
repeat split;Geometry.
field;Geometry.
set (D ** C / A ** B).
replace (S A B C) with (S A B D + f0 * S4 A A B B).
basic_simpl.
uniformize_signed_areas.
ring.
symmetry.
apply elim_area_on_parallel_d.
assumption.
Qed.

Lemma elim_area_on_inter_line_parallel :
    forall P Q R U V Y A B : Point,
    on_inter_line_parallel Y R U V P Q ->
    R <>Y ->
    S A B Y = (S4 P U Q R * S A B V - S4 P V Q R * S A B U) / S4 P U Q V.
Proof with Geometry.
intros.
unfold on_inter_line_parallel in H.
DecompAndAll.
assert (P<>Q);eauto with Geom.
assert (parallel R Y P Q)...

assert (~ Col R Y Q).
eapply diff_not_col_par_not_col.
2:apply H1.
auto.
Geometry.

assert (Th:= (on_line_dex_spec_strong R Y P Q H4 H H6)).
DecompExAnd Th T.
assert (R<>T).
unfold not;intro;subst T.
basic_simpl...

assert  (~ parallel U V T R).
unfold not;intro.
unfold parallelogram in *.
DecompAndAll.
assert (parallel T R P Q)...
assert (parallel U V P Q).
eapply parallel_transitivity.
apply H7.
Geometry.
Geometry.
intuition.

assert ((S A B Y) =  1 / (S4 U T V R) * ((S U T R)*(S A B V) + (S V R T)*(S A B U))). 
apply elim_area_inter_ll...
unfold inter_ll...

assert ((S4 U R V T) = (S4 U P V Q)).
apply l2_11b...
assert ((S U R T) = (S4 U P R Q)).
apply l2_12b...
assert ((S V R T) = (S4 V P R Q)).
apply l2_12b...

rewrite H12.

replace (S4 P U Q V) with (- S4 U P V Q)...
rewrite <- H13.
replace (S4 U R V T) with (- S4 U T V R)...
replace  (S U T R) with (- S U R T)...
rewrite H14.
rewrite H15.
replace (S4 V P R Q) with (- S4 P V Q R)...
replace (S4 U P R Q) with (- S4 P U Q R)...
field.
assert (S4 U T V R<>0)...
Qed.

