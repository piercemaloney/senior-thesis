
Require Export area_coords_constructions.
(* area_coords_constructions:
Require Export pythagoras_difference_lemmas.

Definition a_ratio A O U V ro ru rv := 
 ~ Col O U V /\ 
 S A U V / S O U V = ro /\
 S O A V / S O U V = ru /\
 S O U A / S O U V = rv.

Definition is_centroid G A B C :=  a_ratio G A B C (1/(2+1)) (1/(2+1)) (1/(2+1)).

Definition is_orthocenter' H A B C := 
  a_ratio H A B C (Py A B C * Py A C B / ((2*2*2*2) * (S A B C * S A B C)))
                            (Py B A C * Py B C A / ((2*2*2*2) * (S A B C * S A B C)))
                            (Py C A B * Py C B A / ((2*2*2*2) * (S A B C * S A B C))).

Definition is_orthocenter H A B C := 
 a_ratio H A B C 
        (Py A B C * Py A C B / (Py A B A * Py A C A - Py B A C * Py B A C))
        (Py B A C * Py B C A / (Py A B A * Py A C A - Py B A C * Py B A C))
        (Py C A B * Py C B A / (Py A B A * Py A C A - Py B A C * Py B A C)).

Lemma is_orthocenter_non_zero' : forall H A B C,
 is_orthocenter H A B C -> 
 (2*2*2*2) * (S A B C * S A B C) <> 0.

Lemma is_orthocenter_non_zero : forall H A B C,
 is_orthocenter H A B C -> 
 (Py A B A * Py A C A - Py B A C * Py B A C) <> 0.

Lemma is_orthocenter_equiv : forall H A B C, 
 is_orthocenter' H A B C <-> is_orthocenter H A B C.

Definition is_circumcenter' O A B C := 
  a_ratio O A B C (Py B C B * Py B A C / ((2*2*2*2*2) * (S A B C * S A B C)))
                            (Py A C A * Py A B C / ((2*2*2*2*2) * (S A B C * S A B C)))
                           (Py A B A * Py A C B / ((2*2*2*2*2) * (S A B C * S A B C))).

Definition is_circumcenter O A B C := 
  a_ratio O A B C (Py B C B * Py B A C / (2*(Py A B A * Py A C A - Py B A C * Py B A C)))
                            (Py A C A * Py A B C /(2*(Py A B A * Py A C A - Py B A C * Py B A C)))
                           (Py A B A * Py A C B / (2*(Py A B A * Py A C A - Py B A C * Py B A C))).

Lemma is_circumcenter_non_zero' : forall H A B C,
 is_circumcenter H A B C -> 
 (2*2*2*2*2) * (S A B C * S A B C) <> 0.

Lemma is_circumcenter_non_zero : forall H A B C,
 is_circumcenter H A B C -> 
 2*(Py A B A * Py A C A - Py B A C * Py B A C) <> 0.

Lemma is_circumcenter_equiv : forall H A B C, 
 is_circumcenter' H A B C <-> is_circumcenter H A B C.

Definition is_Lemoine L A B C :=
 a_ratio L A B C (Py B C B / (Py A B A + Py B C B + Py A C A))
                 (Py A C A / (Py A B A + Py B C B + Py A C A))
                 (Py A B A / (Py A B A + Py B C B + Py A C A)). *)

Lemma elim_py_a_ratio_right : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py A B Y = ro * Py A B O + ru * Py A B U + rv * Py A B V.
Proof.
Admitted.

Lemma elim_signed_area_a_ratio : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 S A B Y = ro * S A B O + ru * S A B U + rv * S A B V.
Proof.
intros.
Admitted.

Lemma elim_py_a_ratio_middle : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py A Y B = ro * Py A O B + ru * Py A U B + rv * Py A V B 
     - ro*ru*Py O U O - ro*ru*Py O V O - ru*rv * Py U V U.
Proof.
intros.
Admitted.

Lemma elim_py_a_ratio_left_right : forall Y O U V A ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py Y A Y = ro * (ro * Py O A O + ru * Py O A U + rv * Py O A V) +
                   ru * (ro * Py U A O + ru * Py U A U + rv * Py U A V) +
                   rv * (ro * Py V A O + ru * Py V A U + rv * Py V A V).
Proof.
intros.
rewrite (elim_py_a_ratio_right  Y O U V Y A ro ru rv H).
replace (Py Y A O) with (Py O A Y) by auto with Geom.
replace (Py Y A U) with (Py U A Y) by auto with Geom.
replace (Py Y A V) with (Py V A Y) by auto with Geom.
rewrite (elim_py_a_ratio_right  Y O U V O A ro ru rv H).
rewrite (elim_py_a_ratio_right  Y O U V U A ro ru rv H).
rewrite (elim_py_a_ratio_right  Y O U V V A ro ru rv H).
auto.
Qed.

