
Require Export ratios_elimination_lemmas.
(* ratios_elimination_lemmas:
Require Export area_elimination_lemmas.

Theorem non_zero_denom_on_line_d_1_length_ratio :
 forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P<>Q.

Theorem non_zero_denom_on_line_d_1_length_ratio_seg :
 forall (Y P Q : Point) (l : F), on_line_d Y P Q l -> P**Q <> 0.

Theorem non_zero_denom_on_line_1_length_ratio :
 forall (Y P Q : Point), on_line Y P Q -> P<>Q.

Theorem non_zero_denom_on_line_1_length_ratio_seg :
 forall (Y P Q : Point), on_line Y P Q -> P**Q <> 0.

Theorem elim_length_ratio_on_line_d_1 :
 forall (A C D P Q Y : Point) (lambda : F),
 on_line_d Y P Q lambda ->
 S A P Q = 0 ->
 C <> D -> 
 A ** Y / C ** D = (A ** P / P ** Q + lambda) / (C ** D / P ** Q).

Theorem elim_length_ratio_on_line_1 :
 forall (A C D P Q Y : Point),
 on_line Y P Q ->
 S A P Q = 0 ->
 C <> D -> 
 A ** Y / C ** D = (A ** P / P ** Q + P**Y/P**Q) / (C ** D / P ** Q).

Lemma
  invariant_par_on_line_d_1_length_ratio :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda -> S A P Q = 0 -> 
    parallel A Y C D -> parallel A P P Q.

Lemma
  invariant_par_on_line_1_length_ratio :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> S A P Q = 0 -> 
    parallel A Y C D -> parallel A P P Q.

Lemma
  invariant_par_on_line_d_1_length_ratio_2 :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda -> S A P Q = 0 -> A<>Y -> 
parallel A Y C D -> parallel C D P Q.

Lemma invariant_par_on_line_1_length_ratio_2 :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> S A P Q = 0 -> Y<>A -> 
parallel A Y C D -> parallel C D P Q.

Lemma invariant_par_on_line_1_length_ratio_3 :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> S A P Q = 0 -> 
    parallel A Y C D -> parallel P Y P Q.

Lemma invariant_par_on_line_d_1_length_ratio_3 :
    forall (A C D P Q Y : Point) (lambda:F),
    on_line_d Y P Q lambda -> S A P Q = 0 -> 
    parallel A Y C D -> parallel P Y P Q.

Lemma non_zero_denom_on_line_d_2_length_ratio :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda -> 
    S A P Q <> 0 -> 
    parallel A Y C D ->
    C<>D -> 
    S4 C P D Q <> 0.

Lemma non_zero_denom_on_line_2_length_ratio :
    forall (A C D P Q Y : Point),
    on_line Y P Q -> 
    S A P Q <> 0 -> 
    parallel A Y C D -> 
    C <> D ->
    S4 C P D Q <> 0.

Lemma elim_length_ratio_on_line_d_2 :
    forall (A C D P Q Y : Point) (lambda : F),
    on_line_d Y P Q lambda ->
    S A P Q <> 0 ->
    C <> D -> 
    parallel A Y C D ->
    A ** Y / C ** D = S A P Q / S4 C P D Q.

Lemma elim_length_ratio_on_line_2 :
    forall (A C D P Q Y : Point),
    on_line Y P Q ->
    ~ Col A P Q ->
    C <> D -> parallel A Y C D -> 
   A ** Y / C ** D = S A P Q / S4 C P D Q.

Lemma non_zero_denom_inter_ll_1_length_ratio :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V -> 
    S A U V <> 0 -> 
    parallel A Y C D -> 
    C <> D ->
    S4 C U D V <> 0.

Lemma elim_length_ratio_inter_ll_1 :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V ->
    S A U V <> 0 -> 
    C <> D -> 
    parallel A Y C D -> 
    A ** Y / C ** D = S A U V / S4 C U D V.

Lemma non_zero_denom_inter_ll_2_length_ratio :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V -> 
    S A U V = 0 ->
    C<>D ->
    A<>Y ->
    parallel A Y C D ->
    S4 C P D Q <> 0.

Lemma elim_length_ratio_inter_ll_2 :
    forall A C D U V P Q Y : Point,
    inter_ll Y P Q U V ->
    S A U V = 0 ->
    C <> D ->
    parallel A Y C D ->
    A<>Y ->
    A ** Y / C ** D = S A P Q / S4 C P D Q.

Lemma non_zero_denom_on_parallel_d_1_length_ratio :
    forall (A C D P Q R Y : Point) (l : F),
    on_parallel_d Y R P Q l ->
    S A R Y = 0 -> 
    P <> Q.

Lemma non_zero_denom_on_parallel_d_2_length_ratio :
    forall (A C D P Q R Y : Point) (l : F),
    on_parallel_d Y R P Q l ->
    parallel A Y C D ->
    C <> D ->
    S A R Y <> 0 -> 
    S4 C P D Q <> 0.

Lemma lambda_zero_on_parallel_d : forall Y R P Q lambda,
   on_parallel_d Y R P Q lambda -> 
   (R=Y <-> lambda = 0).

Lemma invariant_par_on_parallel_d_1_length_ratio :
    forall (A C D P Q R Y : Point) (lambda : F),
    on_parallel_d Y R P Q lambda -> 
    S A R Y = 0 -> 
    R <> Y -> 
    parallel A Y C D -> 
    parallel A R P Q.

Lemma invariant_par_on_parallel_d_1_length_ratio_2 :
    forall (A C D P Q R Y : Point) (lambda : F),
    on_parallel_d Y R P Q lambda -> 
    S A R Y = 0 -> 
    R<>Y ->
    A<>Y ->
    parallel A Y C D -> 
    parallel C D P Q.

Theorem elim_length_ratio_on_parallel_d_1 :
 forall (A C D P Q R Y : Point) (lambda : F),
 on_parallel_d Y R P Q lambda ->
 S A R Y = 0 ->
 C <> D ->
 A ** Y / C ** D = (A ** R / P ** Q + lambda) / (C ** D / P ** Q).

Lemma elim_length_ratio_on_parallel_d_2 :
    forall (A C D P Q R Y : Point) (lambda : F),
    on_parallel_d Y R P Q lambda ->
    ~ Col A R Y ->
    C <> D -> 
    parallel A Y C D -> 
    A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

Lemma elim_area_on_inter_parallel_parallel :
    forall P Q R U V W Y A B : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    R <> Y ->
    S A B Y = S4 P W Q R / S4 P U Q V * S4 A U B V + S A B W.

Lemma elim_area_on_inter_parallel_parallel_RY :
    forall P Q R U V W Y A B : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    R = Y ->
    S A B Y = S A B W +
(W ** R / P ** Q + R ** Y / P ** Q) / (U ** V / P ** Q) * S4 A U B V.

Lemma elim_length_ratio_on_inter_line_parallel_1 :
    forall A C D U V R P Q Y : Point,
    on_inter_line_parallel Y R U V P Q ->
    S A U V <> 0->
    C <> D -> 
    parallel A Y C D -> 
    A ** Y / C ** D = S A U V / S4 C U D V.

Lemma elim_length_ratio_on_inter_line_parallel_2 :
    forall A C D U V R P Q Y : Point,
    on_inter_line_parallel Y R U V P Q ->
    S A U V = 0 ->
    C <> D -> 
    Y <> A ->
    Y <> R ->
    parallel A Y C D -> 
    A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

Lemma elim_length_ratio_on_inter_parallel_parallel_1 :
    forall A C D P Q R U V W Y : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    ~ parallel A Y P Q ->
    Y <> R ->
    C <> D -> parallel A Y C D -> A ** Y / C ** D = S4 A P R Q / S4 C P D Q.

Lemma elim_length_ratio_on_inter_parallel_parallel_2 :
    forall A C D P Q R U V W Y : Point,
    on_inter_parallel_parallel Y R P Q W U V ->
    parallel A Y P Q ->
    Y <> A ->
    C <> D ->
    Y <> W ->
    parallel A Y C D ->
    A ** Y / C ** D = S4 A U W V / S4 C U D V.

Theorem aux_co_side_1 :
   forall A B P Q M : Point, 
   Q <> M -> 
   inter_ll M A B P Q -> 
   S Q A B <> 0.

Hint Resolve aux_co_side_1: Geom.

Theorem co_side_elim_1 :
  forall A B P Q M : Point,
  Q <> M -> 
  inter_ll M A B P Q -> 
  P ** M / Q ** M = S P A B / S Q A B.

Lemma inter_ll_comm1 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P A B D C.

Lemma inter_ll_comm2 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P B A C D.

Lemma inter_ll_comm3 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P B A D C.

Lemma inter_ll_comm4 : forall P A B C D : Point, 
inter_ll P A B C D -> inter_ll P C D A B.

Hint Resolve inter_ll_comm1 inter_ll_comm2 inter_ll_comm3 inter_ll_comm4: Geom.

Theorem aux_co_side_2 :
 forall A B P Q M : Point, P <> M -> inter_ll M A B P Q -> S P A B <>0.

Theorem co_side_elim_2 : forall A B P Q M : Point,
 P <> M -> inter_ll M A B P Q -> Q ** M / P ** M = S Q A B / S P A B.

Theorem aux_co_side_3 :
 forall A B P Q M : Point, B <> M -> inter_ll M A B P Q -> S B P Q <>0.

Theorem co_side_elim_3 : forall A B P Q M : Point,
 B <> M -> inter_ll M A B P Q -> A ** M / B ** M = S A P Q / S B P Q.

Theorem aux_co_side_4 :
 forall A B P Q M : Point, A <> M -> inter_ll M A B P Q -> S A P Q <>0.

Theorem co_side_elim_4 : forall A B P Q M : Point,
 A <> M -> inter_ll M A B P Q -> B ** M / A ** M = S B P Q / S A P Q.

Lemma elim_length_ratio_inter_ll_1_spec :
 forall A C U V P Q Y : Point,
 inter_ll Y P Q U V -> S A U V <> 0 -> C <> Y -> parallel A Y C Y -> 
 A ** Y / C ** Y = S A U V / S C U V.

Lemma elim_length_ratio_inter_ll_2_spec :
 forall A C U V P Q Y : Point,
 inter_ll Y P Q U V -> S A U V = 0 -> C <> Y -> parallel A Y C Y -> A<>Y ->
 A ** Y / C ** Y = S A P Q/ S C P Q. *)
Require Export py_elimination_lemmas.
(* py_elimination_lemmas:
Require Export pythagoras_difference_lemmas.
Require Export ratios_elimination_lemmas.

Theorem elim_py_on_parallel_d_middle :
 forall (A B W U V Y : Point) (r : F),
 on_parallel_d Y W U V r -> 
 Py A Y B = Py A W B + r* (Py A V B - Py A U B  + 2* Py W U V  )-r*(1-r)*(Py U V U).

Theorem elim_py_on_parallel_d_right :
 forall (A B W U V Y : Point) (r : F),
 on_parallel_d Y W U V r -> 
 Py A B Y = Py A B W + r  * (Py A B V - Py A B U).

Theorem elim_py_on_parallel_d_left_right :
 forall (B W U V Y : Point) (r : F),
 on_parallel_d Y W U V r -> 
 Py Y B Y = Py W B W + r * r * Py V B V - 2 * r * r * Py V B U + r * r * Py U B U +
2 * r * Py V B W - 2 * r * Py U B W.

Theorem elim_py_on_line_d_right :
 forall (A B P Q Y : Point) (f : F),
 on_line_d Y P Q f ->
 Py A B Y = f * Py A B Q + (1 - f) * Py A B P.

Theorem elim_py_on_line_d_left_right :
 forall (A P Q Y : Point) (f : F),
 on_line_d Y P Q f -> Py Y A Y = f* (f * Py Q A Q + (1 - f) * Py Q A P) +
(1 - f) * (f * Py P A Q + (1 - f) * Py P A P) .

Lemma elim_py_midpoint_left_right : forall A B C M : Point, 
on_line_d M B C (1 / 2) ->
       Py M A M = - (1)/(2+2) * (Py B C B - 2* Py A C A - 2 *Py A B A).

Theorem elim_py_on_line_right :
 forall A B P Q Y : Point,
 on_line Y P Q ->
 Py A B Y = P ** Y / P ** Q * Py A B Q + (1 - P ** Y / P ** Q) * Py A B P.

Theorem elim_py_on_line_d_middle :
 forall A B P Q Y r,
 on_line_d Y P Q r ->
 Py A Y B = - Py A P B * r + Py A P B + r * r * Py Q P Q + r * Py A Q B- r * Py Q P Q .

Theorem elim_py_on_line_middle :
 forall A B P Q Y : Point,
 on_line Y P Q ->
 Py A Y B = Py A P B + P ** Y / Q ** P * (Py A P B - Py A Q B + 2* Py Q P Q) -
P ** Y / Q ** P * (1 - P ** Y / Q ** P) * Py Q P Q.

Theorem elim_py_inter_ll_right :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V ->
 Py A B Y = 1 / S4 P U Q V * (S P U V * Py A B Q + S Q V U * Py A B P).

Theorem elim_py_inter_ll_right_invariant :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V -> S4 P U Q V <> 0.

Theorem elim_py_inter_ll_left_right :
 forall B P Q U V Y : Point,
 inter_ll Y P Q U V ->
 Py Y B Y = 1 / S4 P U Q V *
(S P U V * (1 / S4 P U Q V * (S P U V * Py Q B Q + S Q V U * Py Q B P)) +
 S Q V U * (1 / S4 P U Q V * (S P U V * Py P B Q + S Q V U * Py P B P))).

Theorem elim_py_inter_ll_left_right_invariant :
 forall B P Q U V Y : Point,
 inter_ll Y P Q U V -> S4 P U Q V <> 0.

Theorem elim_py_inter_ll_middle :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V ->
 Py A Y B = - (S P V U / S4 P U Q V) * Py A Q B + - (S Q U V / S4 P U Q V) * Py A P B -
- (S P V U / S4 P U Q V) * - (S Q U V / S4 P U Q V) * Py P Q P.

Theorem elim_py_inter_ll_middle_invariant :
 forall A B P Q U V Y : Point,
 inter_ll Y P Q U V -> S4  P U Q V <> 0.

Theorem elim_py_on_foot_right :
 forall A B P U V Y : Point,
 on_foot Y P U V ->
 Py A B Y = (Py P U V * Py A B V + Py P V U * Py A B U) / (Py U V U).

Theorem elim_py_on_foot_left_right :
 forall B P U V Y : Point,
 on_foot Y P U V ->
 Py Y B Y = 
 (Py P U V * Py P U V * Py V B V + Py P U V * Py P V U * Py V B U +
 Py P U V * Py P V U * Py U B V + Py P V U * Py P V U * Py U B U) / (Py U V U *  Py U V U).

Theorem elim_py_on_foot_left_right_invariant :
forall B P U V Y : Point,
 on_foot Y P U V -> (Py U V U *  Py U V U) <> 0.

Theorem elim_py_on_foot_right_invariant :
 forall A B P U V Y : Point,
 on_foot Y P U V -> Py U V U <> 0.

Theorem elim_py_on_foot_middle :
 forall A B P U V Y : Point,
 on_foot Y P U V ->
 Py A Y B = (Py P U V / Py U V U) * Py A V B + 
                  (Py P V U) / (Py  U V U) * Py A U B - 
                  (Py P U V * Py P V U) / Py U V U.

Theorem elim_py_on_foot_middle_invariant :
 forall A B P U V Y : Point,
 on_foot Y P U V -> Py U V U <> 0.

Theorem elim_py_on_perp_d_right :
forall A B P Q Y : Point, forall r: F,
on_perp_d Y P Q r ->
Py A B Y = Py A B P - (2+2) * r * S4 P A Q B.

Theorem elim_py_on_perp_d_middle :
forall A B U V Y : Point, forall r: F,
on_perp_d Y U V r ->
Py A Y B = Py A U B + r * r * Py U V U - (2+2)*r*(S A U V + S B U V).

Theorem elim_area_on_perp_d :
forall A B U V Y : Point, forall r: F,
on_perp_d Y U V r ->
S A B Y = S A B U - r / (2+2)  * Py4 U A V B.

Theorem elim_py_on_perp_d_left_right :
forall B U V Y : Point, forall r: F,
on_perp_d Y U V r ->
Py Y B Y = Py U B U - (2 + 2) * r * S U V B -
(2 + 2) * r * (0 - r / (2 + 2) * Py U V U + S U V B).

Theorem elim_area_on_foot :
forall A B P U V Y : Point,
 on_foot Y P U V ->
 S A B Y = (Py P U V * S A B V + Py P V U * S A B U) / (Py U V U).

Theorem elim_area_on_foot_invariant :
forall A B P U V Y : Point,
 on_foot Y P U V ->
 Py U V U <> 0.

Theorem elim_ratio_on_foot_a :
forall Y P U V A C D : Point,
on_foot Y P U V ->
Col A U V ->
parallel A Y C D ->
C <> D ->
A <> Y ->
A**Y / C**D = Py4 P C A D / Py C D C.

Theorem elim_ratio_on_foot_a_invariant : forall C D,
C<>D -> Py C D C <> 0.

Theorem elim_ratio_on_foot_spec_a :
forall Y P U V A C D : Point,
on_foot Y P U V ->
Col A U V ->
parallel A Y C Y ->
C <> Y ->
A <> Y ->
A**Y / C**Y = (Py P U V * Py4 P C A V + Py P V U * Py4 P C A U) /
(Py P U V * Py C V C + Py P V U * Py C U C - Py P U V * Py P V U).

Theorem elim_ratio_on_foot_b :
forall Y P U V A C D : Point,
on_foot Y P U V ->
~ Col A U V ->
parallel A Y C D ->
C <> D ->
A**Y / C**D = S A U V / S4 C U D V.

Theorem elim_ratio_on_foot_spec_b :
forall Y P U V A C : Point,
on_foot Y P U V ->
~ Col A U V ->
parallel A Y C Y ->
C <> Y ->
A**Y / C**Y = S A U V / S C U V.

Theorem elim_ratio_on_foot_b_invariant :
forall Y P U V A C D : Point,
on_foot Y P U V ->
~ Col A U V ->
parallel A Y C D ->
C<>D ->
S4 C U D V <> 0.

Theorem elim_ratio_on_perp_d_a_invariant :
  forall Y P Q A C D : Point, forall r: F,
  on_perp_d Y P Q r->
  Col A P Y  ->
  parallel A Y C D ->
  A<>Y ->
  C<>D ->
  S4 C P D Q <> 0.

Theorem elim_ratio_on_perp_d_a_aux :
 forall Y P Q A C D : Point, forall r: F,
on_perp_d Y P Q r->
Col A P Y  ->
parallel A Y C D ->
C<>D ->
A<>Y ->
A<>P ->
A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).

Theorem elim_ratio_on_perp_d_a :
 forall Y P Q A C D : Point, forall r: F,
on_perp_d Y P Q r->
Col A P Y  ->
parallel A Y C D ->
C<>D ->
A<>Y ->
A**Y / C**D = (S A P Q -r/(2+2) * Py P Q P)/(S4 C P D Q).

Theorem elim_ratio_on_perp_d_spec_a :
 forall Y P Q A C : Point, forall r: F,
on_perp_d Y P Q r->
Col A P Y  ->
parallel A Y C Y ->
C<>Y ->
A<>Y ->
A**Y / C**Y = (S A P Q - r / (2 + 2) * Py P Q P) /
(S Q C P -r/(2+2) * Py P Q P).

Lemma elim_ratio_on_perp_d_b_auxi : 
  forall A Y C D P Q : Point, 
  on_parallel_d Y A C D 1 ->
  Py C P Q - Py D P Q = Py A P Q - Py Y P Q.

Theorem elim_ratio_on_perp_d_b_aux :
 forall Y P Q A C D : Point, forall r: F,
 on_perp_d Y P Q r->
 ~ Col A P Y  ->
 parallel A Y C D ->
 C<>D -> C**D <>A**Y ->
 A**Y / C**D = Py A P Q / Py4 C P D Q.

Theorem elim_ratio_on_perp_d_b_invariant :
 forall Y P Q A C D : Point, forall r: F,
 on_perp_d Y P Q r ->
 ~ Col A P Y ->
 parallel A Y C D ->
 C<>D ->
 Py4 C P D Q <> 0.

Theorem elim_ratio_on_perp_d_b :
 forall Y P Q A C D : Point, forall r: F,
 on_perp_d Y P Q r->
 ~ Col A P Y  ->
 parallel A Y C D ->
 C<>D ->
 A**Y / C**D = Py A P Q / Py4 C P D Q.

Theorem elim_ratio_on_perp_d_spec_b :
 forall Y P Q A C : Point, forall r: F,
 on_perp_d Y P Q r->
 ~ Col A P Y  ->
 parallel A Y C Y ->
 C<>Y ->
 A**Y / C**Y = Py A P Q / Py C P Q. *)
Require Export area_coords_elimination.
(* area_coords_elimination:
Require Export area_coords_constructions.

Lemma elim_py_a_ratio_right : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py A B Y = ro * Py A B O + ru * Py A B U + rv * Py A B V.

Lemma elim_signed_area_a_ratio : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 S A B Y = ro * S A B O + ru * S A B U + rv * S A B V.

Lemma elim_py_a_ratio_middle : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py A Y B = ro * Py A O B + ru * Py A U B + rv * Py A V B 
     - ro*ru*Py O U O - ro*ru*Py O V O - ru*rv * Py U V U.

Lemma elim_py_a_ratio_left_right : forall Y O U V A ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py Y A Y = ro * (ro * Py O A O + ru * Py O A U + rv * Py O A V) +
                   ru * (ro * Py U A O + ru * Py U A U + rv * Py U A V) +
                   rv * (ro * Py V A O + ru * Py V A U + rv * Py V A V). *)
Require Export elimination_prepare.
(* elimination_prepare:
Require Export area_elimination_lemmas.
Require Export py_elimination_lemmas.

Lemma  col_decS : forall A B C:Point, S A B C = 0 \/ S A B C <>0.

Ltac named_cases_colS A B C H := elim (col_decS A B C);intro H.

Ltac test_col A B C Tac1 Tac2 := 
 match goal with 
| HCol : S A B C = 0 |- _ => Tac1 HCol
| HCol : S A B C <>0 |- _ => Tac2 HCol
| _ => let HCol := fresh in 
      (named_cases_colS A B C HCol;
   [ Tac1 HCol | Tac2 HCol])
end.

Ltac test_parallel A B C D Tac1 Tac2 := 
 match goal with 
| HPar : parallel A B C D |- _ => Tac1 HPar
| HPar : ~ parallel A B C D |- _ => Tac2 HPar
| _ => let HPar := fresh in 
      (named_cases_parallel A B C D HPar;
   [ Tac1 HPar | Tac2 HPar])
end.

Ltac test_equality A B Tac1 Tac2 := 
 match goal with 
| H : A = B |- _ => Tac1 H
| H : A<>B |- _ => Tac2 H
| _ => let H := fresh in 
      (named_cases_equality A B H;
   [ Tac1 H | Tac2 H])
end.

Ltac invdiffhyp A B :=
  let H := HypOfType (A <> B) in
  let Hnew := fresh in
  (assert (Hnew := ldiff A B H); clear H).

Ltac put_on_the_right_areas P :=
  repeat match goal with
    | |- context[S P ?X1 ?X2] => 
         rewrite (S_1 P X1 X2) in *
    | |- context[S ?X1 P ?X2] => 
         rewrite (S_0 X1 P X2) in *
end.

Ltac put_on_the_right_pys P :=
  repeat match goal with
    | |- context[Py ?A P ?A] => rewrite (pyth_simpl_4 A P) in *	
    | |- context[Py P ?X1 ?X2] => rewrite (pyth_sym P X1 X2) in * 
end.

Ltac changeparhyp A B C D lpar :=
  let Hpar := HypOfType (parallel A B C D) in
  let HparNew := fresh in
  (assert (HparNew := lpar A B C D Hpar); clear Hpar).

Ltac put_on_the_right_ratios Y :=
  repeat match goal with
  |_:_ |- context [(?X5 ** Y / Y ** ?X7)] =>
      replace (X5 ** Y / Y ** X7) with (- (X5 ** Y / X7 ** Y));
       [ changeparhyp X5 Y Y X7 lpar1; invdiffhyp Y X7
       | symmetry  in |- *; apply dirseg_4; Geometry ]
  | _:_ |- context [(Y ** ?X5 / ?X7 ** Y)] =>
      replace (Y ** X5 / X7 ** Y) with (- (X5 ** Y / X7 ** Y));
       [ changeparhyp Y X5 X7 Y lpar2
       | symmetry  in |- *; apply dirseg_4; Geometry ]
  | _:_ |- context [(Y ** ?X5 / ?X6 ** ?X7)] =>
      replace (Y ** X5 / X6 ** X7) with (X5 ** Y / X7 ** X6);
       [ changeparhyp Y X5 X6 X7 lpar3; invdiffhyp X6 X7 | Geometry ]
  | _:_ |- context [(?X5 ** ?X6 / Y ** ?X7)] =>
      replace (X5 ** X6 / Y ** X7) with (X6 ** X5 / X7 ** Y);
       [ changeparhyp X5 X6 Y X7 lpar3; invdiffhyp Y X7 | Geometry ]
end.   

Ltac case_equal X5 X6 X7 Y Heq := rewrite Heq in *.

Lemma invariant_inverse_ratio : forall A B C D,
 A<>B -> C<>D -> C**D/ A**B <> 0.

Ltac case_not_equal X5 X6 X7 Y Heq :=
 let T:= fresh in
  assert (T:X7**Y/X5**X6 <> 0);[apply (invariant_inverse_ratio X5 X6 X7 Y );try assumption|idtac];
 (replace (X5**X6 / X7**Y) with (1/(X7**Y / X5 ** X6));[changeparhyp X5 X6 X7 Y par_2|symmetry;apply inverse_ratio;Geometry]).

Ltac put_on_the_upper_right_ratios Y :=
 repeat match goal with
   |_:_ |- context [(?X5 ** Y / ?X6 ** Y)] => fail 1
   |_:_ |- context [(?X5 ** ?X6 / ?X7**Y)] => 
          test_equality X5 X6 ltac:(case_equal X5 X6 X7 Y) ltac:(case_not_equal X5 X6 X7 Y)
end.    

Ltac unify_signed_areas_point P :=
  repeat
   match goal with
   |  |- context [(S ?X1 ?X1 ?X2)] =>
       replace (S X1 X1 X2) with 0; [ idtac | apply trivial_col1 ]
   |  |- context [(S ?X2 ?X1 ?X1)] =>
       replace (S X2 X1 X1) with 0; [ idtac | apply trivial_col2 ]
   |  |- context [(S ?X1 ?X2 ?X1)] =>
       replace (S X1 X2 X1) with 0; [ idtac | apply trivial_col3 ]
   |  |- context [(S ?X1 ?X2 P)] =>
    ( let Truc := fresh in
    match goal with
       |  |- context [(S ?X4 ?X5 P)] =>
            (assert (Truc : S X4 X5 P = - S X1 X2 P);
             [ apply S_3 || apply S_2 || apply S_4
             | rewrite Truc in *; clear Truc ]) ||
             (assert (Truc : S X4 X5 P = S X1 X2 P);
               [ apply S_0 || apply S_1 | rewrite Truc in *; clear Truc ])
       end)
   end.

Ltac unify_signed_areas_and_put_on_the_right P :=
 put_on_the_right_areas P;
 put_on_the_right_pys P;
 put_on_the_right_ratios P;
 put_on_the_upper_right_ratios P;
 unify_signed_areas_point P.

Lemma test_1 : forall A B C, S A B C + S B A C = 0.

Lemma test_2 : forall Y A C D, parallel Y A C D -> C<>D -> 
 Y**A / C**D = (A**Y / D**C).

Lemma test_3 :forall Y A C D, parallel C D A Y -> A<>Y -> 
C<>D -> C**D / A**Y = 1/(A**Y / C**D).

Lemma test_4: forall A B Y, Py Y A B = Py B A Y.

Lemma test_5: forall A Y, Py Y A Y = Py Y A Y.

Lemma test_6: forall C B A E, Py B E B + Py E A C = Py E B E + Py C A E. *)
Require Export area_coords_elimination.
(* area_coords_elimination:
Require Export area_coords_constructions.

Lemma elim_py_a_ratio_right : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py A B Y = ro * Py A B O + ru * Py A B U + rv * Py A B V.

Lemma elim_signed_area_a_ratio : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 S A B Y = ro * S A B O + ru * S A B U + rv * S A B V.

Lemma elim_py_a_ratio_middle : forall Y O U V A B ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py A Y B = ro * Py A O B + ru * Py A U B + rv * Py A V B 
     - ro*ru*Py O U O - ro*ru*Py O V O - ru*rv * Py U V U.

Lemma elim_py_a_ratio_left_right : forall Y O U V A ro ru rv,
 a_ratio Y O U V ro ru rv ->
 Py Y A Y = ro * (ro * Py O A O + ru * Py O A U + rv * Py O A V) +
                   ru * (ro * Py U A O + ru * Py U A U + rv * Py U A V) +
                   rv * (ro * Py V A O + ru * Py V A U + rv * Py V A V). *)

Ltac elimi_inter_ll_col  A C D U V P Q Y H  Hdenom Hpar Hneq HCol :=  
  let T1 := fresh in 
  (assert 
  (T1 :=non_zero_denom_inter_ll_2_length_ratio  A C D U V P Q Y H HCol Hdenom Hneq Hpar);
   rewrite
             (elim_length_ratio_inter_ll_2 A C D U V P Q Y H HCol Hdenom Hpar Hneq) in *).
 
Ltac elimi_inter_ll_not_col  A C D U V P Q Y H  Hdenom Hpar HCol :=  
  let T1 := fresh in 
  (assert 
  (T1 :=non_zero_denom_inter_ll_1_length_ratio  A C D U V P Q Y H HCol Hpar Hdenom);
   rewrite
             (elim_length_ratio_inter_ll_1 A C D U V P Q Y H HCol Hdenom Hpar) in *).

Ltac elimi_inter_ll_col_spec A C D U V P Q Y H  Hdenom Hpar Hneq HCol := 
   rewrite (elim_length_ratio_inter_ll_2_spec A C U V P Q Y H HCol Hdenom Hpar Hneq) in *.

Ltac elimi_inter_ll_not_col_spec A C D U V P Q Y H  Hdenom Hpar Hneq HCol :=  
  rewrite (elim_length_ratio_inter_ll_1_spec A C U V P Q Y H HCol Hdenom Hpar) in *.
 
Ltac elimi_inter_ll_spec A C D U V P Q Y H  Hdenom Hpar Hneq :=
 test_col  A U V 
              ltac: (elimi_inter_ll_col_spec        A C D U V P Q Y H  Hdenom Hpar Hneq)
              ltac: (elimi_inter_ll_not_col_spec A C D U V P Q Y H  Hdenom Hpar Hneq).

Ltac test_equality_and_subst Hc A B Tac := 
 match goal with 
| H : A = B |- _ => rewrite <- H in *;rewrite H in Hc
| H : A<>B |- _ => Tac H
| _ => let H := fresh in 
      (named_cases_equality A B H;
   [ rewrite <- H in *; rewrite H in Hc | Tac H])
end.

Ltac test_equality_and_subst_2 Hc A B Tac Tac2 := 
 match goal with 
| H : A = B |- _ => rewrite <- H in *;try rewrite H in Hc;Tac2
| H : A<>B |- _ => Tac H
| _ => let H := fresh in 
      (named_cases_equality A B H;
   [ (rewrite <- H in *; try rewrite H in Hc;Tac2) | 
     Tac H])
end.

Ltac elimi_inter_ll_gen  P Q U V A Y C D H Hneq :=
    let Hdenom := HypOfType (C <> D) in
    let Hpar := HypOfType (parallel A Y C D) in
              test_col  A U V 
              ltac: (elimi_inter_ll_col A C D U V P Q Y H Hdenom Hpar Hneq)
              ltac: (elimi_inter_ll_not_col A C D U V P Q Y H Hdenom Hpar).

Ltac elimi_inter_ll P Q U V A Y C D H :=
  let Hi := fresh in
  (assert (Hi : C <> D); [ Geometry | idtac ];
    match constr:((A, (C, D))) with

    | (U, (V, Y)) =>
        let Hfresh := fresh in
        assert (Hfresh := aux_co_side_1 P Q U V Y Hi H);
        rewrite (co_side_elim_1 P Q U V Y  Hi H) in *;clear Hi
    | (V, (U, Y)) =>
        let Hfresh := fresh in
        assert (Hfresh := aux_co_side_2 P Q U V Y Hi H);
        rewrite (co_side_elim_2 P Q U V Y  Hi H) in *;clear Hi
    | (P, (Q, Y)) =>
        let Hfresh := fresh in
        assert (Hfresh := aux_co_side_3 P Q U V Y Hi H);
        rewrite (co_side_elim_3 P Q U V Y  Hi H) in *;clear Hi
    | (Q, (P, Y)) =>
        let Hfresh := fresh in
        assert (Hfresh := aux_co_side_4 P Q U V Y Hi H);
        rewrite (co_side_elim_4 P Q U V Y  Hi H) in *;clear Hi

   | (A,(C,Y)) => idtac "here";
              let Hdenom := HypOfType (C <> D) in
              let Hpar := HypOfType (parallel A Y C D) in
              test_equality_and_subst H A Y 
                   ltac:(elimi_inter_ll_spec  A C D U V P Q Y H  Hdenom Hpar)
         | _ =>  
         test_equality_and_subst H A Y ltac: (elimi_inter_ll_gen P Q U V A Y C D H )
   
end).

Ltac elimi_on_line_d_col_aux P Q lambda A Y C D H Hdenom Hpar HCol Hdiff :=
let T3 := fresh in (assert
            (T3 :=
             invariant_par_on_line_d_1_length_ratio_2 A C D P Q Y lambda H HCol Hdiff Hpar);
            rewrite
             (elim_length_ratio_on_line_d_1 A C D P Q Y lambda H HCol Hdenom) in *).

Ltac elimi_on_line_d_col P Q lambda A Y C D H Hdenom Hpar HCol:=
let T1 := fresh in
(assert (T1 := non_zero_denom_on_line_d_1_length_ratio Y P Q lambda H);
let T3 := fresh in
(assert (T3 := non_zero_denom_on_line_d_1_length_ratio_seg Y P Q lambda H);
let T2 := fresh in
(assert (T2 := invariant_par_on_line_d_1_length_ratio A C D P Q Y lambda H HCol Hpar);
let T4 := fresh in
(assert (T4 :=invariant_par_on_line_d_1_length_ratio_3 A C D P Q Y lambda H HCol Hpar);
test_equality_and_subst H A Y
ltac:(elimi_on_line_d_col_aux P Q lambda A Y C D H Hdenom Hpar HCol) 
  )))).
 
Ltac elimi_on_line_d_not_col  P Q lambda A Y C D H Hdenom Hpar HCol :=
let T := fresh in
      (assert (T := non_zero_denom_on_line_d_2_length_ratio A C D P Q Y lambda H HCol Hpar Hdenom));
        rewrite
         (elim_length_ratio_on_line_d_2 A C D P Q Y lambda H HCol Hdenom Hpar) in *.

Ltac elimi_on_line_d P Q lambda A Y C D H :=
  let Hdenom := HypOfType (C <> D) in
  let Hpar := HypOfType (parallel A Y C D) in
  test_col  A P Q 
  ltac: (elimi_on_line_d_col P Q lambda A Y C D H Hdenom Hpar)
  ltac: (elimi_on_line_d_not_col P Q lambda A Y C D H Hdenom Hpar).

Ltac elimi_on_parallel_d_col_aux_2 R P Q lambda A Y C D H Hdenom Hpar HCol Hneq Hneq2 :=
 let T1 := fresh in
      (assert
        (T1 := non_zero_denom_on_parallel_d_1_length_ratio A C D P Q R Y lambda H HCol);
        let T2 := fresh in
        (assert
          (T2 :=
           invariant_par_on_parallel_d_1_length_ratio A C D P Q R Y lambda H HCol Hneq Hpar);
          let T3 := fresh in
          (assert
            (T3 :=
             invariant_par_on_parallel_d_1_length_ratio_2 A C D P Q R Y lambda H HCol Hneq
             Hneq2 Hpar);
            rewrite
             (elim_length_ratio_on_parallel_d_1 A C D P Q R Y lambda H HCol Hdenom) in *))).

Ltac elimi_on_parallel_d_col_aux  R P Q lambda A Y C D H Hdenom Hpar HCol Hneq :=
  test_equality_and_subst H A Y
  ltac:(elimi_on_parallel_d_col_aux_2 R P Q lambda A Y C D H Hdenom Hpar HCol Hneq).

Ltac elimi_on_parallel_d_col R P Q lambda A Y C D H Hdenom Hpar HCol :=
   test_equality_and_subst H R Y
    ltac:(elimi_on_parallel_d_col_aux R P Q lambda A Y C D H Hdenom Hpar HCol).

Ltac elimi_on_parallel_d R P Q lambda A Y C D H :=
  let Hdenom := HypOfType (C <> D) in
  let Hpar := HypOfType (parallel A Y C D) in
  let HCol := fresh in
  (named_cases_col A R Y HCol;
    [ elimi_on_parallel_d_col R P Q lambda A Y C D H Hdenom Hpar HCol 
    | let T1 := fresh in
      (assert
        (T1 := non_zero_denom_on_parallel_d_2_length_ratio A C D P Q R Y lambda H Hpar Hdenom HCol);
        rewrite
         (elim_length_ratio_on_parallel_d_2 A C D P Q R Y lambda H HCol Hdenom Hpar) in *)  ]).

Ltac elimi_area_on_inter_line_parallel X4 X5 X1 X2 X3 Y X6 X7 H Hneq := 
assert (S4 X4 X2 X5 X3 <> 0);
       [ exact (non_zero_denom_on_inter_line_parallel_area Y X1 X2 X3 X4 X5 H) | idtac ];
       rewrite (elim_area_on_inter_line_parallel X4 X5 X1 X2 X3 Y X6 X7 H Hneq) in *.

Ltac elimi_on_foot_col_aux R P Q A Y C D H HCol HDiff :=
  rewrite (elim_ratio_on_foot_a Y R P Q A C D H HCol) in * by assumption.

Ltac elimi_on_foot_col R P Q A Y C D H HCol := 
	assert (Py C D C <> 0) by (apply (elim_ratio_on_foot_a_invariant C D);assumption);
	test_equality_and_subst H A Y 
 	ltac:(elimi_on_foot_col_aux R P Q A Y C D H HCol).

Ltac elimi_on_foot_notcol R P Q A Y C D H HCol := 
        assert (S4 C P D Q <> 0) by (apply (elim_ratio_on_foot_b_invariant Y R P Q A C D H HCol);assumption);
      
          rewrite (elim_ratio_on_foot_b Y R P Q A C D H HCol) in * by assumption.

Ltac elimi_on_foot R P Q A Y C D H := test_col  A P Q
    ltac: (elimi_on_foot_col R P Q A Y C D H)
    ltac: (elimi_on_foot_notcol R P Q A Y C D H).

Ltac elimi_on_perp_d_col  Y P Q r A C D H HCol := 
          rewrite (elim_ratio_on_perp_d_a Y P Q A C D r H HCol) in *.

Ltac elimi_on_perp_d_notcol Y P Q r A C D H HCol := idtac.

Ltac elimi_on_perp_d P Q r A Y C D H :=
   test_col A P Y
   ltac: (elimi_on_perp_d_col Y P Q r A C D H)
   ltac: (elimi_on_perp_d_notcol Y P Q r A C D H).

Ltac elimi_inter_parallel_parallel_par  Y  R P Q W U V A C D H HPar :=
 rewrite ( elim_length_ratio_on_inter_parallel_parallel_2 A C D P Q R U V W Y H HPar) by auto.

Ltac elimi_inter_parallel_parallel_notpar  Y  R P Q W U V A C D H HPar :=
 rewrite ( elim_length_ratio_on_inter_parallel_parallel_1 A C D P Q R U V W Y H HPar) by auto.

Ltac elimi_inter_parallel_parallel   Y  R P Q W U V A C D H := 
  test_parallel A Y P Q
  ltac: ( elimi_inter_parallel_parallel_par       Y  R P Q W U V A C D H)
  ltac: ( elimi_inter_parallel_parallel_notpar Y  R P Q W U V A C D H).

Ltac elimi Y :=
  match goal with
  
  | H:(on_line_d Y ?X1 ?X2 ?X3) |- context [(S ?X5 ?X6 Y)] =>
      rewrite (elim_area_on_line_d X5 X6 X1 X2 Y X3 H) in *
  | H:(inter_ll Y ?X1 ?X2 ?X3 ?X4) |- context [(S ?X5 ?X6 Y)] =>
      assert (S4 X1 X3 X2 X4 <> 0);
       [ exact (non_zero_denom_inter_ll_area Y X1 X2 X3 X4 H) | idtac ];
       rewrite (elim_area_inter_ll X5 X6 X1 X2 X3 X4 Y H) in *

  | H:(on_parallel_d Y ?X1 ?X2 ?X3 ?X4) |- context [(S ?X5 ?X6 Y)] =>
      rewrite (elim_area_on_parallel_d X5 X6 X2 X3 X1 Y X4 H) in *

 | H:(a_ratio Y ?O ?U ?V ?ro ?ru ?rv) |- context [(S ?A ?B Y)] =>
      rewrite (elim_signed_area_a_ratio Y O U V A B ro ru rv H) in *

  | H:(on_inter_line_parallel Y ?X1 ?X2 ?X3 ?X4 ?X5) |- context [(S ?X6 ?X7 Y)] =>
          test_equality_and_subst H X1 Y ltac:(elimi_area_on_inter_line_parallel X4 X5 X1 X2 X3 Y X6 X7 H )     

  | H:(on_inter_parallel_parallel Y ?X1 ?X2 ?X3 ?X4 ?X5 ?X6) |- context [(S ?X7 ?X8 Y)] =>
          let Hneq := fresh in
      (named_cases_equality X1 Y Hneq;[rewrite <- Hneq in *;rewrite Hneq in H|
       assert (S4 X2 X5 X3 X6 <> 0);
       [ exact (non_zero_denom_on_inter_parallel_parallel_area Y X1 X2 X3 X4 X5 X6 H) | idtac ];
       rewrite
        (elim_area_on_inter_parallel_parallel X2 X3 X1 X5 X6 X4 Y X7 X8 H Hneq) in *])        
        
  | H:(on_foot Y ?X1 ?X2 ?X3) |- context [(S ?A ?B Y)] =>
	let T:= fresh in assert (T:=elim_area_on_foot_invariant A B X1 X2 X3 Y H);
          rewrite (elim_area_on_foot A B X1 X2 X3 Y H) in *

  | H:(on_perp_d Y ?X1 ?X2 ?R) |- context [(S ?A ?B Y)] =>
          rewrite (elim_area_on_perp_d A B X1 X2 Y R H) in *

  | H:(on_line_d Y ?X1 ?X2 ?X3) |- context [(?X5 ** Y / ?X6 ** ?X7)] =>
      elimi_on_line_d X1 X2 X3 X5 Y X6 X7 H
  | H:(inter_ll Y ?X1 ?X2 ?X3 ?X4) |- context [(?X5 ** Y / ?X6 ** ?X7)] =>
      elimi_inter_ll X1 X2 X3 X4 X5 Y X6 X7 H
  | H:(on_parallel_d Y ?X1 ?X2 ?X3 ?X4) |- context [(?X5 ** Y / ?X6 ** ?X7)] =>
      elimi_on_parallel_d X1 X2 X3 X4 X5 Y X6 X7 H
  | H:(on_inter_line_parallel Y ?X1 ?X2 ?X3 ?X4 ?X8) |- context [(?X5 ** Y / ?X6 ** ?X7)] =>
      fail 5 "case ratio on inter line parallel"
  | H:(on_inter_parallel_parallel Y ?R ?P ?Q ?W ?U ?V) |- context [(?A ** Y / ?C ** ?D)] =>
      elimi_inter_parallel_parallel   Y  R P Q W U V A C D H

  | H:(on_foot Y ?R ?P ?Q) |- context [(?A ** Y / ?C ** ?D)] =>
      elimi_on_foot R P Q A Y C D H

  | H:(on_perp_d Y ?X1 ?X2 ?r) |- context [(?A ** Y / ?C ** ?D)] =>
      elimi_on_perp_d X1 X2 r A Y C D H

  | H:(on_line_d Y ?X1 ?X2 ?X3) |- context [Py Y ?A Y] =>
        rewrite (elim_py_on_line_d_left_right A X1 X2 Y X3 H) in *
  | H:(inter_ll Y ?X1 ?X2 ?X3 ?X4) |- context [Py Y ?A Y] =>
        let T := fresh in 
	assert (T:= elim_py_inter_ll_left_right_invariant A X1 X2 X3 X4 Y H);
	rewrite (elim_py_inter_ll_left_right A X1 X2 X3 X4 Y H)  in *
  | H:(on_parallel_d Y ?X1 ?X2 ?X3 ?X4) |- context [Py Y ?A Y] =>
        rewrite (elim_py_on_parallel_d_left_right A X1 X2 X3 Y X4 H) in *
  | H:(on_foot Y ?X1 ?X2 ?X3) |- context [Py Y ?A Y] =>
	let T := fresh in 
	assert (T:= elim_py_on_foot_left_right_invariant A X1 X2 X3 Y H);
        rewrite (elim_py_on_foot_left_right A X1 X2 X3 Y H) in * 
  | H:(on_perp_d Y ?U ?V ?r) |- context [Py Y ?A Y] =>
        rewrite (elim_py_on_perp_d_left_right A U V Y r H)  in *
  | H:(a_ratio Y ?O ?U ?V ?ro ?ru ?rv) |- context [Py Y ?A Y] =>
        rewrite (elim_py_a_ratio_left_right Y O U V A ro ru rv H)  in *

  | H:(on_line_d Y ?X1 ?X2 ?X3) |- context [Py ?A ?B Y] =>
        rewrite (elim_py_on_line_d_right  A B  X1 X2 Y X3 H) in *      
  | H:(inter_ll Y ?X1 ?X2 ?X3 ?X4) |- context [Py ?A ?B Y] =>
        let T:= fresh in 
        assert (T:=elim_py_inter_ll_right_invariant A B X1 X2 X3 X4 Y H);
        rewrite (elim_py_inter_ll_right A B X1 X2 X3 X4 Y H) in *
  | H:(on_parallel_d Y ?X1 ?X2 ?X3 ?X4) |- context [Py ?A ?B Y] =>
        rewrite (elim_py_on_parallel_d_right A B X1 X2 X3 Y X4 H) in *
  | H:(on_inter_line_parallel Y ?X1 ?X2 ?X3 ?X4 ?X8) |- context [Py ?A ?B Y] =>
        fail 5 "case py right on inter line parallel"
  | H:(on_inter_parallel_parallel Y ?X1 ?X2 ?X3 ?X4 ?X8 ?X9) |- context [Py ?A ?B Y] =>
        fail 5 "case py right on inter parallel parallel"
  | H:(on_foot Y ?X1 ?X2 ?X3) |- context [Py ?A ?B Y] =>
        let T:= fresh in 
        assert (T:=elim_py_on_foot_right_invariant A B X1 X2 X3 Y H);
        rewrite (elim_py_on_foot_right A B X1 X2 X3 Y H) in *
  | H:(on_perp_d Y ?P ?Q ?r) |- context [Py ?A ?B Y] =>
        rewrite (elim_py_on_perp_d_right A B P Q Y r H) in *
  | H:(a_ratio Y ?O ?U ?V ?ro ?ru ?rv) |- context [Py ?A ?B Y] =>
        rewrite (elim_py_a_ratio_right Y O U V A B ro ru rv H)  in *
  | H:(on_inter_line_perp Y ?X1 ?X2 ?X3 ?X4 ?X5) |- context [Py ?A ?B Y] =>
        fail 5 "case py right on inter line perp"

  | H:(on_line_d Y ?X1 ?X2 ?X3) |- context [Py ?A Y ?B] =>
	rewrite (elim_py_on_line_d_middle  A B  X1 X2 Y X3 H) in *
  | H:(inter_ll Y ?X1 ?X2 ?X3 ?X4) |- context [Py ?A Y ?B] =>
        let T:= fresh in assert (T:= elim_py_inter_ll_middle_invariant A B X1 X2 X3 X4 Y H);
        rewrite (elim_py_inter_ll_middle A B X1 X2 X3 X4 Y H) in *
  | H:(on_parallel_d Y ?X1 ?X2 ?X3 ?X4) |- context [Py ?A Y ?B] =>
        rewrite (elim_py_on_parallel_d_middle A B X1 X2 X3 Y X4 H) in *
  | H:(on_inter_line_parallel Y ?X1 ?X2 ?X3 ?X4 ?X8) |- context [Py ?A Y ?B] =>
        fail 5 "case py midlle on inter line parallel"
  | H:(on_inter_parallel_parallel Y ?X1 ?X2 ?X3 ?X4 ?X8 ?X9) |- context [Py ?A Y ?B] =>
        fail 5 "case py midlle on inter parallel parallel"
  | H:(on_foot Y ?X1 ?X2 ?X3) |- context [Py ?A Y ?B] =>
        let T:= fresh in assert (T:= elim_py_on_foot_middle_invariant A B X1 X2 X3 Y H);
        rewrite (elim_py_on_foot_middle A B X1 X2 X3 Y H) in *
  | H:(on_perp_d Y ?P ?Q ?r) |- context [Py ?A Y ?B] =>
        rewrite (elim_py_on_perp_d_middle A B P Q Y r H) in *
  | H:(a_ratio Y ?O ?U ?V ?ro ?ru ?rv) |- context [Py ?A Y ?B] =>
        rewrite (elim_py_a_ratio_middle Y O U V A B ro ru rv H)  in *
  | H:(on_inter_line_perp Y ?X1 ?X2 ?X3 ?X4 ?X5) |- context [Py ?A Y ?B] =>
        fail 5 "case py midlle on inter line perp"

   end.

Ltac ClearConstructedPointDef Y :=
  match goal with
  | H:(on_line Y _ _) |- _ => fail 5 "Please report : should have been transformed into on_line_d before"
  | H:(on_line_d Y _ _ _) |- _ => clear H
  | H:(inter_ll Y _ _ _ _) |- _ => clear H
  | H:(on_parallel Y _ _ _) |- _ =>  fail 5 "Please report : should have been transformed into on_parallel_d before"
  | H:(on_parallel_d Y _ _ _ _) |- _ => clear H
  | H:(on_inter_line_parallel Y _ _ _ _ _) |- _ => clear H
  | H:(on_inter_parallel_parallel Y _ _ _ _ _ _) |- _ => clear H
  | H:(on_foot Y _ _ _) |- _ => clear H
  | H:(on_perp Y _ _ ) |- _ => fail 5 "Please report : should have been transformed into on_perp_d before"
  | H:(on_perp_d Y _ _ _) |- _ => clear H
  | H:(on_inter_line_perp Y _ _ _ _ _) |- _ => clear H
  | H:(a_ratio Y _ _ _ _ _ _) |- _ => clear H
  end.

Ltac ClearConstructedPointNDG Y :=
  repeat
   match goal with
  | H:(parallel Y _ _ _) |- _ => clear H
  | H:(parallel _ Y _ _) |- _ => clear H
  | H:(parallel _ _ Y _) |- _ => clear H
  | H:(parallel _ _ _ Y) |- _ => clear H
  | H:(_ <> Y) |- _ => clear H
  | H:(Y <> _) |- _ => clear H
end. 

Ltac eliminate_aux Y := 
   unify_signed_areas_and_put_on_the_right Y;
   repeat elimi Y;
   CleanDuplicatedHyps;
   ClearConstructedPointDef Y.
 
Ltac is_used_to_construct A :=
  match goal with
  | H:(on_line ?X1 A _) |- _ =>
      is_used_to_construct X1
  | H:(on_line ?X1 _ A) |- _ =>
      is_used_to_construct X1

  | H:(on_line_d ?X1 A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_line_d ?X1 _ A _) |- _ =>
      is_used_to_construct X1

  | H:(inter_ll ?X1 A _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(inter_ll ?X1 _ A _ _) |- _ =>
      is_used_to_construct X1
  | H:(inter_ll ?X1 _ _ A _) |- _ =>
      is_used_to_construct X1
  | H:(inter_ll ?X1 _ _ _ A) |- _ =>
      is_used_to_construct X1

  | H:(on_parallel ?X1 A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_parallel ?X1 _ A _) |- _ =>
      is_used_to_construct X1
  | H:(on_parallel ?X1 _ _ A) |- _ =>
      is_used_to_construct X1

  | H:(on_parallel_d ?X1 A _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_parallel_d ?X1 _ A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_parallel_d ?X1 _ _ A _) |- _ =>
      is_used_to_construct X1

  | H:(on_inter_line_parallel ?X1 A _ _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_parallel ?X1 _ A _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_parallel ?X1 _ _ A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_parallel ?X1 _ _ _ A _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_parallel ?X1 _ _ _ _ A) |- _ =>
      is_used_to_construct X1

  | H:(on_inter_parallel_parallel ?X1 A _ _ _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_parallel_parallel ?X1 _ A _ _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_parallel_parallel ?X1 _ _ A _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_parallel_parallel ?X1 _ _ _ A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_parallel_parallel ?X1 _ _ _ _ A _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_parallel_parallel ?X1 _ _ _ _ _ A) |- _ =>
      is_used_to_construct X1

 | H:(on_foot ?X1 A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_foot ?X1 _ A _) |- _ =>
      is_used_to_construct X1
  | H:(on_foot ?X1 _ _ A) |- _ =>
      is_used_to_construct X1

  | H:(on_perp ?X1 A _ ) |- _ =>
      is_used_to_construct X1
  | H:(on_perp ?X1 _ A ) |- _ =>
      is_used_to_construct X1

  | H:(on_perp_d ?X1 A _ _ ) |- _ =>
      is_used_to_construct X1
  | H:(on_perp_d ?X1 _ A _ ) |- _ =>
      is_used_to_construct X1
 
  | H:(on_inter_line_perp ?X1 A _ _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_perp ?X1 _ A _ _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_perp ?X1 _ _ A _ _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_perp ?X1 _ _ _ A _) |- _ =>
      is_used_to_construct X1
  | H:(on_inter_line_perp ?X1 _ _ _ _ A) |- _ =>
      is_used_to_construct X1

  | H:(a_ratio ?Y A _ _ _ _ _) |- _ =>
      is_used_to_construct Y
  | H:(a_ratio ?Y _ A _ _ _ _) |- _ =>
      is_used_to_construct Y
  | H:(a_ratio ?Y _ _ A _ _ _) |- _ =>
      is_used_to_construct Y
  | H:(a_ratio ?Y _ _ _ A _ _) |- _ =>
      is_used_to_construct Y
  | H:(a_ratio ?Y _ _ _ _ A _) |- _ =>
      is_used_to_construct Y
  | H:(a_ratio ?Y _ _ _ _ _ A) |- _ =>
      is_used_to_construct Y

  | _ => A
  end.

Ltac check_proper_elimination A := match goal with
H:_ |- context [A] => fail 2 "Elimination failed, please report."
end || idtac.

Ltac eliminate A := idtac "   elimination of point :" A;eliminate_aux A; 
                                 unfold S4, Py4 in *; 
                                 basic_simpl; 
                                 check_proper_elimination A; try (clear A); idtac "   we need to show that:";print_goal.

Ltac Remove_last A := 
   eliminate ltac:(is_used_to_construct A).

Ltac eliminate_All :=
  repeat
   match goal with
   | H:(on_line ?X1 _ _) |- _ =>
       Remove_last X1
   | H:(on_line_d ?X1 _ _ _) |- _ =>
       Remove_last X1
   | H:(inter_ll ?X1 _ _ _ _) |- _ =>
       Remove_last X1
   | H:(on_parallel ?X1 _ _ _) |- _ =>
       Remove_last X1
   | H:(on_parallel_d ?X1 _ _ _ _) |- _ =>
       Remove_last X1
   | H:(on_inter_line_parallel ?X1 _ _ _ _ _) |- _ =>
       Remove_last X1
   | H:(on_inter_parallel_parallel ?X1 _ _ _ _ _ _) |- _ => 
       Remove_last X1
   | H:(on_foot ?X1 _ _ _) |- _ => 
       Remove_last X1
   | H:(on_perp ?X1 _ _ ) |- _ => 
       Remove_last X1
   | H:(on_perp_d ?X1 _ _ _) |- _ => 
       Remove_last X1
   | H:(on_inter_line_perp ?X1 _ _ _ _ _) |- _ => 
       Remove_last X1
   | H:(a_ratio ?X1 _ _ _ _ _ _) |- _ => 
       Remove_last X1
   end.
