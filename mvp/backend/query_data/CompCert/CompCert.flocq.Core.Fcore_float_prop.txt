

Require Import Fcore_Raux.
(* Fcore_Raux:
Require Export Reals.
Require Export ZArith.
Require Export Fcore_Zaux.

Section Rmissing.

Theorem Rle_0_minus :
  forall x y, (x <= y)%R -> (0 <= y - x)%R.

Theorem Rabs_eq_Rabs :
  forall x y : R,
  Rabs x = Rabs y -> x = y \/ x = Ropp y.

Theorem Rabs_minus_le:
  forall x y : R,
  (0 <= y)%R -> (y <= 2*x)%R ->
  (Rabs (x-y) <= x)%R.

Theorem Rplus_eq_reg_r :
  forall r r1 r2 : R,
  (r1 + r = r2 + r)%R -> (r1 = r2)%R.

Theorem Rplus_lt_reg_l :
  forall r r1 r2 : R,
  (r + r1 < r + r2)%R -> (r1 < r2)%R.

Theorem Rplus_lt_reg_r :
  forall r r1 r2 : R,
  (r1 + r < r2 + r)%R -> (r1 < r2)%R.

Theorem Rplus_le_reg_r :
  forall r r1 r2 : R,
  (r1 + r <= r2 + r)%R -> (r1 <= r2)%R.

Theorem Rmult_lt_reg_r :
  forall r r1 r2 : R, (0 < r)%R ->
  (r1 * r < r2 * r)%R -> (r1 < r2)%R.

Theorem Rmult_le_reg_r :
  forall r r1 r2 : R, (0 < r)%R ->
  (r1 * r <= r2 * r)%R -> (r1 <= r2)%R.

Theorem Rmult_lt_compat :
  forall r1 r2 r3 r4,
  (0 <= r1)%R -> (0 <= r3)%R -> (r1 < r2)%R -> (r3 < r4)%R ->
  (r1 * r3 < r2 * r4)%R.

Theorem Rmult_eq_reg_r :
  forall r r1 r2 : R, (r1 * r)%R = (r2 * r)%R ->
  r <> 0%R -> r1 = r2.

Theorem Rmult_minus_distr_r :
  forall r r1 r2 : R,
  ((r1 - r2) * r = r1 * r - r2 * r)%R.

Lemma Rmult_neq_reg_r: forall  r1 r2 r3:R, (r2 * r1 <> r3 * r1)%R -> r2 <> r3.

Lemma Rmult_neq_compat_r: forall  r1 r2 r3:R, (r1 <> 0)%R -> (r2 <> r3)%R
   -> (r2 *r1 <> r3*r1)%R.

Theorem Rmult_min_distr_r :
  forall r r1 r2 : R,
  (0 <= r)%R ->
  (Rmin r1 r2 * r)%R = Rmin (r1 * r) (r2 * r).

Theorem Rmult_min_distr_l :
  forall r r1 r2 : R,
  (0 <= r)%R ->
  (r * Rmin r1 r2)%R = Rmin (r * r1) (r * r2).

Lemma Rmin_opp: forall x y, (Rmin (-x) (-y) = - Rmax x y)%R.

Lemma Rmax_opp: forall x y, (Rmax (-x) (-y) = - Rmin x y)%R.

Theorem exp_le :
  forall x y : R,
  (x <= y)%R -> (exp x <= exp y)%R.

Theorem Rinv_lt :
  forall x y,
  (0 < x)%R -> (x < y)%R -> (/y < /x)%R.

Theorem Rinv_le :
  forall x y,
  (0 < x)%R -> (x <= y)%R -> (/y <= /x)%R.

Theorem sqrt_ge_0 :
  forall x : R,
  (0 <= sqrt x)%R.

Lemma sqrt_neg : forall x, (x <= 0)%R -> (sqrt x = 0)%R.

Theorem Rabs_le :
  forall x y,
  (-y <= x <= y)%R -> (Rabs x <= y)%R.

Theorem Rabs_le_inv :
  forall x y,
  (Rabs x <= y)%R -> (-y <= x <= y)%R.

Theorem Rabs_ge :
  forall x y,
  (y <= -x \/ x <= y)%R -> (x <= Rabs y)%R.

Theorem Rabs_ge_inv :
  forall x y,
  (x <= Rabs y)%R -> (y <= -x \/ x <= y)%R.

Theorem Rabs_lt :
  forall x y,
  (-y < x < y)%R -> (Rabs x < y)%R.

Theorem Rabs_lt_inv :
  forall x y,
  (Rabs x < y)%R -> (-y < x < y)%R.

Theorem Rabs_gt :
  forall x y,
  (y < -x \/ x < y)%R -> (x < Rabs y)%R.

Theorem Rabs_gt_inv :
  forall x y,
  (x < Rabs y)%R -> (y < -x \/ x < y)%R.

End Rmissing.

Section Z2R.

Fixpoint P2R (p : positive) :=
  match p with
  | xH => 1%R
  | xO xH => 2%R
  | xO t => (2 * P2R t)%R
  | xI xH => 3%R
  | xI t => (1 + 2 * P2R t)%R
  end.

Definition Z2R n :=
  match n with
  | Zpos p => P2R p
  | Zneg p => Ropp (P2R p)
  | Z0 => 0%R
  end.

Theorem P2R_INR :
  forall n, P2R n = INR (nat_of_P n).

Theorem Z2R_IZR :
  forall n, Z2R n = IZR n.

Theorem Z2R_opp :
  forall n, Z2R (-n) = (- Z2R n)%R.

Theorem Z2R_plus :
  forall m n, (Z2R (m + n) = Z2R m + Z2R n)%R.

Theorem minus_IZR :
  forall n m : Z,
  IZR (n - m) = (IZR n - IZR m)%R.

Theorem Z2R_minus :
  forall m n, (Z2R (m - n) = Z2R m - Z2R n)%R.

Theorem Z2R_mult :
  forall m n, (Z2R (m * n) = Z2R m * Z2R n)%R.

Theorem le_Z2R :
  forall m n, (Z2R m <= Z2R n)%R -> (m <= n)%Z.

Theorem Z2R_le :
  forall m n, (m <= n)%Z -> (Z2R m <= Z2R n)%R.

Theorem lt_Z2R :
  forall m n, (Z2R m < Z2R n)%R -> (m < n)%Z.

Theorem Z2R_lt :
  forall m n, (m < n)%Z -> (Z2R m < Z2R n)%R.

Theorem Z2R_le_lt :
  forall m n p, (m <= n < p)%Z -> (Z2R m <= Z2R n < Z2R p)%R.

Theorem le_lt_Z2R :
  forall m n p, (Z2R m <= Z2R n < Z2R p)%R -> (m <= n < p)%Z.

Theorem eq_Z2R :
  forall m n, (Z2R m = Z2R n)%R -> (m = n)%Z.

Theorem neq_Z2R :
  forall m n, (Z2R m <> Z2R n)%R -> (m <> n)%Z.

Theorem Z2R_neq :
  forall m n, (m <> n)%Z -> (Z2R m <> Z2R n)%R.

Theorem Z2R_abs :
  forall z, Z2R (Zabs z) = Rabs (Z2R z).

End Z2R.

Section Rcompare.

Definition Rcompare x y :=
  match total_order_T x y with
  | inleft (left _) => Lt
  | inleft (right _) => Eq
  | inright _ => Gt
  end.

Inductive Rcompare_prop (x y : R) : comparison -> Prop :=
  | Rcompare_Lt_ : (x < y)%R -> Rcompare_prop x y Lt
  | Rcompare_Eq_ : x = y -> Rcompare_prop x y Eq
  | Rcompare_Gt_ : (y < x)%R -> Rcompare_prop x y Gt.

Theorem Rcompare_spec :
  forall x y, Rcompare_prop x y (Rcompare x y).

Global Opaque Rcompare.

Theorem Rcompare_Lt :
  forall x y,
  (x < y)%R -> Rcompare x y = Lt.

Theorem Rcompare_Lt_inv :
  forall x y,
  Rcompare x y = Lt -> (x < y)%R.

Theorem Rcompare_not_Lt :
  forall x y,
  (y <= x)%R -> Rcompare x y <> Lt.

Theorem Rcompare_not_Lt_inv :
  forall x y,
  Rcompare x y <> Lt -> (y <= x)%R.

Theorem Rcompare_Eq :
  forall x y,
  x = y -> Rcompare x y = Eq.

Theorem Rcompare_Eq_inv :
  forall x y,
  Rcompare x y = Eq -> x = y.

Theorem Rcompare_Gt :
  forall x y,
  (y < x)%R -> Rcompare x y = Gt.

Theorem Rcompare_Gt_inv :
  forall x y,
  Rcompare x y = Gt -> (y < x)%R.

Theorem Rcompare_not_Gt :
  forall x y,
  (x <= y)%R -> Rcompare x y <> Gt.

Theorem Rcompare_not_Gt_inv :
  forall x y,
  Rcompare x y <> Gt -> (x <= y)%R.

Theorem Rcompare_Z2R :
  forall x y, Rcompare (Z2R x) (Z2R y) = Zcompare x y.

Theorem Rcompare_sym :
  forall x y,
  Rcompare x y = CompOpp (Rcompare y x).

Theorem Rcompare_plus_r :
  forall z x y,
  Rcompare (x + z) (y + z) = Rcompare x y.

Theorem Rcompare_plus_l :
  forall z x y,
  Rcompare (z + x) (z + y) = Rcompare x y.

Theorem Rcompare_mult_r :
  forall z x y,
  (0 < z)%R ->
  Rcompare (x * z) (y * z) = Rcompare x y.

Theorem Rcompare_mult_l :
  forall z x y,
  (0 < z)%R ->
  Rcompare (z * x) (z * y) = Rcompare x y.

Theorem Rcompare_middle :
  forall x d u,
  Rcompare (x - d) (u - x) = Rcompare x ((d + u) / 2).

Theorem Rcompare_half_l :
  forall x y, Rcompare (x / 2) y = Rcompare x (2 * y).

Theorem Rcompare_half_r :
  forall x y, Rcompare x (y / 2) = Rcompare (2 * x) y.

Theorem Rcompare_sqr :
  forall x y,
  (0 <= x)%R -> (0 <= y)%R ->
  Rcompare (x * x) (y * y) = Rcompare x y.

Theorem Rmin_compare :
  forall x y,
  Rmin x y = match Rcompare x y with Lt => x | Eq => x | Gt => y end.

End Rcompare.

Section Rle_bool.

Definition Rle_bool x y :=
  match Rcompare x y with
  | Gt => false
  | _ => true
  end.

Inductive Rle_bool_prop (x y : R) : bool -> Prop :=
  | Rle_bool_true_ : (x <= y)%R -> Rle_bool_prop x y true
  | Rle_bool_false_ : (y < x)%R -> Rle_bool_prop x y false.

Theorem Rle_bool_spec :
  forall x y, Rle_bool_prop x y (Rle_bool x y).

Theorem Rle_bool_true :
  forall x y,
  (x <= y)%R -> Rle_bool x y = true.

Theorem Rle_bool_false :
  forall x y,
  (y < x)%R -> Rle_bool x y = false.

End Rle_bool.

Section Rlt_bool.

Definition Rlt_bool x y :=
  match Rcompare x y with
  | Lt => true
  | _ => false
  end.

Inductive Rlt_bool_prop (x y : R) : bool -> Prop :=
  | Rlt_bool_true_ : (x < y)%R -> Rlt_bool_prop x y true
  | Rlt_bool_false_ : (y <= x)%R -> Rlt_bool_prop x y false.

Theorem Rlt_bool_spec :
  forall x y, Rlt_bool_prop x y (Rlt_bool x y).

Theorem negb_Rlt_bool :
  forall x y,
  negb (Rle_bool x y) = Rlt_bool y x.

Theorem negb_Rle_bool :
  forall x y,
  negb (Rlt_bool x y) = Rle_bool y x.

Theorem Rlt_bool_true :
  forall x y,
  (x < y)%R -> Rlt_bool x y = true.

Theorem Rlt_bool_false :
  forall x y,
  (y <= x)%R -> Rlt_bool x y = false.

End Rlt_bool.

Section Req_bool.

Definition Req_bool x y :=
  match Rcompare x y with
  | Eq => true
  | _ => false
  end.

Inductive Req_bool_prop (x y : R) : bool -> Prop :=
  | Req_bool_true_ : (x = y)%R -> Req_bool_prop x y true
  | Req_bool_false_ : (x <> y)%R -> Req_bool_prop x y false.

Theorem Req_bool_spec :
  forall x y, Req_bool_prop x y (Req_bool x y).

Theorem Req_bool_true :
  forall x y,
  (x = y)%R -> Req_bool x y = true.

Theorem Req_bool_false :
  forall x y,
  (x <> y)%R -> Req_bool x y = false.

End Req_bool.

Section Floor_Ceil.

Definition Zfloor (x : R) := (up x - 1)%Z.

Theorem Zfloor_lb :
  forall x : R,
  (Z2R (Zfloor x) <= x)%R.

Theorem Zfloor_ub :
  forall x : R,
  (x < Z2R (Zfloor x) + 1)%R.

Theorem Zfloor_lub :
  forall n x,
  (Z2R n <= x)%R ->
  (n <= Zfloor x)%Z.

Theorem Zfloor_imp :
  forall n x,
  (Z2R n <= x < Z2R (n + 1))%R ->
  Zfloor x = n.

Theorem Zfloor_Z2R :
  forall n,
  Zfloor (Z2R n) = n.

Theorem Zfloor_le :
  forall x y, (x <= y)%R ->
  (Zfloor x <= Zfloor y)%Z.

Definition Zceil (x : R) := (- Zfloor (- x))%Z.

Theorem Zceil_ub :
  forall x : R,
  (x <= Z2R (Zceil x))%R.

Theorem Zceil_glb :
  forall n x,
  (x <= Z2R n)%R ->
  (Zceil x <= n)%Z.

Theorem Zceil_imp :
  forall n x,
  (Z2R (n - 1) < x <= Z2R n)%R ->
  Zceil x = n.

Theorem Zceil_Z2R :
  forall n,
  Zceil (Z2R n) = n.

Theorem Zceil_le :
  forall x y, (x <= y)%R ->
  (Zceil x <= Zceil y)%Z.

Theorem Zceil_floor_neq :
  forall x : R,
  (Z2R (Zfloor x) <> x)%R ->
  (Zceil x = Zfloor x + 1)%Z.

Definition Ztrunc x := if Rlt_bool x 0 then Zceil x else Zfloor x.

Theorem Ztrunc_Z2R :
  forall n,
  Ztrunc (Z2R n) = n.

Theorem Ztrunc_floor :
  forall x,
  (0 <= x)%R ->
  Ztrunc x = Zfloor x.

Theorem Ztrunc_ceil :
  forall x,
  (x <= 0)%R ->
  Ztrunc x = Zceil x.

Theorem Ztrunc_le :
  forall x y, (x <= y)%R ->
  (Ztrunc x <= Ztrunc y)%Z.

Theorem Ztrunc_opp :
  forall x,
  Ztrunc (- x) = Zopp (Ztrunc x).

Theorem Ztrunc_abs :
  forall x,
  Ztrunc (Rabs x) = Zabs (Ztrunc x).

Theorem Ztrunc_lub :
  forall n x,
  (Z2R n <= Rabs x)%R ->
  (n <= Zabs (Ztrunc x))%Z.

Definition Zaway x := if Rlt_bool x 0 then Zfloor x else Zceil x.

Theorem Zaway_Z2R :
  forall n,
  Zaway (Z2R n) = n.

Theorem Zaway_ceil :
  forall x,
  (0 <= x)%R ->
  Zaway x = Zceil x.

Theorem Zaway_floor :
  forall x,
  (x <= 0)%R ->
  Zaway x = Zfloor x.

Theorem Zaway_le :
  forall x y, (x <= y)%R ->
  (Zaway x <= Zaway y)%Z.

Theorem Zaway_opp :
  forall x,
  Zaway (- x) = Zopp (Zaway x).

Theorem Zaway_abs :
  forall x,
  Zaway (Rabs x) = Zabs (Zaway x).

End Floor_Ceil.

Section Zdiv_Rdiv.

Theorem Zfloor_div :
  forall x y,
  y <> Z0 ->
  Zfloor (Z2R x / Z2R y) = (x / y)%Z.

End Zdiv_Rdiv.

Section pow.

Variable r : radix.

Theorem radix_pos : (0 < Z2R r)%R.

Definition bpow e :=
  match e with
  | Zpos p => Z2R (Zpower_pos r p)
  | Zneg p => Rinv (Z2R (Zpower_pos r p))
  | Z0 => 1%R
  end.

Theorem Z2R_Zpower_pos :
  forall n m,
  Z2R (Zpower_pos n m) = powerRZ (Z2R n) (Zpos m).

Theorem bpow_powerRZ :
  forall e,
  bpow e = powerRZ (Z2R r) e.

Theorem  bpow_ge_0 :
  forall e : Z, (0 <= bpow e)%R.

Theorem bpow_gt_0 :
  forall e : Z, (0 < bpow e)%R.

Theorem bpow_plus :
  forall e1 e2 : Z, (bpow (e1 + e2) = bpow e1 * bpow e2)%R.

Theorem bpow_1 :
  bpow 1 = Z2R r.

Theorem bpow_plus1 :
  forall e : Z, (bpow (e + 1) = Z2R r * bpow e)%R.

Theorem bpow_opp :
  forall e : Z, (bpow (-e) = /bpow e)%R.

Theorem Z2R_Zpower_nat :
  forall e : nat,
  Z2R (Zpower_nat r e) = bpow (Z_of_nat e).

Theorem Z2R_Zpower :
  forall e : Z,
  (0 <= e)%Z ->
  Z2R (Zpower r e) = bpow e.

Theorem bpow_lt :
  forall e1 e2 : Z,
  (e1 < e2)%Z -> (bpow e1 < bpow e2)%R.

Theorem lt_bpow :
  forall e1 e2 : Z,
  (bpow e1 < bpow e2)%R -> (e1 < e2)%Z.

Theorem bpow_le :
  forall e1 e2 : Z,
  (e1 <= e2)%Z -> (bpow e1 <= bpow e2)%R.

Theorem le_bpow :
  forall e1 e2 : Z,
  (bpow e1 <= bpow e2)%R -> (e1 <= e2)%Z.

Theorem bpow_inj :
  forall e1 e2 : Z,
  bpow e1 = bpow e2 -> e1 = e2.

Theorem bpow_exp :
  forall e : Z,
  bpow e = exp (Z2R e * ln (Z2R r)).

Record ln_beta_prop x := {
  ln_beta_val :> Z ;
  _ : (x <> 0)%R -> (bpow (ln_beta_val - 1)%Z <= Rabs x < bpow ln_beta_val)%R
}.

Definition ln_beta :
  forall x : R, ln_beta_prop x.

Theorem bpow_lt_bpow :
  forall e1 e2,
  (bpow (e1 - 1) < bpow e2)%R ->
  (e1 <= e2)%Z.

Theorem bpow_unique :
  forall x e1 e2,
  (bpow (e1 - 1) <= x < bpow e1)%R ->
  (bpow (e2 - 1) <= x < bpow e2)%R ->
  e1 = e2.

Theorem ln_beta_unique :
  forall (x : R) (e : Z),
  (bpow (e - 1) <= Rabs x < bpow e)%R ->
  ln_beta x = e :> Z.

Theorem ln_beta_opp :
  forall x,
  ln_beta (-x) = ln_beta x :> Z.

Theorem ln_beta_abs :
  forall x,
  ln_beta (Rabs x) = ln_beta x :> Z.

Theorem ln_beta_unique_pos :
  forall (x : R) (e : Z),
  (bpow (e - 1) <= x < bpow e)%R ->
  ln_beta x = e :> Z.

Theorem ln_beta_le_abs :
  forall x y,
  (x <> 0)%R -> (Rabs x <= Rabs y)%R ->
  (ln_beta x <= ln_beta y)%Z.

Theorem ln_beta_le :
  forall x y,
  (0 < x)%R -> (x <= y)%R ->
  (ln_beta x <= ln_beta y)%Z.

Lemma ln_beta_lt_pos :
  forall x y,
  (0 < y)%R ->
  (ln_beta x < ln_beta y)%Z -> (x < y)%R.

Theorem ln_beta_bpow :
  forall e, (ln_beta (bpow e) = e + 1 :> Z)%Z.

Theorem ln_beta_mult_bpow :
  forall x e, x <> 0%R ->
  (ln_beta (x * bpow e) = ln_beta x + e :>Z)%Z.

Theorem ln_beta_le_bpow :
  forall x e,
  x <> 0%R ->
  (Rabs x < bpow e)%R ->
  (ln_beta x <= e)%Z.

Theorem ln_beta_gt_bpow :
  forall x e,
  (bpow e <= Rabs x)%R ->
  (e < ln_beta x)%Z.

Theorem ln_beta_ge_bpow :
  forall x e,
  (bpow (e - 1) <= Rabs x)%R ->
  (e <= ln_beta x)%Z.

Theorem bpow_ln_beta_gt :
  forall x,
  (Rabs x < bpow (ln_beta x))%R.

Theorem bpow_ln_beta_le :
  forall x, (x <> 0)%R ->
    (bpow (ln_beta x-1) <= Rabs x)%R.

Theorem ln_beta_le_Zpower :
  forall m e,
  m <> Z0 ->
  (Zabs m < Zpower r e)%Z->
  (ln_beta (Z2R m) <= e)%Z.

Theorem ln_beta_gt_Zpower :
  forall m e,
  m <> Z0 ->
  (Zpower r e <= Zabs m)%Z ->
  (e < ln_beta (Z2R m))%Z.

Lemma ln_beta_mult :
  forall x y,
  (x <> 0)%R -> (y <> 0)%R ->
  (ln_beta x + ln_beta y - 1 <= ln_beta (x * y) <= ln_beta x + ln_beta y)%Z.

Lemma ln_beta_plus :
  forall x y,
  (0 < y)%R -> (y <= x)%R ->
  (ln_beta x <= ln_beta (x + y) <= ln_beta x + 1)%Z.

Lemma ln_beta_minus :
  forall x y,
  (0 < y)%R -> (y < x)%R ->
  (ln_beta (x - y) <= ln_beta x)%Z.

Lemma ln_beta_minus_lb :
  forall x y,
  (0 < x)%R -> (0 < y)%R ->
  (ln_beta y <= ln_beta x - 2)%Z ->
  (ln_beta x - 1 <= ln_beta (x - y))%Z.

Lemma ln_beta_div :
  forall x y : R,
  (0 < x)%R -> (0 < y)%R ->
  (ln_beta x - ln_beta y <= ln_beta (x / y) <= ln_beta x - ln_beta y + 1)%Z.

Lemma ln_beta_sqrt :
  forall x,
  (0 < x)%R ->
  (2 * ln_beta (sqrt x) - 1 <= ln_beta x <= 2 * ln_beta (sqrt x))%Z.

End pow.

Section Bool.

Theorem eqb_sym :
  forall x y, Bool.eqb x y = Bool.eqb y x.

Theorem eqb_false :
  forall x y, x = negb y -> Bool.eqb x y = false.

Theorem eqb_true :
  forall x y, x = y -> Bool.eqb x y = true.

End Bool.

Section cond_Ropp.

Definition cond_Ropp (b : bool) m := if b then Ropp m else m.

Theorem Z2R_cond_Zopp :
  forall b m,
  Z2R (cond_Zopp b m) = cond_Ropp b (Z2R m).

Theorem abs_cond_Ropp :
  forall b m,
  Rabs (cond_Ropp b m) = Rabs m.

Theorem cond_Ropp_Rlt_bool :
  forall m,
  cond_Ropp (Rlt_bool m 0) m = Rabs m.

Theorem cond_Ropp_involutive :
  forall b x,
  cond_Ropp b (cond_Ropp b x) = x.

Theorem cond_Ropp_even_function :
  forall {A : Type} (f : R -> A),
  (forall x, f (Ropp x) = f x) ->
  forall b x, f (cond_Ropp b x) = f x.

Theorem cond_Ropp_odd_function :
  forall (f : R -> R),
  (forall x, f (Ropp x) = Ropp (f x)) ->
  forall b x, f (cond_Ropp b x) = cond_Ropp b (f x).

Theorem cond_Ropp_inj :
  forall b x y,
  cond_Ropp b x = cond_Ropp b y -> x = y.

Theorem cond_Ropp_mult_l :
  forall b x y,
  cond_Ropp b (x * y) = (cond_Ropp b x * y)%R.

Theorem cond_Ropp_mult_r :
  forall b x y,
  cond_Ropp b (x * y) = (x * cond_Ropp b y)%R.

Theorem cond_Ropp_plus :
  forall b x y,
  cond_Ropp b (x + y) = (cond_Ropp b x + cond_Ropp b y)%R.

End cond_Ropp.

Theorem LPO_min :
  forall P : nat -> Prop, (forall n, P n \/ ~ P n) ->
  {n : nat | P n /\ forall i, (i < n)%nat -> ~ P i} + {forall n, ~ P n}.

Theorem LPO :
  forall P : nat -> Prop, (forall n, P n \/ ~ P n) ->
  {n : nat | P n} + {forall n, ~ P n}.

Lemma LPO_Z : forall P : Z -> Prop, (forall n, P n \/ ~P n) ->
  {n : Z| P n} + {forall n, ~ P n}.

Ltac bpow_simplify :=
  
  repeat
    match goal with
      | |- context [(bpow _ _ * bpow _ _)] =>
        rewrite <- bpow_plus
      | |- context [(?X1 * bpow _ _ * bpow _ _)] =>
        rewrite (Rmult_assoc X1); rewrite <- bpow_plus
      | |- context [(?X1 * (?X2 * bpow _ _) * bpow _ _)] =>
        rewrite <- (Rmult_assoc X1 X2); rewrite (Rmult_assoc (X1 * X2));
        rewrite <- bpow_plus
    end;
  
  repeat
    match goal with
      | |- context [(bpow _ ?X)] =>
        progress ring_simplify X
    end;
  
  change (bpow _ 0) with 1;
  repeat
    match goal with
      | |- context [(_ * 1)] =>
        rewrite Rmult_1_r
    end. *)

Require Import Fcore_defs.
(* Fcore_defs:
Require Import Fcore_Raux.

Section Def.

Record float (beta : radix) := Float { Fnum : Z ; Fexp : Z }.

Arguments Fnum {beta} f.
Arguments Fexp {beta} f.

Variable beta : radix.

Definition F2R (f : float beta) :=
  (Z2R (Fnum f) * bpow beta (Fexp f))%R.

Definition round_pred_total (P : R -> R -> Prop) :=
  forall x, exists f, P x f.

Definition round_pred_monotone (P : R -> R -> Prop) :=
  forall x y f g, P x f -> P y g -> (x <= y)%R -> (f <= g)%R.

Definition round_pred (P : R -> R -> Prop) :=
  round_pred_total P /\
  round_pred_monotone P.

End Def.

Arguments Fnum {beta} f.
Arguments Fexp {beta} f.
Arguments F2R {beta} f.

Section RND.

Definition Rnd_DN_pt (F : R -> Prop) (x f : R) :=
  F f /\ (f <= x)%R /\
  forall g : R, F g -> (g <= x)%R -> (g <= f)%R.

Definition Rnd_DN (F : R -> Prop) (rnd : R -> R) :=
  forall x : R, Rnd_DN_pt F x (rnd x).

Definition Rnd_UP_pt (F : R -> Prop) (x f : R) :=
  F f /\ (x <= f)%R /\
  forall g : R, F g -> (x <= g)%R -> (f <= g)%R.

Definition Rnd_UP (F : R -> Prop) (rnd : R -> R) :=
  forall x : R, Rnd_UP_pt F x (rnd x).

Definition Rnd_ZR_pt (F : R -> Prop) (x f : R) :=
  ( (0 <= x)%R -> Rnd_DN_pt F x f ) /\
  ( (x <= 0)%R -> Rnd_UP_pt F x f ).

Definition Rnd_ZR (F : R -> Prop) (rnd : R -> R) :=
  forall x : R, Rnd_ZR_pt F x (rnd x).

Definition Rnd_N_pt (F : R -> Prop) (x f : R) :=
  F f /\
  forall g : R, F g -> (Rabs (f - x) <= Rabs (g - x))%R.

Definition Rnd_N (F : R -> Prop) (rnd : R -> R) :=
  forall x : R, Rnd_N_pt F x (rnd x).

Definition Rnd_NG_pt (F : R -> Prop) (P : R -> R -> Prop) (x f : R) :=
  Rnd_N_pt F x f /\
  ( P x f \/ forall f2 : R, Rnd_N_pt F x f2 -> f2 = f ).

Definition Rnd_NG (F : R -> Prop) (P : R -> R -> Prop) (rnd : R -> R) :=
  forall x : R, Rnd_NG_pt F P x (rnd x).

Definition Rnd_NA_pt (F : R -> Prop) (x f : R) :=
  Rnd_N_pt F x f /\
  forall f2 : R, Rnd_N_pt F x f2 -> (Rabs f2 <= Rabs f)%R.

Definition Rnd_NA (F : R -> Prop) (rnd : R -> R) :=
  forall x : R, Rnd_NA_pt F x (rnd x).

End RND. *)



Section Float_prop.



Variable beta : radix.



Notation bpow e := (bpow beta e).



Theorem Rcompare_F2R :

  forall e m1 m2 : Z,

  Rcompare (F2R (Float beta m1 e)) (F2R (Float beta m2 e)) = Zcompare m1 m2.

Proof.

intros e m1 m2.

unfold F2R. simpl.

rewrite Rcompare_mult_r.

apply Rcompare_Z2R.

apply bpow_gt_0.

Qed.



Theorem F2R_le_reg :

  forall e m1 m2 : Z,

  (F2R (Float beta m1 e) <= F2R (Float beta m2 e))%R ->

  (m1 <= m2)%Z.

Proof.

intros e m1 m2 H.

apply le_Z2R.

apply Rmult_le_reg_r with (bpow e).

apply bpow_gt_0.

exact H.

Qed.



Theorem F2R_le_compat :

  forall m1 m2 e : Z,

  (m1 <= m2)%Z ->

  (F2R (Float beta m1 e) <= F2R (Float beta m2 e))%R.

Proof.

intros m1 m2 e H.

unfold F2R. simpl.

apply Rmult_le_compat_r.

apply bpow_ge_0.

now apply Z2R_le.

Qed.



Theorem F2R_lt_reg :

  forall e m1 m2 : Z,

  (F2R (Float beta m1 e) < F2R (Float beta m2 e))%R ->

  (m1 < m2)%Z.

Proof.

intros e m1 m2 H.

apply lt_Z2R.

apply Rmult_lt_reg_r with (bpow e).

apply bpow_gt_0.

exact H.

Qed.



Theorem F2R_lt_compat :

  forall e m1 m2 : Z,

  (m1 < m2)%Z ->

  (F2R (Float beta m1 e) < F2R (Float beta m2 e))%R.

Proof.

intros e m1 m2 H.

unfold F2R. simpl.

apply Rmult_lt_compat_r.

apply bpow_gt_0.

now apply Z2R_lt.

Qed.



Theorem F2R_eq_compat :

  forall e m1 m2 : Z,

  (m1 = m2)%Z ->

  (F2R (Float beta m1 e) = F2R (Float beta m2 e))%R.

Proof.

intros e m1 m2 H.

now apply (f_equal (fun m => F2R (Float beta m e))).

Qed.



Theorem F2R_eq_reg :

  forall e m1 m2 : Z,

  F2R (Float beta m1 e) = F2R (Float beta m2 e) ->

  m1 = m2.

Proof.

intros e m1 m2 H.

apply Zle_antisym ;

  apply F2R_le_reg with e ;

  rewrite H ;

  apply Rle_refl.

Qed.



Theorem F2R_Zabs:

  forall m e : Z,

   F2R (Float beta (Zabs m) e) = Rabs (F2R (Float beta m e)).

Proof.

intros m e.

unfold F2R.

rewrite Rabs_mult.

rewrite <- Z2R_abs.

simpl.

apply f_equal.

apply sym_eq; apply Rabs_right.

apply Rle_ge.

apply bpow_ge_0.

Qed.



Theorem F2R_Zopp :

  forall m e : Z,

  F2R (Float beta (Zopp m) e) = Ropp (F2R (Float beta m e)).

Proof.

intros m e.

unfold F2R. simpl.

rewrite <- Ropp_mult_distr_l_reverse.

now rewrite Z2R_opp.

Qed.



Theorem F2R_0 :

  forall e : Z,

  F2R (Float beta 0 e) = 0%R.

Proof.

intros e.

unfold F2R. simpl.

apply Rmult_0_l.

Qed.



Theorem F2R_eq_0_reg :

  forall m e : Z,

  F2R (Float beta m e) = 0%R ->

  m = Z0.

Proof.

intros m e H.

apply F2R_eq_reg with e.

now rewrite F2R_0.

Qed.



Theorem F2R_ge_0_reg :

  forall m e : Z,

  (0 <= F2R (Float beta m e))%R ->

  (0 <= m)%Z.

Proof.

intros m e H.

apply F2R_le_reg with e.

now rewrite F2R_0.

Qed.



Theorem F2R_le_0_reg :

  forall m e : Z,

  (F2R (Float beta m e) <= 0)%R ->

  (m <= 0)%Z.

Proof.

intros m e H.

apply F2R_le_reg with e.

now rewrite F2R_0.

Qed.



Theorem F2R_gt_0_reg :

  forall m e : Z,

  (0 < F2R (Float beta m e))%R ->

  (0 < m)%Z.

Proof.

intros m e H.

apply F2R_lt_reg with e.

now rewrite F2R_0.

Qed.



Theorem F2R_lt_0_reg :

  forall m e : Z,

  (F2R (Float beta m e) < 0)%R ->

  (m < 0)%Z.

Proof.

intros m e H.

apply F2R_lt_reg with e.

now rewrite F2R_0.

Qed.



Theorem F2R_ge_0_compat :

  forall f : float beta,

  (0 <= Fnum f)%Z ->

  (0 <= F2R f)%R.

Proof.

intros f H.

rewrite <- F2R_0 with (Fexp f).

now apply F2R_le_compat.

Qed.



Theorem F2R_le_0_compat :

  forall f : float beta,

  (Fnum f <= 0)%Z ->

  (F2R f <= 0)%R.

Proof.

intros f H.

rewrite <- F2R_0 with (Fexp f).

now apply F2R_le_compat.

Qed.



Theorem F2R_gt_0_compat :

  forall f : float beta,

  (0 < Fnum f)%Z ->

  (0 < F2R f)%R.

Proof.

intros f H.

rewrite <- F2R_0 with (Fexp f).

now apply F2R_lt_compat.

Qed.



Theorem F2R_lt_0_compat :

  forall f : float beta,

  (Fnum f < 0)%Z ->

  (F2R f < 0)%R.

Proof.

intros f H.

rewrite <- F2R_0 with (Fexp f).

now apply F2R_lt_compat.

Qed.



Theorem F2R_neq_0_compat :

 forall f : float beta,

  (Fnum f <> 0)%Z ->

  (F2R f <> 0)%R.

Proof.

intros f H H1.

apply H.

now apply F2R_eq_0_reg with (Fexp f).

Qed.



Lemma Fnum_ge_0_compat: forall (f : float beta),

  (0 <= F2R f)%R -> (0 <= Fnum f)%Z.

Proof.

intros f H.

case (Zle_or_lt 0 (Fnum f)); trivial.

intros H1; contradict H.

apply Rlt_not_le.

now apply F2R_lt_0_compat.

Qed.



Lemma Fnum_le_0_compat: forall (f : float beta),

  (F2R f <= 0)%R -> (Fnum f <= 0)%Z.

Proof.

intros f H.

case (Zle_or_lt (Fnum f) 0); trivial.

intros H1; contradict H.

apply Rlt_not_le.

now apply F2R_gt_0_compat.

Qed.



Theorem F2R_bpow :

  forall e : Z,

  F2R (Float beta 1 e) = bpow e.

Proof.

intros e.

unfold F2R. simpl.

apply Rmult_1_l.

Qed.



Theorem bpow_le_F2R :

  forall m e : Z,

  (0 < m)%Z ->

  (bpow e <= F2R (Float beta m e))%R.

Proof.

intros m e H.

rewrite <- F2R_bpow.

apply F2R_le_compat.

now apply (Zlt_le_succ 0).

Qed.



Theorem F2R_p1_le_bpow :

  forall m e1 e2 : Z,

  (0 < m)%Z ->

  (F2R (Float beta m e1) < bpow e2)%R ->

  (F2R (Float beta (m + 1) e1) <= bpow e2)%R.

Proof.

intros m e1 e2 Hm.

intros H.

assert (He : (e1 <= e2)%Z).



apply (le_bpow beta).

apply Rle_trans with (F2R (Float beta m e1)).

unfold F2R. simpl.

rewrite <- (Rmult_1_l (bpow e1)) at 1.

apply Rmult_le_compat_r.

apply bpow_ge_0.

apply (Z2R_le 1).

now apply (Zlt_le_succ 0).

now apply Rlt_le.



revert H.

replace e2 with (e2 - e1 + e1)%Z by ring.

rewrite bpow_plus.

unfold F2R. simpl.

rewrite <- (Z2R_Zpower beta (e2 - e1)).

intros H.

apply Rmult_le_compat_r.

apply bpow_ge_0.

apply Rmult_lt_reg_r in H.

apply Z2R_le.

apply Zlt_le_succ.

now apply lt_Z2R.

apply bpow_gt_0.

now apply Zle_minus_le_0.

Qed.



Theorem bpow_le_F2R_m1 :

  forall m e1 e2 : Z,

  (1 < m)%Z ->

  (bpow e2 < F2R (Float beta m e1))%R ->

  (bpow e2 <= F2R (Float beta (m - 1) e1))%R.

Proof.

intros m e1 e2 Hm.

case (Zle_or_lt e1 e2); intros He.

replace e2 with (e2 - e1 + e1)%Z by ring.

rewrite bpow_plus.

unfold F2R. simpl.

rewrite <- (Z2R_Zpower beta (e2 - e1)).

intros H.

apply Rmult_le_compat_r.

apply bpow_ge_0.

apply Rmult_lt_reg_r in H.

apply Z2R_le.

rewrite (Zpred_succ (Zpower _ _)).

apply Zplus_le_compat_r.

apply Zlt_le_succ.

now apply lt_Z2R.

apply bpow_gt_0.

now apply Zle_minus_le_0.

intros H.

apply Rle_trans with (1*bpow e1)%R.

rewrite Rmult_1_l.

apply bpow_le.

now apply Zlt_le_weak.

unfold F2R. simpl.

apply Rmult_le_compat_r.

apply bpow_ge_0.

replace 1%R with (Z2R 1) by reflexivity.

apply Z2R_le.

omega.

Qed.



Theorem F2R_lt_bpow :

  forall f : float beta, forall e',

  (Zabs (Fnum f) < Zpower beta (e' - Fexp f))%Z ->

  (Rabs (F2R f) < bpow e')%R.

Proof.

intros (m, e) e' Hm.

rewrite <- F2R_Zabs.

destruct (Zle_or_lt e e') as [He|He].

unfold F2R. simpl.

apply Rmult_lt_reg_r with (bpow (-e)).

apply bpow_gt_0.

rewrite Rmult_assoc, <- 2!bpow_plus, Zplus_opp_r, Rmult_1_r.

rewrite <-Z2R_Zpower. 2: now apply Zle_left.

now apply Z2R_lt.

elim Zlt_not_le with (1 := Hm).

simpl.

cut (e' - e < 0)%Z. 2: omega.

clear.

case (e' - e)%Z ; try easy.

intros p _.

apply Zabs_pos.

Qed.



Theorem F2R_change_exp :

  forall e' m e : Z,

  (e' <= e)%Z ->

  F2R (Float beta m e) = F2R (Float beta (m * Zpower beta (e - e')) e').

Proof.

intros e' m e He.

unfold F2R. simpl.

rewrite Z2R_mult, Z2R_Zpower, Rmult_assoc.

apply f_equal.

pattern e at 1 ; replace e with (e - e' + e')%Z by ring.

apply bpow_plus.

now apply Zle_minus_le_0.

Qed.



Theorem F2R_prec_normalize :

  forall m e e' p : Z,

  (Zabs m < Zpower beta p)%Z ->

  (bpow (e' - 1)%Z <= Rabs (F2R (Float beta m e)))%R ->

  F2R (Float beta m e) = F2R (Float beta (m * Zpower beta (e - e' + p)) (e' - p)).

Proof.

intros m e e' p Hm Hf.

assert (Hp: (0 <= p)%Z).

destruct p ; try easy.

now elim (Zle_not_lt _ _ (Zabs_pos m)).



replace (e - e' + p)%Z with (e - (e' - p))%Z by ring.

apply F2R_change_exp.

cut (e' - 1 < e + p)%Z. omega.

apply (lt_bpow beta).

apply Rle_lt_trans with (1 := Hf).

rewrite <- F2R_Zabs, Zplus_comm, bpow_plus.

apply Rmult_lt_compat_r.

apply bpow_gt_0.

rewrite <- Z2R_Zpower.

now apply Z2R_lt.

exact Hp.

Qed.



Theorem ln_beta_F2R_bounds :

  forall x m e, (0 < m)%Z ->

  (F2R (Float beta m e) <= x < F2R (Float beta (m + 1) e))%R ->

  ln_beta beta x = ln_beta beta (F2R (Float beta m e)) :> Z.

Proof.

intros x m e Hp (Hx,Hx2).

destruct (ln_beta beta (F2R (Float beta m e))) as (ex, He).

simpl.

apply ln_beta_unique.

assert (Hp1: (0 < F2R (Float beta m e))%R).

now apply F2R_gt_0_compat.

specialize (He (Rgt_not_eq _ _ Hp1)).

rewrite Rabs_pos_eq in He. 2: now apply Rlt_le.

destruct He as (He1, He2).

assert (Hx1: (0 < x)%R).

now apply Rlt_le_trans with (2 := Hx).

rewrite Rabs_pos_eq. 2: now apply Rlt_le.

split.

now apply Rle_trans with (1 := He1).

apply Rlt_le_trans with (1 := Hx2).

now apply F2R_p1_le_bpow.

Qed.



Theorem ln_beta_F2R :

  forall m e : Z,

  m <> Z0 ->

  (ln_beta beta (F2R (Float beta m e)) = ln_beta beta (Z2R m) + e :> Z)%Z.

Proof.

intros m e H.

unfold F2R ; simpl.

apply ln_beta_mult_bpow.

exact (Z2R_neq m 0 H).

Qed.



Theorem float_distribution_pos :

  forall m1 e1 m2 e2 : Z,

  (0 < m1)%Z ->

  (F2R (Float beta m1 e1) < F2R (Float beta m2 e2) < F2R (Float beta (m1 + 1) e1))%R ->

  (e2 < e1)%Z /\ (e1 + ln_beta beta (Z2R m1) = e2 + ln_beta beta (Z2R m2))%Z.

Proof.

intros m1 e1 m2 e2 Hp1 (H12, H21).

assert (He: (e2 < e1)%Z).



apply Znot_ge_lt.

intros H0.

elim Rlt_not_le with (1 := H21).

apply Zge_le in H0.

apply (F2R_change_exp e1 m2 e2) in H0.

rewrite H0.

apply F2R_le_compat.

apply Zlt_le_succ.

apply (F2R_lt_reg e1).

now rewrite <- H0.



split.

exact He.

rewrite (Zplus_comm e1), (Zplus_comm e2).

assert (Hp2: (0 < m2)%Z).

apply (F2R_gt_0_reg m2 e2).

apply Rlt_trans with (2 := H12).

now apply F2R_gt_0_compat.

rewrite <- 2!ln_beta_F2R.

destruct (ln_beta beta (F2R (Float beta m1 e1))) as (e1', H1).

simpl.

apply sym_eq.

apply ln_beta_unique.

assert (H2 : (bpow (e1' - 1) <= F2R (Float beta m1 e1) < bpow e1')%R).

rewrite <- (Zabs_eq m1), F2R_Zabs.

apply H1.

apply Rgt_not_eq.

apply Rlt_gt.

now apply F2R_gt_0_compat.

now apply Zlt_le_weak.

clear H1.

rewrite <- F2R_Zabs, Zabs_eq.

split.

apply Rlt_le.

apply Rle_lt_trans with (2 := H12).

apply H2.

apply Rlt_le_trans with (1 := H21).

now apply F2R_p1_le_bpow.

now apply Zlt_le_weak.

apply sym_not_eq.

now apply Zlt_not_eq.

apply sym_not_eq.

now apply Zlt_not_eq.

Qed.



Theorem F2R_cond_Zopp :

  forall b m e,

  F2R (Float beta (cond_Zopp b m) e) = cond_Ropp b (F2R (Float beta m e)).

Proof.

intros [|] m e ; unfold F2R ; simpl.

now rewrite Z2R_opp, Ropp_mult_distr_l_reverse.

apply refl_equal.

Qed.



End Float_prop.

