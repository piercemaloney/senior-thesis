

Require Import Coqlib.
(* Coqlib:
Require Export String.
Require Export ZArith.
Require Export Znumtheory.
Require Export List.
Require Export Bool.

Global Set Asymmetric Patterns.

Ltac inv H := inversion H; clear H; subst.

Ltac predSpec pred predspec x y :=
  generalize (predspec x y); case (pred x y); intro.

Ltac caseEq name :=
  generalize (eq_refl name); pattern name at -1 in |- *; case name.

Ltac destructEq name :=
  destruct name eqn:?.

Ltac decEq :=
  match goal with
  | [ |- _ = _ ] => f_equal
  | [ |- (?X ?A <> ?X ?B) ] =>
      cut (A <> B); [intro; congruence | try discriminate]
  end.

Ltac byContradiction :=
  cut False; [contradiction|idtac].

Ltac omegaContradiction :=
  cut False; [contradiction|omega].

Lemma modusponens: forall (P Q: Prop), P -> (P -> Q) -> Q.

Ltac exploit x :=
    refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _ _) _)
 || refine (modusponens _ _ (x _ _ _) _)
 || refine (modusponens _ _ (x _ _) _)
 || refine (modusponens _ _ (x _) _).

Definition peq: forall (x y: positive), {x = y} + {x <> y} := Pos.eq_dec.
Global Opaque peq.

Lemma peq_true:
  forall (A: Type) (x: positive) (a b: A), (if peq x x then a else b) = a.

Lemma peq_false:
  forall (A: Type) (x y: positive) (a b: A), x <> y -> (if peq x y then a else b) = b.

Definition Plt: positive -> positive -> Prop := Pos.lt.

Lemma Plt_ne:
  forall (x y: positive), Plt x y -> x <> y.
Hint Resolve Plt_ne: coqlib.

Lemma Plt_trans:
  forall (x y z: positive), Plt x y -> Plt y z -> Plt x z.
Proof (Pos.lt_trans).

Lemma Plt_succ:
  forall (x: positive), Plt x (Pos.succ x).
Hint Resolve Plt_succ: coqlib.

Lemma Plt_trans_succ:
  forall (x y: positive), Plt x y -> Plt x (Pos.succ y).
Hint Resolve Plt_succ: coqlib.

Lemma Plt_succ_inv:
  forall (x y: positive), Plt x (Pos.succ y) -> Plt x y \/ x = y.

Definition plt (x y: positive) : {Plt x y} + {~ Plt x y}.
Global Opaque plt.

Definition Ple: positive -> positive -> Prop := Pos.le.

Lemma Ple_refl: forall (p: positive), Ple p p.
Proof (Pos.le_refl).

Lemma Ple_trans: forall (p q r: positive), Ple p q -> Ple q r -> Ple p r.
Proof (Pos.le_trans).

Lemma Plt_Ple: forall (p q: positive), Plt p q -> Ple p q.
Proof (Pos.lt_le_incl).

Lemma Ple_succ: forall (p: positive), Ple p (Pos.succ p).

Lemma Plt_Ple_trans:
  forall (p q r: positive), Plt p q -> Ple q r -> Plt p r.
Proof (Pos.lt_le_trans).

Lemma Plt_strict: forall p, ~ Plt p p.
Proof (Pos.lt_irrefl).

Hint Resolve Ple_refl Plt_Ple Ple_succ Plt_strict: coqlib.

Ltac xomega := unfold Plt, Ple in *; zify; omega.
Ltac xomegaContradiction := exfalso; xomega.

Section POSITIVE_ITERATION.

Lemma Plt_wf: well_founded Plt.

Variable A: Type.
Variable v1: A.
Variable f: positive -> A -> A.

Lemma Ppred_Plt:
  forall x, x <> xH -> Plt (Pos.pred x) x.

Let iter (x: positive) (P: forall y, Plt y x -> A) : A :=
  match peq x xH with
  | left EQ => v1
  | right NOTEQ => f (Pos.pred x) (P (Pos.pred x) (Ppred_Plt x NOTEQ))
  end.

Definition positive_rec : positive -> A :=
  Fix Plt_wf (fun _ => A) iter.

Lemma unroll_positive_rec:
  forall x,
  positive_rec x = iter x (fun y _ => positive_rec y).

Lemma positive_rec_base:
  positive_rec 1%positive = v1.

Lemma positive_rec_succ:
  forall x, positive_rec (Pos.succ x) = f x (positive_rec x).

Lemma positive_Peano_ind:
  forall (P: positive -> Prop),
  P xH ->
  (forall x, P x -> P (Pos.succ x)) ->

End POSITIVE_ITERATION.

Definition zeq: forall (x y: Z), {x = y} + {x <> y} := Z.eq_dec.

Lemma zeq_true:
  forall (A: Type) (x: Z) (a b: A), (if zeq x x then a else b) = a.

Lemma zeq_false:
  forall (A: Type) (x y: Z) (a b: A), x <> y -> (if zeq x y then a else b) = b.

Open Scope Z_scope.

Definition zlt: forall (x y: Z), {x < y} + {x >= y} := Z_lt_dec.

Lemma zlt_true:
  forall (A: Type) (x y: Z) (a b: A),
  x < y -> (if zlt x y then a else b) = a.

Lemma zlt_false:
  forall (A: Type) (x y: Z) (a b: A),
  x >= y -> (if zlt x y then a else b) = b.

Definition zle: forall (x y: Z), {x <= y} + {x > y} := Z_le_gt_dec.

Lemma zle_true:
  forall (A: Type) (x y: Z) (a b: A),
  x <= y -> (if zle x y then a else b) = a.

Lemma zle_false:
  forall (A: Type) (x y: Z) (a b: A),
  x > y -> (if zle x y then a else b) = b.

Lemma two_power_nat_O : two_power_nat O = 1.

Lemma two_power_nat_pos : forall n : nat, two_power_nat n > 0.

Lemma two_power_nat_two_p:
  forall x, two_power_nat x = two_p (Z.of_nat x).

Lemma two_p_monotone:
  forall x y, 0 <= x <= y -> two_p x <= two_p y.

Lemma two_p_monotone_strict:
  forall x y, 0 <= x < y -> two_p x < two_p y.

Lemma two_p_strict:
  forall x, x >= 0 -> x < two_p x.

Lemma two_p_strict_2:
  forall x, x >= 0 -> 2 * x - 1 < two_p x.

Lemma Zmin_spec:
  forall x y, Z.min x y = if zlt x y then x else y.

Lemma Zmax_spec:
  forall x y, Z.max x y = if zlt y x then x else y.

Lemma Zmax_bound_l:
  forall x y z, x <= y -> x <= Z.max y z.
Lemma Zmax_bound_r:
  forall x y z, x <= z -> x <= Z.max y z.

Lemma Zdiv_small:
  forall x y, 0 <= x < y -> x / y = 0.

Lemma Zmod_small:
  forall x y, 0 <= x < y -> x mod y = x.

Lemma Zmod_unique:
  forall x y a b,
  x = a * y + b -> 0 <= b < y -> x mod y = b.

Lemma Zdiv_unique:
  forall x y a b,
  x = a * y + b -> 0 <= b < y -> x / y = a.

Lemma Zdiv_Zdiv:
  forall a b c,
  b > 0 -> c > 0 -> (a / b) / c = a / (b * c).

Lemma Zmult_le_compat_l_neg :
  forall n m p:Z, n >= m -> p <= 0 -> p * n <= p * m.

Lemma Zdiv_interval_1:
  forall lo hi a b,
  lo <= 0 -> hi > 0 -> b > 0 ->
  lo * b <= a < hi * b ->
  lo <= a/b < hi.

Lemma Zdiv_interval_2:
  forall lo hi a b,
  lo <= a <= hi -> lo <= 0 -> hi >= 0 -> b > 0 ->
  lo <= a/b <= hi.

Lemma Zmod_recombine:
  forall x a b,
  a > 0 -> b > 0 ->
  x mod (a * b) = ((x/b) mod a) * b + (x mod b).

Lemma Zdivides_trans:
  forall x y z, (x | y) -> (y | z) -> (x | z).

Definition Zdivide_dec:
  forall (p q: Z), p > 0 -> { (p|q) } + { ~(p|q) }.
Global Opaque Zdivide_dec.

Lemma Zdivide_interval:
  forall a b c,
  0 < c -> 0 <= a < b -> (c | a) -> (c | b) -> 0 <= a <= b - c.

Definition nat_of_Z: Z -> nat := Z.to_nat.

Lemma nat_of_Z_of_nat:
  forall n, nat_of_Z (Z.of_nat n) = n.

Lemma nat_of_Z_max:
  forall z, Z.of_nat (nat_of_Z z) = Z.max z 0.

Lemma nat_of_Z_eq:
  forall z, z >= 0 -> Z.of_nat (nat_of_Z z) = z.

Lemma nat_of_Z_neg:
  forall n, n <= 0 -> nat_of_Z n = O.

Lemma nat_of_Z_plus:
  forall p q,
  p >= 0 -> q >= 0 ->
  nat_of_Z (p + q) = (nat_of_Z p + nat_of_Z q)%nat.

Definition align (n: Z) (amount: Z) :=
  ((n + amount - 1) / amount) * amount.

Lemma align_le: forall x y, y > 0 -> x <= align x y.

Lemma align_divides: forall x y, y > 0 -> (y | align x y).

Set Implicit Arguments.

Definition option_eq (A: Type) (eqA: forall (x y: A), {x=y} + {x<>y}):
  forall (x y: option A), {x=y} + {x<>y}.
Global Opaque option_eq.

Inductive option_rel (A B: Type) (R: A -> B -> Prop) : option A -> option B -> Prop :=
  | option_rel_none: option_rel R None None
  | option_rel_some: forall x y, R x y -> option_rel R (Some x) (Some y).

Definition option_map (A B: Type) (f: A -> B) (x: option A) : option B :=
  match x with
  | None => None
  | Some y => Some (f y)
  end.

Definition sum_left_map (A B C: Type) (f: A -> B) (x: A + C) : B + C :=
  match x with
  | inl y => inl C (f y)
  | inr z => inr B z
  end.

Hint Resolve in_eq in_cons: coqlib.

Lemma nth_error_in:
  forall (A: Type) (n: nat) (l: list A) (x: A),
  List.nth_error l n = Some x -> In x l.
Hint Resolve nth_error_in: coqlib.

Lemma nth_error_nil:
  forall (A: Type) (idx: nat), nth_error (@nil A) idx = None.
Hint Resolve nth_error_nil: coqlib.

Fixpoint list_length_z_aux (A: Type) (l: list A) (acc: Z) {struct l}: Z :=
  match l with
  | nil => acc
  | hd :: tl => list_length_z_aux tl (Z.succ acc)
  end.

Remark list_length_z_aux_shift:
  forall (A: Type) (l: list A) n m,
  list_length_z_aux l n = list_length_z_aux l m + (n - m).

Definition list_length_z (A: Type) (l: list A) : Z :=
  list_length_z_aux l 0.

Lemma list_length_z_cons:
  forall (A: Type) (hd: A) (tl: list A),
  list_length_z (hd :: tl) = list_length_z tl + 1.

Lemma list_length_z_pos:
  forall (A: Type) (l: list A),
  list_length_z l >= 0.

Lemma list_length_z_map:
  forall (A B: Type) (f: A -> B) (l: list A),
  list_length_z (map f l) = list_length_z l.

Fixpoint list_nth_z (A: Type) (l: list A) (n: Z) {struct l}: option A :=
  match l with
  | nil => None
  | hd :: tl => if zeq n 0 then Some hd else list_nth_z tl (Z.pred n)
  end.

Lemma list_nth_z_in:
  forall (A: Type) (l: list A) n x,
  list_nth_z l n = Some x -> In x l.

Lemma list_nth_z_map:
  forall (A B: Type) (f: A -> B) (l: list A) n,
  list_nth_z (List.map f l) n = option_map f (list_nth_z l n).

Lemma list_nth_z_range:
  forall (A: Type) (l: list A) n x,
  list_nth_z l n = Some x -> 0 <= n < list_length_z l.

Lemma incl_cons_inv:
  forall (A: Type) (a: A) (b c: list A),
  incl (a :: b) c -> incl b c.
Hint Resolve incl_cons_inv: coqlib.

Lemma incl_app_inv_l:
  forall (A: Type) (l1 l2 m: list A),
  incl (l1 ++ l2) m -> incl l1 m.

Lemma incl_app_inv_r:
  forall (A: Type) (l1 l2 m: list A),
  incl (l1 ++ l2) m -> incl l2 m.

Hint Resolve  incl_tl incl_refl incl_app_inv_l incl_app_inv_r: coqlib.

Lemma incl_same_head:
  forall (A: Type) (x: A) (l1 l2: list A),
  incl l1 l2 -> incl (x::l1) (x::l2).

Lemma list_map_exten:
  forall (A B: Type) (f f': A -> B) (l: list A),
  (forall x, In x l -> f x = f' x) ->
  List.map f' l = List.map f l.

Lemma list_map_compose:
  forall (A B C: Type) (f: A -> B) (g: B -> C) (l: list A),
  List.map g (List.map f l) = List.map (fun x => g(f x)) l.

Lemma list_map_identity:
  forall (A: Type) (l: list A),
  List.map (fun (x:A) => x) l = l.

Lemma list_map_nth:
  forall (A B: Type) (f: A -> B) (l: list A) (n: nat),
  nth_error (List.map f l) n = option_map f (nth_error l n).

Lemma list_length_map:
  forall (A B: Type) (f: A -> B) (l: list A),
  List.length (List.map f l) = List.length l.

Lemma list_in_map_inv:
  forall (A B: Type) (f: A -> B) (l: list A) (y: B),
  In y (List.map f l) -> exists x:A, y = f x /\ In x l.

Lemma list_append_map:
  forall (A B: Type) (f: A -> B) (l1 l2: list A),
  List.map f (l1 ++ l2) = List.map f l1 ++ List.map f l2.

Lemma list_append_map_inv:
  forall (A B: Type) (f: A -> B) (m1 m2: list B) (l: list A),
  List.map f l = m1 ++ m2 ->

Section LIST_FOLD.

Variables A B: Type.
Variable f: A -> B -> B.

Fixpoint list_fold_left (accu: B) (l: list A) : B :=
  match l with nil => accu | x :: l' => list_fold_left (f x accu) l' end.

Definition list_fold_right (l: list A) (base: B) : B :=
  list_fold_left base (List.rev' l).

Remark list_fold_left_app:
  forall l1 l2 accu,
  list_fold_left accu (l1 ++ l2) = list_fold_left (list_fold_left accu l1) l2.

Lemma list_fold_right_eq:
  forall l base,
  list_fold_right l base =
  match l with nil => base | x :: l' => f x (list_fold_right l' base) end.

Lemma list_fold_right_spec:
  forall l base, list_fold_right l base = List.fold_right f base l.

End LIST_FOLD.

Lemma in_cns:
  forall (A: Type) (x y: A) (l: list A), In x (y :: l) <-> y = x \/ In x l.

Lemma in_app:
  forall (A: Type) (x: A) (l1 l2: list A), In x (l1 ++ l2) <-> In x l1 \/ In x l2.

Lemma list_in_insert:
  forall (A: Type) (x: A) (l1 l2: list A) (y: A),
  In x (l1 ++ l2) -> In x (l1 ++ y :: l2).

Definition list_disjoint (A: Type) (l1 l2: list A) : Prop :=
  forall (x y: A), In x l1 -> In y l2 -> x <> y.

Lemma list_disjoint_cons_l:
  forall (A: Type) (a: A) (l1 l2: list A),
  list_disjoint l1 l2 -> ~In a l2 -> list_disjoint (a :: l1) l2.

Lemma list_disjoint_cons_r:
  forall (A: Type) (a: A) (l1 l2: list A),
  list_disjoint l1 l2 -> ~In a l1 -> list_disjoint l1 (a :: l2).

Lemma list_disjoint_cons_left:
  forall (A: Type) (a: A) (l1 l2: list A),
  list_disjoint (a :: l1) l2 -> list_disjoint l1 l2.

Lemma list_disjoint_cons_right:
  forall (A: Type) (a: A) (l1 l2: list A),
  list_disjoint l1 (a :: l2) -> list_disjoint l1 l2.

Lemma list_disjoint_notin:
  forall (A: Type) (l1 l2: list A) (a: A),
  list_disjoint l1 l2 -> In a l1 -> ~(In a l2).

Lemma list_disjoint_sym:
  forall (A: Type) (l1 l2: list A),
  list_disjoint l1 l2 -> list_disjoint l2 l1.

Lemma list_disjoint_dec:
  forall (A: Type) (eqA_dec: forall (x y: A), {x=y} + {x<>y}) (l1 l2: list A),
  {list_disjoint l1 l2} + {~list_disjoint l1 l2}.

Definition list_equiv (A : Type) (l1 l2: list A) : Prop :=
  forall x, In x l1 <-> In x l2.

Inductive list_norepet (A: Type) : list A -> Prop :=
  | list_norepet_nil:
      list_norepet nil
  | list_norepet_cons:
      forall hd tl,
      ~(In hd tl) -> list_norepet tl -> list_norepet (hd :: tl).

Lemma list_norepet_dec:
  forall (A: Type) (eqA_dec: forall (x y: A), {x=y} + {x<>y}) (l: list A),
  {list_norepet l} + {~list_norepet l}.

Lemma list_map_norepet:
  forall (A B: Type) (f: A -> B) (l: list A),
  list_norepet l ->
  (forall x y, In x l -> In y l -> x <> y -> f x <> f y) ->
  list_norepet (List.map f l).

Remark list_norepet_append_commut:
  forall (A: Type) (a b: list A),
  list_norepet (a ++ b) -> list_norepet (b ++ a).

Lemma list_norepet_app:
  forall (A: Type) (l1 l2: list A),
  list_norepet (l1 ++ l2) <->
  list_norepet l1 /\ list_norepet l2 /\ list_disjoint l1 l2.

Lemma list_norepet_append:
  forall (A: Type) (l1 l2: list A),
  list_norepet l1 -> list_norepet l2 -> list_disjoint l1 l2 ->
  list_norepet (l1 ++ l2).

Lemma list_norepet_append_right:
  forall (A: Type) (l1 l2: list A),
  list_norepet (l1 ++ l2) -> list_norepet l2.

Lemma list_norepet_append_left:
  forall (A: Type) (l1 l2: list A),
  list_norepet (l1 ++ l2) -> list_norepet l1.

Inductive is_tail (A: Type): list A -> list A -> Prop :=
  | is_tail_refl:
      forall c, is_tail c c
  | is_tail_cons:
      forall i c1 c2, is_tail c1 c2 -> is_tail c1 (i :: c2).

Lemma is_tail_in:
  forall (A: Type) (i: A) c1 c2, is_tail (i :: c1) c2 -> In i c2.

Lemma is_tail_cons_left:
  forall (A: Type) (i: A) c1 c2, is_tail (i :: c1) c2 -> is_tail c1 c2.

Hint Resolve is_tail_refl is_tail_cons is_tail_in is_tail_cons_left: coqlib.

Lemma is_tail_incl:
  forall (A: Type) (l1 l2: list A), is_tail l1 l2 -> incl l1 l2.

Lemma is_tail_trans:
  forall (A: Type) (l1 l2: list A),
  is_tail l1 l2 -> forall (l3: list A), is_tail l2 l3 -> is_tail l1 l3.

Section FORALL2.

Variable A: Type.
Variable B: Type.
Variable P: A -> B -> Prop.

Inductive list_forall2: list A -> list B -> Prop :=
  | list_forall2_nil:
      list_forall2 nil nil
  | list_forall2_cons:
      forall a1 al b1 bl,
      P a1 b1 ->
      list_forall2 al bl ->
      list_forall2 (a1 :: al) (b1 :: bl).

Lemma list_forall2_app:
  forall a2 b2 a1 b1,
  list_forall2 a1 b1 -> list_forall2 a2 b2 ->
  list_forall2 (a1 ++ a2) (b1 ++ b2).

Lemma list_forall2_length:
  forall l1 l2,
  list_forall2 l1 l2 -> length l1 = length l2.

Lemma list_forall2_in_left:
  forall x1 l1 l2,
  list_forall2 l1 l2 -> In x1 l1 -> exists x2, In x2 l2 /\ P x1 x2.

Lemma list_forall2_in_right:
  forall x2 l1 l2,
  list_forall2 l1 l2 -> In x2 l2 -> exists x1, In x1 l1 /\ P x1 x2.

End FORALL2.

Lemma list_forall2_imply:
  forall (A B: Type) (P1: A -> B -> Prop) (l1: list A) (l2: list B),
  list_forall2 P1 l1 l2 ->
  forall (P2: A -> B -> Prop),
  (forall v1 v2, In v1 l1 -> In v2 l2 -> P1 v1 v2 -> P2 v1 v2) ->
  list_forall2 P2 l1 l2.

Fixpoint list_drop (A: Type) (n: nat) (x: list A) {struct n} : list A :=
  match n with
  | O => x
  | S n' => match x with nil => nil | hd :: tl => list_drop n' tl end
  end.

Lemma list_drop_incl:
  forall (A: Type) (x: A) n (l: list A), In x (list_drop n l) -> In x l.

Lemma list_drop_norepet:
  forall (A: Type) n (l: list A), list_norepet l -> list_norepet (list_drop n l).

Lemma list_map_drop:
  forall (A B: Type) (f: A -> B) n (l: list A),
  list_drop n (map f l) = map f (list_drop n l).

Fixpoint list_repeat {A: Type} (n: nat) (x: A) {struct n} :=
  match n with
  | O => nil
  | S m => x :: list_repeat m x
  end.

Lemma length_list_repeat:
  forall (A: Type) n (x: A), length (list_repeat n x) = n.

Lemma in_list_repeat:
  forall (A: Type) n (x: A) y, In y (list_repeat n x) -> y = x.

Definition proj_sumbool {P Q: Prop} (a: {P} + {Q}) : bool :=
  if a then true else false.

Coercion proj_sumbool: sumbool >-> bool.

Lemma proj_sumbool_true:
  forall (P Q: Prop) (a: {P}+{Q}), proj_sumbool a = true -> P.

Lemma proj_sumbool_is_true:
  forall (P: Prop) (a: {P}+{~P}), P -> proj_sumbool a = true.

Ltac InvBooleans :=
  match goal with
  | [ H: _ && _ = true |- _ ] =>
      destruct (andb_prop _ _ H); clear H; InvBooleans
  | [ H: _ || _ = false |- _ ] =>
      destruct (orb_false_elim _ _ H); clear H; InvBooleans
  | [ H: proj_sumbool ?x = true |- _ ] =>
      generalize (proj_sumbool_true _ H); clear H; intro; InvBooleans
  | _ => idtac
  end.

Section DECIDABLE_EQUALITY.

Variable A: Type.
Variable dec_eq: forall (x y: A), {x=y} + {x<>y}.
Variable B: Type.

Lemma dec_eq_true:
  forall (x: A) (ifso ifnot: B),
  (if dec_eq x x then ifso else ifnot) = ifso.

Lemma dec_eq_false:
  forall (x y: A) (ifso ifnot: B),
  x <> y -> (if dec_eq x y then ifso else ifnot) = ifnot.

Lemma dec_eq_sym:
  forall (x y: A) (ifso ifnot: B),
  (if dec_eq x y then ifso else ifnot) =
  (if dec_eq y x then ifso else ifnot).

End DECIDABLE_EQUALITY.

Section DECIDABLE_PREDICATE.

Variable P: Prop.
Variable dec: {P} + {~P}.
Variable A: Type.

Lemma pred_dec_true:
  forall (a b: A), P -> (if dec then a else b) = a.

Lemma pred_dec_false:
  forall (a b: A), ~P -> (if dec then a else b) = b.

End DECIDABLE_PREDICATE.

Require Import Relations.

Section LEX_ORDER.

Variable A: Type.
Variable B: Type.
Variable ordA: A -> A -> Prop.
Variable ordB: B -> B -> Prop.

Inductive lex_ord: A*B -> A*B -> Prop :=
  | lex_ord_left: forall a1 b1 a2 b2,
      ordA a1 a2 -> lex_ord (a1,b1) (a2,b2)
  | lex_ord_right: forall a b1 b2,
      ordB b1 b2 -> lex_ord (a,b1) (a,b2).

Lemma wf_lex_ord:
  well_founded ordA -> well_founded ordB -> well_founded lex_ord.

Lemma transitive_lex_ord:
  transitive _ ordA -> transitive _ ordB -> transitive _ lex_ord.

End LEX_ORDER.

Inductive nlist (A: Type) : Type :=
  | nbase: A -> nlist A
  | ncons: A -> nlist A -> nlist A.

Definition nfirst {A: Type} (l: nlist A) :=
  match l with nbase a => a | ncons a l' => a end.

Fixpoint nlast {A: Type} (l: nlist A) :=
  match l with nbase a => a | ncons a l' => nlast l' end.

Fixpoint nIn {A: Type} (x: A) (l: nlist A) : Prop :=
  match l with
  | nbase a => a = x
  | ncons a l => a = x \/ nIn x l
  end.

Inductive nlist_forall2 {A B: Type} (R: A -> B -> Prop) : nlist A -> nlist B -> Prop :=
  | nbase_forall2: forall a b, R a b -> nlist_forall2 R (nbase a) (nbase b)
  | ncons_forall2: forall a l b m, R a b -> nlist_forall2 R l m -> nlist_forall2 R (ncons a l) (ncons b m).

Lemma nlist_forall2_imply:
  forall (A B: Type) (P1: A -> B -> Prop) (l1: nlist A) (l2: nlist B),
  nlist_forall2 P1 l1 l2 ->
  forall (P2: A -> B -> Prop),
  (forall v1 v2, nIn v1 l1 -> nIn v2 l2 -> P1 v1 v2 -> P2 v1 v2) ->
  nlist_forall2 P2 l1 l2. *)

Require Import AST.
(* AST:
Require Import String.
Require Import Coqlib Maps Errors Integers Floats.
Require Archi.

Set Implicit Arguments.

Definition ident := positive.

Definition ident_eq := peq.

Inductive typ : Type :=
  | Tint                
  | Tfloat              
  | Tlong               
  | Tsingle             
  | Tany32              
  | Tany64.             

Lemma typ_eq: forall (t1 t2: typ), {t1=t2} + {t1<>t2}.
Global Opaque typ_eq.

Definition opt_typ_eq: forall (t1 t2: option typ), {t1=t2} + {t1<>t2}
                     := option_eq typ_eq.

Definition list_typ_eq: forall (l1 l2: list typ), {l1=l2} + {l1<>l2}
                     := list_eq_dec typ_eq.

Definition Tptr : typ := if Archi.ptr64 then Tlong else Tint.

Definition typesize (ty: typ) : Z :=
  match ty with
  | Tint => 4
  | Tfloat => 8
  | Tlong => 8
  | Tsingle => 4
  | Tany32 => 4
  | Tany64 => 8
  end.

Lemma typesize_pos: forall ty, typesize ty > 0.

Lemma typesize_Tptr: typesize Tptr = if Archi.ptr64 then 8 else 4.

Definition subtype (ty1 ty2: typ) : bool :=
  match ty1, ty2 with
  | Tint, Tint => true
  | Tlong, Tlong => true
  | Tfloat, Tfloat => true
  | Tsingle, Tsingle => true
  | (Tint | Tsingle | Tany32), Tany32 => true
  | _, Tany64 => true
  | _, _ => false
  end.

Fixpoint subtype_list (tyl1 tyl2: list typ) : bool :=
  match tyl1, tyl2 with
  | nil, nil => true
  | ty1::tys1, ty2::tys2 => subtype ty1 ty2 && subtype_list tys1 tys2
  | _, _ => false
  end.

Record calling_convention : Type := mkcallconv {
  cc_vararg: bool;                      
  cc_unproto: bool;                     
  cc_structret: bool                    
}.

Definition cc_default :=
  {| cc_vararg := false; cc_unproto := false; cc_structret := false |}.

Definition calling_convention_eq (x y: calling_convention) : {x=y} + {x<>y}.
Global Opaque calling_convention_eq.

Record signature : Type := mksignature {
  sig_args: list typ;
  sig_res: option typ;
  sig_cc: calling_convention
}.

Definition proj_sig_res (s: signature) : typ :=
  match s.(sig_res) with
  | None => Tint
  | Some t => t
  end.

Definition signature_eq: forall (s1 s2: signature), {s1=s2} + {s1<>s2}.
Global Opaque signature_eq.

Definition signature_main :=
  {| sig_args := nil; sig_res := Some Tint; sig_cc := cc_default |}.

Inductive memory_chunk : Type :=
  | Mint8signed     
  | Mint8unsigned   
  | Mint16signed    
  | Mint16unsigned  
  | Mint32          
  | Mint64          
  | Mfloat32        
  | Mfloat64        
  | Many32          
  | Many64.         

Definition chunk_eq: forall (c1 c2: memory_chunk), {c1=c2} + {c1<>c2}.
Global Opaque chunk_eq.

Definition Mptr : memory_chunk := if Archi.ptr64 then Mint64 else Mint32.

Definition type_of_chunk (c: memory_chunk) : typ :=
  match c with
  | Mint8signed => Tint
  | Mint8unsigned => Tint
  | Mint16signed => Tint
  | Mint16unsigned => Tint
  | Mint32 => Tint
  | Mint64 => Tlong
  | Mfloat32 => Tsingle
  | Mfloat64 => Tfloat
  | Many32 => Tany32
  | Many64 => Tany64
  end.

Lemma type_of_Mptr: type_of_chunk Mptr = Tptr.

Definition chunk_of_type (ty: typ) :=
  match ty with
  | Tint => Mint32
  | Tfloat => Mfloat64
  | Tlong => Mint64
  | Tsingle => Mfloat32
  | Tany32 => Many32
  | Tany64 => Many64
  end.

Lemma chunk_of_Tptr: chunk_of_type Tptr = Mptr.

Inductive init_data: Type :=
  | Init_int8: int -> init_data
  | Init_int16: int -> init_data
  | Init_int32: int -> init_data
  | Init_int64: int64 -> init_data
  | Init_float32: float32 -> init_data
  | Init_float64: float -> init_data
  | Init_space: Z -> init_data
  | Init_addrof: ident -> ptrofs -> init_data.  

Definition init_data_size (i: init_data) : Z :=
  match i with
  | Init_int8 _ => 1
  | Init_int16 _ => 2
  | Init_int32 _ => 4
  | Init_int64 _ => 8
  | Init_float32 _ => 4
  | Init_float64 _ => 8
  | Init_addrof _ _ => if Archi.ptr64 then 8 else 4
  | Init_space n => Z.max n 0
  end.

Fixpoint init_data_list_size (il: list init_data) {struct il} : Z :=
  match il with
  | nil => 0
  | i :: il' => init_data_size i + init_data_list_size il'
  end.

Lemma init_data_size_pos:
  forall i, init_data_size i >= 0.

Lemma init_data_list_size_pos:
  forall il, init_data_list_size il >= 0.

Record globvar (V: Type) : Type := mkglobvar {
  gvar_info: V;                    
  gvar_init: list init_data;       
  gvar_readonly: bool;             
  gvar_volatile: bool              
}.

Inductive globdef (F V: Type) : Type :=
  | Gfun (f: F)
  | Gvar (v: globvar V).

Arguments Gfun [F V].
Arguments Gvar [F V].

Record program (F V: Type) : Type := mkprogram {
  prog_defs: list (ident * globdef F V);
  prog_public: list ident;
  prog_main: ident
}.

Definition prog_defs_names (F V: Type) (p: program F V) : list ident :=
  List.map fst p.(prog_defs).

Definition prog_defmap (F V: Type) (p: program F V) : PTree.t (globdef F V) :=
  PTree_Properties.of_list p.(prog_defs).

Section DEFMAP.

Variables F V: Type.
Variable p: program F V.

Lemma in_prog_defmap:
  forall id g, (prog_defmap p)!id = Some g -> In (id, g) (prog_defs p).

Lemma prog_defmap_dom:
  forall id, In id (prog_defs_names p) -> exists g, (prog_defmap p)!id = Some g.

Lemma prog_defmap_unique:
  forall defs1 id g defs2,
  prog_defs p = defs1 ++ (id, g) :: defs2 ->
  ~In id (map fst defs2) ->
  (prog_defmap p)!id = Some g.

Lemma prog_defmap_norepet:
  forall id g,
  list_norepet (prog_defs_names p) ->
  In (id, g) (prog_defs p) ->
  (prog_defmap p)!id = Some g.

End DEFMAP.

Section TRANSF_PROGRAM.

Variable A B V: Type.
Variable transf: A -> B.

Definition transform_program_globdef (idg: ident * globdef A V) : ident * globdef B V :=
  match idg with
  | (id, Gfun f) => (id, Gfun (transf f))
  | (id, Gvar v) => (id, Gvar v)
  end.

Definition transform_program (p: program A V) : program B V :=
  mkprogram
    (List.map transform_program_globdef p.(prog_defs))
    p.(prog_public)
    p.(prog_main).

End TRANSF_PROGRAM.

Local Open Scope error_monad_scope.

Section TRANSF_PROGRAM_GEN.

Variables A B V W: Type.
Variable transf_fun: ident -> A -> res B.
Variable transf_var: ident -> V -> res W.

Definition transf_globvar (i: ident) (g: globvar V) : res (globvar W) :=
  do info' <- transf_var i g.(gvar_info);
  OK (mkglobvar info' g.(gvar_init) g.(gvar_readonly) g.(gvar_volatile)).

Fixpoint transf_globdefs (l: list (ident * globdef A V)) : res (list (ident * globdef B W)) :=
  match l with
  | nil => OK nil
  | (id, Gfun f) :: l' =>
    match transf_fun id f with
      | Error msg => Error (MSG "In function " :: CTX id :: MSG ": " :: msg)
      | OK tf =>
        do tl' <- transf_globdefs l'; OK ((id, Gfun tf) :: tl')
    end
  | (id, Gvar v) :: l' =>
    match transf_globvar id v with
      | Error msg => Error (MSG "In variable " :: CTX id :: MSG ": " :: msg)
      | OK tv =>
        do tl' <- transf_globdefs l'; OK ((id, Gvar tv) :: tl')
    end
  end.

Definition transform_partial_program2 (p: program A V) : res (program B W) :=
  do gl' <- transf_globdefs p.(prog_defs);
  OK (mkprogram gl' p.(prog_public) p.(prog_main)).

End TRANSF_PROGRAM_GEN.

Section TRANSF_PARTIAL_PROGRAM.

Variable A B V: Type.
Variable transf_fun: A -> res B.

Definition transform_partial_program (p: program A V) : res (program B V) :=
  transform_partial_program2 (fun i f => transf_fun f) (fun i v => OK v) p.

End TRANSF_PARTIAL_PROGRAM.

Lemma transform_program_partial_program:
  forall (A B V: Type) (transf_fun: A -> B) (p: program A V),
  transform_partial_program (fun f => OK (transf_fun f)) p = OK (transform_program transf_fun p).

Inductive external_function : Type :=
  | EF_external (name: string) (sg: signature)
       | EF_builtin (name: string) (sg: signature)
       | EF_runtime (name: string) (sg: signature)
       | EF_vload (chunk: memory_chunk)
       | EF_vstore (chunk: memory_chunk)
       | EF_malloc
       | EF_free
       | EF_memcpy (sz: Z) (al: Z)
     
  | EF_annot (kind: positive) (text: string) (targs: list typ)
       | EF_annot_val (kind: positive) (text: string) (targ: typ)
       | EF_inline_asm (text: string) (sg: signature) (clobbers: list string)
       | EF_debug (kind: positive) (text: ident) (targs: list typ).
     Definition ef_sig (ef: external_function): signature :=
  match ef with
  | EF_external name sg => sg
  | EF_builtin name sg => sg
  | EF_runtime name sg => sg
  | EF_vload chunk => mksignature (Tptr :: nil) (Some (type_of_chunk chunk)) cc_default
  | EF_vstore chunk => mksignature (Tptr :: type_of_chunk chunk :: nil) None cc_default
  | EF_malloc => mksignature (Tptr :: nil) (Some Tptr) cc_default
  | EF_free => mksignature (Tptr :: nil) None cc_default
  | EF_memcpy sz al => mksignature (Tptr :: Tptr :: nil) None cc_default
  | EF_annot kind text targs => mksignature targs None cc_default
  | EF_annot_val kind text targ => mksignature (targ :: nil) (Some targ) cc_default
  | EF_inline_asm text sg clob => sg
  | EF_debug kind text targs => mksignature targs None cc_default
  end.

Definition ef_inline (ef: external_function) : bool :=
  match ef with
  | EF_external name sg => false
  | EF_builtin name sg => true
  | EF_runtime name sg => false
  | EF_vload chunk => true
  | EF_vstore chunk => true
  | EF_malloc => false
  | EF_free => false
  | EF_memcpy sz al => true
  | EF_annot kind text targs => true
  | EF_annot_val kind Text rg => true
  | EF_inline_asm text sg clob => true
  | EF_debug kind text targs => true
  end.

Definition ef_reloads (ef: external_function) : bool :=
  match ef with
  | EF_annot kind text targs => false
  | EF_debug kind text targs => false
  | _ => true
  end.

Definition external_function_eq: forall (ef1 ef2: external_function), {ef1=ef2} + {ef1<>ef2}.
Global Opaque external_function_eq.

Inductive fundef (F: Type): Type :=
  | Internal: F -> fundef F
  | External: external_function -> fundef F.

Arguments External [F].

Section TRANSF_FUNDEF.

Variable A B: Type.
Variable transf: A -> B.

Definition transf_fundef (fd: fundef A): fundef B :=
  match fd with
  | Internal f => Internal (transf f)
  | External ef => External ef
  end.

End TRANSF_FUNDEF.

Section TRANSF_PARTIAL_FUNDEF.

Variable A B: Type.
Variable transf_partial: A -> res B.

Definition transf_partial_fundef (fd: fundef A): res (fundef B) :=
  match fd with
  | Internal f => do f' <- transf_partial f; OK (Internal f')
  | External ef => OK (External ef)
  end.

End TRANSF_PARTIAL_FUNDEF.

Set Contextual Implicit.

Inductive rpair (A: Type) : Type :=
  | One (r: A)
  | Twolong (rhi rlo: A).

Definition typ_rpair (A: Type) (typ_of: A -> typ) (p: rpair A): typ :=
  match p with
  | One r => typ_of r
  | Twolong rhi rlo => Tlong
  end.

Definition map_rpair (A B: Type) (f: A -> B) (p: rpair A): rpair B :=
  match p with
  | One r => One (f r)
  | Twolong rhi rlo => Twolong (f rhi) (f rlo)
  end.

Definition regs_of_rpair (A: Type) (p: rpair A): list A :=
  match p with
  | One r => r :: nil
  | Twolong rhi rlo => rhi :: rlo :: nil
  end.

Fixpoint regs_of_rpairs (A: Type) (l: list (rpair A)): list A :=
  match l with
  | nil => nil
  | p :: l => regs_of_rpair p ++ regs_of_rpairs l
  end.

Lemma in_regs_of_rpairs:
  forall (A: Type) (x: A) p, In x (regs_of_rpair p) -> forall l, In p l -> In x (regs_of_rpairs l).

Lemma in_regs_of_rpairs_inv:
  forall (A: Type) (x: A) l, In x (regs_of_rpairs l) -> exists p, In p l /\ In x (regs_of_rpair p).

Definition forall_rpair (A: Type) (P: A -> Prop) (p: rpair A): Prop :=
  match p with
  | One r => P r
  | Twolong rhi rlo => P rhi /\ P rlo
  end.

Inductive builtin_arg (A: Type) : Type :=
  | BA (x: A)
  | BA_int (n: int)
  | BA_long (n: int64)
  | BA_float (f: float)
  | BA_single (f: float32)
  | BA_loadstack (chunk: memory_chunk) (ofs: ptrofs)
  | BA_addrstack (ofs: ptrofs)
  | BA_loadglobal (chunk: memory_chunk) (id: ident) (ofs: ptrofs)
  | BA_addrglobal (id: ident) (ofs: ptrofs)
  | BA_splitlong (hi lo: builtin_arg A)
  | BA_addptr (a1 a2: builtin_arg A).

Inductive builtin_res (A: Type) : Type :=
  | BR (x: A)
  | BR_none
  | BR_splitlong (hi lo: builtin_res A).

Fixpoint globals_of_builtin_arg (A: Type) (a: builtin_arg A) : list ident :=
  match a with
  | BA_loadglobal chunk id ofs => id :: nil
  | BA_addrglobal id ofs => id :: nil
  | BA_splitlong hi lo => globals_of_builtin_arg hi ++ globals_of_builtin_arg lo
  | BA_addptr a1 a2 => globals_of_builtin_arg a1 ++ globals_of_builtin_arg a2
  | _ => nil
  end.

Definition globals_of_builtin_args (A: Type) (al: list (builtin_arg A)) : list ident :=
  List.fold_right (fun a l => globals_of_builtin_arg a ++ l) nil al.

Fixpoint params_of_builtin_arg (A: Type) (a: builtin_arg A) : list A :=
  match a with
  | BA x => x :: nil
  | BA_splitlong hi lo => params_of_builtin_arg hi ++ params_of_builtin_arg lo
  | BA_addptr a1 a2 => params_of_builtin_arg a1 ++ params_of_builtin_arg a2
  | _ => nil
  end.

Definition params_of_builtin_args (A: Type) (al: list (builtin_arg A)) : list A :=
  List.fold_right (fun a l => params_of_builtin_arg a ++ l) nil al.

Fixpoint params_of_builtin_res (A: Type) (a: builtin_res A) : list A :=
  match a with
  | BR x => x :: nil
  | BR_none => nil
  | BR_splitlong hi lo => params_of_builtin_res hi ++ params_of_builtin_res lo
  end.

Fixpoint map_builtin_arg (A B: Type) (f: A -> B) (a: builtin_arg A) : builtin_arg B :=
  match a with
  | BA x => BA (f x)
  | BA_int n => BA_int n
  | BA_long n => BA_long n
  | BA_float n => BA_float n
  | BA_single n => BA_single n
  | BA_loadstack chunk ofs => BA_loadstack chunk ofs
  | BA_addrstack ofs => BA_addrstack ofs
  | BA_loadglobal chunk id ofs => BA_loadglobal chunk id ofs
  | BA_addrglobal id ofs => BA_addrglobal id ofs
  | BA_splitlong hi lo =>
      BA_splitlong (map_builtin_arg f hi) (map_builtin_arg f lo)
  | BA_addptr a1 a2 =>
      BA_addptr (map_builtin_arg f a1) (map_builtin_arg f a2)
  end.

Fixpoint map_builtin_res (A B: Type) (f: A -> B) (a: builtin_res A) : builtin_res B :=
  match a with
  | BR x => BR (f x)
  | BR_none => BR_none
  | BR_splitlong hi lo =>
      BR_splitlong (map_builtin_res f hi) (map_builtin_res f lo)
  end.

Inductive builtin_arg_constraint : Type :=
  | OK_default
  | OK_const
  | OK_addrstack
  | OK_addressing
  | OK_all. *)

Require Import Integers.
(* Integers:
Require Import Eqdep_dec Zquot Zwf.
Require Import Coqlib.
Require Archi.

Inductive comparison : Type :=
  | Ceq : comparison               
  | Cne : comparison               
  | Clt : comparison               
  | Cle : comparison               
  | Cgt : comparison               
  | Cge : comparison.              

Definition negate_comparison (c: comparison): comparison :=
  match c with
  | Ceq => Cne
  | Cne => Ceq
  | Clt => Cge
  | Cle => Cgt
  | Cgt => Cle
  | Cge => Clt
  end.

Definition swap_comparison (c: comparison): comparison :=
  match c with
  | Ceq => Ceq
  | Cne => Cne
  | Clt => Cgt
  | Cle => Cge
  | Cgt => Clt
  | Cge => Cle
  end.

Module Type WORDSIZE.
  Parameter wordsize: nat.
  Axiom wordsize_not_zero: wordsize <> 0%nat.
End WORDSIZE.

Local Unset Elimination Schemes.
Local Unset Case Analysis Schemes.

Module Make(WS: WORDSIZE).

Definition wordsize: nat := WS.wordsize.
Definition zwordsize: Z := Z.of_nat wordsize.
Definition modulus : Z := two_power_nat wordsize.
Definition half_modulus : Z := modulus / 2.
Definition max_unsigned : Z := modulus - 1.
Definition max_signed : Z := half_modulus - 1.
Definition min_signed : Z := - half_modulus.

Remark wordsize_pos: zwordsize > 0.

Remark modulus_power: modulus = two_p zwordsize.

Remark modulus_pos: modulus > 0.

Record int: Type := mkint { intval: Z; intrange: -1 < intval < modulus }.

Fixpoint P_mod_two_p (p: positive) (n: nat) {struct n} : Z :=
  match n with
  | O => 0
  | S m =>
      match p with
      | xH => 1
      | xO q => Z.double (P_mod_two_p q m)
      | xI q => Z.succ_double (P_mod_two_p q m)
      end
  end.

Definition Z_mod_modulus (x: Z) : Z :=
  match x with
  | Z0 => 0
  | Zpos p => P_mod_two_p p wordsize
  | Zneg p => let r := P_mod_two_p p wordsize in if zeq r 0 then 0 else modulus - r
  end.

Lemma P_mod_two_p_range:
  forall n p, 0 <= P_mod_two_p p n < two_power_nat n.

Lemma P_mod_two_p_eq:
  forall n p, P_mod_two_p p n = (Zpos p) mod (two_power_nat n).

Lemma Z_mod_modulus_range:
  forall x, 0 <= Z_mod_modulus x < modulus.

Lemma Z_mod_modulus_range':
  forall x, -1 < Z_mod_modulus x < modulus.

Lemma Z_mod_modulus_eq:
  forall x, Z_mod_modulus x = x mod modulus.

Definition unsigned (n: int) : Z := intval n.

Definition signed (n: int) : Z :=
  let x := unsigned n in
  if zlt x half_modulus then x else x - modulus.

Definition repr (x: Z) : int :=
  mkint (Z_mod_modulus x) (Z_mod_modulus_range' x).

Definition zero := repr 0.
Definition one  := repr 1.
Definition mone := repr (-1).
Definition iwordsize := repr zwordsize.

Lemma mkint_eq:
  forall x y Px Py, x = y -> mkint x Px = mkint y Py.

Lemma eq_dec: forall (x y: int), {x = y} + {x <> y}.

Definition eq (x y: int) : bool :=
  if zeq (unsigned x) (unsigned y) then true else false.
Definition lt (x y: int) : bool :=
  if zlt (signed x) (signed y) then true else false.
Definition ltu (x y: int) : bool :=
  if zlt (unsigned x) (unsigned y) then true else false.

Definition neg (x: int) : int := repr (- unsigned x).

Definition add (x y: int) : int :=
  repr (unsigned x + unsigned y).
Definition sub (x y: int) : int :=
  repr (unsigned x - unsigned y).
Definition mul (x y: int) : int :=
  repr (unsigned x * unsigned y).

Definition divs (x y: int) : int :=
  repr (Z.quot (signed x) (signed y)).
Definition mods (x y: int) : int :=
  repr (Z.rem (signed x) (signed y)).

Definition divu (x y: int) : int :=
  repr (unsigned x / unsigned y).
Definition modu (x y: int) : int :=
  repr ((unsigned x) mod (unsigned y)).

Definition and (x y: int): int := repr (Z.land (unsigned x) (unsigned y)).
Definition or (x y: int): int := repr (Z.lor (unsigned x) (unsigned y)).
Definition xor (x y: int) : int := repr (Z.lxor (unsigned x) (unsigned y)).

Definition not (x: int) : int := xor x mone.

Definition shl (x y: int): int := repr (Z.shiftl (unsigned x) (unsigned y)).
Definition shru (x y: int): int := repr (Z.shiftr (unsigned x) (unsigned y)).
Definition shr (x y: int): int := repr (Z.shiftr (signed x) (unsigned y)).

Definition rol (x y: int) : int :=
  let n := (unsigned y) mod zwordsize in
  repr (Z.lor (Z.shiftl (unsigned x) n) (Z.shiftr (unsigned x) (zwordsize - n))).
Definition ror (x y: int) : int :=
  let n := (unsigned y) mod zwordsize in
  repr (Z.lor (Z.shiftr (unsigned x) n) (Z.shiftl (unsigned x) (zwordsize - n))).

Definition rolm (x a m: int): int := and (rol x a) m.

Definition shrx (x y: int): int :=
  divs x (shl one y).

Definition mulhu (x y: int): int := repr ((unsigned x * unsigned y) / modulus).
Definition mulhs (x y: int): int := repr ((signed x * signed y) / modulus).

Definition negative (x: int): int :=
  if lt x zero then one else zero.

Definition add_carry (x y cin: int): int :=
  if zlt (unsigned x + unsigned y + unsigned cin) modulus then zero else one.

Definition add_overflow (x y cin: int): int :=
  let s := signed x + signed y + signed cin in
  if zle min_signed s && zle s max_signed then zero else one.

Definition sub_borrow (x y bin: int): int :=
  if zlt (unsigned x - unsigned y - unsigned bin) 0 then one else zero.

Definition sub_overflow (x y bin: int): int :=
  let s := signed x - signed y - signed bin in
  if zle min_signed s && zle s max_signed then zero else one.

Definition shr_carry (x y: int) : int :=
  if lt x zero && negb (eq (and x (sub (shl one y) one)) zero)
  then one else zero.

Definition Zshiftin (b: bool) (x: Z) : Z :=
  if b then Z.succ_double x else Z.double x.

Definition Zzero_ext (n: Z) (x: Z) : Z :=
  Z.iter n
    (fun rec x => Zshiftin (Z.odd x) (rec (Z.div2 x)))
    (fun x => 0)
    x.

Definition Zsign_ext (n: Z) (x: Z) : Z :=
  Z.iter (Z.pred n)
    (fun rec x => Zshiftin (Z.odd x) (rec (Z.div2 x)))
    (fun x => if Z.odd x then -1 else 0)
    x.

Definition zero_ext (n: Z) (x: int) : int := repr (Zzero_ext n (unsigned x)).

Definition sign_ext (n: Z) (x: int) : int := repr (Zsign_ext n (unsigned x)).

Fixpoint Z_one_bits (n: nat) (x: Z) (i: Z) {struct n}: list Z :=
  match n with
  | O => nil
  | S m =>
      if Z.odd x
      then i :: Z_one_bits m (Z.div2 x) (i+1)
      else Z_one_bits m (Z.div2 x) (i+1)
  end.

Definition one_bits (x: int) : list int :=
  List.map repr (Z_one_bits wordsize (unsigned x) 0).

Definition is_power2 (x: int) : option int :=
  match Z_one_bits wordsize (unsigned x) 0 with
  | i :: nil => Some (repr i)
  | _ => None
  end.

Definition cmp (c: comparison) (x y: int) : bool :=
  match c with
  | Ceq => eq x y
  | Cne => negb (eq x y)
  | Clt => lt x y
  | Cle => negb (lt y x)
  | Cgt => lt y x
  | Cge => negb (lt x y)
  end.

Definition cmpu (c: comparison) (x y: int) : bool :=
  match c with
  | Ceq => eq x y
  | Cne => negb (eq x y)
  | Clt => ltu x y
  | Cle => negb (ltu y x)
  | Cgt => ltu y x
  | Cge => negb (ltu x y)
  end.

Definition is_false (x: int) : Prop := x = zero.
Definition is_true  (x: int) : Prop := x <> zero.
Definition notbool  (x: int) : int  := if eq x zero then one else zero.

Definition divmodu2 (nhi nlo: int) (d: int) : option (int * int) :=
  if eq_dec d zero then None else
   (let (q, r) := Z.div_eucl (unsigned nhi * modulus + unsigned nlo) (unsigned d) in
    if zle q max_unsigned then Some(repr q, repr r) else None).

Definition divmods2 (nhi nlo: int) (d: int) : option (int * int) :=
  if eq_dec d zero then None else
   (let (q, r) := Z.quotrem (signed nhi * modulus + unsigned nlo) (signed d) in
    if zle min_signed q && zle q max_signed then Some(repr q, repr r) else None).

Remark half_modulus_power:
  half_modulus = two_p (zwordsize - 1).

Remark half_modulus_modulus: modulus = 2 * half_modulus.

Remark half_modulus_pos: half_modulus > 0.

Remark min_signed_neg: min_signed < 0.

Remark max_signed_pos: max_signed >= 0.

Remark wordsize_max_unsigned: zwordsize <= max_unsigned.

Remark two_wordsize_max_unsigned: 2 * zwordsize - 1 <= max_unsigned.

Remark max_signed_unsigned: max_signed < max_unsigned.

Lemma unsigned_repr_eq:
  forall x, unsigned (repr x) = Z.modulo x modulus.

Lemma signed_repr_eq:
  forall x, signed (repr x) = if zlt (Z.modulo x modulus) half_modulus then Z.modulo x modulus else Z.modulo x modulus - modulus.

Section EQ_MODULO.

Variable modul: Z.
Hypothesis modul_pos: modul > 0.

Definition eqmod (x y: Z) : Prop := exists k, x = k * modul + y.

Lemma eqmod_refl: forall x, eqmod x x.

Lemma eqmod_refl2: forall x y, x = y -> eqmod x y.

Lemma eqmod_sym: forall x y, eqmod x y -> eqmod y x.

Lemma eqmod_trans: forall x y z, eqmod x y -> eqmod y z -> eqmod x z.

Lemma eqmod_small_eq:
  forall x y, eqmod x y -> 0 <= x < modul -> 0 <= y < modul -> x = y.

Lemma eqmod_mod_eq:
  forall x y, eqmod x y -> x mod modul = y mod modul.

Lemma eqmod_mod:
  forall x, eqmod x (x mod modul).

Lemma eqmod_add:
  forall a b c d, eqmod a b -> eqmod c d -> eqmod (a + c) (b + d).

Lemma eqmod_neg:
  forall x y, eqmod x y -> eqmod (-x) (-y).

Lemma eqmod_sub:
  forall a b c d, eqmod a b -> eqmod c d -> eqmod (a - c) (b - d).

Lemma eqmod_mult:
  forall a b c d, eqmod a c -> eqmod b d -> eqmod (a * b) (c * d).

End EQ_MODULO.

Lemma eqmod_divides:
  forall n m x y, eqmod n x y -> Z.divide m n -> eqmod m x y.

Hint Resolve modulus_pos: ints.

Definition eqm := eqmod modulus.

Lemma eqm_refl: forall x, eqm x x.
Proof (eqmod_refl modulus).
Hint Resolve eqm_refl: ints.

Lemma eqm_refl2:
  forall x y, x = y -> eqm x y.
Proof (eqmod_refl2 modulus).
Hint Resolve eqm_refl2: ints.

Lemma eqm_sym: forall x y, eqm x y -> eqm y x.
Proof (eqmod_sym modulus).
Hint Resolve eqm_sym: ints.

Lemma eqm_trans: forall x y z, eqm x y -> eqm y z -> eqm x z.
Proof (eqmod_trans modulus).
Hint Resolve eqm_trans: ints.

Lemma eqm_small_eq:
  forall x y, eqm x y -> 0 <= x < modulus -> 0 <= y < modulus -> x = y.
Proof (eqmod_small_eq modulus).
Hint Resolve eqm_small_eq: ints.

Lemma eqm_add:
  forall a b c d, eqm a b -> eqm c d -> eqm (a + c) (b + d).
Proof (eqmod_add modulus).
Hint Resolve eqm_add: ints.

Lemma eqm_neg:
  forall x y, eqm x y -> eqm (-x) (-y).
Proof (eqmod_neg modulus).
Hint Resolve eqm_neg: ints.

Lemma eqm_sub:
  forall a b c d, eqm a b -> eqm c d -> eqm (a - c) (b - d).
Proof (eqmod_sub modulus).
Hint Resolve eqm_sub: ints.

Lemma eqm_mult:
  forall a b c d, eqm a c -> eqm b d -> eqm (a * b) (c * d).
Proof (eqmod_mult modulus).
Hint Resolve eqm_mult: ints.

Lemma eqm_samerepr: forall x y, eqm x y -> repr x = repr y.

Lemma eqm_unsigned_repr:
  forall z, eqm z (unsigned (repr z)).
Hint Resolve eqm_unsigned_repr: ints.

Lemma eqm_unsigned_repr_l:
  forall a b, eqm a b -> eqm (unsigned (repr a)) b.
Hint Resolve eqm_unsigned_repr_l: ints.

Lemma eqm_unsigned_repr_r:
  forall a b, eqm a b -> eqm a (unsigned (repr b)).
Hint Resolve eqm_unsigned_repr_r: ints.

Lemma eqm_signed_unsigned:
  forall x, eqm (signed x) (unsigned x).

Theorem unsigned_range:
  forall i, 0 <= unsigned i < modulus.
Hint Resolve unsigned_range: ints.

Theorem unsigned_range_2:
  forall i, 0 <= unsigned i <= max_unsigned.
Hint Resolve unsigned_range_2: ints.

Theorem signed_range:
  forall i, min_signed <= signed i <= max_signed.

Theorem repr_unsigned:
  forall i, repr (unsigned i) = i.
Hint Resolve repr_unsigned: ints.

Lemma repr_signed:
  forall i, repr (signed i) = i.
Hint Resolve repr_signed: ints.

Opaque repr.

Lemma eqm_repr_eq: forall x y, eqm x (unsigned y) -> repr x = y.

Theorem unsigned_repr:
  forall z, 0 <= z <= max_unsigned -> unsigned (repr z) = z.
Hint Resolve unsigned_repr: ints.

Theorem signed_repr:
  forall z, min_signed <= z <= max_signed -> signed (repr z) = z.

Theorem signed_eq_unsigned:
  forall x, unsigned x <= max_signed -> signed x = unsigned x.

Theorem signed_positive:
  forall x, signed x >= 0 <-> unsigned x <= max_signed.

Theorem unsigned_zero: unsigned zero = 0.

Theorem unsigned_one: unsigned one = 1.

Theorem unsigned_mone: unsigned mone = modulus - 1.

Theorem signed_zero: signed zero = 0.

Theorem signed_one: zwordsize > 1 -> signed one = 1.

Theorem signed_mone: signed mone = -1.

Theorem one_not_zero: one <> zero.

Theorem unsigned_repr_wordsize:
  unsigned iwordsize = zwordsize.

Theorem eq_sym:
  forall x y, eq x y = eq y x.

Theorem eq_spec: forall (x y: int), if eq x y then x = y else x <> y.

Theorem eq_true: forall x, eq x x = true.

Theorem eq_false: forall x y, x <> y -> eq x y = false.

Theorem eq_signed:
  forall x y, eq x y = if zeq (signed x) (signed y) then true else false.

Theorem add_unsigned: forall x y, add x y = repr (unsigned x + unsigned y).

Theorem add_signed: forall x y, add x y = repr (signed x + signed y).

Theorem add_commut: forall x y, add x y = add y x.

Theorem add_zero: forall x, add x zero = x.

Theorem add_zero_l: forall x, add zero x = x.

Theorem add_assoc: forall x y z, add (add x y) z = add x (add y z).

Theorem add_permut: forall x y z, add x (add y z) = add y (add x z).

Theorem add_neg_zero: forall x, add x (neg x) = zero.

Theorem unsigned_add_carry:
  forall x y,
  unsigned (add x y) = unsigned x + unsigned y - unsigned (add_carry x y zero) * modulus.

Corollary unsigned_add_either:
  forall x y,
  unsigned (add x y) = unsigned x + unsigned y
  \/ unsigned (add x y) = unsigned x + unsigned y - modulus.

Theorem neg_repr: forall z, neg (repr z) = repr (-z).

Theorem neg_zero: neg zero = zero.

Theorem neg_involutive: forall x, neg (neg x) = x.

Theorem neg_add_distr: forall x y, neg(add x y) = add (neg x) (neg y).

Theorem sub_zero_l: forall x, sub x zero = x.

Theorem sub_zero_r: forall x, sub zero x = neg x.

Theorem sub_add_opp: forall x y, sub x y = add x (neg y).

Theorem sub_idem: forall x, sub x x = zero.

Theorem sub_add_l: forall x y z, sub (add x y) z = add (sub x z) y.

Theorem sub_add_r: forall x y z, sub x (add y z) = add (sub x z) (neg y).

Theorem sub_shifted:
  forall x y z,
  sub (add x z) (add y z) = sub x y.

Theorem sub_signed:
  forall x y, sub x y = repr (signed x - signed y).

Theorem unsigned_sub_borrow:
  forall x y,
  unsigned (sub x y) = unsigned x - unsigned y + unsigned (sub_borrow x y zero) * modulus.

Theorem mul_commut: forall x y, mul x y = mul y x.

Theorem mul_zero: forall x, mul x zero = zero.

Theorem mul_one: forall x, mul x one = x.

Theorem mul_mone: forall x, mul x mone = neg x.

Theorem mul_assoc: forall x y z, mul (mul x y) z = mul x (mul y z).

Theorem mul_add_distr_l:
  forall x y z, mul (add x y) z = add (mul x z) (mul y z).

Theorem mul_add_distr_r:
  forall x y z, mul x (add y z) = add (mul x y) (mul x z).

Theorem neg_mul_distr_l:
  forall x y, neg(mul x y) = mul (neg x) y.

Theorem neg_mul_distr_r:
   forall x y, neg(mul x y) = mul x (neg y).

Theorem mul_signed:
  forall x y, mul x y = repr (signed x * signed y).

Lemma modu_divu_Euclid:
  forall x y, y <> zero -> x = add (mul (divu x y) y) (modu x y).

Theorem modu_divu:
  forall x y, y <> zero -> modu x y = sub x (mul (divu x y) y).

Lemma mods_divs_Euclid:
  forall x y, x = add (mul (divs x y) y) (mods x y).

Theorem mods_divs:
  forall x y, mods x y = sub x (mul (divs x y) y).

Theorem divu_one:
  forall x, divu x one = x.

Theorem divs_one:
  forall x, zwordsize > 1 -> divs x one = x.

Theorem modu_one:
  forall x, modu x one = zero.

Theorem divs_mone:
  forall x, divs x mone = neg x.

Theorem mods_mone:
  forall x, mods x mone = zero.

Theorem divmodu2_divu_modu:
  forall n d,
  d <> zero -> divmodu2 zero n d = Some (divu n d, modu n d).

Lemma unsigned_signed:
  forall n, unsigned n = if lt n zero then signed n + modulus else signed n.

Theorem divmods2_divs_mods:
  forall n d,
  d <> zero -> n <> repr min_signed \/ d <> mone ->
  divmods2 (if lt n zero then mone else zero) n d = Some (divs n d, mods n d).

Remark Ztestbit_0: forall n, Z.testbit 0 n = false.
Proof Z.testbit_0_l.

Remark Ztestbit_1: forall n, Z.testbit 1 n = zeq n 0.

Remark Ztestbit_m1: forall n, 0 <= n -> Z.testbit (-1) n = true.

Remark Zshiftin_spec:
  forall b x, Zshiftin b x = 2 * x + (if b then 1 else 0).

Remark Zshiftin_inj:
  forall b1 x1 b2 x2,
  Zshiftin b1 x1 = Zshiftin b2 x2 -> b1 = b2 /\ x1 = x2.

Remark Zdecomp:
  forall x, x = Zshiftin (Z.odd x) (Z.div2 x).

Remark Ztestbit_shiftin:
  forall b x n,
  0 <= n ->
  Z.testbit (Zshiftin b x) n = if zeq n 0 then b else Z.testbit x (Z.pred n).

Remark Ztestbit_shiftin_base:
  forall b x, Z.testbit (Zshiftin b x) 0 = b.

Remark Ztestbit_shiftin_succ:
  forall b x n, 0 <= n -> Z.testbit (Zshiftin b x) (Z.succ n) = Z.testbit x n.

Remark Ztestbit_eq:
  forall n x, 0 <= n ->
  Z.testbit x n = if zeq n 0 then Z.odd x else Z.testbit (Z.div2 x) (Z.pred n).

Remark Ztestbit_base:
  forall x, Z.testbit x 0 = Z.odd x.

Remark Ztestbit_succ:
  forall n x, 0 <= n -> Z.testbit x (Z.succ n) = Z.testbit (Z.div2 x) n.

Lemma eqmod_same_bits:
  forall n x y,
  (forall i, 0 <= i < Z.of_nat n -> Z.testbit x i = Z.testbit y i) ->

Lemma eqm_same_bits:
  forall x y,
  (forall i, 0 <= i < zwordsize -> Z.testbit x i = Z.testbit y i) ->
  eqm x y.
Proof (eqmod_same_bits wordsize).

Lemma same_bits_eqmod:
  forall n x y i,
  eqmod (two_power_nat n) x y -> 0 <= i < Z.of_nat n ->

Lemma same_bits_eqm:
  forall x y i,
  eqm x y ->
  0 <= i < zwordsize ->
  Z.testbit x i = Z.testbit y i.
Proof (same_bits_eqmod wordsize).

Remark two_power_nat_infinity:
  forall x, 0 <= x -> exists n, x < two_power_nat n.

Lemma equal_same_bits:
  forall x y,
  (forall i, 0 <= i -> Z.testbit x i = Z.testbit y i) ->

Lemma Z_one_complement:
  forall i, 0 <= i ->
  forall x, Z.testbit (-x-1) i = negb (Z.testbit x i).

Lemma Ztestbit_above:
  forall n x i,
  0 <= x < two_power_nat n ->
  i >= Z.of_nat n ->

Lemma Ztestbit_above_neg:
  forall n x i,
  -two_power_nat n <= x < 0 ->
  i >= Z.of_nat n ->

Lemma Zsign_bit:
  forall n x,
  0 <= x < two_power_nat (S n) ->
  Z.testbit x (Z.of_nat n) = if zlt x (two_power_nat n) then false else true.

Lemma Zshiftin_ind:
  forall (P: Z -> Prop),
  P 0 ->
  (forall b x, 0 <= x -> P x -> P (Zshiftin b x)) ->
  forall x, 0 <= x -> P x.

Lemma Zshiftin_pos_ind:
  forall (P: Z -> Prop),
  P 1 ->
  (forall b x, 0 < x -> P x -> P (Zshiftin b x)) ->
  forall x, 0 < x -> P x.

Lemma Ztestbit_le:
  forall x y,
  0 <= y ->
  (forall i, 0 <= i -> Z.testbit x i = true -> Z.testbit y i = true) ->

Definition testbit (x: int) (i: Z) : bool := Z.testbit (unsigned x) i.

Lemma testbit_repr:
  forall x i,
  0 <= i < zwordsize ->
  testbit (repr x) i = Z.testbit x i.

Lemma same_bits_eq:
  forall x y,
  (forall i, 0 <= i < zwordsize -> testbit x i = testbit y i) ->
  x = y.

Lemma bits_above:
  forall x i, i >= zwordsize -> testbit x i = false.

Lemma bits_zero:
  forall i, testbit zero i = false.

Remark bits_one: forall n, testbit one n = zeq n 0.

Lemma bits_mone:
  forall i, 0 <= i < zwordsize -> testbit mone i = true.

Hint Rewrite bits_zero bits_mone : ints.

Ltac bit_solve :=
  intros; apply same_bits_eq; intros; autorewrite with ints; auto with bool.

Lemma sign_bit_of_unsigned:
  forall x, testbit x (zwordsize - 1) = if zlt (unsigned x) half_modulus then false else true.

Lemma bits_signed:
  forall x i, 0 <= i ->
  Z.testbit (signed x) i = testbit x (if zlt i zwordsize then i else zwordsize - 1).

Lemma bits_le:
  forall x y,
  (forall i, 0 <= i < zwordsize -> testbit x i = true -> testbit y i = true) ->
  unsigned x <= unsigned y.

Lemma bits_and:
  forall x y i, 0 <= i < zwordsize ->
  testbit (and x y) i = testbit x i && testbit y i.

Lemma bits_or:
  forall x y i, 0 <= i < zwordsize ->
  testbit (or x y) i = testbit x i || testbit y i.

Lemma bits_xor:
  forall x y i, 0 <= i < zwordsize ->
  testbit (xor x y) i = xorb (testbit x i) (testbit y i).

Lemma bits_not:
  forall x i, 0 <= i < zwordsize ->
  testbit (not x) i = negb (testbit x i).

Hint Rewrite bits_and bits_or bits_xor bits_not: ints.

Theorem and_commut: forall x y, and x y = and y x.

Theorem and_assoc: forall x y z, and (and x y) z = and x (and y z).

Theorem and_zero: forall x, and x zero = zero.

Corollary and_zero_l: forall x, and zero x = zero.

Theorem and_mone: forall x, and x mone = x.

Corollary and_mone_l: forall x, and mone x = x.

Theorem and_idem: forall x, and x x = x.

Theorem or_commut: forall x y, or x y = or y x.

Theorem or_assoc: forall x y z, or (or x y) z = or x (or y z).

Theorem or_zero: forall x, or x zero = x.

Corollary or_zero_l: forall x, or zero x = x.

Theorem or_mone: forall x, or x mone = mone.

Theorem or_idem: forall x, or x x = x.

Theorem and_or_distrib:
  forall x y z,
  and x (or y z) = or (and x y) (and x z).

Corollary and_or_distrib_l:
  forall x y z,
  and (or x y) z = or (and x z) (and y z).

Theorem or_and_distrib:
  forall x y z,
  or x (and y z) = and (or x y) (or x z).

Corollary or_and_distrib_l:
  forall x y z,
  or (and x y) z = and (or x z) (or y z).

Theorem and_or_absorb: forall x y, and x (or x y) = x.

Theorem or_and_absorb: forall x y, or x (and x y) = x.

Theorem xor_commut: forall x y, xor x y = xor y x.

Theorem xor_assoc: forall x y z, xor (xor x y) z = xor x (xor y z).

Theorem xor_zero: forall x, xor x zero = x.

Corollary xor_zero_l: forall x, xor zero x = x.

Theorem xor_idem: forall x, xor x x = zero.

Theorem xor_zero_one: xor zero one = one.

Theorem xor_one_one: xor one one = zero.

Theorem xor_zero_equal: forall x y, xor x y = zero -> x = y.

Theorem xor_is_zero: forall x y, eq (xor x y) zero = eq x y.

Theorem and_xor_distrib:
  forall x y z,
  and x (xor y z) = xor (and x y) (and x z).

Theorem and_le:
  forall x y, unsigned (and x y) <= unsigned x.

Theorem or_le:
  forall x y, unsigned x <= unsigned (or x y).

Theorem not_involutive:
  forall (x: int), not (not x) = x.

Theorem not_zero:
  not zero = mone.

Theorem not_mone:
  not mone = zero.

Theorem not_or_and_not:
  forall x y, not (or x y) = and (not x) (not y).

Theorem not_and_or_not:
  forall x y, not (and x y) = or (not x) (not y).

Theorem and_not_self:
  forall x, and x (not x) = zero.

Theorem or_not_self:
  forall x, or x (not x) = mone.

Theorem xor_not_self:
  forall x, xor x (not x) = mone.

Lemma unsigned_not:
  forall x, unsigned (not x) = max_unsigned - unsigned x.

Theorem not_neg:
  forall x, not x = add (neg x) mone.

Theorem neg_not:
  forall x, neg x = add (not x) one.

Theorem sub_add_not:
  forall x y, sub x y = add (add x (not y)) one.

Theorem sub_add_not_3:
  forall x y b,
  b = zero \/ b = one ->
  sub (sub x y) b = add (add x (not y)) (xor b one).

Theorem sub_borrow_add_carry:
  forall x y b,
  b = zero \/ b = one ->
  sub_borrow x y b = xor (add_carry x (not y) (xor b one)) one.

Lemma Z_add_is_or:
  forall i, 0 <= i ->
  forall x y,
  (forall j, 0 <= j <= i -> Z.testbit x j && Z.testbit y j = false) ->

Theorem add_is_or:
  forall x y,
  and x y = zero ->
  add x y = or x y.

Theorem xor_is_or:
  forall x y, and x y = zero -> xor x y = or x y.

Theorem add_is_xor:
  forall x y,
  and x y = zero ->
  add x y = xor x y.

Theorem add_and:
  forall x y z,
  and y z = zero ->
  add (and x y) (and x z) = and x (or y z).

Lemma bits_shl:
  forall x y i,
  0 <= i < zwordsize ->
  testbit (shl x y) i =
  if zlt i (unsigned y) then false else testbit x (i - unsigned y).

Lemma bits_shru:
  forall x y i,
  0 <= i < zwordsize ->
  testbit (shru x y) i =
  if zlt (i + unsigned y) zwordsize then testbit x (i + unsigned y) else false.

Lemma bits_shr:
  forall x y i,
  0 <= i < zwordsize ->
  testbit (shr x y) i =
  testbit x (if zlt (i + unsigned y) zwordsize then i + unsigned y else zwordsize - 1).

Hint Rewrite bits_shl bits_shru bits_shr: ints.

Theorem shl_zero: forall x, shl x zero = x.

Lemma bitwise_binop_shl:
  forall f f' x y n,
  (forall x y i, 0 <= i < zwordsize -> testbit (f x y) i = f' (testbit x i) (testbit y i)) ->
  f' false false = false ->
  f (shl x n) (shl y n) = shl (f x y) n.

Theorem and_shl:
  forall x y n,
  and (shl x n) (shl y n) = shl (and x y) n.

Theorem or_shl:
  forall x y n,
  or (shl x n) (shl y n) = shl (or x y) n.

Theorem xor_shl:
  forall x y n,
  xor (shl x n) (shl y n) = shl (xor x y) n.

Lemma ltu_inv:
  forall x y, ltu x y = true -> 0 <= unsigned x < unsigned y.

Lemma ltu_iwordsize_inv:
  forall x, ltu x iwordsize = true -> 0 <= unsigned x < zwordsize.

Theorem shl_shl:
  forall x y z,
  ltu y iwordsize = true ->
  ltu z iwordsize = true ->
  ltu (add y z) iwordsize = true ->
  shl (shl x y) z = shl x (add y z).

Theorem sub_ltu:
  forall x y,
    ltu x y = true ->
    0 <= unsigned y - unsigned x <= unsigned y.

Theorem shru_zero: forall x, shru x zero = x.

Lemma bitwise_binop_shru:
  forall f f' x y n,
  (forall x y i, 0 <= i < zwordsize -> testbit (f x y) i = f' (testbit x i) (testbit y i)) ->
  f' false false = false ->
  f (shru x n) (shru y n) = shru (f x y) n.

Theorem and_shru:
  forall x y n,
  and (shru x n) (shru y n) = shru (and x y) n.

Theorem or_shru:
  forall x y n,
  or (shru x n) (shru y n) = shru (or x y) n.

Theorem xor_shru:
  forall x y n,
  xor (shru x n) (shru y n) = shru (xor x y) n.

Theorem shru_shru:
  forall x y z,
  ltu y iwordsize = true ->
  ltu z iwordsize = true ->
  ltu (add y z) iwordsize = true ->
  shru (shru x y) z = shru x (add y z).

Theorem shr_zero: forall x, shr x zero = x.

Lemma bitwise_binop_shr:
  forall f f' x y n,
  (forall x y i, 0 <= i < zwordsize -> testbit (f x y) i = f' (testbit x i) (testbit y i)) ->
  f (shr x n) (shr y n) = shr (f x y) n.

Theorem and_shr:
  forall x y n,
  and (shr x n) (shr y n) = shr (and x y) n.

Theorem or_shr:
  forall x y n,
  or (shr x n) (shr y n) = shr (or x y) n.

Theorem xor_shr:
  forall x y n,
  xor (shr x n) (shr y n) = shr (xor x y) n.

Theorem shr_shr:
  forall x y z,
  ltu y iwordsize = true ->
  ltu z iwordsize = true ->
  ltu (add y z) iwordsize = true ->
  shr (shr x y) z = shr x (add y z).

Theorem and_shr_shru:
  forall x y z,
  and (shr x z) (shru y z) = shru (and x y) z.

Theorem shr_and_shru_and:
  forall x y z,
  shru (shl z y) y = z ->
  and (shr x y) z = and (shru x y) z.

Theorem shru_lt_zero:
  forall x,
  shru x (repr (zwordsize - 1)) = if lt x zero then one else zero.

Theorem shr_lt_zero:
  forall x,
  shr x (repr (zwordsize - 1)) = if lt x zero then mone else zero.

Lemma bits_rol:
  forall x y i,
  0 <= i < zwordsize ->
  testbit (rol x y) i = testbit x ((i - unsigned y) mod zwordsize).

Lemma bits_ror:
  forall x y i,
  0 <= i < zwordsize ->
  testbit (ror x y) i = testbit x ((i + unsigned y) mod zwordsize).

Hint Rewrite bits_rol bits_ror: ints.

Theorem shl_rolm:
  forall x n,
  ltu n iwordsize = true ->
  shl x n = rolm x n (shl mone n).

Theorem shru_rolm:
  forall x n,
  ltu n iwordsize = true ->
  shru x n = rolm x (sub iwordsize n) (shru mone n).

Theorem rol_zero:
  forall x,
  rol x zero = x.

Lemma bitwise_binop_rol:
  forall f f' x y n,
  (forall x y i, 0 <= i < zwordsize -> testbit (f x y) i = f' (testbit x i) (testbit y i)) ->
  rol (f x y) n = f (rol x n) (rol y n).

Theorem rol_and:
  forall x y n,
  rol (and x y) n = and (rol x n) (rol y n).

Theorem rol_or:
  forall x y n,
  rol (or x y) n = or (rol x n) (rol y n).

Theorem rol_xor:
  forall x y n,
  rol (xor x y) n = xor (rol x n) (rol y n).

Theorem rol_rol:
  forall x n m,
  Z.divide zwordsize modulus ->

Theorem rolm_zero:
  forall x m,
  rolm x zero m = and x m.

Theorem rolm_rolm:
  forall x n1 m1 n2 m2,
  Z.divide zwordsize modulus ->

Theorem or_rolm:
  forall x n m1 m2,
  or (rolm x n m1) (rolm x n m2) = rolm x n (or m1 m2).

Theorem ror_rol:
  forall x y,
  ltu y iwordsize = true ->
  ror x y = rol x (sub iwordsize y).

Theorem ror_rol_neg:
  forall x y, (zwordsize | modulus) -> ror x y = rol x (neg y).

Theorem or_ror:
  forall x y z,
  ltu y iwordsize = true ->
  ltu z iwordsize = true ->
  add y z = iwordsize ->
  ror x z = or (shl x y) (shru x z).

Fixpoint powerserie (l: list Z): Z :=
  match l with
  | nil => 0
  | x :: xs => two_p x + powerserie xs
  end.

Lemma Z_one_bits_powerserie:
  forall x, 0 <= x < modulus -> x = powerserie (Z_one_bits wordsize x 0).

Lemma Z_one_bits_range:
  forall x i, In i (Z_one_bits wordsize x 0) -> 0 <= i < zwordsize.

Lemma is_power2_rng:
  forall n logn,
  is_power2 n = Some logn ->
  0 <= unsigned logn < zwordsize.

Theorem is_power2_range:
  forall n logn,
  is_power2 n = Some logn -> ltu logn iwordsize = true.

Lemma is_power2_correct:
  forall n logn,
  is_power2 n = Some logn ->
  unsigned n = two_p (unsigned logn).

Remark two_p_range:
  forall n,
  0 <= n < zwordsize ->
  0 <= two_p n <= max_unsigned.

Remark Z_one_bits_zero:
  forall n i, Z_one_bits n 0 i = nil.

Remark Z_one_bits_two_p:
  forall n x i,
  0 <= x < Z.of_nat n ->

Lemma is_power2_two_p:
  forall n, 0 <= n < zwordsize ->
  is_power2 (repr (two_p n)) = Some (repr n).

Lemma Zshiftl_mul_two_p:
  forall x n, 0 <= n -> Z.shiftl x n = x * two_p n.

Lemma shl_mul_two_p:
  forall x y,
  shl x y = mul x (repr (two_p (unsigned y))).

Theorem shl_mul:
  forall x y,
  shl x y = mul x (shl one y).

Theorem mul_pow2:
  forall x n logn,
  is_power2 n = Some logn ->
  mul x n = shl x logn.

Theorem shifted_or_is_add:
  forall x y n,
  0 <= n < zwordsize ->
  unsigned y < two_p n ->
  or (shl x (repr n)) y = repr(unsigned x * two_p n + unsigned y).

Lemma Zshiftr_div_two_p:
  forall x n, 0 <= n -> Z.shiftr x n = x / two_p n.

Lemma shru_div_two_p:
  forall x y,
  shru x y = repr (unsigned x / two_p (unsigned y)).

Theorem divu_pow2:
  forall x n logn,
  is_power2 n = Some logn ->
  divu x n = shru x logn.

Lemma shr_div_two_p:
  forall x y,
  shr x y = repr (signed x / two_p (unsigned y)).

Theorem divs_pow2:
  forall x n logn,
  is_power2 n = Some logn ->
  divs x n = shrx x logn.

Lemma Ztestbit_mod_two_p:
  forall n x i,
  0 <= n -> 0 <= i ->
  Z.testbit (x mod (two_p n)) i = if zlt i n then Z.testbit x i else false.

Corollary Ztestbit_two_p_m1:
  forall n i, 0 <= n -> 0 <= i ->
  Z.testbit (two_p n - 1) i = if zlt i n then true else false.

Theorem modu_and:
  forall x n logn,
  is_power2 n = Some logn ->
  modu x n = and x (sub n one).

Lemma Zquot_Zdiv:
  forall x y,
  y > 0 ->
  Z.quot x y = if zlt x 0 then (x + y - 1) / y else x / y.

Theorem shrx_zero:
  forall x, zwordsize > 1 -> shrx x zero = x.

Theorem shrx_shr:
  forall x y,
  ltu y (repr (zwordsize - 1)) = true ->
  shrx x y = shr (if lt x zero then add x (sub (shl one y) one) else x) y.

Theorem shrx_shr_2:
  forall x y,
  ltu y (repr (zwordsize - 1)) = true ->
  shrx x y = shr (add x (shru (shr x (repr (zwordsize - 1))) (sub iwordsize y))) y.

Lemma Zdiv_shift:
  forall x y, y > 0 ->
  (x + (y - 1)) / y = x / y + if zeq (Z.modulo x y) 0 then 0 else 1.

Theorem shrx_carry:
  forall x y,
  ltu y (repr (zwordsize - 1)) = true ->
  shrx x y = add (shr x y) (shr_carry x y).

Lemma shr_shru_positive:
  forall x y,
  signed x >= 0 ->
  shr x y = shru x y.

Lemma and_positive:
  forall x y, signed y >= 0 -> signed (and x y) >= 0.

Theorem shr_and_is_shru_and:
  forall x y z,
  lt y zero = false -> shr (and x y) z = shru (and x y) z.

Lemma Ziter_base:
  forall (A: Type) n (f: A -> A) x, n <= 0 -> Z.iter n f x = x.

Lemma Ziter_succ:
  forall (A: Type) n (f: A -> A) x,
  0 <= n -> Z.iter (Z.succ n) f x = f (Z.iter n f x).

Lemma Znatlike_ind:
  forall (P: Z -> Prop),
  (forall n, n <= 0 -> P n) ->
  (forall n, 0 <= n -> P n -> P (Z.succ n)) ->

Lemma Zzero_ext_spec:
  forall n x i, 0 <= i ->
  Z.testbit (Zzero_ext n x) i = if zlt i n then Z.testbit x i else false.

Lemma bits_zero_ext:
  forall n x i, 0 <= i ->
  testbit (zero_ext n x) i = if zlt i n then testbit x i else false.

Lemma Zsign_ext_spec:
  forall n x i, 0 <= i -> 0 < n ->
  Z.testbit (Zsign_ext n x) i = Z.testbit x (if zlt i n then i else n - 1).

Lemma bits_sign_ext:
  forall n x i, 0 <= i < zwordsize -> 0 < n ->
  testbit (sign_ext n x) i = testbit x (if zlt i n then i else n - 1).

Hint Rewrite bits_zero_ext bits_sign_ext: ints.

Theorem zero_ext_above:
  forall n x, n >= zwordsize -> zero_ext n x = x.

Theorem sign_ext_above:
  forall n x, n >= zwordsize -> sign_ext n x = x.

Theorem zero_ext_and:
  forall n x, 0 <= n -> zero_ext n x = and x (repr (two_p n - 1)).

Theorem zero_ext_mod:
  forall n x, 0 <= n < zwordsize ->
  unsigned (zero_ext n x) = Z.modulo (unsigned x) (two_p n).

Theorem zero_ext_widen:
  forall x n n', 0 <= n <= n' ->
  zero_ext n' (zero_ext n x) = zero_ext n x.

Theorem sign_ext_widen:
  forall x n n', 0 < n  <= n' ->
  sign_ext n' (sign_ext n x) = sign_ext n x.

Theorem sign_zero_ext_widen:
  forall x n n', 0 <= n < n' ->
  sign_ext n' (zero_ext n x) = zero_ext n x.

Theorem zero_ext_narrow:
  forall x n n', 0 <= n <= n' ->
  zero_ext n (zero_ext n' x) = zero_ext n x.

Theorem sign_ext_narrow:
  forall x n n', 0 < n <= n' ->
  sign_ext n (sign_ext n' x) = sign_ext n x.

Theorem zero_sign_ext_narrow:
  forall x n n', 0 < n <= n' ->
  zero_ext n (sign_ext n' x) = zero_ext n x.

Theorem zero_ext_idem:
  forall n x, 0 <= n -> zero_ext n (zero_ext n x) = zero_ext n x.

Theorem sign_ext_idem:
  forall n x, 0 < n -> sign_ext n (sign_ext n x) = sign_ext n x.

Theorem sign_ext_zero_ext:
  forall n x, 0 < n -> sign_ext n (zero_ext n x) = sign_ext n x.

Theorem zero_ext_sign_ext:
  forall n x, 0 < n -> zero_ext n (sign_ext n x) = zero_ext n x.

Theorem sign_ext_equal_if_zero_equal:
  forall n x y, 0 < n ->
  zero_ext n x = zero_ext n y ->
  sign_ext n x = sign_ext n y.

Theorem zero_ext_shru_shl:
  forall n x,
  0 < n < zwordsize ->
  let y := repr (zwordsize - n) in
  zero_ext n x = shru (shl x y) y.

Theorem sign_ext_shr_shl:
  forall n x,
  0 < n < zwordsize ->
  let y := repr (zwordsize - n) in
  sign_ext n x = shr (shl x y) y.

Lemma zero_ext_range:
  forall n x, 0 <= n < zwordsize -> 0 <= unsigned (zero_ext n x) < two_p n.

Lemma eqmod_zero_ext:
  forall n x, 0 <= n < zwordsize -> eqmod (two_p n) (unsigned (zero_ext n x)) (unsigned x).

Lemma sign_ext_range:
  forall n x, 0 < n < zwordsize -> -two_p (n-1) <= signed (sign_ext n x) < two_p (n-1).

Lemma eqmod_sign_ext':
  forall n x, 0 < n < zwordsize ->
  eqmod (two_p n) (unsigned (sign_ext n x)) (unsigned x).

Lemma eqmod_sign_ext:
  forall n x, 0 < n < zwordsize ->
  eqmod (two_p n) (signed (sign_ext n x)) (unsigned x).

Theorem one_bits_range:
  forall x i, In i (one_bits x) -> ltu i iwordsize = true.

Fixpoint int_of_one_bits (l: list int) : int :=
  match l with
  | nil => zero
  | a :: b => add (shl one a) (int_of_one_bits b)
  end.

Theorem one_bits_decomp:
  forall x, x = int_of_one_bits (one_bits x).

Theorem negate_cmp:
  forall c x y, cmp (negate_comparison c) x y = negb (cmp c x y).

Theorem negate_cmpu:
  forall c x y, cmpu (negate_comparison c) x y = negb (cmpu c x y).

Theorem swap_cmp:
  forall c x y, cmp (swap_comparison c) x y = cmp c y x.

Theorem swap_cmpu:
  forall c x y, cmpu (swap_comparison c) x y = cmpu c y x.

Lemma translate_eq:
  forall x y d,
  eq (add x d) (add y d) = eq x y.

Lemma translate_ltu:
  forall x y d,
  0 <= unsigned x + unsigned d <= max_unsigned ->
  0 <= unsigned y + unsigned d <= max_unsigned ->
  ltu (add x d) (add y d) = ltu x y.

Theorem translate_cmpu:
  forall c x y d,
  0 <= unsigned x + unsigned d <= max_unsigned ->
  0 <= unsigned y + unsigned d <= max_unsigned ->
  cmpu c (add x d) (add y d) = cmpu c x y.

Lemma translate_lt:
  forall x y d,
  min_signed <= signed x + signed d <= max_signed ->
  min_signed <= signed y + signed d <= max_signed ->
  lt (add x d) (add y d) = lt x y.

Theorem translate_cmp:
  forall c x y d,
  min_signed <= signed x + signed d <= max_signed ->
  min_signed <= signed y + signed d <= max_signed ->
  cmp c (add x d) (add y d) = cmp c x y.

Theorem notbool_isfalse_istrue:
  forall x, is_false x -> is_true (notbool x).

Theorem notbool_istrue_isfalse:
  forall x, is_true x -> is_false (notbool x).

Theorem ltu_range_test:
  forall x y,
  ltu x y = true -> unsigned y <= max_signed ->
  0 <= signed x < unsigned y.

Theorem lt_sub_overflow:
  forall x y,
  xor (sub_overflow x y zero) (negative (sub x y)) = if lt x y then one else zero.

Lemma signed_eq:
  forall x y, eq x y = zeq (signed x) (signed y).

Lemma not_lt:
  forall x y, negb (lt y x) = (lt x y || eq x y).

Lemma lt_not:
  forall x y, lt y x = negb (lt x y) && negb (eq x y).

Lemma not_ltu:
  forall x y, negb (ltu y x) = (ltu x y || eq x y).

Lemma ltu_not:
  forall x y, ltu y x = negb (ltu x y) && negb (eq x y).

Definition no_overlap (ofs1: int) (sz1: Z) (ofs2: int) (sz2: Z) : bool :=
  let x1 := unsigned ofs1 in let x2 := unsigned ofs2 in
     zlt (x1 + sz1) modulus && zlt (x2 + sz2) modulus
  && (zle (x1 + sz1) x2 || zle (x2 + sz2) x1).

Lemma no_overlap_sound:
  forall ofs1 sz1 ofs2 sz2 base,
  sz1 > 0 -> sz2 > 0 -> no_overlap ofs1 sz1 ofs2 sz2 = true ->
  unsigned (add base ofs1) + sz1 <= unsigned (add base ofs2)
  \/ unsigned (add base ofs2) + sz2 <= unsigned (add base ofs1).

Definition Zsize (x: Z) : Z :=
  match x with
  | Zpos p => Zpos (Pos.size p)
  | _ => 0
  end.

Definition size (x: int) : Z := Zsize (unsigned x).

Remark Zsize_pos: forall x, 0 <= Zsize x.

Remark Zsize_pos': forall x, 0 < x -> 0 < Zsize x.

Lemma Zsize_shiftin:
  forall b x, 0 < x -> Zsize (Zshiftin b x) = Z.succ (Zsize x).

Lemma Ztestbit_size_1:
  forall x, 0 < x -> Z.testbit x (Z.pred (Zsize x)) = true.

Lemma Ztestbit_size_2:
  forall x, 0 <= x -> forall i, i >= Zsize x -> Z.testbit x i = false.

Lemma Zsize_interval_1:
  forall x, 0 <= x -> 0 <= x < two_p (Zsize x).

Lemma Zsize_interval_2:
  forall x n, 0 <= n -> 0 <= x < two_p n -> n >= Zsize x.

Lemma Zsize_monotone:
  forall x y, 0 <= x <= y -> Zsize x <= Zsize y.

Theorem size_zero: size zero = 0.

Theorem bits_size_1:
  forall x, x = zero \/ testbit x (Z.pred (size x)) = true.

Theorem bits_size_2:
  forall x i, size x <= i -> testbit x i = false.

Theorem size_range:
  forall x, 0 <= size x <= zwordsize.

Theorem bits_size_3:
  forall x n,
  0 <= n ->
  (forall i, n <= i < zwordsize -> testbit x i = false) ->
  size x <= n.

Theorem bits_size_4:
  forall x n,
  0 <= n ->
  testbit x (Z.pred n) = true ->

Theorem size_interval_1:
  forall x, 0 <= unsigned x < two_p (size x).

Theorem size_interval_2:
  forall x n, 0 <= n -> 0 <= unsigned x < two_p n -> n >= size x.

Theorem size_and:
  forall a b, size (and a b) <= Z.min (size a) (size b).

Corollary and_interval:
  forall a b, 0 <= unsigned (and a b) < two_p (Z.min (size a) (size b)).

Theorem size_or:
  forall a b, size (or a b) = Z.max (size a) (size b).

Corollary or_interval:
  forall a b, 0 <= unsigned (or a b) < two_p (Z.max (size a) (size b)).

Theorem size_xor:
  forall a b, size (xor a b) <= Z.max (size a) (size b).

Corollary xor_interval:
  forall a b, 0 <= unsigned (xor a b) < two_p (Z.max (size a) (size b)).

End Make.

Module Wordsize_32.
  Definition wordsize := 32%nat.
  Remark wordsize_not_zero: wordsize <> 0%nat.
End Wordsize_32.

Strategy opaque [Wordsize_32.wordsize].

Module Int := Make(Wordsize_32).

Strategy 0 [Wordsize_32.wordsize].

Notation int := Int.int.

Remark int_wordsize_divides_modulus:
  Z.divide (Z.of_nat Int.wordsize) Int.modulus.

Module Wordsize_8.
  Definition wordsize := 8%nat.
  Remark wordsize_not_zero: wordsize <> 0%nat.
End Wordsize_8.

Strategy opaque [Wordsize_8.wordsize].

Module Byte := Make(Wordsize_8).

Strategy 0 [Wordsize_8.wordsize].

Notation byte := Byte.int.

Module Wordsize_64.
  Definition wordsize := 64%nat.
  Remark wordsize_not_zero: wordsize <> 0%nat.
End Wordsize_64.

Strategy opaque [Wordsize_64.wordsize].

Module Int64.

Include Make(Wordsize_64).

Definition iwordsize': Int.int := Int.repr zwordsize.

Definition shl' (x: int) (y: Int.int): int :=
  repr (Z.shiftl (unsigned x) (Int.unsigned y)).
Definition shru' (x: int) (y: Int.int): int :=
  repr (Z.shiftr (unsigned x) (Int.unsigned y)).
Definition shr' (x: int) (y: Int.int): int :=
  repr (Z.shiftr (signed x) (Int.unsigned y)).
Definition rol' (x: int) (y: Int.int): int :=
  rol x (repr (Int.unsigned y)).
Definition shrx' (x: int) (y: Int.int): int :=
  divs x (shl' one y).
Definition shr_carry' (x: int) (y: Int.int): int :=
  if lt x zero && negb (eq (and x (sub (shl' one y) one)) zero)
  then one else zero.

Lemma bits_shl':
  forall x y i,
  0 <= i < zwordsize ->
  testbit (shl' x y) i =
  if zlt i (Int.unsigned y) then false else testbit x (i - Int.unsigned y).

Lemma bits_shru':
  forall x y i,
  0 <= i < zwordsize ->
  testbit (shru' x y) i =
  if zlt (i + Int.unsigned y) zwordsize then testbit x (i + Int.unsigned y) else false.

Lemma bits_shr':
  forall x y i,
  0 <= i < zwordsize ->
  testbit (shr' x y) i =
  testbit x (if zlt (i + Int.unsigned y) zwordsize then i + Int.unsigned y else zwordsize - 1).

Lemma shl'_mul_two_p:
  forall x y,
  shl' x y = mul x (repr (two_p (Int.unsigned y))).

Lemma shl'_one_two_p:
  forall y, shl' one y = repr (two_p (Int.unsigned y)).

Theorem shl'_mul:
  forall x y,
  shl' x y = mul x (shl' one y).

Theorem shl'_zero:
  forall x, shl' x Int.zero = x.

Theorem shru'_zero :
  forall x, shru' x Int.zero = x.

Theorem shr'_zero :
  forall x, shr' x Int.zero = x.

Theorem shrx'_zero:
  forall x, shrx' x Int.zero = x.

Theorem shrx'_carry:
  forall x y,
  Int.ltu y (Int.repr 63) = true ->

Theorem shrx'_shr_2:
  forall x y,
  Int.ltu y (Int.repr 63) = true ->

Remark int_ltu_2_inv:
  forall y z,
  Int.ltu y iwordsize' = true ->

Theorem or_ror':
  forall x y z,
  Int.ltu y iwordsize' = true ->

Theorem shl'_shl':
  forall x y z,
  Int.ltu y iwordsize' = true ->

Theorem shru'_shru':
  forall x y z,
  Int.ltu y iwordsize' = true ->

Theorem shr'_shr':
  forall x y z,
  Int.ltu y iwordsize' = true ->

Definition one_bits' (x: int) : list Int.int :=
  List.map Int.repr (Z_one_bits wordsize (unsigned x) 0).

Definition is_power2' (x: int) : option Int.int :=
  match Z_one_bits wordsize (unsigned x) 0 with
  | i :: nil => Some (Int.repr i)
  | _ => None
  end.

Theorem one_bits'_range:
  forall x i, In i (one_bits' x) -> Int.ltu i iwordsize' = true.

Fixpoint int_of_one_bits' (l: list Int.int) : int :=
  match l with
  | nil => zero
  | a :: b => add (shl' one a) (int_of_one_bits' b)
  end.

Theorem one_bits'_decomp:
  forall x, x = int_of_one_bits' (one_bits' x).

Lemma is_power2'_rng:
  forall n logn,
  is_power2' n = Some logn ->
  0 <= Int.unsigned logn < zwordsize.

Theorem is_power2'_range:
  forall n logn,
  is_power2' n = Some logn -> Int.ltu logn iwordsize' = true.

Lemma is_power2'_correct:
  forall n logn,
  is_power2' n = Some logn ->
  unsigned n = two_p (Int.unsigned logn).

Theorem mul_pow2':
  forall x n logn,
  is_power2' n = Some logn ->
  mul x n = shl' x logn.

Theorem divu_pow2':
  forall x n logn,
  is_power2' n = Some logn ->
  divu x n = shru' x logn.

Definition loword (n: int) : Int.int := Int.repr (unsigned n).

Definition hiword (n: int) : Int.int := Int.repr (unsigned (shru n (repr Int.zwordsize))).

Definition ofwords (hi lo: Int.int) : int :=
  or (shl (repr (Int.unsigned hi)) (repr Int.zwordsize)) (repr (Int.unsigned lo)).

Lemma bits_loword:
  forall n i, 0 <= i < Int.zwordsize -> Int.testbit (loword n) i = testbit n i.

Lemma bits_hiword:
  forall n i, 0 <= i < Int.zwordsize -> Int.testbit (hiword n) i = testbit n (i + Int.zwordsize).

Lemma bits_ofwords:
  forall hi lo i, 0 <= i < zwordsize ->
  testbit (ofwords hi lo) i =
  if zlt i Int.zwordsize then Int.testbit lo i else Int.testbit hi (i - Int.zwordsize).

Lemma lo_ofwords:
  forall hi lo, loword (ofwords hi lo) = lo.

Lemma hi_ofwords:
  forall hi lo, hiword (ofwords hi lo) = hi.

Lemma ofwords_recompose:
  forall n, ofwords (hiword n) (loword n) = n.

Lemma ofwords_add:
  forall lo hi, ofwords hi lo = repr (Int.unsigned hi * two_p 32 + Int.unsigned lo).

Lemma ofwords_add':
  forall lo hi, unsigned (ofwords hi lo) = Int.unsigned hi * two_p 32 + Int.unsigned lo.

Remark eqm_mul_2p32:
  forall x y, Int.eqm x y -> eqm (x * two_p 32) (y * two_p 32).

Lemma ofwords_add'':
  forall lo hi, signed (ofwords hi lo) = Int.signed hi * two_p 32 + Int.unsigned lo.

Lemma decompose_bitwise_binop:
  forall f f64 f32 xh xl yh yl,
  (forall x y i, 0 <= i < zwordsize -> testbit (f64 x y) i = f (testbit x i) (testbit y i)) ->
  (forall x y i, 0 <= i < Int.zwordsize -> Int.testbit (f32 x y) i = f (Int.testbit x i) (Int.testbit y i)) ->

Lemma decompose_and:
  forall xh xl yh yl,
  and (ofwords xh xl) (ofwords yh yl) = ofwords (Int.and xh yh) (Int.and xl yl).

Lemma decompose_or:
  forall xh xl yh yl,
  or (ofwords xh xl) (ofwords yh yl) = ofwords (Int.or xh yh) (Int.or xl yl).

Lemma decompose_xor:
  forall xh xl yh yl,
  xor (ofwords xh xl) (ofwords yh yl) = ofwords (Int.xor xh yh) (Int.xor xl yl).

Lemma decompose_not:
  forall xh xl,
  not (ofwords xh xl) = ofwords (Int.not xh) (Int.not xl).

Lemma decompose_shl_1:
  forall xh xl y,
  0 <= Int.unsigned y < Int.zwordsize ->

Lemma decompose_shl_2:
  forall xh xl y,
  Int.zwordsize <= Int.unsigned y < zwordsize ->

Lemma decompose_shru_1:
  forall xh xl y,
  0 <= Int.unsigned y < Int.zwordsize ->

Lemma decompose_shru_2:
  forall xh xl y,
  Int.zwordsize <= Int.unsigned y < zwordsize ->

Lemma decompose_shr_1:
  forall xh xl y,
  0 <= Int.unsigned y < Int.zwordsize ->

Lemma decompose_shr_2:
  forall xh xl y,
  Int.zwordsize <= Int.unsigned y < zwordsize ->

Lemma decompose_add:
  forall xh xl yh yl,
  add (ofwords xh xl) (ofwords yh yl) =
  ofwords (Int.add (Int.add xh yh) (Int.add_carry xl yl Int.zero))

Lemma decompose_sub:
  forall xh xl yh yl,
  sub (ofwords xh xl) (ofwords yh yl) =
  ofwords (Int.sub (Int.sub xh yh) (Int.sub_borrow xl yl Int.zero))

Lemma decompose_sub':
  forall xh xl yh yl,
  sub (ofwords xh xl) (ofwords yh yl) =
  ofwords (Int.add (Int.add xh (Int.not yh)) (Int.add_carry xl (Int.not yl) Int.one))

Definition mul' (x y: Int.int) : int := repr (Int.unsigned x * Int.unsigned y).

Lemma mul'_mulhu:
  forall x y, mul' x y = ofwords (Int.mulhu x y) (Int.mul x y).

Lemma decompose_mul:
  forall xh xl yh yl,
  mul (ofwords xh xl) (ofwords yh yl) =
  ofwords (Int.add (Int.add (hiword (mul' xl yl)) (Int.mul xl yh)) (Int.mul xh yl))

Lemma decompose_mul_2:
  forall xh xl yh yl,
  mul (ofwords xh xl) (ofwords yh yl) =
  ofwords (Int.add (Int.add (Int.mulhu xl yl) (Int.mul xl yh)) (Int.mul xh yl))

Lemma decompose_ltu:
  forall xh xl yh yl,
  ltu (ofwords xh xl) (ofwords yh yl) = if Int.eq xh yh then Int.ltu xl yl else Int.ltu xh yh.

Lemma decompose_leu:
  forall xh xl yh yl,
  negb (ltu (ofwords yh yl) (ofwords xh xl)) =
  if Int.eq xh yh then negb (Int.ltu yl xl) else Int.ltu xh yh.

Lemma decompose_lt:
  forall xh xl yh yl,
  lt (ofwords xh xl) (ofwords yh yl) = if Int.eq xh yh then Int.ltu xl yl else Int.lt xh yh.

Lemma decompose_le:
  forall xh xl yh yl,
  negb (lt (ofwords yh yl) (ofwords xh xl)) =
  if Int.eq xh yh then negb (Int.ltu yl xl) else Int.lt xh yh.

Remark int_unsigned_range:
  forall x, 0 <= Int.unsigned x <= max_unsigned.

Remark int_unsigned_repr:
  forall x, unsigned (repr (Int.unsigned x)) = Int.unsigned x.

Lemma int_sub_ltu:
  forall x y,
    Int.ltu x y= true ->

End Int64.

Strategy 0 [Wordsize_64.wordsize].

Notation int64 := Int64.int.

Global Opaque Int.repr Int64.repr Byte.repr.

Module Wordsize_Ptrofs.
  Definition wordsize := if Archi.ptr64 then 64%nat else 32%nat.
  Remark wordsize_not_zero: wordsize <> 0%nat.
End Wordsize_Ptrofs.

Strategy opaque [Wordsize_Ptrofs.wordsize].

Module Ptrofs.

Include Make(Wordsize_Ptrofs).

Definition to_int (x: int): Int.int := Int.repr (unsigned x).

Definition to_int64 (x: int): Int64.int := Int64.repr (unsigned x).

Definition of_int (x: Int.int) : int := repr (Int.unsigned x).

Definition of_intu := of_int.

Definition of_ints (x: Int.int) : int := repr (Int.signed x).

Definition of_int64 (x: Int64.int) : int := repr (Int64.unsigned x).

Definition of_int64u := of_int64.

Definition of_int64s (x: Int64.int) : int := repr (Int64.signed x).

Section AGREE32.

Hypothesis _32: Archi.ptr64 = false.

Lemma modulus_eq32: modulus = Int.modulus.

Lemma eqm32:
  forall x y, Int.eqm x y <-> eqm x y.

Definition agree32 (a: Ptrofs.int) (b: Int.int) : Prop :=
  Ptrofs.unsigned a = Int.unsigned b.

Lemma agree32_repr:
  forall i, agree32 (Ptrofs.repr i) (Int.repr i).

Lemma agree32_signed:
  forall a b, agree32 a b -> Ptrofs.signed a = Int.signed b.

Lemma agree32_of_int:
  forall b, agree32 (of_int b) b.

Lemma agree32_of_ints:
  forall b, agree32 (of_ints b) b.

Lemma agree32_of_int_eq:
  forall a b, agree32 a b -> of_int b = a.

Lemma agree32_of_ints_eq:
  forall a b, agree32 a b -> of_ints b = a.

Lemma agree32_to_int:
  forall a, agree32 a (to_int a).

Lemma agree32_to_int_eq:
  forall a b, agree32 a b -> to_int a = b.

Lemma agree32_neg:
  forall a1 b1, agree32 a1 b1 -> agree32 (Ptrofs.neg a1) (Int.neg b1).

Lemma agree32_add:
  forall a1 b1 a2 b2,
  agree32 a1 b1 -> agree32 a2 b2 -> agree32 (Ptrofs.add a1 a2) (Int.add b1 b2).

Lemma agree32_sub:
  forall a1 b1 a2 b2,
  agree32 a1 b1 -> agree32 a2 b2 -> agree32 (Ptrofs.sub a1 a2) (Int.sub b1 b2).

Lemma agree32_mul:
  forall a1 b1 a2 b2,
  agree32 a1 b1 -> agree32 a2 b2 -> agree32 (Ptrofs.mul a1 a2) (Int.mul b1 b2).

Lemma agree32_divs:
  forall a1 b1 a2 b2,
  agree32 a1 b1 -> agree32 a2 b2 -> agree32 (Ptrofs.divs a1 a2) (Int.divs b1 b2).

Lemma of_int_to_int:
  forall n, of_int (to_int n) = n.

Lemma to_int_of_int:
  forall n, to_int (of_int n) = n.

End AGREE32.

Section AGREE64.

Hypothesis _64: Archi.ptr64 = true.

Lemma modulus_eq64: modulus = Int64.modulus.

Lemma eqm64:
  forall x y, Int64.eqm x y <-> eqm x y.

Definition agree64 (a: Ptrofs.int) (b: Int64.int) : Prop :=
  Ptrofs.unsigned a = Int64.unsigned b.

Lemma agree64_repr:
  forall i, agree64 (Ptrofs.repr i) (Int64.repr i).

Lemma agree64_signed:
  forall a b, agree64 a b -> Ptrofs.signed a = Int64.signed b.

Lemma agree64_of_int:
  forall b, agree64 (of_int64 b) b.

Lemma agree64_of_int_eq:
  forall a b, agree64 a b -> of_int64 b = a.

Lemma agree64_to_int:
  forall a, agree64 a (to_int64 a).

Lemma agree64_to_int_eq:
  forall a b, agree64 a b -> to_int64 a = b.

Lemma agree64_neg:
  forall a1 b1, agree64 a1 b1 -> agree64 (Ptrofs.neg a1) (Int64.neg b1).

Lemma agree64_add:
  forall a1 b1 a2 b2,
  agree64 a1 b1 -> agree64 a2 b2 -> agree64 (Ptrofs.add a1 a2) (Int64.add b1 b2).

Lemma agree64_sub:
  forall a1 b1 a2 b2,
  agree64 a1 b1 -> agree64 a2 b2 -> agree64 (Ptrofs.sub a1 a2) (Int64.sub b1 b2).

Lemma agree64_mul:
  forall a1 b1 a2 b2,
  agree64 a1 b1 -> agree64 a2 b2 -> agree64 (Ptrofs.mul a1 a2) (Int64.mul b1 b2).

Lemma agree64_divs:
  forall a1 b1 a2 b2,
  agree64 a1 b1 -> agree64 a2 b2 -> agree64 (Ptrofs.divs a1 a2) (Int64.divs b1 b2).

Lemma of_int64_to_int64:
  forall n, of_int64 (to_int64 n) = n.

Lemma to_int64_of_int64:
  forall n, to_int64 (of_int64 n) = n.

End AGREE64.

Hint Resolve
  agree32_repr agree32_of_int agree32_of_ints agree32_of_int_eq agree32_of_ints_eq
  agree32_to_int agree32_to_int_eq agree32_neg agree32_add agree32_sub agree32_mul agree32_divs
  agree64_repr agree64_of_int agree64_of_int_eq
  agree64_to_int agree64_to_int_eq agree64_neg agree64_add agree64_sub agree64_mul agree64_divs : ptrofs.

End Ptrofs.

Strategy 0 [Wordsize_Ptrofs.wordsize].

Notation ptrofs := Ptrofs.int.

Global Opaque Ptrofs.repr.

Hint Resolve Int.modulus_pos Int.eqm_refl Int.eqm_refl2 Int.eqm_sym Int.eqm_trans
  Int.eqm_small_eq Int.eqm_add Int.eqm_neg Int.eqm_sub Int.eqm_mult
  Int.eqm_unsigned_repr Int.eqm_unsigned_repr_l Int.eqm_unsigned_repr_r
  Int.unsigned_range Int.unsigned_range_2
  Int.repr_unsigned Int.repr_signed Int.unsigned_repr : ints.

Hint Resolve Int64.modulus_pos Int64.eqm_refl Int64.eqm_refl2 Int64.eqm_sym Int64.eqm_trans
  Int64.eqm_small_eq Int64.eqm_add Int64.eqm_neg Int64.eqm_sub Int64.eqm_mult
  Int64.eqm_unsigned_repr Int64.eqm_unsigned_repr_l Int64.eqm_unsigned_repr_r
  Int64.unsigned_range Int64.unsigned_range_2
  Int64.repr_unsigned Int64.repr_signed Int64.unsigned_repr : ints.

Hint Resolve Ptrofs.modulus_pos Ptrofs.eqm_refl Ptrofs.eqm_refl2 Ptrofs.eqm_sym Ptrofs.eqm_trans
  Ptrofs.eqm_small_eq Ptrofs.eqm_add Ptrofs.eqm_neg Ptrofs.eqm_sub Ptrofs.eqm_mult
  Ptrofs.eqm_unsigned_repr Ptrofs.eqm_unsigned_repr_l Ptrofs.eqm_unsigned_repr_r
  Ptrofs.unsigned_range Ptrofs.unsigned_range_2
  Ptrofs.repr_unsigned Ptrofs.repr_signed Ptrofs.unsigned_repr : ints. *)

Require Import Floats.
(* Floats:
Require Import Coqlib.
Require Import Integers.
Require Import Fappli_IEEE.
Require Import Fappli_IEEE_bits.
Require Import Fappli_IEEE_extra.
Require Import Fcore.
Require Import Program.
Require Archi.

Close Scope R_scope.

Definition float := binary64. 
Definition float32 := binary32. 

Definition cmp_of_comparison (c: comparison) (x: option Datatypes.comparison) : bool :=
  match c with
  | Ceq =>
      match x with Some Eq => true | _ => false end
  | Cne =>
      match x with Some Eq => false | _ => true end
  | Clt =>
      match x with Some Lt => true | _ => false end
  | Cle =>
      match x with Some(Lt|Eq) => true | _ => false end
  | Cgt =>
      match x with Some Gt => true | _ => false end
  | Cge =>
      match x with Some(Gt|Eq) => true | _ => false end
  end.

Definition ordered_of_comparison (x: option Datatypes.comparison) : bool :=
  match x with None => false | Some _ => true end.

Lemma cmp_of_comparison_swap:
  forall c x,
  cmp_of_comparison (swap_comparison c) x =
  cmp_of_comparison c (match x with None => None | Some x => Some (CompOpp x) end).

Lemma cmp_of_comparison_ne_eq:
  forall x, cmp_of_comparison Cne x = negb (cmp_of_comparison Ceq x).

Lemma cmp_of_comparison_lt_eq_false:
  forall x, cmp_of_comparison Clt x = true -> cmp_of_comparison Ceq x = true -> False.

Lemma cmp_of_comparison_le_lt_eq:
  forall x, cmp_of_comparison Cle x = cmp_of_comparison Clt x || cmp_of_comparison Ceq x.

Lemma cmp_of_comparison_gt_eq_false:
  forall x, cmp_of_comparison Cgt x = true -> cmp_of_comparison Ceq x = true -> False.

Lemma cmp_of_comparison_ge_gt_eq:
  forall x, cmp_of_comparison Cge x = cmp_of_comparison Cgt x || cmp_of_comparison Ceq x.

Lemma cmp_of_comparison_lt_gt_false:
  forall x, cmp_of_comparison Clt x = true -> cmp_of_comparison Cgt x = true -> False.

Local Notation __ := (eq_refl Datatypes.Lt).

Local Hint Extern 1 (Prec_gt_0 _) => exact (eq_refl Datatypes.Lt).
Local Hint Extern 1 (_ < _) => exact (eq_refl Datatypes.Lt).

Module Float.

Program Definition transform_quiet_pl (pl:nan_pl 53) : nan_pl 53 :=
  Pos.lor pl (iter_nat xO 51 xH).

Lemma nan_payload_fequal:
  forall prec (p1 p2: nan_pl prec),
  proj1_sig p1 = proj1_sig p2 -> p1 = p2.

Lemma lor_idempotent:
  forall x y, Pos.lor (Pos.lor x y) y = Pos.lor x y.

Lemma transform_quiet_pl_idempotent:
  forall pl, transform_quiet_pl (transform_quiet_pl pl) = transform_quiet_pl pl.

Definition expand_pl (pl: nan_pl 24) : nan_pl 53.

Definition of_single_pl (s:bool) (pl:nan_pl 24) : (bool * nan_pl 53) :=
  (s,
   if Archi.float_of_single_preserves_sNaN
   then expand_pl pl
   else transform_quiet_pl (expand_pl pl)).

Definition reduce_pl (pl: nan_pl 53) : nan_pl 24.

Definition to_single_pl (s:bool) (pl:nan_pl 53) : (bool * nan_pl 24) :=
  (s, reduce_pl (transform_quiet_pl pl)).

Definition neg_pl (s:bool) (pl:nan_pl 53) := (negb s, pl).
Definition abs_pl (s:bool) (pl:nan_pl 53) := (false, pl).

Definition binop_pl (x y: binary64) : bool*nan_pl 53 :=
  match x, y with
  | B754_nan s1 pl1, B754_nan s2 pl2 =>
      if Archi.choose_binop_pl_64 s1 pl1 s2 pl2
      then (s2, transform_quiet_pl pl2)
      else (s1, transform_quiet_pl pl1)
  | B754_nan s1 pl1, _ => (s1, transform_quiet_pl pl1)
  | _, B754_nan s2 pl2 => (s2, transform_quiet_pl pl2)
  | _, _ => Archi.default_pl_64
  end.

Definition zero: float := B754_zero _ _ false. 

Definition eq_dec: forall (f1 f2: float), {f1 = f2} + {f1 <> f2} := Beq_dec _ _.

Definition neg: float -> float := Bopp _ _ neg_pl. 
Definition abs: float -> float := Babs _ _ abs_pl. 
Definition add: float -> float -> float :=
  Bplus 53 1024 __ __ binop_pl mode_NE. 
Definition sub: float -> float -> float :=
  Bminus 53 1024 __ __ binop_pl mode_NE. 
Definition mul: float -> float -> float :=
  Bmult 53 1024 __ __ binop_pl mode_NE. 
Definition div: float -> float -> float :=
  Bdiv 53 1024 __ __ binop_pl mode_NE. 
Definition compare (f1 f2: float) : option Datatypes.comparison := 
  Bcompare 53 1024 f1 f2.
Definition cmp (c:comparison) (f1 f2: float) : bool := 
  cmp_of_comparison c (compare f1 f2).
Definition ordered (f1 f2: float) : bool :=
  ordered_of_comparison (compare f1 f2).

Definition of_single: float32 -> float := Bconv _ _ 53 1024 __ __ of_single_pl mode_NE.
Definition to_single: float -> float32 := Bconv _ _ 24 128 __ __ to_single_pl mode_NE.

Definition to_int (f:float): option int := 
  option_map Int.repr (ZofB_range _ _ f Int.min_signed Int.max_signed).
Definition to_intu (f:float): option int := 
  option_map Int.repr (ZofB_range _ _ f 0 Int.max_unsigned).
Definition to_long (f:float): option int64 := 
  option_map Int64.repr (ZofB_range _ _ f Int64.min_signed Int64.max_signed).
Definition to_longu (f:float): option int64 := 
  option_map Int64.repr (ZofB_range _ _ f 0 Int64.max_unsigned).

Definition of_int (n:int): float := 
  BofZ 53 1024 __ __ (Int.signed n).
Definition of_intu (n:int): float:= 
  BofZ 53 1024 __ __ (Int.unsigned n).

Definition of_long (n:int64): float := 
  BofZ 53 1024 __ __ (Int64.signed n).
Definition of_longu (n:int64): float:= 
  BofZ 53 1024 __ __ (Int64.unsigned n).

Definition from_parsed (base:positive) (intPart:positive) (expPart:Z) : float :=
  Bparse 53 1024 __ __ base intPart expPart.

Definition to_bits (f: float): int64 := Int64.repr (bits_of_b64 f).
Definition of_bits (b: int64): float := b64_of_bits (Int64.unsigned b).

Definition from_words (hi lo: int) : float := of_bits (Int64.ofwords hi lo).

Ltac compute_this val :=
  let x := fresh in set val as x in *; vm_compute in x; subst x.

Ltac smart_omega :=
  simpl radix_val in *; simpl Z.pow in *;
  compute_this Int.modulus; compute_this Int.half_modulus;
  compute_this Int.max_unsigned;
  compute_this Int.min_signed; compute_this Int.max_signed;
  compute_this Int64.modulus; compute_this Int64.half_modulus;
  compute_this Int64.max_unsigned;
  compute_this (Z.pow_pos 2 1024); compute_this (Z.pow_pos 2 53); compute_this (Z.pow_pos 2 52); compute_this (Z.pow_pos 2 32);
  zify; omega.

Theorem add_commut:
  forall x y, is_nan _ _ x = false \/ is_nan _ _ y = false -> add x y = add y x.

Theorem mul_commut:
  forall x y, is_nan _ _ x = false \/ is_nan _ _ y = false -> mul x y = mul y x.

Theorem mul2_add:
  forall f, add f f = mul f (of_int (Int.repr 2%Z)).

Definition exact_inverse : float -> option float := Bexact_inverse 53 1024 __ __.

Theorem div_mul_inverse:
  forall x y z, exact_inverse y = Some z -> div x y = mul x z.

Theorem cmp_swap:
  forall c x y, cmp (swap_comparison c) x y = cmp c y x.

Theorem cmp_ne_eq:
  forall f1 f2, cmp Cne f1 f2 = negb (cmp Ceq f1 f2).

Theorem cmp_lt_eq_false:
  forall f1 f2, cmp Clt f1 f2 = true -> cmp Ceq f1 f2 = true -> False.

Theorem cmp_le_lt_eq:
  forall f1 f2, cmp Cle f1 f2 = cmp Clt f1 f2 || cmp Ceq f1 f2.

Theorem cmp_gt_eq_false:
  forall x y, cmp Cgt x y = true -> cmp Ceq x y = true -> False.

Theorem cmp_ge_gt_eq:
  forall f1 f2, cmp Cge f1 f2 = cmp Cgt f1 f2 || cmp Ceq f1 f2.

Theorem cmp_lt_gt_false:
  forall f1 f2, cmp Clt f1 f2 = true -> cmp Cgt f1 f2 = true -> False.

Theorem of_to_bits:
  forall f, of_bits (to_bits f) = f.

Theorem to_of_bits:
  forall b, to_bits (of_bits b) = b.

Definition ox8000_0000 := Int.repr Int.half_modulus.  

Theorem of_intu_of_int_1:
  forall x,
  Int.ltu x ox8000_0000 = true ->

Theorem of_intu_of_int_2:
  forall x,
  Int.ltu x ox8000_0000 = false ->

Theorem to_intu_to_int_1:
  forall x n,
  cmp Clt x (of_intu ox8000_0000) = true ->
  to_intu x = Some n ->
  to_int x = Some n.

Theorem to_intu_to_int_2:
  forall x n,
  cmp Clt x (of_intu ox8000_0000) = false ->
  to_intu x = Some n ->
  to_int (sub x (of_intu ox8000_0000)) = Some (Int.sub n ox8000_0000).

Definition ox4330_0000 := Int.repr 1127219200.        

Lemma split_bits_or:
  forall x,
  split_bits 52 11 (Int64.unsigned (Int64.ofwords ox4330_0000 x)) = (false, Int.unsigned x, 1075).

Lemma from_words_value:
  forall x,
     B2R _ _ (from_words ox4330_0000 x) = (bpow radix2 52 + Z2R (Int.unsigned x))%R

Lemma from_words_eq:
  forall x, from_words ox4330_0000 x = BofZ 53 1024 __ __ (2^52 + Int.unsigned x).

Theorem of_intu_from_words:
  forall x,
  of_intu x = sub (from_words ox4330_0000 x) (from_words ox4330_0000 Int.zero).

Lemma ox8000_0000_signed_unsigned:
  forall x,
    Int.unsigned (Int.add x ox8000_0000) = Int.signed x + Int.half_modulus.

Theorem of_int_from_words:
  forall x,
  of_int x = sub (from_words ox4330_0000 (Int.add x ox8000_0000))

Definition ox4530_0000 := Int.repr 1160773632.        

Lemma split_bits_or':
  forall x,
  split_bits 52 11 (Int64.unsigned (Int64.ofwords ox4530_0000 x)) = (false, Int.unsigned x, 1107).

Lemma from_words_value':
  forall x,
     B2R _ _ (from_words ox4530_0000 x) = (bpow radix2 84 + Z2R (Int.unsigned x * two_p 32))%R

Lemma from_words_eq':
  forall x, from_words ox4530_0000 x = BofZ 53 1024 __ __ (2^84 + Int.unsigned x * 2^32).

Theorem of_longu_from_words:
  forall l,
  of_longu l =
    add (sub (from_words ox4530_0000 (Int64.hiword l))

Theorem of_long_from_words:
  forall l,
  of_long l =
    add (sub (from_words ox4530_0000 (Int.add (Int64.hiword l) ox8000_0000))

Theorem of_longu_decomp:
  forall l,
  of_longu l = add (mul (of_intu (Int64.hiword l)) (BofZ 53 1024 __ __ (2^32)))

Theorem of_long_decomp:
  forall l,
  of_long l = add (mul (of_int (Int64.hiword l)) (BofZ 53 1024 __ __ (2^32)))

Theorem of_longu_of_long_1:
  forall x,
  Int64.ltu x (Int64.repr Int64.half_modulus) = true ->

Theorem of_longu_of_long_2:
  forall x,
  Int64.ltu x (Int64.repr Int64.half_modulus) = false ->

Remark ZofB_range_widen:
  forall (f: float) n min1 max1 min2 max2,
  ZofB_range _ _ f min1 max1 = Some n ->
  min2 <= min1 -> max1 <= max2 ->
  ZofB_range _ _ f min2 max2 = Some n.

Theorem to_int_to_long:
  forall f n, to_int f = Some n -> to_long f = Some (Int64.repr (Int.signed n)).

Theorem to_intu_to_longu:
  forall f n, to_intu f = Some n -> to_longu f = Some (Int64.repr (Int.unsigned n)).

Theorem to_intu_to_long:
  forall f n, to_intu f = Some n -> to_long f = Some (Int64.repr (Int.unsigned n)).

Theorem of_int_of_long:
  forall n, of_int n = of_long (Int64.repr (Int.signed n)).

Theorem of_intu_of_longu:
  forall n, of_intu n = of_longu (Int64.repr (Int.unsigned n)).

Theorem of_intu_of_long:
  forall n, of_intu n = of_long (Int64.repr (Int.unsigned n)).

End Float.

Module Float32.

Program Definition transform_quiet_pl (pl:nan_pl 24) : nan_pl 24 :=
  Pos.lor pl (iter_nat xO 22 xH).

Lemma transform_quiet_pl_idempotent:
  forall pl, transform_quiet_pl (transform_quiet_pl pl) = transform_quiet_pl pl.

Definition neg_pl (s:bool) (pl:nan_pl 24) := (negb s, pl).
Definition abs_pl (s:bool) (pl:nan_pl 24) := (false, pl).

Definition binop_pl (x y: binary32) : bool*nan_pl 24 :=
  match x, y with
  | B754_nan s1 pl1, B754_nan s2 pl2 =>
      if Archi.choose_binop_pl_32 s1 pl1 s2 pl2
      then (s2, transform_quiet_pl pl2)
      else (s1, transform_quiet_pl pl1)
  | B754_nan s1 pl1, _ => (s1, transform_quiet_pl pl1)
  | _, B754_nan s2 pl2 => (s2, transform_quiet_pl pl2)
  | _, _ => Archi.default_pl_32
  end.

Definition zero: float32 := B754_zero _ _ false. 

Definition eq_dec: forall (f1 f2: float32), {f1 = f2} + {f1 <> f2} := Beq_dec _ _.

Definition neg: float32 -> float32 := Bopp _ _ neg_pl. 
Definition abs: float32 -> float32 := Babs _ _ abs_pl. 
Definition add: float32 -> float32 -> float32 :=
  Bplus 24 128 __ __ binop_pl mode_NE. 
Definition sub: float32 -> float32 -> float32 :=
  Bminus 24 128 __ __ binop_pl mode_NE. 
Definition mul: float32 -> float32 -> float32 :=
  Bmult 24 128 __ __ binop_pl mode_NE. 
Definition div: float32 -> float32 -> float32 :=
  Bdiv 24 128 __ __ binop_pl mode_NE. 
Definition compare (f1 f2: float32) : option Datatypes.comparison := 
  Bcompare 24 128 f1 f2.
Definition cmp (c:comparison) (f1 f2: float32) : bool := 
  cmp_of_comparison c (compare f1 f2).
Definition ordered (f1 f2: float32) : bool :=
  ordered_of_comparison (compare f1 f2).

Definition of_double : float -> float32 := Float.to_single.
Definition to_double : float32 -> float := Float.of_single.

Definition to_int (f:float32): option int := 
  option_map Int.repr (ZofB_range _ _ f Int.min_signed Int.max_signed).
Definition to_intu (f:float32): option int := 
  option_map Int.repr (ZofB_range _ _ f 0 Int.max_unsigned).
Definition to_long (f:float32): option int64 := 
  option_map Int64.repr (ZofB_range _ _ f Int64.min_signed Int64.max_signed).
Definition to_longu (f:float32): option int64 := 
  option_map Int64.repr (ZofB_range _ _ f 0 Int64.max_unsigned).

Definition of_int (n:int): float32 := 
  BofZ 24 128 __ __ (Int.signed n).
Definition of_intu (n:int): float32 := 
  BofZ 24 128 __ __ (Int.unsigned n).

Definition of_long (n:int64): float32 := 
  BofZ 24 128 __ __ (Int64.signed n).
Definition of_longu (n:int64): float32 := 
  BofZ 24 128 __ __ (Int64.unsigned n).

Definition from_parsed (base:positive) (intPart:positive) (expPart:Z) : float32 :=
  Bparse 24 128 __ __ base intPart expPart.

Definition to_bits (f: float32) : int := Int.repr (bits_of_b32 f).
Definition of_bits (b: int): float32 := b32_of_bits (Int.unsigned b).

Theorem add_commut:
  forall x y, is_nan _ _ x = false \/ is_nan _ _ y = false -> add x y = add y x.

Theorem mul_commut:
  forall x y, is_nan _ _ x = false \/ is_nan _ _ y = false -> mul x y = mul y x.

Theorem mul2_add:
  forall f, add f f = mul f (of_int (Int.repr 2%Z)).

Definition exact_inverse : float32 -> option float32 := Bexact_inverse 24 128 __ __.

Theorem div_mul_inverse:
  forall x y z, exact_inverse y = Some z -> div x y = mul x z.

Theorem cmp_swap:
  forall c x y, cmp (swap_comparison c) x y = cmp c y x.

Theorem cmp_ne_eq:
  forall f1 f2, cmp Cne f1 f2 = negb (cmp Ceq f1 f2).

Theorem cmp_lt_eq_false:
  forall f1 f2, cmp Clt f1 f2 = true -> cmp Ceq f1 f2 = true -> False.

Theorem cmp_le_lt_eq:
  forall f1 f2, cmp Cle f1 f2 = cmp Clt f1 f2 || cmp Ceq f1 f2.

Theorem cmp_gt_eq_false:
  forall x y, cmp Cgt x y = true -> cmp Ceq x y = true -> False.

Theorem cmp_ge_gt_eq:
  forall f1 f2, cmp Cge f1 f2 = cmp Cgt f1 f2 || cmp Ceq f1 f2.

Theorem cmp_lt_gt_false:
  forall f1 f2, cmp Clt f1 f2 = true -> cmp Cgt f1 f2 = true -> False.

Theorem cmp_double:
  forall f1 f2 c, cmp c f1 f2 = Float.cmp c (to_double f1) (to_double f2).

Theorem of_to_bits:
  forall f, of_bits (to_bits f) = f.

Theorem to_of_bits:
  forall b, to_bits (of_bits b) = b.

Theorem of_int_double:
  forall n, of_int n = of_double (Float.of_int n).

Theorem of_intu_double:
  forall n, of_intu n = of_double (Float.of_intu n).

Theorem to_int_double:
  forall f n, to_int f = Some n -> Float.to_int (to_double f) = Some n.

Theorem to_intu_double:
  forall f n, to_intu f = Some n -> Float.to_intu (to_double f) = Some n.

Theorem to_long_double:
  forall f n, to_long f = Some n -> Float.to_long (to_double f) = Some n.

Theorem to_longu_double:
  forall f n, to_longu f = Some n -> Float.to_longu (to_double f) = Some n.

Lemma int_round_odd_plus:
  forall p n, 0 <= p ->
  int_round_odd n p = Z.land (Z.lor n (Z.land n (2^p-1) + (2^p-1))) (-(2^p)).

Lemma of_long_round_odd:
  forall n conv_nan,
  2^36 <= Z.abs n < 2^64 ->

Theorem of_longu_double_1:
  forall n,
  Int64.unsigned n <= 2^53 ->

Theorem of_longu_double_2:
  forall n,
  2^36 <= Int64.unsigned n ->

Theorem of_long_double_1:
  forall n,
  Z.abs (Int64.signed n) <= 2^53 ->

Theorem of_long_double_2:
  forall n,
  2^36 <= Z.abs (Int64.signed n) ->

End Float32.

Global Opaque
  Float.zero Float.eq_dec Float.neg Float.abs Float.of_single Float.to_single
  Float.of_int Float.of_intu Float.of_long Float.of_longu
  Float.to_int Float.to_intu Float.to_long Float.to_longu
  Float.add Float.sub Float.mul Float.div Float.cmp Float.ordered
  Float.to_bits Float.of_bits Float.from_words.

Global Opaque
  Float32.zero Float32.eq_dec Float32.neg Float32.abs
  Float32.of_int Float32.of_intu Float32.of_long Float32.of_longu
  Float32.to_int Float32.to_intu Float32.to_long Float32.to_longu
  Float32.add Float32.sub Float32.mul Float32.div Float32.cmp Float32.ordered
  Float32.to_bits Float32.of_bits. *)



Definition block : Type := positive.

Definition eq_block := peq.



Inductive val: Type :=

  | Vundef: val

  | Vint: int -> val

  | Vlong: int64 -> val

  | Vfloat: float -> val

  | Vsingle: float32 -> val

  | Vptr: block -> ptrofs -> val.



Definition Vzero: val := Vint Int.zero.

Definition Vone: val := Vint Int.one.

Definition Vmone: val := Vint Int.mone.



Definition Vtrue: val := Vint Int.one.

Definition Vfalse: val := Vint Int.zero.



Definition Vnullptr :=

  if Archi.ptr64 then Vlong Int64.zero else Vint Int.zero.



Definition Vptrofs (n: ptrofs) :=

  if Archi.ptr64 then Vlong (Ptrofs.to_int64 n) else Vint (Ptrofs.to_int n).



Module Val.



Definition eq (x y: val): {x=y} + {x<>y}.

Proof.

  decide equality.

  apply Int.eq_dec.

  apply Int64.eq_dec.

  apply Float.eq_dec.

  apply Float32.eq_dec.

  apply Ptrofs.eq_dec.

  apply eq_block.

Defined.

Global Opaque eq.



Definition has_type (v: val) (t: typ) : Prop :=

  match v, t with

  | Vundef, _ => True

  | Vint _, Tint => True

  | Vlong _, Tlong => True

  | Vfloat _, Tfloat => True

  | Vsingle _, Tsingle => True

  | Vptr _ _, Tint => Archi.ptr64 = false

  | Vptr _ _, Tlong => Archi.ptr64 = true

  | (Vint _ | Vsingle _), Tany32 => True

  | Vptr _ _, Tany32 => Archi.ptr64 = false

  | _, Tany64 => True

  | _, _ => False

  end.



Fixpoint has_type_list (vl: list val) (tl: list typ) {struct vl} : Prop :=

  match vl, tl with

  | nil, nil => True

  | v1 :: vs, t1 :: ts => has_type v1 t1 /\ has_type_list vs ts

  | _, _ => False

  end.



Definition has_opttype (v: val) (ot: option typ) : Prop :=

  match ot with

  | None => v = Vundef

  | Some t => has_type v t

  end.



Lemma Vptr_has_type:

  forall b ofs, has_type (Vptr b ofs) Tptr.

Proof.

  intros. unfold Tptr, has_type; destruct Archi.ptr64; reflexivity.

Qed.



Lemma Vnullptr_has_type:

  has_type Vnullptr Tptr.

Proof.

  unfold has_type, Vnullptr, Tptr; destruct Archi.ptr64; reflexivity.

Qed.



Lemma has_subtype:

  forall ty1 ty2 v,

  subtype ty1 ty2 = true -> has_type v ty1 -> has_type v ty2.

Proof.

  intros. destruct ty1; destruct ty2; simpl in H;

  (contradiction || discriminate || assumption || idtac);

  unfold has_type in *; destruct v; auto; contradiction.

Qed.



Lemma has_subtype_list:

  forall tyl1 tyl2 vl,

  subtype_list tyl1 tyl2 = true -> has_type_list vl tyl1 -> has_type_list vl tyl2.

Proof.

  induction tyl1; intros; destruct tyl2; try discriminate; destruct vl; try contradiction.

  red; auto.

  simpl in *. InvBooleans. destruct H0. split; auto. eapply has_subtype; eauto.

Qed.



Inductive bool_of_val: val -> bool -> Prop :=

  | bool_of_val_int:

      forall n, bool_of_val (Vint n) (negb (Int.eq n Int.zero)).



Definition neg (v: val) : val :=

  match v with

  | Vint n => Vint (Int.neg n)

  | _ => Vundef

  end.



Definition negf (v: val) : val :=

  match v with

  | Vfloat f => Vfloat (Float.neg f)

  | _ => Vundef

  end.



Definition absf (v: val) : val :=

  match v with

  | Vfloat f => Vfloat (Float.abs f)

  | _ => Vundef

  end.



Definition negfs (v: val) : val :=

  match v with

  | Vsingle f => Vsingle (Float32.neg f)

  | _ => Vundef

  end.



Definition absfs (v: val) : val :=

  match v with

  | Vsingle f => Vsingle (Float32.abs f)

  | _ => Vundef

  end.



Definition maketotal (ov: option val) : val :=

  match ov with Some v => v | None => Vundef end.



Definition intoffloat (v: val) : option val :=

  match v with

  | Vfloat f => option_map Vint (Float.to_int f)

  | _ => None

  end.



Definition intuoffloat (v: val) : option val :=

  match v with

  | Vfloat f => option_map Vint (Float.to_intu f)

  | _ => None

  end.



Definition floatofint (v: val) : option val :=

  match v with

  | Vint n => Some (Vfloat (Float.of_int n))

  | _ => None

  end.



Definition floatofintu (v: val) : option val :=

  match v with

  | Vint n => Some (Vfloat (Float.of_intu n))

  | _ => None

  end.



Definition intofsingle (v: val) : option val :=

  match v with

  | Vsingle f => option_map Vint (Float32.to_int f)

  | _ => None

  end.



Definition intuofsingle (v: val) : option val :=

  match v with

  | Vsingle f => option_map Vint (Float32.to_intu f)

  | _ => None

  end.



Definition singleofint (v: val) : option val :=

  match v with

  | Vint n => Some (Vsingle (Float32.of_int n))

  | _ => None

  end.



Definition singleofintu (v: val) : option val :=

  match v with

  | Vint n => Some (Vsingle (Float32.of_intu n))

  | _ => None

  end.



Definition negint (v: val) : val :=

  match v with

  | Vint n => Vint (Int.neg n)

  | _ => Vundef

  end.



Definition notint (v: val) : val :=

  match v with

  | Vint n => Vint (Int.not n)

  | _ => Vundef

  end.



Definition of_bool (b: bool): val := if b then Vtrue else Vfalse.



Definition boolval (v: val) : val :=

  match v with

  | Vint n => of_bool (negb (Int.eq n Int.zero))

  | Vptr b ofs => Vtrue

  | _ => Vundef

  end.



Definition notbool (v: val) : val :=

  match v with

  | Vint n => of_bool (Int.eq n Int.zero)

  | Vptr b ofs => Vfalse

  | _ => Vundef

  end.



Definition zero_ext (nbits: Z) (v: val) : val :=

  match v with

  | Vint n => Vint(Int.zero_ext nbits n)

  | _ => Vundef

  end.



Definition sign_ext (nbits: Z) (v: val) : val :=

  match v with

  | Vint n => Vint(Int.sign_ext nbits n)

  | _ => Vundef

  end.



Definition singleoffloat (v: val) : val :=

  match v with

  | Vfloat f => Vsingle (Float.to_single f)

  | _ => Vundef

  end.



Definition floatofsingle (v: val) : val :=

  match v with

  | Vsingle f => Vfloat (Float.of_single f)

  | _ => Vundef

  end.



Definition add (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.add n1 n2)

  | Vptr b1 ofs1, Vint n2 => if Archi.ptr64 then Vundef else Vptr b1 (Ptrofs.add ofs1 (Ptrofs.of_int n2))

  | Vint n1, Vptr b2 ofs2 => if Archi.ptr64 then Vundef else Vptr b2 (Ptrofs.add ofs2 (Ptrofs.of_int n1))

  | _, _ => Vundef

  end.



Definition sub (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.sub n1 n2)

  | Vptr b1 ofs1, Vint n2 => if Archi.ptr64 then Vundef else Vptr b1 (Ptrofs.sub ofs1 (Ptrofs.of_int n2))

  | Vptr b1 ofs1, Vptr b2 ofs2 =>

      if Archi.ptr64 then Vundef else

      if eq_block b1 b2 then Vint(Ptrofs.to_int (Ptrofs.sub ofs1 ofs2)) else Vundef

  | _, _ => Vundef

  end.



Definition mul (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.mul n1 n2)

  | _, _ => Vundef

  end.



Definition mulhs (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.mulhs n1 n2)

  | _, _ => Vundef

  end.



Definition mulhu (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.mulhu n1 n2)

  | _, _ => Vundef

  end.



Definition divs (v1 v2: val): option val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

      if Int.eq n2 Int.zero

      || Int.eq n1 (Int.repr Int.min_signed) && Int.eq n2 Int.mone

      then None

      else Some(Vint(Int.divs n1 n2))

  | _, _ => None

  end.



Definition mods (v1 v2: val): option val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

      if Int.eq n2 Int.zero

      || Int.eq n1 (Int.repr Int.min_signed) && Int.eq n2 Int.mone

      then None

      else Some(Vint(Int.mods n1 n2))

  | _, _ => None

  end.



Definition divu (v1 v2: val): option val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

      if Int.eq n2 Int.zero then None else Some(Vint(Int.divu n1 n2))

  | _, _ => None

  end.



Definition modu (v1 v2: val): option val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

      if Int.eq n2 Int.zero then None else Some(Vint(Int.modu n1 n2))

  | _, _ => None

  end.



Definition add_carry (v1 v2 cin: val): val :=

  match v1, v2, cin with

  | Vint n1, Vint n2, Vint c => Vint(Int.add_carry n1 n2 c)

  | _, _, _ => Vundef

  end.



Definition sub_overflow (v1 v2: val) : val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.sub_overflow n1 n2 Int.zero)

  | _, _ => Vundef

  end.



Definition negative (v: val) : val :=

  match v with

  | Vint n => Vint (Int.negative n)

  | _ => Vundef

  end.



Definition and (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.and n1 n2)

  | _, _ => Vundef

  end.



Definition or (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.or n1 n2)

  | _, _ => Vundef

  end.



Definition xor (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.xor n1 n2)

  | _, _ => Vundef

  end.



Definition shl (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

     if Int.ltu n2 Int.iwordsize

     then Vint(Int.shl n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition shr (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

     if Int.ltu n2 Int.iwordsize

     then Vint(Int.shr n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition shr_carry (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

     if Int.ltu n2 Int.iwordsize

     then Vint(Int.shr_carry n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition shrx (v1 v2: val): option val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

     if Int.ltu n2 (Int.repr 31)

     then Some(Vint(Int.shrx n1 n2))

     else None

  | _, _ => None

  end.



Definition shru (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

     if Int.ltu n2 Int.iwordsize

     then Vint(Int.shru n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition rol (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.rol n1 n2)

  | _, _ => Vundef

  end.



Definition rolm (v: val) (amount mask: int): val :=

  match v with

  | Vint n => Vint(Int.rolm n amount mask)

  | _ => Vundef

  end.



Definition ror (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vint(Int.ror n1 n2)

  | _, _ => Vundef

  end.



Definition addf (v1 v2: val): val :=

  match v1, v2 with

  | Vfloat f1, Vfloat f2 => Vfloat(Float.add f1 f2)

  | _, _ => Vundef

  end.



Definition subf (v1 v2: val): val :=

  match v1, v2 with

  | Vfloat f1, Vfloat f2 => Vfloat(Float.sub f1 f2)

  | _, _ => Vundef

  end.



Definition mulf (v1 v2: val): val :=

  match v1, v2 with

  | Vfloat f1, Vfloat f2 => Vfloat(Float.mul f1 f2)

  | _, _ => Vundef

  end.



Definition divf (v1 v2: val): val :=

  match v1, v2 with

  | Vfloat f1, Vfloat f2 => Vfloat(Float.div f1 f2)

  | _, _ => Vundef

  end.



Definition floatofwords (v1 v2: val) : val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vfloat (Float.from_words n1 n2)

  | _, _ => Vundef

  end.



Definition addfs (v1 v2: val): val :=

  match v1, v2 with

  | Vsingle f1, Vsingle f2 => Vsingle(Float32.add f1 f2)

  | _, _ => Vundef

  end.



Definition subfs (v1 v2: val): val :=

  match v1, v2 with

  | Vsingle f1, Vsingle f2 => Vsingle(Float32.sub f1 f2)

  | _, _ => Vundef

  end.



Definition mulfs (v1 v2: val): val :=

  match v1, v2 with

  | Vsingle f1, Vsingle f2 => Vsingle(Float32.mul f1 f2)

  | _, _ => Vundef

  end.



Definition divfs (v1 v2: val): val :=

  match v1, v2 with

  | Vsingle f1, Vsingle f2 => Vsingle(Float32.div f1 f2)

  | _, _ => Vundef

  end.



Definition longofwords (v1 v2: val) : val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vlong (Int64.ofwords n1 n2)

  | _, _ => Vundef

  end.



Definition loword (v: val) : val :=

  match v with

  | Vlong n  => Vint (Int64.loword n)

  | _ => Vundef

  end.



Definition hiword (v: val) : val :=

  match v with

  | Vlong n  => Vint (Int64.hiword n)

  | _ => Vundef

  end.



Definition negl (v: val) : val :=

  match v with

  | Vlong n => Vlong (Int64.neg n)

  | _ => Vundef

  end.



Definition notl (v: val) : val :=

  match v with

  | Vlong n => Vlong (Int64.not n)

  | _ => Vundef

  end.



Definition longofint (v: val) : val :=

  match v with

  | Vint n => Vlong (Int64.repr (Int.signed n))

  | _ => Vundef

  end.



Definition longofintu (v: val) : val :=

  match v with

  | Vint n => Vlong (Int64.repr (Int.unsigned n))

  | _ => Vundef

  end.



Definition longoffloat (v: val) : option val :=

  match v with

  | Vfloat f => option_map Vlong (Float.to_long f)

  | _ => None

  end.



Definition longuoffloat (v: val) : option val :=

  match v with

  | Vfloat f => option_map Vlong (Float.to_longu f)

  | _ => None

  end.



Definition longofsingle (v: val) : option val :=

  match v with

  | Vsingle f => option_map Vlong (Float32.to_long f)

  | _ => None

  end.



Definition longuofsingle (v: val) : option val :=

  match v with

  | Vsingle f => option_map Vlong (Float32.to_longu f)

  | _ => None

  end.



Definition floatoflong (v: val) : option val :=

  match v with

  | Vlong n => Some (Vfloat (Float.of_long n))

  | _ => None

  end.



Definition floatoflongu (v: val) : option val :=

  match v with

  | Vlong n => Some (Vfloat (Float.of_longu n))

  | _ => None

  end.



Definition singleoflong (v: val) : option val :=

  match v with

  | Vlong n => Some (Vsingle (Float32.of_long n))

  | _ => None

  end.



Definition singleoflongu (v: val) : option val :=

  match v with

  | Vlong n => Some (Vsingle (Float32.of_longu n))

  | _ => None

  end.



Definition addl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.add n1 n2)

  | Vptr b1 ofs1, Vlong n2 => if Archi.ptr64 then Vptr b1 (Ptrofs.add ofs1 (Ptrofs.of_int64 n2)) else Vundef

  | Vlong n1, Vptr b2 ofs2 => if Archi.ptr64 then Vptr b2 (Ptrofs.add ofs2 (Ptrofs.of_int64 n1)) else Vundef

  | _, _ => Vundef

  end.



Definition subl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.sub n1 n2)

  | Vptr b1 ofs1, Vlong n2 =>

      if Archi.ptr64 then Vptr b1 (Ptrofs.sub ofs1 (Ptrofs.of_int64 n2)) else Vundef

  | Vptr b1 ofs1, Vptr b2 ofs2 =>

      if negb Archi.ptr64 then Vundef else

      if eq_block b1 b2 then Vlong(Ptrofs.to_int64 (Ptrofs.sub ofs1 ofs2)) else Vundef

  | _, _ => Vundef

  end.



Definition mull (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.mul n1 n2)

  | _, _ => Vundef

  end.



Definition mull' (v1 v2: val): val :=

  match v1, v2 with

  | Vint n1, Vint n2 => Vlong(Int64.mul' n1 n2)

  | _, _ => Vundef

  end.



Definition mullhs (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.mulhs n1 n2)

  | _, _ => Vundef

  end.



Definition mullhu (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.mulhu n1 n2)

  | _, _ => Vundef

  end.



Definition divls (v1 v2: val): option val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 =>

      if Int64.eq n2 Int64.zero

      || Int64.eq n1 (Int64.repr Int64.min_signed) && Int64.eq n2 Int64.mone

      then None

      else Some(Vlong(Int64.divs n1 n2))

  | _, _ => None

  end.



Definition modls (v1 v2: val): option val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 =>

      if Int64.eq n2 Int64.zero

      || Int64.eq n1 (Int64.repr Int64.min_signed) && Int64.eq n2 Int64.mone

      then None

      else Some(Vlong(Int64.mods n1 n2))

  | _, _ => None

  end.



Definition divlu (v1 v2: val): option val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 =>

      if Int64.eq n2 Int64.zero then None else Some(Vlong(Int64.divu n1 n2))

  | _, _ => None

  end.



Definition modlu (v1 v2: val): option val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 =>

      if Int64.eq n2 Int64.zero then None else Some(Vlong(Int64.modu n1 n2))

  | _, _ => None

  end.



Definition addl_carry (v1 v2 cin: val): val :=

  match v1, v2, cin with

  | Vlong n1, Vlong n2, Vlong c => Vlong(Int64.add_carry n1 n2 c)

  | _, _, _ => Vundef

  end.



Definition subl_overflow (v1 v2: val) : val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vint (Int.repr (Int64.unsigned (Int64.sub_overflow n1 n2 Int64.zero)))

  | _, _ => Vundef

  end.



Definition negativel (v: val) : val :=

  match v with

  | Vlong n => Vint (Int.repr (Int64.unsigned (Int64.negative n)))

  | _ => Vundef

  end.



Definition andl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.and n1 n2)

  | _, _ => Vundef

  end.



Definition orl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.or n1 n2)

  | _, _ => Vundef

  end.



Definition xorl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Vlong(Int64.xor n1 n2)

  | _, _ => Vundef

  end.



Definition shll (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vint n2 =>

     if Int.ltu n2 Int64.iwordsize'

     then Vlong(Int64.shl' n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition shrl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vint n2 =>

     if Int.ltu n2 Int64.iwordsize'

     then Vlong(Int64.shr' n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition shrlu (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vint n2 =>

     if Int.ltu n2 Int64.iwordsize'

     then Vlong(Int64.shru' n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition shrxl (v1 v2: val): option val :=

  match v1, v2 with

  | Vlong n1, Vint n2 =>

     if Int.ltu n2 (Int.repr 63)

     then Some(Vlong(Int64.shrx' n1 n2))

     else None

  | _, _ => None

  end.



Definition shrl_carry (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vint n2 =>

     if Int.ltu n2 Int64.iwordsize'

     then Vlong(Int64.shr_carry' n1 n2)

     else Vundef

  | _, _ => Vundef

  end.



Definition roll (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vint n2 => Vlong(Int64.rol n1 (Int64.repr (Int.unsigned n2)))

  | _, _ => Vundef

  end.



Definition rorl (v1 v2: val): val :=

  match v1, v2 with

  | Vlong n1, Vint n2 => Vlong(Int64.ror n1 (Int64.repr (Int.unsigned n2)))

  | _, _ => Vundef

  end.



Definition rolml (v: val) (amount: int) (mask: int64): val :=

  match v with

  | Vlong n => Vlong(Int64.rolm n (Int64.repr (Int.unsigned amount)) mask)

  | _ => Vundef

  end.



Section COMPARISONS.



Variable valid_ptr: block -> Z -> bool.

Let weak_valid_ptr (b: block) (ofs: Z) := valid_ptr b ofs || valid_ptr b (ofs - 1).



Definition cmp_bool (c: comparison) (v1 v2: val): option bool :=

  match v1, v2 with

  | Vint n1, Vint n2 => Some (Int.cmp c n1 n2)

  | _, _ => None

  end.



Definition cmp_different_blocks (c: comparison): option bool :=

  match c with

  | Ceq => Some false

  | Cne => Some true

  | _   => None

  end.



Definition cmpu_bool (c: comparison) (v1 v2: val): option bool :=

  match v1, v2 with

  | Vint n1, Vint n2 =>

      Some (Int.cmpu c n1 n2)

  | Vint n1, Vptr b2 ofs2 =>

      if Archi.ptr64 then None else

      if Int.eq n1 Int.zero && weak_valid_ptr b2 (Ptrofs.unsigned ofs2)

      then cmp_different_blocks c

      else None

  | Vptr b1 ofs1, Vptr b2 ofs2 =>

      if Archi.ptr64 then None else

      if eq_block b1 b2 then

        if weak_valid_ptr b1 (Ptrofs.unsigned ofs1)

           && weak_valid_ptr b2 (Ptrofs.unsigned ofs2)

        then Some (Ptrofs.cmpu c ofs1 ofs2)

        else None

      else

        if valid_ptr b1 (Ptrofs.unsigned ofs1)

           && valid_ptr b2 (Ptrofs.unsigned ofs2)

        then cmp_different_blocks c

        else None

  | Vptr b1 ofs1, Vint n2 =>

      if Archi.ptr64 then None else

      if Int.eq n2 Int.zero && weak_valid_ptr b1 (Ptrofs.unsigned ofs1)

      then cmp_different_blocks c

      else None

  | _, _ => None

  end.



Definition cmpf_bool (c: comparison) (v1 v2: val): option bool :=

  match v1, v2 with

  | Vfloat f1, Vfloat f2 => Some (Float.cmp c f1 f2)

  | _, _ => None

  end.



Definition cmpfs_bool (c: comparison) (v1 v2: val): option bool :=

  match v1, v2 with

  | Vsingle f1, Vsingle f2 => Some (Float32.cmp c f1 f2)

  | _, _ => None

  end.



Definition cmpl_bool (c: comparison) (v1 v2: val): option bool :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Some (Int64.cmp c n1 n2)

  | _, _ => None

  end.



Definition cmplu_bool (c: comparison) (v1 v2: val): option bool :=

  match v1, v2 with

  | Vlong n1, Vlong n2 => Some (Int64.cmpu c n1 n2)

  | Vlong n1, Vptr b2 ofs2 =>

      if negb Archi.ptr64 then None else

      if Int64.eq n1 Int64.zero && weak_valid_ptr b2 (Ptrofs.unsigned ofs2)

      then cmp_different_blocks c

      else None

  | Vptr b1 ofs1, Vptr b2 ofs2 =>

      if negb Archi.ptr64 then None else

      if eq_block b1 b2 then

        if weak_valid_ptr b1 (Ptrofs.unsigned ofs1)

           && weak_valid_ptr b2 (Ptrofs.unsigned ofs2)

        then Some (Ptrofs.cmpu c ofs1 ofs2)

        else None

      else

        if valid_ptr b1 (Ptrofs.unsigned ofs1)

           && valid_ptr b2 (Ptrofs.unsigned ofs2)

        then cmp_different_blocks c

        else None

  | Vptr b1 ofs1, Vlong n2 =>

      if negb Archi.ptr64 then None else

      if Int64.eq n2 Int64.zero && weak_valid_ptr b1 (Ptrofs.unsigned ofs1)

      then cmp_different_blocks c

      else None

  | _, _ => None

  end.



Definition of_optbool (ob: option bool): val :=

  match ob with Some true => Vtrue | Some false => Vfalse | None => Vundef end.



Definition cmp (c: comparison) (v1 v2: val): val :=

  of_optbool (cmp_bool c v1 v2).



Definition cmpu (c: comparison) (v1 v2: val): val :=

  of_optbool (cmpu_bool c v1 v2).



Definition cmpf (c: comparison) (v1 v2: val): val :=

  of_optbool (cmpf_bool c v1 v2).



Definition cmpfs (c: comparison) (v1 v2: val): val :=

  of_optbool (cmpfs_bool c v1 v2).



Definition cmpl (c: comparison) (v1 v2: val): option val :=

  option_map of_bool (cmpl_bool c v1 v2).



Definition cmplu (c: comparison) (v1 v2: val): option val :=

  option_map of_bool (cmplu_bool c v1 v2).



Definition maskzero_bool (v: val) (mask: int): option bool :=

  match v with

  | Vint n => Some (Int.eq (Int.and n mask) Int.zero)

  | _ => None

  end.



End COMPARISONS.



Definition offset_ptr (v: val) (delta: ptrofs) : val :=

  match v with

  | Vptr b ofs => Vptr b (Ptrofs.add ofs delta)

  | _ => Vundef

  end.



Definition load_result (chunk: memory_chunk) (v: val) :=

  match chunk, v with

  | Mint8signed, Vint n => Vint (Int.sign_ext 8 n)

  | Mint8unsigned, Vint n => Vint (Int.zero_ext 8 n)

  | Mint16signed, Vint n => Vint (Int.sign_ext 16 n)

  | Mint16unsigned, Vint n => Vint (Int.zero_ext 16 n)

  | Mint32, Vint n => Vint n

  | Mint32, Vptr b ofs => if Archi.ptr64 then Vundef else Vptr b ofs

  | Mint64, Vlong n => Vlong n

  | Mint64, Vptr b ofs => if Archi.ptr64 then Vptr b ofs else Vundef

  | Mfloat32, Vsingle f => Vsingle f

  | Mfloat64, Vfloat f => Vfloat f

  | Many32, (Vint _ | Vsingle _) => v

  | Many32, Vptr _ _ => if Archi.ptr64 then Vundef else v

  | Many64, _ => v

  | _, _ => Vundef

  end.



Lemma load_result_type:

  forall chunk v, has_type (load_result chunk v) (type_of_chunk chunk).

Proof.

  intros. unfold has_type; destruct chunk; destruct v; simpl; auto; destruct Archi.ptr64 eqn:SF; simpl; auto.

Qed.



Lemma load_result_same:

  forall v ty, has_type v ty -> load_result (chunk_of_type ty) v = v.

Proof.

  unfold has_type, load_result; intros.

  destruct v; destruct ty; destruct Archi.ptr64; try contradiction; try discriminate; auto.

Qed.



Theorem cast8unsigned_and:

  forall x, zero_ext 8 x = and x (Vint(Int.repr 255)).

Proof.

  destruct x; simpl; auto. decEq.

  change 255 with (two_p 8 - 1). apply Int.zero_ext_and. omega.

Qed.



Theorem cast16unsigned_and:

  forall x, zero_ext 16 x = and x (Vint(Int.repr 65535)).

Proof.

  destruct x; simpl; auto. decEq.

  change 65535 with (two_p 16 - 1). apply Int.zero_ext_and. omega.

Qed.



Theorem bool_of_val_of_bool:

  forall b1 b2, bool_of_val (of_bool b1) b2 -> b1 = b2.

Proof.

  intros. destruct b1; simpl in H; inv H; auto.

Qed.



Theorem bool_of_val_of_optbool:

  forall ob b, bool_of_val (of_optbool ob) b -> ob = Some b.

Proof.

  intros. destruct ob; simpl in H.

  destruct b0; simpl in H; inv H; auto.

  inv H.

Qed.



Theorem notbool_negb_1:

  forall b, of_bool (negb b) = notbool (of_bool b).

Proof.

  destruct b; reflexivity.

Qed.



Theorem notbool_negb_2:

  forall b, of_bool b = notbool (of_bool (negb b)).

Proof.

  destruct b; reflexivity.

Qed.



Theorem notbool_negb_3:

  forall ob, of_optbool (option_map negb ob) = notbool (of_optbool ob).

Proof.

  destruct ob; auto. destruct b; auto.

Qed.



Theorem notbool_idem2:

  forall b, notbool(notbool(of_bool b)) = of_bool b.

Proof.

  destruct b; reflexivity.

Qed.



Theorem notbool_idem3:

  forall x, notbool(notbool(notbool x)) = notbool x.

Proof.

  destruct x; simpl; auto.

  case (Int.eq i Int.zero); reflexivity.

Qed.



Theorem notbool_idem4:

  forall ob, notbool (notbool (of_optbool ob)) = of_optbool ob.

Proof.

  destruct ob; auto. destruct b; auto.

Qed.



Theorem add_commut: forall x y, add x y = add y x.

Proof.

  destruct x; destruct y; simpl; auto.

  decEq. apply Int.add_commut.

Qed.



Theorem add_assoc: forall x y z, add (add x y) z = add x (add y z).

Proof.

  unfold add; intros; destruct Archi.ptr64 eqn:SF, x, y, z; simpl; auto.

- rewrite Int.add_assoc; auto.

- rewrite Int.add_assoc; auto.

- rewrite ! Ptrofs.add_assoc. f_equal. f_equal.

  rewrite Ptrofs.add_commut. auto with ptrofs.

- rewrite ! Ptrofs.add_assoc. f_equal. f_equal.

  apply Ptrofs.add_commut.

- rewrite ! Ptrofs.add_assoc. f_equal. f_equal.

  symmetry. auto with ptrofs.

Qed.



Theorem add_permut: forall x y z, add x (add y z) = add y (add x z).

Proof.

  intros. rewrite (add_commut y z). rewrite <- add_assoc. apply add_commut.

Qed.



Theorem add_permut_4:

  forall x y z t, add (add x y) (add z t) = add (add x z) (add y t).

Proof.

  intros. rewrite add_permut. rewrite add_assoc.

  rewrite add_permut. symmetry. apply add_assoc.

Qed.



Theorem neg_zero: neg Vzero = Vzero.

Proof.

  reflexivity.

Qed.



Theorem neg_add_distr: forall x y, neg(add x y) = add (neg x) (neg y).

Proof.

  unfold neg, add; intros; destruct Archi.ptr64 eqn:SF, x, y; simpl; auto;

  rewrite Int.neg_add_distr; auto.

Qed.



Theorem sub_zero_r: forall x, sub Vzero x = neg x.

Proof.

  destruct x; simpl; auto.

Qed.



Theorem sub_add_opp: forall x y, sub x (Vint y) = add x (Vint (Int.neg y)).

Proof.

  unfold sub, add; intros; destruct Archi.ptr64 eqn:SF, x; auto.

- rewrite Int.sub_add_opp; auto.

- rewrite Int.sub_add_opp; auto.

- rewrite Ptrofs.sub_add_opp. f_equal. f_equal. symmetry. auto with ptrofs.

Qed.



Theorem sub_opp_add: forall x y, sub x (Vint (Int.neg y)) = add x (Vint y).

Proof.

  intros. rewrite sub_add_opp. rewrite Int.neg_involutive. auto.

Qed.



Theorem sub_add_l:

  forall v1 v2 i, sub (add v1 (Vint i)) v2 = add (sub v1 v2) (Vint i).

Proof.

  unfold sub, add; intros; destruct Archi.ptr64 eqn:SF, v1, v2; auto.

- rewrite Int.sub_add_l; auto.

- rewrite Int.sub_add_l; auto.

- rewrite Ptrofs.sub_add_l; auto.

- destruct (eq_block b b0); auto.

  f_equal. rewrite Ptrofs.sub_add_l. auto with ptrofs.

Qed.



Theorem sub_add_r:

  forall v1 v2 i, sub v1 (add v2 (Vint i)) = add (sub v1 v2) (Vint (Int.neg i)).

Proof.

  unfold sub, add; intros; destruct Archi.ptr64 eqn:SF, v1, v2; auto.

- rewrite Int.add_commut. rewrite Int.sub_add_r. auto.

- rewrite Int.add_commut. rewrite Int.sub_add_r. auto.

- f_equal. replace (Ptrofs.of_int (Int.add i1 i)) with (Ptrofs.add (Ptrofs.of_int i) (Ptrofs.of_int i1)).

  rewrite Ptrofs.sub_add_r. f_equal.

  symmetry. auto with ptrofs.

  symmetry. rewrite Int.add_commut. auto with ptrofs.

- destruct (eq_block b b0); auto.

  f_equal. rewrite Ptrofs.add_commut. rewrite Ptrofs.sub_add_r. auto with ptrofs.

Qed.



Theorem mul_commut: forall x y, mul x y = mul y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int.mul_commut.

Qed.



Theorem mul_assoc: forall x y z, mul (mul x y) z = mul x (mul y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int.mul_assoc.

Qed.



Theorem mul_add_distr_l:

  forall x y z, mul (add x y) z = add (mul x z) (mul y z).

Proof.

  unfold mul, add; intros; destruct Archi.ptr64 eqn:SF, x, y, z; simpl; auto;

  rewrite Int.mul_add_distr_l; auto.

Qed.



Theorem mul_add_distr_r:

  forall x y z, mul x (add y z) = add (mul x y) (mul x z).

Proof.

  unfold mul, add; intros; destruct Archi.ptr64 eqn:SF, x, y, z; simpl; auto;

  rewrite Int.mul_add_distr_r; auto.

Qed.



Theorem mul_pow2:

  forall x n logn,

  Int.is_power2 n = Some logn ->

  mul x (Vint n) = shl x (Vint logn).

Proof.

  intros; destruct x; simpl; auto.

  change 32 with Int.zwordsize.

  rewrite (Int.is_power2_range _ _ H). decEq. apply Int.mul_pow2. auto.

Qed.



Theorem mods_divs:

  forall x y z,

  mods x y = Some z -> exists v, divs x y = Some v /\ z = sub x (mul v y).

Proof.

  intros. destruct x; destruct y; simpl in *; try discriminate.

  destruct (Int.eq i0 Int.zero

        || Int.eq i (Int.repr Int.min_signed) && Int.eq i0 Int.mone); inv H.

  exists (Vint (Int.divs i i0)); split; auto.

  simpl. rewrite Int.mods_divs. auto.

Qed.



Theorem modu_divu:

  forall x y z,

  modu x y = Some z -> exists v, divu x y = Some v /\ z = sub x (mul v y).

Proof.

  intros. destruct x; destruct y; simpl in *; try discriminate.

  destruct (Int.eq i0 Int.zero) eqn:?; inv H.

  exists (Vint (Int.divu i i0)); split; auto.

  simpl. rewrite Int.modu_divu. auto.

  generalize (Int.eq_spec i0 Int.zero). rewrite Heqb; auto.

Qed.



Theorem modls_divls:

  forall x y z,

  modls x y = Some z -> exists v, divls x y = Some v /\ z = subl x (mull v y).

Proof.

  intros. destruct x; destruct y; simpl in *; try discriminate.

  destruct (Int64.eq i0 Int64.zero

        || Int64.eq i (Int64.repr Int64.min_signed) && Int64.eq i0 Int64.mone); inv H.

  exists (Vlong (Int64.divs i i0)); split; auto.

  simpl. rewrite Int64.mods_divs. auto.

Qed.



Theorem modlu_divlu:

  forall x y z,

  modlu x y = Some z -> exists v, divlu x y = Some v /\ z = subl x (mull v y).

Proof.

  intros. destruct x; destruct y; simpl in *; try discriminate.

  destruct (Int64.eq i0 Int64.zero) eqn:?; inv H.

  exists (Vlong (Int64.divu i i0)); split; auto.

  simpl. rewrite Int64.modu_divu. auto.

  generalize (Int64.eq_spec i0 Int64.zero). rewrite Heqb; auto.

Qed.



Theorem divs_pow2:

  forall x n logn y,

  Int.is_power2 n = Some logn -> Int.ltu logn (Int.repr 31) = true ->

  divs x (Vint n) = Some y ->

  shrx x (Vint logn) = Some y.

Proof.

  intros; destruct x; simpl in H1; inv H1.

  destruct (Int.eq n Int.zero

         || Int.eq i (Int.repr Int.min_signed) && Int.eq n Int.mone); inv H3.

  simpl. rewrite H0. decEq. decEq. symmetry. apply Int.divs_pow2. auto.

Qed.



Theorem divs_one:

  forall s , divs (Vint s) (Vint Int.one) = Some (Vint s).

Proof.

   intros.

   unfold divs. rewrite Int.eq_false; try discriminate.

   simpl. rewrite (Int.eq_false Int.one Int.mone); try discriminate.

   rewrite andb_false_intro2; auto. f_equal. f_equal.

   rewrite Int.divs_one; auto. replace Int.zwordsize with 32; auto. omega.

Qed.



Theorem divu_pow2:

  forall x n logn y,

  Int.is_power2 n = Some logn ->

  divu x (Vint n) = Some y ->

  shru x (Vint logn) = y.

Proof.

  intros; destruct x; simpl in H0; inv H0.

  destruct (Int.eq n Int.zero); inv H2.

  simpl.

  rewrite (Int.is_power2_range _ _ H).

  decEq. symmetry. apply Int.divu_pow2. auto.

Qed.



Theorem divu_one:

  forall s, divu (Vint s) (Vint Int.one) = Some (Vint s).

Proof.

  intros. simpl. rewrite Int.eq_false; try discriminate.

  f_equal. f_equal. apply Int.divu_one.

Qed.



Theorem modu_pow2:

  forall x n logn y,

  Int.is_power2 n = Some logn ->

  modu x (Vint n) = Some y ->

  and x (Vint (Int.sub n Int.one)) = y.

Proof.

  intros; destruct x; simpl in H0; inv H0.

  destruct (Int.eq n Int.zero); inv H2.

  simpl. decEq. symmetry. eapply Int.modu_and; eauto.

Qed.



Theorem and_commut: forall x y, and x y = and y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int.and_commut.

Qed.



Theorem and_assoc: forall x y z, and (and x y) z = and x (and y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int.and_assoc.

Qed.



Theorem or_commut: forall x y, or x y = or y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int.or_commut.

Qed.



Theorem or_assoc: forall x y z, or (or x y) z = or x (or y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int.or_assoc.

Qed.



Theorem xor_commut: forall x y, xor x y = xor y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int.xor_commut.

Qed.



Theorem xor_assoc: forall x y z, xor (xor x y) z = xor x (xor y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int.xor_assoc.

Qed.



Theorem not_xor: forall x, notint x = xor x (Vint Int.mone).

Proof.

  destruct x; simpl; auto.

Qed.



Theorem shl_mul: forall x y, mul x (shl Vone y) = shl x y.

Proof.

  destruct x; destruct y; simpl; auto.

  case (Int.ltu i0 Int.iwordsize); auto.

  decEq. symmetry. apply Int.shl_mul.

Qed.



Theorem shl_rolm:

  forall x n,

  Int.ltu n Int.iwordsize = true ->

  shl x (Vint n) = rolm x n (Int.shl Int.mone n).

Proof.

  intros; destruct x; simpl; auto.

  rewrite H. decEq. apply Int.shl_rolm. exact H.

Qed.



Theorem shll_rolml:

  forall x n,

  Int.ltu n Int64.iwordsize' = true ->

  shll x (Vint n) = rolml x n (Int64.shl Int64.mone (Int64.repr (Int.unsigned n))).

Proof.

  intros. destruct x; auto. simpl. rewrite H. rewrite <- Int64.shl_rolm. unfold Int64.shl.

  rewrite Int64.int_unsigned_repr. constructor. unfold Int64.ltu. rewrite Int64.int_unsigned_repr.

  apply H.

Qed.



Theorem shru_rolm:

  forall x n,

  Int.ltu n Int.iwordsize = true ->

  shru x (Vint n) = rolm x (Int.sub Int.iwordsize n) (Int.shru Int.mone n).

Proof.

  intros; destruct x; simpl; auto.

  rewrite H. decEq. apply Int.shru_rolm. exact H.

Qed.



Theorem shrlu_rolml:

  forall x n,

    Int.ltu n Int64.iwordsize' = true ->

    shrlu x (Vint n) = rolml x (Int.sub Int64.iwordsize' n) (Int64.shru Int64.mone (Int64.repr (Int.unsigned n))).

Proof.

  intros. destruct x; auto. simpl. rewrite H.

  rewrite Int64.int_sub_ltu by apply H. rewrite Int64.repr_unsigned. rewrite <- Int64.shru_rolm. unfold Int64.shru'.  unfold Int64.shru.

  rewrite Int64.unsigned_repr. reflexivity. apply Int64.int_unsigned_range.

  unfold Int64.ltu. rewrite Int64.int_unsigned_repr. auto.

Qed.



Theorem shrx_carry:

  forall x y z,

  shrx x y = Some z ->

  add (shr x y) (shr_carry x y) = z.

Proof.

  intros. destruct x; destruct y; simpl in H; inv H.

  destruct (Int.ltu i0 (Int.repr 31)) eqn:?; inv H1.

  exploit Int.ltu_inv; eauto. change (Int.unsigned (Int.repr 31)) with 31. intros.

  assert (Int.ltu i0 Int.iwordsize = true).

    unfold Int.ltu. apply zlt_true. change (Int.unsigned Int.iwordsize) with 32. omega.

  simpl. rewrite H0. simpl. decEq. rewrite Int.shrx_carry; auto.

Qed.



Theorem shrx_shr:

  forall x y z,

  shrx x y = Some z ->

  exists p, exists q,

    x = Vint p /\ y = Vint q /\

    z = shr (if Int.lt p Int.zero then add x (Vint (Int.sub (Int.shl Int.one q) Int.one)) else x) (Vint q).

Proof.

  intros. destruct x; destruct y; simpl in H; inv H.

  destruct (Int.ltu i0 (Int.repr 31)) eqn:?; inv H1.

  exploit Int.ltu_inv; eauto. change (Int.unsigned (Int.repr 31)) with 31. intros.

  assert (Int.ltu i0 Int.iwordsize = true).

    unfold Int.ltu. apply zlt_true. change (Int.unsigned Int.iwordsize) with 32. omega.

  exists i; exists i0; intuition.

  rewrite Int.shrx_shr; auto. destruct (Int.lt i Int.zero); simpl; rewrite H0; auto.

Qed.



Theorem shrx_shr_2:

  forall n x z,

  shrx x (Vint n) = Some z ->

  z = (if Int.eq n Int.zero then x else

         shr (add x (shru (shr x (Vint (Int.repr 31)))

                    (Vint (Int.sub (Int.repr 32) n))))

             (Vint n)).

Proof.

  intros. destruct x; simpl in H; try discriminate.

  destruct (Int.ltu n (Int.repr 31)) eqn:LT; inv H.

  exploit Int.ltu_inv; eauto. change (Int.unsigned (Int.repr 31)) with 31; intros LT'.

  predSpec Int.eq Int.eq_spec n Int.zero.

- subst n. unfold Int.shrx. rewrite Int.shl_zero. unfold Int.divs. change (Int.signed Int.one) with 1.

  rewrite Z.quot_1_r. rewrite Int.repr_signed; auto.

- simpl. change (Int.ltu (Int.repr 31) Int.iwordsize) with true. simpl.

  replace (Int.ltu (Int.sub (Int.repr 32) n) Int.iwordsize) with true. simpl.

  replace (Int.ltu n Int.iwordsize) with true.

  f_equal; apply Int.shrx_shr_2; assumption.

  symmetry; apply zlt_true. change (Int.unsigned n < 32); omega.

  symmetry; apply zlt_true. unfold Int.sub. change (Int.unsigned (Int.repr 32)) with 32.

  assert (Int.unsigned n <> 0). { red; intros; elim H. rewrite <- (Int.repr_unsigned n), H0. auto. }

  rewrite Int.unsigned_repr.

  change (Int.unsigned Int.iwordsize) with 32; omega.

  assert (32 < Int.max_unsigned) by reflexivity. omega.

Qed.



Theorem or_rolm:

  forall x n m1 m2,

  or (rolm x n m1) (rolm x n m2) = rolm x n (Int.or m1 m2).

Proof.

  intros; destruct x; simpl; auto.

  decEq. apply Int.or_rolm.

Qed.



Theorem rolm_rolm:

  forall x n1 m1 n2 m2,

  rolm (rolm x n1 m1) n2 m2 =

    rolm x (Int.modu (Int.add n1 n2) Int.iwordsize)

           (Int.and (Int.rol m1 n2) m2).

Proof.

  intros; destruct x; simpl; auto.

  decEq.

  apply Int.rolm_rolm. apply int_wordsize_divides_modulus.

Qed.



Theorem rolm_zero:

  forall x m,

  rolm x Int.zero m = and x (Vint m).

Proof.

  intros; destruct x; simpl; auto. decEq. apply Int.rolm_zero.

Qed.



Theorem addl_commut: forall x y, addl x y = addl y x.

Proof.

  destruct x; destruct y; simpl; auto.

  decEq. apply Int64.add_commut.

Qed.



Theorem addl_assoc: forall x y z, addl (addl x y) z = addl x (addl y z).

Proof.

  unfold addl; intros; destruct Archi.ptr64 eqn:SF, x, y, z; simpl; auto.

- rewrite Int64.add_assoc; auto.

- rewrite ! Ptrofs.add_assoc. f_equal. f_equal.

  rewrite Ptrofs.add_commut. auto with ptrofs.

- rewrite ! Ptrofs.add_assoc. f_equal. f_equal.

  apply Ptrofs.add_commut.

- rewrite ! Ptrofs.add_assoc. f_equal. f_equal.

  symmetry. auto with ptrofs.

- rewrite Int64.add_assoc; auto.

Qed.



Theorem addl_permut: forall x y z, addl x (addl y z) = addl y (addl x z).

Proof.

  intros. rewrite (addl_commut y z). rewrite <- addl_assoc. apply addl_commut.

Qed.



Theorem addl_permut_4:

  forall x y z t, addl (addl x y) (addl z t) = addl (addl x z) (addl y t).

Proof.

  intros. rewrite addl_permut. rewrite addl_assoc.

  rewrite addl_permut. symmetry. apply addl_assoc.

Qed.



Theorem negl_addl_distr: forall x y, negl(addl x y) = addl (negl x) (negl y).

Proof.

  unfold negl, addl; intros; destruct Archi.ptr64 eqn:SF; destruct x; destruct y; simpl; auto;

  decEq; apply Int64.neg_add_distr.

Qed.



Theorem subl_addl_opp: forall x y, subl x (Vlong y) = addl x (Vlong (Int64.neg y)).

Proof.

  unfold subl, addl; intros; destruct Archi.ptr64 eqn:SF, x; auto.

- rewrite Int64.sub_add_opp; auto.

- rewrite Ptrofs.sub_add_opp. f_equal. f_equal. symmetry. auto with ptrofs.

- rewrite Int64.sub_add_opp; auto.

Qed.



Theorem subl_opp_addl: forall x y, subl x (Vlong (Int64.neg y)) = addl x (Vlong y).

Proof.

  intros. rewrite subl_addl_opp. rewrite Int64.neg_involutive. auto.

Qed.



Theorem subl_addl_l:

  forall v1 v2 i, subl (addl v1 (Vlong i)) v2 = addl (subl v1 v2) (Vlong i).

Proof.

  unfold subl, addl; intros; destruct Archi.ptr64 eqn:SF, v1, v2; auto.

- rewrite Int64.sub_add_l; auto.

- rewrite Ptrofs.sub_add_l; auto.

- destruct (eq_block b b0); auto.

  simpl. f_equal. rewrite Ptrofs.sub_add_l. auto with ptrofs.

- rewrite Int64.sub_add_l; auto.

Qed.



Theorem subl_addl_r:

  forall v1 v2 i, subl v1 (addl v2 (Vlong i)) = addl (subl v1 v2) (Vlong (Int64.neg i)).

Proof.

  unfold subl, addl; intros; destruct Archi.ptr64 eqn:SF, v1, v2; auto.

- rewrite Int64.add_commut. rewrite Int64.sub_add_r. auto.

- f_equal. replace (Ptrofs.of_int64 (Int64.add i1 i)) with (Ptrofs.add (Ptrofs.of_int64 i) (Ptrofs.of_int64 i1)).

  rewrite Ptrofs.sub_add_r. f_equal.

  symmetry. auto with ptrofs.

  symmetry. rewrite Int64.add_commut. auto with ptrofs.

- destruct (eq_block b b0); auto.

  simpl; f_equal. rewrite Ptrofs.add_commut. rewrite Ptrofs.sub_add_r. auto with ptrofs.

- rewrite Int64.add_commut. rewrite Int64.sub_add_r. auto.

Qed.



Theorem mull_commut: forall x y, mull x y = mull y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int64.mul_commut.

Qed.



Theorem mull_assoc: forall x y z, mull (mull x y) z = mull x (mull y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int64.mul_assoc.

Qed.



Theorem mull_addl_distr_l:

  forall x y z, mull (addl x y) z = addl (mull x z) (mull y z).

Proof.

  unfold mull, addl; intros; destruct Archi.ptr64 eqn:SF; destruct x; destruct y; destruct z; simpl; auto;

  decEq; apply Int64.mul_add_distr_l.

Qed.



Theorem mull_addl_distr_r:

  forall x y z, mull x (addl y z) = addl (mull x y) (mull x z).

Proof.

  unfold mull, addl; intros; destruct Archi.ptr64 eqn:SF; destruct x; destruct y; destruct z; simpl; auto;

  decEq; apply Int64.mul_add_distr_r.

Qed.



Theorem andl_commut: forall x y, andl x y = andl y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int64.and_commut.

Qed.



Theorem andl_assoc: forall x y z, andl (andl x y) z = andl x (andl y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int64.and_assoc.

Qed.



Theorem orl_commut: forall x y, orl x y = orl y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int64.or_commut.

Qed.



Theorem orl_assoc: forall x y z, orl (orl x y) z = orl x (orl y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int64.or_assoc.

Qed.



Theorem xorl_commut: forall x y, xorl x y = xorl y x.

Proof.

  destruct x; destruct y; simpl; auto. decEq. apply Int64.xor_commut.

Qed.



Theorem xorl_assoc: forall x y z, xorl (xorl x y) z = xorl x (xorl y z).

Proof.

  destruct x; destruct y; destruct z; simpl; auto.

  decEq. apply Int64.xor_assoc.

Qed.



Theorem notl_xorl: forall x, notl x = xorl x (Vlong Int64.mone).

Proof.

  destruct x; simpl; auto.

Qed.



Theorem divls_pow2:

  forall x n logn y,

  Int64.is_power2' n = Some logn -> Int.ltu logn (Int.repr 63) = true ->

  divls x (Vlong n) = Some y ->

  shrxl x (Vint logn) = Some y.

Proof.

  intros; destruct x; simpl in H1; inv H1.

  destruct (Int64.eq n Int64.zero

         || Int64.eq i (Int64.repr Int64.min_signed) && Int64.eq n Int64.mone); inv H3.

  simpl. rewrite H0. decEq. decEq.

  generalize (Int64.is_power2'_correct _ _ H); intro.

  unfold Int64.shrx'. rewrite Int64.shl'_mul_two_p. rewrite <- H1.

  rewrite Int64.mul_commut. rewrite Int64.mul_one.

  rewrite Int64.repr_unsigned. auto.

Qed.



Theorem divls_one:

  forall n, divls (Vlong n) (Vlong Int64.one) = Some (Vlong n).

Proof.

  intros. unfold divls. rewrite Int64.eq_false; try discriminate.

  rewrite (Int64.eq_false Int64.one Int64.mone); try discriminate.

  rewrite andb_false_intro2; auto.

  simpl. f_equal. f_equal. apply Int64.divs_one.

  replace Int64.zwordsize with 64; auto. omega.

Qed.



Theorem divlu_pow2:

  forall x n logn y,

  Int64.is_power2' n = Some logn ->

  divlu x (Vlong n) = Some y ->

  shrlu x (Vint logn) = y.

Proof.

  intros; destruct x; simpl in H0; inv H0.

  destruct (Int64.eq n Int64.zero); inv H2.

  simpl.

  rewrite (Int64.is_power2'_range _ _ H).

  decEq. symmetry. apply Int64.divu_pow2'. auto.

Qed.



Theorem divlu_one:

  forall n, divlu (Vlong n) (Vlong Int64.one) = Some (Vlong n).

Proof.

  intros. unfold divlu. rewrite Int64.eq_false; try discriminate.

  simpl. f_equal. f_equal. apply Int64.divu_one.

Qed.



Theorem modlu_pow2:

  forall x n logn y,

  Int64.is_power2 n = Some logn ->

  modlu x (Vlong n) = Some y ->

  andl x (Vlong (Int64.sub n Int64.one)) = y.

Proof.

  intros; destruct x; simpl in H0; inv H0.

  destruct (Int64.eq n Int64.zero); inv H2.

  simpl. decEq. symmetry. eapply Int64.modu_and; eauto.

Qed.



Theorem shrxl_carry:

  forall x y z,

  shrxl x y = Some z ->

  addl (shrl x y) (shrl_carry x y) = z.

Proof.

  intros. destruct x; destruct y; simpl in H; inv H.

  destruct (Int.ltu i0 (Int.repr 63)) eqn:?; inv H1.

  exploit Int.ltu_inv; eauto. change (Int.unsigned (Int.repr 63)) with 63. intros.

  assert (Int.ltu i0 Int64.iwordsize' = true).

    unfold Int.ltu. apply zlt_true. change (Int.unsigned Int64.iwordsize') with 64. omega.

  simpl. rewrite H0. simpl. decEq. rewrite Int64.shrx'_carry; auto.

Qed.



Theorem shrxl_shrl_2:

  forall n x z,

  shrxl x (Vint n) = Some z ->

  z = (if Int.eq n Int.zero then x else

         shrl (addl x (shrlu (shrl x (Vint (Int.repr 63)))

                      (Vint (Int.sub (Int.repr 64) n))))

              (Vint n)).

Proof.

  intros. destruct x; simpl in H; try discriminate.

  destruct (Int.ltu n (Int.repr 63)) eqn:LT; inv H.

  exploit Int.ltu_inv; eauto. change (Int.unsigned (Int.repr 63)) with 63; intros LT'.

  predSpec Int.eq Int.eq_spec n Int.zero.

- subst n. rewrite Int64.shrx'_zero. auto.

- simpl. change (Int.ltu (Int.repr 63) Int64.iwordsize') with true. simpl.

  replace (Int.ltu (Int.sub (Int.repr 64) n) Int64.iwordsize') with true. simpl.

  replace (Int.ltu n Int64.iwordsize') with true.

  f_equal; apply Int64.shrx'_shr_2; assumption.

  symmetry; apply zlt_true. change (Int.unsigned n < 64); omega.

  symmetry; apply zlt_true. unfold Int.sub. change (Int.unsigned (Int.repr 64)) with 64.

  assert (Int.unsigned n <> 0). { red; intros; elim H. rewrite <- (Int.repr_unsigned n), H0. auto. }

  rewrite Int.unsigned_repr.

  change (Int.unsigned Int64.iwordsize') with 64; omega.

  assert (64 < Int.max_unsigned) by reflexivity. omega.

Qed.



Theorem negate_cmp_bool:

  forall c x y, cmp_bool (negate_comparison c) x y = option_map negb (cmp_bool c x y).

Proof.

  destruct x; destruct y; simpl; auto. rewrite Int.negate_cmp. auto.

Qed.



Theorem negate_cmpu_bool:

  forall valid_ptr c x y,

  cmpu_bool valid_ptr (negate_comparison c) x y = option_map negb (cmpu_bool valid_ptr c x y).

Proof.

  assert (forall c,

    cmp_different_blocks (negate_comparison c) = option_map negb (cmp_different_blocks c)).

  { destruct c; auto. }

  unfold cmpu_bool; intros; destruct Archi.ptr64 eqn:SF, x, y; auto.

- rewrite Int.negate_cmpu. auto.

- rewrite Int.negate_cmpu. auto.

- destruct (Int.eq i Int.zero && (valid_ptr b (Ptrofs.unsigned i0) || valid_ptr b (Ptrofs.unsigned i0 - 1))); auto.

- destruct (Int.eq i0 Int.zero && (valid_ptr b (Ptrofs.unsigned i) || valid_ptr b (Ptrofs.unsigned i - 1))); auto.

- destruct (eq_block b b0).

  destruct ((valid_ptr b (Ptrofs.unsigned i) || valid_ptr b (Ptrofs.unsigned i - 1)) &&

            (valid_ptr b0 (Ptrofs.unsigned i0) || valid_ptr b0 (Ptrofs.unsigned i0 - 1))).

  rewrite Ptrofs.negate_cmpu. auto.

  auto.

  destruct (valid_ptr b (Ptrofs.unsigned i) && valid_ptr b0 (Ptrofs.unsigned i0)); auto.

Qed.



Theorem negate_cmpl_bool:

  forall c x y, cmpl_bool (negate_comparison c) x y = option_map negb (cmpl_bool c x y).

Proof.

  destruct x; destruct y; simpl; auto. rewrite Int64.negate_cmp. auto.

Qed.



Theorem negate_cmplu_bool:

  forall valid_ptr c x y,

  cmplu_bool valid_ptr (negate_comparison c) x y = option_map negb (cmplu_bool valid_ptr c x y).

Proof.

  assert (forall c,

    cmp_different_blocks (negate_comparison c) = option_map negb (cmp_different_blocks c)).

  { destruct c; auto. }

  unfold cmplu_bool; intros; destruct Archi.ptr64 eqn:SF, x, y; auto.

- rewrite Int64.negate_cmpu. auto.

- simpl. destruct (Int64.eq i Int64.zero && (valid_ptr b (Ptrofs.unsigned i0) || valid_ptr b (Ptrofs.unsigned i0 - 1))); auto.

- simpl. destruct (Int64.eq i0 Int64.zero && (valid_ptr b (Ptrofs.unsigned i) || valid_ptr b (Ptrofs.unsigned i - 1))); auto.

- simpl. destruct (eq_block b b0).

  destruct ((valid_ptr b (Ptrofs.unsigned i) || valid_ptr b (Ptrofs.unsigned i - 1)) &&

            (valid_ptr b0 (Ptrofs.unsigned i0) || valid_ptr b0 (Ptrofs.unsigned i0 - 1))).

  rewrite Ptrofs.negate_cmpu. auto.

  auto.

  destruct (valid_ptr b (Ptrofs.unsigned i) && valid_ptr b0 (Ptrofs.unsigned i0)); auto.

- rewrite Int64.negate_cmpu. auto.

Qed.



Lemma not_of_optbool:

  forall ob, of_optbool (option_map negb ob) = notbool (of_optbool ob).

Proof.

  destruct ob; auto. destruct b; auto.

Qed.



Theorem negate_cmp:

  forall c x y,

  cmp (negate_comparison c) x y = notbool (cmp c x y).

Proof.

  intros. unfold cmp. rewrite negate_cmp_bool. apply not_of_optbool.

Qed.



Theorem negate_cmpu:

  forall valid_ptr c x y,

  cmpu valid_ptr (negate_comparison c) x y =

    notbool (cmpu valid_ptr c x y).

Proof.

  intros. unfold cmpu. rewrite negate_cmpu_bool. apply not_of_optbool.

Qed.



Theorem swap_cmp_bool:

  forall c x y,

  cmp_bool (swap_comparison c) x y = cmp_bool c y x.

Proof.

  destruct x; destruct y; simpl; auto. rewrite Int.swap_cmp. auto.

Qed.



Theorem swap_cmpu_bool:

  forall valid_ptr c x y,

  cmpu_bool valid_ptr (swap_comparison c) x y =

    cmpu_bool valid_ptr c y x.

Proof.

  assert (E: forall c, cmp_different_blocks (swap_comparison c) = cmp_different_blocks c).

  { destruct c; auto. }

  intros; unfold cmpu_bool. rewrite ! E. destruct Archi.ptr64 eqn:SF, x, y; auto.

- rewrite Int.swap_cmpu. auto.

- rewrite Int.swap_cmpu. auto.

- destruct (eq_block b b0); subst.

  rewrite dec_eq_true.

  destruct (valid_ptr b0 (Ptrofs.unsigned i) || valid_ptr b0 (Ptrofs.unsigned i - 1));

  destruct (valid_ptr b0 (Ptrofs.unsigned i0) || valid_ptr b0 (Ptrofs.unsigned i0 - 1));

  simpl; auto.

  rewrite Ptrofs.swap_cmpu. auto.

  rewrite dec_eq_false by auto.

  destruct (valid_ptr b (Ptrofs.unsigned i));

    destruct (valid_ptr b0 (Ptrofs.unsigned i0)); simpl; auto.

Qed.



Theorem swap_cmpl_bool:

  forall c x y,

  cmpl_bool (swap_comparison c) x y = cmpl_bool c y x.

Proof.

  destruct x; destruct y; simpl; auto. rewrite Int64.swap_cmp. auto.

Qed.



Theorem swap_cmplu_bool:

  forall valid_ptr c x y,

  cmplu_bool valid_ptr (swap_comparison c) x y = cmplu_bool valid_ptr c y x.

Proof.

  assert (E: forall c, cmp_different_blocks (swap_comparison c) = cmp_different_blocks c).

  { destruct c; auto. }

  intros; unfold cmplu_bool. rewrite ! E. destruct Archi.ptr64 eqn:SF, x, y; auto.

- rewrite Int64.swap_cmpu. auto.

- destruct (eq_block b b0); subst.

  rewrite dec_eq_true.

  destruct (valid_ptr b0 (Ptrofs.unsigned i) || valid_ptr b0 (Ptrofs.unsigned i - 1));

  destruct (valid_ptr b0 (Ptrofs.unsigned i0) || valid_ptr b0 (Ptrofs.unsigned i0 - 1));

  simpl; auto.

  rewrite Ptrofs.swap_cmpu. auto.

  rewrite dec_eq_false by auto.

  destruct (valid_ptr b (Ptrofs.unsigned i));

    destruct (valid_ptr b0 (Ptrofs.unsigned i0)); simpl; auto.

- rewrite Int64.swap_cmpu. auto.

Qed.



Theorem negate_cmpf_eq:

  forall v1 v2, notbool (cmpf Cne v1 v2) = cmpf Ceq v1 v2.

Proof.

  destruct v1; destruct v2; auto. unfold cmpf, cmpf_bool.

  rewrite Float.cmp_ne_eq. destruct (Float.cmp Ceq f f0); auto.

Qed.



Theorem negate_cmpf_ne:

  forall v1 v2, notbool (cmpf Ceq v1 v2) = cmpf Cne v1 v2.

Proof.

  destruct v1; destruct v2; auto. unfold cmpf, cmpf_bool.

  rewrite Float.cmp_ne_eq. destruct (Float.cmp Ceq f f0); auto.

Qed.



Theorem cmpf_le:

  forall v1 v2, cmpf Cle v1 v2 = or (cmpf Clt v1 v2) (cmpf Ceq v1 v2).

Proof.

  destruct v1; destruct v2; auto. unfold cmpf, cmpf_bool.

  rewrite Float.cmp_le_lt_eq.

  destruct (Float.cmp Clt f f0); destruct (Float.cmp Ceq f f0); auto.

Qed.



Theorem cmpf_ge:

  forall v1 v2, cmpf Cge v1 v2 = or (cmpf Cgt v1 v2) (cmpf Ceq v1 v2).

Proof.

  destruct v1; destruct v2; auto. unfold cmpf, cmpf_bool.

  rewrite Float.cmp_ge_gt_eq.

  destruct (Float.cmp Cgt f f0); destruct (Float.cmp Ceq f f0); auto.

Qed.



Theorem cmp_ne_0_optbool:

  forall ob, cmp Cne (of_optbool ob) (Vint Int.zero) = of_optbool ob.

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmp_eq_1_optbool:

  forall ob, cmp Ceq (of_optbool ob) (Vint Int.one) = of_optbool ob.

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmp_eq_0_optbool:

  forall ob, cmp Ceq (of_optbool ob) (Vint Int.zero) = of_optbool (option_map negb ob).

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmp_ne_1_optbool:

  forall ob, cmp Cne (of_optbool ob) (Vint Int.one) = of_optbool (option_map negb ob).

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmpu_ne_0_optbool:

  forall valid_ptr ob,

  cmpu valid_ptr Cne (of_optbool ob) (Vint Int.zero) = of_optbool ob.

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmpu_eq_1_optbool:

  forall valid_ptr ob,

  cmpu valid_ptr Ceq (of_optbool ob) (Vint Int.one) = of_optbool ob.

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmpu_eq_0_optbool:

  forall valid_ptr ob,

  cmpu valid_ptr Ceq (of_optbool ob) (Vint Int.zero) = of_optbool (option_map negb ob).

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Theorem cmpu_ne_1_optbool:

  forall valid_ptr ob,

  cmpu valid_ptr Cne (of_optbool ob) (Vint Int.one) = of_optbool (option_map negb ob).

Proof.

  intros. destruct ob; simpl; auto. destruct b; auto.

Qed.



Lemma zero_ext_and:

  forall n v,

  0 < n < Int.zwordsize ->

  Val.zero_ext n v = Val.and v (Vint (Int.repr (two_p n - 1))).

Proof.

  intros. destruct v; simpl; auto. decEq. apply Int.zero_ext_and; auto. omega.

Qed.



Lemma rolm_lt_zero:

  forall v, rolm v Int.one Int.one = cmp Clt v (Vint Int.zero).

Proof.

  intros. unfold cmp, cmp_bool; destruct v; simpl; auto.

  transitivity (Vint (Int.shru i (Int.repr (Int.zwordsize - 1)))).

  decEq. symmetry. rewrite Int.shru_rolm. auto. auto.

  rewrite Int.shru_lt_zero. destruct (Int.lt i Int.zero); auto.

Qed.



Lemma rolm_ge_zero:

  forall v,

  xor (rolm v Int.one Int.one) (Vint Int.one) = cmp Cge v (Vint Int.zero).

Proof.

  intros. rewrite rolm_lt_zero. destruct v; simpl; auto.

  unfold cmp; simpl. destruct (Int.lt i Int.zero); auto.

Qed.



Inductive lessdef: val -> val -> Prop :=

  | lessdef_refl: forall v, lessdef v v

  | lessdef_undef: forall v, lessdef Vundef v.



Lemma lessdef_same:

  forall v1 v2, v1 = v2 -> lessdef v1 v2.

Proof.

  intros. subst v2. constructor.

Qed.



Lemma lessdef_trans:

  forall v1 v2 v3, lessdef v1 v2 -> lessdef v2 v3 -> lessdef v1 v3.

Proof.

  intros. inv H. auto. constructor.

Qed.



Inductive lessdef_list: list val -> list val -> Prop :=

  | lessdef_list_nil:

      lessdef_list nil nil

  | lessdef_list_cons:

      forall v1 v2 vl1 vl2,

      lessdef v1 v2 -> lessdef_list vl1 vl2 ->

      lessdef_list (v1 :: vl1) (v2 :: vl2).



Hint Resolve lessdef_refl lessdef_undef lessdef_list_nil lessdef_list_cons.



Lemma lessdef_list_inv:

  forall vl1 vl2, lessdef_list vl1 vl2 -> vl1 = vl2 \/ In Vundef vl1.

Proof.

  induction 1; simpl.

  tauto.

  inv H. destruct IHlessdef_list.

  left; congruence. tauto. tauto.

Qed.



Lemma lessdef_list_trans:

  forall vl1 vl2, lessdef_list vl1 vl2 -> forall vl3, lessdef_list vl2 vl3 -> lessdef_list vl1 vl3.

Proof.

  induction 1; intros vl3 LD; inv LD; constructor; eauto using lessdef_trans.

Qed.



Lemma load_result_lessdef:

  forall chunk v1 v2,

  lessdef v1 v2 -> lessdef (load_result chunk v1) (load_result chunk v2).

Proof.

  intros. inv H. auto. destruct chunk; simpl; auto.

Qed.



Lemma zero_ext_lessdef:

  forall n v1 v2, lessdef v1 v2 -> lessdef (zero_ext n v1) (zero_ext n v2).

Proof.

  intros; inv H; simpl; auto.

Qed.



Lemma sign_ext_lessdef:

  forall n v1 v2, lessdef v1 v2 -> lessdef (sign_ext n v1) (sign_ext n v2).

Proof.

  intros; inv H; simpl; auto.

Qed.



Lemma singleoffloat_lessdef:

  forall v1 v2, lessdef v1 v2 -> lessdef (singleoffloat v1) (singleoffloat v2).

Proof.

  intros; inv H; simpl; auto.

Qed.



Lemma add_lessdef:

  forall v1 v1' v2 v2',

  lessdef v1 v1' -> lessdef v2 v2' -> lessdef (add v1 v2) (add v1' v2').

Proof.

  intros. inv H. inv H0. auto. destruct v1'; simpl; auto. simpl; auto.

Qed.



Lemma addl_lessdef:

  forall v1 v1' v2 v2',

  lessdef v1 v1' -> lessdef v2 v2' -> lessdef (addl v1 v2) (addl v1' v2').

Proof.

  intros. inv H. inv H0. auto. destruct v1'; simpl; auto. simpl; auto.

Qed.



Lemma cmpu_bool_lessdef:

  forall valid_ptr valid_ptr' c v1 v1' v2 v2' b,

  (forall b ofs, valid_ptr b ofs = true -> valid_ptr' b ofs = true) ->

  lessdef v1 v1' -> lessdef v2 v2' ->

  cmpu_bool valid_ptr c v1 v2 = Some b ->

  cmpu_bool valid_ptr' c v1' v2' = Some b.

Proof.

  intros.

  assert (X: forall b ofs,

             valid_ptr b ofs || valid_ptr b (ofs - 1) = true ->

             valid_ptr' b ofs || valid_ptr' b (ofs - 1) = true).

  { intros. apply orb_true_intro. destruct (orb_prop _ _ H3).

    rewrite (H b0 ofs); auto.

    rewrite (H b0 (ofs - 1)); auto. }

  inv H0; [ | discriminate].

  inv H1; [ | destruct v1'; discriminate ].

  unfold cmpu_bool in *. remember Archi.ptr64 as ptr64.

  destruct v1'; auto; destruct v2'; auto; destruct ptr64; auto.

- destruct (Int.eq i Int.zero); auto.

  destruct (valid_ptr b0 (Ptrofs.unsigned i0) || valid_ptr b0 (Ptrofs.unsigned i0 - 1)) eqn:A; inv H2.

  rewrite X; auto.

- destruct (Int.eq i0 Int.zero); auto.

  destruct (valid_ptr b0 (Ptrofs.unsigned i) || valid_ptr b0 (Ptrofs.unsigned i - 1)) eqn:A; inv H2.

  rewrite X; auto.

- destruct (eq_block b0 b1).

+ destruct (valid_ptr b0 (Ptrofs.unsigned i) || valid_ptr b0 (Ptrofs.unsigned i - 1)) eqn:A; inv H2.

  destruct (valid_ptr b1 (Ptrofs.unsigned i0) || valid_ptr b1 (Ptrofs.unsigned i0 - 1)) eqn:B; inv H1.

  rewrite ! X; auto.

+ destruct (valid_ptr b0 (Ptrofs.unsigned i) && valid_ptr b1 (Ptrofs.unsigned i0)) eqn:A; inv H2.

  InvBooleans. rewrite ! H; auto.

Qed.



Lemma cmplu_bool_lessdef:

  forall valid_ptr valid_ptr' c v1 v1' v2 v2' b,

  (forall b ofs, valid_ptr b ofs = true -> valid_ptr' b ofs = true) ->

  lessdef v1 v1' -> lessdef v2 v2' ->

  cmplu_bool valid_ptr c v1 v2 = Some b ->

  cmplu_bool valid_ptr' c v1' v2' = Some b.

Proof.

  intros.

  assert (X: forall b ofs,

             valid_ptr b ofs || valid_ptr b (ofs - 1) = true ->

             valid_ptr' b ofs || valid_ptr' b (ofs - 1) = true).

  { intros. apply orb_true_intro. destruct (orb_prop _ _ H3).

    rewrite (H b0 ofs); auto.

    rewrite (H b0 (ofs - 1)); auto. }

  inv H0; [ | discriminate].

  inv H1; [ | destruct v1'; discriminate ].

  unfold cmplu_bool in *. remember Archi.ptr64 as ptr64.

  destruct v1'; auto; destruct v2'; auto; destruct ptr64; auto.

- destruct (Int64.eq i Int64.zero); auto.

  destruct (valid_ptr b0 (Ptrofs.unsigned i0) || valid_ptr b0 (Ptrofs.unsigned i0 - 1)) eqn:A; inv H2.

  rewrite X; auto.

- destruct (Int64.eq i0 Int64.zero); auto.

  destruct (valid_ptr b0 (Ptrofs.unsigned i) || valid_ptr b0 (Ptrofs.unsigned i - 1)) eqn:A; inv H2.

  rewrite X; auto.

- destruct (eq_block b0 b1).

+ destruct (valid_ptr b0 (Ptrofs.unsigned i) || valid_ptr b0 (Ptrofs.unsigned i - 1)) eqn:A; inv H2.

  destruct (valid_ptr b1 (Ptrofs.unsigned i0) || valid_ptr b1 (Ptrofs.unsigned i0 - 1)) eqn:B; inv H1.

  rewrite ! X; auto.

+ destruct (valid_ptr b0 (Ptrofs.unsigned i) && valid_ptr b1 (Ptrofs.unsigned i0)) eqn:A; inv H2.

  InvBooleans. rewrite ! H; auto.

Qed.



Lemma of_optbool_lessdef:

  forall ob ob',

  (forall b, ob = Some b -> ob' = Some b) ->

  lessdef (of_optbool ob) (of_optbool ob').

Proof.

  intros. destruct ob; simpl; auto. rewrite (H b); auto.

Qed.



Lemma longofwords_lessdef:

  forall v1 v2 v1' v2',

  lessdef v1 v1' -> lessdef v2 v2' -> lessdef (longofwords v1 v2) (longofwords v1' v2').

Proof.

  intros. unfold longofwords. inv H; auto. inv H0; auto. destruct v1'; auto.

Qed.



Lemma loword_lessdef:

  forall v v', lessdef v v' -> lessdef (loword v) (loword v').

Proof.

  intros. inv H; auto.

Qed.



Lemma hiword_lessdef:

  forall v v', lessdef v v' -> lessdef (hiword v) (hiword v').

Proof.

  intros. inv H; auto.

Qed.



Lemma offset_ptr_zero:

  forall v, lessdef (offset_ptr v Ptrofs.zero) v.

Proof.

  intros. destruct v; simpl; auto. rewrite Ptrofs.add_zero; auto.

Qed.



Lemma offset_ptr_assoc:

  forall v d1 d2, offset_ptr (offset_ptr v d1) d2 = offset_ptr v (Ptrofs.add d1 d2).

Proof.

  intros. destruct v; simpl; auto. f_equal. apply Ptrofs.add_assoc.

Qed.



Definition meminj : Type := block -> option (block * Z).



Inductive inject (mi: meminj): val -> val -> Prop :=

  | inject_int:

      forall i, inject mi (Vint i) (Vint i)

  | inject_long:

      forall i, inject mi (Vlong i) (Vlong i)

  | inject_float:

      forall f, inject mi (Vfloat f) (Vfloat f)

  | inject_single:

      forall f, inject mi (Vsingle f) (Vsingle f)

  | inject_ptr:

      forall b1 ofs1 b2 ofs2 delta,

      mi b1 = Some (b2, delta) ->

      ofs2 = Ptrofs.add ofs1 (Ptrofs.repr delta) ->

      inject mi (Vptr b1 ofs1) (Vptr b2 ofs2)

  | val_inject_undef: forall v,

      inject mi Vundef v.



Hint Constructors inject.



Inductive inject_list (mi: meminj): list val -> list val-> Prop:=

  | inject_list_nil :

      inject_list mi nil nil

  | inject_list_cons : forall v v' vl vl' ,

      inject mi v v' -> inject_list mi vl vl'->

      inject_list mi (v :: vl) (v' :: vl').



Hint Resolve inject_list_nil inject_list_cons.



Lemma inject_ptrofs:

  forall mi i, inject mi (Vptrofs i) (Vptrofs i).

Proof.

  unfold Vptrofs; intros. destruct Archi.ptr64; auto.

Qed.



Hint Resolve inject_ptrofs.



Section VAL_INJ_OPS.



Variable f: meminj.



Lemma load_result_inject:

  forall chunk v1 v2,

  inject f v1 v2 ->

  inject f (Val.load_result chunk v1) (Val.load_result chunk v2).

Proof.

  intros. inv H; destruct chunk; simpl; try constructor; destruct Archi.ptr64; econstructor; eauto.

Qed.



Remark add_inject:

  forall v1 v1' v2 v2',

  inject f v1 v1' ->

  inject f v2 v2' ->

  inject f (Val.add v1 v2) (Val.add v1' v2').

Proof.

  intros. unfold Val.add. destruct Archi.ptr64 eqn:SF.

- inv H; inv H0; constructor.

- inv H; inv H0; simpl; auto.

+ econstructor; eauto.

  rewrite ! Ptrofs.add_assoc. decEq. apply Ptrofs.add_commut.

+ econstructor; eauto.

  rewrite ! Ptrofs.add_assoc. decEq. apply Ptrofs.add_commut.

Qed.



Remark sub_inject:

  forall v1 v1' v2 v2',

  inject f v1 v1' ->

  inject f v2 v2' ->

  inject f (Val.sub v1 v2) (Val.sub v1' v2').

Proof.

  intros. unfold Val.sub. destruct Archi.ptr64 eqn:SF.

- inv H; inv H0; constructor.

- inv H; inv H0; simpl; auto.

+ econstructor; eauto.

  rewrite Ptrofs.sub_add_l. auto.

+ destruct (eq_block b1 b0); auto.

  subst. rewrite H1 in H. inv H. rewrite dec_eq_true.

  rewrite Ptrofs.sub_shifted. auto.

Qed.



Remark addl_inject:

  forall v1 v1' v2 v2',

  inject f v1 v1' ->

  inject f v2 v2' ->

  inject f (Val.addl v1 v2) (Val.addl v1' v2').

Proof.

  intros. unfold Val.addl. destruct Archi.ptr64 eqn:SF.

- inv H; inv H0; simpl; auto.

+ econstructor; eauto.

  rewrite ! Ptrofs.add_assoc. decEq. apply Ptrofs.add_commut.

+ econstructor; eauto.

  rewrite ! Ptrofs.add_assoc. decEq. apply Ptrofs.add_commut.

- inv H; inv H0; constructor.

Qed.



Remark subl_inject:

  forall v1 v1' v2 v2',

  inject f v1 v1' ->

  inject f v2 v2' ->

  inject f (Val.subl v1 v2) (Val.subl v1' v2').

Proof.

  intros. unfold Val.subl. destruct Archi.ptr64 eqn:SF.

- inv H; inv H0; simpl; auto.

+ econstructor; eauto.

  rewrite Ptrofs.sub_add_l. auto.

+ destruct (eq_block b1 b0); auto.

  subst. rewrite H1 in H. inv H. rewrite dec_eq_true.

  rewrite Ptrofs.sub_shifted. auto.

- inv H; inv H0; constructor.

Qed.



Lemma offset_ptr_inject:

  forall v v' ofs, inject f v v' -> inject f (offset_ptr v ofs) (offset_ptr v' ofs).

Proof.

  intros. inv H; simpl; econstructor; eauto.

  rewrite ! Ptrofs.add_assoc. f_equal. apply Ptrofs.add_commut.

Qed.



Lemma cmp_bool_inject:

  forall c v1 v2 v1' v2' b,

  inject f v1 v1' ->

  inject f v2 v2' ->

  Val.cmp_bool c v1 v2 = Some b ->

  Val.cmp_bool c v1' v2' = Some b.

Proof.

  intros. inv H; simpl in H1; try discriminate; inv H0; simpl in H1; try discriminate; simpl; auto.

Qed.



Variable (valid_ptr1 valid_ptr2 : block -> Z -> bool).



Let weak_valid_ptr1 b ofs := valid_ptr1 b ofs || valid_ptr1 b (ofs - 1).

Let weak_valid_ptr2 b ofs := valid_ptr2 b ofs || valid_ptr2 b (ofs - 1).



Hypothesis valid_ptr_inj:

  forall b1 ofs b2 delta,

  f b1 = Some(b2, delta) ->

  valid_ptr1 b1 (Ptrofs.unsigned ofs) = true ->

  valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs (Ptrofs.repr delta))) = true.



Hypothesis weak_valid_ptr_inj:

  forall b1 ofs b2 delta,

  f b1 = Some(b2, delta) ->

  weak_valid_ptr1 b1 (Ptrofs.unsigned ofs) = true ->

  weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs (Ptrofs.repr delta))) = true.



Hypothesis weak_valid_ptr_no_overflow:

  forall b1 ofs b2 delta,

  f b1 = Some(b2, delta) ->

  weak_valid_ptr1 b1 (Ptrofs.unsigned ofs) = true ->

  0 <= Ptrofs.unsigned ofs + Ptrofs.unsigned (Ptrofs.repr delta) <= Ptrofs.max_unsigned.



Hypothesis valid_different_ptrs_inj:

  forall b1 ofs1 b2 ofs2 b1' delta1 b2' delta2,

  b1 <> b2 ->

  valid_ptr1 b1 (Ptrofs.unsigned ofs1) = true ->

  valid_ptr1 b2 (Ptrofs.unsigned ofs2) = true ->

  f b1 = Some (b1', delta1) ->

  f b2 = Some (b2', delta2) ->

  b1' <> b2' \/

  Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta1)) <> Ptrofs.unsigned (Ptrofs.add ofs2 (Ptrofs.repr delta2)).



Lemma cmpu_bool_inject:

  forall c v1 v2 v1' v2' b,

  inject f v1 v1' ->

  inject f v2 v2' ->

  Val.cmpu_bool valid_ptr1 c v1 v2 = Some b ->

  Val.cmpu_bool valid_ptr2 c v1' v2' = Some b.

Proof.

  Local Opaque Int.add Ptrofs.add.

  intros.

  unfold cmpu_bool in *; destruct Archi.ptr64;

  inv H; simpl in H1; try discriminate; inv H0; simpl in H1; try discriminate; simpl; auto.

- fold (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) in H1.

  fold (weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta)))).

  destruct (Int.eq i Int.zero); auto.

  destruct (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) eqn:E; try discriminate.

  erewrite weak_valid_ptr_inj by eauto. auto.

- fold (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) in H1.

  fold (weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta)))).

  destruct (Int.eq i Int.zero); auto.

  destruct (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) eqn:E; try discriminate.

  erewrite weak_valid_ptr_inj by eauto. auto.

- fold (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) in H1.

  fold (weak_valid_ptr1 b0 (Ptrofs.unsigned ofs0)) in H1.

  fold (weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta)))).

  fold (weak_valid_ptr2 b3 (Ptrofs.unsigned (Ptrofs.add ofs0 (Ptrofs.repr delta0)))).

  destruct (eq_block b1 b0); subst.

  rewrite H in H2. inv H2. rewrite dec_eq_true.

  destruct (weak_valid_ptr1 b0 (Ptrofs.unsigned ofs1)) eqn:?; try discriminate.

  destruct (weak_valid_ptr1 b0 (Ptrofs.unsigned ofs0)) eqn:?; try discriminate.

  erewrite !weak_valid_ptr_inj by eauto. simpl.

  rewrite <-H1. simpl. decEq. apply Ptrofs.translate_cmpu; eauto.

  destruct (valid_ptr1 b1 (Ptrofs.unsigned ofs1)) eqn:?; try discriminate.

  destruct (valid_ptr1 b0 (Ptrofs.unsigned ofs0)) eqn:?; try discriminate.

  destruct (eq_block b2 b3); subst.

  assert (valid_ptr_implies: forall b ofs, valid_ptr1 b ofs = true -> weak_valid_ptr1 b ofs = true).

    intros. unfold weak_valid_ptr1. rewrite H0; auto.

  erewrite !weak_valid_ptr_inj by eauto using valid_ptr_implies. simpl.

  exploit valid_different_ptrs_inj; eauto. intros [?|?]; [congruence |].

  destruct c; simpl in H1; inv H1.

  simpl; decEq. rewrite Ptrofs.eq_false; auto. congruence.

  simpl; decEq. rewrite Ptrofs.eq_false; auto. congruence.

  now erewrite !valid_ptr_inj by eauto.

Qed.



Lemma cmplu_bool_inject:

  forall c v1 v2 v1' v2' b,

  inject f v1 v1' ->

  inject f v2 v2' ->

  Val.cmplu_bool valid_ptr1 c v1 v2 = Some b ->

  Val.cmplu_bool valid_ptr2 c v1' v2' = Some b.

Proof.

  Local Opaque Int64.add Ptrofs.add.

  intros.

  unfold cmplu_bool in *; destruct Archi.ptr64;

  inv H; simpl in H1; try discriminate; inv H0; simpl in H1; try discriminate; simpl; auto.

- fold (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) in H1.

  fold (weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta)))).

  destruct (Int64.eq i Int64.zero); auto.

  destruct (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) eqn:E; try discriminate.

  erewrite weak_valid_ptr_inj by eauto. auto.

- fold (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) in H1.

  fold (weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta)))).

  destruct (Int64.eq i Int64.zero); auto.

  destruct (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) eqn:E; try discriminate.

  erewrite weak_valid_ptr_inj by eauto. auto.

- fold (weak_valid_ptr1 b1 (Ptrofs.unsigned ofs1)) in H1.

  fold (weak_valid_ptr1 b0 (Ptrofs.unsigned ofs0)) in H1.

  fold (weak_valid_ptr2 b2 (Ptrofs.unsigned (Ptrofs.add ofs1 (Ptrofs.repr delta)))).

  fold (weak_valid_ptr2 b3 (Ptrofs.unsigned (Ptrofs.add ofs0 (Ptrofs.repr delta0)))).

  destruct (eq_block b1 b0); subst.

  rewrite H in H2. inv H2. rewrite dec_eq_true.

  destruct (weak_valid_ptr1 b0 (Ptrofs.unsigned ofs1)) eqn:?; try discriminate.

  destruct (weak_valid_ptr1 b0 (Ptrofs.unsigned ofs0)) eqn:?; try discriminate.

  erewrite !weak_valid_ptr_inj by eauto. simpl.

  rewrite <-H1. simpl. decEq. apply Ptrofs.translate_cmpu; eauto.

  destruct (valid_ptr1 b1 (Ptrofs.unsigned ofs1)) eqn:?; try discriminate.

  destruct (valid_ptr1 b0 (Ptrofs.unsigned ofs0)) eqn:?; try discriminate.

  destruct (eq_block b2 b3); subst.

  assert (valid_ptr_implies: forall b ofs, valid_ptr1 b ofs = true -> weak_valid_ptr1 b ofs = true).

    intros. unfold weak_valid_ptr1. rewrite H0; auto.

  erewrite !weak_valid_ptr_inj by eauto using valid_ptr_implies. simpl.

  exploit valid_different_ptrs_inj; eauto. intros [?|?]; [congruence |].

  destruct c; simpl in H1; inv H1.

  simpl; decEq. rewrite Ptrofs.eq_false; auto. congruence.

  simpl; decEq. rewrite Ptrofs.eq_false; auto. congruence.

  now erewrite !valid_ptr_inj by eauto.

Qed.



Lemma longofwords_inject:

  forall v1 v2 v1' v2',

  inject f v1 v1' -> inject f v2 v2' -> inject f (Val.longofwords v1 v2) (Val.longofwords v1' v2').

Proof.

  intros. unfold Val.longofwords. inv H; auto. inv H0; auto.

Qed.



Lemma loword_inject:

  forall v v', inject f v v' -> inject f (Val.loword v) (Val.loword v').

Proof.

  intros. unfold Val.loword; inv H; auto.

Qed.



Lemma hiword_inject:

  forall v v', inject f v v' -> inject f (Val.hiword v) (Val.hiword v').

Proof.

  intros. unfold Val.hiword; inv H; auto.

Qed.



End VAL_INJ_OPS.



End Val.



Notation meminj := Val.meminj.



Definition inject_incr (f1 f2: meminj) : Prop :=

  forall b b' delta, f1 b = Some(b', delta) -> f2 b = Some(b', delta).



Lemma inject_incr_refl :

   forall f , inject_incr f f .

Proof. unfold inject_incr. auto. Qed.



Lemma inject_incr_trans :

  forall f1 f2 f3,

  inject_incr f1 f2 -> inject_incr f2 f3 -> inject_incr f1 f3 .

Proof.

  unfold inject_incr; intros. eauto.

Qed.



Lemma val_inject_incr:

  forall f1 f2 v v',

  inject_incr f1 f2 ->

  Val.inject f1 v v' ->

  Val.inject f2 v v'.

Proof.

  intros. inv H0; eauto.

Qed.



Lemma val_inject_list_incr:

  forall f1 f2 vl vl' ,

  inject_incr f1 f2 -> Val.inject_list f1 vl vl' ->

  Val.inject_list f2 vl vl'.

Proof.

  induction vl; intros; inv H0. auto.

  constructor. eapply val_inject_incr; eauto. auto.

Qed.



Hint Resolve inject_incr_refl val_inject_incr val_inject_list_incr.



Lemma val_inject_lessdef:

  forall v1 v2, Val.lessdef v1 v2 <-> Val.inject (fun b => Some(b, 0)) v1 v2.

Proof.

  intros; split; intros.

  inv H; auto. destruct v2; econstructor; eauto. rewrite Ptrofs.add_zero; auto.

  inv H; auto. inv H0. rewrite Ptrofs.add_zero; auto.

Qed.



Lemma val_inject_list_lessdef:

  forall vl1 vl2, Val.lessdef_list vl1 vl2 <-> Val.inject_list (fun b => Some(b, 0)) vl1 vl2.

Proof.

  intros; split.

  induction 1; constructor; auto. apply val_inject_lessdef; auto.

  induction 1; constructor; auto. apply val_inject_lessdef; auto.

Qed.



Definition inject_id : meminj := fun b => Some(b, 0).



Lemma val_inject_id:

  forall v1 v2,

  Val.inject inject_id v1 v2 <-> Val.lessdef v1 v2.

Proof.

  intros; split; intros.

  inv H; auto.

  unfold inject_id in H0. inv H0. rewrite Ptrofs.add_zero. constructor.

  inv H. destruct v2; econstructor. unfold inject_id; reflexivity. rewrite Ptrofs.add_zero; auto.

  constructor.

Qed.



Definition compose_meminj (f f': meminj) : meminj :=

  fun b =>

    match f b with

    | None => None

    | Some(b', delta) =>

        match f' b' with

        | None => None

        | Some(b'', delta') => Some(b'', delta + delta')

        end

    end.



Lemma val_inject_compose:

  forall f f' v1 v2 v3,

  Val.inject f v1 v2 -> Val.inject f' v2 v3 ->

  Val.inject (compose_meminj f f') v1 v3.

Proof.

  intros. inv H; auto; inv H0; auto. econstructor.

  unfold compose_meminj; rewrite H1; rewrite H3; eauto.

  rewrite Ptrofs.add_assoc. decEq. unfold Ptrofs.add. apply Ptrofs.eqm_samerepr. auto with ints.

Qed.

