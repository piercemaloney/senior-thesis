Require Export TopologicalSpaces.

Require Import WeakTopology.
(* WeakTopology:
Require Export TopologicalSpaces.
Require Export Subbases.
From ZornsLemma Require Export InverseImage.
Require Export Continuity.
Require Export Nets.

Section WeakTopology.

Variable X:Type.
Variable A:Type.
Variable Y:A->TopologicalSpace.
Variable f:forall a:A, X->point_set (Y a).

Inductive weak_topology_subbasis : Family X :=
  | intro_fa_inv_image: forall (a:A) (V:Ensemble (point_set (Y a))),
    open V -> In weak_topology_subbasis (inverse_image (f a) V).

Definition WeakTopology : TopologicalSpace :=
  Build_TopologicalSpace_from_subbasis X weak_topology_subbasis.

Lemma weak_topology_makes_continuous_funcs:
  forall a:A, continuous (f a) (X:=WeakTopology).

Lemma weak_topology_is_weakest: forall (T':Family X)
  (H1:_) (H2:_) (H3:_),
  (forall a:A, continuous (f a)
     (X := Build_TopologicalSpace X T' H1 H2 H3)) ->
  forall U:Ensemble X, @open WeakTopology U -> T' U.

Section WeakTopology_and_Nets.

Variable I:DirectedSet.
Hypothesis I_nonempty: inhabited (DS_set I).
Variable x:Net I WeakTopology.
Variable x0:X.

Lemma net_limit_in_weak_topology_impl_net_limit_in_projections :
  net_limit x x0 ->
  forall a:A, net_limit (fun i:DS_set I => (f a) (x i)) ((f a) x0).

From ZornsLemma Require Import FiniteIntersections.

Lemma net_limit_in_projections_impl_net_limit_in_weak_topology :
  (forall a:A, net_limit (fun i:DS_set I => (f a) (x i))
                         ((f a) x0)) ->
  net_limit x x0.

End WeakTopology_and_Nets.

End WeakTopology.

Arguments WeakTopology {X} {A} {Y}.
Arguments weak_topology_subbasis {X} {A} {Y}.

Section WeakTopology1.

Variable X:Type.
Variable Y:TopologicalSpace.
Variable f:X->point_set Y.

Definition WeakTopology1 := WeakTopology (True_rect f).

Lemma weak_topology1_topology:
  forall U:Ensemble X, @open WeakTopology1 U ->
  exists V:Ensemble (point_set Y), open V /\ U = inverse_image f V.

Lemma weak_topology1_makes_continuous_func:
  continuous f (X:=WeakTopology1).

End WeakTopology1.

Arguments WeakTopology1 {X} {Y}. *)



Section Subspace.



Variable X:TopologicalSpace.

Variable A:Ensemble (point_set X).



Definition SubspaceTopology : TopologicalSpace :=

  WeakTopology1 (proj1_sig (P:=fun x:point_set X => In A x)).



Definition subspace_inc : point_set SubspaceTopology ->

  point_set X :=

  proj1_sig (P:=fun x:point_set X => In A x).



Lemma subspace_topology_topology: forall U:Ensemble {x:point_set X | In A x},

  @open SubspaceTopology U -> exists V:Ensemble (point_set X),

  open V /\ U = inverse_image subspace_inc V.

Proof.

apply weak_topology1_topology.

Qed.



Lemma subspace_inc_continuous:

  continuous subspace_inc.

Proof.

apply weak_topology1_makes_continuous_func.

Qed.



End Subspace.



Arguments SubspaceTopology {X}.

Arguments subspace_inc {X}.

