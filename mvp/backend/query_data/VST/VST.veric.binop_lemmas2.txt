Require Import VST.msl.msl_standard.
(* VST.msl.msl_standard:
Require Export VST.msl.Extensionality.
Require Export VST.msl.ageable.
Require Export VST.msl.age_sepalg.
Require Export VST.msl.base.
Require Export VST.msl.boolean_alg.
Require Export VST.msl.knot_full_variant.
Require Export VST.msl.knot_shims.
Require Export VST.msl.knot_full_sa.
Require Export VST.msl.knot_shims.
Require Export VST.msl.predicates_hered.
Require Export VST.msl.predicates_sl.
Require Export VST.msl.corable.
Require Export VST.msl.subtypes.
Require Export VST.msl.subtypes_sl.
Require Export VST.msl.predicates_rec.
Require Export VST.msl.contractive.
Require Export VST.msl.sepalg.
Require Export VST.msl.functors.
Require Export VST.msl.sepalg_functors.
Require Export VST.msl.sepalg_generators.
Require Export VST.msl.combiner_sa.
Require Export VST.msl.shares.
Require Export VST.msl.cross_split.
Require Export VST.msl.psepalg.
Require Export VST.msl.pshares.
Require Export VST.msl.eq_dec.

Export MixVariantFunctor.
Export MixVariantFunctorLemmas.
Export MixVariantFunctorGenerator. *)

Require Import VST.veric.Clight_base.
(* VST.veric.Clight_base:
Require Export compcert.exportclight.Clightdefs.

Require Export VST.veric.base.
Require Export compcert.cfrontend.Ctypes.
Require Export compcert.cfrontend.Cop. 
Require Export compcert.cfrontend.Clight. 

Require Export EqNat.  

Require Export VST.veric.Memory. *)

Require Import VST.veric.compcert_rmaps.
(* VST.veric.compcert_rmaps:
Require Export VST.msl.msl_standard.
Require Import VST.veric.base.
Require Import compcert.cfrontend.Ctypes.
Require Import VST.veric.shares.
Require Import VST.veric.rmaps.
Require Import VST.veric.rmaps_lemmas.
Require Export VST.veric.Memory. 

Instance EqDec_type: EqDec type := type_eq.

Definition funsig := (list (ident*type) * type)%type. 

Inductive kind : Type := VAL : memval -> kind
                                   | LK : forall n i : Z, kind
                                   | FUN: funsig -> calling_convention -> kind.

Definition isVAL (k: kind) := match k with | VAL _ => True | _ => False end.
Definition isFUN (k: kind) := match k with | FUN _ _ => True | _ => False end.

Lemma isVAL_i: forall v, isVAL (VAL v).
Hint Resolve isVAL_i.

Lemma isVAL_dec: forall k, {isVAL k}+{~isVAL k}.

Module CompCert_AV <: ADR_VAL.

Definition address := address.
Definition some_address : address := (xH,0).
Definition kind := kind.

End CompCert_AV.

Lemma getVAL: forall k, {v : memval & k = VAL v}  + {~isVAL k}.

Lemma VAL_inj: forall v v', VAL v = VAL v' -> v = v'.

Module R := Rmaps (CompCert_AV).
Module RML := Rmaps_Lemmas(R).

Export RML.
Export R.

Definition mk_rshare: forall p: Share.t, pure_readable_share p -> rshare := exist pure_readable_share.
Definition rshare_sh (p: rshare) : Share.t := proj1_sig p.

Lemma mk_rshare_sh: forall (p:rshare) (H: pure_readable_share (rshare_sh p)),
  mk_rshare (rshare_sh p) H = p.

Definition fixup_splitting
  (a:address -> Share.t) (z: address -> option (rshare * kind)) : address -> option (rshare * kind) :=
  fun l => 
    match z l with
    | Some (sh, k) =>
       match dec_readable (a l) with
       | left p => Some (readable_part p,  k)
       | right _ => None
       end
    | None => None
    end.

Definition share_of (x: option (rshare * kind)) : Share.t :=
  match x with Some (p,_) => proj1_sig p | None => Share.bot end.

Definition Join_pk := (Join_lower (Join_prod rshare _ kind (Join_equiv _))).

Lemma share_of_Some: forall p: rshare * AV.kind, readable_share (share_of (Some p)).

Lemma join_sub_same_k:
 forall {a a' : rshare} {k k': AV.kind},

Lemma pure_readable_glb_Rsh:
 forall sh, pure_readable_share sh -> Share.glb Share.Rsh sh = sh.

Lemma join_glb_Rsh:  
  forall a b c : Share.t,

Lemma pure_readable_share_glb:
  forall a, pure_readable_share a -> Share.glb Share.Rsh a = a.

Lemma glb_Rsh_bot_unreadable:
  forall a, Share.glb Share.Rsh a = Share.bot -> ~readable_share a.

Lemma fixup_join : forall a (ac ad: address -> Share.t)  z,

Lemma join_share_of: forall a b c,
     @join _ Join_pk a b c -> join (share_of a) (share_of b) (share_of c).

Lemma pure_readable_share_i:
  forall sh, readable_share sh -> (pure_readable_share (Share.glb Share.Rsh sh)).

Obligation Tactic := Tactics.program_simpl.

Lemma pure_readable_Rsh: pure_readable_share Share.Rsh.

Definition rfullshare : rshare := mk_rshare _ pure_readable_Rsh.

Program Definition writable (l: address): pred rmap :=
 fun phi =>
  match phi @ l with
    | YES sh _ k lp => writable0_share sh /\ isVAL k
    | _ => False
  end.

Program Definition readable (loc: address) : pred rmap :=
   fun phi => match phi @ loc with YES _ _ k _ => isVAL k | _ => False end.

Lemma readable_join:
  forall phi1 phi2 phi3 loc, join phi1 phi2 phi3 ->
            readable loc phi1 -> readable loc phi3.

Lemma readable_writable_join:
forall phi1 phi2 l, readable l phi1 -> writable l phi2 -> joins phi1 phi2 -> False.

Lemma writable0_join_sub:
  forall sh sh', join_sub sh sh' -> writable0_share sh -> writable0_share sh'.

Lemma writable_join: forall loc phi1 phi2, join_sub phi1 phi2 ->
            writable loc phi1 -> writable loc phi2.

Lemma writable_readable: forall loc m, writable loc m -> readable loc m.

Lemma writable_e: forall loc m, 
   writable loc m -> 
   exists sh, exists rsh, exists v, exists p, 
     m @ loc = YES sh rsh (VAL v) p /\ writable0_share sh.
Arguments writable_e [loc] [m] _.

Lemma readable_e: forall loc m, 
   readable loc m -> 
  exists sh, exists rsh, exists v, exists p, m @ loc = YES sh rsh (VAL v) p.
Arguments readable_e [loc] [m] _.

Definition bytes_writable (loc: address) (size: Z) (phi: rmap) : Prop :=
  forall i, (0 <= i < size) -> writable (adr_add loc i) phi.

Definition bytes_readable (loc: address) (size: Z) (phi: rmap) : Prop :=
  forall i, (0 <= i < size) -> readable (adr_add loc i) phi.

Lemma readable_dec (loc: address) (phi: rmap) : {readable loc phi} + {~readable loc phi}.

Lemma writable_dec: forall loc phi, {writable loc phi}+{~writable loc phi}.

Lemma bytes_writable_dec:
   forall loc n m, {bytes_writable loc n m}+{~bytes_writable loc n m}.

Lemma bytes_readable_dec:
   forall loc n m, {bytes_readable loc n m}+{~bytes_readable loc n m}.

Lemma bytes_writable_readable:
  forall m loc n, bytes_writable m loc n -> bytes_readable m loc n.

Hint Resolve bytes_writable_readable : mem.

Lemma rmap_age_i:
 forall w w' : rmap,
    level w = S (level w') ->
   (forall l, resource_fmap (approx (level w')) (approx (level w')) (w @ l) = w' @ l) ->
    ghost_fmap (approx (level w')) (approx (level w')) (ghost_of w) = ghost_of w' ->
    age w w'. *)

Require Import VST.veric.Clight_lemmas.
(* VST.veric.Clight_lemmas:
Require Import VST.veric.Clight_base.
Require Import compcert.cfrontend.Clight.

Definition var_name (V: Type) (bdec: ident * globvar V) : ident :=
   fst bdec.

Definition no_dups (F V: Type) (fdecs: list (ident * F)) (bdecs: list (ident * globvar V)) : Prop :=
  list_norepet (map (@fst ident F) fdecs ++ map (@var_name V) bdecs).
Arguments no_dups [F V] _ _.

Lemma no_dups_inv:
  forall  (A V: Type) id f fdecs bdecs,
    no_dups ((id,f)::fdecs) bdecs ->
    no_dups fdecs bdecs /\
     ~ In id (map (@fst ident A) fdecs) /\
     ~ In id (map (@var_name V) bdecs).
Arguments no_dups_inv [A V] _ _ _ _ _.

Lemma of_bool_Int_eq_e:
  forall i j, Val.of_bool (Int.eq i j) = Vtrue -> i = j.

Lemma eq_block_lem:
    forall (A: Set) a (b: A) c, (if eq_block a a then b else c) = b.

Lemma signed_zero: Int.signed Int.zero = 0.

Lemma equiv_e1 : forall A B: Prop, A=B -> A -> B.
Arguments equiv_e1 [A B] _ _.

Lemma deref_loc_fun: forall {ty m b z v v'},
   Clight.deref_loc ty m b z v -> Clight.deref_loc ty m b z v' -> v=v'.

Lemma eval_expr_lvalue_fun:
  forall ge e le m,
    (forall a v v', Clight.eval_expr ge e le m a v -> Clight.eval_expr ge e le m a v' -> v=v') /\

Lemma eval_expr_fun:   forall {ge e le m a v v'},
    Clight.eval_expr ge e le m a v -> Clight.eval_expr ge e le m a v' -> v=v'.

Lemma eval_exprlist_fun:   forall {ge e le m a ty v v'},
    Clight.eval_exprlist ge e le m a ty v -> Clight.eval_exprlist ge e le m a ty v' -> v=v'.

Lemma eval_lvalue_fun:   forall {ge e le m a b b' z z'},
    Clight.eval_lvalue ge e le m a b z -> Clight.eval_lvalue ge e le m a b' z' -> (b,z)=(b',z').

Lemma inv_find_symbol_fun:
  forall {ge id id' b},
    Senv.find_symbol ge id = Some b ->

Lemma assign_loc_fun:
  forall {cenv ty m b ofs v m1 m2},
   assign_loc cenv ty m b ofs v m1 ->
   assign_loc cenv ty m b ofs v m2 ->
   m1=m2.

Lemma alloc_variables_fun:
  forall {ge e m vl e1 m1 e2 m2},
     Clight.alloc_variables ge e m vl e1 m1 ->

Lemma bind_parameters_fun:
  forall {ge e m p v m1 m2},
    Clight.bind_parameters ge e m p v m1 ->

Lemma eventval_list_match_fun:
  forall {se a a' t v},
    Events.eventval_list_match se a t v ->

Ltac fun_tac :=
  match goal with
  | H: ?A = Some _, H': ?A = Some _ |- _ => inversion2 H H'
  | H: Clight.eval_expr ?ge ?e ?le ?m ?A _,
    H': Clight.eval_expr ?ge ?e ?le ?m ?A _ |- _ =>
        apply (eval_expr_fun H) in H'; subst
  | H: Clight.eval_exprlist ?ge ?e ?le ?m ?A ?ty _,
    H': Clight.eval_exprlist ?ge ?e ?le ?m ?A ?ty _ |- _ =>
        apply (eval_exprlist_fun H) in H'; subst
  | H: Clight.eval_lvalue ?ge ?e ?le ?m ?A _ _,
    H': Clight.eval_lvalue ?ge ?e ?le ?m ?A _ _ |- _ =>
        apply (eval_lvalue_fun H) in H'; inv H'
  | H: Clight.assign_loc ?ge ?ty ?m ?b ?ofs ?v _,
    H': Clight.assign_loc ?ge ?ty ?m ?b ?ofs ?v _ |- _ =>
        apply (assign_loc_fun H) in H'; inv H'
  | H: Clight.deref_loc ?ty ?m ?b ?ofs _,
    H': Clight.deref_loc ?ty ?m ?b ?ofs _ |- _ =>
        apply (deref_loc_fun H) in H'; inv H'
  | H: Clight.alloc_variables ?ge ?e ?m ?vl _ _,
    H': Clight.alloc_variables ?ge ?e ?m ?vl _ _ |- _ =>
        apply (alloc_variables_fun H) in H'; inv H'
  | H: Clight.bind_parameters ?ge ?e ?m ?p ?vl _,
    H': Clight.bind_parameters ?ge ?e ?m ?p ?vl _ |- _ =>
        apply (bind_parameters_fun H) in H'; inv H'
  | H: Senv.find_symbol ?ge _ = Some ?b,
    H': Senv.find_symbol ?ge _ = Some ?b |- _ =>
       apply (inv_find_symbol_fun H) in H'; inv H'
  | H: Events.eventval_list_match ?ge _ ?t ?v,
    H': Events.eventval_list_match ?ge _ ?t ?v |- _ =>
       apply (eventval_list_match_fun H) in H'; inv H'
 end. *)

Require Import VST.veric.mpred.
(* VST.veric.mpred:
Require Import VST.veric.base.
Require Import VST.veric.rmaps.
Require Export compcert.cfrontend.Ctypes.
Require Import VST.veric.compcert_rmaps.

Require Import VST.veric.composite_compute.
Require Import VST.veric.align_mem.
Require Import VST.veric.val_lemmas.

Definition strict_bool_val (v: val) (t: type) : option bool :=
   match v, t with
   | Vint n, Tint _ _ _ => Some (negb (Int.eq n Int.zero))
   | Vlong n, Tlong _ _ => Some (negb (Int64.eq n Int64.zero))
   | (Vint n), (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _ ) =>
            if Archi.ptr64 then None else if Int.eq n Int.zero then Some false else None
   | Vlong n, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _ ) =>
            if Archi.ptr64 then if Int64.eq n Int64.zero then Some false else None else None
   | Vptr b ofs, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _ ) => Some true
   | Vfloat f, Tfloat F64 _ => Some (negb(Float.cmp Ceq f Float.zero))
   | Vsingle f, Tfloat F32 _ => Some (negb(Float32.cmp Ceq f Float32.zero))
   | _, _ => None
   end.

Definition type_is_by_value (t:type) : bool :=
  match t with
  | Tint _ _ _
  | Tlong _ _
  | Tfloat _ _
  | Tpointer _ _ => true
  | _ => false
  end.

Definition type_is_by_reference t : bool :=
  match t with
  | Tarray _ _ _
  | Tfunction _ _ _ => true
  | _ => false
  end.

Set Implicit Arguments.
Module Map. Section map.
Variables (B : Type).

Definition t := positive -> option B.

Definition get (h: t) (a:positive) : option B := h a.

Definition set (a:positive) (v: B) (h: t) : t :=
  fun i => if ident_eq i a then Some v else h i.

Definition remove (a: positive) (h: t) : t :=
  fun i => if ident_eq i a then None else h i.

Definition empty : t := fun _ => None.

Lemma gss h x v : get (set x v h) x = Some v.

Lemma gso h x y v : x<>y -> get (set x v h) y = get h y.

Lemma grs h x : get (remove x h) x = None.

Lemma gro h x y : x<>y -> get (remove x h) y = get h y.

Lemma ext h h' : (forall x, get h x = get h' x) -> h=h'.

Lemma override (a: positive) (b b' : B) h : set a b' (set a b h) = set a b' h.

Lemma gsspec:
    forall (i j: positive) (x: B) (m: t),
    get (set j x m) i = if ident_eq i j then Some x else get m i.

Lemma override_same : forall id t (x:B), get t id = Some x -> set id x t = t.

End map.

End Map.
Unset Implicit Arguments.

Section FUNSPEC.

Definition genviron := Map.t block.

Definition venviron := Map.t (block * type).

Definition tenviron := Map.t val.

Inductive environ : Type :=
 mkEnviron: forall (ge: genviron) (ve: venviron) (te: tenviron), environ.

Definition ge_of (rho: environ) : genviron :=
  match rho with mkEnviron ge ve te => ge end.

Definition ve_of (rho: environ) : venviron :=
  match rho with mkEnviron ge ve te => ve end.

Definition te_of (rho: environ) : tenviron :=
  match rho with mkEnviron ge ve te => te end.

Definition any_environ : environ :=
  mkEnviron (fun _ => None)  (Map.empty _) (Map.empty _).

Definition mpred := pred rmap.

Definition AssertTT (A: TypeTree): TypeTree :=
  ArrowType A (ArrowType (ConstType environ) Mpred).

Definition SpecTT (A: TypeTree): TypeTree :=
  ArrowType A (ArrowType (ConstType bool) (ArrowType (ConstType environ) Mpred)).

Definition super_non_expansive {A: TypeTree}
  (P: forall ts, dependent_type_functor_rec ts (AssertTT A) mpred): Prop :=
  forall n ts
    (x: functors.MixVariantFunctor._functor
                         (rmaps.dependent_type_functor_rec ts A) mpred)
    (rho: environ),
  approx n (P ts x rho) = approx n (P ts (fmap _ (approx n) (approx n) x) rho).

Definition const_super_non_expansive: forall (T: Type) P,
  @super_non_expansive (ConstType T) P :=
  fun _ _ _ _ _ _ => eq_refl.

Inductive funspec :=
   mk_funspec: funsig -> calling_convention -> forall (A: TypeTree)
     (P Q: forall ts, dependent_type_functor_rec ts (AssertTT A) mpred)
     (P_ne: super_non_expansive P) (Q_ne: super_non_expansive Q),
     funspec.

Definition varspecs : Type := list (ident * type).

Definition funspecs := list (ident * funspec).

End FUNSPEC.

Definition assert := environ -> mpred.  
Definition packPQ {A: rmaps.TypeTree}
  (P Q: forall ts, dependent_type_functor_rec ts (AssertTT A) (pred rmap)):
  forall ts, dependent_type_functor_rec ts (SpecTT A) (pred rmap) :=
  fun ts a b => if b then P ts a else Q ts a.

Definition int_range (sz: intsize) (sgn: signedness) (i: int) :=
 match sz, sgn with
 | I8, Signed => -128 <= Int.signed i < 128
 | I8, Unsigned => 0 <= Int.unsigned i < 256
 | I16, Signed => -32768 <= Int.signed i < 32768
 | I16, Unsigned => 0 <= Int.unsigned i < 65536
 | I32, Signed => -2147483648 <= Int.signed i < 2147483648
 | I32, Unsigned => 0 <= Int.unsigned i < 4294967296
 | IBool, _ => 0 <= Int.unsigned i < 256
 end.

Definition in_members i (m: members): Prop :=
  In i (map fst m).

Definition members_no_replicate (m: members) : bool :=
  compute_list_norepet (map fst m).

Definition compute_in_members id (m: members): bool :=
  id_in_list id (map fst m).

Lemma compute_in_members_true_iff: forall i m, compute_in_members i m = true <-> in_members i m.

Lemma compute_in_members_false_iff: forall i m,
  compute_in_members i m = false <-> ~ in_members i m.

Ltac destruct_in_members i m :=
  let H := fresh "H" in
  destruct (compute_in_members i m) eqn:H;
    [apply compute_in_members_true_iff in H |
     apply compute_in_members_false_iff in H].

Lemma in_members_dec: forall i m, {in_members i m} + {~ in_members i m}.

Lemma size_chunk_sizeof: forall env t ch, access_mode t = By_value ch -> sizeof env t = Memdata.size_chunk ch.

Definition composite_legal_fieldlist (co: composite): Prop :=
  members_no_replicate (co_members co) = true.

Definition composite_env_legal_fieldlist env :=
  forall (id : positive) (co : composite),
    env ! id = Some co -> composite_legal_fieldlist co.

Class compspecs := mkcompspecs {
  cenv_cs : composite_env;
  cenv_consistent: composite_env_consistent cenv_cs;
  cenv_legal_fieldlist: composite_env_legal_fieldlist cenv_cs;
  cenv_legal_su: composite_env_complete_legal_cosu_type cenv_cs;
  ha_env_cs: PTree.t Z;
  ha_env_cs_consistent: hardware_alignof_env_consistent cenv_cs ha_env_cs;
  ha_env_cs_complete: hardware_alignof_env_complete cenv_cs ha_env_cs;
  la_env_cs: PTree.t legal_alignas_obs;
  la_env_cs_consistent: legal_alignas_env_consistent cenv_cs ha_env_cs la_env_cs;
  la_env_cs_complete: legal_alignas_env_complete cenv_cs la_env_cs;
  la_env_cs_sound: legal_alignas_env_sound cenv_cs ha_env_cs la_env_cs
}.

Existing Class composite_env.
Existing Instance cenv_cs.

Arguments sizeof {env} !t / .
Arguments alignof {env} !t / .

Arguments sizeof_pos {env} t _.
Arguments alignof_pos {env} t.

Arguments complete_legal_cosu_type {cenv} !t / .

Goal forall {cs: compspecs} t, sizeof t >= 0.
Proof. intros. apply sizeof_pos.
Abort.

Definition type_of_funspec (fs: funspec) : type :=
  match fs with mk_funspec fsig cc _ _ _ _ _ => Tfunction (type_of_params (fst fsig)) (snd fsig) cc end.

Fixpoint typelist2list (tl: typelist) : list type :=
 match tl with Tcons t r => t::typelist2list r | Tnil => nil end.

Definition idset := PTree.t unit.

Definition idset0 : idset := PTree.empty _.
Definition idset1 (id: ident) : idset := PTree.set id tt idset0.
Definition insert_idset (id: ident) (S: idset) : idset :=
  PTree.set id tt S.

Definition eval_id (id: ident) (rho: environ) := force_val (Map.get (te_of rho) id).

Definition env_set (rho: environ) (x: ident) (v: val) : environ :=
  mkEnviron (ge_of rho) (ve_of rho) (Map.set x v (te_of rho)).

Lemma eval_id_same: forall rho id v, eval_id id (env_set rho id v) = v.
Hint Rewrite eval_id_same : normalize.

Lemma eval_id_other: forall rho id id' v,
   id<>id' -> eval_id id' (env_set rho id v) = eval_id id' rho.
Hint Rewrite eval_id_other using solve [clear; intro Hx; inversion Hx] : normalize.

Fixpoint ptree_set {A : Type} (i : positive) (v : A) (m : PTree.t A) {struct i} : PTree.t A :=

Fixpoint make_tycontext_s (G: funspecs) :=
 match G with
 | nil => @PTree.Leaf funspec
 | b::r => let (id,f) := b in ptree_set id f (make_tycontext_s r)
 end.

Definition lift0 {B} (P: B) : environ -> B := fun _ => P.
Definition lift1 {A1 B} (P: A1 -> B) (f1: environ -> A1) : environ -> B := fun rho => P (f1 rho).
Definition lift2 {A1 A2 B} (P: A1 -> A2 -> B) (f1: environ -> A1) (f2: environ -> A2):
   environ -> B := fun rho => P (f1 rho) (f2 rho).
Definition lift3 {A1 A2 A3 B} (P: A1 -> A2 -> A3 -> B)
     (f1: environ -> A1) (f2: environ -> A2) (f3: environ -> A3) :  environ -> B :=
     fun rho => P (f1 rho) (f2 rho) (f3 rho).
Definition lift4 {A1 A2 A3 A4 B} (P: A1 -> A2 -> A3 -> A4 -> B)
     (f1: environ -> A1) (f2: environ -> A2) (f3: environ -> A3)(f4: environ -> A4):  environ -> B :=
     fun rho => P (f1 rho) (f2 rho) (f3 rho) (f4 rho).

Require Import VST.veric.lift.
Canonical Structure LiftEnviron := Tend environ.

Ltac super_unfold_lift :=
  cbv delta [liftx LiftEnviron Tarrow Tend lift_S lift_T lift_prod
  lift_last lifted lift_uncurry_open lift_curry lift lift0 lift1 lift2 lift3] beta iota in *. *)

Require Import VST.veric.tycontext.
(* VST.veric.tycontext:
Require Import VST.msl.msl_standard.
Require Import VST.veric.Clight_base.
Require Import VST.veric.rmaps.
Require Import VST.veric.compcert_rmaps.

Require Import VST.veric.Clight_lemmas. 
Require Import VST.veric.align_mem.

Require Export VST.veric.lift.

Require Export VST.veric.mpred.

Fixpoint modifiedvars' (c: statement) (S: idset) : idset :=
 match c with
 | Sset id e => insert_idset id S
 | Sifthenelse _ c1 c2 => modifiedvars' c1 (modifiedvars' c2 S)
 | Scall (Some id) _ _ => insert_idset id S
 | Sbuiltin (Some id) _ _ _ => insert_idset id S
 | Ssequence c1 c2 =>  modifiedvars' c1 (modifiedvars' c2 S)
 | Sloop c1 c2 => modifiedvars' c1 (modifiedvars' c2 S)
 | Sswitch e cs => modifiedvars_ls cs S
 | Slabel _ c => modifiedvars' c S
 | _ => S
 end
 with
 modifiedvars_ls (cs: labeled_statements) (S: idset) : idset :=
 match cs with
 | LSnil => S
 | LScons _ c ls => modifiedvars' c (modifiedvars_ls ls S)
 end.

Definition isOK {A} (P: Errors.res A) := match P with Errors.OK _ => true | _ => false end.

Lemma modifiedvars'_union:
 forall id c S,
  isSome ((modifiedvars' c S) ! id) <->
  (isSome ((modifiedvars' c idset0) ! id ) \/ isSome (S ! id))
with modifiedvars_ls_union:
 forall id c S,
  isSome ((modifiedvars_ls c S) ! id) <->
  (isSome ((modifiedvars_ls c idset0) ! id ) \/ isSome (S ! id)).

Definition modifiedvars (c: statement) (id: ident) :=
   isSome ((modifiedvars' c idset0) ! id).

Definition type_of_global (ge: Clight.genv) (b: block) : option type :=
  match Genv.find_var_info ge b with
  | Some gv => Some gv.(gvar_info)
  | None =>
      match Genv.find_funct_ptr ge b with
      | Some fd => Some(type_of_fundef fd)
      | None => None
      end
  end.

Definition filter_genv (ge: Clight.genv) : genviron :=
    Genv.find_symbol ge.

Definition make_tenv (te : Clight.temp_env) : tenviron := fun id => PTree.get id te.

Definition make_venv (te : Clight.env) : venviron := fun id => PTree.get id te.

Definition construct_rho ge ve te:= mkEnviron ge (make_venv ve) (make_tenv te) .

Definition empty_environ (ge: Clight.genv) := mkEnviron (filter_genv ge) (Map.empty _) (Map.empty _).

Inductive Annotation :=
  WeakAnnotation : (environ -> mpred) -> Annotation
| StrongAnnotation : (environ -> mpred) -> Annotation.

Inductive tycontext : Type :=
  mk_tycontext : forall (tyc_temps: PTree.t type)
                        (tyc_vars: PTree.t type)
                        (tyc_ret: type)
                        (tyc_globty: PTree.t type)
                        (tyc_globsp: PTree.t funspec)
                        (tyc_annot: PTree.t Annotation),
                             tycontext.

Definition empty_tycontext : tycontext :=
  mk_tycontext (PTree.empty _) (PTree.empty _) Tvoid
         (PTree.empty _)  (PTree.empty _) (PTree.empty _).

Definition temp_types (Delta: tycontext): PTree.t type :=
  match Delta with mk_tycontext a _ _ _ _ _ => a end.
Definition var_types (Delta: tycontext) : PTree.t type :=
  match Delta with mk_tycontext _ a _ _ _ _ => a end.
Definition ret_type (Delta: tycontext) : type :=
  match Delta with mk_tycontext _ _ a _ _ _ => a end.
Definition glob_types (Delta: tycontext) : PTree.t type :=
  match Delta with mk_tycontext _ _ _ a _ _ => a end.
Definition glob_specs (Delta: tycontext) : PTree.t funspec :=
  match Delta with mk_tycontext _ _ _ _ a _ => a end.
Definition annotations (Delta: tycontext) : PTree.t Annotation :=
  match Delta with mk_tycontext _ _ _ _ _ a => a end.

Definition make_tycontext_t (params: list (ident*type)) (temps : list(ident*type)) :=
fold_right (fun (param: ident*type) => PTree.set (fst param) (snd param))
 (fold_right (fun (temp : ident *type) tenv => let (id,ty):= temp in PTree.set id ty tenv)
  (PTree.empty type) temps) params.

Definition make_tycontext_v (vars : list (ident * type)) :=
 fold_right (fun (var : ident * type) venv => let (id, ty) := var in PTree.set id ty venv)
   (PTree.empty type) vars.

Definition make_tycontext_g (V: varspecs) (G: funspecs) :=
 (fold_right (fun (var : ident * funspec) => PTree.set (fst var) (type_of_funspec (snd var)))
      (fold_right (fun (v: ident * type) => PTree.set (fst v) (snd v))
         (PTree.empty _) V)
            G).

Definition make_tycontext_a (anns : list (ident * Annotation)) :=
 fold_right (fun (ia : ident * Annotation) aenv => let (id, a) := ia in PTree.set id a aenv)
   (PTree.empty Annotation) anns.

Definition make_tycontext (params: list (ident*type)) (temps: list (ident*type)) (vars: list (ident*type))
                       (return_ty: type)
                       (V: varspecs) (G: funspecs) (A: list (ident*Annotation)):  tycontext :=
 mk_tycontext
   (make_tycontext_t params temps)
   (make_tycontext_v vars)
   return_ty
   (make_tycontext_g V G)
   (make_tycontext_s G)
   (make_tycontext_a A).

Definition func_tycontext' (func: function) (Delta: tycontext) : tycontext :=
 mk_tycontext
   (make_tycontext_t (fn_params func) (fn_temps func))
   (make_tycontext_v (fn_vars func))
   (fn_return func)
   (glob_types Delta)
   (glob_specs Delta)
   (annotations Delta).

Definition func_tycontext (func: function) (V: varspecs) (G: funspecs) (A:list (ident * Annotation)): tycontext :=
  make_tycontext (func.(fn_params)) (func.(fn_temps)) (func.(fn_vars)) (func.(fn_return)) V G A.

Definition nofunc_tycontext (V: varspecs) (G: funspecs) : tycontext :=
   make_tycontext nil nil nil Tvoid V G nil.

Ltac try_false :=
try  solve[exists false; rewrite orb_false_r; eauto].

Lemma list_norepet_rev:
  forall A (l: list A), list_norepet (rev l) = list_norepet l.

Definition sub_option {A} (x y: option A) :=
 match x with Some x' => y = Some x' | None => True end.

Lemma sub_option_eqv: forall {A} (x y: option A),
  x = y <-> sub_option x y /\ sub_option y x.

Lemma sub_option_refl: forall {A} (x: option A), sub_option x x.

Lemma sub_option_trans: forall {A} (x y z: option A), sub_option x y -> sub_option y z -> sub_option x z.

Lemma sub_option_spec: forall {A} (T1 T2: PTree.t A),

Definition Annotation_sub (A1 A2: option Annotation):Prop := 
  match A1, A2 with
    _, None => True
  | Some (StrongAnnotation _), Some (WeakAnnotation _) => True
  | Some (StrongAnnotation X), Some (StrongAnnotation Y) => X=Y 
  | X, Y => X=Y 
  end.

Lemma Annotation_sub_trans a1 a2 a3: Annotation_sub a1 a2 -> 
      Annotation_sub a2 a3 -> Annotation_sub a1 a3.

Lemma Annotation_sub_refl a: Annotation_sub a a. 

Lemma Annotation_sub_antisymm a b: Annotation_sub a b -> Annotation_sub b a -> a=b.

Definition tycontext_sub (Delta Delta' : tycontext) : Prop :=
 (forall id, match (temp_types Delta) ! id,  (temp_types Delta') ! id with
                 | None, _ => True
                 | Some t, None => False
                 | Some t, Some t' => t=t'
                end)
 /\ (forall id, (var_types Delta) ! id = (var_types Delta') ! id)
 /\ ret_type Delta = ret_type Delta'
 /\ (forall id, sub_option ((glob_types Delta) ! id) ((glob_types Delta') ! id))
 /\ (forall id, sub_option ((glob_specs Delta) ! id) ((glob_specs Delta') ! id))
 /\ (forall id, Annotation_sub ((annotations Delta) ! id) ((annotations Delta') ! id)).

Definition tycontext_eqv (Delta Delta' : tycontext) : Prop :=
 (forall id, (temp_types Delta) ! id = (temp_types Delta') ! id)
 /\ (forall id, (var_types Delta) ! id = (var_types Delta') ! id)
 /\ ret_type Delta = ret_type Delta'
 /\ (forall id, (glob_types Delta) ! id = (glob_types Delta') ! id)
 /\ (forall id, (glob_specs Delta) ! id = (glob_specs Delta') ! id)
 /\ (forall id, (annotations Delta) ! id = (annotations Delta') ! id).

Lemma tycontext_eqv_spec: forall Delta Delta',
  tycontext_eqv Delta Delta' <-> tycontext_sub Delta Delta' /\ tycontext_sub Delta' Delta.

Lemma tycontext_sub_refl:
 forall Delta, tycontext_sub Delta Delta.

Lemma tycontext_sub_trans:
 forall Delta1 Delta2 Delta3,
  tycontext_sub Delta1 Delta2 -> tycontext_sub Delta2 Delta3 ->
  tycontext_sub Delta1 Delta3.

Definition binop_stable cenv op a1 a2 : bool :=
match op with
  | Cop.Oadd => match Cop.classify_add (typeof a1) (typeof a2) with
                    | Cop.add_case_pi t _ => complete_type cenv t
                    | Cop.add_case_ip _ t => complete_type cenv t
                    | Cop.add_case_pl t => complete_type cenv t
                    | Cop.add_case_lp t => complete_type cenv t
                    | Cop.add_default => true
            end
  | Cop.Osub => match Cop.classify_sub (typeof a1) (typeof a2) with
                    | Cop.sub_case_pi t _ => complete_type cenv t
                    | Cop.sub_case_pl t => complete_type cenv t
                    | Cop.sub_case_pp t => complete_type cenv t
                    | Cop.sub_default => true
            end
  | _ => true
  end.

Section STABILITY.

Variables env env': composite_env.
Hypothesis extends: forall id co, env!id = Some co -> env'!id = Some co.

Lemma binop_stable_stable: forall b e1 e2,
  binop_stable env b e1 e2 = true ->
  binop_stable env' b e1 e2 = true.

Lemma Cop_Sem_add_ptr_int_stable ty si u v (H:complete_type env ty = true):
  Cop.sem_add_ptr_int env ty si u v =

Lemma Cop_Sem_add_ptr_long_stable ty u v (H:complete_type env ty = true):
  Cop.sem_add_ptr_long env ty u v =

Lemma Cop_sem_binary_operation_stable:
  forall b v1 e1 v2 e2 m,
  binop_stable env b e1 e2 = true ->
  Cop.sem_binary_operation env b v1 (typeof e1) v2 (typeof e2) m =

Lemma field_offset_stable: forall i id co ofs,
  composite_env_consistent env ->
  env ! i = Some co ->
  field_offset env id (co_members co) = Errors.OK ofs ->

End STABILITY.

Section TYCON_SUB.
Variables Delta Delta': tycontext.
Hypothesis extends: tycontext_sub Delta Delta'.

Lemma func_tycontext'_sub: forall f,
  tycontext_sub (func_tycontext' f Delta) (func_tycontext' f Delta').

End TYCON_SUB.

Section TYCON_EQUIV.

Variable Delta Delta': tycontext.
Hypothesis equiv: tycontext_eqv Delta Delta'.

Lemma func_tycontext'_eqv: forall f,
  tycontext_eqv (func_tycontext' f Delta) (func_tycontext' f Delta').

End TYCON_EQUIV.

Lemma tycontext_eqv_symm:
  forall Delta Delta', tycontext_eqv Delta Delta' ->  tycontext_eqv Delta' Delta.

Lemma tycontext_eqv_sub:
  forall Delta Delta', tycontext_eqv Delta Delta' ->
         tycontext_sub Delta Delta'.

Record ret_assert : Type := {
 RA_normal: environ->mpred;
 RA_break: environ->mpred;
 RA_continue: environ->mpred;
 RA_return: option val -> environ->mpred
}.

Lemma modifiedvars_Slabel l c: modifiedvars (Slabel l c) = modifiedvars c.

Lemma modifiedvars_computable: forall c (te1 te2: Map.t val), exists te,

Lemma modifiedvars_Sifthenelse b c1 c2 id: modifiedvars (Sifthenelse b c1 c2) id <-> modifiedvars c1 id \/ modifiedvars c2 id.

Lemma modifiedvars_Sloop c1 c2 id: modifiedvars (Sloop c1 c2) id <-> modifiedvars c1 id \/ modifiedvars c2 id.

Lemma modifiedvars_Ssequence c1 c2 id: modifiedvars (Ssequence c1 c2) id <-> modifiedvars c1 id \/ modifiedvars c2 id.

Lemma modifiedvars_ls_eq: forall sl, modifiedvars_ls sl = modifiedvars' (seq_of_labeled_statement sl).

Lemma modifiedvars_Sswitch e sl n id: modifiedvars (seq_of_labeled_statement (select_switch (Int.unsigned n) sl)) id -> modifiedvars (Sswitch e sl) id. *)

Require Import VST.veric.expr2.
(* VST.veric.expr2:
Require Import VST.msl.msl_standard.
Require Import VST.veric.Clight_base.
Require Import VST.veric.compcert_rmaps.
Require Import VST.veric.tycontext.
Require Import VST.veric.Clight_lemmas.
Require Export VST.veric.expr.

Require Import VST.veric.mpred.

Lemma neutral_cast_lemma: forall t1 t2 v,
  is_neutral_cast t1 t2 = true ->
  tc_val t1 v -> eval_cast t1 t2 v = v.

Lemma neutral_cast_subsumption: forall t1 t2 v,
  is_neutral_cast t1 t2 = true ->
  tc_val t1 v -> tc_val t2 v.

Lemma neutral_cast_subsumption': forall t1 t2 v,
  is_neutral_cast (implicit_deref t1) t2 = true ->
  tc_val t1 v -> tc_val t2 v.

Definition denote_tc_iszero v : mpred :=
         match v with
         | Vint i => prop (is_true (Int.eq i Int.zero))
         | Vlong i => prop (is_true (Int64.eq i Int64.zero))
         | _ => FF
         end.

Definition denote_tc_nonzero v : mpred :=
         match v with
         | Vint i => prop (i <> Int.zero)
         | Vlong i =>prop (i <> Int64.zero)
         | _ => FF end.

Definition denote_tc_igt i v : mpred :=
     match v with
     | Vint i1 => prop (Int.unsigned i1 < Int.unsigned i)
     | _ => FF
     end.

Definition denote_tc_lgt l v : mpred :=
     match v with
     | Vlong l1 => prop (Int64.unsigned l1 < Int64.unsigned l)
     | _ => FF
     end.

Definition Zoffloat (f:float): option Z := 
  match f with
    | Fappli_IEEE.B754_finite s m (Zpos e) _ =>
       Some (Fcore_Zaux.cond_Zopp s (Zpos m) * Zpower_pos 2 e)
    | Fappli_IEEE.B754_finite s m 0 _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m))
    | Fappli_IEEE.B754_finite s m (Zneg e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m / Zpower_pos 2 e))
    | Fappli_IEEE.B754_zero _ => Some 0
    | _ => None
  end.  

Definition Zofsingle (f: float32): option Z := 
  match f with
    | Fappli_IEEE.B754_finite s m (Zpos e) _ =>
       Some (Fcore_Zaux.cond_Zopp s (Zpos m) * Zpower_pos 2 e)
    | Fappli_IEEE.B754_finite s m 0 _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m))
    | Fappli_IEEE.B754_finite s m (Zneg e) _ => Some (Fcore_Zaux.cond_Zopp s (Zpos m / Zpower_pos 2 e))
    | Fappli_IEEE.B754_zero _ => Some 0
    | _ => None
  end.  

Definition denote_tc_Zge z v : mpred :=
          match v with
                     | Vfloat f => match Zoffloat f with
                                    | Some n => prop (z >= n)
                                    | None => FF
                                   end
                     | Vsingle f => match Zofsingle f with
                                    | Some n => prop (z >= n)
                                    | None => FF
                                   end
                     | _ => FF
                  end.

Definition denote_tc_Zle z v : mpred :=
          match v with
                     | Vfloat f => match Zoffloat f with
                                    | Some n => prop (z <= n)
                                    | None => FF
                                   end
                     | Vsingle f => match Zofsingle f with
                                    | Some n => prop (z <= n)
                                    | None => FF
                                   end
                     | _ => FF
                  end.

Definition sameblock v1 v2 : bool :=
         match v1, v2 with
          | Vptr b1 _, Vptr b2 _ => peq b1 b2
          | _, _ => false
         end.

Definition denote_tc_samebase v1 v2 : mpred :=
       prop (is_true (sameblock v1 v2)).

Definition denote_tc_nodivover v1 v2 : mpred :=
match v1, v2 with
          | Vint n1, Vint n2 => prop (~(n1 = Int.repr Int.min_signed /\ n2 = Int.mone))
          | Vlong n1, Vlong n2 => prop (~(n1 = Int64.repr Int64.min_signed /\ n2 = Int64.mone))
          | Vint n1, Vlong n2 => TT
          | Vlong n1, Vint n2 => prop (~ (n1 = Int64.repr Int64.min_signed  /\ n2 = Int.mone))
          | _ , _ => FF
        end.

Definition denote_tc_nosignedover (op: Z->Z->Z) v1 v2 : mpred :=
 match v1,v2 with
 | Vint n1, Vint n2 => 
   prop (Int.min_signed <= op (Int.signed n1) (Int.signed n2) <= Int.max_signed)
 | Vlong n1, Vlong n2 =>
   prop (Int64.min_signed <= op (Int64.signed n1) (Int64.signed n2) <= Int64.max_signed)
 | Vint n1, Vlong n2 =>
   prop (Int64.min_signed <= op (Int.signed n1) (Int64.signed n2) <= Int64.max_signed)
 | Vlong n1, Vint n2 =>
   prop (Int64.min_signed <= op (Int64.signed n1) (Int.signed n2) <= Int64.max_signed)
 | _, _ => FF
 end.

Definition denote_tc_initialized id ty rho : mpred :=
    prop (exists v, Map.get (te_of rho) id = Some v
               /\ tc_val ty v).

Definition denote_tc_isptr v : mpred :=
  prop (isptr v).

Definition denote_tc_isint v : mpred :=
  prop (is_int I32 Signed v).

Definition denote_tc_islong v : mpred :=
  prop (is_long v).

Definition test_eq_ptrs v1 v2 : mpred :=
  if sameblock v1 v2
  then (andp (weak_valid_pointer v1) (weak_valid_pointer v2))
  else (andp (valid_pointer v1) (valid_pointer v2)).

Definition test_order_ptrs v1 v2 : mpred :=
  if sameblock v1 v2
  then (andp (weak_valid_pointer v1) (weak_valid_pointer v2))
  else FF.

Definition denote_tc_test_eq v1 v2 : mpred :=
 match v1, v2 with
 | Vint i, Vint j => 
     if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (prop (j = Int.zero))
 | Vlong i, Vlong j => 
     if Archi.ptr64 then andp (prop (i = Int64.zero)) (prop (j = Int64.zero)) else FF
 | Vint i, Vptr _ _ =>
      if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (weak_valid_pointer v2)
 | Vlong i, Vptr _ _ =>
      if Archi.ptr64 then andp (prop (i = Int64.zero)) (weak_valid_pointer v2) else FF
 | Vptr _ _, Vint i =>
      if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (weak_valid_pointer v1)
 | Vptr _ _, Vlong i =>
      if Archi.ptr64 then andp (prop (i = Int64.zero)) (weak_valid_pointer v1) else FF
 | Vptr _ _, Vptr _ _ =>
      test_eq_ptrs v1 v2
 | _, _ => FF
 end.

Definition denote_tc_test_order v1 v2 : mpred :=
 match v1, v2 with
 | Vint i, Vint j => if Archi.ptr64 then FF else andp (prop (i = Int.zero)) (prop (j = Int.zero))
 | Vlong i, Vlong j => if Archi.ptr64 then andp (prop (i = Int64.zero)) (prop (j = Int64.zero)) else FF
 | Vptr _ _, Vptr _ _ =>
      test_order_ptrs v1 v2
 | _, _ => FF
 end.

Definition typecheck_error (e: tc_error) : Prop := False.

Fixpoint denote_tc_assert {CS: compspecs}(a: tc_assert) : environ -> mpred :=
  match a with
  | tc_FF msg => `(prop (typecheck_error msg))
  | tc_TT => `TT
  | tc_andp' b c => `andp (denote_tc_assert b) (denote_tc_assert c)
  | tc_orp' b c => `orp (denote_tc_assert b) (denote_tc_assert c)
  | tc_nonzero' e => `denote_tc_nonzero (eval_expr e)
  | tc_isptr e => `denote_tc_isptr (eval_expr e)
  | tc_isint e => `denote_tc_isint (eval_expr e)
  | tc_islong e => `denote_tc_islong (eval_expr e)
  | tc_test_eq' e1 e2 => `denote_tc_test_eq (eval_expr e1) (eval_expr e2)
  | tc_test_order' e1 e2 => `denote_tc_test_order (eval_expr e1) (eval_expr e2)
  | tc_ilt' e i => `(denote_tc_igt i) (eval_expr e)
  | tc_llt' e l => `(denote_tc_lgt l) (eval_expr e)
  | tc_Zle e z => `(denote_tc_Zge z) (eval_expr e)
  | tc_Zge e z => `(denote_tc_Zle z) (eval_expr e)
  | tc_samebase e1 e2 => `denote_tc_samebase (eval_expr e1) (eval_expr e2)
  | tc_nodivover' v1 v2 => `denote_tc_nodivover (eval_expr v1) (eval_expr v2)
  | tc_initialized id ty => denote_tc_initialized id ty
  | tc_iszero' e => `denote_tc_iszero (eval_expr e)
  | tc_nosignedover op e1 e2 => `(denote_tc_nosignedover op) (eval_expr e1) (eval_expr e2)
 end.

Lemma and_False: forall x, (x /\ False) = False.

Lemma and_True: forall x, (x /\ True) = x.

Lemma True_and: forall x, (True /\ x) = x.

Lemma False_and: forall x, (False /\ x) = False.

Lemma tc_andp_sound : forall {CS: compspecs} a1 a2 rho m,
    denote_tc_assert  (tc_andp a1 a2) rho m <->
    denote_tc_assert  (tc_andp' a1 a2) rho m.

Lemma denote_tc_assert_andp:
  forall {CS: compspecs} a b rho, denote_tc_assert (tc_andp a b) rho =
             andp (denote_tc_assert a rho) (denote_tc_assert b rho).

Lemma neutral_isCastResultType:
  forall {CS: compspecs} t t' v rho,
   is_neutral_cast t' t = true ->
   forall m, denote_tc_assert (isCastResultType t' t v) rho m.

Lemma is_true_e: forall b, is_true b -> b=true.

Lemma tc_bool_e: forall {CS: compspecs} b a rho m,
  app_pred (denote_tc_assert (tc_bool b a) rho) m ->
  b = true. *)

Require Import VST.veric.Clight_Cop2.
(* VST.veric.Clight_Cop2:
Require Export VST.veric.Cop2.
Require Import VST.veric.Clight_base.
Require Import VST.veric.tycontext.

Definition sem_cast_pointer (v : val) : option val := Some v.

Definition sem_cast_i2i sz2 si2 (v : val) : option val :=
match v with
      | Vint i => Some (Vint (Cop.cast_int_int sz2 si2 i))
      | _ => None
      end.

Definition sem_cast_i2bool (v: val) : option val := 
      match v with
      | Vint n =>
          Some(Vint(if Int.eq n Int.zero then Int.zero else Int.one))
      | Vptr b ofs =>
          if Archi.ptr64 then None else Some Vone
      | _ => None
      end.

Definition sem_cast_l2bool (v: val) : option val :=
      match v with
      | Vlong n =>
          Some(Vint(if Int64.eq n Int64.zero then Int.zero else Int.one))
      | Vptr b ofs =>
          if negb Archi.ptr64 then None else Some Vone
      | _ => None
      end.

Definition sem_cast_l2l (v : val) : option val :=
 match v with
      | Vlong n => Some (Vlong n)
      | _ => None
      end.

Definition sem_cast_i2l si (v : val) : option val :=
 match v with
      | Vint n => Some(Vlong (Cop.cast_int_long si n))
      | _ => None
      end.

Definition sem_cast_l2i sz si (v : val) : option val :=
match v with
      | Vlong n => Some(Vint (Cop.cast_int_int sz si (Int.repr (Int64.unsigned n))))
      | _ => None
      end.

Definition sem_cast_struct id1 id2 (v : val) : option val :=
match v with
      | Vptr b ofs =>
          if ident_eq id1 id2 then Some v else None
      | _ => None
      end.

Definition sem_cast_union id1 id2 (v : val) : option val :=
match v with
      | Vptr b ofs =>
          if ident_eq id1 id2 then Some v else None
      | _ => None
      end.

Definition sem_cast_f2f (v: val) : option val :=
      match v with
      | Vfloat f => Some (Vfloat f)
      | _ => None
      end.

Definition sem_cast_s2s (v: val) : option val :=
      match v with
      | Vsingle f => Some (Vsingle f)
      | _ => None
      end.

Definition sem_cast_s2f (v: val) : option val :=
      match v with
      | Vsingle f => Some (Vfloat (Float.of_single f))
      | _ => None
      end.

 Definition sem_cast_f2s (v: val) : option val :=
      match v with
      | Vfloat f => Some (Vsingle (Float.to_single f))
      | _ => None
      end.

 Definition sem_cast_i2f si1 (v: val) : option val :=
      match v with
      | Vint i => Some (Vfloat (Cop.cast_int_float si1 i))
      | _ => None
      end.

 Definition sem_cast_i2s si1 (v: val) : option val :=
      match v with
      | Vint i => Some (Vsingle (Cop.cast_int_single si1 i))
      | _ => None
      end.

 Definition sem_cast_f2i sz2 si2 (v: val) : option val :=
      match v with
      | Vfloat f =>
          match Cop.cast_float_int si2 f with
          | Some i => Some (Vint (Cop.cast_int_int sz2 si2 i))
          | None => None
          end
      | _ => None
      end.

Definition sem_cast_s2i sz2 si2 (v: val) : option val :=
      match v with
      | Vsingle f =>
          match Cop.cast_single_int si2 f with
          | Some i => Some (Vint (Cop.cast_int_int sz2 si2 i))
          | None => None
          end
      | _ => None
      end.

Definition sem_cast_f2bool (v: val) : option val :=
      match v with
      | Vfloat f =>
          Some(Vint(if Float.cmp Ceq f Float.zero then Int.zero else Int.one))
      | _ => None
      end.

Definition sem_cast_s2bool (v: val) : option val :=
      match v with
      | Vsingle f =>
          Some(Vint(if Float32.cmp Ceq f Float32.zero then Int.zero else Int.one))
      | _ => None
      end.

 Definition sem_cast_l2f si1 (v: val) : option val :=
      match v with
      | Vlong i => Some (Vfloat (Cop.cast_long_float si1 i))
      | _ => None
      end.

 Definition sem_cast_l2s si1 (v: val) : option val :=
      match v with
      | Vlong i => Some (Vsingle (Cop.cast_long_single si1 i))
      | _ => None
      end.

 Definition sem_cast_f2l si2 (v: val) : option val :=
      match v with
      | Vfloat f =>
          match Cop.cast_float_long si2 f with
          | Some i => Some (Vlong i)
          | None => None
          end
      | _ => None
      end.

Definition sem_cast_s2l si2 (v: val) : option val :=
      match v with
      | Vsingle f =>
          match Cop.cast_single_long si2 f with
          | Some i => Some (Vlong i)
          | None => None
          end
      | _ => None
      end.

Definition classify_cast (tfrom tto: type) : classify_cast_cases :=
  match tto, tfrom with
  
  | Tvoid, _ => cast_case_void
  
  | Tint IBool _ _, Tint _ _ _ => cast_case_i2bool
  | Tint IBool _ _, Tlong _ _ => cast_case_l2bool
  | Tint IBool _ _, Tfloat F64 _ => cast_case_f2bool
  | Tint IBool _ _, Tfloat F32 _ => cast_case_s2bool
  | Tint IBool _ _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => 
      if eqb_type tfrom int_or_ptr_type
      then cast_case_default
      else if Archi.ptr64 then cast_case_l2bool else cast_case_i2bool
  
  | Tint sz2 si2 _, Tint _ _ _ =>
      if Archi.ptr64 then cast_case_i2i sz2 si2
      else if intsize_eq sz2 I32 then cast_case_pointer
      else cast_case_i2i sz2 si2
  | Tint sz2 si2 _, Tlong _ _ => cast_case_l2i sz2 si2
  | Tint sz2 si2 _, Tfloat F64 _ => cast_case_f2i sz2 si2
  | Tint sz2 si2 _, Tfloat F32 _ => cast_case_s2i sz2 si2
  | Tint sz2 si2 _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) =>
      if Archi.ptr64 then cast_case_l2i sz2 si2
      else if intsize_eq sz2 I32 then cast_case_pointer
      else cast_case_i2i sz2 si2
  
  | Tlong _ _, Tlong _ _ =>
      if Archi.ptr64 then cast_case_pointer else cast_case_l2l
  | Tlong _ _, Tint sz1 si1 _ => cast_case_i2l si1
  | Tlong si2 _, Tfloat F64 _ => cast_case_f2l si2
  | Tlong si2 _, Tfloat F32 _ => cast_case_s2l si2
  | Tlong si2 _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) =>
      if Archi.ptr64 
      then cast_case_pointer 
      else cast_case_i2l si2
  
  | Tfloat F64 _, Tint sz1 si1 _ => cast_case_i2f si1
  | Tfloat F32 _, Tint sz1 si1 _ => cast_case_i2s si1
  | Tfloat F64 _, Tlong si1 _ => cast_case_l2f si1
  | Tfloat F32 _, Tlong si1 _ => cast_case_l2s si1
  | Tfloat F64 _, Tfloat F64 _ => cast_case_f2f
  | Tfloat F32 _, Tfloat F32 _ => cast_case_s2s
  | Tfloat F64 _, Tfloat F32 _ => cast_case_s2f
  | Tfloat F32 _, Tfloat F64 _ => cast_case_f2s
  
  | Tpointer _ _, Tint _ _ _ =>
      if eqb_type tto int_or_ptr_type 
      then if Archi.ptr64
           then cast_case_default
           else cast_case_pointer
      else if Archi.ptr64
           then cast_case_i2l Unsigned 
           else cast_case_pointer
  | Tpointer _ _, Tlong _ _ =>
      if eqb_type tto int_or_ptr_type 
      then if Archi.ptr64
           then cast_case_pointer
           else cast_case_default
      else if Archi.ptr64
           then cast_case_pointer
           else cast_case_l2i I32 Unsigned
  | Tpointer _ _, (Tpointer _ _ | Tarray _ _ _ | Tfunction _ _ _) => 
       cast_case_pointer
  
  | Tstruct id2 _, Tstruct id1 _ => cast_case_struct id1 id2
  | Tunion id2 _, Tunion id1 _ => cast_case_union id1 id2
  
  | _, _ => cast_case_default
  end.

Arguments classify_cast tfrom tto / .

Definition sem_cast (t1 t2: type): val -> option val := 
  match classify_cast t1 t2 with
  | cast_case_pointer => sem_cast_pointer
  | Cop.cast_case_i2i sz2 si2 => sem_cast_i2i sz2 si2
  | Cop.cast_case_f2f => sem_cast_f2f
  | Cop.cast_case_s2s => sem_cast_s2s
  | Cop.cast_case_s2f => sem_cast_s2f
  | Cop.cast_case_f2s => sem_cast_f2s
  | Cop.cast_case_i2f si1 => sem_cast_i2f si1
  | Cop.cast_case_i2s si1 => sem_cast_i2s si1
  | Cop.cast_case_f2i sz2 si2 => sem_cast_f2i sz2 si2
  | Cop.cast_case_s2i sz2 si2 => sem_cast_s2i sz2 si2
  | Cop.cast_case_i2bool => sem_cast_i2bool
  | Cop.cast_case_l2bool => sem_cast_l2bool
  | Cop.cast_case_f2bool => sem_cast_f2bool
  | Cop.cast_case_s2bool => sem_cast_s2bool
  | Cop.cast_case_l2l => sem_cast_l2l
  | Cop.cast_case_i2l si => sem_cast_i2l si
  | Cop.cast_case_l2i sz si => sem_cast_l2i sz si
  | Cop.cast_case_l2f si1 => sem_cast_l2f si1
  | Cop.cast_case_l2s si1 => sem_cast_l2s si1
  | Cop.cast_case_f2l si2 => sem_cast_f2l si2
  | Cop.cast_case_s2l si2 => sem_cast_s2l si2
  | Cop.cast_case_struct id1 id2 => sem_cast_struct id1 id2
  | Cop.cast_case_union id1 id2 => sem_cast_union id1 id2
  | Cop.cast_case_void =>
      fun v => Some v
  | Cop.cast_case_default =>
      fun v => None
 end.

Definition sem_notbool (t: type) (v: val) : option val :=
  option_map (fun b => Val.of_bool (negb b)) (Cop2.bool_val t v).

Definition sem_neg_i (v: val) : option val :=
      match v with
      | Vint n => Some (Vint (Int.neg n))
      | _ => None
      end.

Definition sem_neg_f (v: val) : option val :=
       match v with
      | Vfloat f => Some (Vfloat (Float.neg f))
      | _ => None
      end.

Definition sem_neg_s (v: val) : option val :=
       match v with
      | Vsingle f => Some (Vsingle (Float32.neg f))
      | _ => None
      end.

Definition sem_neg_l (v: val) : option val :=
      match v with
      | Vlong n => Some (Vlong (Int64.neg n))
      | _ => None
      end.

Definition sem_neg (t: type) : val -> option val :=
  match Cop.classify_neg t with
  | Cop.neg_case_i sg => sem_neg_i
  | Cop.neg_case_f => sem_neg_f
  | Cop.neg_case_s => sem_neg_s
  | Cop.neg_case_l sg => sem_neg_l
  | neg_default => fun v => None
  end.

Definition sem_absfloat_i sg (v: val) : option val :=
  match v with
      | Vint n => Some (Vfloat (Float.abs (Cop.cast_int_float sg n)))
      | _ => None
      end.

Definition sem_absfloat_f (v: val) :=
     match v with
      | Vfloat f => Some (Vfloat (Float.abs f))
      | _ => None
      end.

Definition sem_absfloat_s (v: val) :=
      match v with
      | Vsingle f => Some (Vfloat (Float.abs (Float.of_single f)))
      | _ => None
      end.

Definition sem_absfloat_l sg v :=
      match v with
      | Vlong n => Some (Vfloat (Float.abs (Cop.cast_long_float sg n)))
      | _ => None
      end.

Definition sem_absfloat (ty: type)  : val -> option val :=
  match Cop.classify_neg ty with
  | Cop.neg_case_i sg => sem_absfloat_i sg
  | Cop.neg_case_f => sem_absfloat_f
  | Cop.neg_case_s => sem_absfloat_s
   | Cop.neg_case_l sg => sem_absfloat_l sg
  | neg_default => fun v => None
  end.

Definition sem_notint_i (v:val) : option val :=
      match v with
      | Vint n => Some (Vint (Int.not n))
      | _ => None
      end.

Definition sem_notint_l (v:val) : option val :=
      match v with
      | Vlong n => Some (Vlong (Int64.not n))
      | _ => None
      end.

Definition sem_notint (t: type)  : val -> option val :=
  match Cop.classify_notint t with
  | Cop.notint_case_i sg => sem_notint_i
  | Cop.notint_case_l sg => sem_notint_l
  | notint_default => fun v => None
  end.

Definition both_int (f: int -> int -> option val) (cast1 cast2: val -> option val) (v1 v2: val) :=
 match cast1 v1, cast2 v2 with Some (Vint v1'), Some (Vint v2') => f v1' v2' | _, _ => None end.

Definition both_long (f: int64 -> int64 -> option val) (cast1 cast2: val -> option val) (v1 v2: val) :=
 match cast1 v1, cast2 v2 with Some (Vlong v1'), Some (Vlong v2') => f v1' v2' | _, _ => None end.

Definition both_float (f: float -> float -> option val) (cast1 cast2: val -> option val) (v1 v2: val) :=
 match cast1 v1, cast2 v2 with Some (Vfloat v1'), Some (Vfloat v2') => f v1' v2' | _, _ => None end.

Definition both_single (f: float32 -> float32 -> option val) (cast1 cast2: val -> option val) (v1 v2: val) :=
 match cast1 v1, cast2 v2 with Some (Vsingle v1'), Some (Vsingle v2') => f v1' v2' | _, _ => None end.

Definition sem_binarith
    (sem_int: signedness -> int -> int -> option val)
    (sem_long: signedness -> int64 -> int64 -> option val)
    (sem_float: float -> float -> option val)
    (sem_single: float32 -> float32 -> option val)
    (t1: type) (t2: type)
   : forall (v1: val) (v2: val), option val := 
  let c := Cop.classify_binarith t1 t2 in
  let t := Cop.binarith_type c in
  match c with
  | Cop.bin_case_i sg => both_int (sem_int sg) (sem_cast t1 t) (sem_cast t2 t)
  | Cop.bin_case_f => both_float (sem_float) (sem_cast t1 t) (sem_cast t2 t)
  | Cop.bin_case_s => both_single (sem_single) (sem_cast t1 t) (sem_cast t2 t)
  | Cop.bin_case_l sg => both_long (sem_long sg) (sem_cast t1 t) (sem_cast t2 t)
  | bin_default => fun _ _ => None
  end.

Definition sem_add_ptr_int {CS: compspecs} ty si v1 v2 :=
 Cop.sem_add_ptr_int cenv_cs ty si v1 v2.

Definition sem_add_int_ptr {CS: compspecs} ty si v1 v2 :=
 Cop.sem_add_ptr_int cenv_cs ty si v2 v1.

Definition sem_add_ptr_long {CS: compspecs} ty v1 v2 :=
 Cop.sem_add_ptr_long cenv_cs ty v1 v2.

Definition sem_add_long_ptr {CS: compspecs} ty v1 v2 :=
 Cop.sem_add_ptr_long cenv_cs ty v2 v1.

Definition sem_add {CS: compspecs} (t1:type) (t2:type):  val->val->option val :=
  match classify_add t1 t2 with
  | add_case_pi ty si =>             
      sem_add_ptr_int ty si
  | add_case_pl ty =>                
      sem_add_ptr_long ty
  | add_case_ip si ty =>             
      sem_add_int_ptr ty si
  | add_case_lp ty =>                
      sem_add_long_ptr ty
  | add_default =>
      sem_binarith
        (fun sg n1 n2 => Some(Vint(Int.add n1 n2)))
        (fun sg n1 n2 => Some(Vlong(Int64.add n1 n2)))
        (fun n1 n2 => Some(Vfloat(Float.add n1 n2)))
        (fun n1 n2 => Some(Vsingle(Float32.add n1 n2)))
        t1 t2
  end.

Definition sem_sub_pi {CS: compspecs} (ty:type) (si: signedness) (v1 v2 : val) : option val :=
      match v1, v2 with
      | Vptr b1 ofs1, Vint n2 =>
          let n2 := ptrofs_of_int si n2 in
          Some (Vptr b1 (Ptrofs.sub ofs1 (Ptrofs.mul (Ptrofs.repr (sizeof ty)) n2)))
      | Vint n1, Vint n2 =>
          if Archi.ptr64 then None else Some (Vint (Int.sub n1 (Int.mul (Int.repr (sizeof ty)) n2)))
      | Vlong n1, Vint n2 =>
          let n2 := cast_int_long si n2 in
          if Archi.ptr64 then Some (Vlong (Int64.sub n1 (Int64.mul (Int64.repr (sizeof ty)) n2))) else None
      | _,  _ => None
      end.

Definition sem_sub_pl {CS: compspecs} (ty:type) (v1 v2 : val) : option val := 
      match v1, v2 with
      | Vptr b1 ofs1, Vlong n2 =>
          let n2 := Ptrofs.of_int64 n2 in
          Some (Vptr b1 (Ptrofs.sub ofs1 (Ptrofs.mul (Ptrofs.repr (sizeof ty)) n2)))
      | Vint n1, Vlong n2 =>
          let n2 := Int.repr (Int64.unsigned n2) in
          if Archi.ptr64 then None else Some (Vint (Int.sub n1 (Int.mul (Int.repr (sizeof ty)) n2)))
      | Vlong n1, Vlong n2 =>
          if Archi.ptr64 then Some (Vlong (Int64.sub n1 (Int64.mul (Int64.repr (sizeof ty)) n2))) else None
      | _,  _ => None
      end.

Definition sem_sub_pp {CS: compspecs} (ty:type) (v1 v2 : val) : option val :=
      match v1,v2 with
      | Vptr b1 ofs1, Vptr b2 ofs2 =>
          if eq_block b1 b2 then
            let sz := sizeof ty in
            if zlt 0 sz && zle sz Ptrofs.max_signed
            then Some (Vptrofs (Ptrofs.divs (Ptrofs.sub ofs1 ofs2) (Ptrofs.repr sz)))
            else None
          else None
      | _, _ => None
      end.

Definition sem_sub_default (t1 t2:type) (v1 v2 : val) : option val :=
 sem_binarith
        (fun sg n1 n2 => Some(Vint(Int.sub n1 n2)))
        (fun sg n1 n2 => Some(Vlong(Int64.sub n1 n2)))
        (fun n1 n2 => Some(Vfloat(Float.sub n1 n2)))
        (fun n1 n2 => Some(Vsingle(Float32.sub n1 n2)))
        t1 t2 v1 v2.

Definition sem_sub {CS: compspecs} (t1:type) (t2:type) : val -> val -> option val :=
  match Cop.classify_sub t1 t2 with
  | Cop.sub_case_pi ty si=> sem_sub_pi  ty si  
  | Cop.sub_case_pl ty => sem_sub_pl  ty  
  | Cop.sub_case_pp ty => sem_sub_pp ty       
  | sub_default => sem_sub_default t1 t2
  end.

Definition sem_mul (t1:type) (t2:type) (v1:val)  (v2: val)  : option val :=
  sem_binarith
    (fun sg n1 n2 => Some(Vint(Int.mul n1 n2)))
    (fun sg n1 n2 => Some(Vlong(Int64.mul n1 n2)))
    (fun n1 n2 => Some(Vfloat(Float.mul n1 n2)))
    (fun n1 n2 => Some(Vsingle(Float32.mul n1 n2)))
    t1 t2 v1 v2.

Definition sem_div (t1:type) (t2:type) (v1:val)  (v2: val) : option val :=
  sem_binarith
    (fun sg n1 n2 => Some(Vint (match sg with | Signed => Int.divs | Unsigned => Int.divu end n1 n2)))
    (fun sg n1 n2 => Some(Vlong (match sg with | Signed => Int64.divs | Unsigned => Int64.divu end n1 n2)))
    (fun n1 n2 => Some(Vfloat(Float.div n1 n2)))
    (fun n1 n2 => Some(Vsingle(Float32.div n1 n2)))
    t1 t2 v1 v2.

Definition sem_mod (t1:type) (t2:type) (v1:val)  (v2: val) : option val :=
  sem_binarith
    (fun sg n1 n2 => Some(Vint (match sg with | Signed => Int.mods | Unsigned => Int.modu end n1 n2)))
    (fun sg n1 n2 => Some(Vlong (match sg with | Signed => Int64.mods | Unsigned => Int64.modu end n1 n2)))
    (fun n1 n2 => None)
    (fun n1 n2 => None)
    t1 t2 v1 v2.

Definition sem_and (t1:type) (t2:type) (v1:val) (v2: val) : option val :=
  sem_binarith
    (fun sg n1 n2 => Some(Vint(Int.and n1 n2)))
    (fun sg n1 n2 => Some(Vlong(Int64.and n1 n2)))
    (fun n1 n2 => None)
    (fun n1 n2 => None)
    t1 t2 v1 v2.

Definition sem_or (t1:type) (t2:type) (v1:val)  (v2: val) : option val :=
  sem_binarith
    (fun sg n1 n2 => Some(Vint(Int.or n1 n2)))
    (fun sg n1 n2 => Some(Vlong(Int64.or n1 n2)))
    (fun n1 n2 => None)
    (fun n1 n2 => None)
    t1 t2 v1 v2.

Definition sem_xor (t1:type) (t2:type) (v1:val)  (v2: val) : option val :=
  sem_binarith
    (fun sg n1 n2 => Some(Vint(Int.xor n1 n2)))
    (fun sg n1 n2 => Some(Vlong(Int64.xor n1 n2)))
    (fun n1 n2 => None)
    (fun n1 n2 => None)
    t1 t2 v1 v2.

Definition sem_shift_ii sem_int (sg:signedness) v1 v2 : option val :=
      match v1, v2 with
      | Vint n1, Vint n2 =>
           Some(Vint(sem_int sg n1 n2)) 
      | _, _ => None
      end.

Definition sem_shift_il sem_int (sg:signedness) v1 v2 : option val :=
match v1, v2 with
      | Vint n1, Vlong n2 =>
           Some(Vint(sem_int sg n1 (Int64.loword n2))) 
      | _, _ => None
      end.

Definition sem_shift_li sem_long (sg:signedness) v1 v2 : option val :=
match v1, v2 with
      | Vlong n1, Vint n2 =>
           Some(Vlong(sem_long sg n1 (Int64.repr (Int.unsigned n2)))) 
      | _, _ => None
      end.

Definition sem_shift_ll sem_long (sg:signedness) v1 v2 : option val :=
 match v1, v2 with
      | Vlong n1, Vlong n2 =>
           Some(Vlong(sem_long sg n1 n2)) 
      | _, _ => None
      end.

Definition sem_shift
    (t1: type) (t2: type) (sem_int: signedness -> int -> int -> int)
    (sem_long: signedness -> int64 -> int64 -> int64) : val -> val -> option val :=
  match Cop.classify_shift t1 t2 with
  | Cop.shift_case_ii sg => sem_shift_ii sem_int sg
  | Cop.shift_case_il sg => sem_shift_il sem_int sg
  | Cop.shift_case_li sg => sem_shift_li sem_long sg
  | Cop.shift_case_ll sg => sem_shift_ll sem_long sg
  | shift_default => fun v1 v2 => None
  end.

Definition sem_shl (t1:type) (t2:type) (v1:val) (v2: val)  : option val :=
  sem_shift  t1 t2
    (fun sg n1 n2 => Int.shl n1 n2)
    (fun sg n1 n2 => Int64.shl n1 n2)
    v1 v2.

Definition sem_shr (t1:type) (t2:type) (v1:val) (v2: val)  : option val :=
  sem_shift  t1 t2
    (fun sg n1 n2 => match sg with Signed => Int.shr n1 n2 | Unsigned => Int.shru n1 n2 end)
    (fun sg n1 n2 => match sg with Signed => Int64.shr n1 n2 | Unsigned => Int64.shru n1 n2 end)
    v1 v2.

Definition true2 (b : block) (i : Z) := true.

Definition sem_cmp_pp c v1 v2 :=
  option_map Val.of_bool
   (if Archi.ptr64
    then Val.cmplu_bool true2 c v1 v2
    else Val.cmpu_bool true2 c v1 v2).

Definition sem_cmp_pi si c v1 v2 :=
      match v2 with
      | Vint n2 => sem_cmp_pp c v1 (Vptrofs (ptrofs_of_int si n2))
      | Vptr _ _ => if Archi.ptr64 then None else sem_cmp_pp c v1 v2
      | _ => None
      end.

Definition sem_cmp_ip si c v1 v2 :=
      match v1 with
      | Vint n1 => sem_cmp_pp c (Vptrofs (ptrofs_of_int si n1)) v2
      | Vptr _ _ => if Archi.ptr64 then None else sem_cmp_pp c v1 v2
      | _ => None
      end.

Definition sem_cmp_pl c v1 v2 :=
      match v2 with
      | Vlong n2 => sem_cmp_pp c v1 (Vptrofs (Ptrofs.of_int64 n2))
      | Vptr _ _ => if Archi.ptr64 then sem_cmp_pp c v1 v2 else None
      | _ => None
      end.

Definition sem_cmp_lp c v1 v2 := 
      match v1 with
      | Vlong n1 => sem_cmp_pp c (Vptrofs (Ptrofs.of_int64 n1)) v2
      | Vptr _ _ => if Archi.ptr64 then sem_cmp_pp c v1 v2 else None
      | _ => None
      end.

Definition sem_cmp_default c t1 t2 :=
 sem_binarith
        (fun sg n1 n2 =>
            Some(Val.of_bool(match sg with Signed => Int.cmp c n1 n2 | Unsigned => Int.cmpu c n1 n2 end)))
        (fun sg n1 n2 =>
            Some(Val.of_bool(match sg with Signed => Int64.cmp c n1 n2 | Unsigned => Int64.cmpu c n1 n2 end)))
        (fun n1 n2 =>
            Some(Val.of_bool(Float.cmp c n1 n2)))
        (fun n1 n2 =>
            Some(Val.of_bool(Float32.cmp c n1 n2)))
        t1 t2 .

Definition sem_cmp (c:comparison) (t1: type) (t2: type) : val -> val ->  option val :=
  match Cop.classify_cmp t1 t2 with
  | Cop.cmp_case_pp => 
     if orb (eqb_type t1 int_or_ptr_type) (eqb_type t2 int_or_ptr_type) 
            then (fun _ _ => None)
     else sem_cmp_pp c
  | Cop.cmp_case_pi si => 
     if eqb_type t1 int_or_ptr_type
            then (fun _ _ => None)
     else sem_cmp_pi si c
  | Cop.cmp_case_ip si => 
     if eqb_type t2 int_or_ptr_type
            then (fun _ _ => None)
     else sem_cmp_ip si c
  | Cop.cmp_case_pl => 
     if eqb_type t1 int_or_ptr_type
            then (fun _ _ => None)
     else sem_cmp_pl c
  | Cop.cmp_case_lp => 
     if eqb_type t2 int_or_ptr_type
            then (fun _ _ => None)
     else sem_cmp_lp c
  | Cop.cmp_default => sem_cmp_default c t1 t2
  end.

Definition sem_unary_operation
            (op: Cop.unary_operation) (ty: type) (v: val): option val :=
  match op with
  | Cop.Onotbool => sem_notbool ty v
  | Cop.Onotint => sem_notint ty v
  | Cop.Oneg => sem_neg ty v
  | Cop.Oabsfloat => sem_absfloat ty v
  end.

Definition sem_binary_operation'
    {CS: compspecs} (op: Cop.binary_operation)
    (t1:type) (t2: type) : val -> val -> option val :=
  match op with
  | Cop.Oadd => sem_add t1 t2
  | Cop.Osub => sem_sub t1 t2
  | Cop.Omul => sem_mul t1 t2
  | Cop.Omod => sem_mod t1 t2
  | Cop.Odiv => sem_div t1 t2
  | Cop.Oand => sem_and t1 t2
  | Cop.Oor  => sem_or t1 t2
  | Cop.Oxor  => sem_xor t1 t2
  | Cop.Oshl => sem_shl t1 t2
  | Cop.Oshr  => sem_shr t1 t2
  | Cop.Oeq => sem_cmp Ceq t1 t2
  | Cop.One => sem_cmp Cne t1 t2
  | Cop.Olt => sem_cmp Clt t1 t2
  | Cop.Ogt => sem_cmp Cgt t1 t2
  | Cop.Ole => sem_cmp Cle t1 t2
  | Cop.Oge => sem_cmp Cge t1 t2
  end.

Definition sem_incrdecr {CS: compspecs} (id: Cop.incr_or_decr) (ty: type)  (valid_pointer : block -> Z -> bool)  (v: val)  :=
  match id with
  | Cop.Incr => sem_add ty type_int32s v (Vint Int.one)
  | Decr => sem_sub ty type_int32s v (Vint Int.one)
  end.

Arguments Cop.classify_cast tfrom tto / .
Arguments Cop.classify_bool ty / .
Arguments Cop.classify_neg ty / .
Arguments Cop.classify_notint ty / .
Arguments Cop.classify_binarith ty1 ty2 / .
Arguments Cop.classify_add ty1 ty2 / .
Arguments Cop.classify_sub ty1 ty2 / .
Arguments Cop.classify_shift ty1 ty2 / .
Arguments Cop.classify_cmp ty1 ty2 / .
Arguments Cop.classify_fun ty / .
Arguments sem_cast t1 t2 / v : simpl nomatch.

Arguments sem_notbool t / v  : simpl nomatch.
Arguments sem_neg t / v : simpl nomatch.
Arguments sem_notint t / v : simpl nomatch.
Arguments sem_add CS t1 t2 / v1 v2 : simpl nomatch.
Arguments sem_sub CS t1 t2 / v1 v2 : simpl nomatch.
Arguments sem_shift t1 t2 _ _  / v1 v2 : simpl nomatch.
Arguments sem_shl t1 t2  / v1 v2 : simpl nomatch.
Arguments sem_shr t1 t2  / v1 v2 : simpl nomatch.
Arguments sem_cmp c t1 t2 / v1 v2 : simpl nomatch.
Arguments sem_unary_operation op ty / v : simpl nomatch.
Arguments sem_binary_operation' CS op t1 t2 / v1 v2 : simpl nomatch.

Arguments sem_cmp_default c t1 t2 / v1 v2 : simpl nomatch.
Arguments sem_binarith sem_int sem_long sem_float sem_single t1 t2 / v1 v2 : simpl nomatch.
Arguments Cop.sem_cast v !t1 !t2 m / . *)

Import Cop.



Lemma eval_expr_any:

  forall {CS: compspecs} rho e v,

    eval_expr e any_environ = v ->

    v <> Vundef ->

    eval_expr e rho = v

with eval_lvalue_any:

  forall {CS: compspecs} rho e v,

    eval_lvalue e any_environ = v ->

    v <> Vundef ->

    eval_lvalue e rho = v.

Proof.

{

 clear eval_expr_any.

 intros  ? ?.

 induction e; simpl; intros; subst; unfold_lift; try reflexivity;

 unfold_lift in H0;

 cbv delta [eval_unop eval_binop force_val2 force_val1 deref_noload always

                 Datatypes.id deref_noload force_ptr force_val

                  eval_var eval_id

                 ]

       in H0|-*; simpl in *;

 repeat match goal with

 | _ => reflexivity

 | |- match access_mode ?t with

                              | _ => _ end _ = _ =>

   destruct (access_mode t); simpl in *

 | |- context [match eval_expr ?e any_environ with _ => _ end] =>

          destruct (eval_expr e any_environ) eqn:?; try congruence;

          rewrite (IHe _ (eq_refl _)); auto

 | _ => try congruence

 end.

*

  apply IHe; auto.

*

  apply eval_lvalue_any; auto.

* destruct (eval_expr e any_environ) eqn:?; simpl in *;

  [elimtype False; apply H0; clear;

   try destruct u;

   destruct (typeof e) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   try reflexivity

  | rewrite (IHe _ (eq_refl _)) by congruence; auto ..

  ].

  simpl. unfold Cop2.bool_val; simple_if_tac; reflexivity.

*

  destruct (eval_expr e1 any_environ) eqn:?; simpl in *;

  [ elimtype False; apply H0; clear

  | rewrite (IHe1 _ (eq_refl _)) by congruence; auto .. ];

try solve [

  destruct b;

   destruct (typeof e1) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   destruct (typeof e2) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   try reflexivity;

   cbv beta iota delta [

    sem_binary_operation' Clight_Cop2.sem_cmp classify_cmp typeconv

    remove_attributes change_attributes 

   ];

  repeat match goal with |- context [eqb_type ?A ?B] =>

  let J := fresh "J" in 

    destruct (eqb_type A B) eqn:J;

      [apply eqb_type_true in J; try solve [inv J] | apply eqb_type_false in J]

  end;

  try reflexivity;

  destruct (eval_expr e2 any_environ); reflexivity].

all: destruct (eval_expr e2 any_environ) eqn:?; simpl in *;

  [ elimtype False; apply H0; clear

  | rewrite (IHe2 _ (eq_refl _)) by congruence; auto .. ];

   destruct b;

   destruct (typeof e1) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   destruct (typeof e2) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   try reflexivity;

   cbv beta iota delta [

    sem_binary_operation' Clight_Cop2.sem_cmp classify_cmp typeconv

    remove_attributes change_attributes 

   ];

  repeat match goal with |- context [eqb_type ?A ?B] =>

  let J := fresh "J" in 

    destruct (eqb_type A B) eqn:J;

      [apply eqb_type_true in J; try solve [inv J] | apply eqb_type_false in J]

  end;

   reflexivity.

*

   destruct t as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   destruct (typeof e) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

  (destruct (eval_expr e any_environ) eqn:?; simpl in *;

  [elimtype False; apply H0; clear

  | try rewrite (IHe _ (eq_refl _)) by congruence;

     auto .. ]); auto;

  try (unfold Clight_Cop2.sem_cast, Clight_Cop2.classify_cast; repeat simple_if_tac; reflexivity).

* destruct (typeof e) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

   simpl in *; unfold always; auto.

   destruct (cenv_cs ! i0) as [co |]; auto.

   destruct (field_offset cenv_cs i (co_members co)); auto.

   f_equal.

   apply eval_lvalue_any; auto.

   intro. rewrite H in H0. apply H0; reflexivity.

   unfold force_ptr in *.

   destruct (eval_lvalue e any_environ) eqn:?; simpl in *;

   destruct (cenv_cs ! i0);

   try congruence.

   rewrite (eval_lvalue_any _ _ _ _ Heqv); auto.

}

{ clear eval_lvalue_any.

 intro.

 induction e; simpl; intros; subst; unfold_lift; try reflexivity;

 unfold_lift in H0.

*

 unfold eval_var in *;  simpl in *; congruence.

*

  apply eval_expr_any; auto.

  * destruct (typeof e) as [ | [ | | | ] [ | ] | [ | ] | [ | ] | | | | | ];

    simpl in *; unfold always; auto.

    destruct (cenv_cs ! i0) as [co |]; auto.

    destruct (field_offset cenv_cs i (co_members co)); auto.

    f_equal.

    apply IHe; auto.

    intro. rewrite H in H0. apply H0; reflexivity.

    unfold force_ptr in *.

    destruct (eval_lvalue e any_environ) eqn:?; simpl in *;

    destruct (cenv_cs ! i0);

    try congruence.

    rewrite (IHe _ (eq_refl _)); auto.

}

Qed.



Lemma denote_tc_assert_ilt':

  forall {CS: compspecs} e j, denote_tc_assert (tc_ilt e j) = denote_tc_assert (tc_ilt' e j).

Proof.

  intros.

extensionality rho.

 unfold tc_ilt; simpl.

 unfold_lift.

 destruct (eval_expr e any_environ) eqn:?; simpl; auto.

 apply (eval_expr_any rho) in Heqv; try congruence.

 rewrite Heqv; simpl.

 destruct (Int.ltu i j) eqn:?; simpl; 

 unfold_lift; simpl; rewrite ?Heqv; simpl; auto.

 apply pred_ext; intuition.

 apply Int.ltu_inv in Heqb.

 intros  ? ?. simpl. destruct Heqb. auto.

Qed.



Lemma denote_tc_assert_llt':

  forall {CS: compspecs} e j, denote_tc_assert (tc_llt e j) = denote_tc_assert (tc_llt' e j).

Proof.

  intros.

extensionality rho.

 unfold tc_llt; simpl.

 unfold_lift.

 destruct (eval_expr e any_environ) eqn:?; simpl; auto.

 apply (eval_expr_any rho) in Heqv; try congruence.

 rewrite Heqv; simpl.

 destruct (Int64.ltu i j) eqn:?; simpl; 

 unfold_lift; simpl; rewrite ?Heqv; simpl; auto.

 apply pred_ext; intuition.

 apply Int64.ltu_inv in Heqb.

 intros  ? ?. simpl. destruct Heqb. auto.

Qed.



Lemma tc_val_void:

  forall v, tc_val Tvoid v <-> False.

Proof.

destruct v; simpl; tauto.

Qed.



Definition denote_tc_assert' {CS: compspecs} (a: tc_assert) (rho: environ) : mpred.

pose (P := denote_tc_assert a rho).

unfold denote_tc_assert in P.

super_unfold_lift.

destruct a; apply P.

Defined.



Lemma denote_tc_assert'_eq{CS: compspecs}:

  denote_tc_assert' = denote_tc_assert.

Proof.

extensionality a rho.

destruct a; reflexivity.

Qed.



Lemma int_eq_true : forall x y,

true = Int.eq x y -> x = y.

Proof.

intros. assert (X := Int.eq_spec x y). rewrite <- H in X; congruence.

Qed.



Definition check_pp_int' e1 e2 op t e :=

  match op with

  | Cop.Oeq | Cop.One =>

      tc_andp'

        (tc_test_eq' e1 e2)

        (tc_bool (is_int_type t) (op_result_type e))

  | Cop.Ole | Cop.Olt | Cop.Oge | Cop.Ogt =>

      tc_andp'

        (tc_test_order' e1 e2)

        (tc_bool (is_int_type t) (op_result_type e))

| _ => tc_noproof

end.



Lemma tc_andp_TT2:  forall e, tc_andp e tc_TT = e.

Proof. intros; unfold tc_andp.  destruct e; reflexivity. Qed.



Lemma tc_andp_TT1:  forall e, tc_andp tc_TT e = e.

Proof. intros; unfold tc_andp; reflexivity. Qed.



Lemma or_False: forall x, (x \/ False) = x.

Proof.

intros; apply prop_ext; intuition.

Qed.



Lemma or_True: forall x, (x \/ True) = True.

Proof.

intros; apply prop_ext; intuition.

Qed.



Lemma True_or: forall x, (True \/ x) = True.

Proof.

intros; apply prop_ext; intuition.

Qed.



Lemma False_or: forall x, (False \/ x) = x.

Proof.

intros; apply prop_ext; intuition.

Qed.



Lemma tc_orp_sound : forall {CS: compspecs} a1 a2 rho m,

    denote_tc_assert (tc_orp a1 a2) rho m <->

    denote_tc_assert (tc_orp' a1 a2) rho m.

Proof.

intros.

 unfold tc_orp.

 destruct a1; simpl; unfold_lift;

 repeat first [rewrite False_or | rewrite True_or | rewrite or_False | rewrite or_True];

  try apply iff_refl;

  destruct a2; simpl in *; unfold_lift;

 repeat first [rewrite False_or | rewrite True_or | rewrite or_False | rewrite or_True];

  try apply iff_refl.

Qed.



Lemma denote_tc_assert_orp: forall {CS: compspecs} x y rho,

  denote_tc_assert (tc_orp x y) rho =

   orp (denote_tc_assert x rho) (denote_tc_assert y rho).

Proof.

 intros.

 apply pred_ext; intro m; rewrite tc_orp_sound; intro; assumption.

Qed.



Lemma is_true_true: is_true true = True.

Proof. apply prop_ext; intuition. Qed.

Lemma is_true_false: is_true false = False.

Proof. apply prop_ext; intuition. Qed.



Lemma denote_tc_assert_iszero: forall {CS: compspecs} e rho,

  denote_tc_assert (tc_iszero e) rho =

  match (eval_expr e rho) with

  | Vint i => prop (is_true (Int.eq i Int.zero))

  | Vlong i => prop (is_true (Int64.eq i Int64.zero))

   | _ => FF end.

Proof.

 intros.

 unfold tc_iszero.

 destruct (eval_expr e any_environ) eqn:?; simpl; auto;

 rewrite (eval_expr_any rho e _ Heqv) by congruence.

 destruct (Int.eq i Int.zero); reflexivity.

 destruct (Int64.eq i Int64.zero); reflexivity.

Qed.



Lemma denote_tc_assert_iszero': forall {CS: compspecs} e,

  denote_tc_assert (tc_iszero e) = denote_tc_assert (tc_iszero' e).

Proof.

intros.

extensionality rho.

rewrite denote_tc_assert_iszero.

reflexivity.

Qed.



Lemma denote_tc_assert_nonzero: forall {CS: compspecs} e rho,

  denote_tc_assert (tc_nonzero e) rho =

  match (eval_expr e rho) with

  | Vint i => prop (i <> Int.zero)

  | Vlong i =>prop (i <> Int64.zero)

  | _ => FF end.

Proof.

  intros.

  unfold tc_nonzero.

  destruct (eval_expr e any_environ) eqn:?; simpl; auto;

  try rewrite (eval_expr_any rho e _ Heqv) by congruence;

  unfold_lift.

  + destruct (Int.eq i Int.zero) eqn:?; simpl; unfold_lift; unfold denote_tc_nonzero; simpl;

         rewrite ?(eval_expr_any rho e _ Heqv) by congruence; auto.

         apply pred_ext; auto; intros ? ? ?; subst; inv Heqb.

  + destruct (Int64.eq i Int64.zero) eqn:?; simpl; unfold_lift; unfold denote_tc_nonzero; simpl;

         rewrite ?(eval_expr_any rho e _ Heqv) by congruence; auto.

         apply pred_ext; auto; intros ? ? ?; subst; inv Heqb.

Qed.



Lemma denote_tc_assert_nonzero': forall {CS: compspecs} e,

  denote_tc_assert (tc_nonzero e) = denote_tc_assert (tc_nonzero' e).

Proof.

intros.

extensionality rho.

rewrite denote_tc_assert_nonzero.

simpl.  unfold_lift. destruct (eval_expr e rho); simpl; auto.

Qed.



Lemma denote_tc_assert_nodivover: forall {CS: compspecs} e1 e2 rho,

  denote_tc_assert (tc_nodivover e1 e2) rho =

         match eval_expr e1 rho, eval_expr e2 rho with

          | Vint n1, Vint n2 => prop (~(n1 = Int.repr Int.min_signed /\ n2 = Int.mone))

          | Vlong n1, Vlong n2 => prop (~(n1 = Int64.repr Int64.min_signed /\ n2 = Int64.mone))

          | Vint n1, Vlong n2 => TT

          | Vlong n1, Vint n2 => prop (~ (n1 = Int64.repr Int64.min_signed  /\ n2 = Int.mone))

          | _ , _ => FF

        end.

Proof.

  intros.

  unfold tc_nodivover.

  destruct (eval_expr e1 any_environ) eqn:?;

  destruct (eval_expr e2 any_environ) eqn:?;

  simpl; auto;

    rewrite (eval_expr_any rho e1 _ Heqv) by congruence;

    rewrite (eval_expr_any rho e2 _ Heqv0) by congruence;

    auto.

 +

    destruct (negb (Int.eq i (Int.repr Int.min_signed) && Int.eq i0 Int.mone)) eqn:?.

    simpl; unfold_lift; apply pred_ext; auto; intros ? ? [? ?]; subst; inv Heqb.

    simpl; unfold_lift; 

    rewrite (eval_expr_any rho e1 _ Heqv) by congruence;

    rewrite (eval_expr_any rho e2 _ Heqv0) by congruence; reflexivity.

 +

    destruct (negb (Int64.eq i (Int64.repr Int64.min_signed) && Int.eq i0 Int.mone)) eqn:?.

    simpl; unfold_lift; apply pred_ext; auto; intros ? ? [? ?]; subst; inv Heqb.

    simpl; unfold_lift; 

    rewrite (eval_expr_any rho e1 _ Heqv) by congruence;

    rewrite (eval_expr_any rho e2 _ Heqv0) by congruence; reflexivity.

 +

    destruct (negb (Int64.eq i (Int64.repr Int64.min_signed) && Int64.eq i0 Int64.mone)) eqn:?.

    simpl; unfold_lift; apply pred_ext; auto; intros ? ? [? ?]; subst; inv Heqb.

    simpl; unfold_lift; 

    rewrite (eval_expr_any rho e1 _ Heqv) by congruence;

    rewrite (eval_expr_any rho e2 _ Heqv0) by congruence; reflexivity.

Qed.



Lemma denote_tc_assert_nodivover': forall {CS: compspecs} e1 e2,

  denote_tc_assert (tc_nodivover e1 e2) = denote_tc_assert (tc_nodivover' e1 e2).

Proof.

intros.

extensionality rho.

rewrite denote_tc_assert_nodivover; reflexivity.

Qed.



Lemma denote_tc_assert_andp'':

  forall {CS: compspecs} a b rho, denote_tc_assert (tc_andp' a b) rho =

            andp (denote_tc_assert a rho) (denote_tc_assert b rho).

Proof.

 intros. reflexivity. Qed.



Lemma denote_tc_assert_orp'':

  forall {CS: compspecs} a b rho, denote_tc_assert (tc_orp' a b) rho =

             orp (denote_tc_assert a rho) (denote_tc_assert b rho).

Proof.

 intros. reflexivity. Qed.



Lemma denote_tc_assert_andp':

  forall {CS: compspecs} a b, denote_tc_assert (tc_andp a b) =

                        denote_tc_assert (tc_andp' a b).

Proof. intros. extensionality rho. apply denote_tc_assert_andp. Qed.



Lemma denote_tc_assert_orp':

  forall {CS: compspecs} a b, denote_tc_assert (tc_orp a b) =

                        denote_tc_assert (tc_orp' a b).

Proof. intros. extensionality rho. apply denote_tc_assert_orp. Qed.



Lemma denote_tc_assert_test_eq':

  forall {CS: compspecs} a b,

    denote_tc_assert (tc_test_eq a b) =

    denote_tc_assert (tc_test_eq' a b).

Proof.

  intros; extensionality rho.

  unfold tc_test_eq.

  simpl; unfold_lift;  unfold denote_tc_test_eq.

 destruct (Val.eq (eval_expr a any_environ) Vundef);

   [rewrite e; reflexivity | ].

 rewrite <- (eval_expr_any rho _ _ (eq_refl _) n).

 destruct (Val.eq (eval_expr b any_environ) Vundef).

 rewrite e; destruct (eval_expr a rho) eqn:Ha; simpl; unfold_lift; rewrite Ha; reflexivity.

 rewrite <- (eval_expr_any rho _ _ (eq_refl _) n0).

 clear n n0.

 destruct (eval_expr a rho) eqn:Ha; simpl; unfold_lift; try rewrite Ha;

  try reflexivity;

 destruct (eval_expr b rho) eqn:Hb; simpl; unfold_lift; 

   rewrite ?Ha, ?Hb;

  try reflexivity.

*

  destruct Archi.ptr64 eqn:Hp; simpl; unfold_lift.

  +

  rewrite Ha,Hb; simpl; rewrite Hp; reflexivity.

  +

  pose proof (Int.eq_spec i Int.zero); destruct (Int.eq i Int.zero).

  pose proof (Int.eq_spec i0 Int.zero); destruct (Int.eq i0 Int.zero).

  simpl. rewrite !prop_true_andp by auto.

  unfold_lift. unfold TT. apply f_equal. apply prop_ext; intuition.

  simpl. unfold_lift. rewrite Ha,Hb. simpl. rewrite Hp. auto.

  simpl. unfold_lift. rewrite Ha,Hb. simpl. rewrite Hp. auto.

*

  destruct Archi.ptr64 eqn:Hp; simpl; unfold_lift.

  +

  pose proof (Int64.eq_spec i Int64.zero); destruct (Int64.eq i Int64.zero).

  pose proof (Int64.eq_spec i0 Int64.zero); destruct (Int64.eq i0 Int64.zero).

  simpl. rewrite !prop_true_andp by auto.

  unfold_lift. unfold TT. apply f_equal. apply prop_ext; intuition.

  simpl. unfold_lift. rewrite Ha,Hb. simpl. rewrite Hp. auto.

  simpl. unfold_lift. rewrite Ha,Hb. simpl. rewrite Hp. auto.

 +

  rewrite Ha,Hb; simpl; rewrite Hp; reflexivity.

Qed.



Lemma denote_tc_assert_test_order':

  forall {CS: compspecs} a b,

    denote_tc_assert (tc_test_order a b) =

    denote_tc_assert (tc_test_order' a b).

Proof.

  intros; extensionality rho.

  unfold tc_test_order.

  simpl; unfold_lift;  unfold denote_tc_test_order.

  destruct (eval_expr a rho) eqn:Ha;

  destruct (eval_expr a any_environ) eqn:Ha';

  simpl; unfold_lift;  unfold denote_tc_test_order;

  rewrite ?Ha, ?Ha'; simpl; auto;

  try solve [

    rewrite (eval_expr_any rho a _ Ha') in Ha by congruence;

    inv Ha];

  destruct (eval_expr b rho) eqn:Hb;

  destruct (eval_expr b any_environ) eqn:Hb';

  simpl; unfold_lift;  unfold denote_tc_test_eq;

  rewrite ?Ha, ?Ha', ?Hb, ?Hb'; simpl; auto;

  rewrite (eval_expr_any rho b _ Hb') in Hb by congruence; inv Hb;

  rewrite (eval_expr_any rho a _ Ha') in Ha by congruence; inv Ha.

*

  destruct Archi.ptr64 eqn:Hp.

 +

  simpl. unfold_lift.

  rewrite (eval_expr_any rho b _ Hb') by congruence;

  rewrite (eval_expr_any rho a _ Ha') by congruence.

  simpl. rewrite Hp. auto.

 +

  simpl. {

  destruct (Int.eq_dec i Int.zero).

   +

    subst. rewrite Int.eq_true.

    destruct (Int.eq_dec i1 Int.zero).

    - subst. rewrite Int.eq_true.

      simpl.

      rewrite !prop_true_andp by auto.

      super_unfold_lift.

      unfold TT. f_equal. apply prop_ext; intuition.

    - rewrite Int.eq_false by auto. simpl.

      simpl; unfold_lift;  unfold denote_tc_test_eq.

      rewrite (eval_expr_any rho a _ Ha')  by congruence.

      rewrite (eval_expr_any rho _ _ Hb')  by congruence.

      simpl. rewrite Hp. auto.

  + rewrite Int.eq_false by auto. simpl.

    simpl; unfold_lift;  unfold denote_tc_test_eq.

    rewrite (eval_expr_any rho a _ Ha')  by congruence.

    rewrite (eval_expr_any rho _ _ Hb')  by congruence.

    simpl. rewrite Hp.

    auto.

  }

*

  destruct Archi.ptr64 eqn:Hp.

 +

  simpl. {

  destruct (Int64.eq_dec i Int64.zero).

   +

    subst. rewrite Int64.eq_true.

    destruct (Int64.eq_dec i1 Int64.zero).

    - subst. rewrite Int64.eq_true.

      simpl.

      rewrite !prop_true_andp by auto.

      super_unfold_lift.

      unfold TT. f_equal. apply prop_ext; intuition.

    - rewrite Int64.eq_false by auto. simpl.

      simpl; unfold_lift;  unfold denote_tc_test_eq.

      rewrite (eval_expr_any rho a _ Ha')  by congruence.

      rewrite (eval_expr_any rho _ _ Hb')  by congruence.

      simpl. rewrite Hp.

      auto.

  + rewrite Int64.eq_false by auto. simpl.

    simpl; unfold_lift;  unfold denote_tc_test_eq.

    rewrite (eval_expr_any rho a _ Ha')  by congruence.

    rewrite (eval_expr_any rho _ _ Hb')  by congruence.

    simpl. rewrite Hp.

    auto.

  }

 +

  simpl. unfold_lift.

  rewrite (eval_expr_any rho b _ Hb') by congruence;

  rewrite (eval_expr_any rho a _ Ha') by congruence.

  simpl. rewrite Hp. auto.

Qed.



Hint Rewrite @denote_tc_assert_andp' @denote_tc_assert_andp''

    @denote_tc_assert_orp' @denote_tc_assert_orp''

    @denote_tc_assert_iszero' @denote_tc_assert_nonzero'

    @denote_tc_assert_nodivover' @denote_tc_assert_ilt' @denote_tc_assert_llt'

    @denote_tc_assert_test_eq' @denote_tc_assert_test_order'

     : dtca.



Ltac dtca := autorewrite with dtca; auto.



Definition stupid_typeconv ty :=

match ty with

| Tarray t _ a => Tpointer t a

| Tfunction _ _ _ => Tpointer ty noattr

| Tint _ _ _ => typeconv ty

| _ => ty

end.



Definition classify_sub' ty1 ty2 :=

match stupid_typeconv ty1 with

| Tpointer ty a =>

    match stupid_typeconv ty2 with

    | Tint _ si _ => sub_case_pi ty si

    | Tlong _ _ => sub_case_pl ty

    | Tpointer _ _ => sub_case_pp ty

    | _ => sub_default

    end

| _ => sub_default

end.



Lemma classify_sub_eq : classify_sub = classify_sub'.

Proof.

unfold classify_sub, classify_sub'; extensionality t1 t2.

destruct t1, t2; simpl; auto;

try destruct i,s; auto;

try destruct i0,s0; auto.

Qed.



Definition classify_cmp' ty1 ty2 :=

  match stupid_typeconv ty1, stupid_typeconv ty2 with

  | Tpointer _ _ , Tpointer _ _ => cmp_case_pp

  | Tpointer _ _ , Tint _ si _ => cmp_case_pi si

  | Tint _ si _, Tpointer _ _ => cmp_case_ip si

  | Tpointer _ _ , Tlong _ _ => cmp_case_pl

  | Tlong _ _ , Tpointer _ _ => cmp_case_lp

  | _, _ => cmp_default

  end.



Lemma classify_cmp_eq: classify_cmp = classify_cmp'.

Proof.

unfold classify_cmp, classify_cmp'; extensionality t1 t2.

destruct t1,t2; simpl; auto;

try destruct i,s; auto;

try destruct i0,s0; auto.

Qed.



Definition classify_add' ty1 ty2 :=

 match stupid_typeconv ty1 with

 | Tint _ si _ =>

    match stupid_typeconv ty2 with

    | Tpointer ty a => add_case_ip si ty

    |  _ => add_default

    end

| Tlong _ _ =>

    match stupid_typeconv ty2 with

    | Tpointer ty a => add_case_lp ty

    | _ => add_default

    end

| Tpointer ty a =>

    match stupid_typeconv ty2 with

    | Tint _ si _ => add_case_pi ty si

    | Tlong _ _ => add_case_pl ty

    | _ => add_default

    end

 | _ => add_default

end.



Lemma classify_add_eq:  classify_add = classify_add'.

Proof.

unfold classify_add; extensionality t1 t2.

destruct t1,t2; simpl; auto;

try destruct i,s; auto;

try destruct i0,s0; auto.

Qed.



Definition classify_shift' (ty1: type) (ty2: type) :=

  match stupid_typeconv ty1, stupid_typeconv ty2 with

  | Tint sz sg _, Tint _ _ _ => shift_case_ii

    match sz, sg with 

    | I32, Unsigned => Unsigned

    | _, _ => Signed

    end

  | Tint sz sg _, Tlong _ _ => shift_case_il

    match sz, sg with

    | I32, Unsigned => Unsigned

    | _, _ => Signed

    end

  | Tlong s _, Tint _ _ _ => shift_case_li s

  | Tlong s _, Tlong _ _ => shift_case_ll s

  | _,_  => shift_default

  end.



Lemma classify_shift_eq:  classify_shift = classify_shift'.

Proof.

unfold classify_shift; extensionality t1 t2.

destruct t1,t2; simpl; auto;

try destruct i,s; auto;

try destruct i0,s0; auto.

Qed.



Definition classify_binarith' (ty1: type) (ty2: type) :=

  match stupid_typeconv ty1, stupid_typeconv ty2 with

  | Tint i1 s1 _, Tint i2 s2 _ => bin_case_i 

    match i1, s1, i2, s2 with

    | I32, Unsigned, _, _ => Unsigned

    | _, _, I32, Unsigned => Unsigned

    | _, _, _, _ => Signed

    end

  | Tint _ _ _, Tlong s _ => bin_case_l s

  | Tlong s _, Tint _ _ _ => bin_case_l s

  | Tlong s1 _, Tlong s2 _ => bin_case_l

    match s1, s2 with

    | Signed, Signed => Signed

    | _, _ => Unsigned

    end

  | Tfloat F32 _, Tfloat F32 _ => bin_case_s

  | Tfloat _ _, Tfloat _ _ => bin_case_f

  | Tfloat F64 _, (Tint _ _ _ | Tlong _ _) => bin_case_f

  | (Tint _ _ _ | Tlong _ _), Tfloat F64 _ => bin_case_f

  | Tfloat F32 _, (Tint _ _ _ | Tlong _ _) => bin_case_s

  | (Tint _ _ _ | Tlong _ _), Tfloat F32 _ => bin_case_s

  | _, _ => bin_default

  end.



Definition binarithType' t1 t2 ty deferr reterr : tc_assert :=

  match classify_binarith' t1 t2 with

  | Cop.bin_case_i sg =>  tc_bool (is_int32_type ty) reterr

  | Cop.bin_case_l sg => tc_bool (is_long_type ty) reterr

  | Cop.bin_case_f   => tc_bool (is_float_type ty) reterr

  | Cop.bin_case_s   => tc_bool (is_single_type ty) reterr

  | Cop.bin_default => tc_FF deferr

  end.



Lemma classify_binarith_eq: classify_binarith = classify_binarith'.

Proof.

  unfold classify_binarith; extensionality t1 t2.

  destruct t1,t2; simpl; auto;

  try destruct i,s; auto;

  try destruct i0,s0; auto;

  try destruct s; auto;

  try destruct s0; auto.

Qed.



Lemma binarithType_eq: binarithType = binarithType'.

Proof.

  unfold binarithType, binarithType'; extensionality t1 t2 ty e1 e2.

  rewrite classify_binarith_eq.

  auto.

Qed.



Lemma den_isBinOpR: forall {CS: compspecs} op a1 a2 ty,

  denote_tc_assert (isBinOpResultType op a1 a2 ty) =

let e := (Ebinop op a1 a2 ty) in

let reterr := op_result_type e in

let deferr := arg_type e in

denote_tc_assert

match op with

  | Cop.Oadd => match classify_add' (typeof a1) (typeof a2) with

                    | Cop.add_case_pi t _ => tc_andp' (tc_andp' (tc_andp' (tc_isptr a1)

                                           (tc_bool (complete_type cenv_cs t) reterr))

                                            (tc_int_or_ptr_type (typeof a1)))

                                            (tc_bool (is_pointer_type ty) reterr)

                    | Cop.add_case_ip _ t => tc_andp' (tc_andp' (tc_andp' (tc_isptr a2)

                                           (tc_bool (complete_type cenv_cs t) reterr))

                                            (tc_int_or_ptr_type (typeof a2)))

                                            (tc_bool (is_pointer_type ty) reterr)

                    | Cop.add_case_pl t => tc_andp' (tc_andp' (tc_andp' (tc_isptr a1)

                                           (tc_bool (complete_type cenv_cs t) reterr))

                                            (tc_int_or_ptr_type (typeof a1)))

                                            (tc_bool (is_pointer_type ty) reterr)

                    | Cop.add_case_lp t => tc_andp' (tc_andp' (tc_andp' (tc_isptr a2)

                                           (tc_bool (complete_type cenv_cs t) reterr))

                                            (tc_int_or_ptr_type (typeof a2)))

                                            (tc_bool (is_pointer_type ty) reterr)

                    | Cop.add_default => tc_andp 

                                           (binarithType' (typeof a1) (typeof a2) ty deferr reterr)

                                           (tc_nobinover Z.add a1 a2)

            end

  | Cop.Osub => match classify_sub' (typeof a1) (typeof a2) with

                    | Cop.sub_case_pi t _ => tc_andp' (tc_andp' (tc_andp' (tc_isptr a1)

                                           (tc_bool (complete_type cenv_cs t) reterr))

                                            (tc_int_or_ptr_type (typeof a1)))

                                            (tc_bool (is_pointer_type ty) reterr)

                    | Cop.sub_case_pl t => tc_andp' (tc_andp' (tc_andp' (tc_isptr a1)

                                           (tc_bool (complete_type cenv_cs t) reterr))

                                            (tc_int_or_ptr_type (typeof a1)))

                                            (tc_bool (is_pointer_type ty) reterr)

                    | Cop.sub_case_pp t =>

                             tc_andp' (tc_andp' (tc_andp' (tc_andp' (tc_andp' (tc_andp' 

                              (tc_andp' (tc_andp' (tc_samebase a1 a2)

                             (tc_isptr a1))

                              (tc_isptr a2))

                               (tc_int_or_ptr_type (typeof a1)))

                               (tc_int_or_ptr_type (typeof a2)))

                               (tc_bool (is_ptrofs_type ty) reterr))

			        (tc_bool (negb (Z.eqb (sizeof t) 0))

                                      (pp_compare_size_0 t)))

                                 (tc_bool (complete_type cenv_cs t) reterr))

                                  (tc_bool (Z.leb (sizeof t) Ptrofs.max_signed)

                                         (pp_compare_size_exceed t))

                    | Cop.sub_default => tc_andp 

                                        (binarithType' (typeof a1) (typeof a2) ty deferr reterr)

                                        (tc_nobinover Z.sub a1 a2)

            end

  | Cop.Omul => tc_andp (binarithType' (typeof a1) (typeof a2) ty deferr reterr)

                   (tc_nobinover Z.mul a1 a2)

  | Cop.Omod => match classify_binarith' (typeof a1) (typeof a2) with

                    | Cop.bin_case_i Unsigned =>

                           tc_andp' (tc_nonzero' a2)

                           (tc_bool (is_int32_type ty) reterr)

                    | Cop.bin_case_l Unsigned =>

                           tc_andp' (tc_nonzero' a2)

                           (tc_bool (is_long_type ty) reterr)

                    | Cop.bin_case_i Signed => tc_andp' (tc_andp' (tc_nonzero' a2)

                                                      (tc_nodivover' a1 a2))

                                                     (tc_bool (is_int32_type ty) reterr)

                    | Cop.bin_case_l Signed => tc_andp' (tc_andp' (tc_nonzero' a2)

                                                      (tc_nodivover' a1 a2))

                                                     (tc_bool (is_long_type ty) reterr)

                    | _ => tc_FF deferr

            end

  | Cop.Odiv => match classify_binarith' (typeof a1) (typeof a2) with

                    | Cop.bin_case_i Unsigned => tc_andp' (tc_nonzero' a2) (tc_bool (is_int32_type ty) reterr)

                    | Cop.bin_case_l Unsigned => tc_andp' (tc_nonzero' a2) (tc_bool (is_long_type ty) reterr)

                    | Cop.bin_case_i Signed => tc_andp' (tc_andp' (tc_nonzero' a2) (tc_nodivover' a1 a2))

                                                        (tc_bool (is_int32_type ty) reterr)

                    | Cop.bin_case_l Signed => tc_andp' (tc_andp' (tc_nonzero' a2) (tc_nodivover' a1 a2))

                                                        (tc_bool (is_long_type ty) reterr)

                    | Cop.bin_case_f  =>  tc_bool (is_float_type ty) reterr

                    | Cop.bin_case_s  =>  tc_bool (is_single_type ty) reterr

                    | Cop.bin_default => tc_FF deferr

            end

  | Cop.Oshl | Cop.Oshr => match classify_shift' (typeof a1) (typeof a2) with

                    | Cop.shift_case_ii _ =>  tc_andp' (tc_ilt' a2 Int.iwordsize) (tc_bool (is_int32_type ty)

                                                                                         reterr)

                    | Cop.shift_case_il _ =>  tc_andp' (tc_llt' a2 (Int64.repr 32)) (tc_bool (is_int32_type ty)

                                                                                         reterr)

                    | Cop.shift_case_li _ =>  tc_andp' (tc_ilt' a2 Int64.iwordsize') (tc_bool (is_long_type ty)

                                                                                         reterr)

                    | Cop.shift_case_ll _ =>  tc_andp' (tc_llt' a2 Int64.iwordsize) (tc_bool (is_long_type ty)

                                                                                         reterr)

                    | _ => tc_FF deferr

                   end

  | Cop.Oand | Cop.Oor | Cop.Oxor =>

                   match classify_binarith' (typeof a1) (typeof a2) with

                    | Cop.bin_case_i _ =>tc_bool (is_int32_type ty) reterr

                    | Cop.bin_case_l _ =>tc_bool (is_long_type ty) reterr

                    | Cop.bin_case_f => tc_FF deferr

                    | Cop.bin_case_s => tc_FF deferr

                    | Cop.bin_default => tc_FF deferr

                   end

  | Cop.Oeq | Cop.One | Cop.Olt | Cop.Ogt | Cop.Ole | Cop.Oge =>

                   match classify_cmp' (typeof a1) (typeof a2) with

                    | Cop.cmp_default =>

                           tc_bool (is_numeric_type (typeof a1)

                                         && is_numeric_type (typeof a2)

                                          && is_int_type ty)

                                             deferr

 		                | Cop.cmp_case_pp => tc_andp' (tc_andp' (tc_int_or_ptr_type (typeof a1)) 

                                      (tc_int_or_ptr_type (typeof a2)))

                              (check_pp_int' a1 a2 op ty e)

                   | Cop.cmp_case_pi si =>

                          tc_andp' (tc_int_or_ptr_type (typeof a1))

                            (check_pp_int' a1 (Ecast a2 size_t) op ty e)

                   | Cop.cmp_case_ip si => 

                          tc_andp' (tc_int_or_ptr_type (typeof a2))

                           (check_pp_int' (Ecast a1 size_t) a2 op ty e)

                   | Cop.cmp_case_pl => 

                          tc_andp' (tc_int_or_ptr_type (typeof a1))

                            (check_pp_int' a1 (Ecast a2 size_t) op ty e)

                   | Cop.cmp_case_lp => 

                          tc_andp' (tc_int_or_ptr_type (typeof a2))

                          (check_pp_int' (Ecast a1 size_t) a2 op ty e)

                   end

  end.

Proof.

  intros.

 rewrite <- classify_add_eq. rewrite <- classify_sub_eq.

 rewrite <- classify_shift_eq. rewrite <- classify_cmp_eq.

 rewrite <- classify_binarith_eq. rewrite <- binarithType_eq.

 unfold isBinOpResultType, classify_add, classify_sub, classify_binarith, classify_shift,

  classify_cmp, check_pp_int, check_pp_int',

  

  typeconv,

  remove_attributes, change_attributes;

  destruct op; dtca;

 extensionality rho;

 destruct (typeof a1) as [ | [ | | | ] [ | ] ? | [ | ] ? | [ | ] ? | | | | | ]; dtca;

 destruct (typeof a2) as [ | [ | | | ] [ | ] ? | [ | ] ? | [ | ] ? | | | | | ]; dtca.

Qed.



Lemma denote_tc_assert'_andp'_e:

 forall {CS: compspecs} a b rho m, denote_tc_assert' (tc_andp' a b) rho m ->

    denote_tc_assert' a rho m /\ denote_tc_assert' b rho m.

Proof. intros.

 rewrite denote_tc_assert'_eq in *. apply H.

Qed.



Lemma cast_int_long_nonzero:

  forall s i, Int.eq i Int.zero = false ->

             Int64.eq (cast_int_long s i) Int64.zero = false.

Proof.

intros.

pose proof (Int.eq_spec i Int.zero). rewrite H in H0. clear H.

rewrite Int64.eq_false; auto.

unfold cast_int_long.

contradict H0.

unfold Int64.zero in H0.

destruct s.

assert (Int64.signed (Int64.repr (Int.signed i)) = Int64.signed (Int64.repr 0)) by (f_equal; auto).

rewrite Int64.signed_repr in H.

rewrite Int64.signed_repr in H.

rewrite <- (Int.repr_signed i).

rewrite H. reflexivity.

pose proof (Int64.signed_range Int64.zero).

rewrite Int64.signed_zero in H1.

auto.

pose proof (Int.signed_range i).

clear - H1.

destruct H1.

split.

apply Z.le_trans with Int.min_signed; auto.

compute; congruence.

apply Z.le_trans with Int.max_signed; auto.

compute; congruence.



assert (Int64.unsigned (Int64.repr (Int.unsigned i)) = Int64.unsigned (Int64.repr 0)) by (f_equal; auto).

rewrite Int64.unsigned_repr in H.

rewrite Int64.unsigned_repr in H.

rewrite <- (Int.repr_unsigned i).

rewrite H. reflexivity.

split; compute; congruence.

pose proof (Int.unsigned_range i).

clear - H1.

destruct H1.

split; auto.

unfold Int64.max_unsigned.

apply Z.le_trans with Int.modulus.

omega.

compute; congruence.

Qed.



Definition tc_numeric_val (v: val) (t: type) : Prop :=

 match v,t with

 | Vint _, Tint _ _ _ => True

 | Vlong _, Tlong _ _ => True

 | Vfloat _, Tfloat F64 _ => True

 | _, _ => False

 end.



Lemma tc_val_of_bool:

 forall x i3 s3 a3, tc_val (Tint i3 s3 a3) (Val.of_bool x).

Proof.

intros.

destruct x, i3,s3; simpl; try split; auto;

rewrite <- Z.leb_le;

reflexivity.

Qed.



Lemma tc_val_sem_cmp:

 forall op v1 t1 v2 t2 i3 s3 a3,

 tc_numeric_val v1 t1 ->

 tc_numeric_val v2 t2 ->

tc_val (Tint i3 s3 a3)

  (force_val (Clight_Cop2.sem_cmp op t1 t2 v1 v2)).

Proof.

Opaque tc_val.

destruct op; intros;

destruct v1;

  destruct t1 as [ | [ | | | ] [ | ] ? | [ | ] ? | [ | ] ? | | | | | ];

 try contradiction H;

destruct v2;

  destruct t2 as  [ | [ | | | ] [ | ] ? | [ | ] ? | [ | ] ? | | | | | ];

 try contradiction H0;

 unfold Clight_Cop2.sem_cmp, classify_cmp, typeconv,

  Clight_Cop2.sem_binarith, Clight_Cop2.sem_cast, classify_cast;

 simpl;

try apply tc_val_of_bool.

Transparent tc_val.

Qed.



Lemma tc_val'_sem_cmp_pp: forall cmp v1 v2 v i s a,

  sem_cmp_pp cmp v1 v2 = Some v ->

  tc_val' (Tint i s a) v.

Proof.

  intros.

  unfold sem_cmp_pp, option_map in H.

  forget (if Archi.ptr64 then Val.cmplu_bool true2 cmp v1 v2 else Val.cmpu_bool true2 cmp v1 v2) as v0.

  destruct v0; inv H.

  intros _; apply tc_val_of_bool.

Qed.



Lemma tc_val'_sem_cmp: forall cmp t v1 v2 t1 t2,

  is_int_type t = true ->

  tc_val' t (force_val2 (Clight_Cop2.sem_cmp cmp t1 t2) v1 v2).

Proof.

  intros.

  destruct t; inv H.

  unfold force_val2, force_val.

  destruct (Clight_Cop2.sem_cmp cmp t1 t2 v1 v2) eqn:?H; [| intros ?; congruence].

  unfold Clight_Cop2.sem_cmp in H.

  Opaque tc_val.

  destruct (Cop.classify_cmp t1 t2).

  + revert H; simple_if_tac; intros; [congruence |].

    eapply tc_val'_sem_cmp_pp; eauto.

  + revert H; simple_if_tac; intros; [congruence |].

    unfold sem_cmp_pi in H.

    destruct v2; [ inv H | | inv H .. |].

    - eapply tc_val'_sem_cmp_pp; eauto.

    - destruct Archi.ptr64; inv H;

      try (eapply tc_val'_sem_cmp_pp; eauto).

  + revert H; simple_if_tac; intros; [congruence |].

    unfold sem_cmp_ip in H.

    destruct v1; [ inv H | | inv H .. |].

    - eapply tc_val'_sem_cmp_pp; eauto.

    - destruct Archi.ptr64; inv H;

      try (eapply tc_val'_sem_cmp_pp; eauto).

  + revert H; simple_if_tac; intros; [congruence |].

    unfold sem_cmp_pl in H.

    destruct v2; try congruence.

    - eapply tc_val'_sem_cmp_pp; eauto.

    - destruct Archi.ptr64; inv H.

      eapply tc_val'_sem_cmp_pp; eauto.

  + revert H; simple_if_tac; intros; [congruence |].

    unfold sem_cmp_lp in H.

    destruct v1; try congruence.

    - eapply tc_val'_sem_cmp_pp; eauto.

    - destruct Archi.ptr64; inv H.

      eapply tc_val'_sem_cmp_pp; eauto.

  + unfold sem_cmp_default, Clight_Cop2.sem_binarith in H.

    destruct (Cop.classify_binarith t1 t2).

    - unfold both_int in H.

      forget (Clight_Cop2.sem_cast t1 (Cop.binarith_type (Cop.bin_case_i s0)) v1) as v1'.

      forget (Clight_Cop2.sem_cast t2 (Cop.binarith_type (Cop.bin_case_i s0)) v2) as v2'.

      destruct v1'; [| inv H].

      destruct v0; inv H.

      destruct v2'; [| inv H1].

      destruct v0; inv H1.

      intros _; apply tc_val_of_bool.

    - unfold both_long in H.

      forget (Clight_Cop2.sem_cast t1 (Cop.binarith_type (Cop.bin_case_l s0)) v1) as v1'.

      forget (Clight_Cop2.sem_cast t2 (Cop.binarith_type (Cop.bin_case_l s0)) v2) as v2'.

      destruct v1'; [| inv H].

      destruct v0; inv H.

      destruct v2'; [| inv H1].

      destruct v0; inv H1.

      intros _; apply tc_val_of_bool.

    - unfold both_float in H.

      forget (Clight_Cop2.sem_cast t1 (Cop.binarith_type (Cop.bin_case_f)) v1) as v1'.

      forget (Clight_Cop2.sem_cast t2 (Cop.binarith_type (Cop.bin_case_f)) v2) as v2'.

      destruct v1'; [| inv H].

      destruct v0; inv H.

      destruct v2'; [| inv H1].

      destruct v0; inv H1.

      intros _; apply tc_val_of_bool.

    - unfold both_single in H.

      forget (Clight_Cop2.sem_cast t1 (Cop.binarith_type (Cop.bin_case_s)) v1) as v1'.

      forget (Clight_Cop2.sem_cast t2 (Cop.binarith_type (Cop.bin_case_s)) v2) as v2'.

      destruct v1'; [| inv H].

      destruct v0; inv H.

      destruct v2'; [| inv H1].

      destruct v0; inv H1.

      intros _; apply tc_val_of_bool.

    - inv H.

Qed.



Lemma tc_val_cmp_eqne_ip:

 forall op v1 t1 v2 t0 a0 i2 s0 a1,

 match op with Ceq => True | Cne => True | _ => False end ->

 match v1,t1 with

 | Vint i, Tint _ _ _ => Int.eq i Int.zero = true

 | Vlong i, Tlong _ _ => Int64.eq (Int64.repr (Int64.unsigned i)) Int64.zero = true

 | _, _ => False

 end ->

 tc_val (Tpointer t0 a0) v2 ->

tc_val (Tint i2 s0 a1)

  (force_val (Clight_Cop2.sem_cmp op t1 (Tpointer t0 a0) v1 v2)).

Proof.

Opaque tc_val.

intros until 1; rename H into CMP; intros;

 destruct op; try contradiction CMP; clear CMP;

 destruct v1, t1; try contradiction H;

 destruct v2; 

 try (inv H0; try rewrite H2;

 try destruct i0; destruct s;

unfold Clight_Cop2.sem_cmp, classify_cmp, typeconv,

  Clight_Cop2.sem_binarith, sem_cast, classify_cast, sem_cmp_lp, sem_cmp_pp;

 simpl; try rewrite H;

 try reflexivity;

 try apply tc_val_of_bool).

Transparent tc_val.

all: try solve [hnf in H0; destruct (eqb_type _ _); inv H0].

Abort.



Lemma tc_val_cmp_eqne_pi:

 forall op v1 t1 v2 t0 a0 i2 s0 a1,

 match op with Ceq => True | Cne => True | _ => False end ->

 match v1,t1 with

 | Vint i, Tint _ _ _ => Int.eq i Int.zero = true

 | Vlong i, Tlong _ _ => Int64.eq (Int64.repr (Int64.unsigned i)) Int64.zero = true

 | _, _ => False

 end ->

tc_val (Tpointer t0 a0) v2 ->

tc_val (Tint i2 s0 a1) 

  (force_val (Clight_Cop2.sem_cmp op (Tpointer t0 a0) t1 v2 v1)).

Proof.

Opaque tc_val.

intros until 1; rename H into CMP; intros.

 destruct op; try contradiction CMP; clear CMP;

 destruct v1, t1; try contradiction H;

 destruct v2; 

 try (inv H0; try rewrite H2;

 try destruct i0; destruct s;

unfold Clight_Cop2.sem_cmp, classify_cmp, typeconv,

  sem_binarith, sem_cast, classify_cast, sem_cmp_pl, sem_cmp_pp;

 simpl; try rewrite H;

 try reflexivity;

 try apply tc_val_of_bool).

Transparent tc_val.

Abort.



Ltac sem_cmp_solver t1 t2 :=

match t1 with

  | Tint ?i ?s _ => destruct i,s

  | Tlong ?s _ => destruct s

  | Tfloat ?i _ => try (is_var i; destruct i)

  | _ => idtac

  end;

  match t2 with

  | Tint ?i ?s _ => destruct i,s

  | Tlong ?s _ => destruct s

  | Tfloat ?i _ => try (is_var i; destruct i)

  | _ => idtac

  end;

  unfold Clight_Cop2.sem_cmp, sem_cmp_pl, sem_cmp_lp, sem_cmp_pp; simpl;

 repeat match goal with

            | H: _ = true |- _ =>

                try rewrite H; clear H

            | H: if ?A then True else False |- _ =>

                  destruct A eqn:?; try contradiction; clear H

            end;

  try reflexivity;

  try apply tc_val_of_bool.



