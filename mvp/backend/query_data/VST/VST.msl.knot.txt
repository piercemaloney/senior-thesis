

Require Import VST.msl.base.
(* VST.msl.base:
Require Export VST.msl.Extensionality.
Require Export Coq.Lists.List.
Require Export Coq.Bool.Bool.
Require Export Coq.Relations.Relations.
Require Export Omega.

Definition compose (A B C:Type) (g:B -> C) (f:A -> B) := fun x => g (f x).
Arguments compose [A B C] _ _ _.
Infix "oo" := compose (at level 54, right associativity).

Lemma compose_assoc (A B C D:Type) (h:C->D) (g:B->C) (f:A->B) :
  (h oo g) oo f = h oo g oo f.

Lemma compose_rewr {A B C} (f : B -> C) (g : A -> B) x : f (g x) = (f oo g) x.

Definition id (A:Type) := fun x:A => x.

Lemma id_unit1 : forall A B (f:A->B), f oo id A = f.

Lemma id_unit2 : forall A B (f:A->B), id B oo f = f.

Record bijection (A B:Type) : Type := Bijection {
  bij_f: A -> B;
  bij_g: B -> A;
  bij_fg: forall x, bij_f (bij_g x) = x;
  bij_gf: forall x, bij_g (bij_f x) = x
}.

Lemma bij_f_inj {A} {B} (bij: bijection A B):
     forall x y, bij_f _ _ bij x = bij_f _ _ bij y -> x=y.

Lemma bij_g_inj {A} {B} (bij: bijection A B):
     forall x y, bij_g _ _ bij x = bij_g _ _ bij y -> x=y.

Lemma bij_fg_id: forall {A B} (f: bijection A B),
  (bij_f _ _ f) oo (bij_g _ _ f) = id _.

Lemma bij_gf_id: forall {A B} (f: bijection A B),
  (bij_g _ _ f) oo (bij_f _ _ f) = id _.

Definition bij_compose {A B C:Type} (g: bijection B C) (f: bijection A B):
  bijection A C.

Infix "ooo" := bij_compose (at level 54, right associativity).

Definition bij_refl (A: Type): bijection A A.

Definition bij_sym {A B} (f: bijection A B): bijection B A.

Definition func_bij {A1 A2 B1 B2} (f: bijection A1 A2) (g: bijection B1 B2):
  bijection (A1 -> B1) (A2 -> B2).

Definition unit_unit1 (A: Type): bijection A (A * unit).

Definition unit_unit2 (A: Type): bijection A (unit * A).

Definition prod_bij_comm (A B: Type): bijection (A * B) (B * A).

Tactic Notation "inv" hyp(H) := inversion H; clear H; subst.

Ltac detach H :=
  match goal with [ H : (?X -> ?Y) |- _ ] =>
    cut Y; [ clear H; intro H | apply H; clear H ]
  end.

Ltac spec H :=
  match type of H with ?a -> _ =>
    let H1 := fresh in (assert (H1: a); [|generalize (H H1); clear H H1; intro H]) end.

Tactic Notation "disc" := (try discriminate).

Tactic Notation "contr" := (try contradiction).

Tactic Notation "congr" := (try congruence).

Tactic Notation  "icase" constr(v) := (destruct v; disc; contr; auto).

Tactic Notation "omegac" := (elimtype False; omega).

Tactic Notation "copy" hyp(H) := (generalize H; intro). *)

Require Import VST.msl.ageable.
(* VST.msl.ageable:
Require Import VST.msl.base.
  Require Coq.funind.Recdef.

Local Open Scope nat_scope.

Record ageable_facts (A:Type) (level: A -> nat) (age1:A -> option A)  :=
{ af_unage : forall x':A, exists x, age1 x = Some x'
; af_level1 : forall x, age1 x = None <-> level x = 0
; af_level2 : forall x y, age1 x = Some y -> level x = S (level y)
}.

Arguments af_unage [A] [level] [age1] _ _.
Arguments af_level1 [A] [level] [age1] _ _.
Arguments af_level2 [A] [level] [age1] _ _ _ _.

Class ageable (A:Type) := mkAgeable
{ level : A -> nat
; age1 : A -> option A
; age_facts : ageable_facts A level age1
}.

Definition age {A} `{ageable A} (x y:A) := age1 x = Some y.

Lemma af_wf {A} `{ageable A} :
 well_founded (fun x y => age y x).
Arguments af_wf [A] _ _.

Definition age_induction {A} `{ageable A} :=
  well_founded_induction (af_wf _).

Definition fashionR {A1} `{ageable A1} {A2}`{ageable A2} (x:A1) (y: A2) : Prop :=
  level x = level y.

Lemma fashionR_refl {A} `{ageable A} : reflexive _ fashionR.

Lemma fashionR_trans {A} `{ageable A} {B} `{ageable B} {C} `{ageable C} :
    forall (x: A) (y: B) (z: C), fashionR x y -> fashionR y z -> fashionR x z.

Lemma fashionR_sym {A} `{ageable A} {B} `{ageable B}:
   forall (x: A) (y: B), fashionR x y -> fashionR y x.

Lemma age_level {A} `{ageable A} : forall (x y:A),
  age x y -> level x = S (level y).

Lemma age1_level0 {A} `{ageable A} : forall (x:A),
  age1 x = None <-> level x = 0.

  Theorem level_level' : forall x:A, level x = level' x.
End level'.

Lemma levelS_age1 {A} `{ageable A} : forall (x:A) n,
  level x = S n ->
  exists y, age1 x = Some y.

Lemma age1_levelS {A} `{ageable A} : forall (x y:A),
  age1 x = Some y ->
  exists n, level x = S n.

Lemma age1_level0_absurd {A} `{ageable A} : forall (x y:A),
  age1 x = Some y ->
  level x = 0 ->
  False.

Lemma age1None_levelS_absurd {A} `{ageable A} : forall (x:A) n,
  age1 x = None ->
  level x = S n ->
  False.

Section RtRft.
  Variable A:Type.
  Variable R:relation A.

  Let Rt := clos_trans A R.
  Let Rft := clos_refl_trans A R.

  Lemma Rt_Rft : forall x y, Rt x y -> Rft x y.

  Lemma Rt_Rft_trans : forall x y z, Rt x y -> Rft y z -> Rt x z.

  Lemma Rft_Rt_trans : forall x y z, Rft x y -> Rt y z -> Rt x z.

  Lemma transpose_clos_trans : forall A R x y,
    clos_trans A (transp A R) x y <-> transp A (clos_trans A R) x y.
End RtRft.

Hint Resolve rt_refl.

Definition laterR {A} `{ageable A} : relation A := clos_trans A age.
Definition necR   {A} `{ageable A} : relation A := clos_refl_trans A age.

Require Coq.Wellfounded.Wellfounded.
Lemma laterR_wf {A} `{ageable A} :
  well_founded (transp _ laterR).

Definition laterR_induction {A} `{ageable A} :=
  @well_founded_induction A (transp A laterR) laterR_wf.

Lemma age_irreflexive {A}  `{ageable A}: forall x, age x x -> False.

Lemma laterR_irreflexive {A} `{HA: ageable A} : forall x, laterR x x -> False.

Lemma nec_refl_or_later {A} `{ageable A} : forall x y,
  necR x y -> x = y \/ laterR x y.

Lemma necR_antisym {A} `{ageable A} : forall x y,
  necR x y -> necR y x -> x = y.

Lemma age_later_nec {A} `{HA: ageable A} : forall x y z,
  age x y ->
  laterR x z ->
  necR y z.

Lemma necR_level {A} `{X: ageable A} : forall (x y:A),
  necR x y ->
  level x >= level y.

Lemma laterR_level {A} `{X: ageable A} : forall (x y:A),
  laterR x y ->
  level x > level y.

Section NAT_AGEABLE.

  Definition natLevel (x:nat) : nat := x.
  Definition natAge1 (x:nat) : option nat :=
    match x with
    | 0 => None
    | S n => Some n
    end.
  Definition natUnage (x:nat) : nat := S x.

  Lemma ag_nat_facts :
    ageable_facts nat natLevel natAge1.

  Definition ag_nat : ageable nat :=
    mkAgeable nat natLevel natAge1 ag_nat_facts.

  Lemma nec_nat : forall (n n':nat),
    @necR _ ag_nat n n' <-> n' <= n.

  Lemma later_nat : forall (n n':nat),
    @laterR _ ag_nat n n' <-> n' < n.

End NAT_AGEABLE.

Lemma laterR_level' {A} `{H : ageable A}: forall {w1 w2: A}, laterR w1 w2 -> @laterR _ ag_nat (level w1) (level w2).

Lemma necR_nat {A} `{H : ageable A}:
    forall {x y: A}, necR x y -> @necR nat ag_nat (level x) (level y).

Section BIJECTION.
  Variable A B : Type.
  Variable ag: ageable A.
  Variable bijAB: bijection A B.

  Let levelB (x:B) : nat :=
    level (bij_g _ _ bijAB x).

  Let age1B  (x: B) : option B :=
     match age1 (bij_g _ _ bijAB x) with
     | Some y => Some (bij_f _ _ bijAB y)
     | None => None
     end.

  Let ageB (x y: B) :=age1B x = Some y.

  Lemma age_bij_unage :
    forall x', exists x, age1B x = Some x'.

  Lemma age_bij_level1 :
    forall x, age1B x = None <-> levelB x = 0.

  Lemma age_bij_level2 :
    forall x y, age1B x = Some y -> levelB x = S (levelB y).

  Lemma ag_bij_facts : ageable_facts B levelB age1B.

  Definition ag_bij : ageable B :=
    mkAgeable B levelB age1B ag_bij_facts.
End BIJECTION.

Section PROD.
  Variable A B : Type.
  Variable agA: ageable A.

  Let levelAB (x:prod A B) := level (fst x).
  Let age1AB (x:prod A B) :=
    match age1 (fst x) with
    | None => None
    | Some a' => Some (a',snd x)
    end.

  Lemma ag_prod_facts : ageable_facts (prod A B) levelAB age1AB.

  Definition ag_prod :=
    mkAgeable (prod A B) levelAB age1AB ag_prod_facts.

  Lemma prod_nec_split : forall n x n' x',
    @necR (prod A B) ag_prod (n,x) (n',x') <-> necR n n' /\ x = x'.

  Lemma prod_later_split : forall n x n' x',
    @laterR (prod A B) ag_prod (n,x) (n',x') <-> laterR n n' /\ x = x'.

End PROD.

Section PROD'.
  Variable A B : Type.
  Variable agB: ageable B.

  Let levelAB (x:prod A B) := level (snd x).
  Let age1AB (x:prod A B) :=
    match age1 (snd x) with
    | None => None
    | Some a' => Some (fst x, a')
    end.

  Lemma ag_prod'_facts : ageable_facts (prod A B) levelAB age1AB.

  Definition ag_prod' :=
    mkAgeable (prod A B) levelAB age1AB ag_prod'_facts.

  Lemma prod'_nec_split : forall n x n' x',
    @necR (prod A B) ag_prod' (x,n) (x',n') <-> necR n n' /\ x = x'.

  Lemma prod'_later_split : forall n x n' x',
    @laterR (prod A B) ag_prod' (x,n) (x',n') <-> laterR n n' /\ x = x'.

End PROD'.

Fixpoint composeOptN (A: Type) (f: A -> option A)
         (n: nat) (w: A) {struct n} : option A :=
 match n  with
 | S n' => match f w with Some w' => composeOptN A f n' w' | None => None end
 | O => Some w
 end.
Arguments composeOptN [A] _ _ _.

Definition ageN {A} `{ageable A}: nat -> A -> option A := composeOptN age1.

Lemma ageN1  {A} `{ageable A}: ageN 1 = age1.

Lemma ageN_compose {A} `{agA : ageable A}:
 forall a b c phi1 phi2 phi3,ageN a phi1 = Some phi2 ->
       ageN b phi2 = Some phi3 ->  (a+b=c)%nat ->  ageN c phi1 = Some phi3.

Lemma ageN_compose' {A} `{agA : ageable A}:
  forall a b phi1 phi3,
   ageN (a+b)%nat phi1 = Some phi3 -> exists phi2, ageN a phi1 = Some phi2 /\ ageN b phi2 = Some phi3.

Lemma necR_evolve {A} `{agA : ageable A}:
    necR = fun (phi phi': A) => exists n, ageN n phi = Some phi'.

Lemma age_noetherian  {A} `{ageable A}: forall phi, exists n, ageN n phi = None.

Lemma predicate_max:
  forall (F: nat -> Prop) (Fdec: forall n, {F n}+{~ F n}) n,
  F 0%nat ->
  ~ F n ->
  exists i, F i /\ (i<n)%nat /\ ~ F (S i).

Lemma age_noetherian'  {A} `{agA : ageable A}:
       forall phi, exists! n, exists phi', ageN n phi = Some phi' /\ age1 phi' = None.

Lemma ageable_ext:
   forall A (B C: ageable A),
      @age1 _ B = @age1 _ C -> @level _ B = @level _ C -> B=C.

Lemma necR_linear {A} `{H : ageable A}:
  forall {a b c}, necR a b -> necR a c -> necR b c \/ necR c b.

Lemma necR_linear' {A} `{H : ageable A}:
   forall {a b c}, necR a b -> necR a c -> level b = level c -> b=c.

Lemma laterR_necR {A} `{agA : ageable A}:
  forall {x y}, laterR x y -> necR x y.

Lemma necR_refl {A} `{H : ageable A}:
  forall phi, necR phi phi.

Hint Resolve @necR_refl.

Lemma necR_trans  {A} `{H : ageable A}:
  forall phi1 phi2 phi3, necR phi1 phi2 -> necR phi2 phi3 -> necR phi1 phi3.

Lemma necR_laterR {A} `{agA : ageable A}:
  forall w1 w2 w3, necR w1 w2 -> laterR w2 w3 -> laterR w1 w3. *)

Require Import Coq.Logic.Eqdep_dec.

Require Import VST.msl.functors.
(* VST.msl.functors:
Require Import VST.msl.base.

Set Implicit Arguments.

Module CovariantFunctor.

Record functorFacts (PS : Type -> Type)
  (fmap : forall A B (f : A -> B), PS A -> PS B) : Type :=
FunctorFacts {
  ff_id : forall A, fmap _ _ (id A) = id (PS A);
  ff_comp : forall A B C (f : B -> C) (g : A -> B),
fmap _ _ f oo fmap _ _ g = fmap _ _ (f oo g)
}.

Record functor : Type := Functor {
  _functor: Type -> Type;
  fmap : forall A B (f : A -> B), _functor A -> _functor B;
  functor_facts : functorFacts _functor fmap
}.

End CovariantFunctor.

Module ContraVariantFunctor.

Record functorFacts (PS : Type -> Type)
  (fmap : forall A B (f : B -> A), PS A -> PS B) : Type :=
FunctorFacts {
  ff_id : forall A, fmap _ _ (id A) = id (PS A);
  ff_comp : forall A B C (f : C -> B) (g : B -> A),
fmap _ _ f oo fmap _ _ g = fmap _ _ (g oo f)
}.

Record functor : Type := Functor {
  _functor: Type -> Type;
  fmap : forall A B (f : B -> A), _functor A -> _functor B;
  functor_facts : functorFacts _functor fmap
}.

End ContraVariantFunctor.

Module MixVariantFunctor.

Record functorFacts (PS : Type -> Type)
 (fmap : forall A B (f1 : A -> B) (f2 : B -> A), PS A -> PS B) : Type :=
FunctorFacts {
  ff_id : forall A, fmap _ _ (id A) (id A) = id (PS A);
  ff_comp : forall A B C (f1 : B -> C) (f2 : C -> B) (g1 : A -> B)
(g2 : B -> A), fmap _ _ f1 f2 oo fmap _ _ g1 g2 = fmap _ _ (f1 oo g1) (g2 oo f2)
}.

Record functor : Type := Functor {
  _functor: Type -> Type;
  fmap : forall A B (f1 : A -> B) (f2 : B -> A), _functor A -> _functor B;
  functor_facts : functorFacts _functor fmap
}.

End MixVariantFunctor.

Module CovariantBiFunctor.

Record functorFacts (PS : Type -> Type -> Type)
 (fmap : forall A1 B1 A2 B2 (f1 : A1 -> B1) (f2 : A2 -> B2),
    PS A1 A2 -> PS B1 B2) : Type :=
FunctorFacts {
  ff_id : forall A1 A2, fmap _ _ _ _ (id A1) (id A2) = id (PS A1 A2);
  ff_comp : forall A1 A2 B1 B2 C1 C2 (f1 : B1 -> C1) (f2 : B2 -> C2)
(g1 : A1 -> B1) (g2 : A2 -> B2),
  fmap _ _ _ _ f1 f2 oo fmap _ _ _ _ g1 g2 = fmap _ _ _ _ (f1 oo g1) (f2 oo g2)
}.

Record functor : Type := Functor {
  _functor: Type -> Type -> Type;
  fmap : forall A1 B1 A2 B2 (f1 : A1 -> B1) (f2 : A2 -> B2),
    _functor A1 A2 -> _functor B1 B2;
  functor_facts : functorFacts _functor fmap
}.

End CovariantBiFunctor.

Module CoContraVariantBiFunctor.

Record functorFacts (PS : Type -> Type -> Type)
 (fmap : forall A1 B1 A2 B2 (f1 : A1 -> B1) (f2 : B2 -> A2),
    PS A1 A2 -> PS B1 B2) : Type :=
FunctorFacts {
  ff_id : forall A1 A2, fmap _ _ _ _ (id A1) (id A2) = id (PS A1 A2);
  ff_comp : forall A1 A2 B1 B2 C1 C2 (f1 : B1 -> C1) (f2 : C2 -> B2)
(g1 : A1 -> B1) (g2 : B2 -> A2),
  fmap _ _ _ _ f1 f2 oo fmap _ _ _ _ g1 g2 = fmap _ _ _ _ (f1 oo g1) (g2 oo f2)
}.

Record functor : Type := Functor {
  _functor: Type -> Type -> Type;
  fmap : forall A1 B1 A2 B2 (f1 : A1 -> B1) (f2 : B2 -> A2),
    _functor A1 A2 -> _functor B1 B2;
  functor_facts : functorFacts _functor fmap
}.

End CoContraVariantBiFunctor.

Coercion CovariantFunctor._functor:
  CovariantFunctor.functor >-> Funclass.
Coercion ContraVariantFunctor._functor:
  ContraVariantFunctor.functor >-> Funclass.
Coercion MixVariantFunctor._functor:
  MixVariantFunctor.functor >-> Funclass.
Coercion CovariantBiFunctor._functor:
  CovariantBiFunctor.functor >-> Funclass.
Coercion CoContraVariantBiFunctor._functor:
  CoContraVariantBiFunctor.functor >-> Funclass.

Module CovariantFunctorLemmas.

Import CovariantFunctor.

Lemma fmap_id {F: functor} : forall A, fmap F (id A) = id (F A).

Lemma fmap_comp {F: functor} : forall A B C (f : B -> C) (g : A -> B),
  fmap F f oo fmap F g = fmap F (f oo g).

Lemma fmap_app {F: functor} : forall A B C (f : B -> C) (g : A -> B) x,
  fmap F f (fmap F g x) = fmap F (f oo g) x.

End CovariantFunctorLemmas.

Module ContraVariantFunctorLemmas.

Import ContraVariantFunctor.

Lemma fmap_id {F: functor} : forall A, fmap F (id A) = id (F A).

Lemma fmap_comp {F: functor} : forall A B C (f : C -> B) (g : B -> A),
  fmap F f oo fmap F g = fmap F (g oo f).

Lemma fmap_app {F: functor} : forall A B C (f : C -> B) (g : B -> A) x,
  fmap F f (fmap F g x) = fmap F (g oo f) x.

End ContraVariantFunctorLemmas.

Module MixVariantFunctorLemmas.

Import MixVariantFunctor.

Lemma fmap_id {F: functor} : forall A, fmap F (id A) (id A) = id (F A).

Lemma fmap_comp {F: functor} : forall A B C (f1 : B -> C) (f2: C -> B)
(g1 : A -> B) (g2: B -> A),
  fmap F f1 f2 oo fmap F g1 g2 = fmap F (f1 oo g1) (g2 oo f2).

Lemma fmap_app {F: functor} : forall A B C (f1 : B -> C) (f2: C -> B)
(g1 : A -> B) (g2: B -> A) x,
  fmap F f1 f2 (fmap F g1 g2 x) = fmap F (f1 oo g1) (g2 oo f2) x.

End MixVariantFunctorLemmas.

Module CovariantBiFunctorLemmas.

Import CovariantBiFunctor.

Lemma fmap_id {F: functor} : forall A1 A2, fmap F (id A1) (id A2) = id (F A1 A2).

Lemma fmap_comp {F: functor} : forall A1 A2 B1 B2 C1 C2 (f1 : B1 -> C1)
(f2: B2 -> C2) (g1 : A1 -> B1) (g2: A2 -> B2),
  fmap F f1 f2 oo fmap F g1 g2 = fmap F (f1 oo g1) (f2 oo g2).

Lemma fmap_app {F: functor} : forall A1 A2 B1 B2 C1 C2 (f1 : B1 -> C1)
(f2: B2 -> C2) (g1 : A1 -> B1) (g2: A2 -> B2) x,
  fmap F f1 f2 (fmap F g1 g2 x) = fmap F (f1 oo g1) (f2 oo g2) x.

End CovariantBiFunctorLemmas.

Module CoContraVariantBiFunctorLemmas.

Import CoContraVariantBiFunctor.

Lemma fmap_id {F: functor} : forall A1 A2, fmap F (id A1) (id A2) = id (F A1 A2).

Lemma fmap_comp {F: functor} : forall A1 A2 B1 B2 C1 C2 (f1 : B1 -> C1)
(f2: C2 -> B2) (g1 : A1 -> B1) (g2: B2 -> A2),
  fmap F f1 f2 oo fmap F g1 g2 = fmap F (f1 oo g1) (g2 oo f2).

Lemma fmap_app {F: functor} : forall A1 A2 B1 B2 C1 C2 (f1 : B1 -> C1)
(f2: C2 -> B2) (g1 : A1 -> B1) (g2: B2 -> A2) x,
  fmap F f1 f2 (fmap F g1 g2 x) = fmap F (f1 oo g1) (g2 oo f2) x.

End CoContraVariantBiFunctorLemmas.

Module GeneralFunctorGenerator.

Definition CovariantFunctor_MixVariantFunctor (F: CovariantFunctor.functor):

Definition ContraVariantFunctor_MixVariantFunctor
 (F: ContraVariantFunctor.functor):

Definition CovariantFunctor_CoContraVariantBiFunctor
 (F: CovariantFunctor.functor):

Definition CoContraVariantBiFunctor_MixVariantFunctor
 (F: CoContraVariantBiFunctor.functor):

Definition CovariantFunctor_CovariantFunctor_compose
(F1 F2: CovariantFunctor.functor):
  CovariantFunctor.functor.
  refine (@CovariantFunctor.Functor
   (fun T => F1 (F2 T))
   (fun A B f => CovariantFunctor.fmap F1 (CovariantFunctor.fmap F2 f)) _).
  constructor; intros; simpl.
  + rewrite !CovariantFunctorLemmas.fmap_id; auto.
  + rewrite !CovariantFunctorLemmas.fmap_comp; auto.

Definition CovariantFunctor_MixVariantFunctor_compose
(F1: CovariantFunctor.functor) (F2: MixVariantFunctor.functor):
  MixVariantFunctor.functor.
  refine (@MixVariantFunctor.Functor
   (fun T => F1 (F2 T))
   (fun A B f g => CovariantFunctor.fmap F1 (MixVariantFunctor.fmap F2 f g)) _).
  constructor; intros; simpl.
  + rewrite MixVariantFunctorLemmas.fmap_id, CovariantFunctorLemmas.fmap_id; auto.
  + rewrite !CovariantFunctorLemmas.fmap_comp, MixVariantFunctorLemmas.fmap_comp; auto.

Definition CovariantBiFunctor_CovariantFunctor_compose
(F: CovariantBiFunctor.functor)
(F1 F2: CovariantFunctor.functor):
  CovariantFunctor.functor.
  refine (@CovariantFunctor.Functor
   (fun T => F (F1 T) (F2 T))
   (fun A B f => CovariantBiFunctor.fmap F
      (CovariantFunctor.fmap F1 f) (CovariantFunctor.fmap F2 f)) _).
  constructor; intros; simpl.
  + rewrite !CovariantFunctorLemmas.fmap_id, CovariantBiFunctorLemmas.fmap_id; auto.
  + rewrite CovariantBiFunctorLemmas.fmap_comp, !CovariantFunctorLemmas.fmap_comp; auto.

Definition CovariantBiFunctor_MixVariantFunctor_compose
(F: CovariantBiFunctor.functor)
(F1 F2: MixVariantFunctor.functor):
  MixVariantFunctor.functor.
  refine (@MixVariantFunctor.Functor
   (fun T => F (F1 T) (F2 T))
   (fun A B f g => CovariantBiFunctor.fmap F
      (MixVariantFunctor.fmap F1 f g) (MixVariantFunctor.fmap F2 f g)) _).
  constructor; intros; simpl.
  + rewrite !MixVariantFunctorLemmas.fmap_id, CovariantBiFunctorLemmas.fmap_id; auto.
  + rewrite CovariantBiFunctorLemmas.fmap_comp, !MixVariantFunctorLemmas.fmap_comp; auto.

Definition CoContraVariantBiFunctor_CoContraVariantFunctor_compose
(F: CoContraVariantBiFunctor.functor)
(F1: CovariantFunctor.functor)
(F2: ContraVariantFunctor.functor):
  CovariantFunctor.functor.
  refine (@CovariantFunctor.Functor
   (fun T => F (F1 T) (F2 T))
   (fun A B f => CoContraVariantBiFunctor.fmap F
      (CovariantFunctor.fmap F1 f) (ContraVariantFunctor.fmap F2 f)) _).
  constructor; intros; simpl.
  + rewrite CovariantFunctorLemmas.fmap_id, ContraVariantFunctorLemmas.fmap_id, CoContraVariantBiFunctorLemmas.fmap_id; auto.
  + rewrite CoContraVariantBiFunctorLemmas.fmap_comp, CovariantFunctorLemmas.fmap_comp, ContraVariantFunctorLemmas.fmap_comp; auto.

Definition CoContraVariantBiFunctor_MixVariantFunctor_compose
(F: CoContraVariantBiFunctor.functor)
(F1 F2: MixVariantFunctor.functor):
  MixVariantFunctor.functor.
  refine (@MixVariantFunctor.Functor
   (fun T => F (F1 T) (F2 T))
   (fun A B f g => CoContraVariantBiFunctor.fmap F
      (MixVariantFunctor.fmap F1 f g) (MixVariantFunctor.fmap F2 g f)) _).
  constructor; intros; simpl.
  + rewrite !MixVariantFunctorLemmas.fmap_id, CoContraVariantBiFunctorLemmas.fmap_id; auto.
  + rewrite CoContraVariantBiFunctorLemmas.fmap_comp, !MixVariantFunctorLemmas.fmap_comp; auto.

End GeneralFunctorGenerator.

Module CovariantBiFunctorGenerator.

Import CovariantBiFunctor.
Import CovariantBiFunctorLemmas.

Definition Fpair: functor.

Definition Fchoice: functor.

End CovariantBiFunctorGenerator.

Module CoContraVariantBiFunctorGenerator.

Import CoContraVariantBiFunctor.
Import CoContraVariantBiFunctorLemmas.

Definition Ffunc: functor.

End CoContraVariantBiFunctorGenerator.

Module CovariantFunctorGenerator.

Import CovariantFunctor.
Import CovariantFunctorLemmas.

Definition fconst (T : Type): functor.

Definition fidentity: functor.

Definition Foption: functor.

Definition Flist: functor.

Definition fpair (F1 F2: functor): functor :=
  GeneralFunctorGenerator.CovariantBiFunctor_CovariantFunctor_compose
  CovariantBiFunctorGenerator.Fpair
  F1
  F2.

Goal forall (F1 F2: functor) (T: Type), fpair F1 F2 T = prod (F1 T) (F2 T).

Definition fchoice (F1 F2: functor): functor :=
  GeneralFunctorGenerator.CovariantBiFunctor_CovariantFunctor_compose
  CovariantBiFunctorGenerator.Fchoice
  F1
  F2.

Definition foption (F: functor): functor :=
  GeneralFunctorGenerator.CovariantFunctor_CovariantFunctor_compose
  Foption
  F.

Definition flist (F: functor): functor :=
  GeneralFunctorGenerator.CovariantFunctor_CovariantFunctor_compose
  Flist
  F.

Goal forall (F : functor) (T: Type), foption F T = option (F T).

Definition ffunc (F1: ContraVariantFunctor.functor) (F2: functor): functor :=
  GeneralFunctorGenerator.CoContraVariantBiFunctor_CoContraVariantFunctor_compose
  CoContraVariantBiFunctorGenerator.Ffunc
  F2
  F1.

Goal forall (F1 : ContraVariantFunctor.functor) (F2: functor) (T: Type),

Definition fsig {I: Type} (F: I -> functor): functor.

Definition fsubset (F: functor) (P: forall A, F A -> Prop)
  (Pfmap: forall A B (f: A -> B) x, P A x -> P B (fmap F f x)): functor.

End CovariantFunctorGenerator.

Module MixVariantFunctorGenerator.

Import MixVariantFunctor.
Import MixVariantFunctorLemmas.

Definition fconst (T : Type): functor :=
  GeneralFunctorGenerator.CovariantFunctor_MixVariantFunctor
  (CovariantFunctorGenerator.fconst T).

Definition fidentity: functor :=
  GeneralFunctorGenerator.CovariantFunctor_MixVariantFunctor
  CovariantFunctorGenerator.fidentity.

Definition fpair (F1 F2: functor): functor :=
  GeneralFunctorGenerator.CovariantBiFunctor_MixVariantFunctor_compose
  CovariantBiFunctorGenerator.Fpair
  F1
  F2.

Definition fchoice (F1 F2: functor): functor :=
  GeneralFunctorGenerator.CovariantBiFunctor_MixVariantFunctor_compose
  CovariantBiFunctorGenerator.Fchoice
  F1
  F2.

Definition foption (F: functor): functor :=
  GeneralFunctorGenerator.CovariantFunctor_MixVariantFunctor_compose
  CovariantFunctorGenerator.Foption
  F.

Definition flist (F: functor): functor :=
  GeneralFunctorGenerator.CovariantFunctor_MixVariantFunctor_compose
  CovariantFunctorGenerator.Flist
  F.

Definition ffunc (F1 F2: functor): functor :=
  GeneralFunctorGenerator.CoContraVariantBiFunctor_MixVariantFunctor_compose
  CoContraVariantBiFunctorGenerator.Ffunc
  F2
  F1.

Definition fsig {I: Type} (F: I -> functor): functor.

Definition fpi {I: Type} (F: I -> functor): functor.

Definition fsubset (F: functor) (P: forall A, F A -> Prop)
  (Pfmap: forall A B f g x, P A x -> P B (fmap F f g x)): functor.

End MixVariantFunctorGenerator.

Unset Implicit Arguments. *)



Import CovariantFunctor.

Import CovariantFunctorLemmas.

Import CovariantFunctorGenerator.



Local Open Scope nat_scope.



Module Type TY_FUNCTOR.

  Parameter F : functor.



  Parameter T : Type.

  Parameter T_bot : T.



  Parameter other : Type.

End TY_FUNCTOR.



Module Type KNOT.

  Declare Module TF:TY_FUNCTOR.

  Import TF.



  Parameter knot : Type.



  Parameter ag_knot : ageable knot.

  Existing Instance ag_knot.

  Existing Instance ag_prod.



  Definition predicate := (knot * other) -> T.



  Parameter squash : (nat * F predicate) -> knot.

  Parameter unsquash : knot -> (nat * F predicate).



  Definition approx (n:nat) (p:predicate) : predicate :=

     fun w => if le_gt_dec n (level w) then T_bot else p w.



  Axiom squash_unsquash : forall x, squash (unsquash x) = x.

  Axiom unsquash_squash : forall n x', unsquash (squash (n,x')) = (n,fmap F (approx n) x').



  Axiom knot_level : forall k:knot,

    level k = fst (unsquash k).



  Axiom knot_age1 : forall k:knot,

    age1 k =

    match unsquash k with

    | (O,_) => None

    | (S n,x) => Some (squash (n,x))

    end.



End KNOT.



Module Knot (TF':TY_FUNCTOR) : KNOT with Module TF:=TF'.

  Module TF := TF'.

  Import TF.



  Inductive leT : T -> T -> Prop :=

   | leT_refl : forall t, leT t t

   | leT_bot: forall t, leT T_bot t.



  Lemma leT_asym: forall t t',

    leT t t' -> leT t' t -> t = t'.

  Proof.

    intros.

    inversion H; subst; auto.

    inversion H0; subst; auto.

  Qed.



  Fixpoint sinv (n: nat) : Type :=

    match n with

      | O => unit

      | S n => prodT (sinv n) ((F (sinv n) * other) -> T)

    end.



  Fixpoint floor (m:nat) (n:nat) (p:sinv (m+n)) : sinv n :=

    match m as m' return forall (p : sinv (m'+n)), sinv n with

    | O => fun p => p

    | S m' => fun p => floor m' n (fst p)

    end p.



  Definition knot := { n:nat & F (sinv n) }.



  Definition predicate := knot * other -> T.



  Fixpoint stratify (n:nat) (Q:predicate) {struct n} : sinv n :=

    match n as n' return sinv n' with

    | O => tt

    | S n' => ( stratify n' Q, fun v => Q (existT (F oo sinv) n' (fst v),snd v) )

    end.



  Lemma decompose_nat : forall (x y:nat), { m:nat & y = (m + S x) } + { ge x y }.

  Proof.

    intros x y; revert x; induction y; simpl; intros.

    right; auto with arith.

    destruct (IHy x) as [[m H]|H].

    left; exists (S m); omega.

    destruct (eq_nat_dec x y).

    left; exists O; omega.

    right; omega.

  Qed.



  Definition unstratify (n:nat) (p:sinv n) : predicate := fun w =>

    match w with (existT _ nw w',e) =>

      match decompose_nat nw n with

        | inleft (existT _ m Hm) => snd (floor m (S nw) (eq_rect  n _ p (m + S nw) Hm)) (w', e)

        | inright H => T_bot

      end

    end.



  Definition proof_irr_nat := eq_proofs_unicity dec_eq_nat.

  Arguments proof_irr_nat [x] [y] _ _.



  Lemma floor_shuffle:

    forall (m1 n : nat)

      (p1 : sinv (m1 + S n)) (H1 : (m1 + S n) = (S m1 + n)),

      floor (S m1) n (eq_rect (m1 + S n) sinv p1 (S m1 + n) H1) = fst (floor m1 (S n) p1).

  Proof.

    intros.

    remember (fst (floor m1 (S n) p1)) as p.

    revert n p1 H1 p Heqp.

    induction m1; simpl; intros.

    replace H1 with (refl_equal (S n)) by (apply proof_irr_nat); simpl; auto.

    assert (m1 + S n = S m1 + n) by omega.

    destruct p1 as [p1 f'].

    generalize (IHm1 n p1 H p Heqp).

    simpl.

    clear.

    revert H1; generalize H.

    revert p1 f'.

    rewrite H.

    simpl; intros.

    replace H1 with (refl_equal (S (S (m1 + n)))) by (apply proof_irr_nat).

    simpl.

    replace H0 with (refl_equal (S (m1+n))) in H2 by (apply proof_irr_nat).

    simpl in H2.

    trivial.

  Qed.



  Lemma stratify_unstratify_more : forall n m1 m2 p1 p2,

    floor m1 n p1 = floor m2 n p2 ->



    (stratify n oo unstratify (m1+n)) p1 =

    (stratify n oo unstratify (m2+n)) p2.

  Proof.

    unfold compose; induction n; simpl; intros; auto.

    apply injective_projections; simpl; trivial.



    assert ((m1 + S n) =  (S m1 + n)) by omega.

    assert ((m2 + S n) =  (S m2 + n)) by omega.

    assert (floor (S m1) n (eq_rect (m1 + S n) _ p1 _ H0) = floor (S m2) n (eq_rect (m2 + S n) _ p2 _ H1)).

    do 2 rewrite floor_shuffle.

    congruence.

    generalize (IHn (S m1) (S m2) _ _ H2).

    clear.

    generalize H0 H1.

    revert p1 p2.

    rewrite H0; clear H0.

    rewrite H1; clear H1.

    intros p1 p2 H1 H2.

    replace H1 with (refl_equal (S m1 + n)) by (apply proof_irr_nat).

    replace H2 with (refl_equal (S m2 + n)) by (apply proof_irr_nat).

    simpl; auto.



    apply extensionality; intro v.

    unfold unstratify.

    destruct (decompose_nat n (m2 + S n)) as [[r Hr]|Hr].

    2: elimtype False; omega.

    destruct (decompose_nat n (m1 + S n)) as [[s Hs]|Hs].

    2: elimtype False; omega.

    assert (m2 = r) by omega; subst r.

    assert (m1 = s) by omega; subst s.

    simpl.

    replace Hr with (refl_equal (m2 + S n)) by (apply proof_irr_nat).

    replace Hs with (refl_equal (m1 + S n)) by (apply proof_irr_nat).

    simpl.

    rewrite H; auto.

  Qed.



  Lemma stratify_unstratify : forall n,

         stratify n oo unstratify n = id (sinv n).

  Proof.

    unfold id, compose; intro n; extensionality p; revert n p.

    induction n.



    intros; destruct p; auto.



    simpl; intros [p f].

    apply injective_projections; simpl; trivial.



    replace (stratify n (unstratify (S n) (p,f))) with

            (stratify n (unstratify n p)); auto.

    replace (stratify n (unstratify n p)) with

      ((stratify n oo unstratify (0+n)) p) by trivial.

    rewrite (stratify_unstratify_more _ 0 1 p (p,f)); trivial.



    extensionality v.



    destruct (decompose_nat n (S n)) as [[r Hr]|?]; auto.

    assert (r = O) by omega; subst r.

    simpl in *.

    replace Hr with (refl_equal (S n)) by (apply proof_irr_nat); simpl; auto.

    destruct v; auto.



    elimtype False.

    omega.

  Qed.



  Lemma unstratify_stratify1 : forall n (p:predicate) w,

    leT ((unstratify n oo stratify n) p w) (p w).

  Proof.

    unfold compose; induction n; simpl; intros; unfold unstratify.



    destruct w as [nw rm]; simpl.

    destruct nw as [nw e].

    destruct (decompose_nat nw O) as [[r Hr]|?].

    elimtype False; omega.

    apply leT_bot.



    case_eq w; intros nw rm Hrm.

    destruct nw as [nw e].

    destruct (decompose_nat nw (S n)) as [[r Hr]|?]; try (apply lt_rhs_top).

    destruct r; simpl.



    assert (n = nw) by omega.

    subst nw.

    simpl in Hr.

    replace Hr with (refl_equal (S n)) by apply proof_irr_nat; simpl.

    unfold compose.

    destruct w.

    apply leT_refl.



    simpl in Hr.

    assert (n = r + S nw) by omega.

    revert Hr; subst n.

    intro Hr.

    replace Hr with (refl_equal (S (r+S nw))) by apply proof_irr_nat; simpl.

    clear Hr.



    generalize (IHn p w).

    unfold unstratify.

    rewrite Hrm.

    destruct (decompose_nat nw (r + S nw)) as [[x Hx]|?].

    assert (x = r) by omega; subst x.

    replace Hx with (refl_equal (r + S nw)) by apply proof_irr_nat.

    simpl; auto.

    elimtype False; omega.

    apply leT_bot.

  Qed.



  Lemma unstratify_stratify2 : forall n p w,

     projT1 (fst w) < n ->

        leT (p w) ((unstratify n oo stratify n) p w).

  Proof.

    unfold compose.

    induction n; simpl; intros.



    inversion H.



    unfold unstratify.

    case_eq w; intros [m rm] e Hw.

    assert (projT1 (fst w) = m).

    rewrite Hw; auto.



    destruct (decompose_nat m (S n)) as [[r Hr]|?].

    destruct r; simpl.



    assert (n = m) by omega.

    move H0 after H1.

    subst m. fold sinv. simpl in Hr. rewrite (proof_irr_nat Hr (refl_equal _)). clear Hr.

    simpl.

    unfold compose.

    rewrite <- Hw.

    apply leT_refl.



    simpl in Hr.

    assert (n = r + S m) by omega.

    revert Hr; subst n.

    intro Hr.

    replace Hr with (refl_equal (S (r+S m))) by apply proof_irr_nat; simpl.

    clear Hr.

    rewrite H0 in H.

    assert (m < (r +  S m)) by omega.

    specialize ( IHn p w).

    rewrite H0 in IHn.

    specialize ( IHn H1).

    revert IHn.

    unfold unstratify.

    rewrite Hw.

    destruct (decompose_nat m (r + S m)) as [[x Hx]|?].

    assert (x = r) by omega; subst x.

    replace Hx with (refl_equal (r + S m)) by apply proof_irr_nat.

    simpl; auto.

    elimtype False; omega.

    elimtype False; omega.

  Qed.



  Lemma unstratify_stratify3 : forall n (p:predicate) w,

    projT1 (fst w) >= n -> leT ((unstratify n oo stratify n) p w) T_bot.

  Proof.

    unfold compose, unstratify; intros n p w H.

    case_eq w; intros [wn rm] e.

    intro Hrm.

    rewrite Hrm in H; simpl in H.

    destruct (decompose_nat wn n) as [[r Hr]|?].

    elimtype False; omega.

    apply leT_bot.

  Qed.



  Definition squash (x:nat * F predicate) : knot :=

    match x with (n,y) => existT (F oo sinv) n (fmap F (stratify n) y) end.



  Definition unsquash (x:knot) : (nat * F predicate) :=

    match x with existT _ n y => (n, fmap F (unstratify n) y) end.



  Definition def_knot_level (k:knot) := fst (unsquash k).



  Definition def_knot_age1 (k:knot) : option knot :=

    match unsquash k with

    | (O,_) => None

    | (S n,x) => Some (squash (n,x))

    end.



  Definition def_knot_unage (k:knot) : knot :=

    match unsquash k with

    | (n,x) => squash (S n,x)

    end.



  Definition approx (n:nat) (p:predicate) : predicate :=

     fun w => if le_gt_dec n (def_knot_level (fst w)) then T_bot else p w.



  Lemma squash_unsquash : forall x, squash (unsquash x) = x.

  Proof.

    intros; destruct x as [x f]; simpl.

    unfold compose.

    replace (fmap F (stratify x) (fmap F (unstratify x) f)) with

      ((fmap F (stratify x) oo fmap F (unstratify x)) f) by trivial.

    rewrite fmap_comp.

    replace (stratify x oo unstratify x) with (id (sinv x)).

    rewrite fmap_id; simpl; auto.

    unfold compose.

    extensionality z.

    replace (stratify x (unstratify x z)) with ((stratify x oo unstratify x) z) by trivial.

    rewrite stratify_unstratify; auto.

  Qed.



  Lemma unsquash_squash : forall n x', unsquash (squash (n,x')) = (n,fmap F (approx n) x').

  Proof.

    intros.

    simpl.

    replace (fmap F  (unstratify n) (fmap F (stratify n) x')) with

      ((fmap F (unstratify n) oo fmap F (stratify n)) x') by trivial.

    rewrite fmap_comp.

    apply injective_projections; simpl; trivial.

    replace (unstratify n oo stratify n) with (approx n); auto.

    extensionality p z.

    apply leT_asym.



    intuition.

    case (le_gt_dec n (def_knot_level a)); intro.

    replace (approx n p (a, b)) with T_bot.

    apply leT_bot.

    unfold approx.

    simpl.

    case (le_gt_dec n (def_knot_level a)); intro.

    trivial.

    elimtype False.

    omega.

    replace (approx n p (a,b)) with (p (a,b)).

    apply unstratify_stratify2.

    simpl.

    destruct a.

    unfold level in g.

    simpl in *.

    auto.

    unfold approx.

    simpl.

    case (le_gt_dec n (def_knot_level a)); intro.

    elimtype False.

    omega.

    trivial.



    intuition.

    destruct (le_lt_dec n (def_knot_level a)).

    replace (approx n p (a, b)) with T_bot.

    apply unstratify_stratify3; auto.

    simpl.

    destruct a.

    unfold level in l.

    simpl in *.

    auto.

    unfold approx.

    simpl.

    case (le_gt_dec n (def_knot_level a)); auto.

    intro.

    elimtype False.

    omega.

    replace (approx n p (a, b)) with (p (a, b)).

    apply unstratify_stratify1; auto.

    unfold approx.

    simpl.

    case (le_gt_dec n (def_knot_level a)); auto.

    intro.

    elimtype False.

    omega.

  Qed.



  Lemma unsquash_inj : forall k1 k2,

    unsquash k1 = unsquash k2 ->

    k1 = k2.

  Proof.

    intros.

    rewrite <- (squash_unsquash k1).

    rewrite <- (squash_unsquash k2).

    rewrite H.

    trivial.

  Qed.

  Arguments unsquash_inj [k1 k2] _.



  Lemma ag_knot_facts : ageable_facts knot def_knot_level def_knot_age1.

  Proof.

    constructor.



   unfold def_knot_age1; unfold def_knot_level; simpl; intros x'.

    case_eq (unsquash x'); intros.

    destruct x' as [n' xx']. simpl in *. inv H.

    exists (squash (S n, fmap F (unstratify n) xx')).

    rewrite unsquash_squash.

    f_equal.

    f_equal.

    transitivity ((fmap F (stratify n) oo fmap F (approx (S n)) oo fmap F (unstratify n)) xx'); auto.

    do 2 rewrite fmap_comp.

    replace (stratify n oo approx (S n) oo unstratify n) with (@id (sinv n)).

    rewrite fmap_id. auto.

   clear.

    rewrite <- (stratify_unstratify n).

    f_equal. extensionality  a w.

    unfold approx, compose. destruct w.

    simpl fst.

    destruct (le_gt_dec (S n) (def_knot_level k)); auto.

    destruct k. simpl in *.

    unfold def_knot_level in l.

    simpl in *.

    destruct (decompose_nat x n); auto.

    destruct s. elimtype False.

    omega.



    intros.

    unfold def_knot_age1, def_knot_level.

    destruct (unsquash x); simpl.

    destruct n; intuition; try discriminate.



    unfold def_knot_age1, def_knot_level; intros.

    destruct (unsquash x).

    destruct n; inv H; simpl; auto.

  Qed.



  Definition ag_knot : ageable knot :=

    mkAgeable knot def_knot_level def_knot_age1 ag_knot_facts .

  Existing Instance ag_knot.

  Existing Instance ag_prod.



  Lemma knot_level : forall k:knot,

    level k = fst (unsquash k).

  Proof (fun k => refl_equal (def_knot_level k)).



  Lemma knot_age1 : forall k:knot,

    age1 k =

    match unsquash k with

    | (O,_) => None

    | (S n,x) => Some (squash (n,x))

    end.

  Proof (fun k => refl_equal (def_knot_age1 k)).



End Knot.

