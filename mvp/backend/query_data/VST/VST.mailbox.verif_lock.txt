Require Import mailbox.verif_atomic_exchange.
(* mailbox.verif_atomic_exchange:
Definition acquire_spec := DECLARE _acquire acquire_spec.
Definition release_spec := DECLARE _release release_spec.

Section AEHist.

Inductive AE_hist_el := AE (r : val) (w : val).

Fixpoint apply_hist a h :=
  match h with
  | [] => Some a
  | AE r w :: h' => if eq_dec r a then apply_hist w h' else None
  end.

Arguments eq_dec _ _ _ _ : simpl never.

Lemma apply_hist_app : forall h1 i h2, apply_hist i (h1 ++ h2) =
  match apply_hist i h1 with Some v => apply_hist v h2 | None => None end.

End AEHist.

Notation hist := (nat -> option AE_hist_el).

Definition AE_inv x g i R := EX h : list AE_hist_el, EX v : val,
  !!(apply_hist i h = Some v /\ tc_val tint v) &&
  (data_at Ews tint v x * ghost_ref h g * R h v).

Lemma AE_inv_exclusive : forall x g i R, exclusive_mpred (AE_inv x g i R).
Hint Resolve AE_inv_exclusive.

Definition AE_loc sh l p g i R (h : hist) := lock_inv sh l (AE_inv p g i R) * ghost_hist sh h g.

Lemma AE_inv_super_non_expansive : forall n p g i R,
  compcert_rmaps.RML.R.approx n (AE_inv p g i R) =

Lemma AE_loc_super_non_expansive : forall n sh l p g i R h,
  compcert_rmaps.RML.R.approx n (AE_loc sh l p g i R h) =

Definition AE_spec i P R Q := ALL hc : _, ALL hx : _, ALL vc : _, ALL vx : _,
  !!(apply_hist i hx = Some vx /\ hist_incl hc hx) -->
  weak_view_shift (R hx vx * P hc vc) (R (hx ++ [AE vx vc]) vc *
    Q (map_upd hc (length hx) (AE vx vc)) vx) && emp.

Definition AE_type := ProdType (ProdType (ProdType
  (ConstType (share * val * gname * val * val * val * hist))
  (ArrowType (ConstType hist) (ArrowType (ConstType val) Mpred)))
  (ArrowType (ConstType (list AE_hist_el)) (ArrowType (ConstType val) Mpred)))
  (ArrowType (ConstType hist) (ArrowType (ConstType val) Mpred)).

Program Definition atomic_exchange_spec := DECLARE _simulate_atomic_exchange
  TYPE AE_type WITH lsh : share, tgt : val, g : gname, l : val,
    i : val, v : val, h : hist, P : hist -> val -> mpred, R : list AE_hist_el -> val -> mpred, Q : hist -> val -> mpred
  PRE [ _tgt OF tptr tint, _l OF tptr (Tstruct _lock_t noattr), _v OF tint ]
   PROP (tc_val tint v; readable_share lsh)
   LOCAL (temp _tgt tgt; temp _l l; temp _v v)
   SEP (AE_loc lsh l tgt g i R h; P h v; AE_spec i P R Q)
  POST [ tint ]
   EX t : nat, EX v' : val,
   PROP (tc_val tint v'; newer h t)
   LOCAL (temp ret_temp v')
   SEP (AE_loc lsh l tgt g i R (map_upd h t (AE v' v)); Q (map_upd h t (AE v' v)) v').

Definition Gprog : funspecs := ltac:(with_library prog [acquire_spec; release_spec; atomic_exchange_spec]).

Lemma body_atomic_exchange : semax_body Vprog Gprog f_simulate_atomic_exchange atomic_exchange_spec.

Lemma AE_loc_join : forall sh1 sh2 sh l p g i R h1 h2 (Hjoin : sepalg.join sh1 sh2 sh) *)
Require Import VST.veric.rmaps.
Require Import VST.progs.conclib.
Require Import VST.progs.ghost.
Require Import VST.floyd.library.
Require Import VST.floyd.sublist.
Require Import mailbox.lock.
(* mailbox.lock:
Require Import Clightdefs.
Local Open Scope Z_scope.
Definition ___builtin_annot : ident := 5%positive.
Definition ___builtin_annot_intval : ident := 6%positive.
Definition ___builtin_bswap : ident := 29%positive.
Definition ___builtin_bswap16 : ident := 31%positive.
Definition ___builtin_bswap32 : ident := 30%positive.
Definition ___builtin_clz : ident := 32%positive.
Definition ___builtin_clzl : ident := 33%positive.
Definition ___builtin_clzll : ident := 34%positive.
Definition ___builtin_ctz : ident := 35%positive.
Definition ___builtin_ctzl : ident := 36%positive.
Definition ___builtin_ctzll : ident := 37%positive.
Definition ___builtin_debug : ident := 50%positive.
Definition ___builtin_fabs : ident := 3%positive.
Definition ___builtin_fmadd : ident := 41%positive.
Definition ___builtin_fmax : ident := 39%positive.
Definition ___builtin_fmin : ident := 40%positive.
Definition ___builtin_fmsub : ident := 42%positive.
Definition ___builtin_fnmadd : ident := 43%positive.
Definition ___builtin_fnmsub : ident := 44%positive.
Definition ___builtin_fsqrt : ident := 38%positive.
Definition ___builtin_membar : ident := 7%positive.
Definition ___builtin_memcpy_aligned : ident := 4%positive.
Definition ___builtin_nop : ident := 49%positive.
Definition ___builtin_read16_reversed : ident := 45%positive.
Definition ___builtin_read32_reversed : ident := 46%positive.
Definition ___builtin_va_arg : ident := 9%positive.
Definition ___builtin_va_copy : ident := 10%positive.
Definition ___builtin_va_end : ident := 11%positive.
Definition ___builtin_va_start : ident := 8%positive.
Definition ___builtin_write16_reversed : ident := 47%positive.
Definition ___builtin_write32_reversed : ident := 48%positive.
Definition ___compcert_va_composite : ident := 15%positive.
Definition ___compcert_va_float64 : ident := 14%positive.
Definition ___compcert_va_int32 : ident := 12%positive.
Definition ___compcert_va_int64 : ident := 13%positive.
Definition ___i64_dtos : ident := 16%positive.
Definition ___i64_dtou : ident := 17%positive.
Definition ___i64_sar : ident := 28%positive.
Definition ___i64_sdiv : ident := 22%positive.
Definition ___i64_shl : ident := 26%positive.
Definition ___i64_shr : ident := 27%positive.
Definition ___i64_smod : ident := 24%positive.
Definition ___i64_stod : ident := 18%positive.
Definition ___i64_stof : ident := 20%positive.
Definition ___i64_udiv : ident := 23%positive.
Definition ___i64_umod : ident := 25%positive.
Definition ___i64_utod : ident := 19%positive.
Definition ___i64_utof : ident := 21%positive.
Definition _a : ident := 1%positive.
Definition _acquire : ident := 51%positive.
Definition _l : ident := 54%positive.
Definition _ll : ident := 59%positive.
Definition _lock_t : ident := 2%positive.
Definition _main : ident := 58%positive.
Definition _my_acquire : ident := 61%positive.
Definition _my_release : ident := 62%positive.
Definition _r : ident := 60%positive.
Definition _release : ident := 52%positive.
Definition _simulate_atomic_exchange : ident := 57%positive.
Definition _tgt : ident := 53%positive.
Definition _v : ident := 55%positive.
Definition _x : ident := 56%positive.
Definition _t'1 : ident := 63%positive.

Definition f_simulate_atomic_exchange := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := ((_tgt, (tptr tint)) ::
                (_l, (tptr (Tstruct _lock_t noattr))) :: (_v, tint) :: nil);
  fn_vars := nil;
  fn_temps := ((_x, tint) :: nil);
  fn_body :=
(Ssequence
  (Scall None
    (Evar _acquire (Tfunction (Tcons (tptr tvoid) Tnil) tvoid cc_default))
    ((Etempvar _l (tptr (Tstruct _lock_t noattr))) :: nil))
  (Ssequence
    (Sset _x (Ederef (Etempvar _tgt (tptr tint)) tint))
    (Ssequence
      (Sassign (Ederef (Etempvar _tgt (tptr tint)) tint) (Etempvar _v tint))
      (Ssequence
        (Scall None
          (Evar _release (Tfunction (Tcons (tptr tvoid) Tnil) tvoid
                           cc_default))
          ((Etempvar _l (tptr (Tstruct _lock_t noattr))) :: nil))
        (Sreturn (Some (Etempvar _x tint)))))))
|}.

Definition f_my_acquire := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_l, (tptr tint)) ::
                (_ll, (tptr (Tstruct _lock_t noattr))) :: nil);
  fn_vars := nil;
  fn_temps := ((_r, tint) :: (_t'1, tint) :: nil);
  fn_body :=
(Ssequence
  (Sset _r (Econst_int (Int.repr 1) tint))
  (Swhile
    (Etempvar _r tint)
    (Ssequence
      (Scall (Some _t'1)
        (Evar _simulate_atomic_exchange (Tfunction
                                          (Tcons (tptr tint)
                                            (Tcons
                                              (tptr (Tstruct _lock_t noattr))
                                              (Tcons tint Tnil))) tint
                                          cc_default))
        ((Etempvar _l (tptr tint)) ::
         (Etempvar _ll (tptr (Tstruct _lock_t noattr))) ::
         (Econst_int (Int.repr 1) tint) :: nil))
      (Sset _r (Etempvar _t'1 tint)))))
|}.

Definition f_my_release := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_l, (tptr tint)) ::
                (_ll, (tptr (Tstruct _lock_t noattr))) :: nil);
  fn_vars := nil;
  fn_temps := nil;
  fn_body :=
(Scall None
  (Evar _simulate_atomic_exchange (Tfunction
                                    (Tcons (tptr tint)
                                      (Tcons (tptr (Tstruct _lock_t noattr))
                                        (Tcons tint Tnil))) tint cc_default))
  ((Etempvar _l (tptr tint)) ::
   (Etempvar _ll (tptr (Tstruct _lock_t noattr))) ::
   (Econst_int (Int.repr 0) tint) :: nil))
|}.

Definition composites : list composite_definition :=
(Composite _lock_t Struct ((_a, (tarray (tptr tvoid) 4)) :: nil) noattr ::
 nil).

Definition prog : Clight.program := {|
prog_defs :=
((___builtin_fabs,
   Gfun(External (EF_builtin "__builtin_fabs"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_memcpy_aligned,
   Gfun(External (EF_builtin "__builtin_memcpy_aligned"
                   (mksignature
                     (AST.Tint :: AST.Tint :: AST.Tint :: AST.Tint :: nil)
                     None cc_default))
     (Tcons (tptr tvoid)
       (Tcons (tptr tvoid) (Tcons tuint (Tcons tuint Tnil)))) tvoid
     cc_default)) ::
 (___builtin_annot,
   Gfun(External (EF_builtin "__builtin_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_annot_intval,
   Gfun(External (EF_builtin "__builtin_annot_intval"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tschar) (Tcons tint Tnil))
     tint cc_default)) ::
 (___builtin_membar,
   Gfun(External (EF_builtin "__builtin_membar"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_va_start,
   Gfun(External (EF_builtin "__builtin_va_start"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___builtin_va_arg,
   Gfun(External (EF_builtin "__builtin_va_arg"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_va_copy,
   Gfun(External (EF_builtin "__builtin_va_copy"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default))
     (Tcons (tptr tvoid) (Tcons (tptr tvoid) Tnil)) tvoid cc_default)) ::
 (___builtin_va_end,
   Gfun(External (EF_builtin "__builtin_va_end"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___compcert_va_int32,
   Gfun(External (EF_external "__compcert_va_int32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tvoid) Tnil) tuint cc_default)) ::
 (___compcert_va_int64,
   Gfun(External (EF_external "__compcert_va_int64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tulong
     cc_default)) ::
 (___compcert_va_float64,
   Gfun(External (EF_external "__compcert_va_float64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tdouble
     cc_default)) ::
 (___compcert_va_composite,
   Gfun(External (EF_external "__compcert_va_composite"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     (tptr tvoid) cc_default)) ::
 (___i64_dtos,
   Gfun(External (EF_runtime "__i64_dtos"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tlong cc_default)) ::
 (___i64_dtou,
   Gfun(External (EF_runtime "__i64_dtou"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tulong cc_default)) ::
 (___i64_stod,
   Gfun(External (EF_runtime "__i64_stod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tlong Tnil) tdouble cc_default)) ::
 (___i64_utod,
   Gfun(External (EF_runtime "__i64_utod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tulong Tnil) tdouble cc_default)) ::
 (___i64_stof,
   Gfun(External (EF_runtime "__i64_stof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tlong Tnil) tfloat cc_default)) ::
 (___i64_utof,
   Gfun(External (EF_runtime "__i64_utof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tulong Tnil) tfloat cc_default)) ::
 (___i64_sdiv,
   Gfun(External (EF_runtime "__i64_sdiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___i64_udiv,
   Gfun(External (EF_runtime "__i64_udiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___i64_smod,
   Gfun(External (EF_runtime "__i64_smod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___i64_umod,
   Gfun(External (EF_runtime "__i64_umod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___i64_shl,
   Gfun(External (EF_runtime "__i64_shl"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___i64_shr,
   Gfun(External (EF_runtime "__i64_shr"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tint Tnil)) tulong cc_default)) ::
 (___i64_sar,
   Gfun(External (EF_runtime "__i64_sar"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___builtin_bswap,
   Gfun(External (EF_builtin "__builtin_bswap"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap32,
   Gfun(External (EF_builtin "__builtin_bswap32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap16,
   Gfun(External (EF_builtin "__builtin_bswap16"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tushort Tnil) tushort cc_default)) ::
 (___builtin_clz,
   Gfun(External (EF_builtin "__builtin_clz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzl,
   Gfun(External (EF_builtin "__builtin_clzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzll,
   Gfun(External (EF_builtin "__builtin_clzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_ctz,
   Gfun(External (EF_builtin "__builtin_ctz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzl,
   Gfun(External (EF_builtin "__builtin_ctzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzll,
   Gfun(External (EF_builtin "__builtin_ctzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_fsqrt,
   Gfun(External (EF_builtin "__builtin_fsqrt"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_fmax,
   Gfun(External (EF_builtin "__builtin_fmax"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmin,
   Gfun(External (EF_builtin "__builtin_fmin"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmadd,
   Gfun(External (EF_builtin "__builtin_fmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fmsub,
   Gfun(External (EF_builtin "__builtin_fmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmadd,
   Gfun(External (EF_builtin "__builtin_fnmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmsub,
   Gfun(External (EF_builtin "__builtin_fnmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_read16_reversed,
   Gfun(External (EF_builtin "__builtin_read16_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tushort) Tnil) tushort cc_default)) ::
 (___builtin_read32_reversed,
   Gfun(External (EF_builtin "__builtin_read32_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tuint) Tnil) tuint cc_default)) ::
 (___builtin_write16_reversed,
   Gfun(External (EF_builtin "__builtin_write16_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tushort) (Tcons tushort Tnil))
     tvoid cc_default)) ::
 (___builtin_write32_reversed,
   Gfun(External (EF_builtin "__builtin_write32_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tuint) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_nop,
   Gfun(External (EF_builtin "__builtin_nop"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_debug,
   Gfun(External (EF_external "__builtin_debug"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons tint Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (_acquire,
   Gfun(External (EF_external "acquire"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (_release,
   Gfun(External (EF_external "release"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (_simulate_atomic_exchange, Gfun(Internal f_simulate_atomic_exchange)) ::
 (_my_acquire, Gfun(Internal f_my_acquire)) ::
 (_my_release, Gfun(Internal f_my_release)) :: nil);
prog_public :=
(_my_release :: _my_acquire :: _simulate_atomic_exchange :: _release ::
 _acquire :: ___builtin_debug :: ___builtin_nop ::
 ___builtin_write32_reversed :: ___builtin_write16_reversed ::
 ___builtin_read32_reversed :: ___builtin_read16_reversed ::
 ___builtin_fnmsub :: ___builtin_fnmadd :: ___builtin_fmsub ::
 ___builtin_fmadd :: ___builtin_fmin :: ___builtin_fmax ::
 ___builtin_fsqrt :: ___builtin_ctzll :: ___builtin_ctzl :: ___builtin_ctz ::
 ___builtin_clzll :: ___builtin_clzl :: ___builtin_clz ::
 ___builtin_bswap16 :: ___builtin_bswap32 :: ___builtin_bswap ::
 ___i64_sar :: ___i64_shr :: ___i64_shl :: ___i64_umod :: ___i64_smod ::
 ___i64_udiv :: ___i64_sdiv :: ___i64_utof :: ___i64_stof :: ___i64_utod ::
 ___i64_stod :: ___i64_dtou :: ___i64_dtos :: ___compcert_va_composite ::
 ___compcert_va_float64 :: ___compcert_va_int64 :: ___compcert_va_int32 ::
 ___builtin_va_end :: ___builtin_va_copy :: ___builtin_va_arg ::
 ___builtin_va_start :: ___builtin_membar :: ___builtin_annot_intval ::
 ___builtin_annot :: ___builtin_memcpy_aligned :: ___builtin_fabs :: nil);
prog_main := _main;
prog_types := composites;
prog_comp_env := make_composite_env composites;
prog_comp_env_eq := refl_equal _
|}. *)

Set Bullet Behavior "Strict Subproofs".

Instance CompSpecs : compspecs. make_compspecs prog. Defined.
Definition Vprog : varspecs. mk_varspecs prog. Defined.

Definition acquire_spec := DECLARE _acquire acquire_spec.
Definition release_spec := DECLARE _release release_spec.

Definition lock_R R (h : list AE_hist_el) v := EX z : Z, !!(repable_signed z /\ v = vint z) &&
  (weak_precise_mpred R && emp) * (weak_positive_mpred R && emp) * if eq_dec z 0 then R else emp.

Definition my_lock sh l p g R := EX h : hist, AE_loc sh l p g (vint 1) (lock_R R) h.

Lemma lock_R_super_non_expansive : forall n R h v, compcert_rmaps.RML.R.approx n (lock_R R h v) =
  compcert_rmaps.RML.R.approx n (lock_R (compcert_rmaps.RML.R.approx n R) h v).
Proof.
  unfold lock_R; intros.
  rewrite !approx_exp; apply f_equal; extensionality z.
  rewrite !approx_sepcon, !approx_andp; f_equal.
  - rewrite nonexpansive_super_non_expansive by (apply precise_mpred_nonexpansive).
    rewrite (nonexpansive_super_non_expansive (fun R => weak_positive_mpred R))
      by (apply positive_mpred_nonexpansive); auto.
  - destruct (eq_dec z 0); auto.
    rewrite approx_idem; auto.
Qed.

Lemma my_lock_super_non_expansive : forall n sh l p g R, compcert_rmaps.RML.R.approx n (my_lock sh l p g R) =
  compcert_rmaps.RML.R.approx n (my_lock sh l p g (compcert_rmaps.RML.R.approx n R)).
Proof.
  unfold my_lock; intros.
  rewrite !approx_exp; apply f_equal; extensionality h.
  rewrite AE_loc_super_non_expansive; setoid_rewrite AE_loc_super_non_expansive at 2.
  f_equal; f_equal.
  extensionality h' v.
  apply lock_R_super_non_expansive.
Qed.

Notation "'TYPE' A 'WITH'  x1 : t1 , x2 : t2 , x3 : t3 , x4 : t4 , x5 : t5 'PRE'  [ u , .. , v ] P 'POST' [ tz ] Q" :=
     (mk_funspec ((cons u%formals .. (cons v%formals nil) ..), tz) cc_default A
  (fun (ts: list Type) (x: t1*t2*t3*t4*t5) =>
     match x with (x1,x2,x3,x4,x5) => P%assert end)
  (fun (ts: list Type) (x: t1*t2*t3*t4*t5) =>
     match x with (x1,x2,x3,x4,x5) => Q%assert end) _ _)
            (at level 200, x1 at level 0, x2 at level 0, x3 at level 0, x4 at level 0, x5 at level 0,
             P at level 100, Q at level 100).

Definition lock_sig := (ProdType (ConstType (share * val * val * val)) Mpred).

Program Definition my_acquire_spec :=
 DECLARE _my_acquire TYPE lock_sig
  WITH sh : share, l : val, p : val, g : val, R : mpred
  PRE [ _l OF tptr tint, _ll OF tptr (Tstruct _lock_t noattr) ]
   PROP (readable_share sh)
   LOCAL (temp _l p; temp _ll l)
   SEP (my_lock sh l p g R)
  POST [ tvoid ]
   PROP ()
   LOCAL ()
   SEP (my_lock sh l p g R; R).
Next Obligation.
Proof.
  replace _ with (fun (_ : list Type) (x : share * val * val * val * mpred) rho =>
    PROP (let '(sh, _, _, _, _) := x in readable_share sh)
    LOCAL (let '(_, _, p, _, _) := x in temp _l p;
           let '(_, l, _, _, _) := x in temp _ll l)
    SEP (let '(sh, l, p, g, R) := x in my_lock sh l p g R) rho).
  apply (PROP_LOCAL_SEP_super_non_expansive lock_sig [fun _ => _] [fun _ => _; fun _ => _]
    [fun _ => _]); repeat constructor; hnf; intros; destruct x as ((((?, ?), ?), ?), R); simpl;
    try apply my_lock_super_non_expansive; auto.
  extensionality ts x rho.
  destruct x as ((((?, ?), ?), ?), ?); auto.
Qed.
Next Obligation.
Proof.
  replace _ with (fun (_ : list Type) (x : share * val * val * val * mpred) rho =>
    PROP () LOCAL () SEP (let '(sh, l, p, g, R) := x in my_lock sh l p g R * R) rho).
  apply (PROP_LOCAL_SEP_super_non_expansive lock_sig [] [] [fun _ => _]); repeat constructor; hnf; intros;
    destruct x as ((((?, ?), ?), ?), R); simpl; try timeout 1 reflexivity.
  - rewrite !approx_sepcon, my_lock_super_non_expansive, approx_idem; auto.
  - extensionality ts x rho.
    destruct x as ((((?, ?), ?), ?), ?); auto.
    unfold SEPx; simpl; rewrite !sepcon_assoc; auto.
Qed.

Program Definition my_release_spec :=
 DECLARE _my_release TYPE lock_sig
  WITH sh : share, l : val, p : val, g : val, R : mpred
  PRE [ _l OF tptr tint, _ll OF tptr (Tstruct _lock_t noattr) ]
   PROP (readable_share sh)
   LOCAL (temp _l p; temp _ll l)
   SEP (my_lock sh l p g R; R)
  POST [ tvoid ]
   PROP ()
   LOCAL ()
   SEP (my_lock sh l p g R).
Next Obligation.
Proof.
  replace _ with (fun (_ : list Type) (x : share * val * val * val * mpred) rho =>
    PROP (let '(sh, _, _, _, _) := x in readable_share sh)
    LOCAL (let '(_, _, p, _, _) := x in temp _l p;
           let '(_, l, _, _, _) := x in temp _ll l)
    SEP (let '(sh, l, p, g, R) := x in my_lock sh l p g R * R) rho).
  apply (PROP_LOCAL_SEP_super_non_expansive lock_sig [fun _ => _] [fun _ => _; fun _ => _]
    [fun _ => _]); repeat constructor; hnf; intros;
    destruct x as ((((?, ?), ?), ?), R); simpl; try timeout 1 reflexivity.
  - rewrite !approx_sepcon, my_lock_super_non_expansive, approx_idem; auto.
  - extensionality ts x rho.
    destruct x as ((((?, ?), ?), ?), ?); auto.
    unfold SEPx; simpl; rewrite !sepcon_assoc; auto.
Qed.
Next Obligation.
Proof.
  replace _ with (fun (_ : list Type) (x : share * val * val * val * mpred) rho =>
    PROP () LOCAL () SEP (let '(sh, l, p, g, R) := x in my_lock sh l p g R) rho).
  apply (PROP_LOCAL_SEP_super_non_expansive lock_sig [] [] [fun _ => _]); repeat constructor; hnf; intros;
    destruct x as ((((?, ?), ?), ?), R); simpl; try timeout 1 reflexivity.
  - apply my_lock_super_non_expansive.
  - extensionality ts x rho.
    destruct x as ((((?, ?), ?), ?), ?); auto.
Qed.

Definition Gprog : funspecs := ltac:(with_library prog [acquire_spec; release_spec; atomic_exchange_spec;
  my_acquire_spec; my_release_spec]).

Lemma weak_precise_lock_R : forall R h v, predicates_hered.derives
  (weak_precise_mpred R && emp) (weak_precise_mpred (lock_R R h v) && emp).
Proof.
  unfold lock_R; intros ???? (Hprecise & ?).
  split; auto.
  intros ??? (? & v1 & ? & ? & ? & (? & ? & ? & ((? & ?) & (? & ?)) & (? & ?)) & ?)
    (? & v2 & ? & ? & ? & (? & ? & ? & ((? & ?) & (? & ?)) & (? & ?)) & ?) ??; subst.
  exploit (repr_inj_signed v1 v2); auto; [congruence | intro; subst].
  repeat match goal with H : predicates_hered.app_pred emp ?r, H' : sepalg.join ?r _ _ |- _ =>
    specialize (H _ _ H'); subst end.
  destruct (eq_dec v2 0).
  - apply (Hprecise w); auto; split; auto.
  - repeat match goal with H : predicates_hered.app_pred emp ?r, H' : sepalg.join_sub ?r _ |- _ =>
      destruct H' as (? & H'); specialize (H _ _ H'); subst end.
    eapply sepalg.same_unit; eauto.
Qed.

Lemma body_my_acquire : semax_body Vprog Gprog f_my_acquire my_acquire_spec.
Proof.
  start_dep_function.
  simpl; destruct ts as ((((sh, l), p), g), R).
  forward.
  eapply semax_seq'.
  eapply semax_pre with (P' := EX z : Z, PROP (repable_signed z) LOCAL (temp _r (vint z); temp _l p; temp _ll l)
    SEP (my_lock sh l p g R; if eq_dec z 0 then R else emp)).
  { Exists 1; entailer!. }
  eapply semax_loop; [|forward; apply ENTAIL_refl].
  - Intros z.
    forward_if (PROP () LOCAL (temp _r (vint z); temp _l p; temp _ll l) SEP (my_lock sh l p g R)).
    + forward.
      destruct (eq_dec z 0); [subst; absurd (Int.repr 0 = Int.zero); auto|].
      entailer!.
    + forward.
      assert (z = 0).
      { apply repr_inj_signed; auto. }
      subst; rewrite eq_dec_refl; apply ENTAIL_refl.
    + unfold my_lock; Intros h.
      forward_call (sh, p, g, l, vint 1, vint 1, h, fun (h : hist) (v : val) => !!(v = vint 1) && emp,
        lock_R R,
        fun (h : hist) (v : val) => EX z : Z, !!(repable_signed z /\ v = vint z) && if eq_dec z 0 then R else emp).
      { unfold AE_loc; entailer!. }
      { repeat (split; auto).
        intros ????????????? Ha.
        unfold lock_R in *.
        rewrite flatten_sepcon_in_SEP.
        rewrite extract_exists_in_SEP; Intro z'.
        rewrite <- flatten_sepcon_in_SEP.
        rewrite !sepcon_andp_prop', !sepcon_andp_prop.
        erewrite extract_prop_in_SEP with (n := O); simpl; eauto.
        erewrite extract_prop_in_SEP with (n := O); simpl; eauto.
        Intros; subst.
        eapply semax_pre, Ha; clear Ha.
        go_lowerx.
        rewrite andp_emp_dup at 1.
        Exists 1 z'; entailer!.
        apply weak_precise_lock_R with (h := []). }
      Intros x z'; destruct x as (t, v); simpl in *.
      forward.
      go_lower.
      Exists z'; entailer!.
      unfold my_lock.
      Exists (h ++ [(t, AE (vint z') (vint 1))]); auto.
  - unfold MORE_COMMANDS, abbreviate; forward.
Qed.

Lemma body_my_release : semax_body Vprog Gprog f_my_release my_release_spec.
Proof.
  start_dep_function.
  simpl; destruct ts as ((((sh, l), p), g), R).
  unfold my_lock; Intros h.
  forward_call (sh, p, g, l, vint 1, vint 0, h, fun (h : hist) (v : val) => !!(v = vint 0) && R,
    lock_R R, fun (h : hist) (v : val) => EX z' : Z, !!(v = vint z' /\ repable_signed z' /\ z' <> 0) && emp).
  { entailer!. }
  { repeat (split; auto).
    intros ????????????? Ha.
    unfold lock_R in *.
    rewrite flatten_sepcon_in_SEP.
    rewrite extract_exists_in_SEP; Intro z'.
    rewrite <- flatten_sepcon_in_SEP.
    rewrite !sepcon_andp_prop', !sepcon_andp_prop.
    erewrite extract_prop_in_SEP with (n := O); simpl; eauto.
    erewrite extract_prop_in_SEP with (n := O); simpl; eauto.
    Intros; subst.
    eapply semax_pre, Ha; clear Ha.
    go_lowerx.
    destruct (eq_dec z' 0).
    { apply derives_trans with (Q0 := FF * TT); [|entailer!].
      apply sepcon_derives; [|auto].
      apply weak_precise_positive_conflict. }
    rewrite andp_emp_dup at 1.
    Exists 0 z'; rewrite eq_dec_refl; entailer!.
    apply weak_precise_lock_R with (h := []). }
  Intros x z'; destruct x as (t, v); simpl in *.
  forward.
  unfold my_lock.
  Exists (h ++ [(t, AE (vint z') (vint 0))]); auto.
Qed.
