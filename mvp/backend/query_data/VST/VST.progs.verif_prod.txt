Require Import VST.progs.prod.

Require Import VST.floyd.proofauto.
(* VST.floyd.proofauto:
From compcert Require Export common.AST cfrontend.Ctypes cfrontend.Clight.
Export Cop.
Require Export VST.floyd.base2.
Require Export VST.floyd.functional_base.
Require Export VST.floyd.client_lemmas.
Require Export VST.floyd.go_lower.
Require Export VST.floyd.closed_lemmas.
Require Export VST.floyd.compare_lemmas.
Require Export VST.floyd.semax_tactics.
Require Export VST.floyd.forward.
Require Export VST.floyd.subsume_funspec.
Require Export VST.floyd.call_lemmas.
Require Export VST.floyd.forward_lemmas.
Require Export VST.floyd.for_lemmas.
Require Export VST.floyd.nested_pred_lemmas.
Require Export VST.floyd.nested_field_lemmas.
Require Export VST.floyd.efield_lemmas.
Require Export VST.floyd.mapsto_memory_block.
Require Export VST.floyd.aggregate_type.
Require VST.floyd.aggregate_pred. Export floyd.aggregate_pred.aggregate_pred.
Require Export VST.floyd.reptype_lemmas.
Require Export VST.floyd.simpl_reptype.
Require Export VST.floyd.data_at_rec_lemmas.
Require Export VST.floyd.field_at.
Require Export VST.floyd.field_at_wand.
Require Export VST.floyd.field_compat.
Require Export VST.floyd.stronger.
Require Export VST.floyd.loadstore_mapsto.
Require Export VST.floyd.loadstore_field_at.
Require Export VST.floyd.nested_loadstore.
Require Export VST.floyd.local2ptree_denote.
Require Export VST.floyd.local2ptree_eval.
Require Export VST.floyd.local2ptree_typecheck.
Require Export VST.floyd.proj_reptype_lemmas.
Require Export VST.floyd.replace_refill_reptype_lemmas.
Require Export VST.floyd.sc_set_load_store.
Require Export VST.floyd.unfold_data_at.
Require Export VST.floyd.entailer.
Require Export VST.floyd.globals_lemmas.
Require Export VST.floyd.diagnosis.
Require Export VST.floyd.freezer.
Require Export VST.floyd.deadvars.
Require Export VST.floyd.hints.
Require Export VST.floyd.Clightnotations.
Require VST.msl.iter_sepcon.
Require VST.msl.wand_frame.
Require VST.msl.wandQ_frame.

Arguments semax {CS} {Espec} Delta Pre%assert cmd%C Post%assert.
Export ListNotations.
Export Clight_Cop2.

Hint Rewrite add_repr mul_repr sub_repr : entailer_rewrite.
Hint Rewrite ptrofs_add_repr ptrofs_mul_repr ptrofs_sub_repr : entailer_rewrite.
Hint Rewrite mul64_repr add64_repr sub64_repr or64_repr and64_repr : entailer_rewrite.
Hint Rewrite neg_repr neg64_repr : entailer_rewrite.
Hint Rewrite ptrofs_to_int_repr: entailer_rewrite norm.

Lemma Vptrofs_unfold_false: 
Archi.ptr64 = false -> Vptrofs = fun x => Vint (Ptrofs.to_int x).

Lemma Vptrofs_unfold_true: 
Archi.ptr64 = true -> Vptrofs = fun x => Vlong (Ptrofs.to_int64 x).

Lemma modu_repr: forall x y, 
   0 <= x <= Int.max_unsigned ->
Hint Rewrite modu_repr using rep_omega : entailer_rewrite norm.

Hint Rewrite Vptrofs_unfold_false using reflexivity: entailer_rewrite norm.
Hint Rewrite Vptrofs_unfold_true using reflexivity: entailer_rewrite norm.

Hint Extern 1 (Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef) => reflexivity : cancel.
Hint Extern 1 (list_repeat _ Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = list_repeat _ Vundef) => reflexivity : cancel.
Hint Extern 1 (Vundef :: _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef :: _) => reflexivity : cancel.
Hint Extern 1 (@nil _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = @nil _) => reflexivity : cancel.

Instance Inhabitant_mpred : Inhabitant mpred := @FF mpred Nveric.
Instance Inhabitant_share : Inhabitant share := Share.bot.

Arguments deref_noload ty v / .
Arguments nested_field_array_type {cs} t gfs lo hi / .
Arguments nested_field_type {cs} t gfs / .  
Arguments nested_field_offset {cs} t gfs / .  
Arguments Z.mul !x !y.
Arguments Z.sub !m !n.
Arguments Z.add !x !y.
Global Transparent peq.
Global Transparent Archi.ptr64.

Ltac step :=
first [ progress Intros
       | let x := fresh "x" in Intros x
       | forward
       | forward_if
       | forward_call
       | rep_omega | cstring' | list_solve
       | EExists
       | progress (autorewrite with sublist in *|-)
       | progress (autorewrite with sublist)
       | progress (autorewrite with norm)
       | cstring1
       | deadvars!
       | progress_entailer
       ]. *)



Definition bound_int (v : val) (b : Z) :=

  match v with

  | Vint i => -b < (Int.signed i) < b

  | _ => False

  end.



Definition product a b := map (fun vp => Val.mul (fst vp) (snd vp)) (combine a b).



Definition product_spec :=

  DECLARE _product

  WITH b0 : val, sh : share, orig_a : list val, orig_b : list val, out0 : val, a0 : val

  PRE [_out OF (tptr tlong), _a OF (tptr tint), _b OF (tptr tint)]

    PROP (writable_share sh;

          length orig_a = 10%nat;

          length orig_b = 10%nat;

          forall i, 0 <= i < 10 -> is_long (Znth i orig_a Vundef);

          forall i, 0 <= i < 10 -> is_long (Znth i orig_b Vundef);

          forall i, 0 <= i < 10 -> bound_int (Znth i orig_a Vundef) 134217728;

          forall i, 0 <= i < 10 -> bound_int (Znth i orig_b Vundef) 134217728)

    LOCAL (temp _out out0;

           temp _a a0;

           temp _b b0;

           `isptr (eval_id _out);

           `isptr (eval_id _a);

           `isptr (eval_id _b))

    SEP (`(data_at sh (tarray tlong 10) orig_a a0);

         `(data_at sh (tarray tlong 10) orig_b b0);

         `(data_at_ sh (tarray tlong 10) out0))

  POST [ tvoid ]

    PROP ()

    LOCAL ()

    SEP (`(data_at sh (tarray tlong 10) orig_a a0);

         `(data_at sh (tarray tlong 10) orig_b b0);

         `(data_at sh (tarray tlong 10) (product orig_a orig_b) out0)).



Local Open Scope logic.



Definition Vprog : varspecs := nil.

Definition Gprog : funspecs :=   ltac:(with_library prog [product_spec]).



Lemma cast_l2i : forall (x : val), is_long x -> is_int I32 Signed (force_val (sem_cast_l2i I32 Signed x)).

Proof.

intros.

unfold force_val, sem_cast_l2i.

induction x.

auto.

auto.

Focus 2.

auto.

Focus 2.

auto.

auto.

inversion H.

Qed.



Lemma product_sumarray : semax_body Vprog Gprog f_product product_spec.

Proof.

start_function.

forward.

  entailer!.

  apply cast_l2i.

  apply H2.

  omega.

forward.

  entailer!.

  apply cast_l2i.

  apply H3.

  omega.

forward.

forward.

forward.

Abort.
