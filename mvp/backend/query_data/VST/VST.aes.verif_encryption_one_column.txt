Require Import aes.api_specs.
(* aes.api_specs:
Definition t_struct_aesctx := Tstruct _mbedtls_aes_context_struct noattr.
Definition t_struct_tables := Tstruct _aes_tables_struct noattr.

Definition tables_initialized (tables : val) := data_at Ews t_struct_tables
  (map Vint FSb, (map Vint FT0, (map Vint FT1, (map Vint FT2, (map Vint FT3,
  (map Vint RSb, (map Vint RT0, (map Vint RT1, (map Vint RT2, (map Vint RT3,
  (map Vint RCON))))))))))) tables.

Definition Vundef256 : list val := repeat Vundef 256%nat.

Definition tables_uninitialized tables := data_at Ews t_struct_tables (Vundef256, 
  (Vundef256, (Vundef256, (Vundef256, (Vundef256, (Vundef256,
  (Vundef256, (Vundef256, (Vundef256, (Vundef256, 
  (repeat Vundef 10))))))))))) tables.

Definition gen_tables_spec :=
  DECLARE _aes_gen_tables
    WITH gv: globals
    PRE [  ]
      PROP ()
      LOCAL (gvars gv)
      SEP (tables_uninitialized (gv _tables))
    POST [ tvoid ]
      PROP ()
      LOCAL ()
      SEP (tables_initialized (gv _tables))
.

Definition word_to_int (w : (int * int * int * int)) : int :=
  match w with (b0, b1, b2, b3) =>
    (Int.or (Int.or (Int.or
             b0
    (Int.shl b1 (Int.repr  8)))
    (Int.shl b2 (Int.repr 16)))
    (Int.shl b3 (Int.repr 24)))
  end.

Definition SubWord (w: int) : int := word_to_int (
  (Znth (byte0 w) FSb),
  (Znth (byte1 w) FSb),
  (Znth (byte2 w) FSb),
  (Znth (byte3 w) FSb)
).

Definition RotWord(i: int): int := 
  Int.or (Int.and (Int.shl i (Int.repr 8)) (Int.repr (-1))) (Int.shru i (Int.repr 24)).

Definition RCon : list int := map (fun i => Int.shl i (Int.repr 24)) [
   (Int.repr 1);
   (Int.repr 2);
   (Int.repr 4);
   (Int.repr 8);
   (Int.repr 16);
   (Int.repr 32);
   (Int.repr 64)
].

Definition GrowKeyByOne(w: list int): list int :=
  let i := Zlength w in
  let temp := (Znth (i-1) w) in
  let temp' := if (i mod Nk =? 0) then
    Int.xor (SubWord (RotWord temp)) (Znth (i/Nk) RCon)
  else if (i mod Nk =? 4) then
    SubWord temp
  else
    temp
  in
    w ++ [Int.xor (Znth (i-8) w) temp'].

Fixpoint pow_fun{T: Type}(f: T -> T)(n: nat)(a: T): T := match n with
| O => a
| S m => f (pow_fun f m a)
end.

Definition KeyExpansion2: list int -> list int := pow_fun GrowKeyByOne (Z.to_nat (Nb*(Nr+2)-Nk)).

Definition get_uint32_le (arr: list Z) (i: Z) : int :=
 (Int.or (Int.or (Int.or
            (Int.repr (Znth  i    arr))
   (Int.shl (Int.repr (Znth (i+1) arr)) (Int.repr  8)))
   (Int.shl (Int.repr (Znth (i+2) arr)) (Int.repr 16)))
   (Int.shl (Int.repr (Znth (i+3) arr)) (Int.repr 24))).

Definition key_bytes_to_key_words(key_bytes: list Z): list int := 
  fill_list 8 (fun i => get_uint32_le key_bytes (i*4)).

Definition key_expansion_spec :=
  DECLARE _mbedtls_aes_setkey_enc
    WITH ctx : val, key : val, ctx_sh : share, key_sh : share, key_chars : list Z,
         init_done : Z, ish: share, gv: globals
    PRE [ _ctx OF (tptr t_struct_aesctx), _key OF (tptr tuchar), _keybits OF tuint  ]
      PROP (writable_share ctx_sh; readable_share key_sh; readable_share ish;
            Zlength key_chars = 32;
            init_done = 1 )
      LOCAL (temp _ctx ctx; temp _key key; temp _keybits (Vint (Int.repr 256)); 
             gvars gv)
      SEP (data_at ctx_sh t_struct_aesctx 
                   (Vint Int.zero,
                   (nullval, 
                   (map Vint (repeat_op_table 68 Int.zero id)))) ctx;
           data_at key_sh (tarray tuchar (4*8)) (map Vint (map Int.repr key_chars)) key;
           
           data_at ish tint (Vint (Int.repr init_done)) (gv _aes_init_done);
           tables_initialized (gv _tables))
    POST [  tint ]
      PROP () 
      LOCAL (temp ret_temp (Vint Int.zero))
      SEP (data_at key_sh (tarray tuchar (4*8)) (map Vint (map Int.repr key_chars)) key;
           data_at ctx_sh t_struct_aesctx 
                   (Vint (Int.repr 14),
                   ((field_address t_struct_aesctx [StructField _buf] ctx), 
                   (map Vint (KeyExpansion2 (key_bytes_to_key_words key_chars))
                    ++ (repeat_op_table 4 (Vint Int.zero) id)))) ctx;
           data_at ish tint (Vint (Int.repr init_done)) (gv _aes_init_done);
           tables_initialized (gv _tables)).

Definition encryption_spec_ll :=
  DECLARE _mbedtls_aes_encrypt
  WITH ctx : val, input : val, output : val, 
       ctx_sh : share, in_sh : share, out_sh : share, 
       plaintext : list Z, 
       exp_key : list Z, 
       gv: globals 
  PRE [ _ctx OF (tptr t_struct_aesctx), _input OF (tptr tuchar), _output OF (tptr tuchar) ]
    PROP (Zlength plaintext = 16; Zlength exp_key = 60;
          readable_share ctx_sh; readable_share in_sh; writable_share out_sh)
    LOCAL (temp _ctx ctx; temp _input input; temp _output output; gvars gv)
    SEP (data_at ctx_sh (t_struct_aesctx) (
          (Vint (Int.repr Nr)),
          ((field_address t_struct_aesctx [StructField _buf] ctx),
          (map Vint (map Int.repr (exp_key ++ (list_repeat (8%nat) 0)))))
          
         ) ctx;
         data_at in_sh (tarray tuchar 16) (map Vint (map Int.repr plaintext)) input;
         data_at_ out_sh (tarray tuchar 16) output;
         tables_initialized (gv _tables))
  POST [ tvoid ]
    PROP() LOCAL()
    SEP (data_at ctx_sh (t_struct_aesctx) (
          (Vint (Int.repr Nr)),
          ((field_address t_struct_aesctx [StructField _buf] ctx),
          (map Vint (map Int.repr (exp_key ++ (list_repeat (8%nat) 0)))))
         ) ctx;
         data_at in_sh  (tarray tuchar 16)
                 (map Vint (map Int.repr plaintext)) input;
         data_at out_sh (tarray tuchar 16)
                 (map Vint (mbed_tls_aes_enc plaintext (exp_key ++ (list_repeat (8%nat) 0)))) output;
         tables_initialized (gv _tables)).

Definition Gprog : funspecs := ltac:(with_library prog [
  gen_tables_spec; key_expansion_spec; encryption_spec_ll
]).

Global Opaque field_address.

Arguments col _ _ : simpl never.

Arguments Z.land _ _ : simpl never.

Arguments Nat.sub _ _ : simpl never. *)

Require Import aes.bitfiddling.
(* aes.bitfiddling:
Require Export aes.conv_HL_to_LL.
Local Open Scope Z.

Lemma byte0_word_to_int: forall b0 b1 b2 b3,
  byte0 (word_to_int (b0, b1, b2, b3)) = Int.unsigned b0.

Lemma byte1_word_to_int: forall b0 b1 b2 b3,
  byte1 (word_to_int (b0, b1, b2, b3)) = Int.unsigned b1.

Lemma byte2_word_to_int: forall b0 b1 b2 b3,
  byte2 (word_to_int (b0, b1, b2, b3)) = Int.unsigned b2.

Lemma byte3_word_to_int: forall b0 b1 b2 b3,
  byte3 (word_to_int (b0, b1, b2, b3)) = Int.unsigned b3.

Lemma xor_byte0_with_FSb: forall b0 b1 b2 b3 i,
  Int.xor (word_to_int (b0, b1, b2, b3)) (Znth i tablesLL.FSb)

Lemma xor_byte1_with_FSb: forall b0 b1 b2 b3 i,
  Int.xor (word_to_int (b0, b1, b2, b3)) (Int.shl (Znth i tablesLL.FSb) (Int.repr 8))

Lemma xor_byte2_with_FSb: forall b0 b1 b2 b3 i,
  Int.xor (word_to_int (b0, b1, b2, b3)) (Int.shl (Znth i tablesLL.FSb) (Int.repr 16))

Lemma xor_byte3_with_FSb: forall b0 b1 b2 b3 i,
  Int.xor (word_to_int (b0, b1, b2, b3)) (Int.shl (Znth i tablesLL.FSb) (Int.repr 24))

Lemma equiv_sbox: forall b,
  Znth (Int.unsigned b) tablesLL.FSb = look_sbox b.

Lemma xor_word_to_int: forall a0 a1 a2 a3 b0 b1 b2 b3,
  Int.xor (word_to_int (a0, a1, a2, a3)) (word_to_int (b0, b1, b2, b3))

Lemma rot8_word_to_int: forall b0 b1 b2 b3,
  rot8 (word_to_int (b0, b1, b2, b3)) = word_to_int (b3, b0, b1, b2).

Lemma mask_byte_nop: forall i,
  0 <= Int.unsigned i < 256 ->

Lemma FSb_range: forall i,
  0 <= Int.unsigned (Znth i FSb) < 256.

Lemma zero_ext_nop: forall i,
  0 <= (Int.unsigned i) < 256 ->

Lemma FSb_inj: forall i j,
  0 <= i < 256 ->
  0 <= j < 256 ->
  Znth i FSb = Znth j FSb ->
  i = j.

Lemma FSb_RSb_id: forall j,
  0 <= j < 256 ->
  j = Int.unsigned (Znth (Int.unsigned (Znth j RSb)) FSb).

Lemma RSb_inj: forall i j,
  0 <= i < 256 ->
  0 <= j < 256 ->
  Znth i RSb = Znth j RSb ->
  i = j.

Lemma RSb_range: forall i,
  0 <= Int.unsigned (Znth i RSb) < 256.

Lemma xor_is_or_4_bytes: forall b0 b1 b2 b3,
  (Int.xor (Int.xor (Int.xor b0

Lemma masked_byte_range: forall i,
  0 <= Z.land i 255 < 256.

Lemma zero_ext_mask: forall i,
  Int.zero_ext 8 i = Int.and i (Int.repr 255). *)

Open Scope Z.



Definition round_column_ast rk b0 b1 b2 b3 t Y X0 X1 X2 X3 := 

(Ssequence (Sset t (Etempvar _RK (tptr tuint)))

   (Ssequence

      (Sset _RK

         (Ebinop Oadd (Etempvar t (tptr tuint))

            (Econst_int (Int.repr 1) tint) (tptr tuint)))

      (Ssequence (Sset rk (Ederef (Etempvar t (tptr tuint)) tuint))

         (Ssequence

            (Sset b0

               (Ederef

                  (Ebinop Oadd

                     (Efield

                        (Evar _tables t_struct_tables)

                        _FT0 (tarray tuint 256))

                     (Ebinop Oand (Etempvar X0 tuint)

                        (Econst_int (Int.repr 255) tint) tuint) (tptr tuint))

                  tuint))

            (Ssequence

               (Sset b1

                  (Ederef

                     (Ebinop Oadd

                        (Efield

                           (Evar _tables t_struct_tables)

                           _FT1 (tarray tuint 256))

                        (Ebinop Oand

                           (Ebinop Oshr (Etempvar X1 tuint)

                              (Econst_int (Int.repr 8) tint) tuint)

                           (Econst_int (Int.repr 255) tint) tuint)

                        (tptr tuint)) tuint))

               (Ssequence

                  (Sset b2

                     (Ederef

                        (Ebinop Oadd

                           (Efield

                              (Evar _tables

                                 t_struct_tables) _FT2

                              (tarray tuint 256))

                           (Ebinop Oand

                              (Ebinop Oshr (Etempvar X2 tuint)

                                 (Econst_int (Int.repr 16) tint) tuint)

                              (Econst_int (Int.repr 255) tint) tuint)

                           (tptr tuint)) tuint))

                  (Ssequence

                     (Sset b3

                        (Ederef

                           (Ebinop Oadd

                              (Efield

                                 (Evar _tables

                                    t_struct_tables) _FT3

                                 (tarray tuint 256))

                              (Ebinop Oand

                                 (Ebinop Oshr (Etempvar X3 tuint)

                                    (Econst_int (Int.repr 24) tint) tuint)

                                 (Econst_int (Int.repr 255) tint) tuint)

                              (tptr tuint)) tuint))

                     (Sset Y

                        (Ebinop Oxor

                           (Ebinop Oxor

                              (Ebinop Oxor

                                 (Ebinop Oxor (Etempvar rk tuint)

                                    (Etempvar b0 tuint) tuint)

                                 (Etempvar b1 tuint) tuint)

                              (Etempvar b2 tuint) tuint)

                           (Etempvar b3 tuint) tuint))))))))).



Axiom Test: forall (P: Prop), P.



Lemma encryption_loop_body_proof: forall

  (Espec : OracleKind)

  (ctx input output : val)

  (ctx_sh in_sh out_sh : share)

  (plaintext exp_key : list Z)

  (tables : val)

  (H : Zlength plaintext = 16)

  (H0 : Zlength exp_key = 60)

  (SH : readable_share ctx_sh)

  (SH0 : readable_share in_sh)

  (SH1 : writable_share out_sh)

  (buf : list Z)

  (Heqbuf : buf = exp_key ++ list_repeat 8 0)

  (Fctx : field_compatible t_struct_aesctx [StructField _buf] ctx)

  (LenBuf : Zlength buf = 68)

  (Eq : forall i : Z,

     0 <= i < 60 ->

     force_val

       (sem_add_pi tuint

          (field_address t_struct_aesctx [ArraySubsc i; StructField _buf] ctx)

          (Vint (Int.repr 1))) =

     field_address t_struct_aesctx [ArraySubsc (i + 1); StructField _buf] ctx)

  (S0 S' : four_ints)

  (i : Z)

  (H1 : 0 < i <= 6)

  (HeqS0 : S0 = mbed_tls_initial_add_round_key plaintext buf)

  (HeqS' : S' = mbed_tls_fround (mbed_tls_enc_rounds (12-2*Z.to_nat i) S0 buf 4) buf (52-i*8)),

semax

  (initialized_list

     [_i; _RK; _X0; _X1; _X2; _X3; _tmp; _b0; _b1; _b2; _b3; _b0__1; _b1__1;

     _b2__1; _b3__1; _b0__2; _b1__2; _b2__2; _b3__2; _b0__3; _b1__3; _b2__3;

     _b3__3; _t'4; _t'3; _t'2; _t'1]

     (func_tycontext f_mbedtls_aes_encrypt Vprog Gprog))

  (PROP ( )

   LOCAL (temp _RK

            (field_address t_struct_aesctx

               [ArraySubsc (52 - i * 8); StructField _buf] ctx);

   temp _X3

     (Vint (col 3 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

   temp _X2

     (Vint (col 2 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

   temp _X1

     (Vint (col 1 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

   temp _X0

     (Vint (col 0 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

   gvar _tables tables)

   SEP (data_at_ out_sh (tarray tuchar 16) output;

   data_at Ews t_struct_tables

     (map Vint FSb,

     (map Vint FT0,

     (map Vint FT1,

     (map Vint FT2,

     (map Vint FT3,

     (map Vint RSb,

     (map Vint RT0,

     (map Vint RT1, (map Vint RT2, (map Vint RT3, map Vint RCON))))))))))

     tables;

   data_at in_sh (tarray tuchar 16) (map Vint (map Int.repr plaintext)) input;

   data_at ctx_sh t_struct_aesctx

     (Vint (Int.repr Nr),

     (field_address t_struct_aesctx [ArraySubsc 0; StructField _buf] ctx,

     map Vint (map Int.repr buf))) ctx))

  (round_column_ast _rk _b0__4 _b1__4 _b2__4 _b3__4 _t'5 _Y0 _X0 _X1 _X2 _X3)

  (normal_ret_assert (PROP ( )

  LOCAL (

    temp _Y0 (Vint (col 0 S'));

    temp _RK (field_address t_struct_aesctx [ArraySubsc (52 - i * 8 + 1); StructField _buf] ctx);

    temp _X3 (Vint (col 3 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

    temp _X2 (Vint (col 2 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

    temp _X1 (Vint (col 1 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

    temp _X0 (Vint (col 0 (mbed_tls_enc_rounds (12 - 2 * Z.to_nat i) S0 buf 4)));

    gvar _tables tables

  ) SEP (

    data_at_ out_sh (tarray tuchar 16) output;

    data_at Ews t_struct_tables

      (map Vint FSb,

      (map Vint FT0,

      (map Vint FT1,

      (map Vint FT2,

      (map Vint FT3,

      (map Vint RSb,

      (map Vint RT0,

      (map Vint RT1, (map Vint RT2, (map Vint RT3, map Vint RCON)))))))))) tables;

    data_at in_sh (tarray tuchar 16) (map Vint (map Int.repr plaintext)) input;

    data_at ctx_sh t_struct_aesctx

      (Vint (Int.repr Nr),

      (field_address t_struct_aesctx [ArraySubsc 0; StructField _buf] ctx,

      map Vint (map Int.repr buf))) ctx

   ))).

Proof.

  intros. unfold round_column_ast.

  forward.

  apply Test.

Time Qed. 



