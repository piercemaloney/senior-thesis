Require Import VST.floyd.proofauto. 
(* VST.floyd.proofauto:
From compcert Require Export common.AST cfrontend.Ctypes cfrontend.Clight.
Export Cop.
Require Export VST.floyd.base2.
Require Export VST.floyd.functional_base.
Require Export VST.floyd.client_lemmas.
Require Export VST.floyd.go_lower.
Require Export VST.floyd.closed_lemmas.
Require Export VST.floyd.compare_lemmas.
Require Export VST.floyd.semax_tactics.
Require Export VST.floyd.forward.
Require Export VST.floyd.subsume_funspec.
Require Export VST.floyd.call_lemmas.
Require Export VST.floyd.forward_lemmas.
Require Export VST.floyd.for_lemmas.
Require Export VST.floyd.nested_pred_lemmas.
Require Export VST.floyd.nested_field_lemmas.
Require Export VST.floyd.efield_lemmas.
Require Export VST.floyd.mapsto_memory_block.
Require Export VST.floyd.aggregate_type.
Require VST.floyd.aggregate_pred. Export floyd.aggregate_pred.aggregate_pred.
Require Export VST.floyd.reptype_lemmas.
Require Export VST.floyd.simpl_reptype.
Require Export VST.floyd.data_at_rec_lemmas.
Require Export VST.floyd.field_at.
Require Export VST.floyd.field_at_wand.
Require Export VST.floyd.field_compat.
Require Export VST.floyd.stronger.
Require Export VST.floyd.loadstore_mapsto.
Require Export VST.floyd.loadstore_field_at.
Require Export VST.floyd.nested_loadstore.
Require Export VST.floyd.local2ptree_denote.
Require Export VST.floyd.local2ptree_eval.
Require Export VST.floyd.local2ptree_typecheck.
Require Export VST.floyd.proj_reptype_lemmas.
Require Export VST.floyd.replace_refill_reptype_lemmas.
Require Export VST.floyd.sc_set_load_store.
Require Export VST.floyd.unfold_data_at.
Require Export VST.floyd.entailer.
Require Export VST.floyd.globals_lemmas.
Require Export VST.floyd.diagnosis.
Require Export VST.floyd.freezer.
Require Export VST.floyd.deadvars.
Require Export VST.floyd.hints.
Require Export VST.floyd.Clightnotations.
Require VST.msl.iter_sepcon.
Require VST.msl.wand_frame.
Require VST.msl.wandQ_frame.

Arguments semax {CS} {Espec} Delta Pre%assert cmd%C Post%assert.
Export ListNotations.
Export Clight_Cop2.

Hint Rewrite add_repr mul_repr sub_repr : entailer_rewrite.
Hint Rewrite ptrofs_add_repr ptrofs_mul_repr ptrofs_sub_repr : entailer_rewrite.
Hint Rewrite mul64_repr add64_repr sub64_repr or64_repr and64_repr : entailer_rewrite.
Hint Rewrite neg_repr neg64_repr : entailer_rewrite.
Hint Rewrite ptrofs_to_int_repr: entailer_rewrite norm.

Lemma Vptrofs_unfold_false: 
Archi.ptr64 = false -> Vptrofs = fun x => Vint (Ptrofs.to_int x).

Lemma Vptrofs_unfold_true: 
Archi.ptr64 = true -> Vptrofs = fun x => Vlong (Ptrofs.to_int64 x).

Lemma modu_repr: forall x y, 
   0 <= x <= Int.max_unsigned ->
Hint Rewrite modu_repr using rep_omega : entailer_rewrite norm.

Hint Rewrite Vptrofs_unfold_false using reflexivity: entailer_rewrite norm.
Hint Rewrite Vptrofs_unfold_true using reflexivity: entailer_rewrite norm.

Hint Extern 1 (Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef) => reflexivity : cancel.
Hint Extern 1 (list_repeat _ Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = list_repeat _ Vundef) => reflexivity : cancel.
Hint Extern 1 (Vundef :: _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef :: _) => reflexivity : cancel.
Hint Extern 1 (@nil _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = @nil _) => reflexivity : cancel.

Instance Inhabitant_mpred : Inhabitant mpred := @FF mpred Nveric.
Instance Inhabitant_share : Inhabitant share := Share.bot.

Arguments deref_noload ty v / .
Arguments nested_field_array_type {cs} t gfs lo hi / .
Arguments nested_field_type {cs} t gfs / .  
Arguments nested_field_offset {cs} t gfs / .  
Arguments Z.mul !x !y.
Arguments Z.sub !m !n.
Arguments Z.add !x !y.
Global Transparent peq.
Global Transparent Archi.ptr64.

Ltac step :=
first [ progress Intros
       | let x := fresh "x" in Intros x
       | forward
       | forward_if
       | forward_call
       | rep_omega | cstring' | list_solve
       | EExists
       | progress (autorewrite with sublist in *|-)
       | progress (autorewrite with sublist)
       | progress (autorewrite with norm)
       | cstring1
       | deadvars!
       | progress_entailer
       ]. *)

Require Import VST.progs.bin_search. 
(* VST.progs.bin_search:
From Coq Require Import String List ZArith.
From compcert Require Import Coqlib Integers Floats AST Ctypes Cop Clight Clightdefs.
Local Open Scope Z_scope.

Module Info.
  Definition version := "3.3"%string.
  Definition build_number := ""%string.
  Definition build_tag := ""%string.
  Definition arch := "x86"%string.
  Definition model := "32sse2"%string.
  Definition abi := "standard"%string.
  Definition bitsize := 32.
  Definition big_endian := false.
  Definition source_file := "progs/bin_search.c"%string.
  Definition normalized := true.
End Info.

Definition ___builtin_ais_annot : ident := 1%positive.
Definition ___builtin_annot : ident := 8%positive.
Definition ___builtin_annot_intval : ident := 9%positive.
Definition ___builtin_bswap : ident := 2%positive.
Definition ___builtin_bswap16 : ident := 4%positive.
Definition ___builtin_bswap32 : ident := 3%positive.
Definition ___builtin_bswap64 : ident := 34%positive.
Definition ___builtin_clz : ident := 35%positive.
Definition ___builtin_clzl : ident := 36%positive.
Definition ___builtin_clzll : ident := 37%positive.
Definition ___builtin_ctz : ident := 38%positive.
Definition ___builtin_ctzl : ident := 39%positive.
Definition ___builtin_ctzll : ident := 40%positive.
Definition ___builtin_debug : ident := 52%positive.
Definition ___builtin_fabs : ident := 5%positive.
Definition ___builtin_fmadd : ident := 43%positive.
Definition ___builtin_fmax : ident := 41%positive.
Definition ___builtin_fmin : ident := 42%positive.
Definition ___builtin_fmsub : ident := 44%positive.
Definition ___builtin_fnmadd : ident := 45%positive.
Definition ___builtin_fnmsub : ident := 46%positive.
Definition ___builtin_fsqrt : ident := 6%positive.
Definition ___builtin_membar : ident := 10%positive.
Definition ___builtin_memcpy_aligned : ident := 7%positive.
Definition ___builtin_nop : ident := 51%positive.
Definition ___builtin_read16_reversed : ident := 47%positive.
Definition ___builtin_read32_reversed : ident := 48%positive.
Definition ___builtin_va_arg : ident := 12%positive.
Definition ___builtin_va_copy : ident := 13%positive.
Definition ___builtin_va_end : ident := 14%positive.
Definition ___builtin_va_start : ident := 11%positive.
Definition ___builtin_write16_reversed : ident := 49%positive.
Definition ___builtin_write32_reversed : ident := 50%positive.
Definition ___compcert_i64_dtos : ident := 19%positive.
Definition ___compcert_i64_dtou : ident := 20%positive.
Definition ___compcert_i64_sar : ident := 31%positive.
Definition ___compcert_i64_sdiv : ident := 25%positive.
Definition ___compcert_i64_shl : ident := 29%positive.
Definition ___compcert_i64_shr : ident := 30%positive.
Definition ___compcert_i64_smod : ident := 27%positive.
Definition ___compcert_i64_smulh : ident := 32%positive.
Definition ___compcert_i64_stod : ident := 21%positive.
Definition ___compcert_i64_stof : ident := 23%positive.
Definition ___compcert_i64_udiv : ident := 26%positive.
Definition ___compcert_i64_umod : ident := 28%positive.
Definition ___compcert_i64_umulh : ident := 33%positive.
Definition ___compcert_i64_utod : ident := 22%positive.
Definition ___compcert_i64_utof : ident := 24%positive.
Definition ___compcert_va_composite : ident := 18%positive.
Definition ___compcert_va_float64 : ident := 17%positive.
Definition ___compcert_va_int32 : ident := 15%positive.
Definition ___compcert_va_int64 : ident := 16%positive.
Definition _a : ident := 53%positive.
Definition _four : ident := 60%positive.
Definition _hi : ident := 56%positive.
Definition _lo : ident := 55%positive.
Definition _main : ident := 62%positive.
Definition _mid : ident := 57%positive.
Definition _s : ident := 61%positive.
Definition _search : ident := 59%positive.
Definition _tgt : ident := 54%positive.
Definition _val : ident := 58%positive.
Definition _t'1 : ident := 63%positive.

Definition f_search := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := ((_a, (tptr tint)) :: (_tgt, tint) :: (_lo, tint) ::
                (_hi, tint) :: nil);
  fn_vars := nil;
  fn_temps := ((_mid, tint) :: (_val, tint) :: nil);
  fn_body :=
(Ssequence
  (Swhile
    (Ebinop Olt (Etempvar _lo tint) (Etempvar _hi tint) tint)
    (Ssequence
      (Sset _mid
        (Ebinop Oshr
          (Ebinop Oadd (Etempvar _lo tint) (Etempvar _hi tint) tint)
          (Econst_int (Int.repr 1) tint) tint))
      (Ssequence
        (Sset _val
          (Ederef
            (Ebinop Oadd (Etempvar _a (tptr tint)) (Etempvar _mid tint)
              (tptr tint)) tint))
        (Sifthenelse (Ebinop Oeq (Etempvar _val tint) (Etempvar _tgt tint)
                       tint)
          (Sreturn (Some (Etempvar _mid tint)))
          (Sifthenelse (Ebinop Olt (Etempvar _val tint) (Etempvar _tgt tint)
                         tint)
            (Sset _lo
              (Ebinop Oadd (Etempvar _mid tint)
                (Econst_int (Int.repr 1) tint) tint))
            (Sset _hi (Etempvar _mid tint)))))))
  (Sreturn (Some (Eunop Oneg (Econst_int (Int.repr 1) tint) tint))))
|}.

Definition v_four := {|
  gvar_info := (tarray tint 4);
  gvar_init := (Init_int32 (Int.repr 1) :: Init_int32 (Int.repr 2) ::
                Init_int32 (Int.repr 3) :: Init_int32 (Int.repr 4) :: nil);
  gvar_readonly := false;
  gvar_volatile := false
|}.

Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := nil;
  fn_temps := ((_s, tint) :: (_t'1, tint) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Ssequence
      (Scall (Some _t'1)
        (Evar _search (Tfunction
                        (Tcons (tptr tint)
                          (Tcons tint (Tcons tint (Tcons tint Tnil)))) tint
                        cc_default))
        ((Evar _four (tarray tint 4)) :: (Econst_int (Int.repr 3) tint) ::
         (Econst_int (Int.repr 0) tint) :: (Econst_int (Int.repr 4) tint) ::
         nil))
      (Sset _s (Etempvar _t'1 tint)))
    (Sreturn (Some (Etempvar _s tint))))
  (Sreturn (Some (Econst_int (Int.repr 0) tint))))
|}.

Definition composites : list composite_definition :=
nil.

Definition global_definitions : list (ident * globdef fundef type) :=
((___builtin_ais_annot,
   Gfun(External (EF_builtin "__builtin_ais_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_bswap,
   Gfun(External (EF_builtin "__builtin_bswap"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap32,
   Gfun(External (EF_builtin "__builtin_bswap32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap16,
   Gfun(External (EF_builtin "__builtin_bswap16"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tushort Tnil) tushort cc_default)) ::
 (___builtin_fabs,
   Gfun(External (EF_builtin "__builtin_fabs"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_fsqrt,
   Gfun(External (EF_builtin "__builtin_fsqrt"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_memcpy_aligned,
   Gfun(External (EF_builtin "__builtin_memcpy_aligned"
                   (mksignature
                     (AST.Tint :: AST.Tint :: AST.Tint :: AST.Tint :: nil)
                     None cc_default))
     (Tcons (tptr tvoid)
       (Tcons (tptr tvoid) (Tcons tuint (Tcons tuint Tnil)))) tvoid
     cc_default)) ::
 (___builtin_annot,
   Gfun(External (EF_builtin "__builtin_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_annot_intval,
   Gfun(External (EF_builtin "__builtin_annot_intval"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tschar) (Tcons tint Tnil))
     tint cc_default)) ::
 (___builtin_membar,
   Gfun(External (EF_builtin "__builtin_membar"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_va_start,
   Gfun(External (EF_builtin "__builtin_va_start"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___builtin_va_arg,
   Gfun(External (EF_builtin "__builtin_va_arg"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_va_copy,
   Gfun(External (EF_builtin "__builtin_va_copy"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default))
     (Tcons (tptr tvoid) (Tcons (tptr tvoid) Tnil)) tvoid cc_default)) ::
 (___builtin_va_end,
   Gfun(External (EF_builtin "__builtin_va_end"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___compcert_va_int32,
   Gfun(External (EF_external "__compcert_va_int32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tvoid) Tnil) tuint cc_default)) ::
 (___compcert_va_int64,
   Gfun(External (EF_external "__compcert_va_int64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tulong
     cc_default)) ::
 (___compcert_va_float64,
   Gfun(External (EF_external "__compcert_va_float64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tdouble
     cc_default)) ::
 (___compcert_va_composite,
   Gfun(External (EF_external "__compcert_va_composite"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     (tptr tvoid) cc_default)) ::
 (___compcert_i64_dtos,
   Gfun(External (EF_runtime "__compcert_i64_dtos"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tlong cc_default)) ::
 (___compcert_i64_dtou,
   Gfun(External (EF_runtime "__compcert_i64_dtou"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tulong cc_default)) ::
 (___compcert_i64_stod,
   Gfun(External (EF_runtime "__compcert_i64_stod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tlong Tnil) tdouble cc_default)) ::
 (___compcert_i64_utod,
   Gfun(External (EF_runtime "__compcert_i64_utod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tulong Tnil) tdouble cc_default)) ::
 (___compcert_i64_stof,
   Gfun(External (EF_runtime "__compcert_i64_stof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tlong Tnil) tfloat cc_default)) ::
 (___compcert_i64_utof,
   Gfun(External (EF_runtime "__compcert_i64_utof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tulong Tnil) tfloat cc_default)) ::
 (___compcert_i64_sdiv,
   Gfun(External (EF_runtime "__compcert_i64_sdiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_udiv,
   Gfun(External (EF_runtime "__compcert_i64_udiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_smod,
   Gfun(External (EF_runtime "__compcert_i64_smod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umod,
   Gfun(External (EF_runtime "__compcert_i64_umod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_shl,
   Gfun(External (EF_runtime "__compcert_i64_shl"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_shr,
   Gfun(External (EF_runtime "__compcert_i64_shr"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tint Tnil)) tulong cc_default)) ::
 (___compcert_i64_sar,
   Gfun(External (EF_runtime "__compcert_i64_sar"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_smulh,
   Gfun(External (EF_runtime "__compcert_i64_smulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umulh,
   Gfun(External (EF_runtime "__compcert_i64_umulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___builtin_bswap64,
   Gfun(External (EF_builtin "__builtin_bswap64"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tulong Tnil) tulong cc_default)) ::
 (___builtin_clz,
   Gfun(External (EF_builtin "__builtin_clz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzl,
   Gfun(External (EF_builtin "__builtin_clzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzll,
   Gfun(External (EF_builtin "__builtin_clzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_ctz,
   Gfun(External (EF_builtin "__builtin_ctz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzl,
   Gfun(External (EF_builtin "__builtin_ctzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzll,
   Gfun(External (EF_builtin "__builtin_ctzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_fmax,
   Gfun(External (EF_builtin "__builtin_fmax"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmin,
   Gfun(External (EF_builtin "__builtin_fmin"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmadd,
   Gfun(External (EF_builtin "__builtin_fmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fmsub,
   Gfun(External (EF_builtin "__builtin_fmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmadd,
   Gfun(External (EF_builtin "__builtin_fnmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmsub,
   Gfun(External (EF_builtin "__builtin_fnmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_read16_reversed,
   Gfun(External (EF_builtin "__builtin_read16_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tushort) Tnil) tushort cc_default)) ::
 (___builtin_read32_reversed,
   Gfun(External (EF_builtin "__builtin_read32_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tuint) Tnil) tuint cc_default)) ::
 (___builtin_write16_reversed,
   Gfun(External (EF_builtin "__builtin_write16_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tushort) (Tcons tushort Tnil))
     tvoid cc_default)) ::
 (___builtin_write32_reversed,
   Gfun(External (EF_builtin "__builtin_write32_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tuint) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_nop,
   Gfun(External (EF_builtin "__builtin_nop"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_debug,
   Gfun(External (EF_external "__builtin_debug"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons tint Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (_search, Gfun(Internal f_search)) :: (_four, Gvar v_four) ::
 (_main, Gfun(Internal f_main)) :: nil).

Definition public_idents : list ident :=
(_main :: _four :: _search :: ___builtin_debug :: ___builtin_nop ::
 ___builtin_write32_reversed :: ___builtin_write16_reversed ::
 ___builtin_read32_reversed :: ___builtin_read16_reversed ::
 ___builtin_fnmsub :: ___builtin_fnmadd :: ___builtin_fmsub ::
 ___builtin_fmadd :: ___builtin_fmin :: ___builtin_fmax ::
 ___builtin_ctzll :: ___builtin_ctzl :: ___builtin_ctz :: ___builtin_clzll ::
 ___builtin_clzl :: ___builtin_clz :: ___builtin_bswap64 ::
 ___compcert_i64_umulh :: ___compcert_i64_smulh :: ___compcert_i64_sar ::
 ___compcert_i64_shr :: ___compcert_i64_shl :: ___compcert_i64_umod ::
 ___compcert_i64_smod :: ___compcert_i64_udiv :: ___compcert_i64_sdiv ::
 ___compcert_i64_utof :: ___compcert_i64_stof :: ___compcert_i64_utod ::
 ___compcert_i64_stod :: ___compcert_i64_dtou :: ___compcert_i64_dtos ::
 ___compcert_va_composite :: ___compcert_va_float64 ::
 ___compcert_va_int64 :: ___compcert_va_int32 :: ___builtin_va_end ::
 ___builtin_va_copy :: ___builtin_va_arg :: ___builtin_va_start ::
 ___builtin_membar :: ___builtin_annot_intval :: ___builtin_annot ::
 ___builtin_memcpy_aligned :: ___builtin_fsqrt :: ___builtin_fabs ::
 ___builtin_bswap16 :: ___builtin_bswap32 :: ___builtin_bswap ::
 ___builtin_ais_annot :: nil).

Definition prog : Clight.program := 
  mkprogram composites global_definitions public_idents _main Logic.I. *)



Instance CompSpecs : compspecs. make_compspecs prog. Defined.

Definition Vprog : varspecs.  mk_varspecs prog. Defined.



Fixpoint sorted (l : list Z) : Prop :=

  match l with

  | [] => True

  | x::rest =>

    match rest with [] => True | y::_ =>  x <= y /\ sorted rest end

  end.



Definition search_spec :=

 DECLARE _search

  WITH a: val, sh : share, contents : list Z, tgt : Z, lo : Z, hi : Z

  PRE [ _a OF (tptr tint), _tgt OF tint, _lo OF tint, _hi OF tint ]

            PROP  (readable_share sh;

                     0 <= lo <= Int.max_signed; 

                     hi <= Zlength contents <= Int.max_signed;

                     Int.min_signed <= hi <= Int.max_signed / 2;

                     sorted contents;

                     Forall (fun x => Int.min_signed <= x <= Int.max_signed) contents;

                     Int.min_signed <= tgt <= Int.max_signed)

                  LOCAL (temp _a a; temp _tgt (Vint (Int.repr tgt));

                         temp _lo (Vint (Int.repr lo)); temp _hi (Vint (Int.repr hi)))

          SEP   (data_at sh (tarray tint (Zlength contents)) (map Vint (map Int.repr contents)) a)

  POST [ tint ]

    EX i:Z,

         PROP (if in_dec Z.eq_dec tgt (sublist lo hi contents) then Znth i contents = tgt else i = -1)

          LOCAL (temp ret_temp  (Vint (Int.repr i)))

           SEP (data_at sh (tarray tint (Zlength contents)) (map Vint (map Int.repr contents)) a).



Definition main_spec :=

 DECLARE _main

  WITH gv: globals

  PRE  [] main_pre prog nil gv

  POST [ tint ] main_post prog nil gv.



Definition Gprog : funspecs :=

        ltac:(with_library prog [search_spec; main_spec]).



Lemma sublist_nil1 : forall A i j (l : list A), j <= i -> sublist i j l = [].

Proof.

  intros; destruct (eq_dec i j).

  - subst; apply sublist_nil.

  - unfold sublist; rewrite Z2Nat_neg; auto; omega.

Qed.



Lemma Znth_In : forall A (d: Inhabitant A) i (l : list A) x (Hrange : 0 <= i < Zlength l)

                       (Hnth : Znth i l = x), In x l.

Proof.

  unfold Znth; intros.

  destruct (zlt i 0); [omega|].

  subst; apply nth_In.

  rewrite Zlength_correct in Hrange; auto.

  rep_omega.

Qed.



Lemma In_Znth : forall A (d: Inhabitant A) (l : list A) x,

    In x l ->

    exists i, 0 <= i < Zlength l /\ Znth i l = x.

Proof.

  unfold Znth; intros.

  apply In_nth with (d := d) in H; destruct H as (n & ? & ?).

  exists (Z.of_nat n); split.

  - rewrite Zlength_correct; omega.

  - destruct (zlt (Z.of_nat n) 0); [omega|].

    rewrite Nat2Z.id; auto.

Qed.



Lemma sublist_of_nil : forall A i j, sublist i j (nil : list A) = [].

Proof.

  intros; unfold sublist.

  rewrite skipn_nil, firstn_nil; auto.

Qed.



Fixpoint sorted2 l :=

  match l with

  | [] => True

  | x :: rest => Forall (fun y => x <= y) rest /\ sorted2 rest

  end.



Lemma sorted_equiv : forall l, sorted l <-> sorted2 l.

Proof.

  induction l; simpl.

  - reflexivity.

  - destruct l.

    + simpl; split; auto.

    + rewrite IHl; simpl; split; intros (? & Hall & ?); split3; auto.

       * constructor; auto.

          rewrite Forall_forall in *; intros ? Hin.

          specialize (Hall _ Hin); omega.

       * inversion H. auto.

Qed.



Lemma sorted_mono : forall l i j (Hsort : sorted l) (Hi : 0 <= i <= j)

                           (Hj : j < Zlength l),

    Znth i l <= Znth j l.

Proof.

induction l; intros.

* rewrite !Znth_nil. omega.

* 

 rewrite sorted_equiv in Hsort. destruct Hsort as [H9 Hsort].

 rewrite <- sorted_equiv in Hsort. rewrite Forall_forall in H9.

 rewrite Zlength_cons in Hj.

 destruct (zeq i 0).

 +

   subst i; rewrite Znth_0_cons. 

   destruct (zeq j 0).

   - subst j. rewrite Znth_0_cons. omega.

   - rewrite Znth_pos_cons by omega.

      apply H9.

      eapply Znth_In; [ | reflexivity]; omega.

 +

    rewrite !Znth_pos_cons by omega.

    apply IHl; auto; omega.

Qed.



Lemma In_sorted_range : forall lo hi x l (Hsort : sorted l) (Hlo : 0 <= lo <= hi)

                              (Hhi : hi <= Zlength l)

                              (Hin : In x (sublist lo hi l)),

    Znth lo l <= x <= Znth (hi - 1) l.

Proof.

  intros.

  generalize (In_Znth _ _ _ _ Hin); intros (i & Hrange & Hi).

  rewrite Zlength_sublist in Hrange by auto.

  rewrite Znth_sublist in Hi by omega.

  subst; split; apply sorted_mono; auto; omega.

Qed.



Lemma In_sorted_gt : forall x i n l lo hi (Hsort : sorted l) (Hlo : lo >= 0)

                            (Hhi : hi <= Zlength l)

                            (Hin : In x (sublist lo hi l))

                            (Hi : lo <= i < hi) (Hn : Znth i l = n)

                            (Hgt : n < x),

    In x (sublist (i + 1) hi l).

Proof.

  intros.

  rewrite sublist_split with (mid := i + 1) in Hin; try omega.

  rewrite in_app in Hin; destruct Hin; auto.

  generalize (In_sorted_range lo (i + 1) x _ Hsort); intro X.

  repeat (lapply X; [clear X; intro X | omega]).

  replace (i + 1 - 1) with i in X by omega.

  specialize (X H); subst; omega.

Qed.



Lemma In_sorted_lt : forall x i n l lo hi (Hsort : sorted l) (Hlo : lo >= 0)

                            (Hhi : hi <= Zlength l)

                            (Hin : In x (sublist lo hi l))

                            (Hi : lo <= i < hi) (Hn : Znth i l = n)

                            (Hgt : x < n),

    In x (sublist lo i l).

Proof.

  intros.

  rewrite sublist_split with (mid := i) in Hin; try omega.

  rewrite in_app in Hin; destruct Hin; auto.

  generalize (In_sorted_range i hi x _ Hsort); intro X.

  repeat (lapply X; [clear X; intro X | omega]).

  specialize (X H); subst; omega.

Qed.



Lemma Znth_In_sublist : forall A (d: Inhabitant A) i (l : list A) lo hi

  (Hlo : 0 <= lo <= i) (Hhi : i < hi <= Zlength l),

  In (Znth i l) (sublist lo hi l).

Proof.

  intros.

  apply Znth_In with (i := i - lo)(d := d).

  - rewrite Zlength_sublist; omega.

  - rewrite <- (Z.sub_simpl_r i lo) at 2.

    apply Znth_sublist; omega.

Qed.



Lemma sublist_In_sublist : forall A (l : list A) x lo hi lo' hi' (Hlo : 0 <= lo <= lo')

  (Hhi : hi' <= hi), In x (sublist lo' hi' l) -> In x (sublist lo hi l).

Proof.

  intros.

  apply sublist_In with (lo0 := lo' - lo)(hi0 := hi' - lo); rewrite sublist_sublist;

    try split; try omega.

  - repeat rewrite Z.sub_simpl_r; auto.

  - destruct (Z_le_dec hi' lo'); try omega.

    rewrite sublist_nil1 in *; auto; simpl in *; contradiction.

Qed.



Lemma body_search: semax_body Vprog Gprog f_search search_spec.

Proof.

 start_function.

 destruct H0.

 assert (H6 := Int.min_signed_neg).

 forward_while (EX lo' : Z, EX hi' : Z,

    PROP  (0 <= lo' <= Int.max_signed; 

           Int.min_signed <= hi' <= Int.max_signed / 2;

           hi' <= Zlength contents;

           In tgt (sublist lo hi contents) <-> In tgt (sublist lo' hi' contents))

    LOCAL (temp _a a; temp _tgt (Vint (Int.repr tgt));

           temp _lo (Vint (Int.repr lo')); temp _hi (Vint (Int.repr hi')))

    SEP   (data_at sh (tarray tint (Zlength contents))

                   (map Vint (map Int.repr contents)) a)).

 * Exists lo; Exists hi; entailer!.

 * entailer!.

 *

  match goal with H : _ <-> _ |- _ => rename H into H_tgt_sublist end.

  forward.   {

   entailer!.

   clear - H8 HRE H7.

   set (j := Int.max_signed / 2) in *; compute in j; subst j.

   set (j := Int.max_signed) in *; compute in j; subst j.

   set (j := Int.min_signed) in *; compute in j; subst j.

   omega.

 }

  rewrite add_repr, Int.shr_div_two_p.

  change (two_p (Int.unsigned (Int.repr 1))) with 2. 

  assert (Hlo'hi':  lo' + hi' <= Int.max_signed). {

   transitivity (Int.max_signed / 2 + Int.max_signed / 2).

   - apply Zplus_le_compat; omega.

   - rewrite Zplus_diag_eq_mult_2, Z.mul_comm. apply Z_mult_div_ge; omega.

  }

  rewrite !Int.signed_repr by omega.

  set (mid := (lo' + hi') / 2) in *.

  assert (H13: 0 <= mid < Zlength contents)

    by (subst; split; [apply Z_div_pos | apply Zdiv_lt_upper_bound]; omega).

  assert (H15: lo' <= mid < hi')

    by (split; [apply Zdiv_le_lower_bound | apply Zdiv_lt_upper_bound]; omega).

  assert (H16: Int.min_signed <= Znth mid contents <= Int.max_signed)

    by (rewrite Forall_forall in H3; apply H3; eapply Znth_In; eauto).

  clear H3 Hlo'hi' H H0 H1.

  clearbody mid.

  forward. 

  autorewrite with sublist.

  forward_if.

  - forward. 

    Exists mid; entailer!.

    rewrite if_true; auto. 

    rewrite H_tgt_sublist.

    apply Znth_In_sublist; omega.

  - forward_if.

    + forward. 

      Exists ((mid + 1), hi'); simpl fst; simpl snd; entailer!.

      rewrite H_tgt_sublist.

      split; intro Hin'.

      eapply In_sorted_gt; eauto; omega.

      eapply sublist_In_sublist; try apply Hin'; omega.

    + forward. 

      Exists (lo',mid). simpl fst. simpl snd. entailer!.

      rewrite H_tgt_sublist.

      split; intro Hin'.

      eapply In_sorted_lt; eauto; omega.

      eapply sublist_In_sublist; try apply Hin'; omega.

 *

    forward.  

    Exists (-1); entailer!.

    rewrite if_false; auto.

    match goal with H : _ <-> _ |- _ => rewrite H end.

    rewrite sublist_nil1 by omega.

    clear; simpl; tauto.

Qed.



Definition four_contents := [1; 2; 3; 4].



Lemma body_main:  semax_body Vprog Gprog f_main main_spec.

Proof.

  start_function.

  forward_call (gv _four,Ews,four_contents,3,0,4).

  { split. auto.

    change (Zlength four_contents) with 4.

    repeat constructor; computable.

  }

  Intro r; forward.

Qed.



Existing Instance NullExtension.Espec.



Lemma prog_correct:

  semax_prog prog Vprog Gprog.

Proof.

prove_semax_prog.

semax_func_cons body_search.

semax_func_cons body_main.

Qed.

