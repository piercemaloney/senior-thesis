Require Import VST.progs.io.
(* VST.progs.io:
From Coq Require Import String List ZArith.
From compcert Require Import Coqlib Integers Floats AST Ctypes Cop Clight Clightdefs.
Local Open Scope Z_scope.

Module Info.
  Definition version := "3.3"%string.
  Definition build_number := ""%string.
  Definition build_tag := ""%string.
  Definition arch := "x86"%string.
  Definition model := "32sse2"%string.
  Definition abi := "standard"%string.
  Definition bitsize := 32.
  Definition big_endian := false.
  Definition source_file := "progs/io.c"%string.
  Definition normalized := true.
End Info.

Definition ___builtin_ais_annot : ident := 1%positive.
Definition ___builtin_annot : ident := 8%positive.
Definition ___builtin_annot_intval : ident := 9%positive.
Definition ___builtin_bswap : ident := 2%positive.
Definition ___builtin_bswap16 : ident := 4%positive.
Definition ___builtin_bswap32 : ident := 3%positive.
Definition ___builtin_bswap64 : ident := 34%positive.
Definition ___builtin_clz : ident := 35%positive.
Definition ___builtin_clzl : ident := 36%positive.
Definition ___builtin_clzll : ident := 37%positive.
Definition ___builtin_ctz : ident := 38%positive.
Definition ___builtin_ctzl : ident := 39%positive.
Definition ___builtin_ctzll : ident := 40%positive.
Definition ___builtin_debug : ident := 52%positive.
Definition ___builtin_fabs : ident := 5%positive.
Definition ___builtin_fmadd : ident := 43%positive.
Definition ___builtin_fmax : ident := 41%positive.
Definition ___builtin_fmin : ident := 42%positive.
Definition ___builtin_fmsub : ident := 44%positive.
Definition ___builtin_fnmadd : ident := 45%positive.
Definition ___builtin_fnmsub : ident := 46%positive.
Definition ___builtin_fsqrt : ident := 6%positive.
Definition ___builtin_membar : ident := 10%positive.
Definition ___builtin_memcpy_aligned : ident := 7%positive.
Definition ___builtin_nop : ident := 51%positive.
Definition ___builtin_read16_reversed : ident := 47%positive.
Definition ___builtin_read32_reversed : ident := 48%positive.
Definition ___builtin_va_arg : ident := 12%positive.
Definition ___builtin_va_copy : ident := 13%positive.
Definition ___builtin_va_end : ident := 14%positive.
Definition ___builtin_va_start : ident := 11%positive.
Definition ___builtin_write16_reversed : ident := 49%positive.
Definition ___builtin_write32_reversed : ident := 50%positive.
Definition ___compcert_i64_dtos : ident := 19%positive.
Definition ___compcert_i64_dtou : ident := 20%positive.
Definition ___compcert_i64_sar : ident := 31%positive.
Definition ___compcert_i64_sdiv : ident := 25%positive.
Definition ___compcert_i64_shl : ident := 29%positive.
Definition ___compcert_i64_shr : ident := 30%positive.
Definition ___compcert_i64_smod : ident := 27%positive.
Definition ___compcert_i64_smulh : ident := 32%positive.
Definition ___compcert_i64_stod : ident := 21%positive.
Definition ___compcert_i64_stof : ident := 23%positive.
Definition ___compcert_i64_udiv : ident := 26%positive.
Definition ___compcert_i64_umod : ident := 28%positive.
Definition ___compcert_i64_umulh : ident := 33%positive.
Definition ___compcert_i64_utod : ident := 22%positive.
Definition ___compcert_i64_utof : ident := 24%positive.
Definition ___compcert_va_composite : ident := 18%positive.
Definition ___compcert_va_float64 : ident := 17%positive.
Definition ___compcert_va_int32 : ident := 15%positive.
Definition ___compcert_va_int64 : ident := 16%positive.
Definition _c : ident := 62%positive.
Definition _d : ident := 61%positive.
Definition _getchar : ident := 53%positive.
Definition _i : ident := 55%positive.
Definition _main : ident := 63%positive.
Definition _n : ident := 60%positive.
Definition _print_int : ident := 59%positive.
Definition _print_intr : ident := 58%positive.
Definition _putchar : ident := 54%positive.
Definition _q : ident := 56%positive.
Definition _r : ident := 57%positive.
Definition _t'1 : ident := 64%positive.
Definition _t'2 : ident := 65%positive.

Definition f_print_intr := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_i, tuint) :: nil);
  fn_vars := nil;
  fn_temps := ((_q, tuint) :: (_r, tuint) :: nil);
  fn_body :=
(Sifthenelse (Ebinop One (Etempvar _i tuint) (Econst_int (Int.repr 0) tint)
               tint)
  (Ssequence
    (Sset _q
      (Ebinop Odiv (Etempvar _i tuint) (Econst_int (Int.repr 10) tuint)
        tuint))
    (Ssequence
      (Sset _r
        (Ebinop Omod (Etempvar _i tuint) (Econst_int (Int.repr 10) tuint)
          tuint))
      (Ssequence
        (Scall None
          (Evar _print_intr (Tfunction (Tcons tuint Tnil) tvoid cc_default))
          ((Etempvar _q tuint) :: nil))
        (Scall None
          (Evar _putchar (Tfunction (Tcons tint Tnil) tint cc_default))
          ((Ebinop Oadd (Etempvar _r tuint) (Econst_int (Int.repr 48) tint)
             tuint) :: nil)))))
  Sskip)
|}.

Definition f_print_int := {|
  fn_return := tvoid;
  fn_callconv := cc_default;
  fn_params := ((_i, tuint) :: nil);
  fn_vars := nil;
  fn_temps := nil;
  fn_body :=
(Sifthenelse (Ebinop Oeq (Etempvar _i tuint) (Econst_int (Int.repr 0) tint)
               tint)
  (Scall None (Evar _putchar (Tfunction (Tcons tint Tnil) tint cc_default))
    ((Econst_int (Int.repr 48) tint) :: nil))
  (Scall None
    (Evar _print_intr (Tfunction (Tcons tuint Tnil) tvoid cc_default))
    ((Etempvar _i tuint) :: nil)))
|}.

Definition f_main := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := nil;
  fn_vars := nil;
  fn_temps := ((_n, tuint) :: (_d, tuint) :: (_c, tschar) :: (_t'2, tint) ::
               (_t'1, tint) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Sset _n (Econst_int (Int.repr 0) tint))
    (Ssequence
      (Ssequence
        (Scall (Some _t'1) (Evar _getchar (Tfunction Tnil tint cc_default))
          nil)
        (Sset _c (Ecast (Etempvar _t'1 tint) tschar)))
      (Ssequence
        (Swhile
          (Ebinop Olt (Etempvar _n tuint) (Econst_int (Int.repr 1000) tint)
            tint)
          (Ssequence
            (Sset _d
              (Ebinop Osub (Ecast (Etempvar _c tschar) tuint)
                (Ecast (Econst_int (Int.repr 48) tint) tuint) tuint))
            (Ssequence
              (Sifthenelse (Ebinop Oge (Etempvar _d tuint)
                             (Econst_int (Int.repr 10) tint) tint)
                Sbreak
                Sskip)
              (Ssequence
                (Sset _n
                  (Ebinop Oadd (Etempvar _n tuint) (Etempvar _d tuint) tuint))
                (Ssequence
                  (Scall None
                    (Evar _print_int (Tfunction (Tcons tuint Tnil) tvoid
                                       cc_default))
                    ((Etempvar _n tuint) :: nil))
                  (Ssequence
                    (Scall None
                      (Evar _putchar (Tfunction (Tcons tint Tnil) tint
                                       cc_default))
                      ((Econst_int (Int.repr 10) tint) :: nil))
                    (Ssequence
                      (Scall (Some _t'2)
                        (Evar _getchar (Tfunction Tnil tint cc_default)) nil)
                      (Sset _c (Ecast (Etempvar _t'2 tint) tschar)))))))))
        (Sreturn (Some (Econst_int (Int.repr 0) tint))))))
  (Sreturn (Some (Econst_int (Int.repr 0) tint))))
|}.

Definition composites : list composite_definition :=
nil.

Definition global_definitions : list (ident * globdef fundef type) :=
((___builtin_ais_annot,
   Gfun(External (EF_builtin "__builtin_ais_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_bswap,
   Gfun(External (EF_builtin "__builtin_bswap"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap32,
   Gfun(External (EF_builtin "__builtin_bswap32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap16,
   Gfun(External (EF_builtin "__builtin_bswap16"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tushort Tnil) tushort cc_default)) ::
 (___builtin_fabs,
   Gfun(External (EF_builtin "__builtin_fabs"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_fsqrt,
   Gfun(External (EF_builtin "__builtin_fsqrt"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_memcpy_aligned,
   Gfun(External (EF_builtin "__builtin_memcpy_aligned"
                   (mksignature
                     (AST.Tint :: AST.Tint :: AST.Tint :: AST.Tint :: nil)
                     None cc_default))
     (Tcons (tptr tvoid)
       (Tcons (tptr tvoid) (Tcons tuint (Tcons tuint Tnil)))) tvoid
     cc_default)) ::
 (___builtin_annot,
   Gfun(External (EF_builtin "__builtin_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_annot_intval,
   Gfun(External (EF_builtin "__builtin_annot_intval"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tschar) (Tcons tint Tnil))
     tint cc_default)) ::
 (___builtin_membar,
   Gfun(External (EF_builtin "__builtin_membar"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_va_start,
   Gfun(External (EF_builtin "__builtin_va_start"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___builtin_va_arg,
   Gfun(External (EF_builtin "__builtin_va_arg"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_va_copy,
   Gfun(External (EF_builtin "__builtin_va_copy"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default))
     (Tcons (tptr tvoid) (Tcons (tptr tvoid) Tnil)) tvoid cc_default)) ::
 (___builtin_va_end,
   Gfun(External (EF_builtin "__builtin_va_end"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___compcert_va_int32,
   Gfun(External (EF_external "__compcert_va_int32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tvoid) Tnil) tuint cc_default)) ::
 (___compcert_va_int64,
   Gfun(External (EF_external "__compcert_va_int64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tulong
     cc_default)) ::
 (___compcert_va_float64,
   Gfun(External (EF_external "__compcert_va_float64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tdouble
     cc_default)) ::
 (___compcert_va_composite,
   Gfun(External (EF_external "__compcert_va_composite"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     (tptr tvoid) cc_default)) ::
 (___compcert_i64_dtos,
   Gfun(External (EF_runtime "__compcert_i64_dtos"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tlong cc_default)) ::
 (___compcert_i64_dtou,
   Gfun(External (EF_runtime "__compcert_i64_dtou"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tulong cc_default)) ::
 (___compcert_i64_stod,
   Gfun(External (EF_runtime "__compcert_i64_stod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tlong Tnil) tdouble cc_default)) ::
 (___compcert_i64_utod,
   Gfun(External (EF_runtime "__compcert_i64_utod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tulong Tnil) tdouble cc_default)) ::
 (___compcert_i64_stof,
   Gfun(External (EF_runtime "__compcert_i64_stof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tlong Tnil) tfloat cc_default)) ::
 (___compcert_i64_utof,
   Gfun(External (EF_runtime "__compcert_i64_utof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tulong Tnil) tfloat cc_default)) ::
 (___compcert_i64_sdiv,
   Gfun(External (EF_runtime "__compcert_i64_sdiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_udiv,
   Gfun(External (EF_runtime "__compcert_i64_udiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_smod,
   Gfun(External (EF_runtime "__compcert_i64_smod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umod,
   Gfun(External (EF_runtime "__compcert_i64_umod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_shl,
   Gfun(External (EF_runtime "__compcert_i64_shl"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_shr,
   Gfun(External (EF_runtime "__compcert_i64_shr"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tint Tnil)) tulong cc_default)) ::
 (___compcert_i64_sar,
   Gfun(External (EF_runtime "__compcert_i64_sar"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_smulh,
   Gfun(External (EF_runtime "__compcert_i64_smulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umulh,
   Gfun(External (EF_runtime "__compcert_i64_umulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___builtin_bswap64,
   Gfun(External (EF_builtin "__builtin_bswap64"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tulong Tnil) tulong cc_default)) ::
 (___builtin_clz,
   Gfun(External (EF_builtin "__builtin_clz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzl,
   Gfun(External (EF_builtin "__builtin_clzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzll,
   Gfun(External (EF_builtin "__builtin_clzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_ctz,
   Gfun(External (EF_builtin "__builtin_ctz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzl,
   Gfun(External (EF_builtin "__builtin_ctzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzll,
   Gfun(External (EF_builtin "__builtin_ctzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_fmax,
   Gfun(External (EF_builtin "__builtin_fmax"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmin,
   Gfun(External (EF_builtin "__builtin_fmin"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmadd,
   Gfun(External (EF_builtin "__builtin_fmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fmsub,
   Gfun(External (EF_builtin "__builtin_fmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmadd,
   Gfun(External (EF_builtin "__builtin_fnmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmsub,
   Gfun(External (EF_builtin "__builtin_fnmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_read16_reversed,
   Gfun(External (EF_builtin "__builtin_read16_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tushort) Tnil) tushort cc_default)) ::
 (___builtin_read32_reversed,
   Gfun(External (EF_builtin "__builtin_read32_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tuint) Tnil) tuint cc_default)) ::
 (___builtin_write16_reversed,
   Gfun(External (EF_builtin "__builtin_write16_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tushort) (Tcons tushort Tnil))
     tvoid cc_default)) ::
 (___builtin_write32_reversed,
   Gfun(External (EF_builtin "__builtin_write32_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tuint) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_nop,
   Gfun(External (EF_builtin "__builtin_nop"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_debug,
   Gfun(External (EF_external "__builtin_debug"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons tint Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (_getchar,
   Gfun(External (EF_external "getchar"
                   (mksignature nil (Some AST.Tint) cc_default)) Tnil tint
     cc_default)) ::
 (_putchar,
   Gfun(External (EF_external "putchar"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tint Tnil) tint cc_default)) ::
 (_print_intr, Gfun(Internal f_print_intr)) ::
 (_print_int, Gfun(Internal f_print_int)) ::
 (_main, Gfun(Internal f_main)) :: nil).

Definition public_idents : list ident :=
(_main :: _print_int :: _print_intr :: _putchar :: _getchar ::
 ___builtin_debug :: ___builtin_nop :: ___builtin_write32_reversed ::
 ___builtin_write16_reversed :: ___builtin_read32_reversed ::
 ___builtin_read16_reversed :: ___builtin_fnmsub :: ___builtin_fnmadd ::
 ___builtin_fmsub :: ___builtin_fmadd :: ___builtin_fmin ::
 ___builtin_fmax :: ___builtin_ctzll :: ___builtin_ctzl :: ___builtin_ctz ::
 ___builtin_clzll :: ___builtin_clzl :: ___builtin_clz ::
 ___builtin_bswap64 :: ___compcert_i64_umulh :: ___compcert_i64_smulh ::
 ___compcert_i64_sar :: ___compcert_i64_shr :: ___compcert_i64_shl ::
 ___compcert_i64_umod :: ___compcert_i64_smod :: ___compcert_i64_udiv ::
 ___compcert_i64_sdiv :: ___compcert_i64_utof :: ___compcert_i64_stof ::
 ___compcert_i64_utod :: ___compcert_i64_stod :: ___compcert_i64_dtou ::
 ___compcert_i64_dtos :: ___compcert_va_composite ::
 ___compcert_va_float64 :: ___compcert_va_int64 :: ___compcert_va_int32 ::
 ___builtin_va_end :: ___builtin_va_copy :: ___builtin_va_arg ::
 ___builtin_va_start :: ___builtin_membar :: ___builtin_annot_intval ::
 ___builtin_annot :: ___builtin_memcpy_aligned :: ___builtin_fsqrt ::
 ___builtin_fabs :: ___builtin_bswap16 :: ___builtin_bswap32 ::
 ___builtin_bswap :: ___builtin_ais_annot :: nil).

Definition prog : Clight.program := 
  mkprogram composites global_definitions public_idents _main Logic.I. *)

Require Import VST.progs.io_specs.
(* VST.progs.io_specs:
Require Import VST.floyd.proofauto.
Require Import VST.veric.juicy_extspec.
Require Import DeepWeb.Free.Monad.Free.
Import MonadNotations.
Require Import DeepWeb.Free.Monad.Common.
Require Import DeepWeb.Free.Monad.Eq.Utt.
Import String.

Inductive IO_event : Type -> Type :=
| ERead : IO_event int
| EWrite (c : int) : IO_event unit.

Definition read : itree IO_event int := embed ERead.

Definition write (c : int) : itree IO_event unit := embed (EWrite c).

Definition IO_itree := itree IO_event unit.

Definition ITREE (tr : IO_itree) := EX tr' : _, !!(eq_utt tr tr') &&
  has_ext tr'.

Lemma has_ext_ITREE : forall tr, has_ext tr |-- ITREE tr.

Definition putchar_spec :=
  WITH c : int, k : IO_itree
  PRE [ 1%positive OF tint ]
    PROP ()
    LOCAL (temp 1%positive (Vint c))
    SEP (ITREE (write c ;; k))
  POST [ tint ]
    PROP ()
    LOCAL (temp ret_temp (Vint c))
    SEP (ITREE k).

Definition getchar_spec :=
  WITH k : int -> IO_itree
  PRE [ ]
    PROP ()
    LOCAL ()
    SEP (ITREE (r <- read ;; k r))
  POST [ tint ]
   EX i : int,
    PROP (- two_p 7 <= Int.signed i <= two_p 7 - 1)
    LOCAL (temp ret_temp (Vint i))
    SEP (ITREE (k i)).

Fixpoint write_list l : IO_itree :=
  match l with
  | nil => Ret tt
  | c :: rest => write c ;; write_list rest
  end.

Lemma ITREE_impl : forall tr tr', eq_utt tr tr' ->
  ITREE tr |-- ITREE tr'.

Lemma ITREE_ext : forall tr tr', eq_utt tr tr' ->
  ITREE tr = ITREE tr'.

Lemma write_list_app : forall l1 l2,
  eq_utt (write_list (l1 ++ l2)) (write_list l1;; write_list l2).

Definition char0 : Z := 48.
Definition newline := 10.

Definition IO_specs (ext_link : string -> ident) :=
  [(ext_link "putchar"%string, putchar_spec); (ext_link "getchar"%string, getchar_spec)].

Definition IO_ext_spec ext_link :=
  semax_ext.add_funspecs_rec
    ext_link
    (ok_void_spec IO_itree).(@OK_ty)
    (ok_void_spec IO_itree).(@OK_spec)
    (IO_specs ext_link). *)

Require Import VST.floyd.proofauto.
(* VST.floyd.proofauto:
From compcert Require Export common.AST cfrontend.Ctypes cfrontend.Clight.
Export Cop.
Require Export VST.floyd.base2.
Require Export VST.floyd.functional_base.
Require Export VST.floyd.client_lemmas.
Require Export VST.floyd.go_lower.
Require Export VST.floyd.closed_lemmas.
Require Export VST.floyd.compare_lemmas.
Require Export VST.floyd.semax_tactics.
Require Export VST.floyd.forward.
Require Export VST.floyd.subsume_funspec.
Require Export VST.floyd.call_lemmas.
Require Export VST.floyd.forward_lemmas.
Require Export VST.floyd.for_lemmas.
Require Export VST.floyd.nested_pred_lemmas.
Require Export VST.floyd.nested_field_lemmas.
Require Export VST.floyd.efield_lemmas.
Require Export VST.floyd.mapsto_memory_block.
Require Export VST.floyd.aggregate_type.
Require VST.floyd.aggregate_pred. Export floyd.aggregate_pred.aggregate_pred.
Require Export VST.floyd.reptype_lemmas.
Require Export VST.floyd.simpl_reptype.
Require Export VST.floyd.data_at_rec_lemmas.
Require Export VST.floyd.field_at.
Require Export VST.floyd.field_at_wand.
Require Export VST.floyd.field_compat.
Require Export VST.floyd.stronger.
Require Export VST.floyd.loadstore_mapsto.
Require Export VST.floyd.loadstore_field_at.
Require Export VST.floyd.nested_loadstore.
Require Export VST.floyd.local2ptree_denote.
Require Export VST.floyd.local2ptree_eval.
Require Export VST.floyd.local2ptree_typecheck.
Require Export VST.floyd.proj_reptype_lemmas.
Require Export VST.floyd.replace_refill_reptype_lemmas.
Require Export VST.floyd.sc_set_load_store.
Require Export VST.floyd.unfold_data_at.
Require Export VST.floyd.entailer.
Require Export VST.floyd.globals_lemmas.
Require Export VST.floyd.diagnosis.
Require Export VST.floyd.freezer.
Require Export VST.floyd.deadvars.
Require Export VST.floyd.hints.
Require Export VST.floyd.Clightnotations.
Require VST.msl.iter_sepcon.
Require VST.msl.wand_frame.
Require VST.msl.wandQ_frame.

Arguments semax {CS} {Espec} Delta Pre%assert cmd%C Post%assert.
Export ListNotations.
Export Clight_Cop2.

Hint Rewrite add_repr mul_repr sub_repr : entailer_rewrite.
Hint Rewrite ptrofs_add_repr ptrofs_mul_repr ptrofs_sub_repr : entailer_rewrite.
Hint Rewrite mul64_repr add64_repr sub64_repr or64_repr and64_repr : entailer_rewrite.
Hint Rewrite neg_repr neg64_repr : entailer_rewrite.
Hint Rewrite ptrofs_to_int_repr: entailer_rewrite norm.

Lemma Vptrofs_unfold_false: 
Archi.ptr64 = false -> Vptrofs = fun x => Vint (Ptrofs.to_int x).

Lemma Vptrofs_unfold_true: 
Archi.ptr64 = true -> Vptrofs = fun x => Vlong (Ptrofs.to_int64 x).

Lemma modu_repr: forall x y, 
   0 <= x <= Int.max_unsigned ->
Hint Rewrite modu_repr using rep_omega : entailer_rewrite norm.

Hint Rewrite Vptrofs_unfold_false using reflexivity: entailer_rewrite norm.
Hint Rewrite Vptrofs_unfold_true using reflexivity: entailer_rewrite norm.

Hint Extern 1 (Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef) => reflexivity : cancel.
Hint Extern 1 (list_repeat _ Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = list_repeat _ Vundef) => reflexivity : cancel.
Hint Extern 1 (Vundef :: _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef :: _) => reflexivity : cancel.
Hint Extern 1 (@nil _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = @nil _) => reflexivity : cancel.

Instance Inhabitant_mpred : Inhabitant mpred := @FF mpred Nveric.
Instance Inhabitant_share : Inhabitant share := Share.bot.

Arguments deref_noload ty v / .
Arguments nested_field_array_type {cs} t gfs lo hi / .
Arguments nested_field_type {cs} t gfs / .  
Arguments nested_field_offset {cs} t gfs / .  
Arguments Z.mul !x !y.
Arguments Z.sub !m !n.
Arguments Z.add !x !y.
Global Transparent peq.
Global Transparent Archi.ptr64.

Ltac step :=
first [ progress Intros
       | let x := fresh "x" in Intros x
       | forward
       | forward_if
       | forward_call
       | rep_omega | cstring' | list_solve
       | EExists
       | progress (autorewrite with sublist in *|-)
       | progress (autorewrite with sublist)
       | progress (autorewrite with norm)
       | cstring1
       | deadvars!
       | progress_entailer
       ]. *)

Require Import DeepWeb.Free.Monad.Free.

Import MonadNotations.

Require Import DeepWeb.Free.Monad.Common.

Require Import DeepWeb.Free.Monad.Eq.Utt.



Instance CompSpecs : compspecs. make_compspecs prog. Defined.

Definition Vprog : varspecs. mk_varspecs prog. Defined.



Definition putchar_spec := DECLARE _putchar putchar_spec.

Definition getchar_spec := DECLARE _getchar getchar_spec.



Program Fixpoint chars_of_nat n { measure n } : list int :=

  match (n / 10)%nat with

  | O => [Int.repr (Z.of_nat n + char0)]

  | n' => chars_of_nat n' ++ [Int.repr (Z.of_nat (n mod 10) + char0)]

  end.

Next Obligation.

Proof.

  apply (Nat.div_lt n 10); try omega.

  destruct n; [contradiction | omega].

Defined.



Definition chars_of_Z z := chars_of_nat (Z.to_nat z).



Program Fixpoint intr n { measure n } : list int :=

  match n with

  | O => []

  | _ => intr (n / 10) ++ [Int.repr (Z.of_nat (n mod 10) + char0)]

  end.

Next Obligation.

Proof.

  apply (Nat.div_lt n 10); try omega.

Defined.



Definition print_intr_spec :=

 DECLARE _print_intr

  WITH i : Z, tr : IO_itree

  PRE [ _i OF tuint ]

    PROP (0 <= i <= Int.max_unsigned)

    LOCAL (temp _i (Vint (Int.repr i)))

    SEP (ITREE (write_list (intr (Z.to_nat i)) ;; tr))

  POST [ tvoid ]

    PROP ()

    LOCAL ()

    SEP (ITREE tr).



Definition print_int_spec :=

 DECLARE _print_int

  WITH i : Z, tr : IO_itree

  PRE [ _i OF tuint ]

    PROP (0 <= i <= Int.max_unsigned)

    LOCAL (temp _i (Vint (Int.repr i)))

    SEP (ITREE (write_list (chars_of_Z i) ;; tr))

  POST [ tvoid ]

    PROP ()

    LOCAL ()

    SEP (ITREE tr).



CoFixpoint read_sum n d : IO_itree :=

  if zlt n 1000 then if zlt d 10 then

    write_list (chars_of_Z (n + d));; write (Int.repr newline);;

    c <- read;; read_sum (n + d) (Int.unsigned c - char0)

  else ret tt else ret tt.



Definition main_itree := c <- read;; read_sum 0 (Int.unsigned c - char0).



Definition ext_link := ext_link_prog prog.



Instance IO_Espec : OracleKind := Build_OracleKind _ (IO_ext_spec ext_link).



Definition main_spec :=

 DECLARE _main

  WITH gv : globals

  PRE  [] main_pre_ext prog main_itree nil gv

  POST [ tint ] main_post prog nil gv.



Definition Gprog : funspecs := ltac:(with_library prog [putchar_spec; getchar_spec;

  print_intr_spec; print_int_spec; main_spec]).



Lemma divu_repr : forall x y,

  0 <= x <= Int.max_unsigned -> 0 <= y <= Int.max_unsigned ->

  Int.divu (Int.repr x) (Int.repr y) = Int.repr (x / y).

Proof.

  intros; unfold Int.divu.

  rewrite !Int.unsigned_repr; auto.

Qed.



Opaque bind.



Opaque Nat.div Nat.modulo.



Lemma intr_eq : forall n, intr n =

  match n with

  | O => []

  | _ => intr (n / 10) ++ [Int.repr (Z.of_nat (n mod 10) + char0)]

  end.

Proof.

  intros.

  unfold intr at 1.

  rewrite Wf.WfExtensionality.fix_sub_eq_ext; simpl; fold intr.

  destruct n; reflexivity.

Qed.



Transparent bind.



Lemma body_print_intr: semax_body Vprog Gprog f_print_intr print_intr_spec.

Proof.

  start_function.

  forward_if (PROP () LOCAL () SEP (ITREE tr)).

  - forward.

    forward.

    rewrite modu_repr, divu_repr by (omega || computable).

    rewrite intr_eq.

    destruct (Z.to_nat i) eqn: Hi.

    { apply Z2Nat_inj_0 in Hi; omega. }

    rewrite <- Hi, mod_Zmod, Z2Nat.id by omega; simpl; clear dependent n.

    erewrite ITREE_ext

      by (apply bind_mor with (y0 := fun _ => tr); [apply write_list_app | reflexivity]).

    erewrite ITREE_ext by apply bind_bind.

    forward_call (i / 10, write_list [Int.repr (i mod 10 + char0)];; tr).

    { rewrite <- sepcon_emp at 1; apply sepcon_derives; cancel.

      replace (Z.to_nat i / 10)%nat with (Z.to_nat (i / 10)); [apply derives_refl|].

      rewrite <- (Z2Nat.id i) at 1 by omega.

      rewrite <- (div_Zdiv _ 10) by omega.

      rewrite Nat2Z.id; auto. }

    { split; [apply Z.div_pos; omega | apply Z.div_le_upper_bound; omega]. }

    forward_call (Int.repr (i mod 10 + char0), tr).

    { rewrite <- sepcon_emp at 1; apply sepcon_derives; [|cancel].

      erewrite ITREE_ext; [apply derives_refl|].

      unfold write_list.

      apply bind_mor; [|reflexivity].

      etransitivity; [|apply bind_ret].

      apply bind_mor; [|intros []]; reflexivity. }

    entailer!.

  - forward.

    subst; entailer!.

    erewrite ITREE_ext; [apply derives_refl|].

    simpl.

    rewrite ret_bind.

    apply pop_tau; reflexivity.

  - forward.

Qed.



Lemma chars_of_nat_eq : forall n, chars_of_nat n =

  match (n / 10)%nat with

  | O => [Int.repr (Z.of_nat n + char0)]

  | n' => chars_of_nat n' ++ [Int.repr (Z.of_nat (n mod 10) + char0)]

  end.

Proof.

  intros.

  unfold chars_of_nat at 1.

  rewrite Wf.WfExtensionality.fix_sub_eq_ext; simpl; fold chars_of_nat.

  destruct (n / 10)%nat; reflexivity.

Qed.



Lemma chars_of_nat_intr : forall n, (0 < n)%nat ->

  chars_of_nat n = intr n.

Proof.

  induction n using (well_founded_induction lt_wf); intro.

  rewrite chars_of_nat_eq, intr_eq.

  destruct n; [omega|].

  forget (S n) as m.

  destruct (_ / _)%nat eqn: Hdiv.

  - rewrite mod_Zmod by omega; simpl.

    rewrite Zmod_small; auto.

    split; try omega.

    apply Z2Nat.inj_lt; try omega.

    rewrite Nat2Z.id; simpl.

    destruct (lt_dec m 10); auto.

    exploit (Nat.div_str_pos m 10); omega.

  - rewrite H; auto; try omega.

    rewrite <- Hdiv; apply Nat.div_lt; auto; omega.

Qed.



Lemma body_print_int: semax_body Vprog Gprog f_print_int print_int_spec.

Proof.

  start_function.

  forward_if (PROP () LOCAL () SEP (ITREE tr)).

  - subst.

    forward_call (Int.repr char0, tr).

    { unfold chars_of_Z; rewrite chars_of_nat_eq.

      change (_ / _)%nat with O; simpl.

      erewrite <- sepcon_emp at 1; apply sepcon_derives; [|cancel].

      erewrite ITREE_ext; [apply derives_refl|].

      apply bind_mor; [|reflexivity].

      etransitivity; [|apply bind_ret].

      apply bind_mor; [|intros []]; reflexivity. }

    entailer!.

  - forward_call (i, tr).

    { unfold chars_of_Z.

      rewrite chars_of_nat_intr; [cancel|].

      destruct (Z.to_nat i) eqn: Hi; [|omega].

      apply Z2Nat_inj_0 in Hi; omega. }

    entailer!.

  - forward.

Qed.



Lemma read_sum_eq : forall n d, read_sum n d =

  (if zlt n 1000 then if zlt d 10 then

     write_list (chars_of_Z (n + d));; write (Int.repr newline);;

     c <- read;; read_sum (n + d) (Int.unsigned c - char0)

   else ret tt else ret tt).

Proof.

  intros.

  rewrite (match_itree (read_sum n d)); simpl.

  rewrite <- match_itree; auto.

Qed.



Lemma body_main: semax_body Vprog Gprog f_main main_spec.

Proof.

  start_function.

  replace_SEP 0 (ITREE main_itree).

  { go_lower.

    apply has_ext_ITREE. }

  forward.

  unfold main_itree.

  rewrite <- !seq_assoc. 

  forward_call (fun c => read_sum 0 (Int.unsigned c - char0)).

  Intros c.

  forward.

  rewrite sign_ext_inrange by auto.

  set (Inv := EX n : Z, EX c : int,

    PROP (0 <= n < 1009)

    LOCAL (temp _c (Vint c); temp _n (Vint (Int.repr n)))

    SEP (ITREE (read_sum n (Int.unsigned c - char0)))).

  unfold Swhile; forward_loop Inv break: Inv.

  { Exists 0 c; entailer!. }

  subst Inv.

  clear dependent c; Intros n c.

  forward_if.

  forward.

  forward_if.

  { forward.

    Exists n c; entailer!. }

  forward.

  rewrite <- (Int.repr_unsigned c) in H1.

  rewrite sub_repr in H1.

  pose proof (Int.unsigned_range c).

  destruct (zlt (Int.unsigned c) char0).

  { rewrite Int.unsigned_repr_eq in H1.

    rewrite <- Z_mod_plus_full with (b := 1), Zmod_small in H1; unfold char0 in *; rep_omega. }

  rewrite Int.unsigned_repr in H1 by (unfold char0 in *; rep_omega).

  rewrite read_sum_eq.

  rewrite if_true by auto.

  destruct (zlt _ _); [|unfold char0 in *; omega].

  forward_call (n + (Int.unsigned c - char0),

    write (Int.repr newline);; c' <- read;; read_sum (n + (Int.unsigned c - char0)) (Int.unsigned c' - char0)).

  { entailer!.

    rewrite <- (Int.repr_unsigned c) at 1.

    rewrite sub_repr, add_repr; auto. }

  { unfold char0 in *; rep_omega. }

  forward_call (Int.repr newline, c' <- read;; read_sum (n + (Int.unsigned c - char0)) (Int.unsigned c' - char0)).

  forward_call (fun c' => read_sum (n + (Int.unsigned c - char0)) (Int.unsigned c' - char0)).

  Intros c'.

  forward.

  rewrite sign_ext_inrange by auto.

  Exists (n + (Int.unsigned c - char0)) c'; entailer!.

  rewrite <- (Int.repr_unsigned c) at 2; rewrite sub_repr, add_repr; auto.

  { forward.

    Exists n c; entailer!. }

  subst Inv.

  Intros n c'.

  forward.

Qed.



Instance Espec : OracleKind := add_funspecs IO_Espec (ext_link_prog prog) Gprog.



Lemma prog_correct:

  semax_prog_ext prog main_itree Vprog Gprog.

Proof.

prove_semax_prog.

repeat (apply semax_func_cons_ext_vacuous; [reflexivity | reflexivity | ]).

semax_func_cons_ext.

{ simpl; Intro i.

  apply typecheck_return_value; auto. }

semax_func_cons_ext.

semax_func_cons body_print_intr.

semax_func_cons body_print_int.

semax_func_cons body_main.

Qed.

