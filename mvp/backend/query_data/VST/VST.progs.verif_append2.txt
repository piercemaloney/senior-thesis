Require Import VST.floyd.proofauto.
(* VST.floyd.proofauto:
From compcert Require Export common.AST cfrontend.Ctypes cfrontend.Clight.
Export Cop.
Require Export VST.floyd.base2.
Require Export VST.floyd.functional_base.
Require Export VST.floyd.client_lemmas.
Require Export VST.floyd.go_lower.
Require Export VST.floyd.closed_lemmas.
Require Export VST.floyd.compare_lemmas.
Require Export VST.floyd.semax_tactics.
Require Export VST.floyd.forward.
Require Export VST.floyd.subsume_funspec.
Require Export VST.floyd.call_lemmas.
Require Export VST.floyd.forward_lemmas.
Require Export VST.floyd.for_lemmas.
Require Export VST.floyd.nested_pred_lemmas.
Require Export VST.floyd.nested_field_lemmas.
Require Export VST.floyd.efield_lemmas.
Require Export VST.floyd.mapsto_memory_block.
Require Export VST.floyd.aggregate_type.
Require VST.floyd.aggregate_pred. Export floyd.aggregate_pred.aggregate_pred.
Require Export VST.floyd.reptype_lemmas.
Require Export VST.floyd.simpl_reptype.
Require Export VST.floyd.data_at_rec_lemmas.
Require Export VST.floyd.field_at.
Require Export VST.floyd.field_at_wand.
Require Export VST.floyd.field_compat.
Require Export VST.floyd.stronger.
Require Export VST.floyd.loadstore_mapsto.
Require Export VST.floyd.loadstore_field_at.
Require Export VST.floyd.nested_loadstore.
Require Export VST.floyd.local2ptree_denote.
Require Export VST.floyd.local2ptree_eval.
Require Export VST.floyd.local2ptree_typecheck.
Require Export VST.floyd.proj_reptype_lemmas.
Require Export VST.floyd.replace_refill_reptype_lemmas.
Require Export VST.floyd.sc_set_load_store.
Require Export VST.floyd.unfold_data_at.
Require Export VST.floyd.entailer.
Require Export VST.floyd.globals_lemmas.
Require Export VST.floyd.diagnosis.
Require Export VST.floyd.freezer.
Require Export VST.floyd.deadvars.
Require Export VST.floyd.hints.
Require Export VST.floyd.Clightnotations.
Require VST.msl.iter_sepcon.
Require VST.msl.wand_frame.
Require VST.msl.wandQ_frame.

Arguments semax {CS} {Espec} Delta Pre%assert cmd%C Post%assert.
Export ListNotations.
Export Clight_Cop2.

Hint Rewrite add_repr mul_repr sub_repr : entailer_rewrite.
Hint Rewrite ptrofs_add_repr ptrofs_mul_repr ptrofs_sub_repr : entailer_rewrite.
Hint Rewrite mul64_repr add64_repr sub64_repr or64_repr and64_repr : entailer_rewrite.
Hint Rewrite neg_repr neg64_repr : entailer_rewrite.
Hint Rewrite ptrofs_to_int_repr: entailer_rewrite norm.

Lemma Vptrofs_unfold_false: 
Archi.ptr64 = false -> Vptrofs = fun x => Vint (Ptrofs.to_int x).

Lemma Vptrofs_unfold_true: 
Archi.ptr64 = true -> Vptrofs = fun x => Vlong (Ptrofs.to_int64 x).

Lemma modu_repr: forall x y, 
   0 <= x <= Int.max_unsigned ->
Hint Rewrite modu_repr using rep_omega : entailer_rewrite norm.

Hint Rewrite Vptrofs_unfold_false using reflexivity: entailer_rewrite norm.
Hint Rewrite Vptrofs_unfold_true using reflexivity: entailer_rewrite norm.

Hint Extern 1 (Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef) => reflexivity : cancel.
Hint Extern 1 (list_repeat _ Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = list_repeat _ Vundef) => reflexivity : cancel.
Hint Extern 1 (Vundef :: _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef :: _) => reflexivity : cancel.
Hint Extern 1 (@nil _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = @nil _) => reflexivity : cancel.

Instance Inhabitant_mpred : Inhabitant mpred := @FF mpred Nveric.
Instance Inhabitant_share : Inhabitant share := Share.bot.

Arguments deref_noload ty v / .
Arguments nested_field_array_type {cs} t gfs lo hi / .
Arguments nested_field_type {cs} t gfs / .  
Arguments nested_field_offset {cs} t gfs / .  
Arguments Z.mul !x !y.
Arguments Z.sub !m !n.
Arguments Z.add !x !y.
Global Transparent peq.
Global Transparent Archi.ptr64.

Ltac step :=
first [ progress Intros
       | let x := fresh "x" in Intros x
       | forward
       | forward_if
       | forward_call
       | rep_omega | cstring' | list_solve
       | EExists
       | progress (autorewrite with sublist in *|-)
       | progress (autorewrite with sublist)
       | progress (autorewrite with norm)
       | cstring1
       | deadvars!
       | progress_entailer
       ]. *)

Require Import VST.progs.append.
(* VST.progs.append:
From Coq Require Import String List ZArith.
From compcert Require Import Coqlib Integers Floats AST Ctypes Cop Clight Clightdefs.
Local Open Scope Z_scope.

Module Info.
  Definition version := "3.3"%string.
  Definition build_number := ""%string.
  Definition build_tag := ""%string.
  Definition arch := "x86"%string.
  Definition model := "32sse2"%string.
  Definition abi := "standard"%string.
  Definition bitsize := 32.
  Definition big_endian := false.
  Definition source_file := "progs/append.c"%string.
  Definition normalized := true.
End Info.

Definition ___builtin_ais_annot : ident := 4%positive.
Definition ___builtin_annot : ident := 11%positive.
Definition ___builtin_annot_intval : ident := 12%positive.
Definition ___builtin_bswap : ident := 5%positive.
Definition ___builtin_bswap16 : ident := 7%positive.
Definition ___builtin_bswap32 : ident := 6%positive.
Definition ___builtin_bswap64 : ident := 37%positive.
Definition ___builtin_clz : ident := 38%positive.
Definition ___builtin_clzl : ident := 39%positive.
Definition ___builtin_clzll : ident := 40%positive.
Definition ___builtin_ctz : ident := 41%positive.
Definition ___builtin_ctzl : ident := 42%positive.
Definition ___builtin_ctzll : ident := 43%positive.
Definition ___builtin_debug : ident := 55%positive.
Definition ___builtin_fabs : ident := 8%positive.
Definition ___builtin_fmadd : ident := 46%positive.
Definition ___builtin_fmax : ident := 44%positive.
Definition ___builtin_fmin : ident := 45%positive.
Definition ___builtin_fmsub : ident := 47%positive.
Definition ___builtin_fnmadd : ident := 48%positive.
Definition ___builtin_fnmsub : ident := 49%positive.
Definition ___builtin_fsqrt : ident := 9%positive.
Definition ___builtin_membar : ident := 13%positive.
Definition ___builtin_memcpy_aligned : ident := 10%positive.
Definition ___builtin_nop : ident := 54%positive.
Definition ___builtin_read16_reversed : ident := 50%positive.
Definition ___builtin_read32_reversed : ident := 51%positive.
Definition ___builtin_va_arg : ident := 15%positive.
Definition ___builtin_va_copy : ident := 16%positive.
Definition ___builtin_va_end : ident := 17%positive.
Definition ___builtin_va_start : ident := 14%positive.
Definition ___builtin_write16_reversed : ident := 52%positive.
Definition ___builtin_write32_reversed : ident := 53%positive.
Definition ___compcert_i64_dtos : ident := 22%positive.
Definition ___compcert_i64_dtou : ident := 23%positive.
Definition ___compcert_i64_sar : ident := 34%positive.
Definition ___compcert_i64_sdiv : ident := 28%positive.
Definition ___compcert_i64_shl : ident := 32%positive.
Definition ___compcert_i64_shr : ident := 33%positive.
Definition ___compcert_i64_smod : ident := 30%positive.
Definition ___compcert_i64_smulh : ident := 35%positive.
Definition ___compcert_i64_stod : ident := 24%positive.
Definition ___compcert_i64_stof : ident := 26%positive.
Definition ___compcert_i64_udiv : ident := 29%positive.
Definition ___compcert_i64_umod : ident := 31%positive.
Definition ___compcert_i64_umulh : ident := 36%positive.
Definition ___compcert_i64_utod : ident := 25%positive.
Definition ___compcert_i64_utof : ident := 27%positive.
Definition ___compcert_va_composite : ident := 21%positive.
Definition ___compcert_va_float64 : ident := 20%positive.
Definition ___compcert_va_int32 : ident := 18%positive.
Definition ___compcert_va_int64 : ident := 19%positive.
Definition _append : ident := 60%positive.
Definition _head : ident := 1%positive.
Definition _list : ident := 2%positive.
Definition _main : ident := 61%positive.
Definition _t : ident := 58%positive.
Definition _tail : ident := 3%positive.
Definition _u : ident := 59%positive.
Definition _x : ident := 56%positive.
Definition _y : ident := 57%positive.

Definition f_append := {|
  fn_return := (tptr (Tstruct _list noattr));
  fn_callconv := cc_default;
  fn_params := ((_x, (tptr (Tstruct _list noattr))) ::
                (_y, (tptr (Tstruct _list noattr))) :: nil);
  fn_vars := nil;
  fn_temps := ((_t, (tptr (Tstruct _list noattr))) ::
               (_u, (tptr (Tstruct _list noattr))) :: nil);
  fn_body :=
(Sifthenelse (Ebinop Oeq (Etempvar _x (tptr (Tstruct _list noattr)))
               (Ecast (Econst_int (Int.repr 0) tint) (tptr tvoid)) tint)
  (Sreturn (Some (Etempvar _y (tptr (Tstruct _list noattr)))))
  (Ssequence
    (Sset _t (Etempvar _x (tptr (Tstruct _list noattr))))
    (Ssequence
      (Sset _u
        (Efield
          (Ederef (Etempvar _t (tptr (Tstruct _list noattr)))
            (Tstruct _list noattr)) _tail (tptr (Tstruct _list noattr))))
      (Ssequence
        (Swhile
          (Ebinop One (Etempvar _u (tptr (Tstruct _list noattr)))
            (Ecast (Econst_int (Int.repr 0) tint) (tptr tvoid)) tint)
          (Ssequence
            (Sset _t (Etempvar _u (tptr (Tstruct _list noattr))))
            (Sset _u
              (Efield
                (Ederef (Etempvar _t (tptr (Tstruct _list noattr)))
                  (Tstruct _list noattr)) _tail
                (tptr (Tstruct _list noattr))))))
        (Ssequence
          (Sassign
            (Efield
              (Ederef (Etempvar _t (tptr (Tstruct _list noattr)))
                (Tstruct _list noattr)) _tail (tptr (Tstruct _list noattr)))
            (Etempvar _y (tptr (Tstruct _list noattr))))
          (Sreturn (Some (Etempvar _x (tptr (Tstruct _list noattr))))))))))
|}.

Definition composites : list composite_definition :=
(Composite _list Struct
   ((_head, tint) :: (_tail, (tptr (Tstruct _list noattr))) :: nil)
   noattr :: nil).

Definition global_definitions : list (ident * globdef fundef type) :=
((___builtin_ais_annot,
   Gfun(External (EF_builtin "__builtin_ais_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_bswap,
   Gfun(External (EF_builtin "__builtin_bswap"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap32,
   Gfun(External (EF_builtin "__builtin_bswap32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap16,
   Gfun(External (EF_builtin "__builtin_bswap16"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tushort Tnil) tushort cc_default)) ::
 (___builtin_fabs,
   Gfun(External (EF_builtin "__builtin_fabs"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_fsqrt,
   Gfun(External (EF_builtin "__builtin_fsqrt"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_memcpy_aligned,
   Gfun(External (EF_builtin "__builtin_memcpy_aligned"
                   (mksignature
                     (AST.Tint :: AST.Tint :: AST.Tint :: AST.Tint :: nil)
                     None cc_default))
     (Tcons (tptr tvoid)
       (Tcons (tptr tvoid) (Tcons tuint (Tcons tuint Tnil)))) tvoid
     cc_default)) ::
 (___builtin_annot,
   Gfun(External (EF_builtin "__builtin_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_annot_intval,
   Gfun(External (EF_builtin "__builtin_annot_intval"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tschar) (Tcons tint Tnil))
     tint cc_default)) ::
 (___builtin_membar,
   Gfun(External (EF_builtin "__builtin_membar"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_va_start,
   Gfun(External (EF_builtin "__builtin_va_start"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___builtin_va_arg,
   Gfun(External (EF_builtin "__builtin_va_arg"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_va_copy,
   Gfun(External (EF_builtin "__builtin_va_copy"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default))
     (Tcons (tptr tvoid) (Tcons (tptr tvoid) Tnil)) tvoid cc_default)) ::
 (___builtin_va_end,
   Gfun(External (EF_builtin "__builtin_va_end"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___compcert_va_int32,
   Gfun(External (EF_external "__compcert_va_int32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tvoid) Tnil) tuint cc_default)) ::
 (___compcert_va_int64,
   Gfun(External (EF_external "__compcert_va_int64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tulong
     cc_default)) ::
 (___compcert_va_float64,
   Gfun(External (EF_external "__compcert_va_float64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tdouble
     cc_default)) ::
 (___compcert_va_composite,
   Gfun(External (EF_external "__compcert_va_composite"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     (tptr tvoid) cc_default)) ::
 (___compcert_i64_dtos,
   Gfun(External (EF_runtime "__compcert_i64_dtos"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tlong cc_default)) ::
 (___compcert_i64_dtou,
   Gfun(External (EF_runtime "__compcert_i64_dtou"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tulong cc_default)) ::
 (___compcert_i64_stod,
   Gfun(External (EF_runtime "__compcert_i64_stod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tlong Tnil) tdouble cc_default)) ::
 (___compcert_i64_utod,
   Gfun(External (EF_runtime "__compcert_i64_utod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tulong Tnil) tdouble cc_default)) ::
 (___compcert_i64_stof,
   Gfun(External (EF_runtime "__compcert_i64_stof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tlong Tnil) tfloat cc_default)) ::
 (___compcert_i64_utof,
   Gfun(External (EF_runtime "__compcert_i64_utof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tulong Tnil) tfloat cc_default)) ::
 (___compcert_i64_sdiv,
   Gfun(External (EF_runtime "__compcert_i64_sdiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_udiv,
   Gfun(External (EF_runtime "__compcert_i64_udiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_smod,
   Gfun(External (EF_runtime "__compcert_i64_smod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umod,
   Gfun(External (EF_runtime "__compcert_i64_umod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_shl,
   Gfun(External (EF_runtime "__compcert_i64_shl"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_shr,
   Gfun(External (EF_runtime "__compcert_i64_shr"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tint Tnil)) tulong cc_default)) ::
 (___compcert_i64_sar,
   Gfun(External (EF_runtime "__compcert_i64_sar"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_smulh,
   Gfun(External (EF_runtime "__compcert_i64_smulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umulh,
   Gfun(External (EF_runtime "__compcert_i64_umulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___builtin_bswap64,
   Gfun(External (EF_builtin "__builtin_bswap64"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tulong Tnil) tulong cc_default)) ::
 (___builtin_clz,
   Gfun(External (EF_builtin "__builtin_clz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzl,
   Gfun(External (EF_builtin "__builtin_clzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzll,
   Gfun(External (EF_builtin "__builtin_clzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_ctz,
   Gfun(External (EF_builtin "__builtin_ctz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzl,
   Gfun(External (EF_builtin "__builtin_ctzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzll,
   Gfun(External (EF_builtin "__builtin_ctzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_fmax,
   Gfun(External (EF_builtin "__builtin_fmax"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmin,
   Gfun(External (EF_builtin "__builtin_fmin"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmadd,
   Gfun(External (EF_builtin "__builtin_fmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fmsub,
   Gfun(External (EF_builtin "__builtin_fmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmadd,
   Gfun(External (EF_builtin "__builtin_fnmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmsub,
   Gfun(External (EF_builtin "__builtin_fnmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_read16_reversed,
   Gfun(External (EF_builtin "__builtin_read16_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tushort) Tnil) tushort cc_default)) ::
 (___builtin_read32_reversed,
   Gfun(External (EF_builtin "__builtin_read32_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tuint) Tnil) tuint cc_default)) ::
 (___builtin_write16_reversed,
   Gfun(External (EF_builtin "__builtin_write16_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tushort) (Tcons tushort Tnil))
     tvoid cc_default)) ::
 (___builtin_write32_reversed,
   Gfun(External (EF_builtin "__builtin_write32_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tuint) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_nop,
   Gfun(External (EF_builtin "__builtin_nop"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_debug,
   Gfun(External (EF_external "__builtin_debug"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons tint Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (_append, Gfun(Internal f_append)) :: nil).

Definition public_idents : list ident :=
(_append :: ___builtin_debug :: ___builtin_nop ::
 ___builtin_write32_reversed :: ___builtin_write16_reversed ::
 ___builtin_read32_reversed :: ___builtin_read16_reversed ::
 ___builtin_fnmsub :: ___builtin_fnmadd :: ___builtin_fmsub ::
 ___builtin_fmadd :: ___builtin_fmin :: ___builtin_fmax ::
 ___builtin_ctzll :: ___builtin_ctzl :: ___builtin_ctz :: ___builtin_clzll ::
 ___builtin_clzl :: ___builtin_clz :: ___builtin_bswap64 ::
 ___compcert_i64_umulh :: ___compcert_i64_smulh :: ___compcert_i64_sar ::
 ___compcert_i64_shr :: ___compcert_i64_shl :: ___compcert_i64_umod ::
 ___compcert_i64_smod :: ___compcert_i64_udiv :: ___compcert_i64_sdiv ::
 ___compcert_i64_utof :: ___compcert_i64_stof :: ___compcert_i64_utod ::
 ___compcert_i64_stod :: ___compcert_i64_dtou :: ___compcert_i64_dtos ::
 ___compcert_va_composite :: ___compcert_va_float64 ::
 ___compcert_va_int64 :: ___compcert_va_int32 :: ___builtin_va_end ::
 ___builtin_va_copy :: ___builtin_va_arg :: ___builtin_va_start ::
 ___builtin_membar :: ___builtin_annot_intval :: ___builtin_annot ::
 ___builtin_memcpy_aligned :: ___builtin_fsqrt :: ___builtin_fabs ::
 ___builtin_bswap16 :: ___builtin_bswap32 :: ___builtin_bswap ::
 ___builtin_ais_annot :: nil).

Definition prog : Clight.program := 
  mkprogram composites global_definitions public_idents _main Logic.I. *)

Instance CompSpecs : compspecs. make_compspecs prog. Defined.

Definition Vprog : varspecs. mk_varspecs prog. Defined.

Definition t_struct_list := Tstruct _list noattr.



Fixpoint listrep (sh: share)

            (contents: list val) (x: val) : mpred :=

 match contents with

 | h::hs =>

              EX y:val,

                data_at sh t_struct_list (h,y) x * listrep sh hs y

 | nil => !! (x = nullval) && emp

 end.



Arguments listrep sh contents x : simpl never.



Lemma listrep_local_facts:

  forall sh contents p,

     listrep sh contents p |--

     !! (is_pointer_or_null p /\ (p=nullval <-> contents=nil)).

Proof.

intros.

revert p; induction contents; unfold listrep; fold listrep; intros; normalize.

apply prop_right; split; simpl; auto. intuition.

entailer!.

split; intro. subst p. destruct H; contradiction. inv H2.

Qed.



Hint Resolve listrep_local_facts : saturate_local.



Lemma listrep_valid_pointer:

  forall sh contents p,

   sepalg.nonidentity sh ->

   listrep sh contents p |-- valid_pointer p.

Proof.

 destruct contents; unfold listrep; fold listrep; intros; normalize.

 auto with valid_pointer.

 apply sepcon_valid_pointer1.

 apply data_at_valid_ptr; auto. simpl;  computable.

Qed.



Hint Resolve listrep_valid_pointer : valid_pointer.



Lemma listrep_null: forall sh contents,

    listrep sh contents nullval = !! (contents=nil) && emp.

Proof.

destruct contents; unfold listrep; fold listrep.

normalize.

apply pred_ext.

Intros y. entailer. destruct H; contradiction.

Intros.

Qed.



Lemma is_pointer_or_null_not_null:

 forall x, is_pointer_or_null x -> x <> nullval -> isptr x.

Proof.

intros.

 destruct x; try contradiction. hnf in H; subst i. contradiction H0; reflexivity.

 apply I.

Qed.



Definition append_spec :=

 DECLARE _append

  WITH sh : share, x: val, y: val, s1: list val, s2: list val

  PRE [ _x OF (tptr t_struct_list) , _y OF (tptr t_struct_list)]

     PROP(writable_share sh)

     LOCAL (temp _x x; temp _y y)

     SEP (listrep sh s1 x; listrep sh s2 y)

  POST [ tptr t_struct_list ]

    EX r: val,

     PROP()

     LOCAL(temp ret_temp r)

     SEP (listrep sh (s1++s2) r).



Definition Gprog : funspecs :=   ltac:(with_library prog [ append_spec ]).



Module Proof1.



Definition lseg (sh: share) (contents: list val) (x z: val) : mpred :=

  ALL cts2:list val, listrep sh cts2 z -* listrep sh (contents++cts2) x.



Lemma body_append: semax_body Vprog Gprog f_append append_spec.

Proof.

start_function.

forward_if.

*

 subst x. rewrite listrep_null. normalize.

 forward.

 Exists y.

 entailer!.

 simpl; auto.

*

 forward.

 destruct s1 as [ | v s1']; unfold listrep at 1; fold listrep.

 normalize.

 Intros u.

 remember (v::s1') as s1.

 forward.

 forward_while

      ( EX a: val, EX s1b: list val, EX t: val, EX u: val,

            PROP ()

            LOCAL (temp _x x; temp _t t; temp _u u; temp _y y)

            SEP (listrep sh (a::s1b++s2) t -* listrep sh (s1++s2) x;

                   data_at sh t_struct_list (a,u) t;

                   listrep sh s1b u;

                   listrep sh s2 y))%assert.

+ 

   Exists v s1' x u.

   subst s1. entailer!. simpl. cancel_wand.

+ 

   entailer!.

+ 

   clear v Heqs1.

   destruct s1b; unfold listrep at 3; fold listrep. Intros. contradiction.

   Intros z.

   forward.

   forward.

   Exists (v,s1b,u0,z). unfold fst, snd.

   simpl app.

   entailer!.

   rewrite sepcon_comm.

   apply RAMIF_PLAIN.trans''.

   apply wand_sepcon_adjoint.

   forget (v::s1b++s2) as s3.

   unfold listrep; fold listrep; Exists u0; auto.

+ 

   clear v s1' Heqs1.

   forward.

   forward.

   rewrite (proj1 H2 (eq_refl _)).

   Exists x.

   simpl app.

   clear.

   entailer!.

   unfold listrep at 3; fold listrep. normalize.

   pull_right (listrep sh (a :: s2) t -* listrep sh (s1 ++ s2) x).

   apply modus_ponens_wand'.

   unfold listrep at 2; fold listrep. Exists y; auto.

Qed.



End Proof1.



Module Proof2.



Definition lseg (sh: share) (contents: list val) (x z: val) : mpred :=

  ALL cts2:list val, listrep sh cts2 z -* listrep sh (contents++cts2) x.



Lemma body_append: semax_body Vprog Gprog f_append append_spec.

Proof.

start_function.

forward_if.

*

 subst x. rewrite listrep_null. normalize.

 forward.

 Exists y.

 entailer!.

 simpl; auto.

*

 forward.

 destruct s1 as [ | v s1']; unfold listrep; fold listrep. Intros; contradiction.

 Intros u.

 remember (v::s1') as s1.

 forward.

 forward_while

      (EX s1a: list val,  EX a: val, EX s1b: list val, EX t: val, EX u: val,

            PROP (s1 = s1a ++ a :: s1b)

            LOCAL (temp _x x; temp _t t; temp _u u; temp _y y)

            SEP (lseg sh s1a x t;

                   data_at sh t_struct_list (a,u) t;

                   listrep sh s1b u;

                   listrep sh s2 y))%assert.

+ 

   Exists (@nil val) v s1' x u.  entailer!.

   unfold lseg. apply allp_right; intro. simpl. cancel_wand.

+ 

   entailer!.

+ 

   clear v Heqs1. subst s1.

   destruct s1b; unfold listrep; fold listrep. Intros; contradiction.

   Intros z.

   forward.

   forward.

   Exists (s1a++[a],v,s1b,u0,z). unfold fst, snd.

   rewrite !app_ass. simpl app.

   entailer!.

   unfold lseg.

   rewrite sepcon_comm.

   clear.

   apply RAMIF_Q.trans'' with (cons a).

   extensionality cts; simpl; rewrite app_ass; reflexivity.

   apply allp_right; intro. apply wand_sepcon_adjoint.

   unfold listrep at 2; fold listrep; Exists u0.  apply derives_refl.

 + 

   forward. forward.

   Exists x. entailer!.

   destruct H3 as [? _]. specialize (H3 (eq_refl _)). subst s1b.

   unfold listrep at 1. normalize. rewrite H0. rewrite app_ass. simpl app.

   unfold lseg.

   rewrite sepcon_assoc.

   eapply derives_trans; [apply allp_sepcon1 | ]. apply allp_left with (a::s2).

   rewrite sepcon_comm.

   eapply derives_trans; [ | apply modus_ponens_wand].

   apply sepcon_derives; [ | apply derives_refl].

   unfold listrep at 2; fold listrep. Exists y; auto.

Qed.



End Proof2.



Module Proof3.  



Fixpoint lseg (sh: share)

            (contents: list val) (x z: val) : mpred :=

 match contents with

 | h::hs => !! (x<>z) && 

              EX y:val,

                data_at sh t_struct_list (h,y) x * lseg sh hs y z

 | nil => !! (x = z /\ is_pointer_or_null x) && emp

 end.



Arguments lseg sh contents x z : simpl never.



Lemma lseg_local_facts:

  forall sh contents p q,

     lseg sh contents p q |--

     !! (is_pointer_or_null p /\ is_pointer_or_null q /\ (p=q <-> contents=nil)).

Proof.

intros.

apply derives_trans with (lseg sh contents p q && !! (is_pointer_or_null p /\

        is_pointer_or_null q /\ (p = q <-> contents = []))).

2: entailer!.

revert p; induction contents; intros; simpl; unfold lseg; fold lseg.

entailer!.

intuition.

Intros y. Exists y.

eapply derives_trans.

apply sepcon_derives.

apply derives_refl.

apply IHcontents.

entailer!.

intuition congruence.

Qed.



Hint Resolve lseg_local_facts : saturate_local.



Lemma lseg_valid_pointer:

  forall sh contents p ,

   sepalg.nonidentity sh ->

   lseg sh contents p nullval |-- valid_pointer p.

Proof.

 destruct contents; unfold lseg; fold lseg; intros; normalize;

 auto with valid_pointer.

Qed.



Hint Resolve lseg_valid_pointer : valid_pointer.



Lemma lseg_eq: forall sh contents x,

    lseg sh contents x x = !! (contents=nil /\ is_pointer_or_null x) && emp.

Proof.

intros.

destruct contents; unfold lseg; fold lseg.

f_equal. f_equal. f_equal. apply prop_ext; intuition.

normalize.

apply pred_ext.

Intros y. entailer.

Intros.

Qed.



Lemma lseg_null: forall sh contents,

    lseg sh contents nullval nullval = !! (contents=nil) && emp.

Proof.

intros.

 rewrite lseg_eq.

 apply pred_ext.

 entailer!.

 entailer!.

Qed.



Lemma lseg_cons: forall sh (v u x: val) s,

   readable_share sh ->

 data_at sh t_struct_list (v, u) x * lseg sh s u nullval

 |-- lseg sh [v] x u * lseg sh s u nullval.

Proof.

intros.

     unfold lseg at 2. Exists u. 

     entailer.

     destruct s; unfold lseg at 1; fold lseg; entailer.

Qed.



Lemma lseg_cons': forall sh (v u x a b: val) ,

   readable_share sh ->

 data_at sh t_struct_list (v, u) x * data_at sh t_struct_list (a,b) u

 |-- lseg sh [v] x u * data_at sh t_struct_list (a,b) u.

Proof.

intros.

     unfold lseg. Exists u. 

     entailer.

Qed.



Lemma lseg_app': forall sh s1 s2 (a w x y z: val),

   readable_share sh ->

   lseg sh s1 w x * lseg sh s2 x y * data_at sh t_struct_list (a,z) y |--

   lseg sh (s1++s2) w y * data_at sh t_struct_list (a,z) y.

Proof.

 intros.

 revert w; induction s1; intro; simpl.

 unfold lseg at 1. entailer!.

 unfold lseg at 1 3; fold lseg. Intros j; Exists j.

 entailer.

 sep_apply (IHs1 j).

 cancel. 

Qed.



Lemma lseg_app_null: forall sh s1 s2 (w x: val),

   readable_share sh ->

   lseg sh s1 w x * lseg sh s2 x nullval |--

   lseg sh (s1++s2) w nullval.

Proof.

 intros.

 revert w; induction s1; intro; simpl.

 unfold lseg at 1. entailer!.

 unfold lseg at 1 3; fold lseg. Intros j; Exists j.

 entailer.

 sep_apply (IHs1 j).

 cancel.

Qed.



Lemma lseg_app: forall sh s1 s2 a s3 (w x y z: val),

   readable_share sh ->

   lseg sh s1 w x * lseg sh s2 x y * lseg sh (a::s3) y z |--

   lseg sh (s1++s2) w y * lseg sh (a::s3) y z.

Proof.

 intros.

 unfold lseg at 3 5; fold lseg.

 Intros u; Exists u. rewrite prop_true_andp by auto.

 sep_apply (lseg_app' sh s1 s2 a w x y u); auto.

 cancel.

Qed.



Lemma listrep_lseg_null :

 listrep = fun sh s p => lseg sh s p nullval.

Proof.

extensionality sh s p.

revert p.

induction s; intros.

unfold lseg, listrep; apply pred_ext; entailer!.

unfold lseg, listrep; fold lseg; fold listrep.

apply pred_ext; Intros y; Exists y; rewrite IHs; entailer!.

Qed.



Lemma body_append: semax_body Vprog Gprog f_append append_spec.

Proof.

start_function.

revert POSTCONDITION; rewrite listrep_lseg_null; intro.

forward_if.

*

 subst x. rewrite lseg_null. Intros. subst.

 forward.

 Exists y.

 entailer!.

 simpl; auto.

*

 forward.

 destruct s1 as [ | v s1']; unfold lseg at 1; fold lseg.

 Intros. contradiction H.

 Intros u.

 clear - SH.

 remember (v::s1') as s1.

 forward.

 forward_while

      (EX s1a: list val, EX a: val, EX s1b: list val, EX t: val, EX u: val,

            PROP (s1 = s1a ++ a :: s1b)

            LOCAL (temp _x x; temp _t t; temp _u u; temp _y y)

            SEP (lseg sh s1a x t; 

                   data_at sh t_struct_list (a,u) t;

                   lseg sh s1b u nullval; 

                   lseg sh s2 y nullval))%assert.

 + 

     Exists (@nil val) v s1' x u.

     subst s1. rewrite lseg_eq.

     entailer.



 + 

     entailer!.

 + 

    destruct s1b; unfold lseg at 2; fold lseg.

    Intros. contradiction.

    Intros z.

    forward.

    forward.

    Exists (s1a++a::nil, v0, s1b,u0,z). unfold fst, snd.

    simpl app; rewrite app_ass.

    entailer.

    sep_apply (lseg_cons' sh a u0 t v0 z); auto.

    sep_apply (lseg_app' sh s1a [a] v0 x t u0 z); auto.

    cancel.

 + 

    clear v s1' Heqs1.

    subst. rewrite lseg_eq. Intros. subst. 

    forward.

    forward.

    Exists x. 

    entailer!.

    sep_apply (lseg_cons sh a y t s2); auto.

    sep_apply (lseg_app_null sh [a] s2 t y); auto.

    rewrite app_ass.

    sep_apply (lseg_app_null sh s1a ([a]++s2) x t); auto.

Qed.



End Proof3.



