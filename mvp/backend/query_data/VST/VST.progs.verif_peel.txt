
Require Import VST.floyd.proofauto.
Require Import VST.progs.peel.
Instance CompSpecs : compspecs. make_compspecs prog. Defined.
Definition Vprog : varspecs.  mk_varspecs prog. Defined.

Definition f_spec : ident * funspec :=
 DECLARE _f
  WITH b: Z
  PRE [ _a OF tint ]
          PROP  (0 <= b; (b+1)*(b+1) < Int.max_signed)
          LOCAL (temp _b (Vint (Int.repr b)))
          SEP   ()
  POST [ tuint ]
        EX a:Z, 
        PROP ((a-1)*(a-1)<=b /\ a*a>b)
        LOCAL(temp ret_temp  (Vint (Int.repr a)))
           SEP ().

Definition Gprog : funspecs :=
        ltac:(with_library prog [f_spec ]).

Lemma body_f: semax_body Vprog Gprog f_f f_spec.
Proof.
start_function.

assert (0 <= b <= b*b). {
   split; auto.
   destruct (zeq b 0). subst. omega.
   rewrite <- Z.mul_1_l at 1.
   apply Zmult_le_compat_r;  rep_omega.
}
assert (b*b <= (b+1)*(b+1) < Int.max_signed). {
  split; auto.
  apply Z.square_le_mono_nonneg; omega.
}
clear H H0.

apply semax_convert_for_while'; [reflexivity .. | ].
forward.  
normalize.

forward_seq (EX a:Z,  PROP ((a-1)*(a-1)<=b /\ a*a>b)
                     LOCAL(temp _a (Vint (Int.repr a)))
                     SEP ()).

eapply semax_while_peel.

-
 forward_if.
 forward.
 forward.
 apply ENTAIL_refl.
 rewrite Z.mul_add_distr_r, Z.mul_add_distr_l in *; omega.
-
 forward_while (EX i:Z, PROP (0 <= i <= b+1; b < (i+1)*(i+1))
             LOCAL(temp _i (Vint (Int.repr i)); temp _b (Vint (Int.repr b)); temp _a (Vint (Int.repr (i+1))))
             SEP()).
 *
  Exists b; entailer!.
  split.
  rewrite Z.mul_add_distr_r, Z.mul_add_distr_l in *; omega.
  f_equal; f_equal; omega.
 *
   entailer!.
   split. 
   pose proof (Z.square_nonneg i). rep_omega.
   assert (i*i <= (b+1)*(b+1)) by (apply Z.square_le_mono_nonneg; omega).
   omega.
 *
   forward.
   forward.
   Exists (i-1).
   entailer!.
   rewrite Z.sub_add. split; auto. split; try omega.
   destruct (zeq i 0); try omega. subst.
   rewrite Int.signed_repr in HRE by rep_omega. omega.
   split; auto.
   assert (i*i <= (b+1)*(b+1)) by (apply Z.square_le_mono_nonneg; omega).
   pose proof (Z.square_nonneg i).
   rewrite Int.signed_repr in HRE by rep_omega.
   omega.
 *
   forward.
   Exists (i+1).
   entailer!.
   rewrite Z.add_simpl_r.
   assert (i*i <= (b+1)*(b+1)) by (apply Z.square_le_mono_nonneg; omega).
   pose proof (Z.square_nonneg i).
   rewrite Int.signed_repr in HRE by rep_omega.
   rewrite Z.mul_add_distr_r, Z.mul_add_distr_l in *.
   omega.
-
abbreviate_semax.
Intros a.
forward.
Exists a.
entailer!.
Qed.
