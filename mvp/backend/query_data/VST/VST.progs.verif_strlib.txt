Require Import VST.floyd.proofauto.
(* VST.floyd.proofauto:
From compcert Require Export common.AST cfrontend.Ctypes cfrontend.Clight.
Export Cop.
Require Export VST.floyd.base2.
Require Export VST.floyd.functional_base.
Require Export VST.floyd.client_lemmas.
Require Export VST.floyd.go_lower.
Require Export VST.floyd.closed_lemmas.
Require Export VST.floyd.compare_lemmas.
Require Export VST.floyd.semax_tactics.
Require Export VST.floyd.forward.
Require Export VST.floyd.subsume_funspec.
Require Export VST.floyd.call_lemmas.
Require Export VST.floyd.forward_lemmas.
Require Export VST.floyd.for_lemmas.
Require Export VST.floyd.nested_pred_lemmas.
Require Export VST.floyd.nested_field_lemmas.
Require Export VST.floyd.efield_lemmas.
Require Export VST.floyd.mapsto_memory_block.
Require Export VST.floyd.aggregate_type.
Require VST.floyd.aggregate_pred. Export floyd.aggregate_pred.aggregate_pred.
Require Export VST.floyd.reptype_lemmas.
Require Export VST.floyd.simpl_reptype.
Require Export VST.floyd.data_at_rec_lemmas.
Require Export VST.floyd.field_at.
Require Export VST.floyd.field_at_wand.
Require Export VST.floyd.field_compat.
Require Export VST.floyd.stronger.
Require Export VST.floyd.loadstore_mapsto.
Require Export VST.floyd.loadstore_field_at.
Require Export VST.floyd.nested_loadstore.
Require Export VST.floyd.local2ptree_denote.
Require Export VST.floyd.local2ptree_eval.
Require Export VST.floyd.local2ptree_typecheck.
Require Export VST.floyd.proj_reptype_lemmas.
Require Export VST.floyd.replace_refill_reptype_lemmas.
Require Export VST.floyd.sc_set_load_store.
Require Export VST.floyd.unfold_data_at.
Require Export VST.floyd.entailer.
Require Export VST.floyd.globals_lemmas.
Require Export VST.floyd.diagnosis.
Require Export VST.floyd.freezer.
Require Export VST.floyd.deadvars.
Require Export VST.floyd.hints.
Require Export VST.floyd.Clightnotations.
Require VST.msl.iter_sepcon.
Require VST.msl.wand_frame.
Require VST.msl.wandQ_frame.

Arguments semax {CS} {Espec} Delta Pre%assert cmd%C Post%assert.
Export ListNotations.
Export Clight_Cop2.

Hint Rewrite add_repr mul_repr sub_repr : entailer_rewrite.
Hint Rewrite ptrofs_add_repr ptrofs_mul_repr ptrofs_sub_repr : entailer_rewrite.
Hint Rewrite mul64_repr add64_repr sub64_repr or64_repr and64_repr : entailer_rewrite.
Hint Rewrite neg_repr neg64_repr : entailer_rewrite.
Hint Rewrite ptrofs_to_int_repr: entailer_rewrite norm.

Lemma Vptrofs_unfold_false: 
Archi.ptr64 = false -> Vptrofs = fun x => Vint (Ptrofs.to_int x).

Lemma Vptrofs_unfold_true: 
Archi.ptr64 = true -> Vptrofs = fun x => Vlong (Ptrofs.to_int64 x).

Lemma modu_repr: forall x y, 
   0 <= x <= Int.max_unsigned ->
Hint Rewrite modu_repr using rep_omega : entailer_rewrite norm.

Hint Rewrite Vptrofs_unfold_false using reflexivity: entailer_rewrite norm.
Hint Rewrite Vptrofs_unfold_true using reflexivity: entailer_rewrite norm.

Hint Extern 1 (Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef) => reflexivity : cancel.
Hint Extern 1 (list_repeat _ Vundef = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = list_repeat _ Vundef) => reflexivity : cancel.
Hint Extern 1 (Vundef :: _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = Vundef :: _) => reflexivity : cancel.
Hint Extern 1 (@nil _ = default_val _) => reflexivity : cancel.
Hint Extern 1 (default_val _ = @nil _) => reflexivity : cancel.

Instance Inhabitant_mpred : Inhabitant mpred := @FF mpred Nveric.
Instance Inhabitant_share : Inhabitant share := Share.bot.

Arguments deref_noload ty v / .
Arguments nested_field_array_type {cs} t gfs lo hi / .
Arguments nested_field_type {cs} t gfs / .  
Arguments nested_field_offset {cs} t gfs / .  
Arguments Z.mul !x !y.
Arguments Z.sub !m !n.
Arguments Z.add !x !y.
Global Transparent peq.
Global Transparent Archi.ptr64.

Ltac step :=
first [ progress Intros
       | let x := fresh "x" in Intros x
       | forward
       | forward_if
       | forward_call
       | rep_omega | cstring' | list_solve
       | EExists
       | progress (autorewrite with sublist in *|-)
       | progress (autorewrite with sublist)
       | progress (autorewrite with norm)
       | cstring1
       | deadvars!
       | progress_entailer
       ]. *)

Require Import VST.progs.strlib.
(* VST.progs.strlib:
From Coq Require Import String List ZArith.
From compcert Require Import Coqlib Integers Floats AST Ctypes Cop Clight Clightdefs.
Local Open Scope Z_scope.

Module Info.
  Definition version := "3.3"%string.
  Definition build_number := ""%string.
  Definition build_tag := ""%string.
  Definition arch := "x86"%string.
  Definition model := "32sse2"%string.
  Definition abi := "standard"%string.
  Definition bitsize := 32.
  Definition big_endian := false.
  Definition source_file := "progs/strlib.c"%string.
  Definition normalized := true.
End Info.

Definition ___builtin_ais_annot : ident := 1%positive.
Definition ___builtin_annot : ident := 8%positive.
Definition ___builtin_annot_intval : ident := 9%positive.
Definition ___builtin_bswap : ident := 2%positive.
Definition ___builtin_bswap16 : ident := 4%positive.
Definition ___builtin_bswap32 : ident := 3%positive.
Definition ___builtin_bswap64 : ident := 34%positive.
Definition ___builtin_clz : ident := 35%positive.
Definition ___builtin_clzl : ident := 36%positive.
Definition ___builtin_clzll : ident := 37%positive.
Definition ___builtin_ctz : ident := 38%positive.
Definition ___builtin_ctzl : ident := 39%positive.
Definition ___builtin_ctzll : ident := 40%positive.
Definition ___builtin_debug : ident := 52%positive.
Definition ___builtin_fabs : ident := 5%positive.
Definition ___builtin_fmadd : ident := 43%positive.
Definition ___builtin_fmax : ident := 41%positive.
Definition ___builtin_fmin : ident := 42%positive.
Definition ___builtin_fmsub : ident := 44%positive.
Definition ___builtin_fnmadd : ident := 45%positive.
Definition ___builtin_fnmsub : ident := 46%positive.
Definition ___builtin_fsqrt : ident := 6%positive.
Definition ___builtin_membar : ident := 10%positive.
Definition ___builtin_memcpy_aligned : ident := 7%positive.
Definition ___builtin_nop : ident := 51%positive.
Definition ___builtin_read16_reversed : ident := 47%positive.
Definition ___builtin_read32_reversed : ident := 48%positive.
Definition ___builtin_va_arg : ident := 12%positive.
Definition ___builtin_va_copy : ident := 13%positive.
Definition ___builtin_va_end : ident := 14%positive.
Definition ___builtin_va_start : ident := 11%positive.
Definition ___builtin_write16_reversed : ident := 49%positive.
Definition ___builtin_write32_reversed : ident := 50%positive.
Definition ___compcert_i64_dtos : ident := 19%positive.
Definition ___compcert_i64_dtou : ident := 20%positive.
Definition ___compcert_i64_sar : ident := 31%positive.
Definition ___compcert_i64_sdiv : ident := 25%positive.
Definition ___compcert_i64_shl : ident := 29%positive.
Definition ___compcert_i64_shr : ident := 30%positive.
Definition ___compcert_i64_smod : ident := 27%positive.
Definition ___compcert_i64_smulh : ident := 32%positive.
Definition ___compcert_i64_stod : ident := 21%positive.
Definition ___compcert_i64_stof : ident := 23%positive.
Definition ___compcert_i64_udiv : ident := 26%positive.
Definition ___compcert_i64_umod : ident := 28%positive.
Definition ___compcert_i64_umulh : ident := 33%positive.
Definition ___compcert_i64_utod : ident := 22%positive.
Definition ___compcert_i64_utof : ident := 24%positive.
Definition ___compcert_va_composite : ident := 18%positive.
Definition ___compcert_va_float64 : ident := 17%positive.
Definition ___compcert_va_int32 : ident := 15%positive.
Definition ___compcert_va_int64 : ident := 16%positive.
Definition _c : ident := 54%positive.
Definition _d : ident := 56%positive.
Definition _d1 : ident := 65%positive.
Definition _d2 : ident := 66%positive.
Definition _dest : ident := 58%positive.
Definition _i : ident := 55%positive.
Definition _j : ident := 61%positive.
Definition _main : ident := 69%positive.
Definition _src : ident := 59%positive.
Definition _str : ident := 53%positive.
Definition _str1 : ident := 63%positive.
Definition _str2 : ident := 64%positive.
Definition _strcat : ident := 62%positive.
Definition _strchr : ident := 57%positive.
Definition _strcmp : ident := 67%positive.
Definition _strcpy : ident := 60%positive.
Definition _strlen : ident := 68%positive.
Definition _t'1 : ident := 70%positive.
Definition _t'2 : ident := 71%positive.
Definition _t'3 : ident := 72%positive.

Definition f_strchr := {|
  fn_return := (tptr tschar);
  fn_callconv := cc_default;
  fn_params := ((_str, (tptr tschar)) :: (_c, tint) :: nil);
  fn_vars := nil;
  fn_temps := ((_i, tuint) :: (_d, tschar) :: (_t'1, tschar) :: nil);
  fn_body :=
(Ssequence
  (Sset _i (Econst_int (Int.repr 0) tint))
  (Sloop
    (Ssequence
      Sskip
      (Ssequence
        (Ssequence
          (Sset _t'1
            (Ederef
              (Ebinop Oadd (Etempvar _str (tptr tschar)) (Etempvar _i tuint)
                (tptr tschar)) tschar))
          (Sset _d (Ecast (Etempvar _t'1 tschar) tschar)))
        (Ssequence
          (Sifthenelse (Ebinop Oeq (Etempvar _d tschar) (Etempvar _c tint)
                         tint)
            (Sreturn (Some (Ebinop Oadd (Etempvar _str (tptr tschar))
                             (Etempvar _i tuint) (tptr tschar))))
            Sskip)
          (Sifthenelse (Ebinop Oeq (Etempvar _d tschar)
                         (Econst_int (Int.repr 0) tint) tint)
            (Sreturn (Some (Econst_int (Int.repr 0) tint)))
            Sskip))))
    (Sset _i
      (Ebinop Oadd (Etempvar _i tuint) (Econst_int (Int.repr 1) tint) tuint))))
|}.

Definition f_strcpy := {|
  fn_return := (tptr tschar);
  fn_callconv := cc_default;
  fn_params := ((_dest, (tptr tschar)) :: (_src, (tptr tschar)) :: nil);
  fn_vars := nil;
  fn_temps := ((_i, tuint) :: (_d, tschar) :: (_t'1, tschar) :: nil);
  fn_body :=
(Ssequence
  (Sset _i (Econst_int (Int.repr 0) tint))
  (Sloop
    (Ssequence
      Sskip
      (Ssequence
        (Ssequence
          (Sset _t'1
            (Ederef
              (Ebinop Oadd (Etempvar _src (tptr tschar)) (Etempvar _i tuint)
                (tptr tschar)) tschar))
          (Sset _d (Ecast (Etempvar _t'1 tschar) tschar)))
        (Ssequence
          (Sassign
            (Ederef
              (Ebinop Oadd (Etempvar _dest (tptr tschar)) (Etempvar _i tuint)
                (tptr tschar)) tschar) (Etempvar _d tschar))
          (Sifthenelse (Ebinop Oeq (Etempvar _d tschar)
                         (Econst_int (Int.repr 0) tint) tint)
            (Sreturn (Some (Etempvar _dest (tptr tschar))))
            Sskip))))
    (Sset _i
      (Ebinop Oadd (Etempvar _i tuint) (Econst_int (Int.repr 1) tint) tuint))))
|}.

Definition f_strcat := {|
  fn_return := (tptr tschar);
  fn_callconv := cc_default;
  fn_params := ((_dest, (tptr tschar)) :: (_src, (tptr tschar)) :: nil);
  fn_vars := nil;
  fn_temps := ((_i, tuint) :: (_j, tuint) :: (_d, tschar) ::
               (_t'2, tschar) :: (_t'1, tschar) :: nil);
  fn_body :=
(Ssequence
  (Ssequence
    (Sset _i (Econst_int (Int.repr 0) tint))
    (Sloop
      (Ssequence
        Sskip
        (Ssequence
          (Ssequence
            (Sset _t'2
              (Ederef
                (Ebinop Oadd (Etempvar _dest (tptr tschar))
                  (Etempvar _i tuint) (tptr tschar)) tschar))
            (Sset _d (Ecast (Etempvar _t'2 tschar) tschar)))
          (Sifthenelse (Ebinop Oeq (Etempvar _d tschar)
                         (Econst_int (Int.repr 0) tint) tint)
            Sbreak
            Sskip)))
      (Sset _i
        (Ebinop Oadd (Etempvar _i tuint) (Econst_int (Int.repr 1) tint)
          tuint))))
  (Ssequence
    (Sset _j (Econst_int (Int.repr 0) tint))
    (Sloop
      (Ssequence
        Sskip
        (Ssequence
          (Ssequence
            (Sset _t'1
              (Ederef
                (Ebinop Oadd (Etempvar _src (tptr tschar))
                  (Etempvar _j tuint) (tptr tschar)) tschar))
            (Sset _d (Ecast (Etempvar _t'1 tschar) tschar)))
          (Ssequence
            (Sassign
              (Ederef
                (Ebinop Oadd (Etempvar _dest (tptr tschar))
                  (Ebinop Oadd (Etempvar _i tuint) (Etempvar _j tuint) tuint)
                  (tptr tschar)) tschar) (Etempvar _d tschar))
            (Sifthenelse (Ebinop Oeq (Etempvar _d tschar)
                           (Econst_int (Int.repr 0) tint) tint)
              (Sreturn (Some (Etempvar _dest (tptr tschar))))
              Sskip))))
      (Sset _j
        (Ebinop Oadd (Etempvar _j tuint) (Econst_int (Int.repr 1) tint)
          tuint)))))
|}.

Definition f_strcmp := {|
  fn_return := tint;
  fn_callconv := cc_default;
  fn_params := ((_str1, (tptr tschar)) :: (_str2, (tptr tschar)) :: nil);
  fn_vars := nil;
  fn_temps := ((_i, tuint) :: (_d1, tschar) :: (_d2, tschar) ::
               (_t'1, tint) :: (_t'3, tschar) :: (_t'2, tschar) :: nil);
  fn_body :=
(Ssequence
  (Sset _i (Econst_int (Int.repr 0) tint))
  (Sloop
    (Ssequence
      Sskip
      (Ssequence
        (Ssequence
          (Sset _t'3
            (Ederef
              (Ebinop Oadd (Etempvar _str1 (tptr tschar)) (Etempvar _i tuint)
                (tptr tschar)) tschar))
          (Sset _d1 (Ecast (Etempvar _t'3 tschar) tschar)))
        (Ssequence
          (Ssequence
            (Sset _t'2
              (Ederef
                (Ebinop Oadd (Etempvar _str2 (tptr tschar))
                  (Etempvar _i tuint) (tptr tschar)) tschar))
            (Sset _d2 (Ecast (Etempvar _t'2 tschar) tschar)))
          (Ssequence
            (Sifthenelse (Ebinop Oeq (Etempvar _d1 tschar)
                           (Econst_int (Int.repr 0) tint) tint)
              (Sset _t'1
                (Ecast
                  (Ebinop Oeq (Etempvar _d2 tschar)
                    (Econst_int (Int.repr 0) tint) tint) tbool))
              (Sset _t'1 (Econst_int (Int.repr 0) tint)))
            (Sifthenelse (Etempvar _t'1 tint)
              (Sreturn (Some (Econst_int (Int.repr 0) tint)))
              (Sifthenelse (Ebinop Olt (Etempvar _d1 tschar)
                             (Etempvar _d2 tschar) tint)
                (Sreturn (Some (Eunop Oneg (Econst_int (Int.repr 1) tint)
                                 tint)))
                (Sifthenelse (Ebinop Ogt (Etempvar _d1 tschar)
                               (Etempvar _d2 tschar) tint)
                  (Sreturn (Some (Econst_int (Int.repr 1) tint)))
                  Sskip)))))))
    (Sset _i
      (Ebinop Oadd (Etempvar _i tuint) (Econst_int (Int.repr 1) tint) tuint))))
|}.

Definition f_strlen := {|
  fn_return := tuint;
  fn_callconv := cc_default;
  fn_params := ((_str, (tptr tschar)) :: nil);
  fn_vars := nil;
  fn_temps := ((_i, tuint) :: (_t'1, tschar) :: nil);
  fn_body :=
(Ssequence
  (Sset _i (Econst_int (Int.repr 0) tint))
  (Sloop
    (Ssequence
      Sskip
      (Ssequence
        (Sset _t'1
          (Ederef
            (Ebinop Oadd (Etempvar _str (tptr tschar)) (Etempvar _i tuint)
              (tptr tschar)) tschar))
        (Sifthenelse (Ebinop Oeq (Etempvar _t'1 tschar)
                       (Econst_int (Int.repr 0) tint) tint)
          (Sreturn (Some (Etempvar _i tuint)))
          Sskip)))
    (Sset _i
      (Ebinop Oadd (Etempvar _i tuint) (Econst_int (Int.repr 1) tint) tuint))))
|}.

Definition composites : list composite_definition :=
nil.

Definition global_definitions : list (ident * globdef fundef type) :=
((___builtin_ais_annot,
   Gfun(External (EF_builtin "__builtin_ais_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_bswap,
   Gfun(External (EF_builtin "__builtin_bswap"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap32,
   Gfun(External (EF_builtin "__builtin_bswap32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tuint cc_default)) ::
 (___builtin_bswap16,
   Gfun(External (EF_builtin "__builtin_bswap16"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tushort Tnil) tushort cc_default)) ::
 (___builtin_fabs,
   Gfun(External (EF_builtin "__builtin_fabs"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_fsqrt,
   Gfun(External (EF_builtin "__builtin_fsqrt"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tdouble Tnil) tdouble cc_default)) ::
 (___builtin_memcpy_aligned,
   Gfun(External (EF_builtin "__builtin_memcpy_aligned"
                   (mksignature
                     (AST.Tint :: AST.Tint :: AST.Tint :: AST.Tint :: nil)
                     None cc_default))
     (Tcons (tptr tvoid)
       (Tcons (tptr tvoid) (Tcons tuint (Tcons tuint Tnil)))) tvoid
     cc_default)) ::
 (___builtin_annot,
   Gfun(External (EF_builtin "__builtin_annot"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons (tptr tschar) Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (___builtin_annot_intval,
   Gfun(External (EF_builtin "__builtin_annot_intval"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tschar) (Tcons tint Tnil))
     tint cc_default)) ::
 (___builtin_membar,
   Gfun(External (EF_builtin "__builtin_membar"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_va_start,
   Gfun(External (EF_builtin "__builtin_va_start"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___builtin_va_arg,
   Gfun(External (EF_builtin "__builtin_va_arg"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_va_copy,
   Gfun(External (EF_builtin "__builtin_va_copy"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default))
     (Tcons (tptr tvoid) (Tcons (tptr tvoid) Tnil)) tvoid cc_default)) ::
 (___builtin_va_end,
   Gfun(External (EF_builtin "__builtin_va_end"
                   (mksignature (AST.Tint :: nil) None cc_default))
     (Tcons (tptr tvoid) Tnil) tvoid cc_default)) ::
 (___compcert_va_int32,
   Gfun(External (EF_external "__compcert_va_int32"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tvoid) Tnil) tuint cc_default)) ::
 (___compcert_va_int64,
   Gfun(External (EF_external "__compcert_va_int64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tulong
     cc_default)) ::
 (___compcert_va_float64,
   Gfun(External (EF_external "__compcert_va_float64"
                   (mksignature (AST.Tint :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons (tptr tvoid) Tnil) tdouble
     cc_default)) ::
 (___compcert_va_composite,
   Gfun(External (EF_external "__compcert_va_composite"
                   (mksignature (AST.Tint :: AST.Tint :: nil) (Some AST.Tint)
                     cc_default)) (Tcons (tptr tvoid) (Tcons tuint Tnil))
     (tptr tvoid) cc_default)) ::
 (___compcert_i64_dtos,
   Gfun(External (EF_runtime "__compcert_i64_dtos"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tlong cc_default)) ::
 (___compcert_i64_dtou,
   Gfun(External (EF_runtime "__compcert_i64_dtou"
                   (mksignature (AST.Tfloat :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tdouble Tnil) tulong cc_default)) ::
 (___compcert_i64_stod,
   Gfun(External (EF_runtime "__compcert_i64_stod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tlong Tnil) tdouble cc_default)) ::
 (___compcert_i64_utod,
   Gfun(External (EF_runtime "__compcert_i64_utod"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tfloat)
                     cc_default)) (Tcons tulong Tnil) tdouble cc_default)) ::
 (___compcert_i64_stof,
   Gfun(External (EF_runtime "__compcert_i64_stof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tlong Tnil) tfloat cc_default)) ::
 (___compcert_i64_utof,
   Gfun(External (EF_runtime "__compcert_i64_utof"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tsingle)
                     cc_default)) (Tcons tulong Tnil) tfloat cc_default)) ::
 (___compcert_i64_sdiv,
   Gfun(External (EF_runtime "__compcert_i64_sdiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_udiv,
   Gfun(External (EF_runtime "__compcert_i64_udiv"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_smod,
   Gfun(External (EF_runtime "__compcert_i64_smod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umod,
   Gfun(External (EF_runtime "__compcert_i64_umod"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___compcert_i64_shl,
   Gfun(External (EF_runtime "__compcert_i64_shl"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_shr,
   Gfun(External (EF_runtime "__compcert_i64_shr"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tint Tnil)) tulong cc_default)) ::
 (___compcert_i64_sar,
   Gfun(External (EF_runtime "__compcert_i64_sar"
                   (mksignature (AST.Tlong :: AST.Tint :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tint Tnil)) tlong cc_default)) ::
 (___compcert_i64_smulh,
   Gfun(External (EF_runtime "__compcert_i64_smulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tlong (Tcons tlong Tnil)) tlong cc_default)) ::
 (___compcert_i64_umulh,
   Gfun(External (EF_runtime "__compcert_i64_umulh"
                   (mksignature (AST.Tlong :: AST.Tlong :: nil)
                     (Some AST.Tlong) cc_default))
     (Tcons tulong (Tcons tulong Tnil)) tulong cc_default)) ::
 (___builtin_bswap64,
   Gfun(External (EF_builtin "__builtin_bswap64"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tlong)
                     cc_default)) (Tcons tulong Tnil) tulong cc_default)) ::
 (___builtin_clz,
   Gfun(External (EF_builtin "__builtin_clz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzl,
   Gfun(External (EF_builtin "__builtin_clzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_clzll,
   Gfun(External (EF_builtin "__builtin_clzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_ctz,
   Gfun(External (EF_builtin "__builtin_ctz"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzl,
   Gfun(External (EF_builtin "__builtin_ctzl"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons tuint Tnil) tint cc_default)) ::
 (___builtin_ctzll,
   Gfun(External (EF_builtin "__builtin_ctzll"
                   (mksignature (AST.Tlong :: nil) (Some AST.Tint)
                     cc_default)) (Tcons tulong Tnil) tint cc_default)) ::
 (___builtin_fmax,
   Gfun(External (EF_builtin "__builtin_fmax"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmin,
   Gfun(External (EF_builtin "__builtin_fmin"
                   (mksignature (AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble Tnil)) tdouble cc_default)) ::
 (___builtin_fmadd,
   Gfun(External (EF_builtin "__builtin_fmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fmsub,
   Gfun(External (EF_builtin "__builtin_fmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmadd,
   Gfun(External (EF_builtin "__builtin_fnmadd"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_fnmsub,
   Gfun(External (EF_builtin "__builtin_fnmsub"
                   (mksignature
                     (AST.Tfloat :: AST.Tfloat :: AST.Tfloat :: nil)
                     (Some AST.Tfloat) cc_default))
     (Tcons tdouble (Tcons tdouble (Tcons tdouble Tnil))) tdouble
     cc_default)) ::
 (___builtin_read16_reversed,
   Gfun(External (EF_builtin "__builtin_read16_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tushort) Tnil) tushort cc_default)) ::
 (___builtin_read32_reversed,
   Gfun(External (EF_builtin "__builtin_read32_reversed"
                   (mksignature (AST.Tint :: nil) (Some AST.Tint) cc_default))
     (Tcons (tptr tuint) Tnil) tuint cc_default)) ::
 (___builtin_write16_reversed,
   Gfun(External (EF_builtin "__builtin_write16_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tushort) (Tcons tushort Tnil))
     tvoid cc_default)) ::
 (___builtin_write32_reversed,
   Gfun(External (EF_builtin "__builtin_write32_reversed"
                   (mksignature (AST.Tint :: AST.Tint :: nil) None
                     cc_default)) (Tcons (tptr tuint) (Tcons tuint Tnil))
     tvoid cc_default)) ::
 (___builtin_nop,
   Gfun(External (EF_builtin "__builtin_nop"
                   (mksignature nil None cc_default)) Tnil tvoid cc_default)) ::
 (___builtin_debug,
   Gfun(External (EF_external "__builtin_debug"
                   (mksignature (AST.Tint :: nil) None
                     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|}))
     (Tcons tint Tnil) tvoid
     {|cc_vararg:=true; cc_unproto:=false; cc_structret:=false|})) ::
 (_strchr, Gfun(Internal f_strchr)) :: (_strcpy, Gfun(Internal f_strcpy)) ::
 (_strcat, Gfun(Internal f_strcat)) :: (_strcmp, Gfun(Internal f_strcmp)) ::
 (_strlen, Gfun(Internal f_strlen)) :: nil).

Definition public_idents : list ident :=
(_strlen :: _strcmp :: _strcat :: _strcpy :: _strchr :: ___builtin_debug ::
 ___builtin_nop :: ___builtin_write32_reversed ::
 ___builtin_write16_reversed :: ___builtin_read32_reversed ::
 ___builtin_read16_reversed :: ___builtin_fnmsub :: ___builtin_fnmadd ::
 ___builtin_fmsub :: ___builtin_fmadd :: ___builtin_fmin ::
 ___builtin_fmax :: ___builtin_ctzll :: ___builtin_ctzl :: ___builtin_ctz ::
 ___builtin_clzll :: ___builtin_clzl :: ___builtin_clz ::
 ___builtin_bswap64 :: ___compcert_i64_umulh :: ___compcert_i64_smulh ::
 ___compcert_i64_sar :: ___compcert_i64_shr :: ___compcert_i64_shl ::
 ___compcert_i64_umod :: ___compcert_i64_smod :: ___compcert_i64_udiv ::
 ___compcert_i64_sdiv :: ___compcert_i64_utof :: ___compcert_i64_stof ::
 ___compcert_i64_utod :: ___compcert_i64_stod :: ___compcert_i64_dtou ::
 ___compcert_i64_dtos :: ___compcert_va_composite ::
 ___compcert_va_float64 :: ___compcert_va_int64 :: ___compcert_va_int32 ::
 ___builtin_va_end :: ___builtin_va_copy :: ___builtin_va_arg ::
 ___builtin_va_start :: ___builtin_membar :: ___builtin_annot_intval ::
 ___builtin_annot :: ___builtin_memcpy_aligned :: ___builtin_fsqrt ::
 ___builtin_fabs :: ___builtin_bswap16 :: ___builtin_bswap32 ::
 ___builtin_bswap :: ___builtin_ais_annot :: nil).

Definition prog : Clight.program := 
  mkprogram composites global_definitions public_idents _main Logic.I. *)

Instance CompSpecs : compspecs. make_compspecs prog. Defined.

Definition Vprog : varspecs. mk_varspecs prog. Defined.



Definition strchr_spec :=

 DECLARE _strchr

  WITH sh: share, str : val, s : list byte, c : byte

  PRE  [ _str OF tptr tschar, _c OF tint ]

    PROP (readable_share sh; c <> Byte.zero)

    LOCAL (temp _str str; temp _c (Vbyte c))

    SEP (cstring sh s str)

  POST [ tptr tschar ]

   EX r : val,

    PROP ((exists i, Znth i s = c /\ Forall (fun d => d<>c) (sublist 0 i s)

                     /\ r = offset_val i str)

       \/ (Forall (fun d => d<>c) s /\ r = nullval))

    LOCAL (temp ret_temp r)

    SEP (cstring sh s str).



Definition strcat_spec :=

 DECLARE _strcat

  WITH sh: share, sh': share, dest : val, sd : list byte, n : Z, src : val, ss : list byte

  PRE  [ _dest OF tptr tschar, _src OF tptr tschar ]

    PROP (writable_share sh; readable_share sh'; Zlength sd + Zlength ss < n)

    LOCAL (temp _dest dest; temp _src src)

    SEP (cstringn sh sd n dest; cstring sh' ss src)

  POST [ tptr tschar ]

    PROP ()

    LOCAL (temp ret_temp dest)

    SEP (cstringn sh (sd ++ ss) n dest; cstring sh' ss src).



Definition strcmp_spec :=

 DECLARE _strcmp

  WITH sh1: share, sh2: share, str1 : val, s1 : list byte, str2 : val, s2 : list byte

  PRE [ _str1 OF tptr tschar, _str2 OF tptr tschar ]

    PROP (readable_share sh1; readable_share sh2)

    LOCAL (temp _str1 str1; temp _str2 str2)

    SEP (cstring sh1 s1 str1; cstring sh2 s2 str2)

  POST [ tint ]

   EX i : int,

    PROP (if Int.eq_dec i Int.zero then s1 = s2 else s1 <> s2)

    LOCAL (temp ret_temp (Vint i))

    SEP (cstring sh1 s1 str1; cstring sh2 s2 str2).



Definition strcpy_spec :=

 DECLARE _strcpy

  WITH sh: share, sh': share, dest : val, n : Z, src : val, s : list byte

  PRE [ _dest OF tptr tschar, _src OF tptr tschar ]

    PROP (writable_share sh; readable_share sh'; Zlength s < n)

    LOCAL (temp _dest dest; temp _src src)

    SEP (data_at_ sh (tarray tschar n) dest; cstring sh' s src)

  POST [ tptr tschar ]

    PROP ()

    LOCAL (temp ret_temp dest)

    SEP (cstringn sh s n dest; cstring sh' s src).



Definition strlen_spec :=

 DECLARE _strlen

  WITH sh: share, s : list byte, str: val

  PRE [ _str OF tptr tschar ]

    PROP (readable_share sh)

    LOCAL (temp _str str)

    SEP (cstring sh s str)

  POST [ tptr tschar ]

    PROP ()

    LOCAL (temp ret_temp (Vptrofs (Ptrofs.repr (Zlength s))))

    SEP (cstring sh s str).



Definition Gprog : funspecs :=

         ltac:(with_library prog [ strchr_spec; strcat_spec; strcmp_spec ]).



Hint Rewrite Z.add_simpl_r Z.sub_simpl_r : norm entailer_rewrite.



Lemma body_strlen: semax_body Vprog Gprog f_strlen strlen_spec.

Proof.

start_function.

unfold cstring in *.

rename s into ls.

Intros.

forward.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls + 1)

  LOCAL (temp _str str; temp _i (Vptrofs (Ptrofs.repr i)))

  SEP (data_at sh (tarray tschar (Zlength ls + 1))

          (map Vbyte (ls ++ [Byte.zero])) str))

 continue: (EX i : Z,

  PROP (0 <= i < Zlength ls + 1)

  LOCAL (temp _str str; temp _i (Vptrofs (Ptrofs.repr (i-1))))

  SEP (data_at sh (tarray tschar (Zlength ls + 1))

          (map Vbyte (ls ++ [Byte.zero])) str)).

*

Exists 0. entailer!.

*

Intros i.

assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

forward.

forward_if.

forward.

entailer!. f_equal. f_equal. cstring.

forward. 

Exists (i+1).

entailer!. cstring.

*

Intros i.

forward.

Exists i.

entailer!.

Qed.



Lemma body_strchr: semax_body Vprog Gprog f_strchr strchr_spec.

Proof.

start_function.

forward.

unfold cstring in *.

rename s into ls.

Intros.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls + 1; Forall (fun d => d <> c) (sublist 0 i ls))

  LOCAL (temp _str str; temp _c (Vbyte c); temp _i (Vint (Int.repr i)))

  SEP (data_at sh (tarray tschar (Zlength ls + 1))

          (map Vbyte (ls ++ [Byte.zero])) str))

 continue: (EX i : Z,

  PROP (0 <= i < Zlength ls + 1; Forall (fun d => d <> c) (sublist 0 i ls))

  LOCAL (temp _str str; temp _c (Vbyte c); temp _i (Vint (Int.repr (i-1))))

  SEP (data_at sh (tarray tschar (Zlength ls + 1))

          (map Vbyte (ls ++ [Byte.zero])) str)).

  Exists 0; rewrite sublist_nil; entailer!.

- Intros i. 

  assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

  forward. normalize.

  forward. fold_Vbyte.

 forward_if.

  { forward. simpl. 

    Exists (offset_val i str).

    entailer!.

    left. exists i. split3; auto. rewrite app_Znth1; auto. cstring. }

  { forward_if.

    { forward.

      Exists nullval; rewrite !map_app; entailer!.

      right. split; auto.

      assert (i = Zlength ls) by cstring.

      subst i.

     autorewrite with sublist in H2; auto. }

  forward.

  Exists (i+1); entailer!.

  assert (i <> Zlength ls) by cstring.

  split. omega.

  rewrite (sublist_split 0 i) by rep_omega. rewrite Forall_app. split; auto.

  rewrite sublist_len_1 by rep_omega. repeat constructor.

  rewrite app_Znth1 in H4 by rep_omega. auto.

  }

-

  Intros i.

  forward.

  Exists i.

 entailer!.

Qed.



Lemma split_data_at_app_tschar:

 forall sh n (al bl: list val) p ,

   n = Zlength (al++bl) ->

   data_at sh (tarray tschar n) (al++bl) p = 

         data_at sh (tarray tschar (Zlength al)) al p

        * data_at sh (tarray tschar (n - Zlength al)) bl

                 (field_address0 (tarray tschar n) [ArraySubsc (Zlength al)] p).

Proof.

intros.

apply (split2_data_at_Tarray_app _ n  sh tschar al bl ); auto.

rewrite Zlength_app in H.

change ( Zlength bl = n - Zlength al); omega.

Qed.



Lemma body_strcat: semax_body Vprog Gprog f_strcat strcat_spec.

Proof.

start_function.

unfold cstringn, cstring in *.

rename sd into ld. rename ss into ls.

Intros.

forward.

forward_loop (EX i : Z,

    PROP (0 <= i < Zlength ld + 1)

    LOCAL (temp _i (Vint (Int.repr i)); temp _dest dest; temp _src src)

    SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ [Byte.zero]) ++

           list_repeat (Z.to_nat (n - (Zlength ld + 1))) Vundef) dest;

   data_at sh' (tarray tschar (Zlength ls + 1))

     (map Vbyte (ls ++ [Byte.zero])) src))

 continue: (EX i : Z,

    PROP (0 <= i < Zlength ld + 1)

    LOCAL (temp _i (Vint (Int.repr (i-1))); temp _dest dest; temp _src src)

    SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ [Byte.zero]) ++

           list_repeat (Z.to_nat (n - (Zlength ld + 1))) Vundef) dest;

   data_at sh' (tarray tschar (Zlength ls + 1))

     (map Vbyte (ls ++ [Byte.zero])) src))

  break: (PROP ( )

   LOCAL (temp _i (Vint (Int.repr (Zlength ld))); temp _dest dest; 

   temp _src src)

   SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ [Byte.zero]) ++

           list_repeat (Z.to_nat (n - (Zlength ld + 1))) Vundef) dest;

   data_at sh' (tarray tschar (Zlength ls + 1))

     (map Vbyte (ls ++ [Byte.zero])) src)).

-

  Exists 0; entailer!.

-

  Intros i.

  forward.

  { entailer!. }

  { entailer!. autorewrite with sublist. normalize.  }

  autorewrite with sublist; normalize.

  forward.

  forward_if.

  + forward.

    entailer!. f_equal. f_equal. cstring.

  +

    forward.

    Exists (i+1); entailer!. cstring.

- Intros i.

   forward.

   Exists i. entailer!. 

-

  abbreviate_semax.

  forward.

  forward_loop (EX j : Z,

    PROP (0 <= j < Zlength ls + 1)

    LOCAL (temp _j (Vint (Int.repr j)); temp _i (Vint (Int.repr (Zlength ld)));

           temp _dest dest; temp _src src)

    SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ sublist 0 j ls) ++

           list_repeat (Z.to_nat (n - (Zlength ld + j))) Vundef) dest;

         data_at sh' (tarray tschar (Zlength ls + 1))

           (map Vbyte (ls ++ [Byte.zero])) src))

   continue: (EX j : Z,

    PROP (0 <= j < Zlength ls + 1)

    LOCAL (temp _j (Vint (Int.repr (j-1))); temp _i (Vint (Int.repr (Zlength ld)));

           temp _dest dest; temp _src src)

    SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ sublist 0 j ls) ++

           list_repeat (Z.to_nat (n - (Zlength ld + j))) Vundef) dest;

         data_at sh' (tarray tschar (Zlength ls + 1))

           (map Vbyte (ls ++ [Byte.zero])) src)).

  { Exists 0; entailer!.  autorewrite with sublist.

    rewrite !map_app. rewrite <- app_assoc.

    rewrite split_data_at_app_tschar by list_solve.

    rewrite (split_data_at_app_tschar _ n) by list_solve.

    autorewrite with sublist.

    cancel.    

   }

  { Intros j.

  assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

  forward. normalize.

  forward. fold_Vbyte.

  forward.

  entailer!.

  clear H3.

  rewrite upd_Znth_app2 by list_solve.

  autorewrite with sublist.

  forward_if.

  + forward.

      autorewrite with sublist.

      rewrite prop_true_andp 

        by (intro Hx; apply in_app in Hx; destruct Hx; contradiction).

      cancel.

    assert (j = Zlength ls) by cstring; subst.

    autorewrite with sublist.

    apply derives_refl'.

    unfold data_at; f_equal. 

    replace (n - (Zlength ld + Zlength ls))

     with (1 + (n - (Zlength ld + Zlength ls+1))) by rep_omega.

    rewrite <- list_repeat_app' by rep_omega.

    rewrite upd_Znth_app1 by list_solve.

    rewrite app_assoc.

    simpl.

    rewrite !map_app.

    reflexivity.

 +

  forward.

  Exists (j+1).

  destruct (zlt j (Zlength ls)); [ | cstring].

  entailer!.

  change (field_at Tsh (tarray tschar n) []) with (data_at Tsh (tarray tschar n)).

  rewrite (sublist_split 0 j (j+1)) by rep_omega.

  rewrite (app_assoc ld). rewrite !map_app.

  rewrite <- (app_assoc (_ ++ _)).

  rewrite (split_data_at_app_tschar _ n) by list_solve.

  rewrite (split_data_at_app_tschar _ n) by list_solve.

  replace (n - (Zlength ld + j))

    with (1 + (n - (Zlength ld + (j + 1)))) by rep_omega.

  rewrite <- list_repeat_app' by rep_omega.

  cancel.

  rewrite upd_Znth_app1 by (autorewrite with sublist; rep_omega).

  rewrite app_Znth1 by list_solve.

  rewrite sublist_len_1 by rep_omega.

  cancel.

  }

 + Intros j. forward. Exists j. entailer!.

Qed.



Lemma body_strcmp: semax_body Vprog Gprog f_strcmp strcmp_spec.

Proof.

start_function.

unfold cstring in *.

rename s1 into ls1. rename s2 into ls2.

forward.

Intros.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls1 + 1; 0 <= i < Zlength ls2 + 1;

        sublist 0 i ls1 = sublist 0 i ls2)

  LOCAL (temp _str1 str1; temp _str2 str2; temp _i (Vint (Int.repr i)))

  SEP (data_at sh1 (tarray tschar (Zlength ls1 + 1))

          (map Vbyte (ls1 ++ [Byte.zero])) str1;

       data_at sh2 (tarray tschar (Zlength ls2 + 1))

          (map Vbyte (ls2 ++ [Byte.zero])) str2))

  continue: (EX i : Z,

  PROP (0 <= i < Zlength ls1 + 1; 0 <= i < Zlength ls2 + 1;

        sublist 0 i ls1 = sublist 0 i ls2)

  LOCAL (temp _str1 str1; temp _str2 str2; temp _i (Vint (Int.repr (i-1))))

  SEP (data_at sh1 (tarray tschar (Zlength ls1 + 1))

          (map Vbyte (ls1 ++ [Byte.zero])) str1;

       data_at sh2 (tarray tschar (Zlength ls2 + 1))

          (map Vbyte (ls2 ++ [Byte.zero])) str2)).

- Exists 0; entailer!.

- Intros i.

  assert (Zlength (ls1 ++ [Byte.zero]) = Zlength ls1 + 1) by (autorewrite with sublist; auto).

  forward. normalize.

  assert (Zlength (ls2 ++ [Byte.zero]) = Zlength ls2 + 1) by (autorewrite with sublist; auto).

  forward. fold_Vbyte.

  assert (Znth i (ls1 ++ [Byte.zero]) = Byte.zero <-> i = Zlength ls1) as Hs1.

  { split; [|intro; subst; rewrite app_Znth2, Zminus_diag by omega; auto].

    destruct (zlt i (Zlength ls1)); [|omega].

    intro X; lapply (Znth_In i ls1); [|omega]. cstring. }

  assert (Znth i (ls2 ++ [Byte.zero]) = Byte.zero <-> i = Zlength ls2) as Hs2.

  { split; [|intro; subst; rewrite app_Znth2, Zminus_diag by omega; auto].

    destruct (zlt i (Zlength ls2)); [|omega].

    intro X; lapply (Znth_In i ls2); [|omega]. cstring. }

  forward. normalize.

  forward. fold_Vbyte.

  forward_if (temp _t'1 (Val.of_bool (Z.eqb i (Zlength ls1) && Z.eqb i (Zlength ls2)))).

  { forward.

    simpl force_val.

    rewrite Hs1 in *.

    destruct (Byte.eq_dec (Znth i (ls2 ++ [Byte.zero])) Byte.zero).

    + rewrite e; simpl force_val.

         assert (i = Zlength ls2) by cstring.

        rewrite  (proj2 Hs1 H6).

     rewrite (proj2 (Z.eqb_eq i (Zlength ls1)) H6).

     rewrite (proj2 (Z.eqb_eq i (Zlength ls2)) H7).

     entailer!.

  +

    rewrite Int.eq_false.

     rewrite (proj2 (Z.eqb_eq i (Zlength ls1)) H6).

     rewrite Hs2 in n.

     rewrite (proj2 (Z.eqb_neq i (Zlength ls2))) by auto.

    entailer!.

     contradict n.

     apply repr_inj_signed in n; try rep_omega. normalize in n.

 }

  { forward.

    entailer!.

    destruct (i =? Zlength ls1) eqn: Heq; auto.

    rewrite Z.eqb_eq in Heq; tauto. }

  forward_if.

 +

  rewrite andb_true_iff in H6; destruct H6.

  rewrite Z.eqb_eq in H6,H7.

  forward.

  Exists (Int.repr 0).

  entailer!. simpl.

  autorewrite with sublist in H3.

  auto.

 +

  deadvars!.

  rewrite andb_false_iff in H6. rewrite !Z.eqb_neq in H6.

  forward_if.

  *

    forward. Exists (Int.repr (-1)). entailer!.

    simpl. intro; subst. omega.

 *

   forward_if.

   forward.

   Exists (Int.repr 1). entailer!. simpl. intro. subst. omega.



   assert (H17: Byte.signed (Znth i (ls1 ++ [Byte.zero])) =

     Byte.signed (Znth i (ls2 ++ [Byte.zero]))) by omega.

   normalize in H17. clear H7 H8.

   forward.

   Exists (i+1).

   entailer!.

   clear H7 H8.

   clear H13 H14 H12 PNstr1 PNstr2.

   clear H10 H11 H9.

   destruct (zlt i (Zlength ls1)).

  2:{

         rewrite app_Znth2 in Hs1 by rep_omega.

         destruct (zeq i (Zlength ls1)); [ | omega].

         subst.

         destruct H6; [congruence | ].

         assert (Zlength ls1 < Zlength ls2) by omega.

         rewrite app_Znth2 in H17 by rep_omega.

         rewrite app_Znth1 in H17 by rep_omega.

         rewrite Z.sub_diag in H17. contradiction H0.

         change (Znth 0 [Byte.zero]) with Byte.zero in H17. rewrite H17.

         apply Znth_In. omega.

   }

  destruct (zlt i (Zlength ls2)).

  2:{

         rewrite app_Znth2 in Hs2 by rep_omega.

         destruct (zeq i (Zlength ls2)); [ | omega].

         subst.

         destruct H6; [ | congruence].

         assert (Zlength ls1 > Zlength ls2) by omega.

         rewrite app_Znth1 in H17 by rep_omega.

         rewrite app_Znth2 in H17 by rep_omega.

         rewrite Z.sub_diag in H17. contradiction H.

         change (Znth 0 [Byte.zero]) with Byte.zero in H17. rewrite <- H17.

         apply Znth_In. omega.

   }

  rewrite (sublist_split 0 i (i+1)) by omega.

  rewrite (sublist_split 0 i (i+1)) by omega.

  f_equal; auto.

  rewrite !sublist_len_1 by omega.

  rewrite !app_Znth1 in H17 by list_solve.

  split. rep_omega. split. rep_omega.

  f_equal; auto. f_equal. auto.

 -

  Intros i.

  forward.

  Exists i.

  entailer!.

Qed.



Lemma body_strcpy: semax_body Vprog Gprog f_strcpy strcpy_spec.

Proof.

start_function.

unfold cstring,cstringn in *.

rename s into ls.

forward.

Intros.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls + 1)

  LOCAL (temp _i (Vint (Int.repr i)); temp _dest dest; temp _src src)

  SEP (data_at sh (tarray tschar n)

        (map Vbyte (sublist 0 i ls) ++ list_repeat (Z.to_nat (n - i)) Vundef) dest;

       data_at sh' (tarray tschar (Zlength ls + 1)) (map Vbyte (ls ++ [Byte.zero])) src))

 continue: (EX i : Z,

  PROP (0 <= i < Zlength ls + 1)

  LOCAL (temp _i (Vint (Int.repr (i-1))); temp _dest dest; temp _src src)

  SEP (data_at sh (tarray tschar n)

        (map Vbyte (sublist 0 i ls) ++ list_repeat (Z.to_nat (n - i)) Vundef) dest;

       data_at sh' (tarray tschar (Zlength ls + 1)) (map Vbyte (ls ++ [Byte.zero])) src)).

*

 Exists 0. rewrite Z.sub_0_r; entailer!. simpl. entailer!.

*

 Intros i.

 assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

 forward. normalize.

 forward. fold_Vbyte.

 forward.

 forward_if.

+ forward.

   entailer!.

  assert (i = Zlength ls) by cstring. subst i.

  change (field_at Tsh (tarray tschar n) []) with (data_at Tsh (tarray tschar n)).

  rewrite upd_Znth_app2 by list_solve.

  autorewrite with sublist.

  rewrite !map_app.

  rewrite <- app_assoc.

   rewrite (split_data_at_app_tschar _ n) by list_solve.

   rewrite (split_data_at_app_tschar _ n) by list_solve.

   autorewrite with sublist.

   replace (n - Zlength ls) with (1 + (n - (Zlength ls + 1))) at 2 by list_solve.

  rewrite <- list_repeat_app' by omega.

  rewrite upd_Znth_app1 by list_solve.

  rewrite !split_data_at_app_tschar by list_solve.

  cancel.

+

   assert (i < Zlength ls) by cstring.

  forward.

  Exists (i+1). entailer!. 

  autorewrite with sublist.

  rewrite (sublist_split 0 i (i+1)) by list_solve.

  rewrite !map_app. rewrite <- app_assoc.

  autorewrite with sublist.

  change (field_at Tsh (tarray tschar n) []) with (data_at Tsh (tarray tschar n)).

  rewrite !(split_data_at_app_tschar _ n) by list_solve.

  autorewrite with sublist.

   replace (n - i) with (1 + (n-(i+ 1))) at 2 by list_solve.

  rewrite <- list_repeat_app' by omega.

  autorewrite with sublist.

  cancel.

  rewrite !split_data_at_app_tschar by list_solve.

  autorewrite with sublist.

  rewrite sublist_len_1 by omega.

  simpl. cancel.

*

  Intros i.

  forward.

  Exists i.

  entailer!.

Qed.



Module Alternate.



Lemma body_strlen: semax_body Vprog Gprog f_strlen strlen_spec.

Proof.

start_function.

unfold cstring in *.

rename s into ls.

Intros.

forward.

forward_loop  (EX i : Z,

  PROP (0 <= i < Zlength ls + 1)

  LOCAL (temp _str str; temp _i (Vptrofs (Ptrofs.repr i)))

  SEP (data_at sh (tarray tschar (Zlength ls + 1))

          (map Vbyte (ls ++ [Byte.zero])) str)).

*

Exists 0. entailer!.

*

Intros i.

assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

forward.

normalize.

forward_if.

forward.

entailer!. f_equal. f_equal. cstring.

forward. 

Exists (i+1).

entailer!. cstring.

Qed.



Lemma body_strchr: semax_body Vprog Gprog f_strchr strchr_spec.

Proof.

start_function.

forward.

unfold cstring in *.

rename s into ls.

Intros.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls + 1; Forall (fun d => d <> c) (sublist 0 i ls))

  LOCAL (temp _str str; temp _c (Vbyte c); temp _i (Vint (Int.repr i)))

  SEP (data_at sh (tarray tschar (Zlength ls + 1))

          (map Vbyte (ls ++ [Byte.zero])) str)).

  Exists 0; rewrite sublist_nil; entailer!.

- Intros i. 

  assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

  forward. normalize.

  forward. fold_Vbyte.

  forward_if (Znth i (ls ++ [Byte.zero]) <> c).



  { forward. simpl.

    Exists (offset_val i str).

    entailer!.

    left. exists i. split3; auto. rewrite app_Znth1; auto. cstring. }

  { forward.

    entailer!. }

  Intros.

  forward_if. 

  { forward.

    Exists nullval; rewrite !map_app; entailer!.

    right. split; auto.

    assert (i = Zlength ls) by cstring.

    subst i.

    autorewrite with sublist in H2; auto. }

  forward. 

  Exists (i+1); entailer!.

  assert (i <> Zlength ls) by cstring.

  split. omega.

  rewrite (sublist_split 0 i) by rep_omega. rewrite Forall_app. split; auto.

  rewrite sublist_len_1 by rep_omega. repeat constructor.

  rewrite app_Znth1 in H4 by rep_omega. auto.

Qed.



Lemma body_strcat: semax_body Vprog Gprog f_strcat strcat_spec.

Proof.

start_function.

unfold cstringn, cstring in *.

rename sd into ld. rename ss into ls.

Intros.

forward.

forward_loop (EX i : Z,

    PROP (0 <= i < Zlength ld + 1)

    LOCAL (temp _i (Vint (Int.repr i)); temp _dest dest; temp _src src)

    SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ [Byte.zero]) ++

           list_repeat (Z.to_nat (n - (Zlength ld + 1))) Vundef) dest;

   data_at sh' (tarray tschar (Zlength ls + 1))

     (map Vbyte (ls ++ [Byte.zero])) src))

  break: (PROP ( )

   LOCAL (temp _i (Vint (Int.repr (Zlength ld))); temp _dest dest; 

   temp _src src)

   SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ [Byte.zero]) ++

           list_repeat (Z.to_nat (n - (Zlength ld + 1))) Vundef) dest;

   data_at sh' (tarray tschar (Zlength ls + 1))

     (map Vbyte (ls ++ [Byte.zero])) src)).

-

  Exists 0; entailer!.

-

  Intros i.

  forward.

  { entailer!. }

  { entailer!. autorewrite with sublist. normalize.  }

  autorewrite with sublist; normalize.

  forward.

  forward_if 

  + forward.

   

  +

    forward. entailer!. f_equal. f_equal. cstring. 

  +

    forward.

    Exists (i+1); entailer!. cstring.

-

  abbreviate_semax.

  forward.

  forward_loop (EX j : Z,

    PROP (0 <= j < Zlength ls + 1)

    LOCAL (temp _j (Vint (Int.repr j)); temp _i (Vint (Int.repr (Zlength ld)));

           temp _dest dest; temp _src src)

    SEP (data_at sh (tarray tschar n)

          (map Vbyte (ld ++ sublist 0 j ls) ++

           list_repeat (Z.to_nat (n - (Zlength ld + j))) Vundef) dest;

         data_at sh' (tarray tschar (Zlength ls + 1))

           (map Vbyte (ls ++ [Byte.zero])) src)).

  { Exists 0; entailer!.  autorewrite with sublist.

    rewrite !map_app. rewrite <- app_assoc.

    rewrite split_data_at_app_tschar by list_solve.

    rewrite (split_data_at_app_tschar _ n) by list_solve.

    autorewrite with sublist.

    cancel.    

   }

  { Intros j.

  assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

  forward. normalize.

  forward. fold_Vbyte.

  forward.

  entailer!.

  clear H3.

  rewrite upd_Znth_app2 by list_solve.

  autorewrite with sublist.

  forward_if.

  + forward.

      autorewrite with sublist.

      rewrite prop_true_andp 

        by (intro Hx; apply in_app in Hx; destruct Hx; contradiction).

      cancel.

    assert (j = Zlength ls) by cstring; subst.

    autorewrite with sublist.

    apply derives_refl'.

    unfold data_at; f_equal. 

    replace (n - (Zlength ld + Zlength ls))

     with (1 + (n - (Zlength ld + Zlength ls+1))) by rep_omega.

    rewrite <- list_repeat_app' by rep_omega.

    rewrite upd_Znth_app1 by list_solve.

    rewrite app_assoc.

    simpl.

    rewrite !map_app.

    reflexivity.

 +

  forward. 

  Exists (j+1).

  destruct (zlt j (Zlength ls)); [ | cstring].

  entailer!.

  rewrite (sublist_split 0 j (j+1)) by rep_omega.

  rewrite (app_assoc ld). rewrite !map_app.

  rewrite <- (app_assoc (_ ++ _)).

  rewrite (split_data_at_app_tschar _ n) by list_solve.

  rewrite (split_data_at_app_tschar _ n) by list_solve.

  replace (n - (Zlength ld + j))

    with (1 + (n - (Zlength ld + (j + 1)))) by rep_omega.

  rewrite <- list_repeat_app' by rep_omega.

  cancel.

  rewrite upd_Znth_app1 by (autorewrite with sublist; rep_omega).

  rewrite app_Znth1 by list_solve.

  rewrite sublist_len_1 by rep_omega.

  cancel.

 }

Qed.



Lemma body_strcmp: semax_body Vprog Gprog f_strcmp strcmp_spec.

Proof.

start_function.

unfold cstring in *.

rename s1 into ls1. rename s2 into ls2.

forward.

Intros.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls1 + 1; 0 <= i < Zlength ls2 + 1;

        sublist 0 i ls1 = sublist 0 i ls2)

  LOCAL (temp _str1 str1; temp _str2 str2; temp _i (Vint (Int.repr i)))

  SEP (data_at sh1 (tarray tschar (Zlength ls1 + 1))

          (map Vbyte (ls1 ++ [Byte.zero])) str1;

       data_at sh2 (tarray tschar (Zlength ls2 + 1))

          (map Vbyte (ls2 ++ [Byte.zero])) str2)).

- Exists 0; entailer!.

- Intros i.

  assert (Zlength (ls1 ++ [Byte.zero]) = Zlength ls1 + 1) by (autorewrite with sublist; auto).

  forward. normalize.

  assert (Zlength (ls2 ++ [Byte.zero]) = Zlength ls2 + 1) by (autorewrite with sublist; auto).

  forward. fold_Vbyte.

  assert (Znth i (ls1 ++ [Byte.zero]) = Byte.zero <-> i = Zlength ls1) as Hs1.

  { split; [|intro; subst; rewrite app_Znth2, Zminus_diag by omega; auto].

    destruct (zlt i (Zlength ls1)); [|omega].

    intro X; lapply (Znth_In i ls1); [|omega]. cstring. }

  assert (Znth i (ls2 ++ [Byte.zero]) = Byte.zero <-> i = Zlength ls2) as Hs2.

  { split; [|intro; subst; rewrite app_Znth2, Zminus_diag by omega; auto].

    destruct (zlt i (Zlength ls2)); [|omega].

    intro X; lapply (Znth_In i ls2); [|omega]. cstring. }

  forward. normalize.

  forward. fold_Vbyte.

  forward_if (temp _t'1 (Val.of_bool (Z.eqb i (Zlength ls1) && Z.eqb i (Zlength ls2)))).

  { forward.

    simpl force_val. normalize.

    rewrite Hs1 in *.

    destruct (Byte.eq_dec (Znth i (ls2 ++ [Byte.zero])) Byte.zero).

    + rewrite e; simpl force_val.

         assert (i = Zlength ls2) by cstring.

        rewrite  (proj2 Hs1 H6).

     rewrite (proj2 (Z.eqb_eq i (Zlength ls1)) H6).

     rewrite (proj2 (Z.eqb_eq i (Zlength ls2)) H7).

     entailer!.

  +

    rewrite Int.eq_false.

     rewrite (proj2 (Z.eqb_eq i (Zlength ls1)) H6).

     rewrite Hs2 in n.

     rewrite (proj2 (Z.eqb_neq i (Zlength ls2))) by auto.

    entailer!.

     contradict n.

     apply repr_inj_signed in n; try rep_omega. normalize in n.

 }

  { forward.

    entailer!.

    destruct (i =? Zlength ls1) eqn: Heq; auto.

    rewrite Z.eqb_eq in Heq; tauto. }

  forward_if. 

 +

  rewrite andb_true_iff in H6; destruct H6.

  rewrite Z.eqb_eq in H6,H7.

  forward.

  Exists (Int.repr 0).

  entailer!. simpl.

  autorewrite with sublist in H3.

  auto.

 +

  rewrite andb_false_iff in H6. rewrite !Z.eqb_neq in H6.

  forward_if.

  *

    forward. Exists (Int.repr (-1)). entailer!.

    simpl. intro; subst. omega.

 *

   forward_if.

   forward.

   Exists (Int.repr 1). entailer!. simpl. intro. subst. omega.



   assert (H17: Byte.signed (Znth i (ls1 ++ [Byte.zero])) =

     Byte.signed (Znth i (ls2 ++ [Byte.zero]))) by omega.

   normalize in H17. clear H7 H8.

   forward.

   Exists (i+1).

   entailer!.

   clear - H17 H6 Hs1 Hs2 H3 H1 H2 H H0.

   destruct (zlt i (Zlength ls1)).

  2:{

         assert (i = Zlength ls1) by omega. subst.

         destruct H6; [congruence | ].

         assert (Zlength ls1 < Zlength ls2) by omega.

         rewrite app_Znth2 in H17 by rep_omega.

         rewrite app_Znth1 in H17 by rep_omega.

         rewrite Z.sub_diag in H17. contradiction H0.

         change (Znth 0 [Byte.zero]) with Byte.zero in H17.

         rewrite H17. apply Znth_In. omega.

   }

  destruct (zlt i (Zlength ls2)).

  2:{

         assert (i = Zlength ls2) by omega. subst.

         destruct H6; [ | congruence].

         assert (Zlength ls1 > Zlength ls2) by omega.

         rewrite app_Znth1 in H17 by rep_omega.

         rewrite app_Znth2 in H17 by rep_omega.

         rewrite Z.sub_diag in H17. contradiction H.

         change (Znth 0 [Byte.zero]) with Byte.zero in H17.

         rewrite <- H17.  apply Znth_In. omega.

   }

  rewrite (sublist_split 0 i (i+1)) by omega.

  rewrite (sublist_split 0 i (i+1)) by omega.

  f_equal; auto.

  rewrite !sublist_len_1 by omega.

  autorewrite with sublist in H17.

  split. rep_omega. split. rep_omega.

  f_equal; auto. f_equal. auto.

Qed.



Lemma body_strcpy: semax_body Vprog Gprog f_strcpy strcpy_spec.

Proof.

start_function.

unfold cstring,cstringn in *.

rename s into ls.

forward.

Intros.

forward_loop (EX i : Z,

  PROP (0 <= i < Zlength ls + 1)

  LOCAL (temp _i (Vint (Int.repr i)); temp _dest dest; temp _src src)

  SEP (data_at sh (tarray tschar n)

        (map Vbyte (sublist 0 i ls) ++ list_repeat (Z.to_nat (n - i)) Vundef) dest;

       data_at sh' (tarray tschar (Zlength ls + 1)) (map Vbyte (ls ++ [Byte.zero])) src)).

*

 Exists 0. rewrite Z.sub_0_r; entailer!. simpl; entailer!.

*

 Intros i.

 assert (Zlength (ls ++ [Byte.zero]) = Zlength ls + 1) by (autorewrite with sublist; auto).

 forward. normalize.

 forward. fold_Vbyte.

 forward.

 forward_if.

+ forward.

   entailer!.

  assert (i = Zlength ls) by cstring. subst i.

  autorewrite with sublist.

  rewrite !map_app.

  rewrite <- app_assoc.

   rewrite (split_data_at_app_tschar _ n) by list_solve.

   rewrite (split_data_at_app_tschar _ n) by list_solve.

   autorewrite with sublist.

   replace (n - Zlength ls) with (1 + (n - (Zlength ls + 1))) at 2 by list_solve.

  rewrite <- list_repeat_app' by omega.

  autorewrite with sublist.

  rewrite !split_data_at_app_tschar by list_solve.

  cancel.

+

   assert (i < Zlength ls) by cstring.

  forward.

  Exists (i+1). entailer!.

  rewrite upd_Znth_app2 by list_solve.

  assert (i < Zlength ls) by cstring.

  rewrite (sublist_split 0 i (i+1)) by list_solve.

  rewrite !map_app. rewrite <- app_assoc.

  autorewrite with sublist.

  rewrite !(split_data_at_app_tschar _ n) by list_solve.

  autorewrite with sublist.

   replace (n - i) with (1 + (n-(i+ 1))) at 2 by list_solve.

  rewrite <- list_repeat_app' by omega.

  autorewrite with sublist.

  cancel.

  rewrite !split_data_at_app_tschar by list_solve.

  autorewrite with sublist.

  rewrite sublist_len_1 by omega.

  simpl. cancel.

Qed.



End Alternate.



