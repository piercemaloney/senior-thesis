From Categories Require Import Essentials.Notations.
(* Categories.Essentials.Notations:
Notation "∀ x .. y , P" := (forall x, .. (forall y, P) ..)
                             (at level 200, x binder, y binder, right associativity) : type_scope.

Notation "∃ x .. y , P" := (exists x, .. (exists y, P) ..)
  (at level 200, x binder, y binder, right associativity) : type_scope.

Notation "x ∨ y" := (x \/ y) (at level 85, right associativity) : type_scope.

Notation "x ∧ y" := (x /\ y) (at level 80, right associativity) : type_scope.

Notation "x → y" := (x -> y)
  (at level 90, y at level 200, right associativity): type_scope.

Notation "x ↔ y" := (x <-> y) (at level 95, no associativity): type_scope.

Notation "¬ x" := (~x) (at level 75, right associativity) : type_scope.

Notation "x ≠ y" := (x <> y) (at level 70) : type_scope.

Notation "x ≤ y" := (le x y) (at level 70, no associativity).

Notation "x ≥ y" := (ge x y) (at level 70, no associativity).

Reserved Notation "C '^op'" (at level 50, no associativity).

Reserved Notation "a –≻ b" (at level 90, b at level 200, right associativity).

Reserved Notation "f '⁻¹'" (at level 50, no associativity).

Reserved Notation "a ≃ b" (at level 70, no associativity).

Reserved Notation "a ≃≃ b ::> C" (at level 70, no associativity).

Reserved Notation "f ∘ g" (at level 51, right associativity).

Reserved Notation "f '∘_h' g" (at level 51, right associativity).

Reserved Notation "a ≫–> b" (at level 100, no associativity).

Reserved Notation "a –≫ b" (at level 100, no associativity).

Reserved Notation "F '_o'" (at level 50, no associativity).

Reserved Notation "F '_a'" (at level 50, no associativity).

Reserved Notation "F '@_a'" (at level 50, no associativity).

Reserved Notation "F ⊣ G" (at level 100, no associativity).

Reserved Notation "F ⊣_hom G" (at level 100, no associativity).

Reserved Notation "F ⊣_ucu G" (at level 100, no associativity).

Reserved Notation "a × b" (at level 80, no associativity).

Reserved Notation "a ⇑ b" (at level 79, no associativity).

Reserved Notation "'Π' m" (at level 50, no associativity).

Reserved Notation "'Σ' m" (at level 50, no associativity).

Reserved Notation "'Π_' C ↓ m" (at level 50, no associativity).

Reserved Notation "'Σ_' C ↓ m" (at level 50, no associativity).

Delimit Scope category_scope with category.

Delimit Scope morphism_scope with morphism.

Delimit Scope object_scope with object.

Delimit Scope functor_scope with functor.

Delimit Scope nattrans_scope with nattrans.

Delimit Scope nattrans_scope with nattrans.

Delimit Scope natiso_scope with natiso.

Delimit Scope isomorphism_scope with isomorphism.

Delimit Scope preorder_scope with preorder. *)

From Categories Require Import Essentials.Types.
(* Categories.Essentials.Types:
Global Set Primitive Projections.

Global Set Universe Polymorphism.

Global Unset Universe Minimization ToSet.

Inductive Empty : Type :=.

Hint Extern 1 =>
let tac := (repeat intros ?); match goal with [H : Empty |- _] => contradict H end in
match goal with
  | [|- context[Empty]] => tac
  | [H : context[Empty] |- _] => tac
end
.

Record prod (A B : Type) := {fst : A; snd : B}.

Arguments fst {_ _ } _.
Arguments snd {_ _ } _.
Arguments Build_prod {_ _ } _ _.

Notation "( X , Y )" := (Build_prod X Y).
Notation "X * Y" := (prod X Y) : type_scope. *)

From Categories Require Import Essentials.Facts_Tactics.
(* Categories.Essentials.Facts_Tactics:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.

Require Export Coq.Program.Tactics.
Require Export Coq.Program.Equality.
Require Export Coq.Logic.FunctionalExtensionality.
Require Export Coq.Logic.ProofIrrelevance.

Definition equal_f : ∀ {A B : Type} {f g : A → B}, f = g → ∀ x : A, f x = g x.

Definition f_equal : ∀ (A B : Type) (f : A → B) (x y : A), x = y → f x = f y.

Arguments f_equal [_ _] _ [_ _] _.

Ltac basic_simpl :=
  let simpl_prod _ :=
      match goal with
        [H : prod _ _ |- _] =>
        let H1 := fresh H "1" in
        let H2 := fresh H "2" in
        destruct H as [H1 H2]
      end
  in
  let simpl_sig _ :=
      match goal with
        [H : @sig _ _ |- _] =>
        let H1 := fresh H "1" in
        let H2 := fresh H "2" in
        destruct H as [H1 H2]
      end
  in
  let basic_simpl_helper _ :=
      cbn in *; intros;
        repeat simpl_prod tt;
        repeat simpl_sig tt
  in
  repeat basic_simpl_helper tt
.

Global Obligation Tactic := basic_simpl; auto.

Ltac PIR :=
  let pir_helper _ :=
      match goal with
      |[H : ?A, H' : ?A|- _] =>
       match type of A with
       | Prop =>
         destruct (proof_irrelevance _ H H')
       end
      end
  in
  repeat pir_helper tt
.

Ltac ElimEq := repeat match goal with [H : _ = _|- _] => destruct H end.

Hint Extern 1 => progress ElimEq.

Ltac cbn_rewrite W :=
  let H := fresh "H" in
  set (H := W); cbn in H; rewrite H; clear H
.

Ltac cbn_rewrite_in W V :=
  let H := fresh "H" in
  set (H := W); cbn in H; rewrite H in V; clear H
.

Ltac cbn_rewrite_back W :=
  let H := fresh "H" in
  set (H := W); cbn in H; rewrite <- H; clear H
.

Ltac cbn_rewrite_back_in W V :=
  let H := fresh "H" in
  set (H := W); cbn in H; rewrite <- H in V; clear H
.

Tactic Notation "cbn_rewrite" constr(W) := cbn_rewrite W.
Tactic Notation "cbn_rewrite" constr(W) "in" hyp_list(V) := cbn_rewrite_in W V.
Tactic Notation "cbn_rewrite" "<-" constr(W) := cbn_rewrite_back W.
Tactic Notation "cbn_rewrite" "<-" constr(W) "in" hyp_list(V) := cbn_rewrite_back_in W V.

Lemma sig_proof_irrelevance {A : Type} (P : A → Prop) (X Y : sig P) : proj1_sig X = proj1_sig Y → X = Y.

Hint Extern 2 (exist ?A _ _ = exist ?A _ _) => apply sig_proof_irrelevance.

Ltac FunExt :=
progress (
    repeat (
        match goal with
          [|- _ = _] =>
          let x := fresh "x" in
          extensionality x
        end
      )
  )
.

Hint Extern 1 => FunExt.

Lemma pair_eq (A B : Type) (a b : A * B) : fst a = fst b → snd a = snd b → a = b.

Hint Resolve pair_eq.

Ltac revert_clearbody_all :=
 repeat lazymatch goal with H:_ |- _ => try clearbody H; revert H end.

Ltac hyp_stack :=
 constr:(ltac:(revert_clearbody_all;constructor) : True).

Ltac next_hyp hs step last :=
 lazymatch hs with (?hs' ?H) => step H hs' | _ => last end.

Tactic Notation "dohyps" tactic3(tac) :=
 let hs := hyp_stack in
 let rec step H hs := tac H; next_hyp hs step idtac in
 next_hyp hs step idtac.

Tactic Notation "dohyps" "reverse" tactic3(tac) :=
 let hs := hyp_stack in
 let rec step H hs := next_hyp hs step idtac; tac H in
 next_hyp hs step idtac.

Tactic Notation "do1hyp" tactic3(tac) :=
 let hs := hyp_stack in
 let rec step H hs := tac H + next_hyp hs step fail in
 next_hyp hs step fail.

Tactic Notation "do1hyp" "reverse" tactic3(tac) :=
 let hs := hyp_stack in
 let rec step H hs := next_hyp hs step fail + tac H in
 next_hyp hs step fail. *)

From Categories Require Import Category.Main.
(* Categories.Category.Main:
From Categories Require Export Category.Category.
From Categories Require Export Category.Morph.
From Categories Require Export Category.Opposite.
From Categories Require Export Category.SubCategory.
From Categories Require Export Category.Composable_Chain. *)

From Categories Require Import Functor.Functor Functor.Functor_Ops
(* Categories.Functor.Functor:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.
From Categories Require Import Essentials.Facts_Tactics.
From Categories Require Import Category.Main.

Record Functor (C C' : Category) : Type :=
{
  
  FO : C → C';

  FA : ∀ {a b}, (a –≻ b)%morphism → ((FO a) –≻ (FO b))%morphism;

  F_id : ∀ c, FA (id c) = id (FO c);

  F_compose : ∀ {a b c} (f : (a –≻ b)%morphism) (g : (b –≻ c)%morphism),
      (FA (g ∘ f) = (FA g) ∘ (FA f))%morphism

}.

Arguments FO {_ _} _ _.
Arguments FA {_ _} _ {_ _} _, {_ _} _ _ _ _.
Arguments F_id {_ _} _ _.
Arguments F_compose {_ _} _ {_ _ _} _ _.

Notation "C –≻ D" := (Functor C D) : functor_scope.

Bind Scope functor_scope with Functor.

Notation "F '_o'" := (FO F) : object_scope.

Notation "F '@_a'" := (@FA _ _ F) : morphism_scope.

Notation "F '_a'" := (FA F) : morphism_scope.

Hint Extern 2 => (apply F_id).

Local Open Scope morphism_scope.
Local Open Scope object_scope.

Ltac Functor_Simplify :=
  progress
    (
      repeat rewrite F_id;
      (
        repeat
          match goal with
          | [|- ?F _a ?A = id (?F _o ?x)] =>
            (rewrite <- F_id; (cbn+idtac))
          | [|- (id (?F _o ?x)) = ?F _a ?A] =>
            (rewrite <- F_id; (cbn+idtac))
          | [|- ?F _a ?A ∘ ?F _a ?B = ?F _a ?C ∘ ?F _a ?D] =>
            (repeat rewrite <- F_compose; (cbn+idtac))
          | [|- ?F _a ?A ∘ ?F _a ?B = ?F _a ?C] =>
            (rewrite <- F_compose; (cbn+idtac))
          | [|- ?F _a ?C = ?F _a ?A ∘ ?F _a ?B] =>
            (rewrite <- F_compose; (cbn+idtac))
          | [|- context [?F _a ?A ∘ ?F _a ?B]] =>
            (rewrite <- F_compose; (cbn+idtac))
          end
      )
    )
.

Hint Extern 2 => Functor_Simplify.

Section Functor_eq_simplification.

  Context {C C' : Category} (F G : (C –≻ C')%functor).

  Lemma Functor_eq_simplify (Oeq : F _o = G _o) :
    ((fun x y =>
        match Oeq in _ = V return ((x –≻ y) → ((V x) –≻ (V y)))%morphism with
          eq_refl => F  @_a x y
        end) = G @_a) -> F = G.

  Theorem FA_extensionality (Oeq : F _o = G _o) :
    (
      ∀ (a b : Obj)
        (h : (a –≻ b)%morphism),
        (
          fun x y =>
            match Oeq in _ = V return
                  ((x –≻ y) → ((V x) –≻ (V y)))%morphism
            with
              eq_refl => F  @_a x y
            end
        ) _ _ h = G _a h
    )
    →
    (
      fun x y =>
        match Oeq in _ = V return
              ((x –≻ y) → ((V x) –≻ (V y)))%morphism
        with
          eq_refl => F  @_a x y
        end
    ) = G @_a.

  Lemma Functor_extensionality (Oeq : F _o = G _o) :
    (
      ∀ (a b : Obj) (h : (a –≻ b)%morphism),
        (
          fun x y =>
            match Oeq in _ = V return
                  ((x –≻ y) → ((V x) –≻ (V y)))%morphism
            with
              eq_refl => F  @_a x y
            end
        ) _ _ h = G _a h
    ) → F = G.

End Functor_eq_simplification.

Hint Extern 2 => Functor_Simplify.

Ltac Func_eq_simpl :=
  match goal with
    [|- ?A = ?B :> Functor _ _] =>
    (apply (Functor_eq_simplify A B (eq_refl : A _o = B _o)%object)) +
    (cut (A _o = B _o)%object; [
       let u := fresh "H" in
       intros H;
         apply (Functor_eq_simplify A B H)
         |
    ])
  end.

Hint Extern 3 => Func_eq_simpl.

Section Functor_eq.
  Context {C C' : Category} (F G : (C –≻ C')%functor).

  Lemma Functor_eq_morph (H : F = G) :
    ∃ (H : ∀ x, F _o x = G _o x),
    ∀ x y (h : (x –≻ y)%morphism),
      match H x in _ = V return (V –≻ _)%morphism with
         eq_refl =>
         match H y in _ = V return (_ –≻ V)%morphism with
           eq_refl => F _a h
         end
       end = G _a h.

End Functor_eq. *)
(* Categories.Functor.Functor_Ops:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.
From Categories Require Import Essentials.Facts_Tactics.
From Categories Require Import Category.Main.
From Categories Require Import Functor.Functor.

Section Opposite_Functor.
  Context {C D : Category} (F : (C –≻ D)%functor).
  
  Local Open Scope morphism_scope.
  Local Open Scope object_scope.
    
  Program Definition Opposite_Functor : (C^op –≻ D^op)%functor :=
    {|
      FO := F _o;
      FA := fun _ _ h => F @_a _ _ h;
      F_id := fun a => F_id F a;
      F_compose := fun _ _ _ f g => F_compose F g f
    |}.

End Opposite_Functor.

Notation "F '^op'" := (Opposite_Functor F) : functor_scope.

Section Functor_Compose.
  Context {C C' C'' : Category} (F : (C –≻ C')%functor) (F' : (C' –≻ C'')%functor).

  Local Open Scope morphism_scope.
  Local Open Scope object_scope.
  
  Program Definition Functor_compose : (C –≻ C'')%functor :=
    {|
      FO := fun c => F' _o (F _o c);
      FA := fun c d f => F' _a (F _a f)
    |}.
  
End Functor_Compose.

Notation "F ∘ G" := (Functor_compose G F) : functor_scope. 

Section Functor_Assoc.
  Context {C1 C2 C3 C4 : Category}
          (F : (C1 –≻ C2)%functor)
          (G : (C2 –≻ C3)%functor)
          (H : (C3 –≻ C4)%functor).

  Local Open Scope functor_scope.
    
  Theorem Functor_assoc : (H ∘ G) ∘ F = H ∘ (G ∘ F).

End Functor_Assoc.

Program Definition Functor_id (C : Category) : (C –≻ C)%functor :=
  {|
    FO := fun x => x;
    FA := fun c d f => f
  |}.

Section Functor_Identity_Unit.
  Context  (C C' : Category) (F : (C –≻ C')%functor).

  Theorem Functor_id_unit_left : ((Functor_id C') ∘ F)%functor = F.

  Theorem Functor_id_unit_right : (Functor_compose (Functor_id _) F) = F.

End Functor_Identity_Unit. *)

        Functor.Representable.Hom_Func.

From Categories Require Import Functor.Functor_Extender.
(* Categories.Functor.Functor_Extender:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.
From Categories Require Import Essentials.Facts_Tactics.
From Categories Require Import Category.Main.
From Categories Require Import Functor.Functor Functor.Functor_Ops.
From Categories Require Import NatTrans.Main.

Local Notation NID := NatTrans_id (only parsing).

Local Hint Extern 1 => progress
                        (repeat (apply NatTrans_eq_simplify; FunExt); cbn in *).

Section Left_Functor_Extender.
  Context {C C' : Category} (p : (C –≻ C')%functor) (D : Category).

    Program Definition Left_Functor_Extender :
      ((Func_Cat C' D) –≻ (Func_Cat C D))%functor :=
      {|
        FO := fun F => (F ∘ p)%functor;
        FA := fun F F' N => (N ∘_h (NID p))%nattrans
      |}.

End Left_Functor_Extender.

Section Right_Functor_Extender.
  Context {C C' : Category} (p : (C –≻ C')%functor) (D : Category).

    Program Definition Right_Functor_Extender :
      ((Func_Cat D C) –≻ (Func_Cat D C'))%functor :=
      {|
        FO := fun F => (p ∘ F)%functor;
        FA := fun F F' N => ((NID p) ∘_h N)%nattrans
      |}.

End Right_Functor_Extender.

Section Left_Functor_Extender_Iso.
  Context {C C' : Category} {p p' : (C –≻ C')%functor}
          (N : (p ≃ p')%natiso) (D : Category).

  Local Hint Extern 1 => (rewrite Trans_com); trivial; fail.
  Local Hint Extern 1 => rewrite <- F_compose.
  Local Hint Extern 1 =>
  match goal with
    [w : @Obj C |- _] =>
    cbn_rewrite (f_equal (fun u => Trans u w) (left_inverse N))
  end.
  Local Hint Extern 1 =>
  match goal with
    [w : @Obj C |- _] =>
    cbn_rewrite (f_equal (fun u => Trans u w) (right_inverse N))
  end.

  Program Definition Left_Functor_Extender_Iso :
    ((Left_Functor_Extender p D) ≃ (Left_Functor_Extender p' D))%natiso
    :=
      {|
        iso_morphism :=
          {|
            Trans :=
              fun e =>
                ((NatTrans_id_Iso e) ∘_h N)%natiso
          |};
        inverse_morphism :=
          {|
            Trans :=
              fun e =>
                ((NatTrans_id_Iso e) ∘_h (N⁻¹))%natiso
          |}
      |}
  .
      
End Left_Functor_Extender_Iso.

Section Right_Functor_Extender_Iso.
  Context {C C' : Category} {p p' : (C –≻ C')%functor}
          (N : (p ≃ p')%natiso) (D : Category).
  
  Local Hint Extern 1 => (rewrite Trans_com); trivial; fail.
  Local Hint Extern 1 => rewrite <- F_compose.
  Local Hint Extern 1 =>
  match goal with
    [w : @Obj D, F : (D –≻ C)%functor |- _] =>
    cbn_rewrite (f_equal (fun u => Trans u (F _o w)%object) (left_inverse N))
    end.
  Local Hint Extern 1 =>
  match goal with
    [w : @Obj D, F : (D –≻ C)%functor |- _] =>
    cbn_rewrite (f_equal (fun u => Trans u (F _o w)%object) (right_inverse N))
    end.

  Program Definition Right_Functor_Extender_Iso :
    ((Right_Functor_Extender p D) ≃ (Right_Functor_Extender p' D))%natiso
    :=
      {|
        iso_morphism :=
          {|
            Trans :=
              fun e =>
                (N ∘_h (NatTrans_id_Iso e))%natiso
          |};
        inverse_morphism :=
          {|
            Trans :=
              fun e =>
                ((N⁻¹) ∘_h (NatTrans_id_Iso e))%natiso
          |}
      |}
  .
 
End Right_Functor_Extender_Iso.

Section Right_Left_Functor_Extension_Iso.
  Context {B C D E : Category} (F : (B –≻ C)%functor) (G : (D –≻ E)%functor).
  
  Program Definition Right_Left_Functor_Extension_Iso :
    (
      (((Right_Functor_Extender G B) ∘ (Left_Functor_Extender F D))%functor)
        ≃ ((Left_Functor_Extender F E) ∘ (Right_Functor_Extender G C))%functor
    )%natiso :=
    {|
      iso_morphism := {|Trans := fun h => NatTrans_Functor_assoc_sym F h G |};
      inverse_morphism := {|Trans := fun h => NatTrans_Functor_assoc F h G |}
    |}.

End Right_Left_Functor_Extension_Iso. *)

From Categories Require Import NatTrans.Main.
(* Categories.NatTrans.Main:
From Categories Require Export NatTrans.NatTrans.
From Categories Require Export NatTrans.Func_Cat.
From Categories Require Export NatTrans.NatIso.
From Categories Require Export NatTrans.Operations.
From Categories Require Export NatTrans.Morphisms. *)

From Categories Require Import Ext_Cons.Prod_Cat.Main.
(* Categories.Ext_Cons.Prod_Cat.Main:
From Categories Require Export Ext_Cons.Prod_Cat.Prod_Cat.
From Categories Require Export Ext_Cons.Prod_Cat.Operations.
From Categories Require Export Ext_Cons.Prod_Cat.Nat_Facts. *)

From Categories Require Import Adjunction.Adjunction Adjunction.Duality Adjunction.Adj_Facts.
(* Categories.Adjunction.Adjunction:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.
From Categories Require Import Essentials.Facts_Tactics.
From Categories Require Import Category.Main.
From Categories Require Import Ext_Cons.Prod_Cat.Prod_Cat Ext_Cons.Prod_Cat.Operations.
From Categories Require Import Functor.Main.
From Categories Require Import Functor.Representable.Hom_Func
        Functor.Representable.Hom_Func_Prop.
From Categories Require Import NatTrans.Main.

Local Open Scope functor_scope.

Local Notation NID := NatTrans_id (only parsing).
Local Notation FCAT := Func_Cat (only parsing).

Notation Hom_Adj_Left C D F G :=
  ((Hom_Func D) ∘ (Prod_Functor (F^op) (@Functor_id D)))%functor (only parsing).

Notation Hom_Adj_Right C D F G :=
  ((Hom_Func C) ∘ (Prod_Functor (@Functor_id (C^op)) G))%functor (only parsing).

Local Obligation Tactic := idtac.

Section Adjunction.
  Context {C D : Category} (F : C –≻ D) (G : D –≻ C).

  Record Adjunct : Type :=
  {
    adj_unit : ((Functor_id C) –≻ (G ∘ F))%nattrans;
    
    adj_morph_ex {c : C} {d : D} (f : (c –≻ (G _o d)%object)%morphism) :
      ((F _o c)%object –≻ d)%morphism;
    
    adj_morph_com {c : C} {d : D} (f : (c –≻ (G _o d))%morphism%object) :
      f = ((G _a (adj_morph_ex f)) ∘ (Trans adj_unit c))%morphism;
    
    adj_morph_unique {c : C} {d : D} (f : (c –≻ (G _o d))%object%morphism)
                     (g h : ((F _o c) –≻ d)%morphism%object) :
      f = ((G _a g) ∘ (Trans adj_unit c))%morphism →
      f = ((G _a h) ∘ (Trans adj_unit c))%morphism →
      g = h
  }.

  Arguments adj_unit : clear implicits.
  Arguments adj_morph_ex _ {_ _} _.
  Arguments adj_morph_com _ {_ _} _.
  Arguments adj_morph_unique _ {_ _} _ _ _ _ _.

  Theorem Adjunct_eq_simplify (adj adj' : Adjunct) :
    adj_unit adj = @adj_unit adj' →
    @adj_morph_ex adj = @adj_morph_ex adj' → adj = adj'.

  Definition Hom_Adjunct :=
    (Hom_Adj_Left _ _ F G ≃ Hom_Adj_Right _ _ F G)%natiso.

  Record UCU_Adjunct :=
    {
      ucu_adj_unit : ((Functor_id C) –≻ (G ∘ F))%nattrans;
      
      ucu_adj_counit : ((F ∘ G) –≻ (Functor_id D))%nattrans;

      ucu_adj_left_id : ((NatTrans_from_compose_id _)
                           ∘ ((((ucu_adj_counit ∘_h (NID F))
                                  ∘ (NatTrans_Functor_assoc_sym _ _ _))
                                 ∘ ((NID F) ∘_h ucu_adj_unit))
                                ∘ (NatTrans_to_id_compose _)))%nattrans
                        = (NID F);
      
      ucu_adj_right_id : ((NatTrans_from_id_compose _)
                            ∘ (((((NID G) ∘_h ucu_adj_counit)
                                   ∘ (NatTrans_Functor_assoc _ _ _))
                                  ∘ (ucu_adj_unit ∘_h (NID G)))
                                 ∘ (NatTrans_to_compose_id _)))%nattrans
                         = (NID G)
    }.

  Arguments ucu_adj_unit : clear implicits.
  Arguments ucu_adj_counit : clear implicits.
  Arguments ucu_adj_left_id : clear implicits.
  Arguments ucu_adj_right_id : clear implicits.

  Local Notation "F ⊣ G" := (Adjunct) : functor_scope.
  Local Notation "F ⊣_hom G" := (Hom_Adjunct) : functor_scope.
  Local Notation "F ⊣_ucu G" := (UCU_Adjunct) : functor_scope.
  
  Section UCU_Adj_Adj.
    Context (Adj : (F ⊣_ucu G)%functor).

    Program Definition UCU_Adj_to_Adj : (F ⊣ G)%functor :=
      {|
        adj_unit := ucu_adj_unit Adj;
        adj_morph_ex :=
          fun _ _ h => ((Trans (ucu_adj_counit Adj) _) ∘ (F _a h))%morphism
      |}.

  End UCU_Adj_Adj.

  Section Adj_UCU_Adj.
    Context (Adj : (F ⊣ G)%functor).
    
    Program Definition Adj_to_UCU_Adj : (F ⊣_ucu G)%functor :=
      {|
        ucu_adj_unit := adj_unit Adj;
        ucu_adj_counit :=
          {|
            Trans := fun d => @adj_morph_ex Adj (G _o d) d id
          |}
      |}.

  End Adj_UCU_Adj.
  
  Section Adj_Hom_Adj.
    Context (Adj : (F ⊣ G)%functor).

    Program Definition Adj_to_Hom_Adj_LR :
      ((Hom_Adj_Left _ _ F G) –≻ (Hom_Adj_Right _ _ F G))%nattrans :=
    {|
      Trans := fun c h => ((G _a h) ∘ (Trans (adj_unit Adj) _))%morphism
    |}.

    Program Definition Adj_to_Hom_Adj_RL :
      ((Hom_Adj_Right _ _ F G) –≻ (Hom_Adj_Left _ _ F G))%nattrans :=
    {|
      Trans := fun c h => adj_morph_ex Adj h
    |}.

    Program Definition Adj_to_Hom_Adj : (F ⊣_hom G)%functor :=
      NatIso _ _ Adj_to_Hom_Adj_LR Adj_to_Hom_Adj_RL _ _.

  End Adj_Hom_Adj.

  Section Hom_Adj_Adj.
    Context (Adj : (F ⊣_hom G)%functor).

    Program Definition Hom_Adj_to_Adj : (F ⊣ G)%functor :=
      {|
        adj_unit :=
          {| Trans := fun c => Trans (iso_morphism Adj) (c, F _o c)%object id |};
        adj_morph_ex := fun _ _ f => Trans (inverse_morphism Adj) (_, _) f
      |}.

  End Hom_Adj_Adj.

End Adjunction.

Arguments adj_unit {_ _ _ _} _ : assert.
Arguments adj_morph_ex {_ _ _ _} _ {_ _} _.
Arguments adj_morph_com {_ _ _ _} _ {_ _} _.
Arguments adj_morph_unique {_ _ _ _} _ {_ _} _ _ _ _ _.

Arguments ucu_adj_unit {_ _ _ _} _.
Arguments ucu_adj_counit {_ _ _ _} _.
Arguments ucu_adj_left_id {_ _ _ _} _.
Arguments ucu_adj_right_id {_ _ _ _} _.

Arguments Adj_to_Hom_Adj {_ _ _ _} _.

Arguments Hom_Adj_to_Adj {_ _ _ _} _.

Notation "F ⊣ G" := (Adjunct F G) : functor_scope.
Notation "F ⊣_hom G" := (Hom_Adjunct F G) : functor_scope.
Notation "F ⊣_ucu G" := (UCU_Adjunct F G) : functor_scope. *)
(* Categories.Adjunction.Duality:
From Categories Require Import Category.Main.
From Categories Require Import Ext_Cons.Prod_Cat.Prod_Cat Ext_Cons.Prod_Cat.Operations.
From Categories Require Import Functor.Main.
From Categories Require Import Functor.Representable.Hom_Func Functor.Representable.Hom_Func_Prop.
From Categories Require Import NatTrans.NatTrans NatTrans.NatIso.
From Categories Require Import Adjunction.Adjunction.

Local Open Scope functor_scope.

Section Hom_Adj_Duality.
  Context {C D : Category} {F : C –≻ D} {G : D –≻ C} (adj : F ⊣_hom G).

  Definition Hom_Adjunct_Duality : G^op ⊣_hom F^op :=
    (Prod_Func_Hom_Func (adj⁻¹))
  .

End Hom_Adj_Duality.

Section Adj_Duality.
  Context {C D : Category} {F : C –≻ D} {G : D –≻ C} (adj : F ⊣ G).

  Definition Adjunct_Duality : G^op ⊣ F^op :=
    (Hom_Adj_to_Adj (Hom_Adjunct_Duality (Adj_to_Hom_Adj adj)))
  .

End Adj_Duality. *)
(* Categories.Adjunction.Adj_Facts:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.
From Categories Require Import Essentials.Facts_Tactics.
From Categories Require Import Category.Main.
From Categories Require Import Ext_Cons.Prod_Cat.Prod_Cat Ext_Cons.Prod_Cat.Nat_Facts
        Ext_Cons.Prod_Cat.Operations.
From Categories Require Import Functor.Main.
From Categories Require Import Functor.Representable.Hom_Func
        Functor.Representable.Hom_Func_Prop.
From Categories Require Import NatTrans.Main.
From Categories Require Import Adjunction.Adjunction Adjunction.Duality.
From Categories Require Import Cat.Cat Cat.Exponential Cat.Exponential_Facts.
From Categories Require Import Yoneda.Yoneda.
From Categories Require Import Functor.Functor_Extender.

Local Open Scope functor_scope.

Section Hom_Adjunct_left_iso.
  Context {C D : Category}
          {F F' : C –≻ D}
          (N : (F' ≃ F)%natiso)
          {G : D –≻ C}
          (adj : F ⊣_hom G)
  .

  Definition Hom_Adjunct_left_iso : F' ⊣_hom G :=
    (adj ∘ ((NatTrans_id_Iso (Hom_Func D))
              ∘_h (Prod_Functor_NatIso
                     (N^op) (NatTrans_id_Iso (Functor_id D))))
    )%isomorphism%natiso.

End Hom_Adjunct_left_iso.

Section Hom_Adjunct_right_iso.
  Context {C D : Category}
          {F : C –≻ D}
          {G G' : D –≻ C}
          (N : (G ≃ G')%natiso)
          (adj : F ⊣_hom G)
  .

  Definition Hom_Adjunct_right_iso : F ⊣_hom G' :=
    Hom_Adjunct_Duality
      (Hom_Adjunct_left_iso
         ((N^op)⁻¹)%isomorphism%natiso (Hom_Adjunct_Duality adj)).

End Hom_Adjunct_right_iso.

Section Adjunct_left_iso.
  Context {C D : Category}
          (F F' : C –≻ D)
          (N : (F' ≃ F)%natiso)
          (G : D –≻ C)
          (adj : F ⊣ G)
  .

  Definition Adjunct_left_iso : F' ⊣ G :=
    Hom_Adj_to_Adj (Hom_Adjunct_left_iso N (Adj_to_Hom_Adj adj)).

End Adjunct_left_iso.

Section Adjunct_right_iso.
  Context {C D : Category}
          (F : C –≻ D)
          (G G' : D –≻ C)
          (N : (G ≃ G')%natiso)
          (adj : F ⊣ G)
  .

  Definition Adjunct_right_iso : F ⊣ G' :=
    Hom_Adj_to_Adj (Hom_Adjunct_right_iso N (Adj_to_Hom_Adj adj)).

End Adjunct_right_iso.

Section Hom_Adjunct_left_unique.
  Context {C D : Category}
          {F F' : C –≻ D}
          {G : D –≻ C}
          (adj : F ⊣_hom G)
          (adj' : F' ⊣_hom G)
  .

  Definition Hom_Adjunct_left_unique : (F ≃ F')%natiso.

End Hom_Adjunct_left_unique.

Section Hom_Adjunct_right_unique.
  Context {C D : Category}
          {F : C –≻ D}
          {G G' : D –≻ C}
          (adj : F ⊣_hom G)
          (adj' : F ⊣_hom G')
  .

  Theorem Hom_Adjunct_right_unique : (G ≃ G')%natiso.

End Hom_Adjunct_right_unique.

Section Adjunct_left_unique.
  Context {C D : Category}
          {F F' : C –≻ D}
          {G : D –≻ C}
          (adj : F ⊣ G)
          (adj' : F' ⊣ G)
  .

  Theorem Adjunct_left_unique : (F ≃ F' )%natiso.

End Adjunct_left_unique.

Section Adjunct_right_unique.
  Context {C D : Category}
          {F : C –≻ D}
          {G G' : D –≻ C}
          (adj : F ⊣ G)
          (adj' : F ⊣ G')
  .

  Theorem Adjunct_right_unique : (G ≃ G')%natiso.

End Adjunct_right_unique.

Section Hom_Adjunct_Lifted.
  Context {C D : Category}
          {F : C –≻ D}
          {G : D –≻ C}
          (adj : F ⊣_ucu G)
          (B : Category)
  .

  Local Notation NID := NatTrans_id (only parsing).
  Local Notation FCAT := Func_Cat (only parsing).

  Local Notation LEFT :=
    (
      (Hom_Func (Func_Cat B D))
        ∘ (Prod_Functor
             ((Right_Functor_Extender F B)^op)
             (Functor_id (Func_Cat B D))
          )
    )
      (only parsing).

  Local Notation RIGHT :=
    (
      (Hom_Func (Func_Cat B C))
        ∘ (Prod_Functor
             (Functor_id ((Func_Cat B C)^op)%category)
             (Right_Functor_Extender G B)
          )
    )
      (only parsing).

  Local Obligation Tactic := idtac.
  
  Program Definition Hom_Adjunct_Lifted_LR : (LEFT –≻ RIGHT)%nattrans :=
    {|
      Trans := fun c h =>
                 ((((NatTrans_id G) ∘_h h)
                     ∘ ((NatTrans_Functor_assoc (fst c) F G)
                          ∘ ((ucu_adj_unit adj) ∘_h (NatTrans_id (fst c)))))
                    ∘ (NatTrans_to_compose_id _))%nattrans
    |}.

  Program Definition Hom_Adjunct_Lifted_RL : (RIGHT –≻ LEFT)%nattrans :=
    {|
      Trans := fun c h =>
                 ((NatTrans_from_compose_id _)
                    ∘ ((((ucu_adj_counit adj)
                           ∘_h (NatTrans_id (snd c)))
                          ∘ (NatTrans_Functor_assoc_sym (snd c) G F))
                         ∘ ((NatTrans_id F) ∘_h h)))%nattrans
    |}.

  Program Definition Hom_Adjunct_Lifted : (LEFT ≃ RIGHT)%natiso :=
    {|
      iso_morphism := Hom_Adjunct_Lifted_LR;
      inverse_morphism := Hom_Adjunct_Lifted_RL
    |}.

End Hom_Adjunct_Lifted. *)

From Categories Require Import KanExt.Local KanExt.LocalFacts.Main.
(* Categories.KanExt.Local:
From Categories Require Import Essentials.Notations.
From Categories Require Import Essentials.Types.
From Categories Require Import Essentials.Facts_Tactics.
From Categories Require Import Category.Main.
From Categories Require Import Functor.Functor Functor.Functor_Ops Functor.Representable.Hom_Func.
From Categories Require Import Ext_Cons.Prod_Cat.Prod_Cat Ext_Cons.Prod_Cat.Operations.
From Categories Require Import NatTrans.NatTrans NatTrans.Operations NatTrans.Func_Cat NatTrans.NatIso.
From Categories Require Import Functor.Functor_Extender.

Section KanExtension.
  Context {C C' : Category} (p : (C –≻ C')%functor).

  Section Right.
    Context {D : Category} (F : (C –≻ D)%functor).

    Record LoKan_Cone : Type :=
      {
        cone_apex : (C' –≻ D)%functor;
        cone_edge : ((cone_apex ∘ p) –≻ F)%nattrans
      }.

    Coercion cone_apex : LoKan_Cone >-> Functor.
    Coercion cone_edge : LoKan_Cone >-> NatTrans.

    Section LoKan_Cone_Morph.
      Context (Cn Cn' : LoKan_Cone).

      Record LoKan_Cone_Morph : Type :=
        {
          cone_morph : (Cn –≻ Cn')%nattrans;
          cone_morph_com :
            Cn = (Cn' ∘ (cone_morph
                           ∘_h (NatTrans_id p)))%nattrans :> (_ –≻ _)%nattrans
        }.

      Coercion cone_morph : LoKan_Cone_Morph >-> NatTrans.

    End LoKan_Cone_Morph.

    Record Local_Right_KanExt :=
      {
        LRKE : LoKan_Cone;
        LRKE_morph_ex : ∀ (Cn : LoKan_Cone), LoKan_Cone_Morph Cn LRKE;
        LRKE_morph_unique :
          ∀ (Cn : LoKan_Cone)
            (h h' : LoKan_Cone_Morph Cn LRKE), h = h' :> (_ –≻ _)%nattrans
      }.

    Coercion LRKE : Local_Right_KanExt >-> LoKan_Cone.

    Record is_Local_Right_KanExt (Cn_apex : (C' –≻ D)%functor) :=
      {
        isLRKE_Cn_edge : ((Cn_apex ∘ p) –≻ F)%nattrans;
        isLRKE_morph_ex : ∀ (Cn : LoKan_Cone), LoKan_Cone_Morph
                                                 Cn
                                                 {|cone_apex :=
                                                     Cn_apex;
                                                   cone_edge := isLRKE_Cn_edge
                                                 |};
        isLRKE_morph_unique : ∀ (Cn : LoKan_Cone)
                                (h h' : LoKan_Cone_Morph
                                          Cn
                                          {|cone_apex := Cn_apex;
                                            cone_edge := isLRKE_Cn_edge
                                          |}),
            h = h' :> (_ –≻ _)%nattrans
      }.

    Definition is_Local_Right_KanExt_Local_Right_KanExt
               {Cn_apex : (C' –≻ D)%functor}
               (ilrke : is_Local_Right_KanExt Cn_apex) : Local_Right_KanExt :=
      {|
        LRKE := {|cone_apex := Cn_apex; cone_edge := @isLRKE_Cn_edge _ ilrke|};
        LRKE_morph_ex := @isLRKE_morph_ex _ ilrke;
        LRKE_morph_unique := @isLRKE_morph_unique _ ilrke
      |}.

    Definition Local_Right_KanExt_is_Local_Right_KanExt
               (lrke : Local_Right_KanExt)
      : is_Local_Right_KanExt lrke :=
      {|
        isLRKE_Cn_edge := lrke;
        isLRKE_morph_ex := @LRKE_morph_ex lrke;
        isLRKE_morph_unique := @LRKE_morph_unique lrke
      |}.

    Record is_Cone_Local_Right_KanExt (Cn : LoKan_Cone) :=
      {
        isCLRKE_morph_ex : ∀ (Cn' : LoKan_Cone), LoKan_Cone_Morph Cn' Cn;
        isCLRKE_morph_unique :
          ∀ (Cn' : LoKan_Cone) (h h' : LoKan_Cone_Morph Cn' Cn),
            h = h' :> (_ –≻ _)%nattrans
      }.

    Definition is_Cone_Local_Right_KanExt_Local_Right_KanExt {Cn : LoKan_Cone}
               (ilrke : is_Cone_Local_Right_KanExt Cn) : Local_Right_KanExt :=
      {|
        LRKE := Cn;
        LRKE_morph_ex := @isCLRKE_morph_ex _ ilrke;
        LRKE_morph_unique := @isCLRKE_morph_unique _ ilrke
      |}.

    Definition Local_Right_KanExt_is_Cone_Local_Right_KanExt
               (lrke : Local_Right_KanExt)
      : is_Cone_Local_Right_KanExt lrke :=
      {|
        isCLRKE_morph_ex := @LRKE_morph_ex lrke;
        isCLRKE_morph_unique := @LRKE_morph_unique lrke
      |}.
    
  End Right.
  
End KanExtension.

Section Left.
  Context {C C' : Category} (p : (C –≻ C')%functor)
          {D : Category} (F : (C –≻ D)%functor).

  Definition Local_Left_KanExt := Local_Right_KanExt (p^op) (F^op).

  Definition is_Local_Left_KanExt (Cn_apex : (C' –≻ D)%functor) :=
    is_Local_Right_KanExt (p^op) (F^op) (Cn_apex^op)
  .
  
End Left.
  
Arguments cone_apex {_ _ _ _ _} _.
Arguments cone_edge {_ _ _ _ _} _.
Arguments LoKan_Cone_Morph {_ _ _ _ _} _ _.
Arguments cone_morph {_ _ _ _ _ _ _} _.
Arguments cone_morph_com {_ _ _ _ _ _ _} _.
Arguments LRKE {_ _ _ _ _} _.
Arguments LRKE_morph_ex {_ _ _ _ _} _ _.
Arguments LRKE_morph_unique {_ _ _ _ _} _ _ _ _.

Section Hom_Local_Right_KanExt.
  Context {C C' : Category} (p : (C –≻ C')%functor)
          {D : Category} (F : (C –≻ D)%functor).

  Definition Hom_Local_Right_KanExt_Isomorphism (HLRKE : (C' –≻ D)%functor) :=
    (
      (
        (@Fix_Bi_Func_2 _ (Func_Cat _ _) _ F (Hom_Func (Func_Cat C D)))
          ∘ (Left_Functor_Extender p D)^op
      )%functor
       ≃
       (
         @Fix_Bi_Func_2 _ (Func_Cat _ _) _ HLRKE (Hom_Func (Func_Cat C' D))
       )
    )%natiso
  .
  
  Record Hom_Local_Right_KanExt := 
    {
      HLRKE : (C' –≻ D)%functor;
      HLRKE_Iso : Hom_Local_Right_KanExt_Isomorphism HLRKE
    }.
  
  Coercion HLRKE : Hom_Local_Right_KanExt >-> Functor.
  
End Hom_Local_Right_KanExt.

Section Hom_Local_Left_KanExt.
  Context {C C' : Category} (p : (C –≻ C')%functor)
          {D : Category} (F : (C –≻ D)%functor).

  Definition Hom_Local_Left_KanExt :=
    Hom_Local_Right_KanExt (p^op) (F^op).
  
End Hom_Local_Left_KanExt.

Arguments HLRKE {_ _ _ _ _} _.
Arguments HLRKE_Iso {_ _ _ _ _} _. *)
(* Categories.KanExt.LocalFacts.Main:
From Categories Require Export KanExt.LocalFacts.Uniqueness.
From Categories Require Export KanExt.LocalFacts.HomToCones.
From Categories Require Export KanExt.LocalFacts.ConesToHom.
From Categories Require Export KanExt.LocalFacts.NatIso.
From Categories Require Export KanExt.LocalFacts.From_Iso_Cat. *)



Local Notation NID := NatTrans_id (only parsing).

Local Notation FCAT := Func_Cat (only parsing).



Local Open Scope functor_scope.



Section Right_Adjoint_Preserves_Hom_Local_Right_KanExt.

  Context

    {C C' : Category}

    (p : C –≻ C')

    {D : Category}

    (F : C –≻ D)

    (hlrke : Hom_Local_Right_KanExt p F)

    {E : Category}

    {L : E –≻ D}

    {R : D –≻ E}

    (adj : UCU_Adjunct L R)

  .

  

  Local Definition Ext_p_F_Hom_Adjunct_Lifted :=

    ((

        ((Fix_Bi_Func_2_NatIso (Hom_Adjunct_Lifted adj C) F)

           ∘ (Fix_Bi_Func_2_Functor_id_swap_NatIso _ _ F)⁻¹

        )

          ∘_h

          (NatTrans_id_Iso (Left_Functor_Extender p E)^op)

       )⁻¹

    )%isomorphism%natiso.

  

  Local Definition Conv_1 :=

    (

      NatIso_Functor_assoc

       ((Left_Functor_Extender p E)^op)

       ((Right_Functor_Extender L C)^op)

       (@Fix_Bi_Func_2 _ (Func_Cat _ _) _ F (Hom_Func (Func_Cat C D)))

    ).



  Local Definition Conv_2 :=

    (

      (

        (NatTrans_id_Iso (@Fix_Bi_Func_2

                            _ (Func_Cat _ _) _ F (Hom_Func (Func_Cat C D))))

          ∘_h ((Right_Left_Functor_Extension_Iso p L)⁻¹)^op

      )⁻¹

    )%isomorphism%natiso.



  Local Definition Conv_3 :=

    (

      (

        NatIso_Functor_assoc

          ((Right_Functor_Extender L C')^op)

          ((Left_Functor_Extender p D)^op)

          (@Fix_Bi_Func_2 _ (Func_Cat _ _) _ F (Hom_Func (Func_Cat C D)))

      )⁻¹

    )%isomorphism.



  Local Definition Conv := ((Conv_3 ∘ Conv_2) ∘ Conv_1)%isomorphism.



  Local Definition Ext_L_HLRKE_Iso :=

    (

      (HLRKE_Iso hlrke)

        ∘_h (NatTrans_id_Iso (Right_Functor_Extender L C')^op)

    )%natiso.



  Local Definition Fix2_hlrke_Hom_Adjunct_Lifted :=

    (

      (Fix_Bi_Func_2_NatIso (Hom_Adjunct_Lifted adj C') (hlrke))

        ∘ (Fix_Bi_Func_2_Functor_id_swap_NatIso _ _ (hlrke))⁻¹

    )%isomorphism.



  Local Definition Local_Preservation_Iso_underlying :=

    (

      (

        (Fix2_hlrke_Hom_Adjunct_Lifted ∘ Ext_L_HLRKE_Iso)

          ∘Conv

      )

        ∘ Ext_p_F_Hom_Adjunct_Lifted

    )%isomorphism

  .



  Local Definition Left_simplifier :=

    (

      (

        (

          (Fix_Bi_Func_2_NatIso

             (Func_Prod_of_ids_NatIso (Hom_Func (Func_Cat C E))) (R ∘ F))

            ∘ (Fix_Bi_2_Func_Prod_Func_NatIso

                 (Functor_id (Func_Cat C E) ^op)

                 (Right_Functor_Extender R C)

                 (Hom_Func (Func_Cat C E))

                 F

              )

        )⁻¹

      )

        ∘_h (NatTrans_id_Iso (Left_Functor_Extender p E)^op)

    )%isomorphism%natiso

  .



  Local Definition Right_simplifier :=

    (

      (

        Fix_Bi_Func_2_NatIso

          (Func_Prod_of_ids_NatIso (Hom_Func (Func_Cat C' E)))

          (R ∘ hlrke)

      )

        ∘

        (

          Fix_Bi_2_Func_Prod_Func_NatIso

            (Functor_id (Func_Cat C' E) ^op)

            (Right_Functor_Extender R C')

            (Hom_Func (Func_Cat C' E))

            (hlrke)

        )

      )%isomorphism

  .

  

  Definition Local_Preservation_Iso :=

    (Right_simplifier ∘ (Local_Preservation_Iso_underlying

                           ∘ Left_simplifier))%isomorphism

  .



  Definition Right_Adjoint_Preserves_Hom_Local_Right_KanExt :

    Hom_Local_Right_KanExt p (R ∘ F) :=

    {|

      HLRKE := (R ∘ (HLRKE hlrke));

      HLRKE_Iso := Local_Preservation_Iso

    |}.

  

End Right_Adjoint_Preserves_Hom_Local_Right_KanExt.



Section Right_Adjoint_Preserves_Local_Right_KanExt.

  Context {C C' : Category}

          (p : C –≻ C')

          {D : Category}

          (F : C –≻ D)

          (lrke : Local_Right_KanExt p F)

          {E : Category}

          {L : E –≻ D}

          {R : D –≻ E}

          (adj : UCU_Adjunct L R)

  .

  

  Definition Right_Adjoint_Preserves_Local_Right_KanExt :

    Local_Right_KanExt p (R ∘ F) :=

    Hom_Local_Right_KanExt_to_Local_Right_KanExt

      (

        Right_Adjoint_Preserves_Hom_Local_Right_KanExt

          _

          _

          (Local_Right_KanExt_to_Hom_Local_Right_KanExt lrke)

          adj

      )

  .

  

End Right_Adjoint_Preserves_Local_Right_KanExt.



Section Left_Adjoint_Preserves_Hom_Local_Left_KanExt.

  Context {C C' : Category}

          (p : C –≻ C')

          {D : Category}

          (F : C –≻ D)

          (hllke : Hom_Local_Left_KanExt p F)

          {E : Category}

          {L : D –≻ E}

          {R : E –≻ D}

          (adj : UCU_Adjunct L R)

  .

  

  Definition Left_Adjoint_Preserves_Hom_Local_Left_KanExt :

    Hom_Local_Left_KanExt p (L ∘ F) :=

    Right_Adjoint_Preserves_Hom_Local_Right_KanExt

      _

      _

      hllke

      (Adj_to_UCU_Adj _ _ (Adjunct_Duality (UCU_Adj_to_Adj _ _ adj)))

  .

  

End Left_Adjoint_Preserves_Hom_Local_Left_KanExt.



Section Left_Adjoint_Preserves_Local_Left_KanExt.

  Context {C C' : Category}

          (p : C –≻ C')

          {D : Category}

          (F : C –≻ D)

          (hllke : Local_Left_KanExt p F)

          {E : Category}

          {L : D –≻ E}

          {R : E –≻ D}

          (adj : UCU_Adjunct L R)

  .

  

  Definition Left_Adjoint_Preserves_Local_Left_KanExt :

    Local_Left_KanExt p (L ∘ F) :=

    Right_Adjoint_Preserves_Local_Right_KanExt

      _

      _

      hllke

      (Adj_to_UCU_Adj _ _ (Adjunct_Duality (UCU_Adj_to_Adj _ _ adj)))

  .

  

End Left_Adjoint_Preserves_Local_Left_KanExt.

