Require Export DACandMAC. 
(* DACandMAC:
Require Export SFSstate. 
 
Set Implicit Arguments.
Unset Strict Implicit. 
 
Section Preconditions. 
 
Variable s : SFSstate. 
 
Definition PreDACRead (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersReaders y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupReaders y))
  | None => False
  end. 
 
Definition PreDACWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersWriters y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupWriters y))
  | None => False
  end. 
 
Definition PreMAC (u : SUBJECT) (o : OBJECT) : Prop :=
  match fOSC (objectSC s) o, fSSC (subjectSC s) u with
  | None, _ => False
  | _, None => False
  | Some a, Some b => le_sc a b
  end. 
 
Definition PreStarPropRead (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActWriters x) -> le_sc y z
  end. 
 
Definition PreStarPropWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActReaders x) -> le_sc z y
  end. 
 
Inductive IsUNIXOwner (u : SUBJECT) : AccessCtrlListData -> Prop :=
    IUO :
      forall a : AccessCtrlListData,
      IsUNIXOwner u
        (acldata u (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a)). 
                              
Inductive ExecuterIsOwner (u : SUBJECT) (o : OBJECT) : Prop :=
  | UNIXOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y -> IsUNIXOwner u y -> ExecuterIsOwner u o
  | ACLOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      set_In u (UsersOwners y) -> ExecuterIsOwner u o
  | ACLGrp :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupOwners y)) ->
      ExecuterIsOwner u o. 
 
Definition InFileSystem (o : OBJECT) : Prop :=
  set_In o
    (set_union OBJeq_dec (DOM OBJeq_dec (files s))
       (DOM OBJeq_dec (directories s))). 
 
End Preconditions. 
 
Hint Resolve IUO UNIXOwner ACLOwner ACLGrp. 
 
Hint Unfold PreDACRead PreDACWrite PreMAC PreStarPropRead PreStarPropWrite
  InFileSystem. *)
Require Export setACLdata. 
(* setACLdata:
Require Export SFSstate. 
 
Section setACLdata. 
 
Variable s : SFSstate. 
 
Definition ChangeUserR (u : SUBJECT) (x : set SUBJECT) 
  (oct : RIGHTS) : set SUBJECT :=
  match oct with
  | allowedTo false false => set_remove SUBeq_dec u x
  | allowedTo false true => set_remove SUBeq_dec u x
  | allowedTo true false => set_add SUBeq_dec u x
  | allowedTo true true => set_add SUBeq_dec u x
  end. 

Definition ChangeUserW (u : SUBJECT) (x : set SUBJECT) 
  (oct : RIGHTS) : set SUBJECT :=
  match oct with
  | allowedTo false false => set_remove SUBeq_dec u x
  | allowedTo false true => set_add SUBeq_dec u x
  | allowedTo true false => set_remove SUBeq_dec u x
  | allowedTo true true => set_add SUBeq_dec u x
  end. 
 
Definition ChangeGroupR (g : GRPNAME) (oct : RIGHTS) 
  (x : set GRPNAME) : set GRPNAME :=
  match oct with
  | allowedTo false false => set_remove GRPeq_dec g x
  | allowedTo false true => set_remove GRPeq_dec g x
  | allowedTo true false => set_add GRPeq_dec g x
  | allowedTo true true => set_add GRPeq_dec g x
  end. 
 
Definition ChangeGroupW (g : GRPNAME) (oct : RIGHTS) 
  (x : set GRPNAME) : set GRPNAME :=
  match oct with
  | allowedTo false false => set_remove GRPeq_dec g x
  | allowedTo false true => set_add GRPeq_dec g x
  | allowedTo true false => set_remove GRPeq_dec g x
  | allowedTo true true => set_add GRPeq_dec g x
  end. 
 
Definition ChangeGroupO (g : GRPNAME) (x : set GRPNAME) : 
  set GRPNAME := set_add GRPeq_dec g x. 

End setACLdata. *)
 
Section Chmod. 
 
Variable s : SFSstate. 
 
Let ChangeGAR (o : OBJECT) (oct : RIGHTS) : Exc (set GRPNAME) :=
  match facl (acl s) o with
  | None => None (A:=set GRPNAME)
  | Some y =>
      Some
        (ChangeGroupR (AllGrp s) oct
           (ChangeGroupR (group y) oct (GroupReaders y)))
  end. 
 
Let ChangeGAW (o : OBJECT) (oct : RIGHTS) : Exc (set GRPNAME) :=
  match facl (acl s) o with
  | None => None (A:=set GRPNAME)
  | Some y =>
      Some
        (ChangeGroupW (AllGrp s) oct
           (ChangeGroupW (group y) oct (GroupWriters y)))
  end. 
 
Let NEW (u : SUBJECT) (o : OBJECT) (perms : PERMS) :
  Exc AccessCtrlListData :=
  match
    facl (acl s) o, ChangeGAR o (groupp perms), ChangeGAW o (groupp perms)
  with
  | None, _, _ => None (A:=AccessCtrlListData)
  | _, None, _ => None (A:=AccessCtrlListData)
  | _, _, None => None (A:=AccessCtrlListData)
  | Some y, Some gar, Some gaw =>
      Some
        (acldata (owner y) (group y)
           (ChangeUserR u (UsersReaders y) (ownerp perms)) gar
           (ChangeUserW u (UsersWriters y) (ownerp perms)) gaw
           (UsersOwners y) (GroupOwners y))
  end. 
 
Definition chmod_acl (u : SUBJECT) (o : OBJECT) (perms : PERMS) :
  set (OBJECT * AccessCtrlListData) :=
  match facl (acl s) o, NEW u o perms with
  | None, _ => acl s
  | _, None => acl s
  | Some y, Some z =>
      set_add ACLeq_dec (o, z) (set_remove ACLeq_dec (o, y) (acl s))
  end. 
 
Let t (u : SUBJECT) (o : OBJECT) (perms : PERMS) : SFSstate :=
  mkSFS (groups s) (primaryGrp s) (subjectSC s) (AllGrp s) 
    (RootGrp s) (SecAdmGrp s) (objectSC s) (chmod_acl u o perms) 
    (secmat s) (files s) (directories s). 
 
Inductive chmod (u : SUBJECT) (o : OBJECT) (perms : PERMS) :
SFSstate -> Prop :=
    ChmodOK :
      ExecuterIsOwner s u o ->
      ~ set_In o (domsecmat (secmat s)) -> chmod u o perms (t u o perms). 
 
Hint Resolve ChangeGAR ChangeGAW chmod_acl t. 

End Chmod.