Require Export DACandMAC. 
(* DACandMAC:
Require Export SFSstate. 
 
Set Implicit Arguments.
Unset Strict Implicit. 
 
Section Preconditions. 
 
Variable s : SFSstate. 
 
Definition PreDACRead (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersReaders y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupReaders y))
  | None => False
  end. 
 
Definition PreDACWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersWriters y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupWriters y))
  | None => False
  end. 
 
Definition PreMAC (u : SUBJECT) (o : OBJECT) : Prop :=
  match fOSC (objectSC s) o, fSSC (subjectSC s) u with
  | None, _ => False
  | _, None => False
  | Some a, Some b => le_sc a b
  end. 
 
Definition PreStarPropRead (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActWriters x) -> le_sc y z
  end. 
 
Definition PreStarPropWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActReaders x) -> le_sc z y
  end. 
 
Inductive IsUNIXOwner (u : SUBJECT) : AccessCtrlListData -> Prop :=
    IUO :
      forall a : AccessCtrlListData,
      IsUNIXOwner u
        (acldata u (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a)). 
                              
Inductive ExecuterIsOwner (u : SUBJECT) (o : OBJECT) : Prop :=
  | UNIXOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y -> IsUNIXOwner u y -> ExecuterIsOwner u o
  | ACLOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      set_In u (UsersOwners y) -> ExecuterIsOwner u o
  | ACLGrp :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupOwners y)) ->
      ExecuterIsOwner u o. 
 
Definition InFileSystem (o : OBJECT) : Prop :=
  set_In o
    (set_union OBJeq_dec (DOM OBJeq_dec (files s))
       (DOM OBJeq_dec (directories s))). 
 
End Preconditions. 
 
Hint Resolve IUO UNIXOwner ACLOwner ACLGrp. 
 
Hint Unfold PreDACRead PreDACWrite PreMAC PreStarPropRead PreStarPropWrite
  InFileSystem. *)
Require Export setACLdata. 
(* setACLdata:
Require Export SFSstate. 
 
Section setACLdata. 
 
Variable s : SFSstate. 
 
Definition ChangeUserR (u : SUBJECT) (x : set SUBJECT) 
  (oct : RIGHTS) : set SUBJECT :=
  match oct with
  | allowedTo false false => set_remove SUBeq_dec u x
  | allowedTo false true => set_remove SUBeq_dec u x
  | allowedTo true false => set_add SUBeq_dec u x
  | allowedTo true true => set_add SUBeq_dec u x
  end. 

Definition ChangeUserW (u : SUBJECT) (x : set SUBJECT) 
  (oct : RIGHTS) : set SUBJECT :=
  match oct with
  | allowedTo false false => set_remove SUBeq_dec u x
  | allowedTo false true => set_add SUBeq_dec u x
  | allowedTo true false => set_remove SUBeq_dec u x
  | allowedTo true true => set_add SUBeq_dec u x
  end. 
 
Definition ChangeGroupR (g : GRPNAME) (oct : RIGHTS) 
  (x : set GRPNAME) : set GRPNAME :=
  match oct with
  | allowedTo false false => set_remove GRPeq_dec g x
  | allowedTo false true => set_remove GRPeq_dec g x
  | allowedTo true false => set_add GRPeq_dec g x
  | allowedTo true true => set_add GRPeq_dec g x
  end. 
 
Definition ChangeGroupW (g : GRPNAME) (oct : RIGHTS) 
  (x : set GRPNAME) : set GRPNAME :=
  match oct with
  | allowedTo false false => set_remove GRPeq_dec g x
  | allowedTo false true => set_add GRPeq_dec g x
  | allowedTo true false => set_remove GRPeq_dec g x
  | allowedTo true true => set_add GRPeq_dec g x
  end. 
 
Definition ChangeGroupO (g : GRPNAME) (x : set GRPNAME) : 
  set GRPNAME := set_add GRPeq_dec g x. 

End setACLdata. *)
 
Section Create. 
 
Variable s : SFSstate. 
 
Definition NEWFILE (p : OBJNAME) : OBJECT := (p, File). 
 
Definition create_oSC (u : SUBJECT) (p : OBJNAME) :
  set (OBJECT * SecClass) :=
  match fSSC (subjectSC s) u, fsecmat (secmat s) (MyDir p) with
  | None, _ => objectSC s
  | _, None => objectSC s
  | Some y, Some z => set_add OSCeq_dec (NEWFILE p, y) (objectSC s)
  end. 
 
Let ChangeGAR (u : SUBJECT) (oct : RIGHTS) : set GRPNAME :=
  ChangeGroupR (AllGrp s) oct
    (ChangeGroupR (primaryGrp s u) oct (empty_set GRPNAME)). 
 
Let ChangeGAW (u : SUBJECT) (oct : RIGHTS) : set GRPNAME :=
  ChangeGroupW (AllGrp s) oct
    (ChangeGroupW (primaryGrp s u) oct (empty_set GRPNAME)). 
 
Let NEW (u : SUBJECT) (p : OBJNAME) (perms : PERMS) : AccessCtrlListData :=
  acldata u (primaryGrp s u)
    (ChangeUserR u (empty_set SUBJECT) (ownerp perms))
    (ChangeGAR u (groupp perms))
    (ChangeUserW u (empty_set SUBJECT) (ownerp perms))
    (ChangeGAW u (groupp perms)) (set_add SUBeq_dec u (empty_set SUBJECT))
    (ChangeGroupO (RootGrp s) (empty_set GRPNAME)). 
 
Definition create_acl (u : SUBJECT) (p : OBJNAME) (perms : PERMS) :
  set (OBJECT * AccessCtrlListData) :=
  match fSSC (subjectSC s) u, fsecmat (secmat s) (MyDir p) with
  | None, _ => acl s
  | _, None => acl s
  | Some y, Some z => set_add ACLeq_dec (NEWFILE p, NEW u p perms) (acl s)
  end. 
 
Let t (u : SUBJECT) (p : OBJNAME) (perms : PERMS) : SFSstate :=
  mkSFS (groups s) (primaryGrp s) (subjectSC s) (AllGrp s) 
    (RootGrp s) (SecAdmGrp s) (create_oSC u p) (create_acl u p perms)
    (secmat s) (create_files u p) (create_directories u p). 
 
Inductive create (u : SUBJECT) (p : OBJNAME) (perms : PERMS) :
SFSstate -> Prop :=
    CreateOK :
      ~ set_In (p, File) (domf (files s)) ->
      ~ set_In (p, Directory) (domd (directories s)) ->
      set_In (MyDir p) (domd (directories s)) ->
      match fsecmat (secmat s) (MyDir p) with
      | None => False
      | Some y => set_In u (ActWriters y)
      end -> create u p perms (t u p perms). 
 
End Create. 
 
Hint Unfold create_oSC create_acl.