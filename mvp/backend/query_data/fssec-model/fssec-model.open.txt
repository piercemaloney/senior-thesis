Require Export DACandMAC. 
(* DACandMAC:
Require Export SFSstate. 
 
Set Implicit Arguments.
Unset Strict Implicit. 
 
Section Preconditions. 
 
Variable s : SFSstate. 
 
Definition PreDACRead (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersReaders y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupReaders y))
  | None => False
  end. 
 
Definition PreDACWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersWriters y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupWriters y))
  | None => False
  end. 
 
Definition PreMAC (u : SUBJECT) (o : OBJECT) : Prop :=
  match fOSC (objectSC s) o, fSSC (subjectSC s) u with
  | None, _ => False
  | _, None => False
  | Some a, Some b => le_sc a b
  end. 
 
Definition PreStarPropRead (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActWriters x) -> le_sc y z
  end. 
 
Definition PreStarPropWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActReaders x) -> le_sc z y
  end. 
 
Inductive IsUNIXOwner (u : SUBJECT) : AccessCtrlListData -> Prop :=
    IUO :
      forall a : AccessCtrlListData,
      IsUNIXOwner u
        (acldata u (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a)). 
                              
Inductive ExecuterIsOwner (u : SUBJECT) (o : OBJECT) : Prop :=
  | UNIXOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y -> IsUNIXOwner u y -> ExecuterIsOwner u o
  | ACLOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      set_In u (UsersOwners y) -> ExecuterIsOwner u o
  | ACLGrp :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupOwners y)) ->
      ExecuterIsOwner u o. 
 
Definition InFileSystem (o : OBJECT) : Prop :=
  set_In o
    (set_union OBJeq_dec (DOM OBJeq_dec (files s))
       (DOM OBJeq_dec (directories s))). 
 
End Preconditions. 
 
Hint Resolve IUO UNIXOwner ACLOwner ACLGrp. 
 
Hint Unfold PreDACRead PreDACWrite PreMAC PreStarPropRead PreStarPropWrite
  InFileSystem. *)
 
Section Open. 
 
Variable s : SFSstate. 
 
Definition open_sm (u : SUBJECT) (o : OBJECT) (m : MODE) :
  set (OBJECT * ReadersWriters) :=
  match fsecmat (secmat s) o with
  | None =>
      match m with
      | READ =>
          set_add SECMATeq_dec
            (o,
            mkRW (set_add SUBeq_dec u (empty_set SUBJECT))
              (empty_set SUBJECT)) (secmat s)
      | WRITE =>
          set_add SECMATeq_dec
            (o,
            mkRW (empty_set SUBJECT)
              (set_add SUBeq_dec u (empty_set SUBJECT))) 
            (secmat s)
      end
  | Some y =>
      match m with
      | READ =>
          set_add SECMATeq_dec
            (o, mkRW (set_add SUBeq_dec u (ActReaders y)) (ActWriters y))
            (set_remove SECMATeq_dec (o, y) (secmat s))
      | WRITE =>
          set_add SECMATeq_dec
            (o, mkRW (ActReaders y) (set_add SUBeq_dec u (ActWriters y)))
            (set_remove SECMATeq_dec (o, y) (secmat s))
      end
  end. 
 
Let t (u : SUBJECT) (o : OBJECT) (m : MODE) : SFSstate :=
  mkSFS (groups s) (primaryGrp s) (subjectSC s) (AllGrp s) 
    (RootGrp s) (SecAdmGrp s) (objectSC s) (acl s) 
    (open_sm u o m) (files s) (directories s). 
 
Inductive open (u : SUBJECT) (o : OBJECT) : MODE -> SFSstate -> Prop :=
  | OpenRead :
      InFileSystem s o ->
      PreDACRead s u o ->
      PreMAC s u o -> PreStarPropRead s u o -> open u o READ (t u o READ)
  | OpenWrite :
      InFileSystem s o ->
      PreDACWrite s u o ->
      PreMAC s u o -> PreStarPropWrite s u o -> open u o WRITE (t u o WRITE). 
 
Hint Unfold open_sm t. 
 
End Open.