Require Export ModelProperties. 
(* ModelProperties:
Require Export TransFunc. 
 
Section ModelProperties. 
 
Definition DACSecureState (s : SFSstate) : Prop :=
  forall (u : SUBJECT) (o : OBJECT),
  match fsecmat (secmat s) o with
  | None => True
  | Some y =>
      (set_In u (ActReaders y) -> PreDACRead s u o) /\
      (set_In u (ActWriters y) -> PreDACWrite s u o)
  end. 
 
Definition MACSecureState (s : SFSstate) : Prop :=
  forall (u : SUBJECT) (o : OBJECT),
  match fsecmat (secmat s) o, fOSC (objectSC s) o, fSSC (subjectSC s) u with
  | None, _, _ => True
  | _, None, _ => True
  | _, _, None => True
  | Some x, Some y, Some z =>
      set_In u (ActReaders x) \/ set_In u (ActWriters x) -> le_sc y z
  end. 
       
Definition SecureState (s : SFSstate) : Prop :=
  DACSecureState s /\ MACSecureState s. 
 
Definition StarProperty (s : SFSstate) : Prop :=
  forall (u : SUBJECT) (o1 o2 : OBJECT),
  match
    fsecmat (secmat s) o1, fsecmat (secmat s) o2, fOSC (objectSC s) o2,
    fOSC (objectSC s) o1
  with
  | None, _, _, _ => True
  | _, None, _, _ => True
  | _, _, None, _ => True
  | _, _, _, None => True
  | Some w, Some x, Some y, Some z =>
      set_In u (ActWriters w) -> set_In u (ActReaders x) -> le_sc y z
  end. 
 
Inductive AclChanged : AccessCtrlListData -> AccessCtrlListData -> Prop :=
  | UR :
      forall (a : AccessCtrlListData) (b c : set SUBJECT),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) b (GroupReaders a) 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata (owner a) (group a) c (GroupReaders a) 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
  | GR :
      forall (a : AccessCtrlListData) (b c : set GRPNAME),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) b 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) c 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
  | UW :
      forall (a : AccessCtrlListData) (b c : set SUBJECT),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) b (GroupWriters a) (UsersOwners a)
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) c (GroupWriters a) (UsersOwners a)
           (GroupOwners a))
  | GW :
      forall (a : AccessCtrlListData) (b c : set GRPNAME),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) b (UsersOwners a)
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) c (UsersOwners a)
           (GroupOwners a))
  | UO :
      forall (a : AccessCtrlListData) (b c : set SUBJECT),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) b
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) c
           (GroupOwners a))
  | GO :
      forall (a : AccessCtrlListData) (b c : set GRPNAME),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) 
           (UsersOwners a) b)
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) 
           (UsersOwners a) c). 
 
Inductive UNIXAttrChanged :
AccessCtrlListData -> AccessCtrlListData -> Prop :=
  | Owner :
      forall (a : AccessCtrlListData) (b c : SUBJECT),
      b <> c ->
      UNIXAttrChanged
        (acldata b (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata c (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
  | Group :
      forall (a : AccessCtrlListData) (b c : GRPNAME),
      b <> c ->
      UNIXAttrChanged
        (acldata (owner a) b (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata (owner a) c (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a)). 
 
Inductive DACCtrlAttrHaveChanged (s t : SFSstate) (o : OBJECT) : Prop :=
  | ACL :
      forall y z : AccessCtrlListData,
      facl (acl s) o = Some y ->
      facl (acl t) o = Some z ->
      AclChanged y z -> DACCtrlAttrHaveChanged s t o
  | UNIX :
      forall y z : AccessCtrlListData,
      facl (acl s) o = Some y ->
      facl (acl t) o = Some z ->
      UNIXAttrChanged y z -> DACCtrlAttrHaveChanged s t o. 
 
Inductive SecClassChanged : SecClass -> SecClass -> Prop :=
  | Level :
      forall (a : SecClass) (b c : set CATEGORY),
      b <> c -> SecClassChanged (sclass (level a) b) (sclass (level a) c)
  | Categ :
      forall (a : SecClass) (b c : SECLEV),
      b <> c -> SecClassChanged (sclass b (categs a)) (sclass c (categs a)). 
 
Inductive MACObjCtrlAttrHaveChanged (s t : SFSstate) (o : OBJECT) : Prop :=
    SCo :
      forall x y : SecClass,
      fOSC (objectSC s) o = Some x ->
      fOSC (objectSC t) o = Some y ->
      SecClassChanged x y -> MACObjCtrlAttrHaveChanged s t o. 
 
Inductive MACSubCtrlAttrHaveChanged (s t : SFSstate) (u : SUBJECT) : Prop :=
    SCu :
      forall x y : SecClass,
      fSSC (subjectSC s) u = Some x ->
      fSSC (subjectSC t) u = Some y ->
      SecClassChanged x y -> MACSubCtrlAttrHaveChanged s t u. 
 
Definition ControlProperty (u : SUBJECT) (s t : SFSstate) : Prop :=
  (forall o : OBJECT,
   (DACCtrlAttrHaveChanged s t o -> ExecuterIsOwner s u o) /\
   (MACObjCtrlAttrHaveChanged s t o -> set_In u (groups s (SecAdmGrp s)))) /\
  (forall u0 : SUBJECT,
   MACSubCtrlAttrHaveChanged s t u0 -> set_In u (groups s (SecAdmGrp s))). 
 
Definition PreservesControlProp (s : SFSstate) (op : Operation)
  (t : SFSstate) : Prop :=
  forall u : SUBJECT, TransFunc u s op t -> ControlProperty u s t. 
 
Axiom
  WFSI1 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    (forall o : OBJECT,
     set_In o (DOM OBJeq_dec (files s)) -> ObjType o = File) ->
    TransFunc u s op t ->
    forall o : OBJECT, set_In o (DOM OBJeq_dec (files t)) -> ObjType o = File. 
 
Axiom
  WFSI2 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    (forall o : OBJECT,
     set_In o (DOM OBJeq_dec (directories s)) -> ObjType o = Directory) ->
    TransFunc u s op t ->
    forall o : OBJECT,
    set_In o (DOM OBJeq_dec (directories t)) -> ObjType o = Directory. 
 
Axiom
  WFSI3 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    DOM OBJeq_dec (acl s) =
    set_union OBJeq_dec (DOM OBJeq_dec (files s))
      (DOM OBJeq_dec (directories s)) ->
    TransFunc u s op t ->
    DOM OBJeq_dec (acl t) =
    set_union OBJeq_dec (DOM OBJeq_dec (files t))
      (DOM OBJeq_dec (directories t)). 
 
Definition FuncPre1 (s : SFSstate) : Prop :=
  (forall o : OBJECT,
   set_In o (DOM OBJeq_dec (directories s)) -> ObjType o = Directory) /\
  (forall o : OBJECT, set_In o (DOM OBJeq_dec (files s)) -> ObjType o = File) /\
  DOM OBJeq_dec (acl s) =
  set_union OBJeq_dec (DOM OBJeq_dec (files s))
    (DOM OBJeq_dec (directories s)). 
 
Axiom
  WFSI4 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    DOM OBJeq_dec (acl s) = DOM OBJeq_dec (objectSC s) ->
    TransFunc u s op t -> DOM OBJeq_dec (acl t) = DOM OBJeq_dec (objectSC t). 
 
Definition FuncPre2 (s : SFSstate) : Prop :=
  DOM OBJeq_dec (acl s) = DOM OBJeq_dec (objectSC s). 
 
Axiom
  WFSI5 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    Included (DOM OBJeq_dec (secmat s)) (DOM OBJeq_dec (acl s)) ->
    TransFunc u s op t ->
    Included (DOM OBJeq_dec (secmat t)) (DOM OBJeq_dec (acl t)). 
 
Definition FuncPre3 (s : SFSstate) : Prop :=
  Included (DOM OBJeq_dec (secmat s)) (DOM OBJeq_dec (acl s)). 
 
Axiom
  WFSI6 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC OBJeq_dec (acl s) ->
    TransFunc u s op t -> IsPARTFUNC OBJeq_dec (acl t). 
 
Definition FuncPre4 (s : SFSstate) : Prop := IsPARTFUNC OBJeq_dec (acl s). 
 
Axiom
  WFSI7 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC OBJeq_dec (secmat s) ->
    TransFunc u s op t -> IsPARTFUNC OBJeq_dec (secmat t). 
 
Definition FuncPre5 (s : SFSstate) : Prop := IsPARTFUNC OBJeq_dec (secmat s). 
 
Axiom
  WFSI8 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC OBJeq_dec (objectSC s) ->
    TransFunc u s op t -> IsPARTFUNC OBJeq_dec (objectSC t). 
 
Definition FuncPre6 (s : SFSstate) : Prop :=
  IsPARTFUNC OBJeq_dec (objectSC s). 
 
Axiom
  WFSI9 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC SUBeq_dec (subjectSC s) ->
    TransFunc u s op t -> IsPARTFUNC SUBeq_dec (subjectSC t). 
 
Definition FuncPre7 (s : SFSstate) : Prop :=
  IsPARTFUNC SUBeq_dec (subjectSC s). 
 
End ModelProperties. 
 
Hint Unfold SecureState DACSecureState MACSecureState ControlProperty
  PreservesControlProp. 
 
Hint Resolve UR GR UW GW UO GO Owner Group Level Categ. 
Hint Resolve WFSI1 WFSI2 WFSI3 WFSI4 WFSI5 WFSI6 WFSI7 WFSI8 WFSI9. *)
Require Export aclstatIsSecure. 
(* aclstatIsSecure:
Require Import ModelProperties.
Require Import AuxiliaryLemmas.

Section aclstatIsSecure.

Lemma AclstatPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Aclstat t -> SecureState t.
 
Lemma AclstatPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Aclstat t -> StarProperty t. 
 
Lemma AclstatPCP : forall s t : SFSstate, PreservesControlProp s Aclstat t. 
 
End aclstatIsSecure. 
 
Hint Resolve AclstatPSS AclstatPSP AclstatPCP. *)
Require Export chmodIsSecure. 
(* chmodIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section chmodIsSecure. 
 
Lemma ChmodPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Chmod t -> SecureState t. 
 
Lemma ChmodPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Chmod t -> StarProperty t. 
 
Lemma ChmodPCP : forall s t : SFSstate, PreservesControlProp s Chmod t. 
 
End chmodIsSecure. 
 
Hint Resolve ChmodPSS ChmodPSP ChmodPCP. *)
Require Export createIsSecure. 
(* createIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section createIsSecure. 
 
Lemma CreatePSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre1 s ->
 FuncPre2 s ->
 FuncPre3 s -> SecureState s -> TransFunc u s Create t -> SecureState t. 
 
Lemma CreatePSP :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre1 s ->
 FuncPre2 s ->
 FuncPre3 s -> StarProperty s -> TransFunc u s Create t -> StarProperty t. 
 
Lemma CreatePCP :
 forall s t : SFSstate,
 FuncPre1 s -> FuncPre2 s -> PreservesControlProp s Create t. 
 
End createIsSecure. 
 
Hint Resolve CreatePSS CreatePSP CreatePCP. *)
Require Export mkdirIsSecure. 
(* mkdirIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section mkdirIsSecure. 
 
Lemma MkdirPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre1 s ->
 FuncPre2 s ->
 FuncPre3 s -> SecureState s -> TransFunc u s Mkdir t -> SecureState t. 
 
Lemma MkdirPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre1 s ->
 FuncPre2 s ->
 FuncPre3 s -> StarProperty s -> TransFunc u s Mkdir t -> StarProperty t. 
 
Lemma MkdirPCP :
 forall s t : SFSstate,
 FuncPre1 s -> FuncPre2 s -> PreservesControlProp s Mkdir t. 
 
End mkdirIsSecure. 
 
Hint Resolve MkdirPSS MkdirPSP MkdirPCP. *)
Require Export openIsSecure. 
(* openIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section openIsSecure. 
 
Lemma OpenPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre5 s -> SecureState s -> TransFunc u s Open t -> SecureState t. 
 
Lemma OpenPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre5 s -> StarProperty s -> TransFunc u s Open t -> StarProperty t. 
 
Lemma OpenPCP : forall s t : SFSstate, PreservesControlProp s Open t. 
 
End openIsSecure. 
 
Hint Resolve OpenPSS OpenPSP OpenPCP. *)
Require Export addUsrGrpToAclIsSecure. 
(* addUsrGrpToAclIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section addUsrGrpToAclIsSecure. 
 
Lemma AddUsrGrpToAclPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s AddUsrGrpToAcl t -> SecureState t. 
 
Lemma AddUsrGrpToAclPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s AddUsrGrpToAcl t -> StarProperty t. 
 
Lemma AddUsrGrpToAclPCP :
 forall s t : SFSstate, PreservesControlProp s AddUsrGrpToAcl t. 
 
End addUsrGrpToAclIsSecure. 
 
Hint Resolve AddUsrGrpToAclPSS AddUsrGrpToAclPSP AddUsrGrpToAclPCP. *)
Require Export chobjscIsSecure. 
(* chobjscIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section chobjscIsSecure. 
 
Lemma ChobjscPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre6 s -> SecureState s -> TransFunc u s Chobjsc t -> SecureState t. 
 
Lemma ChobjscPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre6 s -> StarProperty s -> TransFunc u s Chobjsc t -> StarProperty t. 
 
Lemma ChobjscPCP : forall s t : SFSstate, PreservesControlProp s Chobjsc t. 
 
End chobjscIsSecure. 
 
Hint Resolve ChobjscPSS ChobjscPSP ChobjscPCP. *)
Require Export chownIsSecure. 
(* chownIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section chownIsSecure. 
 
Lemma ChownPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Chown t -> SecureState t. 
 
Lemma ChownPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Chown t -> StarProperty t. 
 
Lemma ChownPCP : forall s t : SFSstate, PreservesControlProp s Chown t. 
 
End chownIsSecure. 
 
Hint Resolve ChownPSS ChownPSP ChownPCP. *)
Require Export chsubscIsSecure. 
(* chsubscIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section chsubscIsSecure. 
 
Lemma ChsubscPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre7 s -> SecureState s -> TransFunc u s Chsubsc t -> SecureState t. 
 
Lemma ChsubscPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Chsubsc t -> StarProperty t. 
 
Lemma ChsubscPCP : forall s t : SFSstate, PreservesControlProp s Chsubsc t. 
 
End chsubscIsSecure. 
 
Hint Resolve ChsubscPSS ChsubscPSP ChsubscPCP. *)
Require Export closeIsSecure. 
(* closeIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section closeIsSecure. 
 
Lemma ClosePSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre5 s -> SecureState s -> TransFunc u s Close t -> SecureState t. 
 
Lemma ClosePSP :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre5 s -> StarProperty s -> TransFunc u s Close t -> StarProperty t. 
 
Lemma ClosePCP : forall s t : SFSstate, PreservesControlProp s Close t. 
 
End closeIsSecure. 
 
Hint Resolve ClosePSS ClosePSP ClosePCP. *)
Require Export delUsrGrpFromAclIsSecure. 
(* delUsrGrpFromAclIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section delUsrGrpFromAclIsSecure. 
 
Lemma DelUsrGrpFromAclPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s DelUsrGrpFromAcl t -> SecureState t. 
 
Lemma DelUsrGrpFromAclPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s DelUsrGrpFromAcl t -> StarProperty t. 
 
Lemma DelUsrGrpFromAclPCP :
 forall s t : SFSstate, PreservesControlProp s DelUsrGrpFromAcl t. 
 
End delUsrGrpFromAclIsSecure. 
 
Hint Resolve DelUsrGrpFromAclPSS DelUsrGrpFromAclPSP DelUsrGrpFromAclPCP. *)
Require Export oscstatIsSecure. 
(* oscstatIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section oscstatIsSecure. 
 
Lemma OscstatPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Oscstat t -> SecureState t. 
 
Lemma OscstatPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Oscstat t -> StarProperty t. 
 
Lemma OscstatPCP : forall s t : SFSstate, PreservesControlProp s Oscstat t. 
 
End oscstatIsSecure. 
 
Hint Resolve OscstatPSS OscstatPSP OscstatPCP. *)
Require Export owner_closeIsSecure. 
(* owner_closeIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section owner_closeIsSecure. 
 
Lemma Owner_ClosePSS :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre5 s -> SecureState s -> TransFunc u s Owner_Close t -> SecureState t. 
 
Lemma Owner_ClosePSP :
 forall (s t : SFSstate) (u : SUBJECT),
 FuncPre5 s ->
 StarProperty s -> TransFunc u s Owner_Close t -> StarProperty t. 
 
Lemma Owner_ClosePCP :
 forall s t : SFSstate, PreservesControlProp s Owner_Close t. 
 
End owner_closeIsSecure. 
 
Hint Resolve Owner_ClosePSS Owner_ClosePSP Owner_ClosePCP. *)
Require Export readIsSecure. 
(* readIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section readIsSecure. 
 
Lemma ReadPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Read t -> SecureState t. 
 
Lemma ReadPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Read t -> StarProperty t. 
 
Lemma ReadPCP : forall s t : SFSstate, PreservesControlProp s Read t. 
 
End readIsSecure. 
 
Hint Resolve ReadPSS ReadPSP ReadPCP. *)
Require Export readdirIsSecure. 
(* readdirIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section readdirIsSecure. 
 
Lemma ReaddirPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Readdir t -> SecureState t. 
 
Lemma ReaddirPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Readdir t -> StarProperty t. 
 
Lemma ReaddirPCP : forall s t : SFSstate, PreservesControlProp s Readdir t. 
 
End readdirIsSecure. 
 
Hint Resolve ReaddirPSS ReaddirPSP ReaddirPCP. *)
Require Export rmdirIsSecure. 
(* rmdirIsSecure:
Require Import ModelProperties.
Require Import AuxiliaryLemmas.

Section rmdirIsSecure. 
 
Lemma RmdirPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Rmdir t -> SecureState t. 
 
Lemma RmdirPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Rmdir t -> StarProperty t. 
 
Lemma RmdirPCP :
 forall s t : SFSstate,
 FuncPre4 s -> FuncPre6 s -> PreservesControlProp s Rmdir t. 
 
End rmdirIsSecure. 
 
Hint Resolve RmdirPSS RmdirPSP RmdirPCP. *)
Require Export sscstatIsSecure. 
(* sscstatIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section sscstatIsSecure. 
 
Lemma SscstatPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Sscstat t -> SecureState t. 
 
Lemma SscstatPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Sscstat t -> StarProperty t. 
 
Lemma SscstatPCP : forall s t : SFSstate, PreservesControlProp s Sscstat t. 
 
End sscstatIsSecure. 
 
Hint Resolve SscstatPSS SscstatPSP SscstatPCP. *)
Require Export statIsSecure. 
(* statIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section statIsSecure. 
 
Lemma StatPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Stat t -> SecureState t. 
 
Lemma StatPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Stat t -> StarProperty t. 
 
Lemma StatPCP : forall s t : SFSstate, PreservesControlProp s Stat t. 
 
End statIsSecure. 
 
Hint Resolve StatPSS StatPSP StatPCP. *)
Require Export unlinkIsSecure. 
(* unlinkIsSecure:
Require Import ModelProperties.
Require Import AuxiliaryLemmas.

Section unlinkIsSecure. 
 
Lemma UnlinkPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Unlink t -> SecureState t. 
 
Lemma UnlinkPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Unlink t -> StarProperty t. 
 
Lemma UnlinkPCP :
 forall s t : SFSstate,
 FuncPre4 s -> FuncPre6 s -> PreservesControlProp s Unlink t. 
 
End unlinkIsSecure. 
 
Hint Resolve UnlinkPSS UnlinkPSP UnlinkPCP. *)
Require Export writeIsSecure. 
(* writeIsSecure:
Require Import ModelProperties. 
Require Import AuxiliaryLemmas. 
 
Section writeIsSecure. 
 
Lemma WritePSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Write t -> SecureState t. 
 
Lemma WritePSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Write t -> StarProperty t. 
 
Lemma WritePCP : forall s t : SFSstate, PreservesControlProp s Write t. 
 
End writeIsSecure. 
 
Hint Resolve WritePSS WritePSP WritePCP. *)
Require Import InitialState. 
(* InitialState:
Require Export SFSstate. 
Set Implicit Arguments.
Unset Strict Implicit. 
 
Section InitialState. 
 
Parameter SysGroups : GRPNAME -> set SUBJECT. 
Parameter SysPrimaryGrp : SUBJECT -> GRPNAME. 
Parameter SysSubjectSC : set (SUBJECT * SecClass). 
Parameter SysAllGrp SysRootGrp SysSecAdmGrp : GRPNAME. 
 
Axiom SysSubjectSCIsPARTFUNC : IsPARTFUNC SUBeq_dec SysSubjectSC. 
 
Axiom RootBelongsToRootGrp : set_In root (SysGroups SysRootGrp). 
 
Axiom RootBelongsToAllGrp : set_In root (SysGroups SysAllGrp). 
 
Axiom SecofrBelongsToSecAdmGrp : set_In root (SysGroups SysSecAdmGrp). 
 
Axiom SecofrBelongsToAllGrp : set_In root (SysGroups SysAllGrp). 
 
Definition InitState : SFSstate :=
  mkSFS SysGroups SysPrimaryGrp SysSubjectSC SysAllGrp SysRootGrp
    SysSecAdmGrp (empty_set (OBJECT * SecClass))
    (empty_set (OBJECT * AccessCtrlListData))
    (empty_set (OBJECT * ReadersWriters)) (empty_set (OBJECT * FILECONT))
    (empty_set (OBJECT * DIRCONT)). 
 
End InitialState. 
 
Hint Resolve SysSubjectSCIsPARTFUNC. *)
Require Export Le. 
 
Definition GeneralSecureState (s : SFSstate) : Prop :=
  SecureState s /\
  StarProperty s /\
  FuncPre1 s /\
  FuncPre2 s /\
  FuncPre3 s /\ FuncPre4 s /\ FuncPre5 s /\ FuncPre6 s /\ FuncPre7 s. 
 
Lemma InitialStateIsSecure : GeneralSecureState InitState. 
unfold GeneralSecureState, SecureState, InitState, DACSecureState,
 MACSecureState, StarProperty, FuncPre1, FuncPre2, FuncPre3, FuncPre4,
 FuncPre5, FuncPre6, FuncPre7 in |- *; simpl in |- *. 
repeat (split; auto). 
intros.
elim (fSSC SysSubjectSC root); auto. 
 
contradiction. 
 
contradiction. 

contradiction.
 
Qed. 

Parameter defaultState : SFSstate. 
 
Lemma BasicSecurityTheorem :
 forall tr : list SFSstate,
 GeneralSecureState (nth 0 tr defaultState) ->
 (forall n : nat,
  n < length tr ->
  exists op : Operation,
    (exists u : SUBJECT,
       TransFunc u (nth n tr defaultState) op (nth (S n) tr defaultState))) ->
 forall n : nat, n <= length tr -> GeneralSecureState (nth n tr defaultState). 
intros. 
induction  n as [| n Hrecn]. 
auto. 
 
generalize Hrecn. 
cut
 (exists op : Operation,
    (exists u : SUBJECT,
       TransFunc u (nth n tr defaultState) op (nth (S n) tr defaultState))). 
elim (nth n tr defaultState). 
intros. 
elim H2; intros. 
elim H3; intros. 
cut
 (forall u : SUBJECT,
  GeneralSecureState
    (mkSFS groups primaryGrp subjectSC AllGrp RootGrp SecAdmGrp objectSC acl
       secmat files directories) ->
  TransFunc u
    (mkSFS groups primaryGrp subjectSC AllGrp RootGrp SecAdmGrp objectSC acl
       secmat files directories) x (nth (S n) tr defaultState) ->
  GeneralSecureState (nth (S n) tr defaultState)). 
intro GTR; apply (GTR x0). 
apply Hrecn0; auto with *. 
 
auto. 
 
unfold GeneralSecureState in |- *; intros u GSSi TF; decompose [and] GSSi;
 clear GSSi. 
split. 
induction  x as [| | | | | | | | | | | | | | | | | | | ];
 prolog
  [ AclstatPSS AddUsrGrpToAclPSS ChmodPSS ChobjscPSS ChownPSS ChsubscPSS
   ClosePSS CreatePSS DelUsrGrpFromAclPSS MkdirPSS OpenPSS OscstatPSS
   Owner_ClosePSS ReadPSS ReaddirPSS RmdirPSS SscstatPSS StatPSS UnlinkPSS
   WritePSS ] 2. 
 
split. 
induction  x as [| | | | | | | | | | | | | | | | | | | ];
 prolog
  [ AclstatPSP AddUsrGrpToAclPSP ChmodPSP ChobjscPSP ChownPSP ChsubscPSP
   ClosePSP CreatePSP DelUsrGrpFromAclPSP MkdirPSP OpenPSP OscstatPSP
   Owner_ClosePSP ReadPSP ReaddirPSP RmdirPSP SscstatPSP StatPSP UnlinkPSP
   WritePSP ] 2. 
 
split. 
unfold FuncPre1 in |- *; unfold FuncPre1 in H6; decompose [and] H6;
 repeat (split; eauto). 
 
unfold FuncPre2, FuncPre3, FuncPre4, FuncPre5, FuncPre6, FuncPre7 in |- *;
 unfold FuncPre2, FuncPre3, FuncPre4, FuncPre5, FuncPre6, FuncPre7
  in H8, H9, H10, H11, H12, H14; repeat (split; eauto). 
 
auto. 
 
Qed.