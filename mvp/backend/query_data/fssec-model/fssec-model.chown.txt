Require Export DACandMAC. 
(* DACandMAC:
Require Export SFSstate. 
 
Set Implicit Arguments.
Unset Strict Implicit. 
 
Section Preconditions. 
 
Variable s : SFSstate. 
 
Definition PreDACRead (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersReaders y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupReaders y))
  | None => False
  end. 
 
Definition PreDACWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  match facl (acl s) o with
  | Some y =>
      set_In u (UsersWriters y) \/
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupWriters y))
  | None => False
  end. 
 
Definition PreMAC (u : SUBJECT) (o : OBJECT) : Prop :=
  match fOSC (objectSC s) o, fSSC (subjectSC s) u with
  | None, _ => False
  | _, None => False
  | Some a, Some b => le_sc a b
  end. 
 
Definition PreStarPropRead (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActWriters x) -> le_sc y z
  end. 
 
Definition PreStarPropWrite (u : SUBJECT) (o : OBJECT) : Prop :=
  forall b : OBJECT,
  match fsecmat (secmat s) b, fOSC (objectSC s) o, fOSC (objectSC s) b with
  | None, _, _ => False
  | _, None, _ => False
  | _, _, None => False
  | Some x, Some y, Some z => set_In u (ActReaders x) -> le_sc z y
  end. 
 
Inductive IsUNIXOwner (u : SUBJECT) : AccessCtrlListData -> Prop :=
    IUO :
      forall a : AccessCtrlListData,
      IsUNIXOwner u
        (acldata u (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a)). 
                              
Inductive ExecuterIsOwner (u : SUBJECT) (o : OBJECT) : Prop :=
  | UNIXOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y -> IsUNIXOwner u y -> ExecuterIsOwner u o
  | ACLOwner :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      set_In u (UsersOwners y) -> ExecuterIsOwner u o
  | ACLGrp :
      forall y : AccessCtrlListData,
      facl (acl s) o = Some y ->
      (exists g : GRPNAME, set_In u (groups s g) /\ set_In g (GroupOwners y)) ->
      ExecuterIsOwner u o. 
 
Definition InFileSystem (o : OBJECT) : Prop :=
  set_In o
    (set_union OBJeq_dec (DOM OBJeq_dec (files s))
       (DOM OBJeq_dec (directories s))). 
 
End Preconditions. 
 
Hint Resolve IUO UNIXOwner ACLOwner ACLGrp. 
 
Hint Unfold PreDACRead PreDACWrite PreMAC PreStarPropRead PreStarPropWrite
  InFileSystem. *)
 
Section Chown. 
 
Variable s : SFSstate. 
 
Let NEW_GRP (old new : GRPNAME) (gs : set GRPNAME) : 
  set GRPNAME :=
  match set_In_dec GRPeq_dec old gs with
  | left _ => set_add GRPeq_dec new (set_remove GRPeq_dec old gs)
  | right _ => gs
  end. 
 
Let NEW_UO (old new : SUBJECT) (us : set SUBJECT) : 
  set SUBJECT := set_add SUBeq_dec new (set_remove SUBeq_dec old us). 
 
Let NEW (o : OBJECT) (p : SUBJECT) (g : GRPNAME) : 
  Exc AccessCtrlListData :=
  match facl (acl s) o with
  | None => None (A:=AccessCtrlListData)
  | Some y =>
      Some
        (acldata p g (UsersReaders y) (NEW_GRP (group y) g (GroupReaders y))
           (UsersWriters y) (NEW_GRP (group y) g (GroupWriters y))
           (NEW_UO (owner y) p (UsersOwners y)) (GroupOwners y))
  end. 
 
Definition chown_acl (o : OBJECT) (p : SUBJECT) (g : GRPNAME) :
  set (OBJECT * AccessCtrlListData) :=
  match facl (acl s) o, NEW o p g with
  | None, _ => acl s
  | _, None => acl s
  | Some y, Some z =>
      set_add ACLeq_dec (o, z) (set_remove ACLeq_dec (o, y) (acl s))
  end. 
 
Let t (o : OBJECT) (p : SUBJECT) (g : GRPNAME) : SFSstate :=
  mkSFS (groups s) (primaryGrp s) (subjectSC s) (AllGrp s) 
    (RootGrp s) (SecAdmGrp s) (objectSC s) (chown_acl o p g) 
    (secmat s) (files s) (directories s). 
 
Inductive chown (u : SUBJECT) (o : OBJECT) (p : SUBJECT) 
(g : GRPNAME) : SFSstate -> Prop :=
    ChownOK :
      ExecuterIsOwner s u o ->
      ~ set_In o (domsecmat (secmat s)) -> chown u o p g (t o p g). 
 
Hint Unfold chown_acl t. 
 
End Chown.