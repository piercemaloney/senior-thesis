Require Import ModelProperties. 
(* ModelProperties:
Require Export TransFunc. 
 
Section ModelProperties. 
 
Definition DACSecureState (s : SFSstate) : Prop :=
  forall (u : SUBJECT) (o : OBJECT),
  match fsecmat (secmat s) o with
  | None => True
  | Some y =>
      (set_In u (ActReaders y) -> PreDACRead s u o) /\
      (set_In u (ActWriters y) -> PreDACWrite s u o)
  end. 
 
Definition MACSecureState (s : SFSstate) : Prop :=
  forall (u : SUBJECT) (o : OBJECT),
  match fsecmat (secmat s) o, fOSC (objectSC s) o, fSSC (subjectSC s) u with
  | None, _, _ => True
  | _, None, _ => True
  | _, _, None => True
  | Some x, Some y, Some z =>
      set_In u (ActReaders x) \/ set_In u (ActWriters x) -> le_sc y z
  end. 
       
Definition SecureState (s : SFSstate) : Prop :=
  DACSecureState s /\ MACSecureState s. 
 
Definition StarProperty (s : SFSstate) : Prop :=
  forall (u : SUBJECT) (o1 o2 : OBJECT),
  match
    fsecmat (secmat s) o1, fsecmat (secmat s) o2, fOSC (objectSC s) o2,
    fOSC (objectSC s) o1
  with
  | None, _, _, _ => True
  | _, None, _, _ => True
  | _, _, None, _ => True
  | _, _, _, None => True
  | Some w, Some x, Some y, Some z =>
      set_In u (ActWriters w) -> set_In u (ActReaders x) -> le_sc y z
  end. 
 
Inductive AclChanged : AccessCtrlListData -> AccessCtrlListData -> Prop :=
  | UR :
      forall (a : AccessCtrlListData) (b c : set SUBJECT),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) b (GroupReaders a) 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata (owner a) (group a) c (GroupReaders a) 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
  | GR :
      forall (a : AccessCtrlListData) (b c : set GRPNAME),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) b 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) c 
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
  | UW :
      forall (a : AccessCtrlListData) (b c : set SUBJECT),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) b (GroupWriters a) (UsersOwners a)
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) c (GroupWriters a) (UsersOwners a)
           (GroupOwners a))
  | GW :
      forall (a : AccessCtrlListData) (b c : set GRPNAME),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) b (UsersOwners a)
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) c (UsersOwners a)
           (GroupOwners a))
  | UO :
      forall (a : AccessCtrlListData) (b c : set SUBJECT),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) b
           (GroupOwners a))
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) c
           (GroupOwners a))
  | GO :
      forall (a : AccessCtrlListData) (b c : set GRPNAME),
      b <> c ->
      AclChanged
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) 
           (UsersOwners a) b)
        (acldata (owner a) (group a) (UsersReaders a) 
           (GroupReaders a) (UsersWriters a) (GroupWriters a) 
           (UsersOwners a) c). 
 
Inductive UNIXAttrChanged :
AccessCtrlListData -> AccessCtrlListData -> Prop :=
  | Owner :
      forall (a : AccessCtrlListData) (b c : SUBJECT),
      b <> c ->
      UNIXAttrChanged
        (acldata b (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata c (group a) (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
  | Group :
      forall (a : AccessCtrlListData) (b c : GRPNAME),
      b <> c ->
      UNIXAttrChanged
        (acldata (owner a) b (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a))
        (acldata (owner a) c (UsersReaders a) (GroupReaders a)
           (UsersWriters a) (GroupWriters a) (UsersOwners a) 
           (GroupOwners a)). 
 
Inductive DACCtrlAttrHaveChanged (s t : SFSstate) (o : OBJECT) : Prop :=
  | ACL :
      forall y z : AccessCtrlListData,
      facl (acl s) o = Some y ->
      facl (acl t) o = Some z ->
      AclChanged y z -> DACCtrlAttrHaveChanged s t o
  | UNIX :
      forall y z : AccessCtrlListData,
      facl (acl s) o = Some y ->
      facl (acl t) o = Some z ->
      UNIXAttrChanged y z -> DACCtrlAttrHaveChanged s t o. 
 
Inductive SecClassChanged : SecClass -> SecClass -> Prop :=
  | Level :
      forall (a : SecClass) (b c : set CATEGORY),
      b <> c -> SecClassChanged (sclass (level a) b) (sclass (level a) c)
  | Categ :
      forall (a : SecClass) (b c : SECLEV),
      b <> c -> SecClassChanged (sclass b (categs a)) (sclass c (categs a)). 
 
Inductive MACObjCtrlAttrHaveChanged (s t : SFSstate) (o : OBJECT) : Prop :=
    SCo :
      forall x y : SecClass,
      fOSC (objectSC s) o = Some x ->
      fOSC (objectSC t) o = Some y ->
      SecClassChanged x y -> MACObjCtrlAttrHaveChanged s t o. 
 
Inductive MACSubCtrlAttrHaveChanged (s t : SFSstate) (u : SUBJECT) : Prop :=
    SCu :
      forall x y : SecClass,
      fSSC (subjectSC s) u = Some x ->
      fSSC (subjectSC t) u = Some y ->
      SecClassChanged x y -> MACSubCtrlAttrHaveChanged s t u. 
 
Definition ControlProperty (u : SUBJECT) (s t : SFSstate) : Prop :=
  (forall o : OBJECT,
   (DACCtrlAttrHaveChanged s t o -> ExecuterIsOwner s u o) /\
   (MACObjCtrlAttrHaveChanged s t o -> set_In u (groups s (SecAdmGrp s)))) /\
  (forall u0 : SUBJECT,
   MACSubCtrlAttrHaveChanged s t u0 -> set_In u (groups s (SecAdmGrp s))). 
 
Definition PreservesControlProp (s : SFSstate) (op : Operation)
  (t : SFSstate) : Prop :=
  forall u : SUBJECT, TransFunc u s op t -> ControlProperty u s t. 
 
Axiom
  WFSI1 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    (forall o : OBJECT,
     set_In o (DOM OBJeq_dec (files s)) -> ObjType o = File) ->
    TransFunc u s op t ->
    forall o : OBJECT, set_In o (DOM OBJeq_dec (files t)) -> ObjType o = File. 
 
Axiom
  WFSI2 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    (forall o : OBJECT,
     set_In o (DOM OBJeq_dec (directories s)) -> ObjType o = Directory) ->
    TransFunc u s op t ->
    forall o : OBJECT,
    set_In o (DOM OBJeq_dec (directories t)) -> ObjType o = Directory. 
 
Axiom
  WFSI3 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    DOM OBJeq_dec (acl s) =
    set_union OBJeq_dec (DOM OBJeq_dec (files s))
      (DOM OBJeq_dec (directories s)) ->
    TransFunc u s op t ->
    DOM OBJeq_dec (acl t) =
    set_union OBJeq_dec (DOM OBJeq_dec (files t))
      (DOM OBJeq_dec (directories t)). 
 
Definition FuncPre1 (s : SFSstate) : Prop :=
  (forall o : OBJECT,
   set_In o (DOM OBJeq_dec (directories s)) -> ObjType o = Directory) /\
  (forall o : OBJECT, set_In o (DOM OBJeq_dec (files s)) -> ObjType o = File) /\
  DOM OBJeq_dec (acl s) =
  set_union OBJeq_dec (DOM OBJeq_dec (files s))
    (DOM OBJeq_dec (directories s)). 
 
Axiom
  WFSI4 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    DOM OBJeq_dec (acl s) = DOM OBJeq_dec (objectSC s) ->
    TransFunc u s op t -> DOM OBJeq_dec (acl t) = DOM OBJeq_dec (objectSC t). 
 
Definition FuncPre2 (s : SFSstate) : Prop :=
  DOM OBJeq_dec (acl s) = DOM OBJeq_dec (objectSC s). 
 
Axiom
  WFSI5 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    Included (DOM OBJeq_dec (secmat s)) (DOM OBJeq_dec (acl s)) ->
    TransFunc u s op t ->
    Included (DOM OBJeq_dec (secmat t)) (DOM OBJeq_dec (acl t)). 
 
Definition FuncPre3 (s : SFSstate) : Prop :=
  Included (DOM OBJeq_dec (secmat s)) (DOM OBJeq_dec (acl s)). 
 
Axiom
  WFSI6 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC OBJeq_dec (acl s) ->
    TransFunc u s op t -> IsPARTFUNC OBJeq_dec (acl t). 
 
Definition FuncPre4 (s : SFSstate) : Prop := IsPARTFUNC OBJeq_dec (acl s). 
 
Axiom
  WFSI7 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC OBJeq_dec (secmat s) ->
    TransFunc u s op t -> IsPARTFUNC OBJeq_dec (secmat t). 
 
Definition FuncPre5 (s : SFSstate) : Prop := IsPARTFUNC OBJeq_dec (secmat s). 
 
Axiom
  WFSI8 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC OBJeq_dec (objectSC s) ->
    TransFunc u s op t -> IsPARTFUNC OBJeq_dec (objectSC t). 
 
Definition FuncPre6 (s : SFSstate) : Prop :=
  IsPARTFUNC OBJeq_dec (objectSC s). 
 
Axiom
  WFSI9 :
    forall (s : SFSstate) (op : Operation) (t : SFSstate) (u : SUBJECT),
    IsPARTFUNC SUBeq_dec (subjectSC s) ->
    TransFunc u s op t -> IsPARTFUNC SUBeq_dec (subjectSC t). 
 
Definition FuncPre7 (s : SFSstate) : Prop :=
  IsPARTFUNC SUBeq_dec (subjectSC s). 
 
End ModelProperties. 
 
Hint Unfold SecureState DACSecureState MACSecureState ControlProperty
  PreservesControlProp. 
 
Hint Resolve UR GR UW GW UO GO Owner Group Level Categ. 
Hint Resolve WFSI1 WFSI2 WFSI3 WFSI4 WFSI5 WFSI6 WFSI7 WFSI8 WFSI9. *)
Require Import AuxiliaryLemmas. 
(* AuxiliaryLemmas:
Require Import ModelProperties.

Ltac OpDontChangeStPSS :=
  intros s t Sub SS TF; inversion TF;
   match goal with
   | id:(s = t) |- _ => rewrite <- id; auto
   end.
 
Ltac OpDontChangeStPSP :=
  intros s t Sub SP TF;  
   inversion TF; match goal with
                 | id:(s = t) |- _ => rewrite <- id; auto
                 end. 

Ltac StartPSS := intros s t Sub SS TF; inversion TF. 

Ltac BreakSS :=
  match goal with
  | SS:(SecureState _) |- _ =>
      unfold SecureState in SS; elim SS; intros DAC MAC
  end. 

Ltac StartPSP := intros s t Sub SP TF; inversion TF. 
  
Lemma ReadWriteImpRead :
 forall s : SFSstate,
 DACSecureState s ->
 forall (u : SUBJECT) (o : OBJECT),
 match fsecmat (secmat s) o with
 | Some y => set_In u (ActReaders y) -> PreDACRead s u o
 | None => True
 end. 
 
Lemma ReadWriteImpWrite :
 forall s : SFSstate,
 DACSecureState s ->
 forall (u : SUBJECT) (o : OBJECT),
 match fsecmat (secmat s) o with
 | Some y => set_In u (ActWriters y) -> PreDACWrite s u o
 | None => True
 end. 
 
Lemma TwoImpLeft :
 forall (s : SFSstate) (u : SUBJECT),
 (forall rw : ReadersWriters,
  set_In rw (ransecmat (secmat s)) ->
  ~ set_In u (ActReaders rw) /\ ~ set_In u (ActWriters rw)) ->
 forall rw : ReadersWriters,
 set_In rw (ransecmat (secmat s)) -> ~ set_In u (ActReaders rw). 
 
Lemma TwoImpRight :
 forall (s : SFSstate) (u : SUBJECT),
 (forall rw : ReadersWriters,
  set_In rw (ransecmat (secmat s)) ->
  ~ set_In u (ActReaders rw) /\ ~ set_In u (ActWriters rw)) ->
 forall rw : ReadersWriters,
 set_In rw (ransecmat (secmat s)) -> ~ set_In u (ActWriters rw). 
 
Lemma UniqNames :
 forall (s : SFSstate) (o : OBJECT),
 FuncPre1 s ->
 ~ set_In (ObjName o, File) (domf (files s)) ->
 ~ set_In (ObjName o, Directory) (domd (directories s)) ->
 ~ set_In o (DOM OBJeq_dec (acl s)). 
 
Hint Resolve UniqNames. 
 
Lemma eq_scIMPLYle_sc : forall a b : SecClass, eq_sc a b -> le_sc a b. 
 
Lemma NotInDOMIsUndef2 :
 forall (s : SFSstate) (o1 o2 : OBJECT),
 ~ set_In o1 (domsecmat (secmat s)) ->
 o1 = o2 -> None = fsecmat (secmat s) o2. 
 
Lemma NotInDOMIsUndef3 :
 forall (s : SFSstate) (p : OBJNAME) (o : OBJECT),
 FuncPre1 s ->
 FuncPre3 s ->
 ~ set_In (p, File) (domf (files s)) ->
 ~ set_In (p, Directory) (domd (directories s)) ->
 p = ObjName o -> None = fsecmat (secmat s) o. 
 
Lemma EqfOSC6 :
 forall (s : SFSstate) (o1 o2 : OBJECT) (sc : SecClass),
 o1 <> o2 -> fOSC (objectSC s) o2 = fOSC (chobjsc_SC s o1 sc) o2. 
 
Lemma EqfOSC5 :
 forall (s : SFSstate) (o : OBJECT) (p : OBJNAME),
 FuncPre1 s ->
 FuncPre2 s ->
 ~ set_In (p, File) (domf (files s)) ->
 ~ set_In (p, Directory) (domd (directories s)) ->
 p = ObjName o -> None = fOSC (objectSC s) o. 
 
Lemma EqfOSC1 :
 forall (s : SFSstate) (o : OBJECT) (p : OBJNAME) (u : SUBJECT),
 p <> ObjName o -> fOSC (objectSC s) o = fOSC (create_oSC s u p) o. 
 
Lemma EqfOSC2 :
 forall (s : SFSstate) (o : OBJECT) (p : OBJNAME) (u : SUBJECT),
 p <> ObjName o -> fOSC (objectSC s) o = fOSC (mkdir_oSC s u p) o. 
 
Lemma EqfOSC3 :
 forall (s : SFSstate) (o1 o2 : OBJECT),
 o1 <> o2 -> fOSC (objectSC s) o2 = fOSC (unlink_oSC s o1) o2. 
 
Lemma Eqfacl1 :
 forall (s : SFSstate) (o : OBJECT) (p : OBJNAME) (u : SUBJECT)
   (perms : PERMS),
 p <> ObjName o -> facl (acl s) o = facl (create_acl s u p perms) o. 
 
Lemma Eqfacl2 :
 forall (s : SFSstate) (o : OBJECT) (p : OBJNAME) (u : SUBJECT)
   (perms : PERMS),
 p <> ObjName o -> facl (acl s) o = facl (mkdir_acl s u p perms) o. 
 
Lemma Eqfacl3 :
 forall (s : SFSstate) (o1 o2 : OBJECT),
 o1 <> o2 -> facl (acl s) o2 = facl (unlink_acl s o1) o2. 
 
Lemma Eqfacl4 :
 forall (s : SFSstate) (o : OBJECT) (y z : AccessCtrlListData),
 FuncPre4 s ->
 facl (acl s) o = Some y -> facl (rmdir_acl s o) o = Some z -> False. 
 
Lemma Eqfacl5 :
 forall (s : SFSstate) (o : OBJECT) (y z : AccessCtrlListData),
 FuncPre4 s ->
 facl (acl s) o = Some y -> facl (unlink_acl s o) o = Some z -> False. 
 
Lemma EqfOSC4 :
 forall (s : SFSstate) (o : OBJECT) (y z : SecClass),
 FuncPre6 s ->
 fOSC (objectSC s) o = Some y -> fOSC (rmdir_oSC s o) o = Some z -> False. 
 
Lemma EqfOSC7 :
 forall (s : SFSstate) (o : OBJECT) (y z : SecClass),
 FuncPre6 s ->
 fOSC (objectSC s) o = Some y -> fOSC (unlink_oSC s o) o = Some z -> False. 
 
Lemma NoDACChange :
 forall (s : SFSstate) (o : OBJECT) (SSC : set (SUBJECT * SecClass))
   (OSC : set (OBJECT * SecClass)) (FILES : set (OBJECT * FILECONT))
   (DIRECTS : set (OBJECT * DIRCONT)) (SM : set (OBJECT * ReadersWriters)),
 ~
 DACCtrlAttrHaveChanged s
   (mkSFS (groups s) (primaryGrp s) SSC (AllGrp s) 
      (RootGrp s) (SecAdmGrp s) OSC (acl s) SM FILES DIRECTS) o. 
 
Lemma NoDACChange2 :
 forall (s : SFSstate) (o : OBJECT), ~ DACCtrlAttrHaveChanged s s o. 
 
Lemma NoMACObjChange :
 forall (s : SFSstate) (o : OBJECT) (FILES : set (OBJECT * FILECONT))
   (DIRECTS : set (OBJECT * DIRCONT))
   (ACL : set (OBJECT * AccessCtrlListData)) (SSC : set (SUBJECT * SecClass))
   (SM : set (OBJECT * ReadersWriters)),
 ~
 MACObjCtrlAttrHaveChanged s
   (mkSFS (groups s) (primaryGrp s) SSC (AllGrp s) 
      (RootGrp s) (SecAdmGrp s) (objectSC s) ACL SM FILES DIRECTS) o. 
 
Lemma NoMACObjChange2 :
 forall (s : SFSstate) (o : OBJECT), ~ MACObjCtrlAttrHaveChanged s s o. 
 
Lemma NoMACSubChange :
 forall (s : SFSstate) (u : SUBJECT)
   (ACL : set (OBJECT * AccessCtrlListData)) (OSC : set (OBJECT * SecClass))
   (FILES : set (OBJECT * FILECONT)) (DIRECTS : set (OBJECT * DIRCONT))
   (SM : set (OBJECT * ReadersWriters)),
 ~
 MACSubCtrlAttrHaveChanged s
   (mkSFS (groups s) (primaryGrp s) (subjectSC s) (AllGrp s) 
      (RootGrp s) (SecAdmGrp s) OSC ACL SM FILES DIRECTS) u. 
 
Lemma NoMACSubChange2 :
 forall (s : SFSstate) (u : SUBJECT), ~ MACSubCtrlAttrHaveChanged s s u. 
 
Lemma eq_scSym : forall a b : SecClass, eq_sc a b -> eq_sc b a. 
 
Lemma ChsubscPSS1 :
 forall (s : SFSstate) (u : SUBJECT) (y : ReadersWriters),
 (forall rw : ReadersWriters,
  ~ set_In u (ActReaders rw) /\ ~ set_In u (ActWriters rw)) ->
 ~ (set_In u (ActReaders y) \/ set_In u (ActWriters y)). 
 
Lemma EqfSSC1 :
 forall (s : SFSstate) (u u0 : SUBJECT) (sc : SecClass),
 u <> u0 -> fSSC (subjectSC s) u0 = fSSC (chsubsc_SC s u sc) u0. 
 
Lemma Close_smCorr :
 forall (s : SFSstate) (Sub : SUBJECT) (o : OBJECT),
 FuncPre5 s ->
 match fsecmat (secmat s) o with
 | Some y => set_In Sub (set_union SUBeq_dec (ActReaders y) (ActWriters y))
 | None => False
 end ->
 match fsecmat (close_sm s Sub o) o with
 | None => True
 | Some y => ~ set_In Sub (ActReaders y) /\ ~ set_In Sub (ActWriters y)
 end. 
 
Lemma Close_smCorr2 :
 forall (s : SFSstate) (Sub u0 : SUBJECT) (o : OBJECT),
 FuncPre5 s ->
 match fsecmat (secmat s) o with
 | Some y => set_In Sub (set_union SUBeq_dec (ActReaders y) (ActWriters y))
 | None => False
 end ->
 match fsecmat (close_sm s Sub o) o, fsecmat (secmat s) o with
 | _, None => False
 | None, Some z => True
 | Some y, Some z =>
     (set_In u0 (ActReaders y) -> set_In u0 (ActReaders z)) /\
     (set_In u0 (ActWriters y) -> set_In u0 (ActWriters z))
 end. 
 
Lemma Eqfsecmat1 :
 forall (s : SFSstate) (o1 o2 : OBJECT) (u : SUBJECT),
 o1 <> o2 -> fsecmat (secmat s) o2 = fsecmat (close_sm s u o1) o2. 
 
Lemma Close_smCorr3 :
 forall (s : SFSstate) (Sub : SUBJECT) (o : OBJECT),
 fsecmat (secmat s) o = None -> fsecmat (close_sm s Sub o) o = None. 
 
Lemma OwnerClose_smCorr2 :
 forall (s : SFSstate) (Sub u0 : SUBJECT) (o : OBJECT),
 FuncPre5 s ->
 match fsecmat (secmat s) o with
 | Some y => set_In Sub (set_union SUBeq_dec (ActReaders y) (ActWriters y))
 | None => False
 end ->
 match fsecmat (ownerclose_sm s Sub o) o, fsecmat (secmat s) o with
 | _, None => False
 | None, Some z => True
 | Some y, Some z =>
     (set_In u0 (ActReaders y) -> set_In u0 (ActReaders z)) /\
     (set_In u0 (ActWriters y) -> set_In u0 (ActWriters z))
 end. 
 
Lemma Eqfsecmat2 :
 forall (s : SFSstate) (o1 o2 : OBJECT) (u : SUBJECT),
 o1 <> o2 -> fsecmat (secmat s) o2 = fsecmat (ownerclose_sm s u o1) o2. 
 
Lemma OwnerClose_smCorr3 :
 forall (s : SFSstate) (Sub : SUBJECT) (o : OBJECT),
 fsecmat (secmat s) o = None -> fsecmat (ownerclose_sm s Sub o) o = None. 
 
Lemma Open_smCorr3 :
 forall (s : SFSstate) (Sub : SUBJECT) (o : OBJECT) (m : MODE),
 FuncPre5 s ->
 fsecmat (open_sm s Sub o m) o = None -> fsecmat (secmat s) o = None. 
 
Lemma Open_smCorr21 :
 forall (s : SFSstate) (Sub u0 : SUBJECT) (o : OBJECT) (m : MODE),
 Sub <> u0 ->
 FuncPre5 s ->
 match fsecmat (open_sm s Sub o READ) o, fsecmat (secmat s) o with
 | Some y, None =>
     ActReaders y = set_add SUBeq_dec Sub (empty_set SUBJECT) /\
     ActWriters y = empty_set SUBJECT
 | None, _ => False
 | Some y, Some z =>
     (set_In u0 (ActReaders y) -> set_In u0 (ActReaders z)) /\
     (set_In u0 (ActWriters y) -> set_In u0 (ActWriters z))
 end. 
 
Lemma Open_smCorr22 :
 forall (s : SFSstate) (Sub u0 : SUBJECT) (o : OBJECT) (m : MODE),
 Sub <> u0 ->
 FuncPre5 s ->
 match fsecmat (open_sm s Sub o WRITE) o, fsecmat (secmat s) o with
 | Some y, None =>
     ActWriters y = set_add SUBeq_dec Sub (empty_set SUBJECT) /\
     ActReaders y = empty_set SUBJECT
 | None, _ => False
 | Some y, Some z =>
     (set_In u0 (ActReaders y) -> set_In u0 (ActReaders z)) /\
     (set_In u0 (ActWriters y) -> set_In u0 (ActWriters z))
 end. 
 
Lemma Eqfsecmat3 :
 forall (s : SFSstate) (o1 o2 : OBJECT) (u : SUBJECT) (m : MODE),
 o1 <> o2 -> fsecmat (secmat s) o2 = fsecmat (open_sm s u o1 m) o2. 
 
Lemma Chobjsc_Corr :
 forall (s : SFSstate) (o : OBJECT) (sc : SecClass),
 FuncPre6 s ->
 (fOSC (objectSC s) o = None <-> fOSC (chobjsc_SC s o sc) o = None). 
 
Lemma Aux1 :
 forall y : SecClass, ~ (Some y = None <-> None = None :>option SecClass). 
 
Lemma Chsubsc_Corr :
 forall (s : SFSstate) (u : SUBJECT) (sc : SecClass),
 FuncPre7 s ->
 (fSSC (subjectSC s) u = None <-> fSSC (chsubsc_SC s u sc) u = None). 
 
Lemma Open_smCorr31 :
 forall (s : SFSstate) (Sub u0 : SUBJECT) (o : OBJECT) (m : MODE),
 FuncPre5 s ->
 match fsecmat (open_sm s Sub o READ) o, fsecmat (secmat s) o with
 | Some y, None =>
     ActReaders y = set_add SUBeq_dec Sub (empty_set SUBJECT) /\
     ActWriters y = empty_set SUBJECT
 | None, _ => False
 | Some y, Some z => set_In u0 (ActWriters y) -> set_In u0 (ActWriters z)
 end. 
 
Lemma Open_smCorr32 :
 forall (s : SFSstate) (Sub u0 : SUBJECT) (o : OBJECT) (m : MODE),
 FuncPre5 s ->
 match fsecmat (open_sm s Sub o WRITE) o, fsecmat (secmat s) o with
 | Some y, None =>
     ActWriters y = set_add SUBeq_dec Sub (empty_set SUBJECT) /\
     ActReaders y = empty_set SUBJECT
 | None, _ => False
 | Some y, Some z => set_In u0 (ActReaders y) -> set_In u0 (ActReaders z)
 end. 
 
Hint Resolve eq_scIMPLYle_sc eq_scSym Eqfsecmat1 Close_smCorr3 TwoImpLeft
  TwoImpRight EqfOSC1 ChsubscPSS1 Eqfsecmat2 NoMACObjChange NoDACChange
  NoMACSubChange EqfOSC6 Eqfacl1 Eqfacl2 Eqfacl3 EqfOSC1 EqfOSC2 EqfOSC3 Aux1
  NotInDOMIsUndef2 Eqfacl4 EqfOSC4 EqfOSC5 EqfSSC1 OwnerClose_smCorr3
  Open_smCorr3 Eqfsecmat3 Chobjsc_Corr NoMACObjChange2 NoDACChange2
  NoMACSubChange2 Chsubsc_Corr NotInDOMIsUndef3 Eqfacl5 EqfOSC7. *)
 
Section sscstatIsSecure. 
 
Lemma SscstatPSS :
 forall (s t : SFSstate) (u : SUBJECT),
 SecureState s -> TransFunc u s Sscstat t -> SecureState t. 
OpDontChangeStPSS. 
Qed. 
 
Lemma SscstatPSP :
 forall (s t : SFSstate) (u : SUBJECT),
 StarProperty s -> TransFunc u s Sscstat t -> StarProperty t. 
OpDontChangeStPSP. 
Qed. 
 
Lemma SscstatPCP : forall s t : SFSstate, PreservesControlProp s Sscstat t. 
intros; unfold PreservesControlProp in |- *; intros Sub TF; inversion TF;
 unfold ControlProperty in |- *. 
split. 
intros. 
split. 
intro. 
absurd (DACCtrlAttrHaveChanged t t o); auto. 
 
intro; absurd (MACObjCtrlAttrHaveChanged t t o); auto. 
 
intros; absurd (MACSubCtrlAttrHaveChanged t t u0); auto. 
 
Qed. 
 
End sscstatIsSecure. 
 
Hint Resolve SscstatPSS SscstatPSP SscstatPCP. 