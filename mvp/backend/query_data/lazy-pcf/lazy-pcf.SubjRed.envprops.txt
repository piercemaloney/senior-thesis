
Require Import syntax.
(* syntax:
Inductive ty : Set :=
  | nat_ty : ty 
  | bool_ty : ty 
  | arr : ty -> ty -> ty.   

Inductive vari : Set :=
    x : nat -> vari.

Inductive tm : Set :=
  | o : tm 
  | ttt : tm 
  | fff : tm 
  | abs : vari -> ty -> tm -> tm 
  | appl : tm -> tm -> tm 
  | cond : tm -> tm -> tm -> tm 
  | var : vari -> tm 
  | succ : tm -> tm 
  | prd : tm -> tm 
  | is_o : tm -> tm 
  | Fix : vari -> ty -> tm -> tm 
  | clos : tm -> vari -> ty -> tm -> tm. *)
Require Import List.
Require Import utils.
(* utils:
Require Import syntax.

Definition valu (v : vari) :=
  match v return nat with
  | x n =>   n
  end.

Goal forall m n : nat, x m = x n :>vari -> m = n :>nat.
intros m n Q.  
replace m with (valu (x m)).
rewrite Q.
simpl in |- *; reflexivity.
simpl in |- *; reflexivity.
Save vari_nat.

Definition Rator_ty (t : ty) :=
  match t with
  | nat_ty => t
  | bool_ty => t
  | arr t0 _ => t0
  end.
Definition Rand_ty (t : ty) :=
  match t with
  | nat_ty => t
  | bool_ty => t
  | arr _ t0 => t0
  end.
Goal
forall s1 t1 s2 t2 : ty,
arr s1 t1 = arr s2 t2 :>ty -> s1 = s2 :>ty /\ t1 = t2 :>ty.
intros s1 t1 s2 t2 Q.
split.
change (Rator_ty (arr s1 t1) = Rator_ty (arr s2 t2) :>ty) in |- *.
apply (f_equal Rator_ty). assumption.
change (Rand_ty (arr s1 t1) = Rand_ty (arr s2 t2) :>ty) in |- *.
apply (f_equal Rand_ty); assumption.
Save subty_eq.

Definition is_nat (t : ty) :=
  match t with
  | nat_ty => True
  | bool_ty => False
  | arr _ _ => False
  end.
Definition is_bool (t : ty) :=
  match t with
  | nat_ty => False
  | bool_ty => True
  | arr _ _ => False
  end.
Definition is_arr (t : ty) :=
  match t with
  | nat_ty => False
  | bool_ty => False
  | arr _ _ => True
  end.

Goal nat_ty <> bool_ty :>ty.
red in |- *; intro H; change (is_nat bool_ty) in |- *; elim H; exact I.
Save nat_not_bool.

Goal forall t s : ty, nat_ty <> arr t s :>ty.
red in |- *; intros t s H; change (is_nat (arr t s)) in |- *; elim H; exact I.
Save nat_not_arr.

Goal forall t s : ty, bool_ty <> arr t s :>ty.
red in |- *; intros t s H; change (is_bool (arr t s)) in |- *; elim H;
 exact I.
Save bool_not_arr.

	Goal forall m n : nat, m = n \/ m <> n.

	simple induction m.
	simple induction n.
	left; reflexivity.
	intros; right; apply O_S.
	intros y H n; elim n.
	right; red in |- *; intro; apply (O_S y); symmetry  in |- *; assumption.
	intros y0 I.
	elim (H y0); intro E. 
	left; elim E; reflexivity.
	right; red in |- *; intro.
	apply E; apply eq_add_S; assumption.
	Save Xmidnat.

Goal forall v w : vari, v = w \/ v <> w.

simple induction v.
simple induction w.
intro. 
specialize (Xmidnat n n0).
simple induction 1.
intro eq; left; elim eq; reflexivity.
intro neq; right; red in |- *; intro; apply neq.
apply vari_nat; assumption.
Save Xmidvar.

Goal forall A B C : Prop, (IF A then B else C) -> A -> B.
unfold IF_then_else in |- *; simple induction 1.
simple induction 1; intros; assumption.
simple induction 1; intros; absurd A; assumption.
Save If_T.

Goal forall A B C : Prop, (IF A then B else C) -> ~ A -> C.
unfold IF_then_else in |- *; simple induction 1.
simple induction 1; intros; absurd A; assumption.
simple induction 1; intros; assumption.
Save If_F.

Goal forall A B C : Prop, A -> B -> IF A then B else C.
unfold IF_then_else in |- *; intros.
left; split; assumption.
Save T_If.

Goal forall A B C : Prop, ~ A -> C -> IF A then B else C.
unfold IF_then_else in |- *; intros.
right; split; assumption.
Save F_If.

Goal
forall A B C D : Prop,
(IF A then B else C) -> IF A then B else (IF A then D else C).

unfold IF_then_else in |- *; simple induction 1.
intro T; left; assumption.
intro F; right; elim F; intros; split.
assumption.
right; split; assumption.
Save IfA_IfAIfA.

Goal forall A B C D : Prop, A \/ D /\ C -> (D -> A \/ B) -> A \/ B /\ C.

intros A B C D A1 A2.
elim A1.
intro; left; assumption.
simple induction 1; intros DH CH.
specialize A2 with (1 := DH); induction A2.
left; assumption.
right; split; assumption.
Save AABC_ABC. *)
Require Import freevars.
(* freevars:
Require Import syntax.
Require Import utils.

Inductive FV (z : vari) : tm -> Prop :=
  | FV_abs :
      forall e : tm,
      FV z e -> forall v : vari, z <> v -> forall t : ty, FV z (abs v t e)
  | FV_fix :
      forall e : tm,
      FV z e -> forall v : vari, z <> v -> forall t : ty, FV z (Fix v t e)
  | FV_appl1 : forall e_1 e_2 : tm, FV z e_1 -> FV z (appl e_1 e_2)
  | FV_appl2 : forall e_1 e_2 : tm, FV z e_2 -> FV z (appl e_1 e_2)
  | FV_cond1 : forall e_1 e_2 e_3 : tm, FV z e_1 -> FV z (cond e_1 e_2 e_3)
  | FV_cond2 : forall e_1 e_2 e_3 : tm, FV z e_2 -> FV z (cond e_1 e_2 e_3)
  | FV_cond3 : forall e_1 e_2 e_3 : tm, FV z e_3 -> FV z (cond e_1 e_2 e_3)
  | FV_var : forall v : vari, z = v -> FV z (var v)
  | FV_succ : forall e : tm, FV z e -> FV z (succ e)
  | FV_prd : forall e : tm, FV z e -> FV z (prd e)
  | FV_is_o : forall e : tm, FV z e -> FV z (is_o e)
  | FV_closa :
      forall (v : vari) (t : ty) (e e_1 : tm),
      FV z e_1 -> FV z (clos e v t e_1)
  | FV_closb :
      forall (v : vari) (t : ty) (e e_1 : tm),
      FV z e -> z <> v -> FV z (clos e v t e_1).

Goal
forall (x v : vari) (t : ty) (e : tm),
~ FV x (abs v t e) -> x = v \/ ~ FV x e.
intros.
specialize (Xmidvar x v); simple induction 1; intro A.
left; assumption.
right; red in |- *; intro; apply H; apply FV_abs; assumption.
Save notFV_abs.

Goal
forall (v : vari) (e1 e2 : tm), ~ FV v (appl e1 e2) -> ~ FV v e1 /\ ~ FV v e2.
intros v e1 e2 N.
split.
red in |- *; intro; apply N; apply FV_appl1; assumption.
red in |- *; intro; apply N; apply FV_appl2; assumption.
Save notFV_appl.

Goal
forall (v : vari) (e1 e2 e3 : tm),
~ FV v (cond e1 e2 e3) -> ~ FV v e1 /\ ~ FV v e2 /\ ~ FV v e3.
intros v e1 e2 e3 N.
split.
red in |- *; intro; apply N; apply FV_cond1; assumption.
split.
red in |- *; intro; apply N; apply FV_cond2; assumption.
red in |- *; intro; apply N; apply FV_cond3; assumption.
Save notFV_cond.

Goal forall v x : vari, ~ FV v (var x) -> v <> x.
intros v x N.
red in |- *; intro; apply N; apply FV_var; assumption.
Save notFV_var.

Goal forall (v : vari) (e : tm), ~ FV v (succ e) -> ~ FV v e.
intros v e N.
red in |- *; intro; apply N; apply FV_succ; assumption.
Save notFV_succ.

Goal forall (v : vari) (e : tm), ~ FV v (prd e) -> ~ FV v e.
intros v e N.
red in |- *; intro; apply N; apply FV_prd; assumption.
Save notFV_prd.

Goal forall (v : vari) (e : tm), ~ FV v (is_o e) -> ~ FV v e.
intros v e N.
red in |- *; intro; apply N; apply FV_is_o; assumption.
Save notFV_is_o.

Goal
forall (x v : vari) (t : ty) (e : tm),
~ FV x (Fix v t e) -> x = v \/ ~ FV x e.
intros.
specialize (Xmidvar x v); simple induction 1; intro A.
left; assumption.
right; red in |- *; intro; apply H; apply FV_fix; assumption.
Save notFV_fix.

Goal
forall (x v : vari) (t : ty) (e a : tm),
~ FV x (clos e v t a) -> ~ FV x a /\ (x = v \/ ~ FV x e).
intros.
split.
red in |- *; intro; apply H; apply FV_closa; assumption.
specialize (Xmidvar x v); simple induction 1; intro A.
left; assumption.
right; red in |- *; intro; apply H; apply FV_closb; assumption.
Save notFV_clos.

Definition fv (v : vari) (e : tm) :=
  match e return Prop with
  | o =>
      	 False
       
  | ttt => False
       
  | fff => False
       
  | abs y s e => FV v e /\ v <> y
                            
  | appl e1 e2 => FV v e1 \/ FV v e2 
                  
  | cond e1 e2 e3 => FV v e1 \/ FV v e2 \/ FV v e3 
                                	
  | var y => v = y
             	
  | succ n => FV v n
      	
  | prd n => FV v n
      	
  | is_o n => FV v n
      	
  | Fix y s e => FV v e /\ v <> y
                           
  | clos e y s e1 => FV v e1 \/ FV v e /\ v <> y
  end.

Goal forall (v : vari) (e : tm), FV v e -> fv v e.

simple induction 1; simpl in |- *; intros.
split; assumption.
split; assumption.
left; assumption.
right; assumption.
left; assumption.
right; left; assumption.
right; right; assumption.
assumption.
assumption.
assumption.
assumption.
left; assumption.
right; split; assumption.
Save FV_fv.

Goal forall v : vari, ~ FV v o.
intro v; red in |- *; intro F.
change (fv v o) in |- *.
apply FV_fv; assumption.
Save inv_FV_o.

Goal forall v : vari, ~ FV v ttt.
intro v; red in |- *; intro F.
change (fv v ttt) in |- *.
apply FV_fv; assumption.
Save inv_FV_ttt.

Goal forall v : vari, ~ FV v fff.
intro v; red in |- *; intro F.
change (fv v fff) in |- *.
apply FV_fv; assumption.
Save inv_FV_fff.

Goal
forall (v x : vari) (t : ty) (e : tm), FV v (abs x t e) -> FV v e /\ v <> x.
intros v x t e F.
change (fv v (abs x t e)) in |- *.
apply FV_fv; assumption.
Save inv_FV_abs.

Goal
forall (v x : vari) (t : ty) (e : tm), FV v (Fix x t e) -> FV v e /\ v <> x.
intros v x t e F.
change (fv v (Fix x t e)) in |- *.
apply FV_fv; assumption.
Save inv_FV_fix.

Goal forall (v : vari) (e1 e2 : tm), FV v (appl e1 e2) -> FV v e1 \/ FV v e2.
intros v e1 e2 F.
change (fv v (appl e1 e2)) in |- *.
apply FV_fv; assumption.
Save inv_FV_appl.

Goal
forall (v : vari) (e1 e2 e3 : tm),
FV v (cond e1 e2 e3) -> FV v e1 \/ FV v e2 \/ FV v e3.
intros v e1 e2 e3 F.
change (fv v (cond e1 e2 e3)) in |- *.
apply FV_fv; assumption.
Save inv_FV_cond.

Goal forall v x : vari, FV v (var x) -> v = x.
intros v x F.
change (fv v (var x)) in |- *.
apply FV_fv; assumption.
Save inv_FV_var.

Goal forall (v : vari) (e : tm), FV v (succ e) -> FV v e.
intros v e F.
change (fv v (succ e)) in |- *.
apply FV_fv; assumption.
Save inv_FV_succ.

Goal forall (v : vari) (e : tm), FV v (prd e) -> FV v e.
intros v e F.
change (fv v (prd e)) in |- *.
apply FV_fv; assumption.
Save inv_FV_prd.

Goal forall (v : vari) (e : tm), FV v (is_o e) -> FV v e.
intros v e F.
change (fv v (is_o e)) in |- *.
apply FV_fv; assumption.
Save inv_FV_is_o.

Goal
forall (v x : vari) (t : ty) (e a : tm),
FV v (clos e x t a) -> FV v a \/ FV v e /\ v <> x.
intros v x t e a F.
change (fv v (clos e x t a)) in |- *.
apply FV_fv; assumption.
Save inv_FV_clos. *)
Require Import typecheck.
(* typecheck:
Require Import environments.
Require Import List.

Require Import syntax.

Inductive TC : ty_env -> tm -> ty -> Prop :=
  | TC_o : forall H : ty_env, TC H o nat_ty
  | TC_ttt : forall H : ty_env, TC H ttt bool_ty
  | TC_fff : forall H : ty_env, TC H fff bool_ty
  | TC_succ :
      forall (H : ty_env) (e : tm), TC H e nat_ty -> TC H (succ e) nat_ty
  | TC_prd :
      forall (H : ty_env) (e : tm), TC H e nat_ty -> TC H (prd e) nat_ty
  | TC_is_o :
      forall (H : ty_env) (e : tm), TC H e nat_ty -> TC H (is_o e) bool_ty
  | TC_var :
      forall (H : ty_env) (v : vari) (t : ty), mapsto v t H -> TC H (var v) t
  | TC_appl :
      forall (H : ty_env) (e e1 : tm) (s t : ty),
      TC H e (arr s t) -> TC H e1 s -> TC H (appl e e1) t
  | TC_abs :
      forall (H : ty_env) (v : vari) (e : tm) (s t : ty),
      TC ((v, s) :: H) e t -> TC H (abs v s e) (arr s t)
  | TC_cond :
      forall (H : ty_env) (e1 e2 e3 : tm) (t : ty),
      TC H e1 bool_ty -> TC H e2 t -> TC H e3 t -> TC H (cond e1 e2 e3) t
  | TC_fix :
      forall (H : ty_env) (e : tm) (t : ty) (v : vari),
      TC ((v, t) :: H) e t -> TC H (Fix v t e) t
  | TC_clos :
      forall (H : ty_env) (e e1 : tm) (s t : ty) (v : vari),
      TC H e1 s -> TC ((v, s) :: H) e t -> TC H (clos e v s e1) t.
                                
Definition tc (H : ty_env) (e : tm) (t : ty) :=
  match e return Prop with
  | o =>
      	 t = nat_ty
       
  | ttt => t = bool_ty
       
  | fff => t = bool_ty
       
  | abs v s e =>
      exists r : ty, t = arr s r /\ TC ((v, s) :: H) e r
       
  | appl e1 e2 =>
      exists s : ty, TC H e1 (arr s t) /\ TC H e2 s
      
  | cond e1 e2 e3 => TC H e1 bool_ty /\ TC H e2 t /\ TC H e3 t
                                        	
  | var v => mapsto v t H
      	
  | succ n => t = nat_ty /\ TC H n nat_ty
              	
  | prd n => t = nat_ty /\ TC H n nat_ty
             	
  | is_o n => t = bool_ty /\ TC H n nat_ty
              
  | Fix v s e1 => s = t /\ TC ((v, s) :: H) e1 t
      
  | clos e v s e1 => TC H e1 s /\ TC ((v, s) :: H) e t
  end.

Goal forall (H : ty_env) (e : tm) (t : ty), TC H e t -> tc H e t.
simple induction 1; simpl in |- *; intros.
reflexivity.
reflexivity.
reflexivity.
split; reflexivity || assumption.
split; reflexivity || assumption.
split; reflexivity || assumption.
assumption.
exists s; split; assumption.
exists t0; split; reflexivity || assumption.
split; assumption || split; assumption.
split; reflexivity || assumption.
split; assumption.
Save TC_tc.

Goal forall (H : ty_env) (t : ty), TC H o t -> t = nat_ty.
 intros H t HTC.  change (tc H o t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_o.

Goal forall (H : ty_env) (t : ty), TC H ttt t -> t = bool_ty.
 intros H t HTC.  change (tc H ttt t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_ttt.

Goal forall (H : ty_env) (t : ty), TC H fff t -> t = bool_ty.
 intros H t HTC.  change (tc H fff t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_fff.

Goal
forall (H : ty_env) (t : ty) (e0 : tm),
TC H (prd e0) t -> t = nat_ty /\ TC H e0 nat_ty.
 intros H t e0 HTC.  change (tc H (prd e0) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_prd.

Goal
forall (H : ty_env) (t : ty) (e0 : tm),
TC H (succ e0) t -> t = nat_ty /\ TC H e0 nat_ty.
 intros H t e0 HTC.  change (tc H (succ e0) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_succ.

Goal
forall (H : ty_env) (t : ty) (e0 : tm),
TC H (is_o e0) t -> t = bool_ty /\ TC H e0 nat_ty.
 intros H t e0 HTC.  change (tc H (is_o e0) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_is_o.

Goal forall (H : ty_env) (t : ty) (v : vari), TC H (var v) t -> mapsto v t H.
 intros H t v HTC.  change (tc H (var v) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_var.

Goal
forall (H : ty_env) (t : ty) (e1 e2 : tm),
TC H (appl e1 e2) t -> exists s : ty, TC H e1 (arr s t) /\ TC H e2 s.
 intros H t e1 e2 HTC.  change (tc H (appl e1 e2) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_appl.

Goal
forall (H : ty_env) (t s : ty) (v : vari) (e : tm),
TC H (abs v s e) t -> exists r : ty, t = arr s r /\ TC ((v, s) :: H) e r.
 intros H t s v e HTC.  change (tc H (abs v s e) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_abs.

Goal
forall (H : ty_env) (t : ty) (e1 e2 e3 : tm),
TC H (cond e1 e2 e3) t -> TC H e1 bool_ty /\ TC H e2 t /\ TC H e3 t.
 intros H t e1 e2 e3 HTC.  change (tc H (cond e1 e2 e3) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_cond.

Goal
forall (H : ty_env) (s t : ty) (e : tm) (v : vari),
TC H (Fix v s e) t -> s = t /\ TC ((v, s) :: H) e t.
 intros H s t e v HTC.  change (tc H (Fix v s e) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_fix.

Goal
forall (H : ty_env) (t s : ty) (e e1 : tm) (v : vari),
TC H (clos e v s e1) t -> TC H e1 s /\ TC ((v, s) :: H) e t.
 intros H t s e e1 v HTC.  change (tc H (clos e v s e1) t) in |- *.
 apply TC_tc; assumption.
Save inv_TC_clos. *)

Require Import environments.
(* environments:
Require Import syntax.

Require Import List.

Fixpoint member (A : Set) (b : A) (l : list A) {struct l} : Prop :=
  match l with
  | nil => False
  | a :: m => a = b \/ member A b m
  end.

Definition VT := (vari * ty)%type.
Definition ty_env := list VT.

Definition VTT := (VT * tm)%type.
Definition OS_env := list VTT.

Definition mapsto (indx : vari) (val : ty) (l : list VT) :=
  (fix F (l0 : list VT) : Prop :=
     match l0 with
     | nil => False
     | v :: l1 => IF fst v = indx :>vari then snd v = val :>ty else F l1
     end) l.
 
Inductive config : Set :=
    cfg : tm -> OS_env -> config.

Definition cfgexp (c : config) := let (e, A) return tm := c in e.

Definition cfgenv (c : config) := let (e, A) return OS_env := c in A.

Definition TE_Dom (H : ty_env) :=
  (fix F (l : list VT) : list vari :=
     match l with
     | nil => nil (A:=vari)
     | v :: l0 => cons (fst v) (F l0)
     end) H.
 
Definition OS_Dom (A : OS_env) :=
  (fix F (l : list VTT) : list vari :=
     match l with
     | nil => nil (A:=vari)
     | v :: l0 => cons (fst (fst v)) (F l0)
     end) A.
 
Definition OS_Dom_ty (A : OS_env) :=
  (fix F (l : list VTT) : list VT :=
     match l with
     | nil => nil (A:=VT)
     | v :: l0 => cons (fst v) (F l0)
     end) A. *)

Require Import OSrules.
(* OSrules:
Require Import List.
Require Import syntax.
Require Import environments.

Require Import typecheck.

Require Import rename.

Definition OScons (v : vari) (t : ty) (e : tm) (A : OS_env) := (v, t, e) :: A.

Inductive Ap (a : tm) : tm -> OS_env -> tm -> vari -> ty -> Prop :=
  | Ap_abs :
      forall (nv v : vari) (t : ty) (e ne : tm) (A : OS_env),
      ~ member vari nv (OS_Dom A) ->
      rename nv v e ne -> Ap a (abs v t e) A ne nv t
  | Ap_clos :
      forall (n v : vari) (s t : ty) (e ne e1 : tm) (A : OS_env),
      Ap a e (OScons v s e1 A) ne n t ->
      Ap a (clos e v s e1) A (clos ne v s e1) n t.

Goal
forall (a fun_ b : tm) (A : OS_env) (n : vari) (t : ty),
Ap a fun_ A b n t -> ~ member vari n (OS_Dom A).

   simple induction 1; intros.
   assumption.
   red in |- *; intro; apply H1; simpl in |- *.
   right; assumption.
Save ApNewVar.

Inductive OSred : config -> config -> Prop :=
  | OS_C0 : forall A : OS_env, OSred (cfg o A) (cfg o A)
  | OS_CT : forall A : OS_env, OSred (cfg ttt A) (cfg ttt A)
  | OS_CF : forall A : OS_env, OSred (cfg fff A) (cfg fff A)
  | OS_L :
      forall (A : OS_env) (e : tm) (t : ty) (x : vari),
      OSred (cfg (abs x t e) A) (cfg (abs x t e) A)
  | OS_P0 :
      forall (A A' : OS_env) (e : tm),
      OSred (cfg e A) (cfg o A') -> OSred (cfg (prd e) A) (cfg o A')
  | OS_P :
      forall (A A' : OS_env) (e e1 : tm),
      OSred (cfg e A) (cfg (succ e1) A') -> OSred (cfg (prd e) A) (cfg e1 A')
  | OS_ZT :
      forall (A A' : OS_env) (e : tm),
      OSred (cfg e A) (cfg o A') -> OSred (cfg (is_o e) A) (cfg ttt A')
  | OS_ZF :
      forall (A A' : OS_env) (e e1 : tm),
      OSred (cfg e A) (cfg (succ e1) A') ->
      OSred (cfg (is_o e) A) (cfg fff A')
  | OS_S :
      forall (A A' : OS_env) (e e1 : tm),
      OSred (cfg e A) (cfg e1 A') ->
      OSred (cfg (succ e) A) (cfg (succ e1) A')
  | OS_Var1 :
      forall (A A' : OS_env) (e en : tm) (t : ty) (x : vari),
      ~ member vari x (OS_Dom A) ->
      OSred (cfg e A) (cfg en A') ->
      OSred (cfg (var x) (OScons x t e A)) (cfg en (OScons x t en A'))
  | OS_Var2 :
      forall (A A' : OS_env) (e en : tm) (t : ty) (x y : vari),
      x <> y ->
      ~ member vari x (OS_Dom A) ->
      OSred (cfg (var y) A) (cfg en A') ->
      OSred (cfg (var y) (OScons x t e A)) (cfg en (OScons x t e A'))
  | OS_Appl :
      forall (A A' A'' : OS_env) (e1 e2 en en' enf : tm) (n : vari) (t : ty),
      OSred (cfg e1 A) (cfg en A') ->
      Ap e2 en A en' n t ->
      OSred (cfg (clos en' n t e2) A') (cfg enf A'') ->
      OSred (cfg (appl e1 e2) A) (cfg enf A'')
  | OS_IfTrue :
      forall (A A' A'' : OS_env) (e1 e2 e3 en : tm),
      OSred (cfg e1 A) (cfg ttt A') ->
      OSred (cfg e2 A') (cfg en A'') ->
      OSred (cfg (cond e1 e2 e3) A) (cfg en A'')
  | OS_IfFalse :
      forall (A A' A'' : OS_env) (e1 e2 e3 en : tm),
      OSred (cfg e1 A) (cfg fff A') ->
      OSred (cfg e3 A') (cfg en A'') ->
      OSred (cfg (cond e1 e2 e3) A) (cfg en A'')
  | OS_Fix :
      forall (A A' : OS_env) (e e' en : tm) (x nx : vari) (t : ty),
      ~ member vari nx (OS_Dom A) ->
      rename nx x e e' ->
      OSred (cfg (clos e' nx t (Fix x t e)) A) (cfg en A') ->
      OSred (cfg (Fix x t e) A) (cfg en A')
  | OS_CL :
      forall (A A' : OS_env) (e e1 en e1' : tm) (x : vari) (t : ty),
      OSred (cfg e (OScons x t e1 A)) (cfg en (OScons x t e1' A')) ->
      forall s : ty,
      TC (OS_Dom_ty (OScons x t e1 A)) en s ->
      ~ (s = nat_ty \/ s = bool_ty) ->
      OSred (cfg (clos e x t e1) A) (cfg (clos en x t e1') A')
  | OS_CL' :
      forall (A A' : OS_env) (e e1 en e1' : tm) (x : vari) (t : ty),
      OSred (cfg e (OScons x t e1 A)) (cfg en (OScons x t e1' A')) ->
      forall s : ty,
      TC (OS_Dom_ty (OScons x t e1 A)) en s ->
      s = nat_ty \/ s = bool_ty -> OSred (cfg (clos e x t e1) A) (cfg en A'). *)

Goal forall A : OS_env, TE_Dom (OS_Dom_ty A) = OS_Dom A.
   simple induction A; intros.
   simpl in |- *; reflexivity.
   simpl in |- *; elim H; reflexivity.
Save TEDomDomty_OSDom.

Goal
forall (v : vari) (t : ty) (H : ty_env),
mapsto v t H -> member vari v (TE_Dom H).

simple induction H; simpl in |- *.
intro; assumption.
intros; elim H1; intro.
left; elim H2; intros; assumption.
right; elim H2; intro; exact H0.
Save vtinH_vinDomH.

Goal
forall (H : ty_env) (e : tm) (t : ty),
TC H e t -> forall v : vari, FV v e -> member vari v (TE_Dom H).

simple induction 1; simpl in |- *; intros.
absurd (FV v o).    apply inv_FV_o.    assumption.
absurd (FV v ttt).  apply inv_FV_ttt.  assumption.
absurd (FV v fff).  apply inv_FV_fff.  assumption.
apply H3.  apply inv_FV_succ; assumption.
apply H3.  apply inv_FV_prd; assumption.
apply H3.  apply inv_FV_is_o; assumption.
specialize inv_FV_var with (1 := H3); intro Q.
rewrite Q; apply vtinH_vinDomH with t0; assumption.
specialize inv_FV_appl with (1 := H6).
simple induction 1; intro F.
apply H3; assumption.
apply H5; assumption.
specialize inv_FV_abs with (1 := H4); simple induction 1; intros.
elim (H3 v0).
intro; absurd (v0 = v); assumption || symmetry  in |- *; assumption.
intro; assumption.
assumption.
specialize inv_FV_cond with (1 := H8); simple induction 1.
intro; apply H3; assumption.
simple induction 1; intro.
apply H5; assumption.
apply H7; assumption.
specialize inv_FV_fix with (1 := H4); simple induction 1; intros.
elim (H3 v0).
intro; absurd (v0 = v); assumption || symmetry  in |- *; assumption.
intro; assumption.
assumption.
specialize inv_FV_clos with (1 := H6); simple induction 1; intros.
apply H3; assumption.
elim H8; intros.
elim (H5 v0).
intro; absurd (v0 = v); assumption || symmetry  in |- *; assumption.
intro; assumption.
assumption.
Save TCHet_FVeinDomH.

Goal
forall c c' : config,
OSred c c' -> OS_Dom_ty (cfgenv c) = OS_Dom_ty (cfgenv c').

   simple induction 1; simpl in |- *; intros.
   reflexivity.  reflexivity.  reflexivity.  reflexivity.
   assumption.  assumption.  assumption.  assumption.  assumption.
   elim H2; reflexivity.
   elim H3; reflexivity.
   transitivity (OS_Dom_ty A'); assumption.
   transitivity (OS_Dom_ty A'); assumption.
   transitivity (OS_Dom_ty A'); assumption.
   assumption.
   replace (OS_Dom_ty A) with (tail ((x, t) :: OS_Dom_ty A)).
   replace (OS_Dom_ty A') with (tail ((x, t) :: OS_Dom_ty A')).
   apply (f_equal (tail (A:=VT))); assumption.
   simpl in |- *; reflexivity.
   simpl in |- *; reflexivity.
   replace (OS_Dom_ty A) with (tail ((x, t) :: OS_Dom_ty A)).
   replace (OS_Dom_ty A') with (tail ((x, t) :: OS_Dom_ty A')).
   apply (f_equal (tail (A:=VT))); assumption.
   simpl in |- *; reflexivity.
   simpl in |- *; reflexivity.
Save dom_pres.

