

Require Import basis.
(* basis:
Definition Relation (U : Set) := U -> U -> Prop.

Definition Reflexive (U : Set) (R : Relation U) : Prop := forall x : U, R x x.

Definition Transitive (U : Set) (R : Relation U) : Prop :=
  forall x y z : U, R x y -> R y z -> R x z.

Definition Symmetric (U : Set) (R : Relation U) : Prop :=
  forall x y : U, R x y -> R y x.

Inductive Equivalence (U : Set) (R : Relation U) : Prop :=
    Definition_of_equivalence :
      Reflexive U R -> Symmetric U R -> Transitive U R -> Equivalence U R.

Definition Negation (U : Set) (R : Relation U) : Relation U :=
  fun x y : U => ~ R x y.
Hint Unfold Negation.

Theorem Sym_imp_NegSym :
 forall (U : Set) (R : Relation U),
 Symmetric U R -> Symmetric U (Negation U R).
Hint Resolve Sym_imp_NegSym.

Definition Irreflexive (U : Set) (R : Relation U) : Prop :=
  forall x : U, ~ R x x.

Definition Separating (U : Set) (R : Relation U) : Prop :=
  forall x y z : U, R x y -> R x z \/ R y z.

Inductive Apartness (U : Set) (R : Relation U) : Prop :=
    Definition_of_apartness :
      Irreflexive U R -> Separating U R -> Apartness U R.
Hint Unfold Reflexive Irreflexive Symmetric Transitive.
Hint Resolve Definition_of_equivalence Definition_of_apartness.

Parameter Point : Set.
Parameter Line : Set.
Parameter DiPt : Point -> Point -> Prop.
Parameter DiLn : Line -> Line -> Prop.
Parameter ConLn : Line -> Line -> Prop.

Axiom apart_dipt : Apartness Point DiPt.

Axiom apart_diln : Apartness Line DiLn.

Axiom apart_con : Apartness Line ConLn.

Hint Resolve apart_dipt apart_diln apart_con.

Theorem Apart_imp_Sym :
 forall (U : Set) (R : Relation U), Apartness U R -> Symmetric U R.
Hint Resolve Apart_imp_Sym.

Theorem sym_DiPt : forall x y : Point, DiPt x y -> DiPt y x.

Theorem sym_DiLn : forall x y : Line, DiLn x y -> DiLn y x.

Theorem sym_ConLn : forall x y : Line, ConLn x y -> ConLn y x.
Hint Immediate sym_DiPt sym_DiLn sym_ConLn.

Theorem Neg_apart_equiv :
 forall (U : Set) (R : Relation U),
 Apartness U R -> Equivalence U (Negation U R).
Hint Resolve Neg_apart_equiv.

Definition EqPt := Negation Point DiPt.

Definition EqLn := Negation Line DiLn.

Definition Par := Negation Line ConLn.

Theorem equiv_EqPt : Equivalence Point EqPt.
Hint Resolve equiv_EqPt.

Theorem equiv_EqLn : Equivalence Line EqLn.
Hint Resolve equiv_EqLn.

Theorem equiv_Par : Equivalence Line Par.
Hint Resolve equiv_Par.

Theorem sym_EqPt : forall x y : Point, EqPt x y -> EqPt y x.

Theorem sym_EqLn : forall x y : Line, EqLn x y -> EqLn y x.

Theorem sym_Par : forall x y : Line, Par x y -> Par y x.
Hint Immediate sym_EqPt sym_EqLn sym_Par.

Parameter Apart : Point -> Line -> Prop.

Definition Incident (a : Point) (l : Line) := ~ Apart a l.

Record Segment : Set := Seg
  {origin : Point; extremity : Point; Seg_cond : DiPt origin extremity}.

Record Twolines : Set := Twol
  {line1 : Line; line2 : Line; Twol_cond : ConLn line1 line2}.

Axiom
  line :
    forall x : Segment,
    {l : Line | Incident (origin x) l /\ Incident (extremity x) l}.

Axiom
  point :
    forall x : Twolines,
    {a : Point | Incident a (line1 x) /\ Incident a (line2 x)}.

Definition ln : Segment -> Line.

Definition pt : Twolines -> Point.

Theorem inc_ln1 : forall x : Segment, Incident (origin x) (ln x).

Theorem inc_ln2 : forall x : Segment, Incident (extremity x) (ln x).

Theorem inc_pt1 : forall x : Twolines, Incident (pt x) (line1 x).

Theorem inc_pt2 : forall x : Twolines, Incident (pt x) (line2 x).
Hint Resolve inc_ln1 inc_ln2 inc_pt1 inc_pt2.

Axiom
  el_ax :
    forall (x : Segment) (l m : Line),
    DiLn l m ->
    (Apart (origin x) l \/ Apart (extremity x) l) \/
    Apart (origin x) m \/ Apart (extremity x) m.

Axiom
  cmp_apt_dipt :
    forall (a b : Point) (l : Line), Apart a l -> DiPt a b \/ Apart b l.

Axiom
  cmp_apt_diln :
    forall (a : Point) (l m : Line), Apart a l -> DiLn l m \/ Apart a m.

Axiom cmp_con_diln : forall l m n : Line, ConLn l m -> DiLn m n \/ ConLn l n.

Record Triangle : Set := Tri
  {summit : Point; base : Segment; Tri_cond : Apart summit (ln base)}.

Theorem Triangle_def : forall t : Triangle, Apart (summit t) (ln (base t)).
Hint Resolve Triangle_def.

Definition SPar : Relation Line := fun l m : Line => Par l m /\ DiLn l m.

Record Parallelogram : Set := Pgram
  {side1 : Segment;
   side2 : Segment;
   side3 : Segment;
   side4 : Segment;
   connect1 : origin side3 = origin side1 /\ extremity side3 = origin side2;
   connect2 :
    origin side4 = extremity side1 /\ extremity side4 = extremity side2;
   parsides_i : SPar (ln side1) (ln side2);
   parsides_ii : SPar (ln side3) (ln side4)}. *)

Require Import part1.
(* part1:
Require Import basis.

Theorem Uniqueness_of_constructed_lines :
 forall (x : Segment) (l : Line),
 Incident (origin x) l -> Incident (extremity x) l -> EqLn l (ln x).

Theorem Convergent_imp_distinct : forall l m : Line, ConLn l m -> DiLn l m.
Hint Resolve Convergent_imp_distinct.

Theorem Uniqueness_of_constructed_points :
 forall (x : Twolines) (a : Point),
 Incident a (line1 x) -> Incident a (line2 x) -> EqPt a (pt x).

Theorem cong_eqpt_apt :
 forall (a b : Point) (l : Line), Apart a l -> EqPt a b -> Apart b l.

Theorem cong_eqln_apt :
 forall (a : Point) (l m : Line), Apart a l -> EqLn l m -> Apart a m.

Theorem cong_eqpt_inc :
 forall (a b : Point) (l : Line), Incident a l -> EqPt a b -> Incident b l.

Theorem cong_eqln_inc :
 forall (a : Point) (l m : Line), Incident a l -> EqLn l m -> Incident a m.

Theorem cong_eqln_con :
 forall l m n : Line, ConLn l m -> EqLn m n -> ConLn l n.

Theorem cong_eqln_par : forall l m n : Line, Par l m -> EqLn m n -> Par l n.

Theorem cong_eqpt_dipt :
 forall a b c : Point, DiPt a b -> EqPt b c -> DiPt a c.

Theorem cong_eqln_diln :
 forall l m n : Line, DiLn l m -> EqLn m n -> DiLn l n.

Theorem eqln_imp_par : forall l m : Line, EqLn l m -> Par l m.

Theorem cong_par_con : forall l m n : Line, ConLn l m -> Par m n -> ConLn l n.

Theorem sym_SPar : forall x y : Line, SPar x y -> SPar y x.
Hint Resolve sym_SPar.

Theorem cong_eqln_spar :
 forall l m n : Line, SPar l m -> EqLn m n -> SPar l n.

Definition reverse : Segment -> Segment.

Theorem orig_rev : forall x : Segment, origin x = extremity (reverse x).

Theorem ext_rev : forall x : Segment, extremity x = origin (reverse x).

Theorem rev_defines_sameln : forall x : Segment, EqLn (ln x) (ln (reverse x)).
Hint Resolve rev_defines_sameln.

Definition flip : Twolines -> Twolines.

Theorem line1_flip : forall x : Twolines, line1 x = line2 (flip x).

Theorem line2_flip : forall x : Twolines, line2 x = line1 (flip x).

Theorem flip_defines_samept : forall x : Twolines, EqPt (pt x) (pt (flip x)).
Hint Resolve rev_defines_sameln flip_defines_samept.

Definition colinear (x y : Segment) : Prop := EqLn (ln x) (ln y).

Theorem Colinearity_is_equivalence : Equivalence Segment colinear.
Proof.
cut (Equivalence Line EqLn); auto.
intro H'; elim H'.
intros H'0 H'1 H'2; apply Definition_of_equivalence; unfold colinear in |- *;
 auto. *)

Require Import part2.
(* part2:
Require Import basis.
Require Import part1.

Theorem thm4_1a :
 forall (x : Segment) (l : Line),
 DiLn l (ln x) -> Apart (origin x) l \/ Apart (extremity x) l.

Theorem thm4_1b :
 forall (x : Segment) (l : Line),
 Apart (origin x) l \/ Apart (extremity x) l -> DiLn l (ln x).
Hint Resolve thm4_1a thm4_1b.

Theorem thm4_1c :
 forall (x : Twolines) (a : Point),
 DiPt a (pt x) -> Apart a (line1 x) \/ Apart a (line2 x).

Theorem thm4_1d :
 forall (x : Twolines) (a : Point),
 Apart a (line1 x) \/ Apart a (line2 x) -> DiPt a (pt x).

Theorem Symmetry_of_Apart :
 forall x y : Segment,
 Apart (origin x) (ln y) \/ Apart (extremity x) (ln y) ->
 Apart (origin y) (ln x) \/ Apart (extremity y) (ln x).

Theorem thm4_3a :
 forall (x : Segment) (c : Point), Apart c (ln x) -> DiPt c (origin x).

Theorem thm4_3b :
 forall (x : Segment) (c : Point), Apart c (ln x) -> DiPt c (extremity x).

Definition Side1 : Triangle -> Segment.

Definition Side2 : Triangle -> Segment.

Theorem auxs1 : forall t : Triangle, origin (base t) = extremity (Side1 t).

Theorem auxs2 : forall t : Triangle, extremity (base t) = extremity (Side2 t).

Theorem auxs3 : forall t : Triangle, summit t = origin (Side1 t).

Theorem auxs4 : forall t : Triangle, summit t = origin (Side2 t).

Theorem thm4_3c : forall t : Triangle, DiLn (ln (base t)) (ln (Side1 t)).

Theorem thm4_3d : forall t : Triangle, DiLn (ln (base t)) (ln (Side2 t)).

Hint Resolve thm4_3c thm4_3d. *)



Theorem Triangle_axioms_i :

 forall t : Triangle, Apart (origin (base t)) (ln (Side2 t)).

Proof.

intro t.

generalize (thm4_3d t); intro H'.

lapply (el_ax (base t) (ln (base t)) (ln (Side2 t))); trivial.

intro H.

elim H; intro H'0; clear H.

generalize (inc_ln2 (base t)); generalize (inc_ln1 (base t)).

unfold Incident in |- *; tauto.

generalize H'0; clear H'0.

rewrite (auxs2 t).

intro H'2.

elim H'2; [ trivial | intro H'0; clear H'2 ].

elim (inc_ln2 (Side2 t)); trivial.

Qed.



Theorem Triangle_axioms_ii :

 forall t : Triangle, Apart (extremity (base t)) (ln (reverse (Side1 t))).

Proof.

intro t.

generalize (thm4_3c t); intro H'.

lapply (el_ax (base t) (ln (base t)) (ln (reverse (Side1 t))));

 trivial.

intro H; elim H; (clear H; intro H'0).

generalize (inc_ln2 (base t)); generalize (inc_ln1 (base t)).

unfold Incident in |- *; tauto.

elim H'0; [ intro H'1; clear H'0 | trivial ].

generalize (inc_ln1 (reverse (Side1 t))).

rewrite <- (ext_rev (Side1 t)).

rewrite <- (auxs1 t).

intro H'3; elim H'3; auto.

apply cong_eqln_diln with (m := ln (Side1 t)); auto.

Qed.



Theorem Triangle_axioms_iii :

 forall t : Triangle, Apart (summit t) (ln (reverse (base t))).

Proof.

intro t; elim t.

intros summit base Tri_cond.

apply cong_eqln_apt with (l := ln base); auto.

Qed.

Hint Resolve Triangle_axioms_i Triangle_axioms_ii Triangle_axioms_iii.



Theorem thm4_5ia :

 forall (x : Segment) (l : Line),

 EqLn l (ln x) -> Incident (origin x) l /\ Incident (extremity x) l.

Proof.

unfold EqLn, Incident, Negation in |- *.

intuition.

Qed.



Theorem thm4_5ib :

 forall (x : Segment) (l : Line),

 Incident (origin x) l /\ Incident (extremity x) l -> EqLn l (ln x).

Proof.

generalize Uniqueness_of_constructed_lines; intuition.

Qed.

Hint Resolve thm4_1c thm4_1d.



Theorem thm4_5iia :

 forall (x : Twolines) (a : Point),

 EqPt a (pt x) -> Incident a (line1 x) /\ Incident a (line2 x).

Proof.

split; apply cong_eqpt_inc with (a := pt x); auto.

Qed.



Theorem thm4_5iib :

 forall (x : Twolines) (a : Point),

 Incident a (line1 x) /\ Incident a (line2 x) -> EqPt a (pt x).

Proof.

intuition.

apply Uniqueness_of_constructed_points; trivial.

Qed.



Theorem thm4_6 :

 forall x y : Segment,

 Incident (origin x) (ln y) /\ Incident (extremity x) (ln y) ->

 Incident (origin y) (ln x) /\ Incident (extremity y) (ln x).

Proof.

unfold Incident in |- *.

intros x y H'; generalize (Symmetry_of_Apart y x).

tauto.

Qed.



Theorem thm4_7i :

 forall (a b c : Point) (H1 : DiPt a b) (H2 : DiPt b c),

 Incident c (ln (Seg a b H1)) -> Incident a (ln (reverse (Seg b c H2))).

Proof.

intros a b c H1 H2 H'.

lapply (thm4_6 (reverse (Seg b c H2)) (Seg a b H1));

 [ intro H'1; elim H'1; trivial | idtac ].

generalize (inc_ln2 (Seg a b H1)); auto.

Qed.



Theorem thm4_7ii :

 forall (a b c : Point) (H1 : DiPt a b) (H2 : DiPt a c),

 Incident c (ln (Seg a b H1)) -> Incident b (ln (Seg a c H2)).

Proof.

intros a b c H1 H2 H'.

lapply (thm4_6 (Seg a c H2) (Seg a b H1));

 [ intro H'1; elim H'1; trivial | idtac ].

generalize (inc_ln1 (Seg a b H1)); auto.

Qed.



Theorem thm4_7iii :

 forall (x : Segment) (c : Point),

 Incident c (ln x) -> Incident c (ln (reverse x)).

Proof.

intros x c H'.

apply cong_eqln_inc with (l := ln x); auto.

Qed.



Theorem Symmetry_of_Apart' :

 forall x y : Twolines,

 Apart (pt y) (line1 x) \/ Apart (pt y) (line2 x) ->

 Apart (pt x) (line1 y) \/ Apart (pt x) (line2 y).

Proof.

intros x y H'.

apply thm4_1c.

apply sym_DiPt; auto.

Qed.



Theorem thm4_9a :

 forall (x : Twolines) (c : Line), Apart (pt x) c -> DiLn c (line1 x).

Proof.

intros x c H'.

lapply (cmp_apt_diln (pt x) c (line1 x));

 [ intro H'3; elim H'3; [ trivial | intro H'4; clear H'3 ] | idtac ];

 trivial.

elim (inc_pt1 x); trivial.

Qed.



Theorem thm4_9b :

 forall (x : Twolines) (c : Line), Apart (pt x) c -> DiLn c (line2 x).

Proof.

intros x c H'.

lapply (cmp_apt_diln (pt x) c (line2 x));

 [ intro H'3; elim H'3; [ trivial | intro H'4; clear H'3 ] | idtac ];

 trivial.

elim (inc_pt2 x); trivial.

Qed.



Theorem thm5_3 :

 forall (x y : Segment) (z : Twolines),

 origin x = origin y ->

 line1 z = ln x -> line2 z = ln y -> EqPt (pt z) (origin x).

Proof.

intros x y z; elim z; simpl in |- *.

intros line1 line2 Twol_cond H' H'0 H'1.

lapply (Convergent_imp_distinct line1 line2); trivial.

intro H'2; red in |- *; red in |- *; red in |- *; intro H.

lapply

 (el_ax (Seg (pt (Twol line1 line2 Twol_cond)) (origin x) H) line1 line2);

 [ intro H'7 | trivial ].

simpl in H'7.

elim H'7; clear H'7; (intro H'3; elim H'3; (clear H'3; intro H'4)).

elim (inc_pt1 (Twol line1 line2 Twol_cond)); auto.

apply (inc_ln1 x); rewrite <- H'0; assumption.

elim (inc_pt2 (Twol line1 line2 Twol_cond)); auto.

apply (inc_ln1 y); rewrite <- H'1; rewrite <- H'; assumption.

Qed.



Theorem thm5_4 :

 forall (x y : Twolines) (z : Segment),

 line1 x = line1 y ->

 origin z = pt x -> extremity z = pt y -> EqLn (ln z) (line1 x).

Proof.

intros x y z; elim z; simpl in |- *.

intros origin extremity Seg_cond H' H'0 H'1.

red in |- *; red in |- *; red in |- *; intro H'2.

lapply

 (el_ax (Seg origin extremity Seg_cond) (ln (Seg origin extremity Seg_cond))

    (line1 x)); [ intro H'7 | trivial ].

simpl in H'7.

elim H'7; clear H'7; (intro H'3; elim H'3; (clear H'3; intro H'4)).

elim (inc_ln1 (Seg origin extremity Seg_cond)); auto.

elim (inc_ln2 (Seg origin extremity Seg_cond)); auto.

apply (inc_pt1 x); rewrite <- H'0; assumption.

apply (inc_pt1 y); rewrite <- H'1; rewrite <- H'; assumption.

Qed.



Theorem thm5_5 :

 forall (a b c : Point) (H1 : DiPt a b) (H2 : EqPt b c),

 EqLn (ln (Seg a b H1)) (ln (Seg a c (cong_eqpt_dipt a b c H1 H2))).

Proof.

intros a b c H1 H2; apply Uniqueness_of_constructed_lines; simpl in |- *.

exact (inc_ln1 (Seg a b H1)).

generalize (inc_ln2 (Seg a b H1)); simpl in |- *; intro H'.

apply cong_eqpt_inc with (a := b); trivial.

Qed.



Theorem thm5_6 :

 forall (l m n : Line) (H1 : ConLn l m) (H2 : EqLn m n),

 EqPt (pt (Twol l m H1)) (pt (Twol l n (cong_eqln_con l m n H1 H2))).

Proof.

intros l m n H1 H2; apply Uniqueness_of_constructed_points; simpl in |- *.

exact (inc_pt1 (Twol l m H1)).

generalize (inc_pt2 (Twol l m H1)); simpl in |- *; intro H'.

apply cong_eqln_inc with (l := m); trivial.

Qed.



