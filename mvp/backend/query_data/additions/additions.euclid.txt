

Require Import Arith.

Require Import Constants.
(* Constants:
Global Set Asymmetric Patterns.

Definition one := 1.
Definition two := 2.
Definition three := 3.
Definition four := 4. *)

Require Import Le_lt_compl.
(* Le_lt_compl:
Require Import Arith.
Require Import Constants.

Lemma lt_or_Zero : forall q : nat, 0 < q \/ q = 0.

Lemma one_cases : forall q : nat, 1 < q \/ q = 0 \/ q = 1.

Lemma enum1 : forall n : nat, n < two -> n = 0 \/ n = 1.

Lemma le5 :
 forall P : nat -> Prop,
 P 0 ->
 P one ->
 P two ->
 P three ->
 P four -> (forall n : nat, four < n -> P n) -> forall n : nat, P n.

Lemma enum4 :
 forall n : nat,
 n < S four -> n = 0 \/ n = one \/ n = two \/ n = three \/ n = four.

Lemma not_le_lt : forall n m : nat, ~ n <= m -> m < n.
Hint Immediate not_le_lt: arith.

Lemma not_lt_le : forall n m : nat, ~ n < m -> m <= n.
Hint Immediate not_lt_le: arith.

Lemma lt_not_lt : forall n p : nat, n < p -> ~ p < S n.

Lemma lt_a_a_plus_b : forall a b : nat, 0 < b -> a < a + b.

Hint Resolve lt_a_a_plus_b: arith. *)

Require Import Mult_compl.
(* Mult_compl:
Require Import Arith.
Require Import Constants.
Require Import Le_lt_compl.

Lemma mult_le_l : forall a b c : nat, b <= c -> a * b <= a * c.
Hint Resolve mult_le_l: arith.

Lemma mult_lt_l : forall a b c : nat, 0 < a -> b < c -> a * b < a * c.

Hint Resolve mult_lt_l: arith.

Lemma mult_le_r : forall a b c : nat, b <= c -> b * a <= c * a.
Hint Resolve mult_le_r: arith.

Lemma mult_lt_r : forall a b c : nat, 0 < a -> b < c -> b * a < c * a.
Hint Resolve mult_lt_r: arith.

Lemma mult_inj_l : forall a b c : nat, a * c < b * c -> a < b.

Lemma mult_p_lt_qp : forall p q : nat, 0 < p -> one < q -> p < q * p.  

Lemma mult_p_le_qp : forall p q : nat, 0 < q -> p <= q * p.

Hint Resolve mult_p_lt_qp mult_p_le_qp: arith.
 
Lemma mult_p_lt_pq : forall p q : nat, 0 < p -> one < q -> p < p * q.  

Lemma mult_p_le_pq : forall p q : nat, 0 < q -> p <= p * q.

Hint Resolve mult_p_lt_pq mult_p_le_pq: arith.

Lemma quotient_positive : forall q n n0 : nat, n = q * n0 -> 0 < n -> 0 < q.

Lemma quotient_gt_one : forall q n n0 : nat, n0 < n -> n = q * n0 -> one < q. *)



Lemma lt_b_qbr : forall b q r : nat, 0 < r -> 0 < q -> r < b -> b < q * b + r.

     

Proof.

 intros. 

 apply le_lt_trans with (q * b).

 auto with arith.

 pattern (q * b) at 1 in |- *; rewrite plus_n_O; auto with arith.

Qed.



Hint Resolve lt_b_qbr: arith.



Lemma lt_q_qbr : forall b q r : nat, 0 < r -> one < b -> q < q * b + r.



Proof.

 simple induction q; [ auto with arith | intros ].

 apply lt_trans with (S n * b).

 auto with arith.

 pattern (S n * b) at 1 in |- *; rewrite (plus_n_O (S n * b));

  auto with arith.

Qed.

Hint Resolve lt_q_qbr: arith.



Lemma lt_q_qbr' : forall b q r : nat, 0 < q -> one < b -> q < q * b + r.



Proof.

 intros.

 apply lt_le_trans with (q * b); auto with arith.

Qed.



Hint Resolve lt_q_qbr': arith.



Lemma le_q_qbr : forall b q r : nat, 0 < b -> q <= q * b + r.



Proof.

 intros.

 apply le_trans with (q * b); auto with arith.

Qed.

  

Hint Resolve le_q_qbr: arith.



Lemma lt_O_q : forall b q r : nat, b < q * b + r -> 0 < r -> r < b -> 0 < q.



Proof.

 intros; case (lt_or_Zero q); [ auto with arith | intros ].

 absurd (b < r).

 apply lt_asym; auto with arith.

 replace r with (q * b + r); auto with arith.

 rewrite H2; simpl in |- *; auto with arith.

Qed.



