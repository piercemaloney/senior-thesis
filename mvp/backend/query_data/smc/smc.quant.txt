
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.
Require Import Compare.
Require Import Peano_dec.

Require Import misc.
(* misc:
Require Import Compare.
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Allmaps.
Require Import List.

Section BDDmisc.

Definition BDDvar := ad.

Definition BDDcompare (x y : BDDvar) :=
  match x, y with
  | N0, N0 => Datatypes.Eq
  | N0, Npos _ => Datatypes.Lt
  | Npos _, N0 => Datatypes.Gt
  | Npos p1, Npos p2 => Pcompare p1 p2 Datatypes.Eq
  end.

Definition ad_S (a : ad) :=
  match a with
  | N0 => Npos 1
  | Npos p => Npos (Psucc p)
  end.

Definition max (m n : nat) := if leb m n then n else m.

Definition BDDvar_max (x y : BDDvar) := if Nleb x y then y else x.

Inductive no_dup_list (A : Set) : list A -> Prop :=
  | no_dup_nil : no_dup_list A nil
  | no_dup_cons :
      forall (a : A) (l : list A),
      ~ In a l -> no_dup_list _ l -> no_dup_list _ (a :: l).

Lemma ad_S_is_S : forall a : ad, nat_of_N (ad_S a) = S (nat_of_N a).

Lemma relation_sum :
 forall r : Datatypes.comparison,

Lemma BDD_EGAL_complete :
 forall x y : BDDvar, BDDcompare x y = Datatypes.Eq -> x = y.

Lemma BDDcompare_lt :
 forall x y : BDDvar,
 BDDcompare x y = Datatypes.Lt -> nat_of_N x < nat_of_N y.

Lemma BDDlt_compare :
 forall x y : BDDvar,
 nat_of_N x < nat_of_N y -> BDDcompare x y = Datatypes.Lt.

Lemma BDDcompare_trans :
 forall x y z : BDDvar,
 BDDcompare x y = Datatypes.Lt ->

Lemma BDDcompare_sup_inf :
 forall x y : BDDvar,
 BDDcompare x y = Datatypes.Gt -> BDDcompare y x = Datatypes.Lt.

Lemma lt_trans_1 : forall x y z : nat, x < y -> y < S z -> x < z.

Lemma BDDcompare_1 :
 forall x y : BDDvar,
 BDDcompare x y = Datatypes.Lt ->

Lemma andb3_lemma :
 forall b1 b2 b3 : bool,
 b1 && (b2 && b3) = true -> b1 = true /\ b2 = true /\ b3 = true.

Lemma andb3_lemma_1 :
 forall x x0 y y0 z z0 : ad,
 (x, (y, z)) <> (x0, (y0, z0)) ->
 Neqb x x0 && (Neqb y y0 && Neqb z z0) = false.

Lemma ad_S_le_then_neq :
 forall x y : ad, Nleb (ad_S x) y = true -> Neqb x y = false.

Lemma BDD_EGAL_correct : forall x : BDDvar, BDDcompare x x = Datatypes.Eq.

Lemma BDDcompare_inf_sup :
 forall x y : BDDvar,
 BDDcompare x y = Datatypes.Lt -> BDDcompare y x = Datatypes.Gt.

Lemma ad_S_compare :
 forall x y : ad, BDDcompare x y = BDDcompare (ad_S x) (ad_S y).

Lemma prod_sum :
 forall (A B : Set) (p : A * B), exists a : A, (exists b : B, p = (a, b)).

Lemma lt_max_1_2 :
 forall x1 y1 x2 y2 : nat, x1 < x2 -> y1 < y2 -> max x1 y1 < max x2 y2.

Lemma lt_max_1 :
 forall x1 y1 x2 y2 : nat, x1 < x2 -> y1 < x2 -> max x1 y1 < max x2 y2.

Lemma lt_max_2 :
 forall x1 y1 x2 y2 : nat, x1 < y2 -> y1 < y2 -> max x1 y1 < max x2 y2.

Lemma max_x_x_eq_x : forall x : nat, max x x = x.

Lemma BDDvar_le_max_2 : forall x y : BDDvar, Nleb x (BDDvar_max y x) = true.

Lemma BDDvar_max_max :
 forall x y : BDDvar,
 nat_of_N (BDDvar_max x y) = max (nat_of_N x) (nat_of_N y).

Lemma BDDvar_le_max_1 : forall x y : BDDvar, Nleb x (BDDvar_max x y) = true.

Lemma BDDvar_max_inf :
 forall x y : BDDvar, BDDcompare x y = Datatypes.Lt -> BDDvar_max x y = y.

Lemma BDDvar_max_comm : forall x y : BDDvar, BDDvar_max x y = BDDvar_max y x.

Lemma nat_gt_1_lemma : forall n : nat, n <> 0 -> n <> 1 -> 2 <= n.

Lemma ad_gt_1_lemma :
 forall x : ad, x <> N0 -> x <> Npos 1 -> Nleb (Npos 2) x = true.

Lemma Nltb_lebmma :
 forall a b : ad, Nleb a b = false -> Nleb (ad_S b) a = true.

Lemma eq_ad_S_eq :
 forall a b : ad, Neqb (ad_S a) (ad_S b) = true -> Neqb a b = true.

Lemma ad_S_neq_N0 : forall a : ad, Neqb (ad_S a) N0 = false.

Lemma list_sum :
 forall (A : Set) (l : list A),
 l = nil \/ (exists a : A, (exists l' : list A, l = a :: l')).

Lemma no_dup_sum :
 forall (A : Set) (l : list A) (H : no_dup_list _ l),
 l = nil \/
 (exists a : A,
    (exists l0 : list A, ~ In a l0 /\ no_dup_list _ l0 /\ l = a :: l0)).

Lemma no_dup_cons_no_dup :
 forall (A : Set) (l : list A) (a : A),
 no_dup_list _ (a :: l) -> no_dup_list _ l.

Lemma no_dup_cons_no_in :
 forall (A : Set) (l : list A) (a : A), no_dup_list _ (a :: l) -> ~ In a l.

End BDDmisc. *)
Require Import bool_fun.
(* bool_fun:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Allmaps.

Require Import misc.

Section Bool_fun.

Definition var_env := BDDvar -> bool.

Definition bool_fun := var_env -> bool.

Definition bool_fun_eq (bf1 bf2 : bool_fun) :=
  forall vb : var_env, bf1 vb = bf2 vb.

Definition bool_fun_zero (vb : var_env) := false.

Definition bool_fun_one (vb : var_env) := true.

Definition bool_fun_neg (bf : bool_fun) : bool_fun :=
  fun vb : var_env => negb (bf vb).

Definition bool_fun_or (bf1 bf2 : bool_fun) : bool_fun :=
  fun vb : var_env => bf1 vb || bf2 vb.

Definition bool_fun_and (bf1 bf2 : bool_fun) : bool_fun :=
  fun vb : var_env => bf1 vb && bf2 vb.

Definition bool_fun_impl (bf1 bf2 : bool_fun) : bool_fun :=
  fun vb : var_env => implb (bf1 vb) (bf2 vb).

Definition bool_fun_iff (bf1 bf2 : bool_fun) : bool_fun :=
  fun vb : var_env => eqb (bf1 vb) (bf2 vb).

Definition bool_fun_if (x : BDDvar) (bf1 bf2 : bool_fun) : bool_fun :=
  fun vb : var_env => ifb (vb x) (bf1 vb) (bf2 vb). 

Definition bool_fun_var (x : BDDvar) : bool_fun := fun vb : var_env => vb x.

Definition augment (vb : var_env) (x : BDDvar) (b : bool) : var_env :=
  fun y : BDDvar => if Neqb x y then b else vb y.

Definition bool_fun_restrict (bf : bool_fun) (x : BDDvar) 
  (b : bool) : bool_fun := fun vb : var_env => bf (augment vb x b).

Definition bool_fun_independent (bf : bool_fun) (x : BDDvar) :=
  forall b : bool, bool_fun_eq (bool_fun_restrict bf x b) bf.

Definition bool_fun_forall (x : BDDvar) (bf : bool_fun) :=
  bool_fun_and (bool_fun_restrict bf x true) (bool_fun_restrict bf x false).

Definition bool_fun_ex (x : BDDvar) (bf : bool_fun) :=
  bool_fun_or (bool_fun_restrict bf x true) (bool_fun_restrict bf x false).

Definition bool_fun_ext (bf : bool_fun) :=
  forall vb vb' : var_env,
  (forall x : BDDvar, vb x = vb' x) -> bf vb = bf vb'.

Inductive bool_expr : Set :=
  | Zero : bool_expr
  | One : bool_expr
  | Var : BDDvar -> bool_expr
  | Neg : bool_expr -> bool_expr
  | Or : bool_expr -> bool_expr -> bool_expr
  | ANd : bool_expr -> bool_expr -> bool_expr
  | Impl : bool_expr -> bool_expr -> bool_expr
  | Iff : bool_expr -> bool_expr -> bool_expr.

Fixpoint bool_fun_of_bool_expr (be : bool_expr) : bool_fun :=
  match be with
  | Zero => bool_fun_zero
  | One => bool_fun_one
  | Var x => bool_fun_var x
  | Neg be' => bool_fun_neg (bool_fun_of_bool_expr be')
  | Or be1 be2 =>
      bool_fun_or (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2)
  | ANd be1 be2 =>
      bool_fun_and (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2)
  | Impl be1 be2 =>
      bool_fun_impl (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2)
  | Iff be1 be2 =>
      bool_fun_iff (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2)
  end.

Lemma bool_fun_eq_refl : forall bf : bool_fun, bool_fun_eq bf bf.

Lemma bool_fun_eq_sym :
 forall bf1 bf2 : bool_fun, bool_fun_eq bf1 bf2 -> bool_fun_eq bf2 bf1.

Lemma bool_fun_eq_trans :
 forall bf1 bf2 bf3 : bool_fun,
 bool_fun_eq bf1 bf2 -> bool_fun_eq bf2 bf3 -> bool_fun_eq bf1 bf3.

Lemma bool_fun_neg_preserves_eq :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_neg bf1) (bool_fun_neg bf2).

Lemma bool_fun_or_preserves_eq :
 forall bf1 bf1' bf2 bf2' : bool_fun,
 bool_fun_eq bf1 bf1' ->
 bool_fun_eq bf2 bf2' ->
 bool_fun_eq (bool_fun_or bf1 bf2) (bool_fun_or bf1' bf2').

Lemma bool_fun_if_preserves_eq :
 forall (x : BDDvar) (bf1 bf2 bf1' bf2' : bool_fun),
 bool_fun_eq bf1 bf1' ->
 bool_fun_eq bf2 bf2' ->
 bool_fun_eq (bool_fun_if x bf1 bf2) (bool_fun_if x bf1' bf2').

Lemma bool_fun_and_preserves_eq :
 forall bf1 bf1' bf2 bf2' : bool_fun,
 bool_fun_eq bf1 bf1' ->
 bool_fun_eq bf2 bf2' ->
 bool_fun_eq (bool_fun_and bf1 bf2) (bool_fun_and bf1' bf2').

Lemma bool_fun_impl_preserves_eq :
 forall bf1 bf1' bf2 bf2' : bool_fun,
 bool_fun_eq bf1 bf1' ->
 bool_fun_eq bf2 bf2' ->
 bool_fun_eq (bool_fun_impl bf1 bf2) (bool_fun_impl bf1' bf2').

Lemma bool_fun_iff_preserves_eq :
 forall bf1 bf1' bf2 bf2' : bool_fun,
 bool_fun_eq bf1 bf1' ->
 bool_fun_eq bf2 bf2' ->
 bool_fun_eq (bool_fun_iff bf1 bf2) (bool_fun_iff bf1' bf2').

Lemma bool_fun_forall_preserves_eq :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq bf1 bf2 ->
 bool_fun_eq (bool_fun_forall x bf1) (bool_fun_forall x bf2).

Lemma bool_fun_ex_preserves_eq :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_ex x bf1) (bool_fun_ex x bf2).

Lemma bool_fun_neg_zero :
 bool_fun_eq (bool_fun_neg bool_fun_zero) bool_fun_one.

Lemma bool_fun_neg_one :
 bool_fun_eq (bool_fun_neg bool_fun_one) bool_fun_zero.

Lemma bool_fun_and_lemma :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq (bool_fun_and bf1 bf2)
   (bool_fun_neg (bool_fun_or (bool_fun_neg bf1) (bool_fun_neg bf2))).

Lemma bool_fun_impl_lemma :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq (bool_fun_impl bf1 bf2) (bool_fun_or (bool_fun_neg bf1) bf2).

Lemma bool_fun_iff_lemma :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq (bool_fun_iff bf1 bf2)
   (bool_fun_impl (bool_fun_or bf1 bf2) (bool_fun_and bf1 bf2)).

Lemma bool_fun_ex_lemma :
 forall (bf : bool_fun) (x : BDDvar),
 bool_fun_eq (bool_fun_ex x bf)
   (bool_fun_neg (bool_fun_forall x (bool_fun_neg bf))).

Lemma bool_fun_var_lemma :
 forall x : BDDvar,
 bool_fun_eq (bool_fun_var x) (bool_fun_if x bool_fun_one bool_fun_zero).

Lemma bool_fun_eq_neg_eq :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq (bool_fun_neg bf1) (bool_fun_neg bf2) -> bool_fun_eq bf1 bf2.

Lemma bool_fun_neg_orthogonal :
 forall (x : BDDvar) (bf1 bf2 : bool_fun),
 bool_fun_eq (bool_fun_neg (bool_fun_if x bf1 bf2))
   (bool_fun_if x (bool_fun_neg bf1) (bool_fun_neg bf2)).

Lemma bool_fun_or_zero :
 forall bf : bool_fun, bool_fun_eq (bool_fun_or bf bool_fun_zero) bf.

Lemma bool_fun_or_one :
 forall bf : bool_fun, bool_fun_eq (bool_fun_or bf bool_fun_one) bool_fun_one.

Lemma bool_fun_or_comm :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq (bool_fun_or bf1 bf2) (bool_fun_or bf2 bf1).

Lemma bool_fun_and_comm :
 forall bf1 bf2 : bool_fun,
 bool_fun_eq (bool_fun_and bf1 bf2) (bool_fun_and bf2 bf1).

Lemma bool_fun_and_idempotent :
 forall bf : bool_fun, bool_fun_eq (bool_fun_and bf bf) bf.

Lemma bool_fun_or_orthogonal :
 forall (x : BDDvar) (bf1 bf2 bf1' bf2' : bool_fun),
 bool_fun_eq (bool_fun_or (bool_fun_if x bf1 bf2) (bool_fun_if x bf1' bf2'))
   (bool_fun_if x (bool_fun_or bf1 bf1') (bool_fun_or bf2 bf2')).

Lemma bool_fun_or_orthogonal_right :
 forall (x : BDDvar) (bf bf1' bf2' : bool_fun),
 bool_fun_eq (bool_fun_or bf (bool_fun_if x bf1' bf2'))
   (bool_fun_if x (bool_fun_or bf bf1') (bool_fun_or bf bf2')).

Lemma bool_fun_or_orthogonal_left :
 forall (x : BDDvar) (bf1 bf2 bf' : bool_fun),
 bool_fun_eq (bool_fun_or (bool_fun_if x bf1 bf2) bf')
   (bool_fun_if x (bool_fun_or bf1 bf') (bool_fun_or bf2 bf')).

Lemma bool_fun_and_orthogonal :
 forall (x : BDDvar) (bf1 bf2 bf1' bf2' : bool_fun),
 bool_fun_eq (bool_fun_and (bool_fun_if x bf1 bf2) (bool_fun_if x bf1' bf2'))
   (bool_fun_if x (bool_fun_and bf1 bf1') (bool_fun_and bf2 bf2')).

Lemma bool_fun_forall_independent :
 forall (x : BDDvar) (bf : bool_fun),
 bool_fun_independent bf x -> bool_fun_eq (bool_fun_forall x bf) bf.

Lemma bool_fun_forall_zero :
 forall x : BDDvar,
 bool_fun_eq (bool_fun_forall x bool_fun_zero) bool_fun_zero.

Lemma bool_fun_forall_one :
 forall x : BDDvar, bool_fun_eq (bool_fun_forall x bool_fun_one) bool_fun_one.

Lemma bool_fun_restrict_zero :
 forall (x : BDDvar) (b : bool),
 bool_fun_eq (bool_fun_restrict bool_fun_zero x b) bool_fun_zero.

Lemma bool_fun_restrict_one :
 forall (x : BDDvar) (b : bool),
 bool_fun_eq (bool_fun_restrict bool_fun_one x b) bool_fun_one.

Lemma bool_fun_restrict_preserves_eq :
 forall (bf1 bf2 : bool_fun) (x : BDDvar) (b : bool),
 bool_fun_eq bf1 bf2 ->
 bool_fun_eq (bool_fun_restrict bf1 x b) (bool_fun_restrict bf2 x b).

Lemma bool_fun_independent_zero :
 forall x : BDDvar, bool_fun_independent bool_fun_zero x.

Lemma bool_fun_independent_one :
 forall x : BDDvar, bool_fun_independent bool_fun_one x.

Lemma bool_fun_eq_independent :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq bf1 bf2 ->
 bool_fun_independent bf1 x -> bool_fun_independent bf2 x.

Lemma bool_fun_if_restrict_true :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x true)
   (bool_fun_restrict bf1 x true).

Lemma bool_fun_if_restrict_false :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x false)
   (bool_fun_restrict bf2 x false).

Lemma bool_fun_if_restrict :
 forall (bf1 bf2 : bool_fun) (x y : BDDvar) (b : bool),
 Neqb x y = false ->
 bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) y b)
   (bool_fun_if x (bool_fun_restrict bf1 y b) (bool_fun_restrict bf2 y b)).

Lemma bool_fun_if_restrict_true_independent :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_independent bf1 x ->
 bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x true) bf1.

Lemma bool_fun_if_restrict_false_independent :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_independent bf2 x ->
 bool_fun_eq (bool_fun_restrict (bool_fun_if x bf1 bf2) x false) bf2.

Lemma bool_fun_forall_orthogonal :
 forall (x u : BDDvar) (bf1 bf2 : bool_fun),
 Neqb x u = false ->
 bool_fun_eq (bool_fun_forall u (bool_fun_if x bf1 bf2))
   (bool_fun_if x (bool_fun_forall u bf1) (bool_fun_forall u bf2)).

Lemma bool_fun_independent_if :
 forall (x y : BDDvar) (bf1 bf2 : bool_fun),
 bool_fun_independent bf1 x ->
 bool_fun_independent bf2 x ->
 Neqb x y = false -> bool_fun_independent (bool_fun_if y bf1 bf2) x.

Lemma bool_fun_forall_if_egal :
 forall (x : BDDvar) (bf1 bf2 : bool_fun),
 bool_fun_independent bf1 x ->
 bool_fun_independent bf2 x ->
 bool_fun_eq (bool_fun_forall x (bool_fun_if x bf1 bf2))
   (bool_fun_and bf1 bf2).

Lemma bool_fun_if_eq_1 :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_if x bf1 bf2) bf1.

Lemma bool_fun_if_eq_2 :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_if x bf1 bf2) bf2.

Lemma bool_fun_ext_zero : bool_fun_ext bool_fun_zero.

Lemma bool_fun_ext_one : bool_fun_ext bool_fun_one.

Lemma bool_fun_ext_if :
 forall (bf1 bf2 : bool_fun) (x : BDDvar),
 bool_fun_ext bf1 -> bool_fun_ext bf2 -> bool_fun_ext (bool_fun_if x bf1 bf2).

End Bool_fun. *)
Require Import myMap.
(* myMap:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import Relation_Definitions.
Require Import List.

Require Import misc.

Section my_MapFold.

Variable M : Set.
Variable neutral : M.
Variable op : M -> M -> M.
Variable R : relation M.

Definition F (A : Set) (f : ad -> A -> M) (r : ad * A) 
  (m : M) := let (a, y) := r in op (f a y) m.

Hypothesis eq_R : equiv _ R.
Hypothesis op_assoc : forall a b c : M, R (op (op a b) c) (op a (op b c)).
Hypothesis op_neutral_left : forall a : M, R (op neutral a) a.
Hypothesis op_neutral_right : forall a : M, R (op a neutral) a.
Hypothesis
  op_eq : forall a b a1 b1 : M, R a a1 -> R b b1 -> R (op a b) (op a1 b1).

Lemma op_eq_2 : forall a b b1 : M, R b b1 -> R (op a b) (op a b1).

Lemma my_fold_right_aapp :
 forall (A : Set) (f : ad -> A -> M) (l l' : alist A),
 R (fold_right (F A f) neutral (aapp _ l l'))
   (op (fold_right (F A f) neutral l) (fold_right (F A f) neutral l')).

Lemma myMapFold_as_fold_1 :
 forall (A : Set) (f : ad -> A -> M) (m : Map A) (pf : ad -> ad),
 R (MapFold1 _ M neutral op f pf m)
   (fold_right (fun (r : ad * A) (m : M) => let (a, y) := r in op (f a y) m)
      neutral
      (MapFold1 _ (alist A) (anil A) (aapp A)
         (fun (a : ad) (y : A) => acons _ (a, y) (anil _)) pf m)).

Lemma myMapFold_as_fold :
 forall (A : Set) (f : ad -> A -> M) (m : Map A),
 R (MapFold _ M neutral op f m)
   (fold_right (fun (r : ad * A) (m : M) => let (a, y) := r in op (f a y) m)
      neutral (alist_of_Map _ m)).

End my_MapFold.

Lemma eqmap_equiv : forall A : Set, equiv _ (eqmap A).

Lemma MapMerge_assoc :
 forall (A : Set) (a b c : Map A),
 eqmap _ (MapMerge _ (MapMerge _ a b) c) (MapMerge _ a (MapMerge _ b c)).

Lemma MapMerge_neutral_left :
 forall (A : Set) (m : Map A), eqmap _ (MapMerge _ (M0 A) m) m.

Lemma MapMerge_neutral_right :
 forall (A : Set) (m : Map A), eqmap _ (MapMerge _ m (M0 _)) m.

Lemma MapMerge_eq :
 forall (A : Set) (a a1 b b1 : Map A),
 eqmap _ a a1 -> eqmap _ b b1 -> eqmap _ (MapMerge _ a b) (MapMerge _ a1 b1).

Lemma myMapFold_as_fold_2 :
 forall (A B : Set) (f : ad -> A -> Map B) (m : Map A),
 eqmap _ (MapFold _ (Map B) (M0 _) (MapMerge _) f m)
   (fold_right
      (fun (r : ad * A) (m : Map B) =>
       let (a, y) := r in MapMerge _ (f a y) m) (M0 _) 
      (alist_of_Map _ m)).

Lemma my_alist_of_map_lemma_1 :
 forall (A : Set) (m : Map A) (a : ad) (y : A),
 MapGet _ m a = Some y -> In (a, y) (alist_of_Map _ m).

Lemma my_alist_of_map_lemma_2 :
 forall (A : Set) (m : Map A) (pf fp : ad -> ad),
 (forall a : ad, fp (pf a) = a) ->
 forall (a : ad) (y : A),
 In (a, y)
   (MapFold1 _ _ (anil _) (aapp _)
      (fun (a : ad) (y : A) => acons _ (a, y) (anil _)) pf m) ->
 MapGet _ m (fp a) = Some y /\ pf (fp a) = a.

Lemma my_alist_of_map_lemma_3 :
 forall (A : Set) (m : Map A) (a : ad) (y : A),
 In (a, y) (alist_of_Map _ m) -> MapGet _ m a = Some y.

Definition f_OK (A B : Set) (f : ad -> A -> Map B) :=
  forall (a a1 a2 : ad) (y1 y2 : A),
  in_dom _ a (f a1 y1) = true -> in_dom _ a (f a2 y2) = true -> a1 = a2.

Definition no_dup_alist (A : Set) (l : alist A) :=
  forall (a : ad) (y1 y2 : A), In (a, y1) l -> In (a, y2) l -> y1 = y2.

Lemma no_dup_alist_of_Map :
 forall (A : Set) (m : Map A), no_dup_alist _ (alist_of_Map _ m).

Lemma my_fold_right_lemma :
 forall (A B : Set) (f : ad -> A -> Map B) (l : alist A),
 f_OK _ _ f ->
 no_dup_alist _ l ->
 forall (a : ad) (y : B),
 MapGet _
   (fold_right
      (fun (r : ad * A) (m0 : Map B) =>
       let (a0, y0) := r in MapMerge B (f a0 y0) m0) 
      (M0 B) l) a = Some y <->
 (exists a1 : ad,
    (exists y1 : A, In (a1, y1) l /\ MapGet _ (f a1 y1) a = Some y)).

Lemma myMapFold_lemma :
 forall (A B : Set) (f : ad -> A -> Map B) (m : Map A),
 f_OK _ _ f ->
 forall (a : ad) (y : B),
 MapGet _ (MapFold _ _ (M0 _) (MapMerge _) f m) a = Some y <->
 (exists a1 : ad,
    (exists y1 : A,
       MapGet _ m a1 = Some y1 /\ MapGet _ (f a1 y1) a = Some y)).

Section My_Map.

Variable A B : Set.

Fixpoint Mapn (n : nat) : Set :=
  match n with
  | O => A
  | S m => Map (Mapn m)
  end.

Definition MapGet2 (m : Map (Map A)) (a b : ad) :=
  match MapGet _ m a with
  | None => None 
  | Some m' => MapGet _ m' b
  end.

Definition MapGet3 (m : Map (Map (Map A))) (a b c : ad) :=
  match MapGet _ m a with
  | None => None
  | Some m' => MapGet2 m' b c
  end.

Definition MapPut2 (m : Map (Map A)) (a b : ad) (c : A) :=
  match MapGet _ m a with
  | Some m' => MapPut _ m a (MapPut _ m' b c)
  | None => MapPut _ m a (M1 _ b c)
  end.

Definition MapPut3 (m : Map (Map (Map A))) (a b c : ad) 
  (d : A) :=
  match MapGet _ m a with
  | Some m' => MapPut _ m a (MapPut2 m' b c d)
  | None => MapPut _ m a (M1 _ b (M1 _ c d))
  end.

Lemma MapPut2_semantics :
 forall (m : Map (Map A)) (a b a1 b1 : ad) (c : A),
 MapGet2 (MapPut2 m a b c) a1 b1 =
 (if Neqb a a1 && Neqb b b1 then Some c else MapGet2 m a1 b1).
 
Lemma MapPut3_semantics :
 forall (m : Map (Map (Map A))) (a b c a1 b1 c1 : ad) (d : A),
 MapGet3 (MapPut3 m a b c d) a1 b1 c1 =
 (if Neqb a a1 && (Neqb b b1 && Neqb c c1)
  then Some d
  else MapGet3 m a1 b1 c1).

Lemma makeM2_MapDom_lemma :
 forall (A : Set) (m1 m2 : Map A),
 makeM2 unit (MapDom A m1) (MapDom A m2) = MapDom A (makeM2 A m1 m2).

Fixpoint MapDomRestrTo_DomBy (m : Map A) : Map B -> Map A * Map unit :=
  match m with
  | M0 => fun _ : Map B => (M0 A, M0 unit)
  | M1 a y =>
      fun m' : Map B =>
      match MapGet B m' a with
      | None => (M0 A, M1 unit a tt)
      | _ => (m, M0 unit)
      end
  | M2 m1 m2 =>
      fun m' : Map B =>
      match m' with
      | M0 => (M0 A, MapDom A m)
      | M1 a' y' =>
          (match MapGet A m a' with
           | None => M0 A
           | Some y => M1 A a' y
           end, MapDom A (MapRemove A m a'))
      | M2 m'1 m'2 =>
          match MapDomRestrTo_DomBy m1 m'1 with
          | (x1, y1) =>
              match MapDomRestrTo_DomBy m2 m'2 with
              | (x2, y2) => (makeM2 A x1 x2, makeM2 unit y1 y2)
              end
          end
      end
  end.

Lemma MapDomRestrTo_DomBy_lemma_1 :
 forall (m : Map A) (m' : Map B),
 fst (MapDomRestrTo_DomBy m m') = MapDomRestrTo A B m m'.

Lemma MapDomRestrTo_DomBy_lemma_2 :
 forall (m : Map A) (m' : Map B),
 snd (MapDomRestrTo_DomBy m m') = MapDom A (MapDomRestrBy A B m m').

Fixpoint map_app_list1 (pf : ad -> ad) (l : list ad) 
 (m : Map A) {struct m} : list ad :=
  match m with
  | M0 => l
  | M1 a y => pf a :: l
  | M2 m1 m2 =>
      map_app_list1 (fun a0 : ad => pf (Ndouble_plus_one a0))
        (map_app_list1 (fun a0 : ad => pf (Ndouble a0)) l m1) m2
  end.

Lemma map_app_list1_lemma_1 :
 forall (m : Map A) (pf : ad -> ad) (l : list ad) (a : ad),
 In a l -> In a (map_app_list1 pf l m).

Lemma map_app_list1_lemma_2 :
 forall (m : Map A) (pf fp : ad -> ad) (l : list ad),
 (forall a0 : ad, fp (pf a0) = a0) ->
 forall a : ad,
 In a (map_app_list1 pf l m) ->
 In a l \/ in_dom _ (fp a) m = true /\ pf (fp a) = a.

Lemma map_app_list1_lemma_3 :
 forall (m : Map A) (pf fp : ad -> ad) (l : list ad),
 (forall a0 : ad, fp (pf a0) = a0) ->
 no_dup_list _ l ->
 (forall a : ad, in_dom _ a m = true -> ~ In (pf a) l) ->
 no_dup_list _ (map_app_list1 pf l m).

Lemma map_app_list1_lemma_4 :
 forall (m : Map A) (pf : ad -> ad) (l : list ad) (a : ad),
 in_dom _ a m = true -> In (pf a) (map_app_list1 pf l m).

Fixpoint MapDomRestrByApp1 (pf : ad -> ad) (l : list ad) 
 (m : Map A) {struct m} : Map B -> list ad :=
  match m with
  | M0 => fun _ : Map B => l
  | M1 a y =>
      fun m' : Map B =>
      match MapGet B m' a with
      | None => pf a :: l
      | _ => l
      end
  | M2 m1 m2 =>
      fun m' : Map B =>
      match m' with
      | M0 => map_app_list1 pf l m
      | M1 a' y' => map_app_list1 pf l (MapRemove A m a')
      | M2 m'1 m'2 =>
          MapDomRestrByApp1 (fun a0 : ad => pf (Ndouble_plus_one a0))
            (MapDomRestrByApp1 (fun a0 : ad => pf (Ndouble a0)) l m1 m'1)
            m2 m'2
      end
  end.

Lemma MapDomRestrByApp1_lemma_1 :
 forall (m : Map A) (m' : Map B) (l : list ad) (pf : ad -> ad) (a : ad),
 In a l -> In a (MapDomRestrByApp1 pf l m m').

Lemma MapDomRestrByApp1_lemma_2 :
 forall (m : Map A) (m' : Map B) (l : list ad) (pf : ad -> ad) (a : ad),
 in_dom _ a m = true ->
 in_dom _ a m' = false -> In (pf a) (MapDomRestrByApp1 pf l m m').

Lemma MapDomRestrByApp1_lemma_3 :
 forall (m : Map A) (m' : Map B) (l : list ad) (pf fp : ad -> ad),
 (forall a : ad, fp (pf a) = a) ->
 forall a : ad,
 In a (MapDomRestrByApp1 pf l m m') ->
 In a l \/
 in_dom _ (fp a) m = true /\ in_dom _ (fp a) m' = false /\ pf (fp a) = a.

Lemma MapDomRestrByApp1_lemma_4 :
 forall (m : Map A) (m' : Map B) (l : list ad) (pf fp : ad -> ad),
 (forall a : ad, fp (pf a) = a) ->
 (forall a : ad,
  in_dom _ a m = true -> in_dom _ a m' = false -> ~ In (pf a) l) ->
 no_dup_list _ l -> no_dup_list _ (MapDomRestrByApp1 pf l m m').

End My_Map. *)
Require Import config.
(* config:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import Wf_nat.
Require Import List.

Require Import misc.
Require Import bool_fun.
Require Import myMap.

Section BDD_config_1.

Definition BDDzero := N0.
Definition BDDone := Npos 1.
Definition BDDstate := Map (BDDvar * (ad * ad)).
Definition BDDsharing_map := Map (Map (Map ad)).
Definition BDDfree_list := list ad.
Definition BDDneg_memo := Map ad.
Definition BDDor_memo := Map (Map ad).
Definition BDDuniv_memo := Map (Map ad).
Definition BDDconfig :=
  (BDDstate *
   (BDDsharing_map *
    (BDDfree_list * (ad * (BDDneg_memo * (BDDor_memo * BDDuniv_memo))))))%type.

Definition initBDDstate := newMap (BDDvar * (ad * ad)).
Definition initBDDsharing_map := newMap (Map (Map ad)).
Definition initBDDfree_list := nil (A:=ad).
Definition initBDDneg_memo := newMap ad.
Definition initBDDor_memo := newMap (Map ad).
Definition initBDDuniv_memo := newMap (Map ad).
Definition initBDDconfig :=
  (initBDDstate,
  (initBDDsharing_map,
  (initBDDfree_list,
  (Npos 2, (initBDDneg_memo, (initBDDor_memo, initBDDuniv_memo)))))).

Definition bs_node_height (bs : BDDstate) (node : ad) :=
  match MapGet _ bs node with
  | None => N0
  | Some (x, (l, r)) => ad_S x
  end.

Definition node_height (cfg : BDDconfig) (node : ad) :=
  bs_node_height (fst cfg) node.

Fixpoint bool_fun_of_BDD_1 (bs : BDDstate) (node : ad) 
 (bound : nat) {struct bound} : bool_fun :=
  match bound with
  | O =>   bool_fun_zero
  | S bound' =>
      match MapGet _ bs node with
      | None => if Neqb node BDDzero then bool_fun_zero else bool_fun_one
      | Some (x, (l, r)) =>
          bool_fun_if x (bool_fun_of_BDD_1 bs r bound')
            (bool_fun_of_BDD_1 bs l bound')
      end
  end.

Definition bool_fun_of_BDD_bs (bs : BDDstate) (node : ad) :=
  bool_fun_of_BDD_1 bs node (S (nat_of_N (bs_node_height bs node))).

Definition bool_fun_of_BDD (cfg : BDDconfig) := bool_fun_of_BDD_bs (fst cfg).

Definition nodes_preserved_bs (bs bs' : BDDstate) :=
  forall (x : BDDvar) (l r node : ad),
  MapGet _ bs node = Some (x, (l, r)) ->
  MapGet _ bs' node = Some (x, (l, r)).

Definition nodes_preserved (cfg cfg' : BDDconfig) :=
  nodes_preserved_bs (fst cfg) (fst cfg').

Inductive nodes_reachable (bs : BDDstate) : ad -> ad -> Prop :=
  | nodes_reachable_0 : forall node : ad, nodes_reachable bs node node
  | nodes_reachable_1 :
      forall (node node' l r : ad) (x : BDDvar),
      MapGet _ bs node = Some (x, (l, r)) ->
      nodes_reachable bs l node' -> nodes_reachable bs node node'
  | nodes_reachable_2 :
      forall (node node' l r : ad) (x : BDDvar),
      MapGet _ bs node = Some (x, (l, r)) ->
      nodes_reachable bs r node' -> nodes_reachable bs node node'.

Definition node_preserved_bs (bs bs' : BDDstate) (node : ad) :=
  forall (x : BDDvar) (l r node' : ad),
  nodes_reachable bs node node' ->
  MapGet _ bs node' = Some (x, (l, r)) ->
  MapGet _ bs' node' = Some (x, (l, r)).

Definition node_preserved (cfg cfg' : BDDconfig) :=
  node_preserved_bs (fst cfg) (fst cfg').

Definition used_node_bs (bs : BDDstate) (ul : list ad) 
  (node : ad) :=
  exists node' : ad, In node' ul /\ nodes_reachable bs node' node. 

Definition used_node'_bs (bs : BDDstate) (ul : list ad) 
  (node : ad) := node = BDDzero \/ node = BDDone \/ used_node_bs bs ul node. 

Definition used_node (cfg : BDDconfig) := used_node_bs (fst cfg).

Definition used_node' (cfg : BDDconfig) := used_node'_bs (fst cfg).

Definition node_OK (bs : BDDstate) (node : ad) :=
  node = BDDzero \/ node = BDDone \/ in_dom _ node bs = true.

Definition config_node_OK (cfg : BDDconfig) := node_OK (fst cfg).

Definition no_new_node_bs (bs bs' : BDDstate) :=
  forall (x : BDDvar) (l r node : ad),
  MapGet _ bs' node = Some (x, (l, r)) ->
  MapGet _ bs node = Some (x, (l, r)).

Definition no_new_node (cfg cfg' : BDDconfig) :=
  no_new_node_bs (fst cfg) (fst cfg').

Inductive BDDbounded (bs : BDDstate) : ad -> BDDvar -> Prop :=
  | BDDbounded_0 : forall n : BDDvar, BDDbounded bs BDDzero n
  | BDDbounded_1 : forall n : BDDvar, BDDbounded bs BDDone n
  | BDDbounded_2 :
      forall (node : ad) (n x : BDDvar) (l r : ad),
      MapGet _ bs node = Some (x, (l, r)) ->
      BDDcompare x n = Datatypes.Lt ->
      Neqb l r = false ->
      BDDbounded bs l x -> BDDbounded bs r x -> BDDbounded bs node n.

Definition BDD_OK (bs : BDDstate) (node : ad) :=
  match MapGet _ bs node with
  | None => node = BDDzero \/ node = BDDone
  | Some (n, _) => BDDbounded bs node (ad_S n)
  end.

Definition BDDstate_OK (bs : BDDstate) :=
  MapGet _ bs BDDzero = None /\
  MapGet _ bs BDDone = None /\
  (forall a : ad, in_dom _ a bs = true -> BDD_OK bs a).

Definition BDDsharing_OK (bs : BDDstate) (share : BDDsharing_map) :=
  forall (x : BDDvar) (l r a : ad),
  MapGet3 _ share l r x = Some a <-> MapGet _ bs a = Some (x, (l, r)).

Definition BDDfree_list_OK (bs : BDDstate) (fl : BDDfree_list) 
  (cnt : ad) :=
  no_dup_list _ fl /\
  (forall node : ad,
   In node fl <->
   Nleb (Npos 2) node = true /\
   Nleb (ad_S node) cnt = true /\ MapGet _ bs node = None).

Definition cnt_OK (bs : BDDstate) (cnt : ad) :=
  Nleb (Npos 2) cnt = true /\
  (forall a : ad, Nleb cnt a = true -> MapGet _ bs a = None).

Definition BDDneg_memo_OK (bs : BDDstate) (negm : BDDneg_memo) :=
  forall node node' : ad,
  MapGet _ negm node = Some node' ->
  node_OK bs node /\
  node_OK bs node' /\
  Neqb (bs_node_height bs node') (bs_node_height bs node) = true /\
  bool_fun_eq (bool_fun_of_BDD_bs bs node')
    (bool_fun_neg (bool_fun_of_BDD_bs bs node)).

Definition BDDor_memo_OK (bs : BDDstate) (orm : BDDor_memo) :=
  forall node1 node2 node : ad,
  MapGet2 _ orm node1 node2 = Some node ->
  node_OK bs node1 /\
  node_OK bs node2 /\
  node_OK bs node /\
  Nleb (bs_node_height bs node)
    (BDDvar_max (bs_node_height bs node1) (bs_node_height bs node2)) = true /\
  bool_fun_eq (bool_fun_of_BDD_bs bs node)
    (bool_fun_or (bool_fun_of_BDD_bs bs node1) (bool_fun_of_BDD_bs bs node2)).

Definition BDDuniv_memo_OK (bs : BDDstate) (um : BDDuniv_memo) :=
  forall (x : BDDvar) (node node' : ad),
  MapGet2 _ um node x = Some node' ->
  node_OK bs node /\
  node_OK bs node' /\
  Nleb (bs_node_height bs node') (bs_node_height bs node) = true /\
  bool_fun_eq (bool_fun_of_BDD_bs bs node')
    (bool_fun_forall x (bool_fun_of_BDD_bs bs node)).

Definition BDDconfig_OK (cfg : BDDconfig) :=
  BDDstate_OK (fst cfg) /\
  BDDsharing_OK (fst cfg) (fst (snd cfg)) /\
  BDDfree_list_OK (fst cfg) (fst (snd (snd cfg))) (fst (snd (snd (snd cfg)))) /\
  cnt_OK (fst cfg) (fst (snd (snd (snd cfg)))) /\
  BDDneg_memo_OK (fst cfg) (fst (snd (snd (snd (snd cfg))))) /\
  BDDor_memo_OK (fst cfg) (fst (snd (snd (snd (snd (snd cfg)))))) /\
  BDDuniv_memo_OK (fst cfg) (snd (snd (snd (snd (snd (snd cfg)))))).

Definition used_list_OK_bs (bs : BDDstate) (ul : list ad) :=
  forall node : ad, In node ul -> node_OK bs node.

Definition used_list_OK (cfg : BDDconfig) := used_list_OK_bs (fst cfg).

Definition used_nodes_preserved_bs (bs bs' : BDDstate) 
  (ul : list ad) :=
  forall node : ad, In node ul -> node_preserved_bs bs bs' node.

Definition used_nodes_preserved (cfg cfg' : BDDconfig) :=
  used_nodes_preserved_bs (fst cfg) (fst cfg').

Definition gc_OK (gc : BDDconfig -> list ad -> BDDconfig) :=
  forall (cfg : BDDconfig) (ul : list ad),
  BDDconfig_OK cfg ->
  used_list_OK cfg ul ->
  BDDconfig_OK (gc cfg ul) /\
  used_nodes_preserved cfg (gc cfg ul) ul /\ no_new_node cfg (gc cfg ul).

Lemma initBDDstate_OK : BDDstate_OK initBDDstate.

Lemma initBDDsharing_map_OK : BDDsharing_OK initBDDstate initBDDsharing_map.

Lemma initBDDfree_list_OK :
 BDDfree_list_OK initBDDstate initBDDfree_list (Npos 2).

Lemma initBDDneg_memo_OK :
 forall bs : BDDstate, BDDneg_memo_OK bs initBDDneg_memo.

Lemma initBDDor_memo_OK :
 forall bs : BDDstate, BDDor_memo_OK bs initBDDor_memo.

Lemma initBDDuniv_memo_OK :
 forall bs : BDDstate, BDDuniv_memo_OK bs initBDDuniv_memo.

Lemma initBDDconfig_OK : BDDconfig_OK initBDDconfig.

Lemma config_OK_zero :
 forall cfg : BDDconfig,
 BDDconfig_OK cfg -> MapGet _ (fst cfg) BDDzero = None.

Lemma config_OK_one :
 forall cfg : BDDconfig,
 BDDconfig_OK cfg -> MapGet _ (fst cfg) BDDone = None.

Lemma zero_OK : forall cfg : BDDconfig, config_node_OK cfg BDDzero.

Lemma one_OK : forall cfg : BDDconfig, config_node_OK cfg BDDone.

Lemma node_height_zero :
 forall cfg : BDDconfig,
 BDDconfig_OK cfg -> Neqb (node_height cfg BDDzero) N0 = true.

Lemma node_height_one :
 forall cfg : BDDconfig,
 BDDconfig_OK cfg -> Neqb (node_height cfg BDDone) N0 = true.

Lemma nodes_preserved_bs_trans :
 forall bs1 bs2 bs3 : BDDstate,
 nodes_preserved_bs bs1 bs2 ->
 nodes_preserved_bs bs2 bs3 -> nodes_preserved_bs bs1 bs3.

Lemma nodes_preserved_bs_refl :
 forall bs : BDDstate, nodes_preserved_bs bs bs.

Lemma nodes_preserved_trans :
 forall cfg1 cfg2 cfg3 : BDDconfig,
 nodes_preserved cfg1 cfg2 ->
 nodes_preserved cfg2 cfg3 -> nodes_preserved cfg1 cfg3.

Lemma nodes_preserved_refl : forall cfg : BDDconfig, nodes_preserved cfg cfg.

Lemma increase_bound :
 forall (bs : BDDstate) (n n' : BDDvar) (node : ad),
 BDDbounded bs node n ->
 BDDcompare n n' = Datatypes.Lt -> BDDbounded bs node n'.

Lemma nodes_preserved_bounded :
 forall (bs bs' : BDDstate) (n : BDDvar) (node : ad),
 nodes_preserved_bs bs bs' -> BDDbounded bs node n -> BDDbounded bs' node n.

Lemma BDDbounded_lemma :
 forall (bs : BDDstate) (node : ad) (n : BDDvar),
 BDDbounded bs node n ->
 node = BDDzero \/
 node = BDDone \/
 (exists x : BDDvar,
    (exists l : BDDvar,
       (exists r : BDDvar,
          MapGet _ bs node = Some (x, (l, r)) /\
          BDDcompare x n = Datatypes.Lt /\

Lemma BDD_OK_node_OK :
 forall (bs : BDDstate) (node : ad), BDD_OK bs node -> node_OK bs node.

Lemma node_OK_BDD_OK :
 forall (bs : BDDstate) (node : ad),
 BDDstate_OK bs -> node_OK bs node -> BDD_OK bs node.

Lemma bs_node_height_left :
 forall (bs : BDDstate) (node l r : ad) (x : BDDvar),
 BDDstate_OK bs ->
 MapGet _ bs node = Some (x, (l, r)) ->
 BDDcompare (bs_node_height bs l) (bs_node_height bs node) = Datatypes.Lt.

Lemma bs_node_height_right :
 forall (bs : BDDstate) (node l r : ad) (x : BDDvar),
 BDDstate_OK bs ->
 MapGet _ bs node = Some (x, (l, r)) ->
 BDDcompare (bs_node_height bs r) (bs_node_height bs node) = Datatypes.Lt.

Lemma internal_node_lemma :
 forall (bs : BDDstate) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs ->
 MapGet _ bs node = Some (x, (l, r)) ->
 Neqb l r = false /\ BDDbounded bs l x /\ BDDbounded bs r x.

Lemma high_bounded :
 forall (bs : BDDstate) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs -> MapGet _ bs node = Some (x, (l, r)) -> BDDbounded bs r x.

Lemma low_bounded :
 forall (bs : BDDstate) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs -> MapGet _ bs node = Some (x, (l, r)) -> BDDbounded bs l x.

Lemma BDDbounded_node_OK :
 forall (bs : BDDstate) (node : ad) (n : BDDvar),
 BDDbounded bs node n -> node_OK bs node.

Lemma high_OK :
 forall (bs : BDDstate) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs -> MapGet _ bs node = Some (x, (l, r)) -> node_OK bs r.

Lemma low_OK :
 forall (bs : BDDstate) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs -> MapGet _ bs node = Some (x, (l, r)) -> node_OK bs l.

Lemma low_high_neq :
 forall (cfg : BDDconfig) (x : BDDvar) (l r node : ad),
 BDDconfig_OK cfg ->
 MapGet _ (fst cfg) node = Some (x, (l, r)) -> Neqb l r = false.

Lemma bs_node_height_left_le :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 Nleb (bs_node_height bs l) x = true.

Lemma bs_node_height_right_le :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 Nleb (bs_node_height bs r) x = true.

Lemma no_duplicate_node :
 forall (bs : BDDstate) (share : BDDsharing_map),
 BDDstate_OK bs ->
 BDDsharing_OK bs share ->
 forall (x : BDDvar) (l r node1 node2 : ad),
 MapGet _ bs node1 = Some (x, (l, r)) ->
 MapGet _ bs node2 = Some (x, (l, r)) -> node1 = node2.

Lemma int_node_gt_1 :
 forall (bs : BDDstate) (node : ad),
 BDDstate_OK bs -> in_dom _ node bs = true -> Nleb (Npos 2) node = true.

Lemma int_node_lt_cnt :
 forall (bs : BDDstate) (cnt node : ad),
 cnt_OK bs cnt -> in_dom _ node bs = true -> Nleb (ad_S node) cnt = true.

Lemma nodes_preserved_bs_node_OK :
 forall (bs1 bs2 : BDDstate) (node : ad),
 nodes_preserved_bs bs1 bs2 -> node_OK bs1 node -> node_OK bs2 node.

Lemma nodes_preserved_config_node_OK :
 forall (cfg1 cfg2 : BDDconfig) (node : ad),
 nodes_preserved cfg1 cfg2 ->
 config_node_OK cfg1 node -> config_node_OK cfg2 node.

Lemma nodes_preserved_bs_node_height_eq :
 forall (bs1 bs2 : BDDstate) (node : ad),
 nodes_preserved_bs bs1 bs2 ->
 BDDstate_OK bs1 ->
 BDDstate_OK bs2 ->
 node_OK bs1 node ->
 Neqb (bs_node_height bs2 node) (bs_node_height bs1 node) = true.

Lemma nodes_preserved_node_height_eq :
 forall (cfg1 cfg2 : BDDconfig) (node : ad),
 BDDconfig_OK cfg1 ->
 BDDconfig_OK cfg2 ->
 nodes_preserved cfg1 cfg2 ->
 config_node_OK cfg1 node ->
 Neqb (node_height cfg2 node) (node_height cfg1 node) = true.

  Section Components.

  Variable cfg : BDDconfig.
  Hypothesis cfg_OK : BDDconfig_OK cfg.

  Definition bs_of_cfg := fst cfg.
  Definition share_of_cfg := fst (snd cfg).
  Definition fl_of_cfg := fst (snd (snd cfg)).
  Definition cnt_of_cfg := fst (snd (snd (snd cfg))).
  Definition negm_of_cfg := fst (snd (snd (snd (snd cfg)))).
  Definition orm_of_cfg := fst (snd (snd (snd (snd (snd cfg))))).
  Definition um_of_cfg := snd (snd (snd (snd (snd (snd cfg))))).

  Lemma cfg_comp :
   cfg =
   (bs_of_cfg,
   (share_of_cfg,
   (fl_of_cfg, (cnt_of_cfg, (negm_of_cfg, (orm_of_cfg, um_of_cfg)))))).

  Lemma bs_of_cfg_OK : BDDstate_OK bs_of_cfg.

  Lemma share_of_cfg_OK : BDDsharing_OK bs_of_cfg share_of_cfg.

  Lemma fl_of_cfg_OK : BDDfree_list_OK bs_of_cfg fl_of_cfg cnt_of_cfg.

  Lemma cnt_of_cfg_OK : cnt_OK bs_of_cfg cnt_of_cfg.

  Lemma negm_of_cfg_OK : BDDneg_memo_OK bs_of_cfg negm_of_cfg.

  Lemma orm_of_cfg_OK : BDDor_memo_OK bs_of_cfg orm_of_cfg.
 
  Lemma um_of_cfg_OK : BDDuniv_memo_OK bs_of_cfg um_of_cfg.

  End Components.

Lemma nodes_reachable_lemma_1 :
 forall (bs : BDDstate) (node node' : ad),
 nodes_reachable bs node node' ->
 node = node' \/
 (exists x : BDDvar,
    (exists l : ad,
       (exists r : ad,
          MapGet _ bs node = Some (x, (l, r)) /\
          (nodes_reachable bs l node' \/ nodes_reachable bs r node')))).

Lemma nodes_reachable_trans :
 forall (bs : BDDstate) (node1 node2 node3 : ad),
 nodes_reachable bs node1 node2 ->
 nodes_reachable bs node2 node3 -> nodes_reachable bs node1 node3.

Lemma reachable_node_OK_1 :
 forall (bs : BDDstate) (n : nat) (node1 node2 : ad),
 BDDstate_OK bs ->
 n = nat_of_N (bs_node_height bs node1) ->
 node_OK bs node1 -> nodes_reachable bs node1 node2 -> node_OK bs node2.

Lemma reachable_node_OK :
 forall (bs : BDDstate) (node1 node2 : ad),
 BDDstate_OK bs ->
 node_OK bs node1 -> nodes_reachable bs node1 node2 -> node_OK bs node2.

Lemma nodes_reachableBDDzero :
 forall (bs : BDDstate) (node : ad),
 BDDstate_OK bs -> nodes_reachable bs BDDzero node -> node = BDDzero.

Lemma nodes_reachableBDDone :
 forall (bs : BDDstate) (node : ad),
 BDDstate_OK bs -> nodes_reachable bs BDDone node -> node = BDDone.

Lemma used_node'_used_node_bs :
 forall (bs : BDDstate) (ul : list ad) (node : ad),
 used_node_bs bs ul node -> used_node'_bs bs ul node.

Lemma high_used_bs :
 forall (bs : BDDstate) (ul : list ad) (x : BDDvar) (l r node : ad),
 used_node_bs bs ul node ->
 MapGet _ bs node = Some (x, (l, r)) -> used_node_bs bs ul r.

Lemma high_used'_bs :
 forall (bs : BDDstate) (ul : list ad) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs ->
 used_node'_bs bs ul node ->
 MapGet _ bs node = Some (x, (l, r)) -> used_node'_bs bs ul r.

Lemma low_used_bs :
 forall (bs : BDDstate) (ul : list ad) (x : BDDvar) (l r node : ad),
 used_node_bs bs ul node ->
 MapGet _ bs node = Some (x, (l, r)) -> used_node_bs bs ul l.

Lemma low_used'_bs :
 forall (bs : BDDstate) (ul : list ad) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs ->
 used_node'_bs bs ul node ->
 MapGet _ bs node = Some (x, (l, r)) -> used_node'_bs bs ul l.

Lemma high_used :
 forall (cfg : BDDconfig) (ul : list ad) (x : BDDvar) (l r node : ad),
 used_node cfg ul node ->
 MapGet _ (fst cfg) node = Some (x, (l, r)) -> used_node cfg ul r.

Lemma high_used' :
 forall (cfg : BDDconfig) (ul : list ad) (x : BDDvar) (l r node : ad),
 BDDconfig_OK cfg ->
 used_node' cfg ul node ->
 MapGet _ (fst cfg) node = Some (x, (l, r)) -> used_node' cfg ul r.

Lemma low_used :
 forall (cfg : BDDconfig) (ul : list ad) (x : BDDvar) (l r node : ad),
 used_node cfg ul node ->
 MapGet _ (fst cfg) node = Some (x, (l, r)) -> used_node cfg ul l.

Lemma low_used' :
 forall (cfg : BDDconfig) (ul : list ad) (x : BDDvar) (l r node : ad),
 BDDconfig_OK cfg ->
 used_node' cfg ul node ->
 MapGet _ (fst cfg) node = Some (x, (l, r)) -> used_node' cfg ul l.

Lemma used_node_OK_bs :
 forall (bs : BDDstate) (ul : list ad) (node : ad),
 BDDstate_OK bs ->
 used_list_OK_bs bs ul -> used_node_bs bs ul node -> node_OK bs node.

Lemma used_node'_OK_bs :
 forall (bs : BDDstate) (ul : list ad) (node : ad),
 BDDstate_OK bs ->
 used_list_OK_bs bs ul -> used_node'_bs bs ul node -> node_OK bs node.

Lemma used_node_OK :
 forall (cfg : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul -> used_node cfg ul node -> config_node_OK cfg node.

Lemma used_node'_OK :
 forall (cfg : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul -> used_node' cfg ul node -> config_node_OK cfg node.

Lemma nodes_preserved_used_nodes_preserved :
 forall (cfg cfg' : BDDconfig) (ul : list ad),
 nodes_preserved cfg cfg' -> used_nodes_preserved cfg cfg' ul.

Lemma node_preserved_bs_reachable_1 :
 forall bs bs' : BDDstate,
 BDDstate_OK bs ->
 forall (n : nat) (node node' : ad),
 n = nat_of_N (bs_node_height bs node) ->
 node_preserved_bs bs bs' node ->
 nodes_reachable bs node node' -> nodes_reachable bs' node node'.

Lemma node_preserved_bs_reachable :
 forall (bs bs' : BDDstate) (node node' : ad),
 BDDstate_OK bs ->
 node_preserved_bs bs bs' node ->
 nodes_reachable bs node node' -> nodes_reachable bs' node node'.

Lemma node_preserved_bs_trans :
 forall (bs1 bs2 bs3 : BDDstate) (node : ad),
 BDDstate_OK bs1 ->
 node_preserved_bs bs1 bs2 node ->
 node_preserved_bs bs2 bs3 node -> node_preserved_bs bs1 bs3 node.

Lemma used_nodes_preserved_trans :
 forall (cfg1 cfg2 cfg3 : BDDconfig) (ul : list ad),
 BDDconfig_OK cfg1 ->
 used_nodes_preserved cfg1 cfg2 ul ->
 used_nodes_preserved cfg2 cfg3 ul -> used_nodes_preserved cfg1 cfg3 ul.

Lemma used_nodes_preserved_refl :
 forall (cfg : BDDconfig) (ul : list ad), used_nodes_preserved cfg cfg ul.

Lemma BDDzero_preserved :
 forall bs bs' : BDDstate, BDDstate_OK bs -> node_preserved_bs bs bs' BDDzero.

Lemma BDDone_preserved :
 forall bs bs' : BDDstate, BDDstate_OK bs -> node_preserved_bs bs bs' BDDone.

Lemma used_nodes_preserved_preserved_bs :
 forall (bs bs' : BDDstate) (ul : list ad) (node : ad),
 used_nodes_preserved_bs bs bs' ul ->
 used_node_bs bs ul node -> node_preserved_bs bs bs' node.

Lemma used_nodes_preserved_preserved'_bs :
 forall (bs bs' : BDDstate) (ul : list ad) (node : ad),
 BDDstate_OK bs ->
 used_nodes_preserved_bs bs bs' ul ->
 used_node'_bs bs ul node -> node_preserved_bs bs bs' node.

Lemma node_preserved_OK_bs :
 forall (bs bs' : BDDstate) (node : ad),
 node_OK bs node -> node_preserved_bs bs bs' node -> node_OK bs' node.

Lemma used_nodes_preserved_list_OK_bs :
 forall (bs bs' : BDDstate) (ul : list ad),
 used_list_OK_bs bs ul ->
 used_nodes_preserved_bs bs bs' ul -> used_list_OK_bs bs' ul.

Lemma used_nodes_preserved_list_OK :
 forall (cfg cfg' : BDDconfig) (ul : list ad),
 used_list_OK cfg ul ->
 used_nodes_preserved cfg cfg' ul -> used_list_OK cfg' ul.

Lemma used_node_cons_node_ul :
 forall (cfg : BDDconfig) (ul : list ad) (node : ad),
 used_node cfg (node :: ul) node.

Lemma used_node'_cons_node_ul :
 forall (cfg : BDDconfig) (ul : list ad) (node : ad),
 used_node' cfg (node :: ul) node.

Lemma used_node_cons_node'_ul :
 forall (cfg : BDDconfig) (ul : list ad) (node node' : ad),
 used_node cfg ul node -> used_node cfg (node' :: ul) node.

Lemma used_node'_cons_node'_ul :
 forall (cfg : BDDconfig) (ul : list ad) (node node' : ad),
 used_node' cfg ul node -> used_node' cfg (node' :: ul) node.

Lemma used_nodes_preserved_bs_cons :
 forall (bs bs' : BDDstate) (ul : list ad) (node : ad),
 used_nodes_preserved_bs bs bs' (node :: ul) ->
 used_nodes_preserved_bs bs bs' ul.

Lemma used_nodes_preserved_cons :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 used_nodes_preserved cfg cfg' (node :: ul) ->
 used_nodes_preserved cfg cfg' ul.

Lemma node_OK_list_OK_bs :
 forall (bs : BDDstate) (ul : list ad) (node : ad),
 node_OK bs node -> used_list_OK_bs bs ul -> used_list_OK_bs bs (node :: ul).

Lemma node_OK_list_OK :
 forall (cfg : BDDconfig) (ul : list ad) (node : ad),
 config_node_OK cfg node ->
 used_list_OK cfg ul -> used_list_OK cfg (node :: ul).

Lemma used_nodes_preserved_node_OK :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node cfg ul node ->
 used_nodes_preserved cfg cfg' ul -> config_node_OK cfg' node.

Lemma used_nodes_preserved_node_OK' :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 used_nodes_preserved cfg cfg' ul -> config_node_OK cfg' node.

Lemma used_nodes_preserved_used_node :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_nodes_preserved cfg cfg' ul ->
 used_node cfg ul node -> used_node cfg' ul node.

Lemma used_nodes_preserved_used_node' :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_nodes_preserved cfg cfg' ul ->
 used_node' cfg ul node -> used_node' cfg' ul node.

Lemma bool_fun_of_BDD_1_change_bound :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (bound : nat) (node : ad),
 nat_of_N (bs_node_height bs node) < bound ->
 bool_fun_eq (bool_fun_of_BDD_1 bs node bound)
   (bool_fun_of_BDD_1 bs node (S (nat_of_N (bs_node_height bs node)))).

Lemma bool_fun_of_BDD_bs_zero :
 forall bs : BDDstate,
 BDDstate_OK bs -> bool_fun_eq (bool_fun_of_BDD_bs bs BDDzero) bool_fun_zero.

Lemma bool_fun_of_BDD_bs_one :
 forall bs : BDDstate,
 BDDstate_OK bs -> bool_fun_eq (bool_fun_of_BDD_bs bs BDDone) bool_fun_one.

Lemma bool_fun_of_BDD_bs_int :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 bool_fun_eq (bool_fun_of_BDD_bs bs node)
   (bool_fun_if x (bool_fun_of_BDD_bs bs r) (bool_fun_of_BDD_bs bs l)).

Lemma bool_fun_of_BDD_one :
 forall cfg : BDDconfig,
 BDDconfig_OK cfg -> bool_fun_eq (bool_fun_of_BDD cfg BDDone) bool_fun_one.

Lemma bool_fun_of_BDD_zero :
 forall cfg : BDDconfig,
 BDDconfig_OK cfg -> bool_fun_eq (bool_fun_of_BDD cfg BDDzero) bool_fun_zero.

Lemma bool_fun_of_BDD_int :
 forall (cfg : BDDconfig) (x : BDDvar) (l r node : ad),
 BDDconfig_OK cfg ->
 MapGet _ (fst cfg) node = Some (x, (l, r)) ->
 bool_fun_eq (bool_fun_of_BDD cfg node)
   (bool_fun_if x (bool_fun_of_BDD cfg r) (bool_fun_of_BDD cfg l)).

Lemma bool_fun_of_BDD_1_ext :
 forall (bound : nat) (bs : BDDstate) (node : ad),
 bool_fun_ext (bool_fun_of_BDD_1 bs node bound).

Lemma bool_fun_of_BDD_bs_ext :
 forall (bs : BDDstate) (node : ad),
 bool_fun_ext (bool_fun_of_BDD_bs bs node).

Lemma BDDvar_independent_1 :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (n : nat) (node : ad) (x : BDDvar),
 n = nat_of_N (bs_node_height bs node) ->
 node_OK bs node ->
 Nleb (bs_node_height bs node) x = true ->
 bool_fun_independent (bool_fun_of_BDD_bs bs node) x.

Lemma BDDvar_independent_bs :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (node : ad) (x : BDDvar),
 node_OK bs node ->
 Nleb (bs_node_height bs node) x = true ->
 bool_fun_independent (bool_fun_of_BDD_bs bs node) x.

Lemma BDDvar_independent_low :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 bool_fun_independent (bool_fun_of_BDD_bs bs l) x.

Lemma BDDvar_independent_high :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 bool_fun_independent (bool_fun_of_BDD_bs bs r) x.

Lemma bool_fun_of_BDD_bs_high :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 bool_fun_eq (bool_fun_of_BDD_bs bs r)
   (bool_fun_restrict (bool_fun_of_BDD_bs bs node) x true).

Lemma bool_fun_of_BDD_bs_low :
 forall bs : BDDstate,
 BDDstate_OK bs ->
 forall (x : BDDvar) (l r node : ad),
 MapGet _ bs node = Some (x, (l, r)) ->
 bool_fun_eq (bool_fun_of_BDD_bs bs l)
   (bool_fun_restrict (bool_fun_of_BDD_bs bs node) x false).

Lemma BDDunique_1 :
 forall (bs : BDDstate) (share : BDDsharing_map),
 BDDstate_OK bs ->
 BDDsharing_OK bs share ->
 forall (n : nat) (node1 node2 : ad),
 n =
 max (nat_of_N (bs_node_height bs node1))
   (nat_of_N (bs_node_height bs node2)) ->
 node_OK bs node1 ->
 node_OK bs node2 ->
 bool_fun_eq (bool_fun_of_BDD_bs bs node1) (bool_fun_of_BDD_bs bs node2) ->
 node1 = node2.

Lemma BDDunique :
 forall (cfg : BDDconfig) (node1 node2 : ad),
 BDDconfig_OK cfg ->
 config_node_OK cfg node1 ->
 config_node_OK cfg node2 ->
 bool_fun_eq (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2) ->
 Neqb node1 node2 = true.

Lemma nodes_preserved_bs_bool_fun_1 :
 forall (bs1 bs2 : BDDstate) (n : nat) (node : ad),
 n = nat_of_N (bs_node_height bs1 node) ->
 BDDstate_OK bs1 ->
 BDDstate_OK bs2 ->
 nodes_preserved_bs bs1 bs2 ->
 node_OK bs1 node ->
 bool_fun_eq (bool_fun_of_BDD_bs bs2 node) (bool_fun_of_BDD_bs bs1 node).

Lemma nodes_preserved_bs_bool_fun :
 forall (bs1 bs2 : BDDstate) (node : ad),
 BDDstate_OK bs1 ->
 BDDstate_OK bs2 ->
 nodes_preserved_bs bs1 bs2 ->
 node_OK bs1 node ->
 bool_fun_eq (bool_fun_of_BDD_bs bs2 node) (bool_fun_of_BDD_bs bs1 node).

Lemma nodes_preserved_bool_fun :
 forall (cfg1 cfg2 : BDDconfig) (node : ad),
 BDDconfig_OK cfg1 ->
 BDDconfig_OK cfg2 ->
 nodes_preserved cfg1 cfg2 ->
 config_node_OK cfg1 node ->
 bool_fun_eq (bool_fun_of_BDD cfg2 node) (bool_fun_of_BDD cfg1 node).

Lemma nodes_preserved_neg_memo_OK :
 forall (bs bs' : BDDstate) (negm : BDDneg_memo),
 nodes_preserved_bs bs bs' ->
 BDDstate_OK bs ->
 BDDstate_OK bs' -> BDDneg_memo_OK bs negm -> BDDneg_memo_OK bs' negm.

Lemma nodes_preserved_or_memo_OK :
 forall (bs bs' : BDDstate) (orm : BDDor_memo),
 nodes_preserved_bs bs bs' ->
 BDDstate_OK bs ->
 BDDstate_OK bs' -> BDDor_memo_OK bs orm -> BDDor_memo_OK bs' orm.

Lemma nodes_preserved_um_OK :
 forall (bs bs' : BDDstate) (um : BDDuniv_memo),
 nodes_preserved_bs bs bs' ->
 BDDstate_OK bs ->
 BDDstate_OK bs' -> BDDuniv_memo_OK bs um -> BDDuniv_memo_OK bs' um.

Lemma node_preserved_bs_bool_fun_1 :
 forall (n : nat) (bs bs' : BDDstate) (node : ad),
 BDDstate_OK bs ->
 BDDstate_OK bs' ->
 node_preserved_bs bs bs' node ->
 node_OK bs node ->
 n = nat_of_N (bs_node_height bs node) ->
 bool_fun_eq (bool_fun_of_BDD_bs bs' node) (bool_fun_of_BDD_bs bs node).

Lemma node_preserved_bs_bool_fun :
 forall (bs bs' : BDDstate) (node : ad),
 BDDstate_OK bs ->
 BDDstate_OK bs' ->
 node_preserved_bs bs bs' node ->
 node_OK bs node ->
 bool_fun_eq (bool_fun_of_BDD_bs bs' node) (bool_fun_of_BDD_bs bs node).

Lemma node_preserved_bs_node_height_eq :
 forall (bs bs' : BDDstate) (node : ad),
 BDDstate_OK bs ->
 BDDstate_OK bs' ->
 node_preserved_bs bs bs' node ->
 node_OK bs node ->
 Neqb (bs_node_height bs' node) (bs_node_height bs node) = true.

Lemma node_preserved_node_height_eq :
 forall (cfg cfg' : BDDconfig) (node : ad),
 BDDconfig_OK cfg ->
 BDDconfig_OK cfg' ->
 node_preserved cfg cfg' node ->
 config_node_OK cfg node ->
 Neqb (node_height cfg' node) (node_height cfg node) = true.

Lemma used_nodes_preserved_node_height_eq :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 BDDconfig_OK cfg' ->
 used_nodes_preserved cfg cfg' ul ->
 used_list_OK cfg ul ->
 used_node cfg ul node ->
 Neqb (node_height cfg' node) (node_height cfg node) = true.

Lemma used_nodes_preserved'_node_height_eq :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 BDDconfig_OK cfg' ->
 used_nodes_preserved cfg cfg' ul ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 Neqb (node_height cfg' node) (node_height cfg node) = true.

Lemma used_nodes_preserved_bs_bool_fun :
 forall (bs bs' : BDDstate) (ul : list ad) (node : ad),
 BDDstate_OK bs ->
 BDDstate_OK bs' ->
 used_nodes_preserved_bs bs bs' ul ->
 used_list_OK_bs bs ul ->
 used_node_bs bs ul node ->
 bool_fun_eq (bool_fun_of_BDD_bs bs' node) (bool_fun_of_BDD_bs bs node).

Lemma used_nodes_preserved'_bs_bool_fun :
 forall (bs bs' : BDDstate) (ul : list ad) (node : ad),
 BDDstate_OK bs ->
 BDDstate_OK bs' ->
 used_nodes_preserved_bs bs bs' ul ->
 used_list_OK_bs bs ul ->
 used_node'_bs bs ul node ->
 bool_fun_eq (bool_fun_of_BDD_bs bs' node) (bool_fun_of_BDD_bs bs node).

Lemma used_nodes_preserved_bool_fun :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 BDDconfig_OK cfg' ->
 used_nodes_preserved cfg cfg' ul ->
 used_list_OK cfg ul ->
 used_node cfg ul node ->
 bool_fun_eq (bool_fun_of_BDD cfg' node) (bool_fun_of_BDD cfg node).

Lemma used_nodes_preserved'_bool_fun :
 forall (cfg cfg' : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 BDDconfig_OK cfg' ->
 used_nodes_preserved cfg cfg' ul ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 bool_fun_eq (bool_fun_of_BDD cfg' node) (bool_fun_of_BDD cfg node).

Definition BDDneg_memo_put (cfg : BDDconfig) (node node' : ad) :=
  match cfg with
  | (bs, (share, (fl, (cnt, (negm, z))))) =>
      (bs, (share, (fl, (cnt, (MapPut _ negm node node', z)))))
  end.

Lemma BDDnegm_put_OK :
 forall (cfg : BDDconfig) (node node' : ad),
 BDDconfig_OK cfg ->
 config_node_OK cfg node ->
 config_node_OK cfg node' ->
 Neqb (node_height cfg node') (node_height cfg node) = true ->
 bool_fun_eq (bool_fun_of_BDD cfg node')
   (bool_fun_neg (bool_fun_of_BDD cfg node)) ->
 BDDconfig_OK (BDDneg_memo_put cfg node node').

Definition BDDor_memo_put (cfg : BDDconfig) (node1 node2 node' : ad) :=
  match cfg with
  | (bs, (share, (fl, (cnt, (negm, (orm, um)))))) =>
      (bs,
      (share, (fl, (cnt, (negm, (MapPut2 _ orm node1 node2 node', um))))))
  end.

Lemma BDDorm_put_nodes_preserved :
 forall (cfg : BDDconfig) (node1 node2 node' : ad),
 nodes_preserved cfg (BDDor_memo_put cfg node1 node2 node').

Lemma BDDorm_put_OK :
 forall (cfg : BDDconfig) (node1 node2 node' : ad),
 BDDconfig_OK cfg ->
 config_node_OK cfg node1 ->
 config_node_OK cfg node2 ->
 config_node_OK cfg node' ->
 Nleb (node_height cfg node')
   (BDDvar_max (node_height cfg node1) (node_height cfg node2)) = true ->
 bool_fun_eq (bool_fun_of_BDD cfg node')
   (bool_fun_or (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2)) ->
 BDDconfig_OK (BDDor_memo_put cfg node1 node2 node').

Lemma BDDnegm_put_nodes_preserved :
 forall (cfg : BDDconfig) (node node' : ad),
 nodes_preserved cfg (BDDneg_memo_put cfg node node').

Definition BDDuniv_memo_put (cfg : BDDconfig) (x : BDDvar)
  (node node' : ad) :=
  match cfg with
  | (bs, (share, (fl, (cnt, (negm, (orm, um)))))) =>
      (bs, (share, (fl, (cnt, (negm, (orm, MapPut2 ad um node x node'))))))
  end.

Lemma BDDum_put_nodes_preserved :
 forall (cfg : BDDconfig) (x : BDDvar) (node node' : ad),
 nodes_preserved cfg (BDDuniv_memo_put cfg x node node').

Lemma BDDum_put_OK :
 forall (cfg : BDDconfig) (x : BDDvar) (node node' : ad),
 BDDconfig_OK cfg ->
 config_node_OK cfg node ->
 config_node_OK cfg node' ->
 Nleb (node_height cfg node') (node_height cfg node) = true ->
 bool_fun_eq (bool_fun_of_BDD cfg node')
   (bool_fun_forall x (bool_fun_of_BDD cfg node)) ->
 BDDconfig_OK (BDDuniv_memo_put cfg x node node').

Lemma not_zero_is_one :
 forall (cfg : BDDconfig) (node : ad),
 config_node_OK cfg node ->
 in_dom _ node (fst cfg) = false ->
 Neqb node BDDzero = false -> Neqb node BDDone = true.

Lemma used'_zero :
 forall (cfg : BDDconfig) (ul : list ad), used_node' cfg ul BDDzero.

Lemma used'_one :
 forall (cfg : BDDconfig) (ul : list ad), used_node' cfg ul BDDone.

Lemma cons_OK_list_OK :
 forall (cfg : BDDconfig) (ul : list ad) (node : ad),
 used_list_OK cfg (node :: ul) -> used_list_OK cfg ul.

End BDD_config_1. *)
Require Import alloc.
(* alloc:
Require Import Bool.	
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.		
From IntMap Require Import Map.
From IntMap Require Import Allmaps.			
Require Import List.
Require Import Wf_nat.
  
Require Import misc.
Require Import bool_fun.
Require Import myMap.
Require Import config.

Section BDD_alloc.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Variable cfg : BDDconfig.
Variable x : BDDvar.
Variable l r : ad.
Variable ul : list ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis l_used' : used_node' cfg ul l.
Hypothesis r_used' : used_node' cfg ul r.
Hypothesis l_neq_r : Neqb l r = false.
Hypothesis
  xl_lt_x :
    forall (xl : BDDvar) (ll rl : ad),
    MapGet _ (bs_of_cfg cfg) l = Some (xl, (ll, rl)) ->
    BDDcompare xl x = Datatypes.Lt.
Hypothesis
  xr_lt_x :
    forall (xr : BDDvar) (lr rr : ad),
    MapGet _ (bs_of_cfg cfg) r = Some (xr, (lr, rr)) ->
    BDDcompare xr x = Datatypes.Lt.
Hypothesis
  no_dup :
    forall (x' : BDDvar) (l' r' a : ad),
    MapGet _ (bs_of_cfg cfg) a = Some (x', (l', r')) ->
    (x, (l, r)) <> (x', (l', r')).

Let new_cfg := gc cfg ul.

Lemma no_dup_new :
 forall (x' : BDDvar) (l' r' a : ad),
 MapGet _ (bs_of_cfg new_cfg) a = Some (x', (l', r')) ->
 (x, (l, r)) <> (x', (l', r')).

Lemma new_cfg_OK : BDDconfig_OK new_cfg.

Lemma new_cfg_nodes_preserved : used_nodes_preserved cfg new_cfg ul.

Lemma new_l_OK : node_OK (bs_of_cfg new_cfg) l.

Lemma new_r_OK : node_OK (bs_of_cfg new_cfg) r.

Lemma BDD_OK_l : BDD_OK (bs_of_cfg new_cfg) l.

Lemma BDD_OK_r : BDD_OK (bs_of_cfg new_cfg) r.

Lemma new_xl_lt_x :
 forall (xl : BDDvar) (ll rl : ad),
 MapGet _ (bs_of_cfg new_cfg) l = Some (xl, (ll, rl)) ->
 BDDcompare xl x = Datatypes.Lt.

Lemma new_xr_lt_x :
 forall (xr : BDDvar) (lr rr : ad),
 MapGet _ (bs_of_cfg new_cfg) r = Some (xr, (lr, rr)) ->
 BDDcompare xr x = Datatypes.Lt.

Definition BDDalloc : BDDconfig * ad :=
  match new_cfg with
  | (bs, (share, (fl, (cnt, (negm, orm))))) =>
      match fl with
      | a :: fl' =>
          (MapPut _ bs a (x, (l, r)),
          (MapPut3 _ share l r x a, (fl', (cnt, (negm, orm)))), a)
      | nil =>
          (MapPut _ bs cnt (x, (l, r)),
          (MapPut3 _ share l r x cnt, (fl, (ad_S cnt, (negm, orm)))), cnt)
      end
  end.
  
Lemma BDDalloc_lemma_1 :
 forall a : ad,
 MapGet _ (fst (fst BDDalloc)) a =
 (if Neqb a (snd BDDalloc)
  then Some (x, (l, r))
  else MapGet _ (fst new_cfg) a).

Lemma BDDalloc_lemma_2 :
 In (snd BDDalloc) (fl_of_cfg new_cfg) \/ cnt_of_cfg new_cfg = snd BDDalloc.

Lemma BDDalloc_lemma_3 : MapGet _ (bs_of_cfg new_cfg) (snd BDDalloc) = None.

Lemma BDDalloc_lemma_4 :
 fst (fst BDDalloc) = MapPut _ (bs_of_cfg new_cfg) (snd BDDalloc) (x, (l, r)).

Lemma BDDalloc_lemma_5 :
 fst (snd (fst BDDalloc)) =
 MapPut3 _ (share_of_cfg new_cfg) l r x (snd BDDalloc).

Lemma BDDalloc_preserves_nodes :
 nodes_preserved_bs (bs_of_cfg new_cfg) (fst (fst BDDalloc)).

Lemma BDDalloc_zero : MapGet _ (fst (fst BDDalloc)) BDDzero = None.

Lemma BDDalloc_one : MapGet _ (fst (fst BDDalloc)) BDDone = None.

Lemma BDDalloc_BDD_OK : BDD_OK (fst (fst BDDalloc)) (snd BDDalloc).

Lemma BDDalloc_keeps_state_OK : BDDstate_OK (fst (fst BDDalloc)).

Lemma BDDsharing_OK_1 :
 forall a : ad,
 MapGet _ (bs_of_cfg new_cfg) a = None ->
 BDDsharing_OK (MapPut _ (bs_of_cfg new_cfg) a (x, (l, r)))
   (MapPut3 _ (share_of_cfg new_cfg) l r x a).

Lemma BDDalloc_keeps_sharing_OK :
 BDDsharing_OK (fst (fst BDDalloc)) (fst (snd (fst BDDalloc))).

Lemma BDDalloc_keeps_cnt_OK :
 cnt_OK (fst (fst BDDalloc)) (fst (snd (snd (snd (fst BDDalloc))))).

Lemma BDDalloc_keeps_free_list_OK :
 BDDfree_list_OK (fst (fst BDDalloc)) (fst (snd (snd (fst BDDalloc))))
   (fst (snd (snd (snd (fst BDDalloc))))).

Lemma BDDalloc_orm_same : orm_of_cfg (fst BDDalloc) = orm_of_cfg new_cfg.

Lemma BDDalloc_negm_same : negm_of_cfg (fst BDDalloc) = negm_of_cfg new_cfg.

Lemma BDDalloc_um_same : um_of_cfg (fst BDDalloc) = um_of_cfg new_cfg.

Lemma BDDalloc_keeps_neg_memo_OK :
 BDDneg_memo_OK (bs_of_cfg (fst BDDalloc)) (negm_of_cfg (fst BDDalloc)).

Lemma BDDalloc_keeps_or_memo_OK :
 BDDor_memo_OK (bs_of_cfg (fst BDDalloc)) (orm_of_cfg (fst BDDalloc)).

Lemma BDDalloc_keeps_univ_memo_OK :
 BDDuniv_memo_OK (bs_of_cfg (fst BDDalloc)) (um_of_cfg (fst BDDalloc)).

Lemma BDDalloc_keeps_config_OK : BDDconfig_OK (fst BDDalloc).
 
Lemma BDDalloc_preserves_used_nodes :
 used_nodes_preserved cfg (fst BDDalloc) ul.

Lemma BDDalloc_node_OK : config_node_OK (fst BDDalloc) (snd BDDalloc).

Lemma BDDallocGet :
 MapGet _ (fst (fst BDDalloc)) (snd BDDalloc) = Some (x, (l, r)).

End BDD_alloc. *)
Require Import make.
(* make:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.

Require Import misc.
Require Import bool_fun.
Require Import myMap.
Require Import config.
Require Import alloc.

Section BDD_make.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Variable cfg : BDDconfig.
Variable x : BDDvar.
Variable l r : ad.
Variable ul : list ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis l_used' : used_node' cfg ul l.
Hypothesis r_used' : used_node' cfg ul r.
Hypothesis
  xl_lt_x :
    forall (xl : BDDvar) (ll rl : ad),
    MapGet _ (bs_of_cfg cfg) l = Some (xl, (ll, rl)) ->
    BDDcompare xl x = Datatypes.Lt.
Hypothesis
  xr_lt_x :
    forall (xr : BDDvar) (lr rr : ad),
    MapGet _ (bs_of_cfg cfg) r = Some (xr, (lr, rr)) ->
    BDDcompare xr x = Datatypes.Lt.

Lemma no_dup :
 MapGet3 ad (fst (snd cfg)) l r x = None ->
 forall (x' : BDDvar) (l' r' a : ad),
 MapGet (BDDvar * (ad * ad)) (bs_of_cfg cfg) a =
 Some (x', (l', r')) -> (x, (l, r)) <> (x', (l', r')).

Definition BDDmake :=
  if Neqb l r
  then (cfg, l)
  else
   match MapGet3 _ (fst (snd cfg)) l r x with
   | Some y => (cfg, y)
   | None => BDDalloc gc cfg x l r ul
   end.

Lemma BDDmake_keeps_config_OK : BDDconfig_OK (fst BDDmake).

Lemma BDDmake_preserves_used_nodes :
 used_nodes_preserved cfg (fst BDDmake) ul.

Lemma BDDmake_node_OK : config_node_OK (fst BDDmake) (snd BDDmake).

Lemma BDDmake_bool_fun :
 bool_fun_eq (bool_fun_of_BDD (fst BDDmake) (snd BDDmake))
   (bool_fun_if x (bool_fun_of_BDD cfg r) (bool_fun_of_BDD cfg l)).

Lemma BDDmake_node_height_eq :
 Neqb l r = false ->
 Neqb (node_height (fst BDDmake) (snd BDDmake)) (ad_S x) = true.

Lemma BDDmake_node_height_eq_1 :
 Neqb l r = true ->
 Neqb (node_height (fst BDDmake) (snd BDDmake)) (node_height cfg l) = true.

Lemma BDDmake_node_height_le :
 Nleb (node_height (fst BDDmake) (snd BDDmake)) (ad_S x) = true.

End BDD_make. *)
Require Import or.
(* or:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.

Require Import misc.
Require Import bool_fun.
Require Import myMap.
Require Import config.
Require Import alloc.
Require Import make.

Section BDD_or.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Fixpoint BDDor_1 (cfg : BDDconfig) (ul : list ad) (node1 node2 : ad)
 (bound : nat) {struct bound} : BDDconfig * ad :=
  match bound with
  | O =>   (initBDDconfig, BDDzero)
  | S bound' =>
      match MapGet2 _ (orm_of_cfg cfg) node1 node2 with
      | Some node' => (cfg, node')
      | None =>
          match MapGet _ (fst cfg) node1 with
          | None =>
              if Neqb node1 BDDzero
              then (BDDor_memo_put cfg node1 node2 node2, node2)
              else (BDDor_memo_put cfg node1 node2 node1, node1)
          | Some (x1, (l1, r1)) =>
              match MapGet _ (fst cfg) node2 with
              | None =>
                  if Neqb node2 BDDzero
                  then (BDDor_memo_put cfg node1 node2 node1, node1)
                  else (BDDor_memo_put cfg node1 node2 node2, node2)
              | Some (x2, (l2, r2)) =>
                  match BDDcompare x1 x2 with
                  | Datatypes.Eq =>
                      match BDDor_1 cfg ul l1 l2 bound' with
                      | (cfgl, nodel) =>
                          match BDDor_1 cfgl (nodel :: ul) r1 r2 bound' with
                          | (cfgr, noder) =>
                              match
                                BDDmake gc cfgr x1 nodel noder
                                  (noder :: nodel :: ul)
                              with
                              | (cfg', node') =>
                                  (BDDor_memo_put cfg' node1 node2 node',
                                  node')
                              end
                          end
                      end
                  | Datatypes.Gt =>
                      match BDDor_1 cfg ul l1 node2 bound' with
                      | (cfgl, nodel) =>
                          match
                            BDDor_1 cfgl (nodel :: ul) r1 node2 bound'
                          with
                          | (cfgr, noder) =>
                              match
                                BDDmake gc cfgr x1 nodel noder
                                  (noder :: nodel :: ul)
                              with
                              | (cfg', node') =>
                                  (BDDor_memo_put cfg' node1 node2 node',
                                  node')
                              end
                          end
                      end
                  | Datatypes.Lt =>
                      match BDDor_1 cfg ul node1 l2 bound' with
                      | (cfgl, nodel) =>
                          match
                            BDDor_1 cfgl (nodel :: ul) node1 r2 bound'
                          with
                          | (cfgr, noder) =>
                              match
                                BDDmake gc cfgr x2 nodel noder
                                  (noder :: nodel :: ul)
                              with
                              | (cfg', node') =>
                                  (BDDor_memo_put cfg' node1 node2 node',
                                  node')
                              end
                          end
                      end
                  end
              end
          end
      end
  end.

Lemma BDDor_1_lemma :
 forall (bound : nat) (cfg : BDDconfig) (ul : list ad) (node1 node2 : ad),
 max (nat_of_N (node_height cfg node1)) (nat_of_N (node_height cfg node2)) <
 bound ->
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node1 ->
 used_node' cfg ul node2 ->
 BDDconfig_OK (fst (BDDor_1 cfg ul node1 node2 bound)) /\
 config_node_OK (fst (BDDor_1 cfg ul node1 node2 bound))
   (snd (BDDor_1 cfg ul node1 node2 bound)) /\
 used_nodes_preserved cfg (fst (BDDor_1 cfg ul node1 node2 bound)) ul /\
 Nleb
   (node_height (fst (BDDor_1 cfg ul node1 node2 bound))
      (snd (BDDor_1 cfg ul node1 node2 bound)))
   (BDDvar_max (node_height cfg node1) (node_height cfg node2)) = true /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDor_1 cfg ul node1 node2 bound))
      (snd (BDDor_1 cfg ul node1 node2 bound)))
   (bool_fun_or (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2)).

End BDD_or. *)
Require Import op.
(* op:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.

Require Import misc.
Require Import bool_fun.
Require Import myMap.
Require Import config.
Require Import alloc.
Require Import make.
Require Import neg.
Require Import or.

Section BDDop.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

                         Section BDDneg_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Definition BDDneg :=
  BDDneg_1 gc cfg ul node (S (nat_of_N (node_height cfg node))).

Let lt_1 :
  nat_of_N (node_height cfg node) < S (nat_of_N (node_height cfg node)).

Lemma BDDneg_config_OK : BDDconfig_OK (fst BDDneg).

Lemma BDDneg_node_OK : config_node_OK (fst BDDneg) (snd BDDneg).

Lemma BDDneg_used_nodes_preserved : used_nodes_preserved cfg (fst BDDneg) ul.

Lemma BDDneg_is_neg :
 bool_fun_eq (bool_fun_of_BDD (fst BDDneg) (snd BDDneg))
   (bool_fun_neg (bool_fun_of_BDD cfg node)).

Lemma BDDneg_list_OK : used_list_OK (fst BDDneg) ul.

Lemma BDDneg_list_OK_cons : used_list_OK (fst BDDneg) (snd BDDneg :: ul).

Lemma BDDneg_var_eq :
 Neqb (node_height (fst BDDneg) (snd BDDneg)) (node_height cfg node) = true.

                         End BDDneg_results.

                        Section BDDor_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node1 node2 : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used1 : used_node' cfg ul node1.
Hypothesis used2 : used_node' cfg ul node2.

Definition BDDor :=
  BDDor_1 gc cfg ul node1 node2
    (S
       (max (nat_of_N (node_height cfg node1))
          (nat_of_N (node_height cfg node2)))).
Let lt_1 :
  max (nat_of_N (node_height cfg node1)) (nat_of_N (node_height cfg node2)) <
  S
    (max (nat_of_N (node_height cfg node1))
       (nat_of_N (node_height cfg node2))).

Lemma BDDor_config_OK : BDDconfig_OK (fst BDDor).

Lemma BDDor_node_OK : config_node_OK (fst BDDor) (snd BDDor).

Lemma BDDor_used_nodes_preserved : used_nodes_preserved cfg (fst BDDor) ul.

Lemma BDDor_is_or :
 bool_fun_eq (bool_fun_of_BDD (fst BDDor) (snd BDDor))
   (bool_fun_or (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2)).

Lemma BDDor_list_OK : used_list_OK (fst BDDor) ul.

Lemma BDDor_list_OK_cons : used_list_OK (fst BDDor) (snd BDDor :: ul).

Lemma BDDor_var_le :
 Nleb (node_height (fst BDDor) (snd BDDor))
   (BDDvar_max (node_height cfg node1) (node_height cfg node2)) = true.

                          End BDDor_results.

                       Section BDDimpl_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node1 node2 : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used1 : used_node' cfg ul node1.
Hypothesis used2 : used_node' cfg ul node2.

Definition BDDimpl :=
  match BDDneg cfg ul node1 with
  | (cfg1, node1') => BDDor cfg1 (node1' :: ul) node1' node2
  end.

Lemma BDDimpl_config_OK : BDDconfig_OK (fst BDDimpl).

Lemma BDDimpl_node_OK : config_node_OK (fst BDDimpl) (snd BDDimpl).

Lemma BDDimpl_used_nodes_preserved :
 used_nodes_preserved cfg (fst BDDimpl) ul.

Lemma BDDimpl_is_impl :
 bool_fun_eq (bool_fun_of_BDD (fst BDDimpl) (snd BDDimpl))
   (bool_fun_impl (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2)).

Lemma BDDimpl_list_OK : used_list_OK (fst BDDimpl) ul.

Lemma BDDimpl_list_OK_cons : used_list_OK (fst BDDimpl) (snd BDDimpl :: ul).

                         End BDDimpl_results.

                        Section BDDand_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node1 node2 : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used1 : used_node' cfg ul node1.
Hypothesis used2 : used_node' cfg ul node2.

Definition BDDand :=
  match BDDneg cfg ul node1 with
  | (cfg1, node1') =>
      match BDDneg cfg1 (node1' :: ul) node2 with
      | (cfg2, node2') =>
          match BDDor cfg2 (node2' :: node1' :: ul) node1' node2' with
          | (cfg3, node3) => BDDneg cfg3 (node3 :: ul) node3
          end
      end
  end.

Lemma BDDand_config_OK : BDDconfig_OK (fst BDDand).

Lemma BDDand_node_OK : config_node_OK (fst BDDand) (snd BDDand).

Lemma BDDand_used_nodes_preserved : used_nodes_preserved cfg (fst BDDand) ul.

Lemma BDDand_is_and :
 bool_fun_eq (bool_fun_of_BDD (fst BDDand) (snd BDDand))
   (bool_fun_and (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2)).

Lemma BDDand_list_OK : used_list_OK (fst BDDand) ul.

Lemma BDDand_list_OK_cons : used_list_OK (fst BDDand) (snd BDDand :: ul).

Lemma BDDand_var_le :
 Nleb (node_height (fst BDDand) (snd BDDand))
   (BDDvar_max (node_height cfg node1) (node_height cfg node2)) = true.

                         End BDDand_results.

                       Section BDDiff_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node1 node2 : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used1 : used_node' cfg ul node1.
Hypothesis used2 : used_node' cfg ul node2.

Definition BDDiff :=
  match BDDor cfg ul node1 node2 with
  | (cfg1, node3) =>
      match BDDand cfg1 (node3 :: ul) node1 node2 with
      | (cfg2, node4) => BDDimpl cfg2 (node4 :: node3 :: ul) node3 node4
      end
  end.

Lemma BDDiff_config_OK : BDDconfig_OK (fst BDDiff).

Lemma BDDiff_node_OK : config_node_OK (fst BDDiff) (snd BDDiff).

Lemma BDDiff_used_nodes_preserved : used_nodes_preserved cfg (fst BDDiff) ul.

Lemma BDDiff_is_iff :
 bool_fun_eq (bool_fun_of_BDD (fst BDDiff) (snd BDDiff))
   (bool_fun_iff (bool_fun_of_BDD cfg node1) (bool_fun_of_BDD cfg node2)).

Lemma BDDiff_list_OK : used_list_OK (fst BDDiff) ul.

Lemma BDDiff_list_OK_cons : used_list_OK (fst BDDiff) (snd BDDiff :: ul).

                         End BDDiff_results.

                     Section BDDvar_make_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable x : BDDvar.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.

Definition BDDvar_make := BDDmake gc cfg x BDDzero BDDone ul.

Lemma BDDvar_make_config_OK : BDDconfig_OK (fst BDDvar_make).

Lemma BDDvar_make_node_OK :
 config_node_OK (fst BDDvar_make) (snd BDDvar_make).

Lemma BDDvar_make_used_nodes_preserved :
 used_nodes_preserved cfg (fst BDDvar_make) ul.

Lemma BDDvar_make_list_OK : used_list_OK (fst BDDvar_make) ul.

Lemma BDDvar_make_list_OK_cons :
 used_list_OK (fst BDDvar_make) (snd BDDvar_make :: ul).

Lemma BDDvar_make_is_var :
 bool_fun_eq (bool_fun_of_BDD (fst BDDvar_make) (snd BDDvar_make))
   (bool_fun_var x).

                          End BDDvar_make_results.

End BDDop. *)
Require Import tauto.
(* tauto:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.

Require Import misc.
Require Import bool_fun.
Require Import myMap.
Require Import config.
Require Import alloc.
Require Import make.
Require Import neg.
Require Import or.
Require Import op.

Section tauto.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Fixpoint BDDof_bool_expr (cfg : BDDconfig) (ul : list ad) 
 (be : bool_expr) {struct be} : BDDconfig * ad :=
  match be with
  | Zero => (cfg, BDDzero)
  | One => (cfg, BDDone)
  | Var x => BDDvar_make gc cfg ul x
  | Neg be1 =>
      match BDDof_bool_expr cfg ul be1 with
      | (cfg1, node1) => BDDneg gc cfg1 (node1 :: ul) node1
      end
  | Or be1 be2 =>
      match BDDof_bool_expr cfg ul be1 with
      | (cfg1, node1) =>
          match BDDof_bool_expr cfg1 (node1 :: ul) be2 with
          | (cfg2, node2) => BDDor gc cfg2 (node2 :: node1 :: ul) node1 node2
          end
      end
  | ANd be1 be2 =>
      match BDDof_bool_expr cfg ul be1 with
      | (cfg1, node1) =>
          match BDDof_bool_expr cfg1 (node1 :: ul) be2 with
          | (cfg2, node2) =>
              BDDand gc cfg2 (node2 :: node1 :: ul) node1 node2
          end
      end
  | Impl be1 be2 =>
      match BDDof_bool_expr cfg ul be1 with
      | (cfg1, node1) =>
          match BDDof_bool_expr cfg1 (node1 :: ul) be2 with
          | (cfg2, node2) =>
              BDDimpl gc cfg2 (node2 :: node1 :: ul) node1 node2
          end
      end
  | Iff be1 be2 =>
      match BDDof_bool_expr cfg ul be1 with
      | (cfg1, node1) =>
          match BDDof_bool_expr cfg1 (node1 :: ul) be2 with
          | (cfg2, node2) =>
              BDDiff gc cfg2 (node2 :: node1 :: ul) node1 node2
          end
      end
  end.

Lemma BDDof_bool_expr_correct :
 forall (be : bool_expr) (cfg : BDDconfig) (ul : list ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 BDDconfig_OK (fst (BDDof_bool_expr cfg ul be)) /\
 used_nodes_preserved cfg (fst (BDDof_bool_expr cfg ul be)) ul /\
 config_node_OK (fst (BDDof_bool_expr cfg ul be))
   (snd (BDDof_bool_expr cfg ul be)) /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDof_bool_expr cfg ul be))
      (snd (BDDof_bool_expr cfg ul be))) (bool_fun_of_bool_expr be).

Lemma init_list_OK : forall cfg : BDDconfig, used_list_OK cfg nil.

Definition is_tauto (be : bool_expr) :=
  Neqb BDDone (snd (BDDof_bool_expr initBDDconfig nil be)).

Lemma is_tauto_lemma :
 forall be : bool_expr,
 is_tauto be = true <-> bool_fun_eq bool_fun_one (bool_fun_of_bool_expr be).

End tauto. *)
Require Import gc.
(* gc:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.

Require Import misc.
Require Import bool_fun.
Require Import config.
Require Import myMap.

Section BDDgc.

Definition set_closed (bs : BDDstate) (marked : Map unit) :=
  forall node node' : ad,
  in_dom _ node marked = true ->
  nodes_reachable bs node node' ->
  in_dom _ node' bs = true -> in_dom _ node' marked = true.

Fixpoint add_used_nodes_1 (bs : BDDstate) (node : ad) 
 (marked : Map unit) (bound : nat) {struct bound} : 
 Map unit :=
  match bound with
  | O =>   M0 unit
  | S bound' =>
      match MapGet _ marked node with
      | None =>
          match MapGet _ bs node with
          | None => marked
          | Some (x, (l, r)) =>
              MapPut _
                (add_used_nodes_1 bs r (add_used_nodes_1 bs l marked bound')
                   bound') node tt
          end
      | Some tt => marked
      end
  end.

Definition add_used_nodes (bs : BDDstate) (node : ad) 
  (marked : Map unit) :=
  add_used_nodes_1 bs node marked (S (nat_of_N (bs_node_height bs node))).

Definition mark (bs : BDDstate) (used : list ad) :=
  fold_right (add_used_nodes bs) (M0 unit) used.

Definition new_bs (bs : BDDstate) (used : list ad) :=
  MapDomRestrTo _ _ bs (mark bs used).

Definition new_fl (bs : BDDstate) (used : list ad) 
  (fl : BDDfree_list) :=
  MapDomRestrByApp1 _ _ (fun a0 : ad => a0) fl bs (mark bs used).

Definition used_node_bs_1 (marked : Map unit) (node : ad) :=
  match MapGet _ marked node with
  | Some _ => true
  | None => Neqb node BDDzero || Neqb node BDDone
  end.

Fixpoint clean'1_1 (pf : ad -> ad) (m' : Map unit) 
 (m : Map ad) {struct m} : Map ad :=
  match m with
  | M0 => m
  | M1 a a' =>
      if used_node_bs_1 m' (pf a) && used_node_bs_1 m' a' then m else M0 _
  | M2 m1 m2 =>
      makeM2 _ (clean'1_1 (fun a0 : ad => pf (Ndouble a0)) m' m1)
        (clean'1_1 (fun a0 : ad => pf (Ndouble_plus_one a0)) m' m2)
  end.

Definition clean'1 (m : Map ad) (m' : Map unit) :=
  clean'1_1 (fun a : ad => a) m' m.

Fixpoint clean'2_1 (pf : ad -> ad) (m' : Map unit) 
 (m : Map (Map ad)) {struct m} : Map (Map ad) :=
  match m with
  | M0 => m
  | M1 a y =>
      if used_node_bs_1 m' (pf a) then M1 _ a (clean'1 y m') else M0 _
  | M2 m1 m2 =>
      makeM2 _ (clean'2_1 (fun a0 : ad => pf (Ndouble a0)) m' m1)
        (clean'2_1 (fun a0 : ad => pf (Ndouble_plus_one a0)) m' m2)
  end.

Definition clean'2 (m : Map (Map ad)) (m' : Map unit) :=
  clean'2_1 (fun a : ad => a) m' m.

Fixpoint clean1 (m' : Map unit) (m : Map ad) {struct m} : 
 Map ad :=
  match m with
  | M0 => m
  | M1 a a' => if used_node_bs_1 m' a' then m else M0 _
  | M2 m1 m2 => makeM2 _ (clean1 m' m1) (clean1 m' m2)
  end.

Fixpoint clean2_1 (pf : ad -> ad) (m' : Map unit) (m : Map (Map ad))
 {struct m} : Map (Map ad) :=
  match m with
  | M0 => m
  | M1 a y => if used_node_bs_1 m' (pf a) then M1 _ a (clean1 m' y) else M0 _
  | M2 m1 m2 =>
      makeM2 _ (clean2_1 (fun a0 : ad => pf (Ndouble a0)) m' m1)
        (clean2_1 (fun a0 : ad => pf (Ndouble_plus_one a0)) m' m2)
  end.

Definition clean2 (m : Map (Map ad)) (m' : Map unit) :=
  clean2_1 (fun a : ad => a) m' m.

Fixpoint clean3_1 (pf : ad -> ad) (m' : Map unit) (m : Map (Map (Map ad)))
 {struct m} : Map (Map (Map ad)) :=
  match m with
  | M0 => m
  | M1 a y => if used_node_bs_1 m' (pf a) then M1 _ a (clean2 y m') else M0 _
  | M2 m1 m2 =>
      makeM2 _ (clean3_1 (fun a0 : ad => pf (Ndouble a0)) m' m1)
        (clean3_1 (fun a0 : ad => pf (Ndouble_plus_one a0)) m' m2)
  end.

Definition clean3 (m : Map (Map (Map ad))) (m' : Map unit) :=
  clean3_1 (fun a : ad => a) m' m.

Inductive dummy_mark : Set :=
    DM : Map unit -> dummy_mark.

Definition gc_0 (cfg : BDDconfig) (used : list ad) :=
  match cfg with
  | (bs, (share, (fl, (cnt, (negm, (orm, um)))))) =>
      match DM (mark bs used) with
      | DM marked =>
          let bs' := MapDomRestrTo _ _ bs marked in
          let fl' :=
            MapDomRestrByApp1 _ _ (fun a0 : ad => a0) fl bs marked in
          let share' := clean3 share marked in
          let negm' := clean'1 negm marked in
          let orm' := clean'2 orm marked in
          let um' := clean2 um marked in
          (bs', (share', (fl', (cnt, (negm', (orm', um'))))))
      end
  end.

Definition gc_inf (cfg : BDDconfig) (used : list ad) := cfg.

Definition is_nil (A : Set) (l : list A) :=
  match l with
  | nil => true
  | _ => false
  end.

Definition gc_x (x : ad) (cfg : BDDconfig) :=
  if is_nil _ (fst (snd (snd cfg))) && Nleb x (fst (snd (snd (snd cfg))))
  then gc_0 cfg
  else gc_inf cfg.

Definition gc_x_opt (x : ad) (cfg : BDDconfig) :=
  match fl_of_cfg cfg with
  | nil =>
      match BDDcompare x (cnt_of_cfg cfg) with
      | Datatypes.Lt => gc_0 cfg
      | _ => gc_inf cfg
      end
  | _ => gc_inf cfg
  end.

Lemma add_used_nodes_1_lemma_1 :
 forall (bound : nat) (bs : BDDstate) (node : ad) (marked : Map unit),
 BDDstate_OK bs ->
 nat_of_N (bs_node_height bs node) < bound ->
 forall node' : ad,
 in_dom _ node' marked = true ->
 in_dom _ node' (add_used_nodes_1 bs node marked bound) = true.

Lemma add_used_nodes_1_lemma_2 :
 forall (bound : nat) (bs : BDDstate) (node : ad) (marked : Map unit),
 BDDstate_OK bs ->
 nat_of_N (bs_node_height bs node) < bound ->
 set_closed bs marked ->
 (forall node' : ad,
  nodes_reachable bs node node' /\ in_dom _ node' bs = true ->
  in_dom _ node' (add_used_nodes_1 bs node marked bound) = true) /\
 (forall node' : ad,
  in_dom _ node' (add_used_nodes_1 bs node marked bound) = true ->
  in_dom _ node' marked = true \/
  in_dom _ node' bs = true /\ nodes_reachable bs node node') /\
 set_closed bs (add_used_nodes_1 bs node marked bound).

Lemma add_used_nodes_lemma_1 :
 forall (bs : BDDstate) (node : ad) (marked : Map unit),
 BDDstate_OK bs ->
 forall node' : ad,
 in_dom _ node' marked = true ->
 in_dom _ node' (add_used_nodes bs node marked) = true.

Lemma add_used_nodes_lemma_2 :
 forall (bs : BDDstate) (node : ad) (marked : Map unit),
 BDDstate_OK bs ->
 set_closed bs marked ->
 (forall node' : ad,
  nodes_reachable bs node node' /\ in_dom _ node' bs = true ->
  in_dom _ node' (add_used_nodes bs node marked) = true) /\
 (forall node' : ad,
  in_dom _ node' (add_used_nodes bs node marked) = true ->
  in_dom _ node' marked = true \/
  in_dom _ node' bs = true /\ nodes_reachable bs node node') /\
 set_closed bs (add_used_nodes bs node marked).

Lemma mark_lemma_1 :
 forall (used : list ad) (bs : BDDstate),
 BDDstate_OK bs ->
 set_closed bs (fold_right (add_used_nodes bs) (M0 unit) used) /\
 (forall node : ad,
  in_dom _ node (fold_right (add_used_nodes bs) (M0 unit) used) = true <->
  (exists node' : ad,
     In node' used /\
     nodes_reachable bs node' node /\ in_dom _ node bs = true)).

Lemma mark_lemma_2 :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs ->
 forall node : ad,
 in_dom _ node (mark bs used) = true <->
 (exists node' : ad,
    In node' used /\ nodes_reachable bs node' node /\ in_dom _ node bs = true).

Lemma mark_lemma_3 :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs ->
 forall node : ad,
 in_dom _ node (mark bs used) = true <->
 used_node_bs bs used node /\ in_dom _ node bs = true.

Lemma new_bs_lemma_1 :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs ->
 forall node : ad,
 used_node_bs bs used node ->
 MapGet _ bs node = MapGet _ (new_bs bs used) node.

Lemma new_bs_lemma_2 :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs ->
 forall node : ad,
 in_dom _ node (new_bs bs used) = true -> used_node_bs bs used node.

Lemma no_new_node_new_bs :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs -> no_new_node_bs bs (new_bs bs used).

Lemma new_bs_zero :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs -> in_dom _ BDDzero (new_bs bs used) = false.

Lemma new_bs_one :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs -> in_dom _ BDDone (new_bs bs used) = false.

Lemma new_bs_BDDhigh :
 forall (bs : BDDstate) (used : list ad) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs ->
 MapGet _ (new_bs bs used) node = Some (x, (l, r)) ->
 in_dom _ r (new_bs bs used) = in_dom _ r bs.

Lemma new_bs_BDDlow :
 forall (bs : BDDstate) (used : list ad) (x : BDDvar) (l r node : ad),
 BDDstate_OK bs ->
 MapGet _ (new_bs bs used) node = Some (x, (l, r)) ->
 in_dom _ l (new_bs bs used) = in_dom _ l bs.

Lemma new_bs_used_nodes_preserved :
 forall (bs : BDDstate) (used : list ad) (node : ad),
 BDDstate_OK bs ->
 used_node_bs bs used node -> node_preserved_bs bs (new_bs bs used) node.

Lemma new_bsBDDbounded_1 :
 forall (n : nat) (bs : BDDstate) (used : list ad) (node : ad) (x : BDDvar),
 BDDstate_OK bs ->
 n = nat_of_N x ->
 in_dom _ node (new_bs bs used) = true ->
 BDDbounded bs node x -> BDDbounded (new_bs bs used) node x.

Lemma new_bs_OK :
 forall (bs : BDDstate) (used : list ad),
 BDDstate_OK bs -> BDDstate_OK (new_bs bs used).

Lemma new_cnt_OK :
 forall (bs : BDDstate) (used : list ad) (cnt : ad),
 BDDstate_OK bs -> cnt_OK bs cnt -> cnt_OK (new_bs bs used) cnt.

Lemma new_fl_OK :
 forall (bs : BDDstate) (used : list ad) (fl : BDDfree_list) (cnt : ad),
 BDDstate_OK bs ->
 BDDfree_list_OK bs fl cnt ->
 cnt_OK bs cnt -> BDDfree_list_OK (new_bs bs used) (new_fl bs used fl) cnt.

Lemma used_node_bs_1_preserved :
 forall (bs : BDDstate) (used : list ad) (node : ad),
 BDDstate_OK bs ->
 used_node_bs_1 (mark bs used) node = true ->
 node_preserved_bs bs (new_bs bs used) node.

Lemma clean'1_1_lemma :
 forall (m : Map ad) (m' : Map unit) (pf : ad -> ad) (a a' : ad),
 MapGet _ (clean'1_1 pf m' m) a = Some a' <->
 used_node_bs_1 m' (pf a) && used_node_bs_1 m' a' = true /\
 MapGet _ m a = Some a'.

Lemma clean'1_lemma :
 forall (m : Map ad) (m' : Map unit) (a a' : ad),
 MapGet _ (clean'1 m m') a = Some a' <->
 used_node_bs_1 m' a && used_node_bs_1 m' a' = true /\
 MapGet _ m a = Some a'.

Lemma clean'2_1_lemma :
 forall (m : Map (Map ad)) (m' : Map unit) (pf : ad -> ad) (a b c : ad),
 MapGet2 _ (clean'2_1 pf m' m) a b = Some c <->
 used_node_bs_1 m' (pf a) && (used_node_bs_1 m' b && used_node_bs_1 m' c) =
 true /\ MapGet2 _ m a b = Some c.

Lemma clean'2_lemma :
 forall (m : Map (Map ad)) (m' : Map unit) (a b c : ad),
 MapGet2 _ (clean'2 m m') a b = Some c <->
 used_node_bs_1 m' a && (used_node_bs_1 m' b && used_node_bs_1 m' c) = true /\
 MapGet2 _ m a b = Some c.

Lemma clean1_lemma :
 forall (m' : Map unit) (m : Map ad) (a a' : ad),
 MapGet _ (clean1 m' m) a = Some a' <->
 used_node_bs_1 m' a' = true /\ MapGet _ m a = Some a'.

Lemma clean2_1_lemma :
 forall (m' : Map unit) (m : Map (Map ad)) (pf : ad -> ad) (a b c : ad),
 MapGet2 _ (clean2_1 pf m' m) a b = Some c <->
 used_node_bs_1 m' (pf a) && used_node_bs_1 m' c = true /\
 MapGet2 _ m a b = Some c.

Lemma clean2_lemma :
 forall (m : Map (Map ad)) (m' : Map unit) (a b c : ad),
 MapGet2 _ (clean2 m m') a b = Some c <->
 used_node_bs_1 m' a && used_node_bs_1 m' c = true /\
 MapGet2 _ m a b = Some c.

Lemma clean3_1_lemma :
 forall (m' : Map unit) (m : Map (Map (Map ad))) (pf : ad -> ad)
   (a b c d : ad),
 MapGet3 _ (clean3_1 pf m' m) a b c = Some d <->
 used_node_bs_1 m' (pf a) && (used_node_bs_1 m' b && used_node_bs_1 m' d) =
 true /\ MapGet3 _ m a b c = Some d.

Lemma clean3_lemma :
 forall (m : Map (Map (Map ad))) (m' : Map unit) (a b c d : ad),
 MapGet3 _ (clean3 m m') a b c = Some d <->
 used_node_bs_1 m' a && (used_node_bs_1 m' b && used_node_bs_1 m' d) = true /\
 MapGet3 _ m a b c = Some d.

Lemma new_negm_OK :
 forall (bs : BDDstate) (used : list ad) (negm : BDDneg_memo),
 BDDstate_OK bs ->
 BDDneg_memo_OK bs negm ->
 BDDneg_memo_OK (new_bs bs used) (clean'1 negm (mark bs used)).

Lemma new_orm_OK :
 forall (bs : BDDstate) (used : list ad) (orm : BDDor_memo),
 BDDstate_OK bs ->
 BDDor_memo_OK bs orm ->
 BDDor_memo_OK (new_bs bs used) (clean'2 orm (mark bs used)).

Lemma new_univm_OK :
 forall (bs : BDDstate) (used : list ad) (univm : BDDuniv_memo),
 BDDstate_OK bs ->
 BDDuniv_memo_OK bs univm ->
 BDDuniv_memo_OK (new_bs bs used) (clean2 univm (mark bs used)).

Lemma new_share_OK :
 forall (bs : BDDstate) (used : list ad) (share : BDDsharing_map),
 BDDstate_OK bs ->
 BDDsharing_OK bs share ->
 BDDsharing_OK (new_bs bs used) (clean3 share (mark bs used)).

Lemma new_cfg_OK :
 forall (bs : BDDstate) (share : BDDsharing_map) (fl : BDDfree_list)
   (cnt : ad) (negm : BDDneg_memo) (orm : BDDor_memo) 
   (um : BDDuniv_memo) (used : list ad),
 BDDconfig_OK (bs, (share, (fl, (cnt, (negm, (orm, um)))))) ->
 BDDconfig_OK
   (new_bs bs used,
   (clean3 share (mark bs used),
   (new_fl bs used fl,
   (cnt,
   (clean'1 negm (mark bs used),
   (clean'2 orm (mark bs used), clean2 um (mark bs used))))))).
 
Lemma gc_0_OK : gc_OK gc_0.

Lemma gc_inf_OK : gc_OK gc_inf.

Lemma gc_x_OK : forall x : ad, gc_OK (gc_x x).

Lemma gc_x_opt_OK : forall x : ad, gc_OK (gc_x_opt x).

End BDDgc. *)
Require Import univ.
(* univ:
Require Import Bool.
Require Import Sumbool.
Require Import Arith.
Require Import ZArith NArith Nnat Ndec Ndigits.
From IntMap Require Import Map.
From IntMap Require Import Allmaps.
Require Import List.
Require Import Wf_nat.

Require Import misc.
Require Import bool_fun.
Require Import myMap.
Require Import config.
Require Import alloc.
Require Import make.
Require Import op.

Section BDDuniv_sec.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Fixpoint BDDuniv_1 (cfg : BDDconfig) (ul : list ad) 
 (node : ad) (y : BDDvar) (bound : nat) {struct bound} : 
 BDDconfig * ad :=
  match bound with
  | O =>   (initBDDconfig, BDDzero)
  | S bound' =>
      match MapGet2 _ (um_of_cfg cfg) node y with
      | Some node' => (cfg, node')
      | None =>
          match MapGet _ (fst cfg) node with
          | None => (cfg, node)
          | Some (x, (l, r)) =>
              match BDDcompare x y with
              | Datatypes.Lt => (cfg, node)
              | Datatypes.Eq => BDDand gc cfg ul l r
              | Datatypes.Gt =>
                  match BDDuniv_1 cfg ul l y bound' with
                  | (cfgl, nodel) =>
                      match BDDuniv_1 cfgl (nodel :: ul) r y bound' with
                      | (cfgr, noder) =>
                          match
                            BDDmake gc cfgr x nodel noder
                              (noder :: nodel :: ul)
                          with
                          | (cfg', node') =>
                              (BDDuniv_memo_put cfg' y node node', node')
                          end
                      end
                  end
              end
          end
      end
  end.

Lemma BDDuniv_1_lemma :
 forall (bound : nat) (cfg : BDDconfig) (ul : list ad) 
   (u : BDDvar) (node : ad),
 nat_of_N (node_height cfg node) < bound ->
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 BDDconfig_OK (fst (BDDuniv_1 cfg ul node u bound)) /\
 config_node_OK (fst (BDDuniv_1 cfg ul node u bound))
   (snd (BDDuniv_1 cfg ul node u bound)) /\
 used_nodes_preserved cfg (fst (BDDuniv_1 cfg ul node u bound)) ul /\
 Nleb
   (node_height (fst (BDDuniv_1 cfg ul node u bound))
      (snd (BDDuniv_1 cfg ul node u bound))) (node_height cfg node) = true /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDuniv_1 cfg ul node u bound))
      (snd (BDDuniv_1 cfg ul node u bound)))
   (bool_fun_forall u (bool_fun_of_BDD cfg node)).

End BDDuniv_sec. *)

Fixpoint ad_list_neq (l1 l2 : list ad) {struct l2} : bool :=
  match l1, l2 with
  | nil, _ => true
  | _, nil => true
  | a1 :: l1', a2 :: l2' => negb (Neqb a1 a2) && ad_list_neq l1' l2'
  end.

Definition bool_to_be (b : bool) :=
  match b with
  | true => One
  | false => Zero
  end.
Definition bool_to_bf (b : bool) :=
  match b with
  | true => bool_fun_one
  | false => bool_fun_zero
  end.

Definition bool_fun_subst (x : BDDvar) (bfx bf : bool_fun) : bool_fun :=
  fun ve : var_env => bf (augment ve x (bfx ve)).

Definition bool_fun_subst1 (x : BDDvar) (bfx bf : bool_fun) : bool_fun :=
  bool_fun_forall x (bool_fun_impl (bool_fun_iff (bool_fun_var x) bfx) bf).

Definition bool_fun_replace (x y : BDDvar) (bf : bool_fun) :=
  bool_fun_subst x (bool_fun_var y) bf.

Definition bool_fun_restrict1 (x : BDDvar) (b : bool) 
  (bf : bool_fun) := bool_fun_subst x (bool_to_bf b) bf.

Lemma bool_fun_restrict1_eq_restrict :
 forall (bf : bool_fun) (x : BDDvar) (b : bool),
 bool_fun_eq (bool_fun_restrict1 x b bf) (bool_fun_restrict bf x b).
Proof.
  unfold bool_fun_restrict1, bool_fun_restrict in |- *.  unfold bool_fun_subst in |- *.  intros.
  unfold bool_fun_eq in |- *.  intro.  unfold bool_to_bf in |- *.  elim b.  unfold bool_fun_one in |- *.
  reflexivity.  unfold bool_fun_zero in |- *.  reflexivity.  
Qed.

Lemma bool_fun_subst_preserves_eq :
 forall (bf bf' bfx bfx' : bool_fun) (x : BDDvar),
 bool_fun_eq bf bf' ->
 bool_fun_eq bfx bfx' ->
 bool_fun_eq (bool_fun_subst x bfx bf) (bool_fun_subst x bfx' bf').
Proof.
  unfold bool_fun_eq, bool_fun_subst in |- *.  intros.  rewrite (H0 vb).  apply H.  
Qed.

Lemma bool_fun_replace_preserves_eq :
 forall (bf1 bf2 : bool_fun) (x y : BDDvar),
 bool_fun_eq bf1 bf2 ->
 bool_fun_eq (bool_fun_replace x y bf1) (bool_fun_replace x y bf2).
Proof.
  unfold bool_fun_replace in |- *.  intros.  apply bool_fun_subst_preserves_eq.
  assumption.  apply bool_fun_eq_refl.  
Qed.

Fixpoint subst (x : BDDvar) (bex be : bool_expr) {struct be} : bool_expr :=
  match be with
  | Zero => Zero
  | One => One
  | Var y => if Neqb x y then bex else be
  | Neg be1 => Neg (subst x bex be1)
  | Or be1 be2 => Or (subst x bex be1) (subst x bex be2)
  | ANd be1 be2 => ANd (subst x bex be1) (subst x bex be2)
  | Impl be1 be2 => Impl (subst x bex be1) (subst x bex be2)
  | Iff be1 be2 => Iff (subst x bex be1) (subst x bex be2)
  end.

Lemma subst_ok :
 forall (be bex : bool_expr) (x : BDDvar),
 bool_fun_eq (bool_fun_of_bool_expr (subst x bex be))
   (bool_fun_subst x (bool_fun_of_bool_expr bex) (bool_fun_of_bool_expr be)).
Proof.
  simple induction be.  compute in |- *.  reflexivity.  compute in |- *.  reflexivity.  simpl in |- *.
  unfold bool_fun_subst in |- *.  unfold bool_fun_eq in |- *.  unfold augment in |- *.
  unfold bool_fun_var in |- *.  intros.  elim (Neqb x b).  reflexivity.  reflexivity.
  simpl in |- *.  intros.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_neg
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b))).
  apply bool_fun_neg_preserves_eq.  apply H.  unfold bool_fun_neg, bool_fun_eq in |- *.
  intro.  unfold bool_fun_subst in |- *.  reflexivity.  simpl in |- *.  intros.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_or
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b))
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b0))).
  apply bool_fun_or_preserves_eq.  apply H.  apply H0.
  unfold bool_fun_or, bool_fun_eq in |- *.  intro.  unfold bool_fun_subst in |- *.  reflexivity.
  simpl in |- *.  intros.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_and
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b))
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b0))).
  apply bool_fun_and_preserves_eq.  apply H.  apply H0.
  unfold bool_fun_and, bool_fun_eq in |- *.  intro.  unfold bool_fun_subst in |- *.  reflexivity.
  simpl in |- *.  intros.  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_impl
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b))
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b0))).
  apply bool_fun_impl_preserves_eq.  apply H.  apply H0.
  unfold bool_fun_impl, bool_fun_eq in |- *.  intro.  unfold bool_fun_subst in |- *.
  reflexivity.  simpl in |- *.  intros.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_iff
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b))
                (bool_fun_subst x (bool_fun_of_bool_expr bex)
                   (bool_fun_of_bool_expr b0))).
  apply bool_fun_iff_preserves_eq.  apply H.  apply H0.
  unfold bool_fun_iff, bool_fun_eq in |- *.  intro.  unfold bool_fun_subst in |- *.  reflexivity.
Qed.

Fixpoint bool_fun_univl (bf : bool_fun) (la : list ad) {struct la} :
 bool_fun :=
  match la with
  | nil => bf
  | a :: la' => bool_fun_forall a (bool_fun_univl bf la')
  end.

Fixpoint bool_fun_exl (bf : bool_fun) (la : list ad) {struct la} :
 bool_fun :=
  match la with
  | nil => bf
  | a :: la' => bool_fun_ex a (bool_fun_exl bf la')
  end.

Lemma bool_fun_subst1_eq_subst :
 forall (x : BDDvar) bfx (bf : bool_fun),
 bool_fun_independent bfx x ->
 bool_fun_eq (bool_fun_subst1 x bfx bf) (bool_fun_subst x bfx bf).
Proof.
  unfold bool_fun_subst1, bool_fun_subst in |- *.  intros.  unfold bool_fun_eq in |- *.  intro.
  unfold bool_fun_iff in |- *.  unfold bool_fun_forall in |- *.  unfold bool_fun_restrict in |- *.
  unfold bool_fun_and, bool_fun_impl in |- *.  unfold bool_fun_var in |- *.  unfold augment at 1 4 in |- *.
  rewrite (Neqb_correct x).  simpl in |- *.  unfold bool_fun_independent in H.
  unfold bool_fun_restrict in H.  unfold bool_fun_eq in H.
  rewrite (H true vb).  rewrite (H false vb).
  elim (sumbool_of_bool (bfx vb)).  intro y.  rewrite y.  simpl in |- *.
  elim (bf (augment vb x true)); reflexivity.  intro y.  rewrite y.  simpl in |- *.
  reflexivity.
Qed.

Definition restrict (x : BDDvar) (b : bool) (be : bool_expr) :=
  subst x (bool_to_be b) be.

Lemma bool_fun_restrict_eq_subst :
 forall (x : BDDvar) (b : bool) (bf : bool_fun),
 bool_fun_eq (bool_fun_restrict bf x b) (bool_fun_subst x (bool_to_bf b) bf).
Proof.
  unfold bool_fun_restrict in |- *.  unfold bool_fun_subst in |- *.  intros.
  unfold bool_fun_eq in |- *.  intro.  elim b; reflexivity.
Qed.

Lemma bool_to_be_to_bf :
 forall b : bool, bool_fun_of_bool_expr (bool_to_be b) = bool_to_bf b.
Proof.
  intros.  elim b; reflexivity.  
Qed.

Lemma restrict_OK :
 forall (x : BDDvar) (b : bool) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (restrict x b be))
   (bool_fun_restrict (bool_fun_of_bool_expr be) x b).
Proof.
  unfold restrict in |- *.  intros.
  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_subst x (bool_to_bf b) (bool_fun_of_bool_expr be)).
  rewrite <- (bool_to_be_to_bf b).  apply subst_ok.  apply bool_fun_eq_sym.
  apply bool_fun_restrict_eq_subst.
Qed.

Definition forall_ (x : BDDvar) (be : bool_expr) : bool_expr :=
  ANd (restrict x true be) (restrict x false be).

Definition be_ex (x : BDDvar) (be : bool_expr) : bool_expr :=
  Or (restrict x true be) (restrict x false be).

Lemma forall_OK :
 forall (x : BDDvar) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (forall_ x be))
   (bool_fun_forall x (bool_fun_of_bool_expr be)).
Proof.
  unfold forall_, bool_fun_forall in |- *.  intros.  simpl in |- *.
  apply bool_fun_and_preserves_eq.  apply restrict_OK.  apply restrict_OK.  
Qed.
 
Lemma ex_OK :
 forall (x : BDDvar) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (be_ex x be))
   (bool_fun_ex x (bool_fun_of_bool_expr be)).
Proof.
  unfold be_ex, bool_fun_ex in |- *.  intros.  simpl in |- *.
  apply bool_fun_or_preserves_eq.  apply restrict_OK.  apply restrict_OK.  
Qed.
 
Fixpoint univl (be : bool_expr) (la : list ad) {struct la} : bool_expr :=
  match la with
  | nil => be
  | a :: la' => forall_ a (univl be la')
  end.

Fixpoint exl (be : bool_expr) (la : list ad) {struct la} : bool_expr :=
  match la with
  | nil => be
  | a :: la' => be_ex a (exl be la')
  end.

Lemma univl_OK :
 forall (la : list ad) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (univl be la))
   (bool_fun_univl (bool_fun_of_bool_expr be) la).
Proof.
  simple induction la.  intro.  apply bool_fun_eq_refl.  intros.
  replace (univl be (a :: l)) with (forall_ a (univl be l)).
  unfold bool_fun_univl in |- *.  fold bool_fun_univl in |- *.
  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_forall a (bool_fun_of_bool_expr (univl be l))).
  apply forall_OK.  apply bool_fun_forall_preserves_eq.  apply H.  reflexivity.
Qed.

Lemma exl_OK :
 forall (la : list ad) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (exl be la))
   (bool_fun_exl (bool_fun_of_bool_expr be) la).
Proof.
  simple induction la.  intro.  apply bool_fun_eq_refl.  intros.
  replace (exl be (a :: l)) with (be_ex a (exl be l)).
  unfold bool_fun_exl in |- *.  fold bool_fun_exl in |- *.
  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_ex a (bool_fun_of_bool_expr (exl be l))).
  apply ex_OK.  apply bool_fun_ex_preserves_eq.  apply H.  reflexivity.
Qed.

Definition replace (x y : BDDvar) (be : bool_expr) := subst x (Var y) be.

Lemma replace_OK :
 forall (x y : BDDvar) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (replace x y be))
   (bool_fun_replace x y (bool_fun_of_bool_expr be)).
Proof.
  unfold replace, bool_fun_replace in |- *.  intros.  simpl in |- *.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_subst x (bool_fun_of_bool_expr (Var y))
                (bool_fun_of_bool_expr be)).
  apply subst_ok.  apply bool_fun_subst_preserves_eq.  apply bool_fun_eq_refl.  
  simpl in |- *.  apply bool_fun_eq_refl.  
Qed.

Fixpoint replacel (be : bool_expr) (lx ly : list ad) {struct ly} :
 bool_expr :=
  match lx, ly with
  | nil, _ => be
  | _ :: _, nil =>   be
  | x :: lx', y :: ly' => replace x y (replacel be lx' ly')
  end.

Fixpoint bool_fun_replacel (bf : bool_fun) (lx ly : list ad) {struct ly} :
 bool_fun :=
  match lx, ly with
  | nil, _ => bf
  | _ :: _, nil =>   bf
  | x :: lx', y :: ly' => bool_fun_replace x y (bool_fun_replacel bf lx' ly')
  end.

Lemma replacel_OK :
 forall (lx ly : list ad) (be : bool_expr),
 bool_fun_eq (bool_fun_of_bool_expr (replacel be lx ly))
   (bool_fun_replacel (bool_fun_of_bool_expr be) lx ly).
Proof.
  simple induction lx.  simpl in |- *.  intros.  elim ly; intros; apply bool_fun_eq_refl.  
  intros a l ly.  intros.  elim ly0.  apply bool_fun_eq_refl.  intros.  simpl in |- *.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_replace a a0
                (bool_fun_of_bool_expr (replacel be l l0))).
  apply replace_OK.  apply bool_fun_replace_preserves_eq.  apply ly.  
Qed.

Section BDDquant.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

                          Section BDDuniv_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable y : BDDvar.
Variable node : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Definition BDDuniv :=
  BDDuniv_1 gc cfg ul node y (S (nat_of_N (node_height cfg node))).

Let lt_1 :
  nat_of_N (node_height cfg node) < S (nat_of_N (node_height cfg node)).
Proof.
  unfold lt in |- *.  apply le_n.
Qed.

Lemma BDDuniv_config_OK : BDDconfig_OK (fst BDDuniv).
Proof.
exact
 (proj1
    (BDDuniv_1_lemma gc gc_is_OK (S (nat_of_N (node_height cfg node))) cfg
       ul y node lt_1 cfg_OK ul_OK used)).
Qed.

Lemma BDDuniv_node_OK : config_node_OK (fst BDDuniv) (snd BDDuniv).
Proof.
  exact
   (proj1
      (proj2
         (BDDuniv_1_lemma gc gc_is_OK (S (nat_of_N (node_height cfg node)))
            cfg ul y node lt_1 cfg_OK ul_OK used))).
Qed.

Lemma BDDuniv_used_nodes_preserved :
 used_nodes_preserved cfg (fst BDDuniv) ul.
Proof.
  exact
   (proj1
      (proj2
         (proj2
            (BDDuniv_1_lemma gc gc_is_OK
               (S (nat_of_N (node_height cfg node))) cfg ul y node lt_1
               cfg_OK ul_OK used)))).
Qed.

Lemma BDDuniv_is_univ :
 bool_fun_eq (bool_fun_of_BDD (fst BDDuniv) (snd BDDuniv))
   (bool_fun_forall y (bool_fun_of_BDD cfg node)).
Proof.
  exact
   (proj2
      (proj2
         (proj2
            (proj2
               (BDDuniv_1_lemma gc gc_is_OK
                  (S (nat_of_N (node_height cfg node))) cfg ul y node lt_1
                  cfg_OK ul_OK used))))).
Qed.

Lemma BDDuniv_list_OK : used_list_OK (fst BDDuniv) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDuniv_used_nodes_preserved.
Qed.

Lemma BDDuniv_list_OK_cons : used_list_OK (fst BDDuniv) (snd BDDuniv :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDuniv_node_OK.  exact BDDuniv_list_OK.
Qed.

Lemma BDDuniv_var_le :
 Nleb (node_height (fst BDDuniv) (snd BDDuniv)) (node_height cfg node) =
 true.
Proof.
  exact
   (proj1
      (proj2
         (proj2
            (proj2
               (BDDuniv_1_lemma gc gc_is_OK
                  (S (nat_of_N (node_height cfg node))) cfg ul y node lt_1
                  cfg_OK ul_OK used))))).
Qed.

                          End BDDuniv_results.

                         Section BDDex_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable y : BDDvar.
Variable node : ad.
 
Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Definition BDDex :=
  match BDDneg gc cfg ul node with
  | (cfg1, node1) =>
      match BDDuniv cfg1 (node1 :: ul) y node1 with
      | (cfg2, node2) => BDDneg gc cfg2 (node2 :: ul) node2
      end
  end.

Lemma BDDex_config_OK : BDDconfig_OK (fst BDDex).
Proof.
  unfold BDDex in |- *.  elim (prod_sum _ _ (BDDneg gc cfg ul node)).  intros cfg1 H.
  elim H.  clear H.  intros node1 H.  rewrite H.
  elim (prod_sum _ _ (BDDuniv cfg1 (node1 :: ul) y node1)).  intros cfg2 H0.
  elim H0.  clear H0.  intros node2 H0.  rewrite H0.  cut (BDDconfig_OK cfg1).
  intro.  cut (used_nodes_preserved cfg cfg1 ul).  intro.
  cut (used_list_OK cfg1 (node1 :: ul)).  intro.  apply BDDneg_config_OK.
  assumption.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_config_OK.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.
  apply node_OK_list_OK.
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  replace node2 with (snd (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_node_OK.  assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  rewrite H0.
  reflexivity.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply cons_OK_list_OK with (node := node1).  apply BDDuniv_list_OK.  assumption.
  assumption.  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  
  apply used_node'_cons_node_ul.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  replace node1 with (snd (BDDneg gc cfg ul node)).  apply BDDneg_list_OK_cons.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.  
  rewrite H.  reflexivity.  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  apply BDDneg_used_nodes_preserved.  assumption.  assumption.  assumption.  
  assumption.  rewrite H.  reflexivity.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).  apply BDDneg_config_OK.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.
Qed.

Lemma BDDex_node_OK : config_node_OK (fst BDDex) (snd BDDex).
Proof.
  unfold BDDex in |- *.  elim (prod_sum _ _ (BDDneg gc cfg ul node)).  intros cfg1 H.
  elim H.  clear H.  intros node1 H.  rewrite H.
  elim (prod_sum _ _ (BDDuniv cfg1 (node1 :: ul) y node1)).  intros cfg2 H0.
  elim H0.  clear H0.  intros node2 H0.  rewrite H0.  cut (BDDconfig_OK cfg1).
  intro.  cut (used_nodes_preserved cfg cfg1 ul).  intro.
  cut (used_list_OK cfg1 (node1 :: ul)).  intro.  apply BDDneg_node_OK.
  assumption.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_config_OK.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.
  apply node_OK_list_OK.
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  replace node2 with (snd (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_node_OK.  assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  rewrite H0.
  reflexivity.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply cons_OK_list_OK with (node := node1).  apply BDDuniv_list_OK.  assumption.
  assumption.  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  
  apply used_node'_cons_node_ul.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  replace node1 with (snd (BDDneg gc cfg ul node)).  apply BDDneg_list_OK_cons.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.  
  rewrite H.  reflexivity.  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  apply BDDneg_used_nodes_preserved.  assumption.  assumption.  assumption.  
  assumption.  rewrite H.  reflexivity.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).  apply BDDneg_config_OK.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.
Qed.

Lemma BDDex_used_nodes_preserved : used_nodes_preserved cfg (fst BDDex) ul.
Proof.
  unfold BDDex in |- *.  elim (prod_sum _ _ (BDDneg gc cfg ul node)).  intros cfg1 H.
  elim H.  clear H.  intros node1 H.  rewrite H.
  elim (prod_sum _ _ (BDDuniv cfg1 (node1 :: ul) y node1)).  intros cfg2 H0.
  elim H0.  clear H0.  intros node2 H0.  rewrite H0.  cut (BDDconfig_OK cfg1).
  intro.  cut (used_nodes_preserved cfg cfg1 ul).  intro.
  cut (used_list_OK cfg1 (node1 :: ul)).  intro.
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfg2).  assumption.  
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply used_nodes_preserved_cons with (node := node1).
  apply BDDuniv_used_nodes_preserved.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.
  apply used_nodes_preserved_cons with (node := node2).
  apply BDDneg_used_nodes_preserved.
  assumption.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_config_OK.  assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.
  apply node_OK_list_OK.
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  replace node2 with (snd (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_node_OK.  assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  rewrite H0.
  reflexivity.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply cons_OK_list_OK with (node := node1).  apply BDDuniv_list_OK.  assumption.
  assumption.  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.
  apply used_node'_cons_node_ul.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  replace node1 with (snd (BDDneg gc cfg ul node)).  apply BDDneg_list_OK_cons.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.
  rewrite H.  reflexivity.  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  apply BDDneg_used_nodes_preserved.  assumption.  assumption.  assumption.
  assumption.  rewrite H.  reflexivity.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).  apply BDDneg_config_OK.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.
Qed.

Lemma BDDex_is_ex :
 bool_fun_eq (bool_fun_of_BDD (fst BDDex) (snd BDDex))
   (bool_fun_ex y (bool_fun_of_BDD cfg node)).
Proof.
  unfold BDDex in |- *.  elim (prod_sum _ _ (BDDneg gc cfg ul node)).  intros cfg1 H.
  elim H.  clear H.  intros node1 H.  rewrite H.
  elim (prod_sum _ _ (BDDuniv cfg1 (node1 :: ul) y node1)).  intros cfg2 H0.
  elim H0.  clear H0.  intros node2 H0.  rewrite H0.  cut (BDDconfig_OK cfg1).
  intro.  cut (used_nodes_preserved cfg cfg1 ul).  intro.
  cut (used_list_OK cfg1 (node1 :: ul)).  intro.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_neg
                (bool_fun_forall y (bool_fun_neg (bool_fun_of_BDD cfg node)))).
  apply
   bool_fun_eq_trans with (bf2 := bool_fun_neg (bool_fun_of_BDD cfg2 node2)).
  apply BDDneg_is_neg.  assumption.  
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_config_OK.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.
  apply node_OK_list_OK.
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  replace node2 with (snd (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_node_OK.  assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  rewrite H0.
  reflexivity.  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply cons_OK_list_OK with (node := node1).  apply BDDuniv_list_OK.  assumption.  
  assumption.  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  
  apply used_node'_cons_node_ul.  apply bool_fun_neg_preserves_eq.
  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_forall y (bool_fun_of_BDD cfg1 node1)).
  replace cfg2 with (fst (BDDuniv cfg1 (node1 :: ul) y node1)).
  replace node2 with (snd (BDDuniv cfg1 (node1 :: ul) y node1)).
  apply BDDuniv_is_univ.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  rewrite H0.  reflexivity.  rewrite H0.
  reflexivity.  apply bool_fun_forall_preserves_eq.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  replace node1 with (snd (BDDneg gc cfg ul node)).  apply BDDneg_is_neg.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.  
  rewrite H.  reflexivity.  apply bool_fun_eq_sym.  apply bool_fun_ex_lemma.
  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  replace node1 with (snd (BDDneg gc cfg ul node)).  apply BDDneg_list_OK_cons.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.  
  rewrite H.  reflexivity.  replace cfg1 with (fst (BDDneg gc cfg ul node)).
  apply BDDneg_used_nodes_preserved.  assumption.  assumption.  assumption.  
  assumption.  rewrite H.  reflexivity.  
  replace cfg1 with (fst (BDDneg gc cfg ul node)).  apply BDDneg_config_OK.
  assumption.  assumption.  assumption.  assumption.  rewrite H.  reflexivity.
Qed.

Lemma BDDex_list_OK : used_list_OK (fst BDDex) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDex_used_nodes_preserved.
Qed.
 
Lemma BDDex_list_OK_cons : used_list_OK (fst BDDex) (snd BDDex :: ul).
Proof.
  apply node_OK_list_OK.  apply BDDex_node_OK.  exact BDDex_list_OK.
Qed.

                           End BDDex_results.
                          
Fixpoint BDDunivl (cfg : BDDconfig) (ul : list ad) 
 (node : ad) (ly : list BDDvar) {struct ly} : BDDconfig * ad :=
  match ly with
  | nil => (cfg, node)
  | y :: ly' =>
      match BDDunivl cfg ul node ly' with
      | (cfg1, node1) => BDDuniv cfg1 (node1 :: ul) y node1
      end
  end.

Lemma BDDunivl_lemma :
 forall (ly : list BDDvar) (cfg : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 BDDconfig_OK (fst (BDDunivl cfg ul node ly)) /\
 config_node_OK (fst (BDDunivl cfg ul node ly))
   (snd (BDDunivl cfg ul node ly)) /\
 used_nodes_preserved cfg (fst (BDDunivl cfg ul node ly)) ul /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDunivl cfg ul node ly))
      (snd (BDDunivl cfg ul node ly)))
   (bool_fun_univl (bool_fun_of_BDD cfg node) ly).
Proof.
  simple induction ly.  simpl in |- *.  intros.  split.  assumption.  split.
  apply used_node'_OK with (ul := ul).  assumption.  assumption.  assumption.
  split.  apply used_nodes_preserved_refl.  apply bool_fun_eq_refl.  intros.
  simpl in |- *.
  elim (prod_sum _ _ (BDDunivl cfg ul node l)).  intros cfg1 H3.
  elim H3; clear H3.  intros node1 H3.  rewrite H3.
  elim (H cfg ul node H0 H1 H2).  intros.  elim H5.  intros.
  rewrite H3 in H4.  rewrite H3 in H6.  rewrite H3 in H7.  elim H7.  intros.
  split.  apply BDDuniv_config_OK.
  assumption.  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.
  apply used_node'_cons_node_ul.  split.  apply BDDuniv_node_OK.  assumption.
  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.
  apply used_node'_cons_node_ul.  split.
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.
  apply used_nodes_preserved_cons with (node := node1).
  apply BDDuniv_used_nodes_preserved.  assumption.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  assumption.  apply used_node'_cons_node_ul.
  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_forall a (bool_fun_of_BDD cfg1 node1)).
  apply BDDuniv_is_univ.  assumption.  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.  
  apply used_node'_cons_node_ul.  apply bool_fun_forall_preserves_eq.
  assumption.
Qed.

                          Section BDDunivl_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node : ad.
Variable ly : list BDDvar.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Lemma BDDunivl_config_OK : BDDconfig_OK (fst (BDDunivl cfg ul node ly)).
Proof.
  exact (proj1 (BDDunivl_lemma ly cfg ul node cfg_OK ul_OK used)).
Qed.

Lemma BDDunivl_node_OK :
 config_node_OK (fst (BDDunivl cfg ul node ly))
   (snd (BDDunivl cfg ul node ly)).
Proof.
  exact (proj1 (proj2 (BDDunivl_lemma ly cfg ul node cfg_OK ul_OK used))).
Qed.

Lemma BDDunivl_used_nodes_preserved :
 used_nodes_preserved cfg (fst (BDDunivl cfg ul node ly)) ul.
Proof.
  exact
   (proj1 (proj2 (proj2 (BDDunivl_lemma ly cfg ul node cfg_OK ul_OK used)))).
Qed.

Lemma BDDunivl_list_OK : used_list_OK (fst (BDDunivl cfg ul node ly)) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDunivl_used_nodes_preserved.
Qed.

Lemma BDDunivl_list_OK_cons :
 used_list_OK (fst (BDDunivl cfg ul node ly))
   (snd (BDDunivl cfg ul node ly) :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDunivl_node_OK.  exact BDDunivl_list_OK.
Qed.

Lemma BDDunivl_is_univl :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDunivl cfg ul node ly))
      (snd (BDDunivl cfg ul node ly)))
   (bool_fun_univl (bool_fun_of_BDD cfg node) ly).
Proof.
  exact
   (proj2 (proj2 (proj2 (BDDunivl_lemma ly cfg ul node cfg_OK ul_OK used)))).
Qed.

                          End BDDunivl_results.

Fixpoint BDDexl (cfg : BDDconfig) (ul : list ad) (node : ad)
 (ly : list BDDvar) {struct ly} : BDDconfig * ad :=
  match ly with
  | nil => (cfg, node)
  | y :: ly' =>
      match BDDexl cfg ul node ly' with
      | (cfg1, node1) => BDDex cfg1 (node1 :: ul) y node1
      end
  end.

Lemma BDDexl_lemma :
 forall (ly : list BDDvar) (cfg : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 BDDconfig_OK (fst (BDDexl cfg ul node ly)) /\
 config_node_OK (fst (BDDexl cfg ul node ly)) (snd (BDDexl cfg ul node ly)) /\
 used_nodes_preserved cfg (fst (BDDexl cfg ul node ly)) ul /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDexl cfg ul node ly))
      (snd (BDDexl cfg ul node ly)))
   (bool_fun_exl (bool_fun_of_BDD cfg node) ly).
Proof.
  simple induction ly.  simpl in |- *.  intros.  split.  assumption.  split.
  apply used_node'_OK with (ul := ul).  assumption.  assumption.  assumption.
  split.  apply used_nodes_preserved_refl.  apply bool_fun_eq_refl.  intros.
  simpl in |- *.
  elim (prod_sum _ _ (BDDexl cfg ul node l)).  intros cfg1 H3.
  elim H3; clear H3.  intros node1 H3.  rewrite H3.
  elim (H cfg ul node H0 H1 H2).  intros.  elim H5.  intros.
  rewrite H3 in H4.  rewrite H3 in H6.  rewrite H3 in H7.  elim H7.  intros.
  split.  apply BDDex_config_OK.
  assumption.  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.
  apply used_node'_cons_node_ul.  split.  apply BDDex_node_OK.  assumption.
  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.
  apply used_node'_cons_node_ul.  split.
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.
  apply used_nodes_preserved_cons with (node := node1).
  apply BDDex_used_nodes_preserved.  assumption.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  assumption.  apply used_node'_cons_node_ul.
  apply
   bool_fun_eq_trans with (bf2 := bool_fun_ex a (bool_fun_of_BDD cfg1 node1)).
  apply BDDex_is_ex.  assumption.  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.  
  apply used_node'_cons_node_ul.  apply bool_fun_ex_preserves_eq.
  assumption.
Qed.

                          Section BDDexl_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node : ad.
Variable ly : list BDDvar.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Lemma BDDexl_config_OK : BDDconfig_OK (fst (BDDexl cfg ul node ly)).
Proof.
  exact (proj1 (BDDexl_lemma ly cfg ul node cfg_OK ul_OK used)).
Qed.

Lemma BDDexl_node_OK :
 config_node_OK (fst (BDDexl cfg ul node ly)) (snd (BDDexl cfg ul node ly)).
Proof.
  exact (proj1 (proj2 (BDDexl_lemma ly cfg ul node cfg_OK ul_OK used))).
Qed.

Lemma BDDexl_used_nodes_preserved :
 used_nodes_preserved cfg (fst (BDDexl cfg ul node ly)) ul.
Proof.
  exact
   (proj1 (proj2 (proj2 (BDDexl_lemma ly cfg ul node cfg_OK ul_OK used)))).
Qed.

Lemma BDDexl_list_OK : used_list_OK (fst (BDDexl cfg ul node ly)) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDexl_used_nodes_preserved.
Qed.

Lemma BDDexl_list_OK_cons :
 used_list_OK (fst (BDDexl cfg ul node ly))
   (snd (BDDexl cfg ul node ly) :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDexl_node_OK.  exact BDDexl_list_OK.
Qed.

Lemma BDDexl_is_exl :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDexl cfg ul node ly))
      (snd (BDDexl cfg ul node ly)))
   (bool_fun_exl (bool_fun_of_BDD cfg node) ly).
Proof.
  exact
   (proj2 (proj2 (proj2 (BDDexl_lemma ly cfg ul node cfg_OK ul_OK used)))).
Qed.

                          End BDDexl_results.

Definition BDDsubst (cfg : BDDconfig) (ul : list ad) 
  (node1 : ad) (x : BDDvar) (node2 : ad) :=
  match BDDvar_make gc cfg ul x with
  | (cfg1, nodex) =>
      match BDDiff gc cfg1 (nodex :: ul) nodex node2 with
      | (cfg2, node3) =>
          match BDDimpl gc cfg2 (node3 :: ul) node3 node1 with
          | (cfg3, node4) => BDDuniv cfg3 (node4 :: ul) x node4
          end
      end
  end.

Lemma BDDsubst_lemma :
 forall (cfg : BDDconfig) (ul : list ad) (node1 : ad) 
   (x : BDDvar) (node2 : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node1 ->
 used_node' cfg ul node2 ->
 BDDconfig_OK (fst (BDDsubst cfg ul node1 x node2)) /\
 config_node_OK (fst (BDDsubst cfg ul node1 x node2))
   (snd (BDDsubst cfg ul node1 x node2)) /\
 used_nodes_preserved cfg (fst (BDDsubst cfg ul node1 x node2)) ul /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDsubst cfg ul node1 x node2))
      (snd (BDDsubst cfg ul node1 x node2)))
   (bool_fun_subst1 x (bool_fun_of_BDD cfg node2) (bool_fun_of_BDD cfg node1)).
Proof.
  intros.  unfold BDDsubst in |- *.  elim (prod_sum _ _ (BDDvar_make gc cfg ul x)).
  intros cfg1 H3.  elim H3; clear H3.  intros nodex H3.  rewrite H3.
  elim (prod_sum _ _ (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  intros cfg2 H4.  elim H4; clear H4; intros node3 H4.  rewrite H4.
  elim (prod_sum _ _ (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  intros cfg3 H5.  elim H5; clear H5; intros node4 H5.  rewrite H5.
  cut (BDDconfig_OK cfg1).  cut (used_nodes_preserved cfg cfg1 ul).
  cut (config_node_OK cfg1 nodex).
  cut (bool_fun_eq (bool_fun_of_BDD cfg1 nodex) (bool_fun_var x)).  intros.
  cut (used_list_OK cfg1 (nodex :: ul)).
  cut (used_node' cfg1 (nodex :: ul) nodex).
  cut (used_node' cfg1 (nodex :: ul) node2).  intros.
  cut (BDDconfig_OK cfg2).
  cut (used_nodes_preserved cfg1 cfg2 (nodex :: ul)).
  cut (config_node_OK cfg2 node3).
  cut
   (bool_fun_eq (bool_fun_of_BDD cfg2 node3)
      (bool_fun_iff (bool_fun_of_BDD cfg1 nodex) (bool_fun_of_BDD cfg1 node2))).
  intros.  cut (used_list_OK cfg2 (node3 :: ul)).  intro.
  cut (used_node' cfg2 (node3 :: ul) node1).
  cut (used_node' cfg2 (node3 :: ul) node3).  intros.
  cut (BDDconfig_OK cfg3).
  cut (used_nodes_preserved cfg2 cfg3 (node3 :: ul)).
  cut (config_node_OK cfg3 node4).
  cut
   (bool_fun_eq (bool_fun_of_BDD cfg3 node4)
      (bool_fun_impl (bool_fun_of_BDD cfg2 node3)
         (bool_fun_of_BDD cfg2 node1))).
  intros.  cut (used_list_OK cfg3 (node4 :: ul)).  intro.
  cut (used_node' cfg3 (node4 :: ul) node4).  intro.  split.
  apply BDDuniv_config_OK.  assumption.  assumption.  assumption.  split.
  apply BDDuniv_node_OK.  assumption.  assumption.  assumption.  split.
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfg2).  assumption.  
  apply used_nodes_preserved_cons with (node := nodex).  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfg3).  assumption.  
  apply used_nodes_preserved_cons with (node := node3).  assumption.  
  apply used_nodes_preserved_cons with (node := node4).
  apply BDDuniv_used_nodes_preserved.  assumption.  assumption.  assumption.  
  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_forall x (bool_fun_of_BDD cfg3 node4)).
  apply BDDuniv_is_univ.  assumption.  assumption.  assumption.  
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_forall x
                (bool_fun_impl (bool_fun_of_BDD cfg2 node3)
                   (bool_fun_of_BDD cfg2 node1))).
  apply bool_fun_forall_preserves_eq.  assumption.  unfold bool_fun_subst1 in |- *.
  apply bool_fun_forall_preserves_eq.  apply bool_fun_impl_preserves_eq.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_iff (bool_fun_of_BDD cfg1 nodex)
                (bool_fun_of_BDD cfg1 node2)).
  assumption.  apply bool_fun_iff_preserves_eq.  assumption.  
  apply used_nodes_preserved'_bool_fun with (ul := ul).  assumption.  assumption.
  assumption.  assumption.  assumption.
  apply used_nodes_preserved'_bool_fun with (ul := ul).  assumption.  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.  
  apply used_nodes_preserved_cons with (node := nodex).  assumption.  assumption.
  assumption.  apply used_node'_cons_node_ul.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfg2).
  apply cons_OK_list_OK with (node := node3).  assumption.  
  apply used_nodes_preserved_cons with (node := node3).  assumption.
  replace cfg3 with (fst (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  replace node4 with (snd (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  apply BDDimpl_is_impl.  assumption.  assumption.  assumption.  assumption.
  assumption.  rewrite H5.  reflexivity.  rewrite H5.  reflexivity.  
  replace cfg3 with (fst (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  replace node4 with (snd (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  apply BDDimpl_node_OK.  assumption.  assumption.  assumption.  assumption.  
  assumption.  rewrite H5.  reflexivity.  rewrite H5.  reflexivity.  
  replace cfg3 with (fst (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  apply BDDimpl_used_nodes_preserved.  assumption.  assumption.  assumption.
  assumption.  assumption.  rewrite H5.  reflexivity.  
  replace cfg3 with (fst (BDDimpl gc cfg2 (node3 :: ul) node3 node1)).
  apply BDDimpl_config_OK.  assumption.  assumption.  assumption.  assumption.  
  assumption.  rewrite H5.  reflexivity.  apply used_node'_cons_node_ul.  
  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.  
  apply used_nodes_preserved_cons with (node := nodex).  assumption.  assumption.  
  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.  
  apply used_nodes_preserved_cons with (node := nodex).  assumption.  
  replace cfg2 with (fst (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  replace node3 with (snd (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  apply BDDiff_is_iff.  assumption.  assumption.  assumption.  assumption.  
  assumption.  rewrite H4; reflexivity.  rewrite H4; reflexivity.  
  replace cfg2 with (fst (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  replace node3 with (snd (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  apply BDDiff_node_OK.  assumption.  assumption.  assumption.  assumption.
  assumption.  rewrite H4; reflexivity.  rewrite H4; reflexivity.  
  replace cfg2 with (fst (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  apply BDDiff_used_nodes_preserved.  assumption.  assumption.  assumption.  
  assumption.  assumption.  rewrite H4; reflexivity.  
  replace cfg2 with (fst (BDDiff gc cfg1 (nodex :: ul) nodex node2)).
  apply BDDiff_config_OK.  assumption.  assumption.  assumption.  assumption.  
  assumption.  rewrite H4; reflexivity.  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.  assumption.
  assumption.  apply used_node'_cons_node_ul.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  
  assumption.  replace cfg1 with (fst (BDDvar_make gc cfg ul x)).
  replace nodex with (snd (BDDvar_make gc cfg ul x)).  apply BDDvar_make_is_var.
  assumption.  assumption.  assumption.  rewrite H3; reflexivity.
  rewrite H3; reflexivity.  replace cfg1 with (fst (BDDvar_make gc cfg ul x)).
  replace nodex with (snd (BDDvar_make gc cfg ul x)).
  apply BDDvar_make_node_OK.  assumption.  assumption.  assumption.  
  rewrite H3; reflexivity.  rewrite H3; reflexivity.  
  replace cfg1 with (fst (BDDvar_make gc cfg ul x)).
  apply BDDvar_make_used_nodes_preserved.  assumption.  assumption.  assumption.
  rewrite H3; reflexivity.  replace cfg1 with (fst (BDDvar_make gc cfg ul x)).
  apply BDDvar_make_config_OK.  assumption.  assumption.  assumption.  
  rewrite H3; reflexivity.
Qed.

Section BDDsubst_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node1 node2 : ad.
Variable x : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used1 : used_node' cfg ul node1.
Hypothesis used2 : used_node' cfg ul node2.

Hypothesis node2_ind : bool_fun_independent (bool_fun_of_BDD cfg node2) x.

Lemma BDDsubst_config_OK : BDDconfig_OK (fst (BDDsubst cfg ul node1 x node2)).
Proof.
  exact
   (proj1 (BDDsubst_lemma cfg ul node1 x node2 cfg_OK ul_OK used1 used2)).
Qed.

Lemma BDDsubst_node_OK :
 config_node_OK (fst (BDDsubst cfg ul node1 x node2))
   (snd (BDDsubst cfg ul node1 x node2)).
Proof.
  exact
   (proj1
      (proj2 (BDDsubst_lemma cfg ul node1 x node2 cfg_OK ul_OK used1 used2))).
Qed.

Lemma BDDsubst_used_nodes_preserved :
 used_nodes_preserved cfg (fst (BDDsubst cfg ul node1 x node2)) ul.
Proof.
  exact
   (proj1
      (proj2
         (proj2
            (BDDsubst_lemma cfg ul node1 x node2 cfg_OK ul_OK used1 used2)))).
Qed.

Lemma BDDsubst_list_OK :
 used_list_OK (fst (BDDsubst cfg ul node1 x node2)) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  
  exact BDDsubst_used_nodes_preserved.
Qed.

Lemma BDDsubst_list_OK_cons :
 used_list_OK (fst (BDDsubst cfg ul node1 x node2))
   (snd (BDDsubst cfg ul node1 x node2) :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDsubst_node_OK.  exact BDDsubst_list_OK.
Qed.

Lemma BDDsubst_is_subst1 :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDsubst cfg ul node1 x node2))
      (snd (BDDsubst cfg ul node1 x node2)))
   (bool_fun_subst1 x (bool_fun_of_BDD cfg node2) (bool_fun_of_BDD cfg node1)).
Proof.
  exact
   (proj2
      (proj2
         (proj2
            (BDDsubst_lemma cfg ul node1 x node2 cfg_OK ul_OK used1 used2)))).
Qed.

Lemma BDDsubst_is_subst :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDsubst cfg ul node1 x node2))
      (snd (BDDsubst cfg ul node1 x node2)))
   (bool_fun_subst x (bool_fun_of_BDD cfg node2) (bool_fun_of_BDD cfg node1)).
Proof.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_subst1 x (bool_fun_of_BDD cfg node2)
                (bool_fun_of_BDD cfg node1)).
  exact BDDsubst_is_subst1.  apply bool_fun_subst1_eq_subst.  assumption.  
Qed.

End BDDsubst_results.

Section BDDreplace_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node : ad.
Variable x y : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Hypothesis xy_neq : Neqb x y = false.

Definition BDDreplace :=
  match BDDvar_make gc cfg ul y with
  | (cfg1, nodey) => BDDsubst cfg1 (nodey :: ul) node x nodey
  end.

Lemma BDDreplace_config_OK : BDDconfig_OK (fst BDDreplace).
Proof.
  unfold BDDreplace in |- *.  elim (prod_sum _ _ (BDDvar_make gc cfg ul y)).
  intros cfg1 H.  elim H; clear H.  intros nodey H.  rewrite H.
  replace cfg1 with (fst (BDDvar_make gc cfg ul y)).
  replace nodey with (snd (BDDvar_make gc cfg ul y)).  apply BDDsubst_config_OK.
  apply BDDvar_make_config_OK; assumption.
  apply BDDvar_make_list_OK_cons; assumption.  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.  
  apply BDDvar_make_used_nodes_preserved; assumption.  assumption.  
  apply used_node'_cons_node_ul.  rewrite H; reflexivity.
  rewrite H; reflexivity.
Qed.

Lemma BDDreplace_node_OK : config_node_OK (fst BDDreplace) (snd BDDreplace).
Proof.
  unfold BDDreplace in |- *.  elim (prod_sum _ _ (BDDvar_make gc cfg ul y)).
  intros cfg1 H.  elim H; clear H.  intros nodey H.  rewrite H.
  replace cfg1 with (fst (BDDvar_make gc cfg ul y)).
  replace nodey with (snd (BDDvar_make gc cfg ul y)).  apply BDDsubst_node_OK.
  apply BDDvar_make_config_OK; assumption.  
  apply BDDvar_make_list_OK_cons; assumption.  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.
  apply BDDvar_make_used_nodes_preserved; assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H; reflexivity.  
  rewrite H; reflexivity.
Qed.

Lemma BDDreplace_used_nodes_preserved :
 used_nodes_preserved cfg (fst BDDreplace) ul.
Proof.
  unfold BDDreplace in |- *.  elim (prod_sum _ _ (BDDvar_make gc cfg ul y)).
  intros cfg1 H.  elim H; clear H.  intros nodey H.  rewrite H.
  replace cfg1 with (fst (BDDvar_make gc cfg ul y)).
  replace nodey with (snd (BDDvar_make gc cfg ul y)). 
  apply
   used_nodes_preserved_trans with (cfg2 := fst (BDDvar_make gc cfg ul y)).
  assumption.  apply BDDvar_make_used_nodes_preserved; assumption.  
  apply
   used_nodes_preserved_cons with (node := snd (BDDvar_make gc cfg ul y)).  
  apply BDDsubst_used_nodes_preserved.  apply BDDvar_make_config_OK; assumption.
  apply BDDvar_make_list_OK_cons; assumption.  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.
  apply BDDvar_make_used_nodes_preserved; assumption.  assumption.
  apply used_node'_cons_node_ul.  rewrite H; reflexivity.  
  rewrite H; reflexivity.
Qed.

Lemma BDDreplace_list_OK : used_list_OK (fst BDDreplace) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDreplace_used_nodes_preserved.
Qed.

Lemma BDDreplace_list_OK_cons :
 used_list_OK (fst BDDreplace) (snd BDDreplace :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDreplace_node_OK.  exact BDDreplace_list_OK.
Qed.

Lemma BDDreplace_is_replace :
 bool_fun_eq (bool_fun_of_BDD (fst BDDreplace) (snd BDDreplace))
   (bool_fun_replace x y (bool_fun_of_BDD cfg node)).
Proof.
  unfold BDDreplace in |- *.  elim (prod_sum _ _ (BDDvar_make gc cfg ul y)).
  intros cfg1 H.  elim H; clear H.  intros nodey H.  rewrite H.
  replace cfg1 with (fst (BDDvar_make gc cfg ul y)).
  replace nodey with (snd (BDDvar_make gc cfg ul y)).  unfold bool_fun_replace in |- *.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_subst x
                (bool_fun_of_BDD (fst (BDDvar_make gc cfg ul y))
                   (snd (BDDvar_make gc cfg ul y)))
                (bool_fun_of_BDD (fst (BDDvar_make gc cfg ul y)) node)).
  apply BDDsubst_is_subst.  apply BDDvar_make_config_OK; assumption.  
  apply BDDvar_make_list_OK_cons; assumption.  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.  
  apply BDDvar_make_used_nodes_preserved; assumption.  assumption.
  apply used_node'_cons_node_ul.  
  apply bool_fun_eq_independent with (bf1 := bool_fun_var y).
  apply bool_fun_eq_sym.  apply BDDvar_make_is_var; assumption.  
  unfold bool_fun_independent, bool_fun_var in |- *.
  unfold bool_fun_restrict, augment, bool_fun_eq in |- *.  intros.  rewrite xy_neq.
  reflexivity.  apply bool_fun_subst_preserves_eq.
  apply used_nodes_preserved'_bool_fun with (ul := ul).  assumption.  
  apply BDDvar_make_config_OK; assumption.
  apply BDDvar_make_used_nodes_preserved; assumption.  assumption.  assumption.
  apply BDDvar_make_is_var; assumption.  rewrite H; reflexivity.  
  rewrite H; reflexivity.
Qed.

End BDDreplace_results.

Fixpoint BDDreplacel (cfg : BDDconfig) (ul : list ad) 
 (node : ad) (lx ly : list BDDvar) {struct ly} : BDDconfig * ad :=
  match lx, ly with
  | nil, _ => (cfg, node)
  | _ :: _, nil => (cfg, node)
  | x :: lx', y :: ly' =>
      match BDDreplacel cfg ul node lx' ly' with
      | (cfg1, node1) => BDDreplace cfg1 (node1 :: ul) node1 x y
      end
  end.

Lemma BDDreplacel_lemma :
 forall (lx ly : list ad) (cfg : BDDconfig) (ul : list ad) (node : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul node ->
 ad_list_neq lx ly = true ->
 BDDconfig_OK (fst (BDDreplacel cfg ul node lx ly)) /\
 config_node_OK (fst (BDDreplacel cfg ul node lx ly))
   (snd (BDDreplacel cfg ul node lx ly)) /\
 used_nodes_preserved cfg (fst (BDDreplacel cfg ul node lx ly)) ul /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDreplacel cfg ul node lx ly))
      (snd (BDDreplacel cfg ul node lx ly)))
   (bool_fun_replacel (bool_fun_of_BDD cfg node) lx ly).
Proof.
  simple induction lx.  simple induction ly.  simpl in |- *.  intros.  split.  assumption.  split.
  apply used_node'_OK with (ul := ul).  assumption.  assumption.  assumption.
  split.  apply used_nodes_preserved_refl.  apply bool_fun_eq_refl.  simpl in |- *.
  intros.  split.  assumption.  split.  apply used_node'_OK with (ul := ul).
  assumption.  assumption.  assumption.  split.
  apply used_nodes_preserved_refl.  apply bool_fun_eq_refl.  simple induction ly.
  simpl in |- *.  intros.  split.  assumption.  split.  apply used_node'_OK with (ul := ul).
  assumption.  assumption.  assumption.  split.
  apply used_nodes_preserved_refl.  apply bool_fun_eq_refl.  simpl in |- *.  intros.
  elim (prod_sum _ _ (BDDreplacel cfg ul node l l0)).  intros cfg1 H5.
  elim H5; clear H5; intros node1 H5.  elim (H l0 cfg ul node H1 H2 H3).
  rewrite H5.  simpl in |- *.  intros.
  elim H7; clear H7; intros H9 H8; elim H8; clear H8; intros H8 H11. 

  cut (used_list_OK cfg1 (node1 :: ul)).  intro.  split.
  apply BDDreplace_config_OK.  assumption.  assumption.
  apply used_node'_cons_node_ul.  split.  apply BDDreplace_node_OK.  assumption.
  assumption.  apply used_node'_cons_node_ul.  split.
  apply used_nodes_preserved_trans with (cfg2 := cfg1).  assumption.  assumption.
  apply used_nodes_preserved_cons with (node := node1).
  apply BDDreplace_used_nodes_preserved.  assumption.  assumption.
  apply used_node'_cons_node_ul.  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_replace a a0 (bool_fun_of_BDD cfg1 node1)).
  apply BDDreplace_is_replace.  assumption.  assumption.
  apply used_node'_cons_node_ul.  apply not_true_is_false.  unfold not in |- *; intro.
  rewrite H10 in H4; discriminate.  apply bool_fun_replace_preserves_eq.
  assumption.  apply node_OK_list_OK.  assumption.  
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.  
  elim (andb_prop _ _ H4).  trivial.  
Qed.

Section BDDreplacel_results.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable node : ad.
Variable lx ly : list BDDvar.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis used : used_node' cfg ul node.

Hypothesis lxy_neq : ad_list_neq lx ly = true.

Lemma BDDreplacel_config_OK :
 BDDconfig_OK (fst (BDDreplacel cfg ul node lx ly)).
Proof.
  exact
   (proj1 (BDDreplacel_lemma lx ly cfg ul node cfg_OK ul_OK used lxy_neq)).
Qed.

Lemma BDDreplacel_node_OK :
 config_node_OK (fst (BDDreplacel cfg ul node lx ly))
   (snd (BDDreplacel cfg ul node lx ly)).
Proof.
  exact
   (proj1
      (proj2 (BDDreplacel_lemma lx ly cfg ul node cfg_OK ul_OK used lxy_neq))).
Qed.

Lemma BDDreplacel_used_nodes_preserved :
 used_nodes_preserved cfg (fst (BDDreplacel cfg ul node lx ly)) ul.
Proof.
  exact
   (proj1
      (proj2
         (proj2
            (BDDreplacel_lemma lx ly cfg ul node cfg_OK ul_OK used lxy_neq)))).
Qed.

Lemma BDDreplacel_list_OK :
 used_list_OK (fst (BDDreplacel cfg ul node lx ly)) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDreplacel_used_nodes_preserved.
Qed.

Lemma BDDreplacel_list_OK_cons :
 used_list_OK (fst (BDDreplacel cfg ul node lx ly))
   (snd (BDDreplacel cfg ul node lx ly) :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDreplacel_node_OK.  exact BDDreplacel_list_OK.
Qed.

Lemma BDDreplacel_is_replacel :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDreplacel cfg ul node lx ly))
      (snd (BDDreplacel cfg ul node lx ly)))
   (bool_fun_replacel (bool_fun_of_BDD cfg node) lx ly).
Proof.
  exact
   (proj2
      (proj2
         (proj2
            (BDDreplacel_lemma lx ly cfg ul node cfg_OK ul_OK used lxy_neq)))).
Qed.

End BDDreplacel_results.

End BDDquant.

Fixpoint be_x_free (x : BDDvar) (be : bool_expr) {struct be} : bool :=
  match be with
  | Zero => false
  | One => false
  | Var y => Neqb x y
  | Neg be1 => be_x_free x be1
  | Or be1 be2 => be_x_free x be1 || be_x_free x be2
  | ANd be1 be2 => be_x_free x be1 || be_x_free x be2
  | Impl be1 be2 => be_x_free x be1 || be_x_free x be2
  | Iff be1 be2 => be_x_free x be1 || be_x_free x be2
  end.

Lemma subst_x_free :
 forall (be bex : bool_expr) (x y : BDDvar),
 be_x_free y (subst x bex be) = true ->
 be_x_free y be = true /\ Neqb x y = false \/ be_x_free y bex = true.
Proof.
  simple induction be.  simpl in |- *.  intros.  discriminate.  simpl in |- *.  intros.  discriminate.
  simpl in |- *.  intros.  elim (sumbool_of_bool (Neqb x b)).  intro y0.  rewrite y0 in H.
  right.  assumption.  intro y0.  rewrite y0 in H.  simpl in H.  left.  split.
  assumption.  rewrite (Neqb_complete _ _ H).  assumption.  simpl in |- *.  intros.
  apply H.  assumption.  simpl in |- *.  intros.  elim (orb_prop _ _ H1).  intro.
  elim (H bex x y H2).  intros.  elim H3.  intros.  rewrite H4.  left.  simpl in |- *.
  split.  reflexivity.  assumption.  intro.  right.  assumption.  intro.
  elim (H0 bex x y H2).  intros.  elim H3.  intros.  rewrite H4.  left.  split.
  elim (be_x_free y b); reflexivity.  assumption.  intro.  right.  assumption.
  simpl in |- *.  intros.  elim (orb_prop _ _ H1).  intro.  elim (H bex x y H2).
  intros.  elim H3.  intros.  rewrite H4.  left.  simpl in |- *.  split.  reflexivity.
  assumption.  intro.  right.  assumption.  intro.  elim (H0 bex x y H2).
  intros.  elim H3.  intros.  rewrite H4.  left.  split.
  elim (be_x_free y b); reflexivity.  assumption.  intro.  right.  assumption.
  simpl in |- *.  intros.  elim (orb_prop _ _ H1).  intro.  elim (H bex x y H2).
  intros.  elim H3.  intros.  rewrite H4.  left.  simpl in |- *.  split.  reflexivity.
  assumption.  intro.  right.  assumption.  intro.  elim (H0 bex x y H2).
  intros.  elim H3.  intros.  rewrite H4.  left.  split.
  elim (be_x_free y b); reflexivity.  assumption.  intro.  right.  assumption.
  simpl in |- *.  intros.  elim (orb_prop _ _ H1).  intro.  elim (H bex x y H2).
  intros.  elim H3.  intros.  rewrite H4.  left.  simpl in |- *.  split.  reflexivity.
  assumption.  intro.  right.  assumption.  intro.  elim (H0 bex x y H2).
  intros.  elim H3.  intros.  rewrite H4.  left.  split.
  elim (be_x_free y b); reflexivity.  assumption.  intro.  right.  assumption.
Qed.

Lemma restrict_x_free :
 forall (be : bool_expr) (x y : BDDvar) (b : bool),
 be_x_free y (restrict x b be) = true ->
 be_x_free y be = true /\ Neqb x y = false.
Proof.
  unfold restrict in |- *.  intros.  elim (subst_x_free be (bool_to_be b) x y H).
  trivial.  elim b.  simpl in |- *.  intro.  discriminate.  simpl in |- *.  intro.
  discriminate.
Qed.

Lemma replace_x_free :
 forall (be : bool_expr) (x y z : BDDvar),
 be_x_free z (replace x y be) = true ->
 be_x_free z be = true /\ Neqb x z = false \/ Neqb y z = true.
Proof.
  unfold replace in |- *.  intros.  elim (subst_x_free be (Var y) x z H).  intros.
  left.  assumption.  simpl in |- *.  intro.  right.  rewrite (Neqb_complete _ _ H0).
  apply Neqb_correct.
Qed.

Lemma replacel_x_free :
 forall (lx ly : list ad) (be : bool_expr) (x : BDDvar),
 length lx = length ly ->
 be_x_free x (replacel be lx ly) = true ->
 be_x_free x be = true /\ ~ In x lx \/ In x ly.
Proof.
  simple induction lx.  intro.  elim ly.  simpl in |- *.  intros.  left.  split.  assumption.
  unfold not in |- *.  trivial.  simpl in |- *.  intros.  left.  split.  assumption.
  unfold not in |- *.  trivial.  intros a l H ly.  elim ly.  simpl in |- *.  intros.
  discriminate.  simpl in |- *.  intros.
  elim (replace_x_free (replacel be l l0) a a0 x H2).  intro.
  elim H3; intros H5 H6.
  elim (H l0 be x).  intro.
  elim H4; intros H8 H9.

  left.
  split.  assumption.  unfold not in |- *; intro.  elim H7; intro.  rewrite H10 in H6.
  rewrite (Neqb_correct x) in H6.  discriminate.  elim (H9 H10).  intro.
  right.  right.  assumption.  apply eq_add_S.  assumption.  assumption.  intro.
  right.  left.  apply Neqb_complete.  assumption.  
Qed.

Lemma impl_x_free :
 forall (be1 be2 : bool_expr) (x : BDDvar),
 be_x_free x (Impl be1 be2) = true ->
 be_x_free x be1 = true \/ be_x_free x be2 = true.
Proof.
  simpl in |- *.  intros.  elim (orb_prop _ _ H); auto.  
Qed.

Lemma and_x_free :
 forall (be1 be2 : bool_expr) (x : BDDvar),
 be_x_free x (ANd be1 be2) = true ->
 be_x_free x be1 = true \/ be_x_free x be2 = true.
Proof.
  simpl in |- *.  intros.  elim (orb_prop _ _ H); auto.  
Qed.

Lemma univ_x_free :
 forall (be : bool_expr) (x y : BDDvar),
 be_x_free y (forall_ x be) = true ->
 be_x_free y be = true /\ Neqb x y = false.
Proof.
  unfold forall_ in |- *.  intros.  elim (and_x_free _ _ _ H).  intro.
  elim (restrict_x_free _ _ _ _ H0).  auto.  intro.
  elim (restrict_x_free _ _ _ _ H0).  auto.  
Qed.

Lemma ex_x_free :
 forall (be : bool_expr) (x y : BDDvar),
 be_x_free y (be_ex x be) = true ->
 be_x_free y be = true /\ Neqb x y = false.
Proof.
  unfold be_ex in |- *.  intros.  elim (and_x_free _ _ _ H).  intro.
  elim (restrict_x_free _ _ _ _ H0).  auto.  intro.
  elim (restrict_x_free _ _ _ _ H0).  auto.  
Qed.

Lemma univl_x_free :
 forall (lx : list ad) (be : bool_expr) (x : BDDvar),
 be_x_free x (univl be lx) = true -> be_x_free x be = true /\ ~ In x lx.
Proof.
  simple induction lx.  simpl in |- *.  auto.  intros.  elim (univ_x_free _ _ _ H0).
  fold (univl be l) in |- *.  intros.  elim (H be x H1).  intros.  split.  assumption.
  simpl in |- *.  unfold not in |- *; intros.  elim H5.  intro.  rewrite H6 in H2.
  rewrite (Neqb_correct x) in H2; discriminate.  intro.  elim (H4 H6).  
Qed.

Lemma exl_x_free :
 forall (lx : list ad) (be : bool_expr) (x : BDDvar),
 be_x_free x (exl be lx) = true -> be_x_free x be = true /\ ~ In x lx.
Proof.
  simple induction lx.  simpl in |- *.  auto.  intros.  elim (ex_x_free _ _ _ H0).
  fold (exl be l) in |- *.  intros.  elim (H be x H1).  intros.  split.  assumption.
  simpl in |- *.  unfold not in |- *; intros.  elim H5.  intro.  rewrite H6 in H2.
  rewrite (Neqb_correct x) in H2; discriminate.  intro.  elim (H4 H6).  
Qed.

Definition var_env' := nat -> bool.
Definition var_env_to_env' (ve : var_env) : var_env' :=
  fun n : nat => ve (N_of_nat n).
Definition var_env'_to_env (ve : var_env') : var_env :=
  fun x : BDDvar => ve (nat_of_N x).
Definition eval_be' (be : bool_expr) (ve : var_env') :=
  bool_fun_of_bool_expr be (var_env'_to_env ve).
Definition var_env'' := Map unit.
Definition var_env''_to_env (ve : var_env'') : var_env :=
  fun x : ad => in_dom _ x ve.
Definition var_env''_to_env' (ve : var_env'') : var_env' :=
  fun n : nat => in_dom _ (N_of_nat n) ve.

Definition be_eq (be1 be2 : bool_expr) :=
  forall ve : var_env', eval_be' be1 ve = eval_be' be2 ve.
Definition be_eq_dec (be1 be2 : bool_expr) :=
  is_tauto (fun x _ => x) (Iff be1 be2).

Definition be_le (be1 be2 : bool_expr) :=
  forall ve : var_env', eval_be' be1 ve = true -> eval_be' be2 ve = true.

Lemma be_eq_refl : forall be : bool_expr, be_eq be be.
Proof.
  unfold be_eq in |- *.  trivial.
Qed.

Lemma be_eq_sym : forall be1 be2 : bool_expr, be_eq be1 be2 -> be_eq be2 be1.
Proof.
  unfold be_eq in |- *.  intros.  rewrite (H ve).  reflexivity.
Qed.

Lemma be_eq_le : forall be1 be2 : bool_expr, be_eq be1 be2 -> be_le be1 be2.
Proof.
  unfold be_eq, be_le in |- *.  intros.  rewrite <- (H ve).  assumption.
Qed.

Lemma be_eq_dec_correct :
 forall be1 be2 : bool_expr,
 bool_fun_eq (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2) ->
 be_eq_dec be1 be2 = true.
Proof.
  intros.  unfold be_eq_dec in |- *.
  elim (is_tauto_lemma (fun x _ => x) gc_inf_OK (Iff be1 be2)).  intros.  clear H0.
  apply H1.  simpl in |- *.  unfold bool_fun_iff, bool_fun_one in |- *.  unfold bool_fun_eq in |- *.
  intros.  unfold bool_fun_eq in H.  rewrite (H vb).
  elim (bool_fun_of_bool_expr be2 vb).  reflexivity.  reflexivity.
Qed.

Lemma be_eq_dec_complete :
 forall be1 be2 : bool_expr,
 be_eq_dec be1 be2 = true ->
 bool_fun_eq (bool_fun_of_bool_expr be1) (bool_fun_of_bool_expr be2).
Proof.
  unfold be_eq_dec in |- *.  intros.
  elim (is_tauto_lemma (fun x _ => x) gc_inf_OK (Iff be1 be2)).  intros.  clear H1.
  cut (bool_fun_eq bool_fun_one (bool_fun_of_bool_expr (Iff be1 be2))).  simpl in |- *.
  unfold bool_fun_one, bool_fun_eq, bool_fun_iff in |- *.  intros.
  rewrite
   (eqb_prop (bool_fun_of_bool_expr be1 vb) (bool_fun_of_bool_expr be2 vb))
   .
  reflexivity.  symmetry  in |- *.  apply H1.  apply H0.  assumption.
Qed.

Lemma be_eq_dec_eq :
 forall be1 be2 : bool_expr, be_eq_dec be1 be2 = true -> be_eq be1 be2.
Proof.
  intros.  unfold be_eq in |- *.  unfold eval_be' in |- *.  intros.
  cut (bool_fun_eq bool_fun_one (bool_fun_of_bool_expr (Iff be1 be2))).  simpl in |- *.
  unfold bool_fun_one, bool_fun_eq, bool_fun_iff in |- *.  intros.
  rewrite
   (eqb_prop (bool_fun_of_bool_expr be1 (var_env'_to_env ve))
      (bool_fun_of_bool_expr be2 (var_env'_to_env ve)))
   .
  reflexivity.  symmetry  in |- *.  apply H0.
  elim (is_tauto_lemma (fun x _ => x) gc_inf_OK (Iff be1 be2)).  intros.  apply H0.
  exact H.
Qed.

Lemma bool_fun_var_ext : forall x : BDDvar, bool_fun_ext (bool_fun_var x).
Proof.
  unfold bool_fun_ext, bool_fun_var in |- *.  trivial.
Qed.

Lemma bool_fun_neg_ext :
 forall bf1 : bool_fun, bool_fun_ext bf1 -> bool_fun_ext (bool_fun_neg bf1).
Proof.
  unfold bool_fun_neg, bool_fun_ext in |- *.  intros.  rewrite (H vb vb' H0).
  reflexivity.
Qed.

Lemma bool_fun_and_ext :
 forall bf1 bf2 : bool_fun,
 bool_fun_ext bf1 -> bool_fun_ext bf2 -> bool_fun_ext (bool_fun_and bf1 bf2).
Proof.
  unfold bool_fun_ext, bool_fun_and in |- *.  intros.  rewrite (H vb vb' H1).
  rewrite (H0 vb vb' H1).  reflexivity.
Qed.

Lemma bool_fun_or_ext :
 forall bf1 bf2 : bool_fun,
 bool_fun_ext bf1 -> bool_fun_ext bf2 -> bool_fun_ext (bool_fun_or bf1 bf2).
Proof.
  unfold bool_fun_ext, bool_fun_or in |- *.  intros.  rewrite (H vb vb' H1).
  rewrite (H0 vb vb' H1).  reflexivity.
Qed.

Lemma bool_fun_impl_ext :
 forall bf1 bf2 : bool_fun,
 bool_fun_ext bf1 -> bool_fun_ext bf2 -> bool_fun_ext (bool_fun_impl bf1 bf2).
Proof.
  unfold bool_fun_ext, bool_fun_impl in |- *.  intros.  rewrite (H vb vb' H1).
  rewrite (H0 vb vb' H1).  reflexivity.
Qed.

Lemma bool_fun_iff_ext :
 forall bf1 bf2 : bool_fun,
 bool_fun_ext bf1 -> bool_fun_ext bf2 -> bool_fun_ext (bool_fun_iff bf1 bf2).
Proof.
  unfold bool_fun_ext, bool_fun_iff in |- *.  intros.  rewrite (H vb vb' H1).
  rewrite (H0 vb vb' H1).  reflexivity.
Qed.

Lemma bool_fun_of_be_ext :
 forall be : bool_expr, bool_fun_ext (bool_fun_of_bool_expr be).
Proof.
  simple induction be.  simpl in |- *.  exact bool_fun_ext_zero.  exact bool_fun_ext_one.
  exact bool_fun_var_ext.  simpl in |- *.  intros.  apply bool_fun_neg_ext.  assumption.
  simpl in |- *.  intros.  apply bool_fun_or_ext.  assumption.  assumption.  simpl in |- *.
  intros.  apply bool_fun_and_ext.  assumption.  assumption.  simpl in |- *.  intros.
  apply bool_fun_impl_ext.  assumption.  assumption.  simpl in |- *.  intros.
  apply bool_fun_iff_ext.  assumption.  assumption.
Qed.

Lemma be_le_refl : forall be : bool_expr, be_le be be.
Proof.
  unfold be_le in |- *.  auto.
Qed.

Lemma be_le_trans :
 forall be1 be2 be3 : bool_expr,
 be_le be1 be2 -> be_le be2 be3 -> be_le be1 be3.
Proof.
  unfold be_le in |- *; auto.
Qed.

Lemma be_le_antisym :
 forall be1 be2 : bool_expr, be_le be1 be2 -> be_le be2 be1 -> be_eq be1 be2.
Proof.
  unfold be_le in |- *.  unfold be_eq in |- *.  intros.
  elim (sumbool_of_bool (eval_be' be1 ve)).  intro y.  rewrite y.
  rewrite (H ve).  reflexivity.  assumption.  intro y.  rewrite y.  symmetry  in |- *.
  apply not_true_is_false.  unfold not in |- *; intro.  rewrite (H0 ve H1) in y.
  discriminate.
Qed.

Lemma be_eq_trans :
 forall be1 be2 be3 : bool_expr,
 be_eq be1 be2 -> be_eq be2 be3 -> be_eq be1 be3.
Proof.
  unfold be_eq in |- *.  intros.  rewrite (H ve).  apply H0.
Qed.

Lemma be_eq_eq_dec :
 forall be1 be2 : bool_expr, be_eq be1 be2 -> be_eq_dec be1 be2 = true.
Proof.
  intros.  elim (is_tauto_lemma (fun x _ => x) gc_inf_OK (Iff be1 be2)).  intros.
  apply H1.  clear H0 H1.  simpl in |- *.  unfold bool_fun_iff, bool_fun_one, bool_fun_eq in |- *.
  intro.  unfold be_eq in H.  unfold eval_be' in H.
  cut
   (bool_fun_of_bool_expr be1 vb =
    bool_fun_of_bool_expr be1 (var_env'_to_env (var_env_to_env' vb))).
  intro.  cut
   (bool_fun_of_bool_expr be2 vb =
    bool_fun_of_bool_expr be2 (var_env'_to_env (var_env_to_env' vb))).
  intro.  rewrite H0.  rewrite H1.  rewrite (H (var_env_to_env' vb)).  symmetry  in |- *.
  apply eqb_reflx.  apply (bool_fun_of_be_ext be2).
  unfold var_env'_to_env, var_env_to_env' in |- *.  intro.  rewrite (N_of_nat_of_N x).
  reflexivity.  apply (bool_fun_of_be_ext be1).  intro.
  unfold var_env'_to_env, var_env_to_env' in |- *.  rewrite (N_of_nat_of_N x).
  reflexivity.
Qed.

Lemma be_le_not_1 :
 forall be1 be2 : bool_expr, be_le be1 be2 -> be_le (Neg be2) (Neg be1).
Proof.
  unfold be_le in |- *.  intros.  unfold eval_be' in |- *.  simpl in |- *.  unfold eval_be' in H0.
  simpl in H0.  unfold bool_fun_neg in |- *.  unfold bool_fun_neg in H0.
  unfold eval_be' in H.
  elim (sumbool_of_bool (bool_fun_of_bool_expr be1 (var_env'_to_env ve))).
  intro y.  rewrite (H ve y) in H0.  discriminate.  intro y.  rewrite y.
  reflexivity.
Qed.

Lemma and_le :
 forall be1 be2 be1' be2' : bool_expr,
 be_le be1 be1' -> be_le be2 be2' -> be_le (ANd be1 be2) (ANd be1' be2').
Proof.
  unfold be_le in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_and in |- *.  intros.
  elim (andb_prop _ _ H1).  intros.  rewrite (H ve H2).  rewrite (H0 ve H3).
  reflexivity.
Qed.

Lemma or_le :
 forall be1 be2 be1' be2' : bool_expr,
 be_le be1 be1' -> be_le be2 be2' -> be_le (Or be1 be2) (Or be1' be2').
Proof.
  unfold be_le in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_or in |- *.  intros.
  elim (orb_prop _ _ H1).  intros.  rewrite (H ve H2).  reflexivity.
  intros.  rewrite (H0 ve H2).  auto with bool.
Qed.

Lemma impl_le :
 forall be1 be2 be1' be2' : bool_expr,
 be_le be1' be1 -> be_le be2 be2' -> be_le (Impl be1 be2) (Impl be1' be2').
Proof.
  unfold be_le in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_impl in |- *.  intros.
  elim (sumbool_of_bool (bool_fun_of_bool_expr be2' (var_env'_to_env ve))).
  intro y.  rewrite y.
  elim (bool_fun_of_bool_expr be1' (var_env'_to_env ve)); reflexivity.  intro y.
  rewrite y.
  elim (sumbool_of_bool (bool_fun_of_bool_expr be1' (var_env'_to_env ve))).
  intro y0.  rewrite (H ve y0) in H1.  simpl in H1.  rewrite (H0 ve H1) in y.
  discriminate.  intro y0.  rewrite y0.  reflexivity.
Qed.

Lemma and_eq :
 forall be1 be2 be1' be2' : bool_expr,
 be_eq be1 be1' -> be_eq be2 be2' -> be_eq (ANd be1 be2) (ANd be1' be2').
Proof.
  unfold be_eq in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_and in |- *.  intros.
  rewrite (H ve).  rewrite (H0 ve).  reflexivity.
Qed.

Lemma or_eq :
 forall be1 be2 be1' be2' : bool_expr,
 be_eq be1 be1' -> be_eq be2 be2' -> be_eq (Or be1 be2) (Or be1' be2').
Proof.
  unfold be_eq in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_or in |- *.  intros.
  rewrite (H ve).  rewrite (H0 ve).  reflexivity.
Qed.

Lemma impl_eq :
 forall be1 be2 be1' be2' : bool_expr,
 be_eq be1 be1' -> be_eq be2 be2' -> be_eq (Impl be1 be2) (Impl be1' be2').
Proof.
  unfold be_eq in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_impl in |- *.  intros.
  rewrite (H ve).  rewrite (H0 ve).  reflexivity.
Qed.

Lemma iff_eq :
 forall be1 be2 be1' be2' : bool_expr,
 be_eq be1 be1' -> be_eq be2 be2' -> be_eq (Iff be1 be2) (Iff be1' be2').
Proof.
  unfold be_eq in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_iff in |- *.  intros.
  rewrite (H ve).  rewrite (H0 ve).  reflexivity.
Qed.

Lemma neg_eq_eq :
 forall be1 be2 : bool_expr, be_eq (Neg be1) (Neg be2) -> be_eq be1 be2.
Proof.
  unfold be_eq in |- *.  unfold eval_be' in |- *.  simpl in |- *.  unfold bool_fun_neg in |- *.  intros.
  rewrite (negb_intro (bool_fun_of_bool_expr be1 (var_env'_to_env ve))).
  rewrite (H ve).
  rewrite (negb_elim (bool_fun_of_bool_expr be2 (var_env'_to_env ve))).
  reflexivity.
Qed.

Lemma eq_neg_eq :
 forall be1 be2 : bool_expr, be_eq be1 be2 -> be_eq (Neg be1) (Neg be2).
Proof.
  unfold be_eq in |- *.  unfold eval_be' in |- *.  simpl in |- *.  intros.  unfold bool_fun_neg in |- *.
  rewrite (H ve).  reflexivity.
Qed.

Section Nsec.

Variable N : nat.

Definition ap (n : nat) := N_of_nat n.
Definition ap' (n : nat) := N_of_nat (N + n).

Fixpoint lx_1 (n : nat) : list ad :=
  match n with
  | O => nil
  | S m => ap m :: lx_1 m
  end.

Fixpoint lx'_1 (n : nat) : list ad :=
  match n with
  | O => nil (A:=ad)
  | S m => ap' m :: lx'_1 m
  end.

Definition lx := lx_1 N.
Definition lx' := lx'_1 N.
Lemma ap_neq_ap' : forall n : nat, n < N -> Neqb (ap n) (ap' n) = false.
Proof.
  simple induction n.  intros.  unfold ap, ap' in |- *.  rewrite <- (plus_n_O N).
  apply not_true_is_false.  unfold not in |- *; intro.  elim (lt_irrefl N).
  replace (N < N) with (0 < N).  assumption.
  replace 0 with (nat_of_N (N_of_nat 0)).  rewrite (Neqb_complete _ _ H0).
  rewrite (nat_of_N_of_nat N).  reflexivity.  reflexivity.  intros.
  unfold ap, ap' in |- *.  rewrite <- (plus_Snm_nSm N n0).  apply not_true_is_false.
  unfold not in |- *; intro.
  cut (nat_of_N (N_of_nat (S n0)) = nat_of_N (N_of_nat (S N + n0))).
  rewrite (nat_of_N_of_nat (S n0)).  rewrite (nat_of_N_of_nat (S N + n0)).
  simpl in |- *.  intro.  unfold ap, ap' in H.  rewrite <- (eq_add_S _ _ H2) in H.
  rewrite (Neqb_correct (N_of_nat n0)) in H.  cut (true = false).  intro.
  discriminate.  apply H.  apply lt_trans with (m := S n0).  apply lt_n_Sn.
  assumption.  rewrite (Neqb_complete _ _ H1).  reflexivity.
Qed.

Lemma lx_1_neg_lx'_1 :
 forall n : nat, n <= N -> ad_list_neq (lx_1 n) (lx'_1 n) = true.
Proof.
  simple induction n.  simpl in |- *.  reflexivity.  simpl in |- *.  intros.  apply andb_true_intro.
  split.  rewrite (ap_neq_ap' n0).  reflexivity.  exact H0.  apply H.
  apply lt_le_weak.  assumption.
Qed.

Lemma lx_neq_lx' : ad_list_neq lx lx' = true.
Proof.
  unfold lx, lx' in |- *.  apply lx_1_neg_lx'_1.  apply le_n.
Qed.

Lemma lt_O_n_lx'_1 : forall n : nat, 0 < n -> In (ap' 0) (lx'_1 n).
Proof.
  simple induction n.  intros.  elim (lt_irrefl _ H).  intros.  simpl in |- *.  unfold lt in H0.
  elim (le_le_S_eq 0 n0).  intros.  right.  apply H.  unfold lt in |- *.  assumption.
  intro.  left.  rewrite H1.  reflexivity.  apply le_S_n.  assumption.  
Qed.

Definition bool_fun_mu_all (bft bfg : bool_fun) : bool_fun :=
  bool_fun_univl (bool_fun_impl bft (bool_fun_replacel bfg lx lx')) lx'.

Definition bool_fun_mu_ex (bft bfg : bool_fun) : bool_fun :=
  bool_fun_exl (bool_fun_and bft (bool_fun_replacel bfg lx lx')) lx'.

Definition mu_all_eval (t be : bool_expr) : bool_expr :=
  univl (Impl t (replacel be lx lx')) lx'.

Definition mu_ex_eval (t be : bool_expr) : bool_expr :=
  exl (ANd t (replacel be lx lx')) lx'.

Definition BDDmu_all (gc : BDDconfig -> list ad -> BDDconfig)
  (cfg : BDDconfig) (ul : list ad) (nodet nodeg : ad) :=
  match BDDreplacel gc cfg ul nodeg lx lx' with
  | (cfgr, noder) =>
      match BDDimpl gc cfgr (noder :: ul) nodet noder with
      | (cfgi, nodei) => BDDunivl gc cfgi (nodei :: ul) nodei lx'
      end
  end.

Definition BDDmu_ex (gc : BDDconfig -> list ad -> BDDconfig)
  (cfg : BDDconfig) (ul : list ad) (nodet nodeg : ad) :=
  match BDDreplacel gc cfg ul nodeg lx lx' with
  | (cfgr, noder) =>
      match BDDand gc cfgr (noder :: ul) nodet noder with
      | (cfga, nodea) => BDDexl gc cfga (nodea :: ul) nodea lx'
      end
  end.

Lemma bool_fun_univl_preserves_eq :
 forall (l : list ad) (bf1 bf2 : bool_fun),
 bool_fun_eq bf1 bf2 ->
 bool_fun_eq (bool_fun_univl bf1 l) (bool_fun_univl bf2 l).
Proof.
  simple induction l.  intros.  simpl in |- *.  assumption.  simpl in |- *.  intros.
  apply bool_fun_forall_preserves_eq.  apply H; assumption.
Qed.

Lemma bool_fun_exl_preserves_eq :
 forall (l : list ad) (bf1 bf2 : bool_fun),
 bool_fun_eq bf1 bf2 -> bool_fun_eq (bool_fun_exl bf1 l) (bool_fun_exl bf2 l).
Proof.
  simple induction l.  intros.  simpl in |- *.  assumption.  simpl in |- *.  intros.
  apply bool_fun_ex_preserves_eq.  apply H; assumption.
Qed.

Lemma mu_all_eval_ok :
 forall t be : bool_expr,
 bool_fun_eq (bool_fun_of_bool_expr (mu_all_eval t be))
   (bool_fun_mu_all (bool_fun_of_bool_expr t) (bool_fun_of_bool_expr be)).
Proof.
  unfold mu_all_eval in |- *.  unfold bool_fun_mu_all in |- *.  intros.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_univl
                (bool_fun_of_bool_expr (Impl t (replacel be lx lx'))) lx').
  apply univl_OK.  apply bool_fun_univl_preserves_eq.  simpl in |- *.
  apply bool_fun_impl_preserves_eq.  apply bool_fun_eq_refl.  apply replacel_OK.
Qed.

Lemma mu_ex_eval_ok :
 forall t be : bool_expr,
 bool_fun_eq (bool_fun_of_bool_expr (mu_ex_eval t be))
   (bool_fun_mu_ex (bool_fun_of_bool_expr t) (bool_fun_of_bool_expr be)).
Proof.
  unfold mu_ex_eval in |- *.  unfold bool_fun_mu_ex in |- *.  intros.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_exl
                (bool_fun_of_bool_expr (ANd t (replacel be lx lx'))) lx').
  apply exl_OK.  apply bool_fun_exl_preserves_eq.  simpl in |- *.
  apply bool_fun_and_preserves_eq.  apply bool_fun_eq_refl.  apply replacel_OK.
Qed.

Lemma bool_fun_replacel_preserves_eq :
 forall (lz ly : list ad) (bf1 bf2 : bool_fun),
 bool_fun_eq bf1 bf2 ->
 bool_fun_eq (bool_fun_replacel bf1 lz ly) (bool_fun_replacel bf2 lz ly).
Proof.
  simple induction lz.  intros.  elim ly; intros; assumption.  intros.  elim ly.
  assumption.  intros.  simpl in |- *.  apply bool_fun_replace_preserves_eq.  apply H.
  assumption.
Qed.

Lemma bool_fun_mu_all_preserves_eq :
 forall bft1 bft2 bfg1 bfg2 : bool_fun,
 bool_fun_eq bft1 bft2 ->
 bool_fun_eq bfg1 bfg2 ->
 bool_fun_eq (bool_fun_mu_all bft1 bfg1) (bool_fun_mu_all bft2 bfg2).
Proof.
  unfold bool_fun_mu_all in |- *.  intros.  apply bool_fun_univl_preserves_eq.
  apply bool_fun_impl_preserves_eq.  assumption.
  apply bool_fun_replacel_preserves_eq.  assumption.
Qed.

Lemma bool_fun_mu_ex_preserves_eq :
 forall bft1 bft2 bfg1 bfg2 : bool_fun,
 bool_fun_eq bft1 bft2 ->
 bool_fun_eq bfg1 bfg2 ->
 bool_fun_eq (bool_fun_mu_ex bft1 bfg1) (bool_fun_mu_ex bft2 bfg2).
Proof.
  unfold bool_fun_mu_ex in |- *.  intros.  apply bool_fun_exl_preserves_eq.
  apply bool_fun_and_preserves_eq.  assumption.
  apply bool_fun_replacel_preserves_eq.  assumption.
Qed.

Lemma mu_all_eq :
 forall t be1 be2 : bool_expr,
 be_eq be1 be2 -> be_eq (mu_all_eval t be1) (mu_all_eval t be2).
Proof.
  intros.  apply be_eq_dec_eq.  apply be_eq_dec_correct.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_mu_all (bool_fun_of_bool_expr t)
                (bool_fun_of_bool_expr be1)).
  apply mu_all_eval_ok.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_mu_all (bool_fun_of_bool_expr t)
                (bool_fun_of_bool_expr be2)).
  apply bool_fun_mu_all_preserves_eq.  apply bool_fun_eq_refl.
  apply be_eq_dec_complete.  apply be_eq_eq_dec.  assumption.
  apply bool_fun_eq_sym.  apply mu_all_eval_ok.
Qed.

Lemma mu_ex_eq :
 forall t be1 be2 : bool_expr,
 be_eq be1 be2 -> be_eq (mu_ex_eval t be1) (mu_ex_eval t be2).
Proof.
  intros.  apply be_eq_dec_eq.  apply be_eq_dec_correct.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_mu_ex (bool_fun_of_bool_expr t)
                (bool_fun_of_bool_expr be1)).
  apply mu_ex_eval_ok.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_mu_ex (bool_fun_of_bool_expr t)
                (bool_fun_of_bool_expr be2)).
  apply bool_fun_mu_ex_preserves_eq.  apply bool_fun_eq_refl.
  apply be_eq_dec_complete.  apply be_eq_eq_dec.  assumption.
  apply bool_fun_eq_sym.  apply mu_ex_eval_ok.
Qed.

Lemma length_lx_1_eq_lx'_1 :
 forall n : nat, length (lx_1 n) = length (lx'_1 n).
Proof.
  simple induction n.  reflexivity.  intros.  simpl in |- *.  rewrite H.  reflexivity.  
Qed.

Lemma length_lx_eq_lx' : length lx = length lx'.
Proof.
  unfold lx, lx' in |- *.  apply length_lx_1_eq_lx'_1.  
Qed.

Lemma ap'_eq_ap : forall n : nat, ap' n = ap (N + n).
Proof.
  reflexivity.  
Qed.

Lemma in_lx'_1 : forall n m : nat, m < n -> In (ap' m) (lx'_1 n).
Proof.
  simple induction n.  intros.  elim (lt_n_O _ H).  intros.  unfold lt in H0.
  elim (le_le_S_eq m n0).  intros.  right.  apply H.  assumption.  left.
  rewrite H1.  reflexivity.  apply le_S_n.  assumption.  
Qed.

Lemma in_lx' : forall n : nat, N <= n -> S n <= 2 * N -> In (N_of_nat n) lx'.
Proof.
  intros.  replace (N_of_nat n) with (ap' (n - N)).  unfold lx' in |- *.
  apply in_lx'_1.  simpl in H0.  rewrite <- (plus_n_O N) in H0.
  apply plus_lt_reg_l with (p := N).  rewrite <- (le_plus_minus N n H).
  assumption.  unfold ap' in |- *.  rewrite <- (le_plus_minus N n H).  reflexivity.  
Qed.

Lemma in_lx'_1_conv :
 forall n m : nat, In (N_of_nat m) (lx'_1 n) -> N <= m /\ m < N + n.
Proof.
  simple induction n.  simpl in |- *.  intros.  elim H.  simpl in |- *.  intros.  elim H0.  unfold ap' in |- *.
  intros.  replace m with (N + n0).  split.  apply le_plus_l.
  apply plus_lt_compat_l.  unfold lt in |- *.  apply le_n.  rewrite <- (nat_of_N_of_nat m).
  rewrite <- H1.  symmetry  in |- *.  apply nat_of_N_of_nat.  intro.  elim (H _ H1).
  intros.  split.  assumption.  apply lt_trans with (m := N + n0).  assumption.
  apply plus_lt_compat_l.  unfold lt in |- *.  apply le_n.
Qed.

Lemma mu_all_x_free :
 forall (t be : bool_expr) (x : BDDvar),
 be_x_free x (mu_all_eval t be) = true ->
 ~ In x lx' /\ (be_x_free x t = true \/ be_x_free x be = true /\ ~ In x lx).
Proof.
  intros.  unfold mu_all_eval in H.  elim (univl_x_free _ _ _ H).  intros.
  split.  assumption.  elim (impl_x_free _ _ _ H0).  intro.  left.  assumption.
  intro.  right.  elim (replacel_x_free _ _ _ _ length_lx_eq_lx' H2).  trivial.
  intro.  elim (H1 H3).  
Qed.
 
Lemma mu_ex_x_free :
 forall (t be : bool_expr) (x : BDDvar),
 be_x_free x (mu_ex_eval t be) = true ->
 ~ In x lx' /\ (be_x_free x t = true \/ be_x_free x be = true /\ ~ In x lx).
Proof.
  intros.  unfold mu_ex_eval in H.  elim (exl_x_free _ _ _ H).  intros.
  split.  assumption.  elim (and_x_free _ _ _ H0).  intro.  left.  assumption.
  intro.  right.  elim (replacel_x_free _ _ _ _ length_lx_eq_lx' H2).  trivial.
  intro.  elim (H1 H3).
Qed.

Definition be_le2 (be1 be2 : bool_expr) :=
  forall ve : var_env,
  bool_fun_of_bool_expr be1 ve = true -> bool_fun_of_bool_expr be2 ve = true.

Lemma subst_le2 :
 forall (x : BDDvar) (bex be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (subst x bex be1) (subst x bex be2).
Proof.
  intros.  unfold be_le2 in |- *.  intro.  intro.
  replace (bool_fun_of_bool_expr (subst x bex be2) ve) with
   (bool_fun_subst x (bool_fun_of_bool_expr bex) (bool_fun_of_bool_expr be2)
      ve).
  unfold bool_fun_subst in |- *.  apply H.  rewrite <- H0.  symmetry  in |- *.
  replace
   (bool_fun_of_bool_expr be1 (augment ve x (bool_fun_of_bool_expr bex ve)))
   with
   (bool_fun_subst x (bool_fun_of_bool_expr bex) (bool_fun_of_bool_expr be1)
      ve).
  apply (subst_ok be1 bex x).  unfold bool_fun_subst in |- *.  reflexivity.  symmetry  in |- *.
  apply (subst_ok be2 bex x).
Qed.

Lemma replace_le2 :
 forall (x y : BDDvar) (be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (replace x y be1) (replace x y be2).
Proof.
  unfold replace in |- *.  intros.  apply subst_le2.  assumption.
Qed.

Lemma replacel_le2 :
 forall (lz ly : list ad) (be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (replacel be1 lz ly) (replacel be2 lz ly).
Proof.
  simple induction lz.  intros.  elim ly.  assumption.  simpl in |- *.  intros.  assumption.
  intros.  elim ly.  assumption.  simpl in |- *.  intros.  apply replace_le2.  apply H.
  assumption.
Qed.

Lemma impl_le2 :
 forall be be1 be2 : bool_expr,
 be_le2 be1 be2 -> be_le2 (Impl be be1) (Impl be be2).
Proof.
  unfold be_le2 in |- *.  simpl in |- *.  unfold bool_fun_impl in |- *.  intros be be1 be2 H ve.
  elim (bool_fun_of_bool_expr be ve).  simpl in |- *.  intro.  apply H.  assumption.
  simpl in |- *.  reflexivity.
Qed.

Lemma and_le2 :
 forall be1 be2 be1' be2' : bool_expr,
 be_le2 be1 be2 -> be_le2 be1' be2' -> be_le2 (ANd be1 be1') (ANd be2 be2').
Proof.
  unfold be_le2 in |- *.  simpl in |- *.  unfold bool_fun_and in |- *.  intros.
  elim (andb_prop _ _ H1).  intros.  rewrite (H ve H2).  rewrite (H0 ve H3).
  reflexivity.
Qed.

Lemma or_le2 :
 forall be1 be2 be1' be2' : bool_expr,
 be_le2 be1 be2 -> be_le2 be1' be2' -> be_le2 (Or be1 be1') (Or be2 be2').
Proof.
  unfold be_le2 in |- *.  simpl in |- *.  unfold bool_fun_or in |- *.  intros.
  elim (orb_prop _ _ H1).  intros.  rewrite (H ve H2).  reflexivity.
  intros.  rewrite (H0 ve H2).  auto with bool.
Qed.

Lemma univ_le2 :
 forall (x : BDDvar) (be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (forall_ x be1) (forall_ x be2).
Proof.
  intros.  unfold forall_ in |- *.  apply and_le2.  unfold restrict in |- *.  apply subst_le2.
  assumption.  unfold restrict in |- *.  apply subst_le2.  assumption.
Qed.

Lemma ex_le2 :
 forall (x : BDDvar) (be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (be_ex x be1) (be_ex x be2).
Proof.
  intros.  unfold be_ex in |- *.  apply or_le2.  unfold restrict in |- *.  apply subst_le2.
  assumption.  unfold restrict in |- *.  apply subst_le2.  assumption.
Qed.

Lemma univl_le2 :
 forall (lz : list ad) (be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (univl be1 lz) (univl be2 lz).
Proof.
  simple induction lz.  intros.  assumption.  simpl in |- *.  intros.  apply univ_le2.
  apply H.  assumption.
Qed.
 
Lemma exl_le2 :
 forall (lz : list ad) (be1 be2 : bool_expr),
 be_le2 be1 be2 -> be_le2 (exl be1 lz) (exl be2 lz).
Proof.
  simple induction lz.  intros.  assumption.  simpl in |- *.  intros.  apply ex_le2.
  apply H.  assumption.
Qed.

Lemma mu_all_le2 :
 forall t be1 be2 : bool_expr,
 be_le2 be1 be2 -> be_le2 (mu_all_eval t be1) (mu_all_eval t be2).
Proof.
  intros.  unfold mu_all_eval in |- *.  apply univl_le2.  apply impl_le2.
  apply replacel_le2.  assumption.
Qed.
 
Lemma mu_ex_le2 :
 forall t be1 be2 : bool_expr,
 be_le2 be1 be2 -> be_le2 (mu_ex_eval t be1) (mu_ex_eval t be2).
Proof.
  intros.  unfold mu_ex_eval in |- *.  apply exl_le2.  apply and_le2.
  unfold be_le2 in |- *.  auto.  apply replacel_le2.  assumption.
Qed.

Lemma be_le_le2 : forall be1 be2 : bool_expr, be_le be1 be2 -> be_le2 be1 be2.
Proof.
  unfold be_le, be_le2 in |- *.  intros.  unfold eval_be' in H.
  replace (bool_fun_of_bool_expr be2 ve) with
   (bool_fun_of_bool_expr be2 (var_env'_to_env (var_env_to_env' ve))).
  apply H.
  replace (bool_fun_of_bool_expr be1 (var_env'_to_env (var_env_to_env' ve)))
   with (bool_fun_of_bool_expr be1 ve).
  assumption.  apply (bool_fun_of_be_ext be1).
  unfold var_env'_to_env, var_env_to_env' in |- *.  intro.  rewrite (N_of_nat_of_N x).
  reflexivity.  apply (bool_fun_of_be_ext be2).  intro.
  unfold var_env'_to_env, var_env_to_env' in |- *.  rewrite (N_of_nat_of_N x).
  reflexivity.
Qed.

Lemma be_le2_le : forall be1 be2 : bool_expr, be_le2 be1 be2 -> be_le be1 be2.
Proof.
  unfold be_le, be_le2 in |- *.  unfold eval_be' in |- *.  intros.  apply H.  assumption.
Qed.

Lemma mu_all_le :
 forall t be1 be2 : bool_expr,
 be_le be1 be2 -> be_le (mu_all_eval t be1) (mu_all_eval t be2).
Proof.
  intros.  apply be_le2_le.  apply mu_all_le2.  apply be_le_le2.  assumption.
Qed.

Lemma mu_ex_le :
 forall t be1 be2 : bool_expr,
 be_le be1 be2 -> be_le (mu_ex_eval t be1) (mu_ex_eval t be2).
Proof.
  intros.  apply be_le2_le.  apply mu_ex_le2.  apply be_le_le2.  assumption.
Qed.

Lemma BDDmu_all_lemma :
 forall gc : BDDconfig -> list ad -> BDDconfig,
 gc_OK gc ->
 forall (cfg : BDDconfig) (ul : list ad) (nodet nodeg : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul nodet ->
 used_node' cfg ul nodeg ->
 BDDconfig_OK (fst (BDDmu_all gc cfg ul nodet nodeg)) /\
 config_node_OK (fst (BDDmu_all gc cfg ul nodet nodeg))
   (snd (BDDmu_all gc cfg ul nodet nodeg)) /\
 used_nodes_preserved cfg (fst (BDDmu_all gc cfg ul nodet nodeg)) ul /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDmu_all gc cfg ul nodet nodeg))
      (snd (BDDmu_all gc cfg ul nodet nodeg)))
   (bool_fun_mu_all (bool_fun_of_BDD cfg nodet) (bool_fun_of_BDD cfg nodeg)).
Proof.
  intros.  unfold BDDmu_all in |- *.
  elim (prod_sum _ _ (BDDreplacel gc cfg ul nodeg lx lx')).
  intros cfgr H4; elim H4; clear H4; intros noder H4.  rewrite H4.
  elim (prod_sum _ _ (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  intros cfgi H5; elim H5; clear H5; intros nodei H5.  rewrite H5.
  cut (BDDconfig_OK cfgr).  cut (config_node_OK cfgr noder).
  cut
   (bool_fun_eq (bool_fun_of_BDD cfgr noder)
      (bool_fun_replacel (bool_fun_of_BDD cfg nodeg) lx lx')).
  cut (used_nodes_preserved cfg cfgr ul).  intros.
  cut (used_list_OK cfgr (noder :: ul)).  intro.
  cut (used_node' cfgr (noder :: ul) noder).
  cut (used_node' cfgr (noder :: ul) nodet).  intros.
  cut (BDDconfig_OK cfgi).  cut (config_node_OK cfgi nodei).
  cut (used_nodes_preserved cfgr cfgi (noder :: ul)).
  cut
   (bool_fun_eq (bool_fun_of_BDD cfgi nodei)
      (bool_fun_impl (bool_fun_of_BDD cfgr nodet)
         (bool_fun_of_BDD cfgr noder))).
  intros.  cut (used_list_OK cfgi (nodei :: ul)).  intros.  split.
  apply BDDunivl_config_OK.  assumption.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  split.  apply BDDunivl_node_OK.  assumption.  
  assumption.  assumption.  apply used_node'_cons_node_ul.  split.
  apply used_nodes_preserved_trans with (cfg2 := cfgr).  assumption.  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfgi).  assumption.
  apply used_nodes_preserved_cons with (node := noder).  assumption.
  apply used_nodes_preserved_cons with (node := nodei).
  apply BDDunivl_used_nodes_preserved.  assumption.  assumption.  assumption.
  apply used_node'_cons_node_ul.  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_univl (bool_fun_of_BDD cfgi nodei) lx').
  apply BDDunivl_is_univl.  assumption.  assumption.  assumption.
  apply used_node'_cons_node_ul.  unfold bool_fun_mu_all in |- *.
  apply bool_fun_univl_preserves_eq.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_impl (bool_fun_of_BDD cfgr nodet)
                (bool_fun_of_BDD cfgr noder)).
  assumption.  apply bool_fun_impl_preserves_eq.
  apply used_nodes_preserved'_bool_fun with (ul := ul).  assumption.  assumption.  
  assumption.  assumption.  assumption.  assumption.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfgr).
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.  
  apply used_nodes_preserved_cons with (node := noder).  assumption.  
  replace cfgi with (fst (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  replace nodei with (snd (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  apply BDDimpl_is_impl; assumption.  rewrite H5; reflexivity.
  rewrite H5; reflexivity.  
  replace cfgi with (fst (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  apply BDDimpl_used_nodes_preserved; assumption.  rewrite H5; reflexivity.
  replace cfgi with (fst (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  replace nodei with (snd (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  apply BDDimpl_node_OK; assumption.  rewrite H5; reflexivity.
  rewrite H5; reflexivity.
  replace cfgi with (fst (BDDimpl gc cfgr (noder :: ul) nodet noder)).
  apply BDDimpl_config_OK; assumption.  rewrite H5; reflexivity.  
  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.  assumption.
  assumption.  apply used_node'_cons_node_ul.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  assumption.  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_used_nodes_preserved.  assumption.  intros.  assumption.  
  assumption.  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.  
  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  replace noder with (snd (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_is_replacel.  assumption.  intros.  assumption.  assumption.
  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.
  rewrite H4; reflexivity.  
  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  replace noder with (snd (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_node_OK.  assumption.  intros.  assumption.  assumption.  
  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.
  rewrite H4; reflexivity.
  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_config_OK.  assumption.  intros.  assumption.  assumption.  
  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.  
Qed.

Section BDDmu_all_results.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable nodet nodeg : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis usedt : used_node' cfg ul nodet.
Hypothesis usedg : used_node' cfg ul nodeg.

Lemma BDDmu_all_config_OK :
 BDDconfig_OK (fst (BDDmu_all gc cfg ul nodet nodeg)).
Proof.
  exact
   (proj1
      (BDDmu_all_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK usedt
         usedg)).
Qed.

Lemma BDDmu_all_node_OK :
 config_node_OK (fst (BDDmu_all gc cfg ul nodet nodeg))
   (snd (BDDmu_all gc cfg ul nodet nodeg)).
Proof.
  exact
   (proj1
      (proj2
         (BDDmu_all_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK usedt
            usedg))).
Qed.

Lemma BDDmu_all_used_nodes_preserved :
 used_nodes_preserved cfg (fst (BDDmu_all gc cfg ul nodet nodeg)) ul.
Proof.
  exact
   (proj1
      (proj2
         (proj2
            (BDDmu_all_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK
               usedt usedg)))).
Qed.

Lemma BDDmu_all_list_OK :
 used_list_OK (fst (BDDmu_all gc cfg ul nodet nodeg)) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDmu_all_used_nodes_preserved.
Qed.
Lemma BDDmu_all_list_OK_cons :
 used_list_OK (fst (BDDmu_all gc cfg ul nodet nodeg))
   (snd (BDDmu_all gc cfg ul nodet nodeg) :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDmu_all_node_OK.  exact BDDmu_all_list_OK.
Qed.

Lemma BDDmu_all_is_mu_all :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDmu_all gc cfg ul nodet nodeg))
      (snd (BDDmu_all gc cfg ul nodet nodeg)))
   (bool_fun_mu_all (bool_fun_of_BDD cfg nodet) (bool_fun_of_BDD cfg nodeg)).
Proof.
  exact
   (proj2
      (proj2
         (proj2
            (BDDmu_all_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK
               usedt usedg)))).
Qed.

End BDDmu_all_results.

Lemma BDDmu_ex_lemma :
 forall gc : BDDconfig -> list ad -> BDDconfig,
 gc_OK gc ->
 forall (cfg : BDDconfig) (ul : list ad) (nodet nodeg : ad),
 BDDconfig_OK cfg ->
 used_list_OK cfg ul ->
 used_node' cfg ul nodet ->
 used_node' cfg ul nodeg ->
 BDDconfig_OK (fst (BDDmu_ex gc cfg ul nodet nodeg)) /\
 config_node_OK (fst (BDDmu_ex gc cfg ul nodet nodeg))
   (snd (BDDmu_ex gc cfg ul nodet nodeg)) /\
 used_nodes_preserved cfg (fst (BDDmu_ex gc cfg ul nodet nodeg)) ul /\
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDmu_ex gc cfg ul nodet nodeg))
      (snd (BDDmu_ex gc cfg ul nodet nodeg)))
   (bool_fun_mu_ex (bool_fun_of_BDD cfg nodet) (bool_fun_of_BDD cfg nodeg)).
Proof.
  intros.  unfold BDDmu_ex in |- *.
  elim (prod_sum _ _ (BDDreplacel gc cfg ul nodeg lx lx')).
  intros cfgr H4; elim H4; clear H4; intros noder H4.  rewrite H4.
  elim (prod_sum _ _ (BDDand gc cfgr (noder :: ul) nodet noder)).
  intros cfgi H5; elim H5; clear H5; intros nodei H5.  rewrite H5.
  cut (BDDconfig_OK cfgr).  cut (config_node_OK cfgr noder).
  cut
   (bool_fun_eq (bool_fun_of_BDD cfgr noder)
      (bool_fun_replacel (bool_fun_of_BDD cfg nodeg) lx lx')).
  cut (used_nodes_preserved cfg cfgr ul).  intros.
  cut (used_list_OK cfgr (noder :: ul)).  intro.
  cut (used_node' cfgr (noder :: ul) noder).
  cut (used_node' cfgr (noder :: ul) nodet).  intros.
  cut (BDDconfig_OK cfgi).  cut (config_node_OK cfgi nodei).
  cut (used_nodes_preserved cfgr cfgi (noder :: ul)).
  cut
   (bool_fun_eq (bool_fun_of_BDD cfgi nodei)
      (bool_fun_and (bool_fun_of_BDD cfgr nodet) (bool_fun_of_BDD cfgr noder))).
  intros.  cut (used_list_OK cfgi (nodei :: ul)).  intros.  split.
  apply BDDexl_config_OK.  assumption.  assumption.  assumption.  
  apply used_node'_cons_node_ul.  split.  apply BDDexl_node_OK.  assumption.  
  assumption.  assumption.  apply used_node'_cons_node_ul.  split.
  apply used_nodes_preserved_trans with (cfg2 := cfgr).  assumption.  assumption.  
  apply used_nodes_preserved_trans with (cfg2 := cfgi).  assumption.
  apply used_nodes_preserved_cons with (node := noder).  assumption.
  apply used_nodes_preserved_cons with (node := nodei).
  apply BDDexl_used_nodes_preserved.  assumption.  assumption.  assumption.
  apply used_node'_cons_node_ul.  apply
   bool_fun_eq_trans
    with (bf2 := bool_fun_exl (bool_fun_of_BDD cfgi nodei) lx').
  apply BDDexl_is_exl.  assumption.  assumption.  assumption.
  apply used_node'_cons_node_ul.  unfold bool_fun_mu_ex in |- *.
  apply bool_fun_exl_preserves_eq.
  apply
   bool_fun_eq_trans
    with
      (bf2 := bool_fun_and (bool_fun_of_BDD cfgr nodet)
                (bool_fun_of_BDD cfgr noder)).
  assumption.  apply bool_fun_and_preserves_eq.
  apply used_nodes_preserved'_bool_fun with (ul := ul).  assumption.  assumption.  
  assumption.  assumption.  assumption.  assumption.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfgr).
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.  assumption.  
  apply used_nodes_preserved_cons with (node := noder).  assumption.  
  replace cfgi with (fst (BDDand gc cfgr (noder :: ul) nodet noder)).
  replace nodei with (snd (BDDand gc cfgr (noder :: ul) nodet noder)).
  apply BDDand_is_and; assumption.  rewrite H5; reflexivity.
  rewrite H5; reflexivity.  
  replace cfgi with (fst (BDDand gc cfgr (noder :: ul) nodet noder)).
  apply BDDand_used_nodes_preserved; assumption.  rewrite H5; reflexivity.
  replace cfgi with (fst (BDDand gc cfgr (noder :: ul) nodet noder)).
  replace nodei with (snd (BDDand gc cfgr (noder :: ul) nodet noder)).
  apply BDDand_node_OK; assumption.  rewrite H5; reflexivity.
  rewrite H5; reflexivity.
  replace cfgi with (fst (BDDand gc cfgr (noder :: ul) nodet noder)).
  apply BDDand_config_OK; assumption.  rewrite H5; reflexivity.  
  apply used_node'_cons_node'_ul.
  apply used_nodes_preserved_used_node' with (cfg := cfg).  assumption.  assumption.
  assumption.  apply used_node'_cons_node_ul.  apply node_OK_list_OK.
  assumption.  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  assumption.  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_used_nodes_preserved.  assumption.  intros.  assumption.  
  assumption.  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.  
  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  replace noder with (snd (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_is_replacel.  assumption.  intros.  assumption.  assumption.
  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.
  rewrite H4; reflexivity.  
  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  replace noder with (snd (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_node_OK.  assumption.  intros.  assumption.  assumption.  
  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.
  rewrite H4; reflexivity.
  replace cfgr with (fst (BDDreplacel gc cfg ul nodeg lx lx')).
  apply BDDreplacel_config_OK.  assumption.  intros.  assumption.  assumption.  
  assumption.  apply lx_neq_lx'.  rewrite H4; reflexivity.  
Qed.

Section BDDmu_ex_results.

Variable gc : BDDconfig -> list ad -> BDDconfig.
Hypothesis gc_is_OK : gc_OK gc.

Variable cfg : BDDconfig.
Variable ul : list ad.
Variable nodet nodeg : ad.

Hypothesis cfg_OK : BDDconfig_OK cfg.
Hypothesis ul_OK : used_list_OK cfg ul.
Hypothesis usedt : used_node' cfg ul nodet.
Hypothesis usedg : used_node' cfg ul nodeg.

Lemma BDDmu_ex_config_OK :
 BDDconfig_OK (fst (BDDmu_ex gc cfg ul nodet nodeg)).
Proof.
  exact
   (proj1
      (BDDmu_ex_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK usedt usedg)).
Qed.

Lemma BDDmu_ex_node_OK :
 config_node_OK (fst (BDDmu_ex gc cfg ul nodet nodeg))
   (snd (BDDmu_ex gc cfg ul nodet nodeg)).
Proof.
  exact
   (proj1
      (proj2
         (BDDmu_ex_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK usedt
            usedg))).
Qed.

Lemma BDDmu_ex_used_nodes_preserved :
 used_nodes_preserved cfg (fst (BDDmu_ex gc cfg ul nodet nodeg)) ul.
Proof.
  exact
   (proj1
      (proj2
         (proj2
            (BDDmu_ex_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK usedt
               usedg)))).
Qed.

Lemma BDDmu_ex_list_OK :
 used_list_OK (fst (BDDmu_ex gc cfg ul nodet nodeg)) ul.
Proof.
  apply used_nodes_preserved_list_OK with (cfg := cfg).  assumption.
  exact BDDmu_ex_used_nodes_preserved.
Qed.
Lemma BDDmu_ex_list_OK_cons :
 used_list_OK (fst (BDDmu_ex gc cfg ul nodet nodeg))
   (snd (BDDmu_ex gc cfg ul nodet nodeg) :: ul).
Proof.
  apply node_OK_list_OK.  exact BDDmu_ex_node_OK.  exact BDDmu_ex_list_OK.
Qed.

Lemma BDDmu_ex_is_mu_ex :
 bool_fun_eq
   (bool_fun_of_BDD (fst (BDDmu_ex gc cfg ul nodet nodeg))
      (snd (BDDmu_ex gc cfg ul nodet nodeg)))
   (bool_fun_mu_ex (bool_fun_of_BDD cfg nodet) (bool_fun_of_BDD cfg nodeg)).
Proof.
  exact
   (proj2
      (proj2
         (proj2
            (BDDmu_ex_lemma gc gc_is_OK cfg ul nodet nodeg cfg_OK ul_OK usedt
               usedg)))).
Qed.

End BDDmu_ex_results.
End Nsec.

Section Be_ok.

Variable vf : ad -> bool.

Inductive be_ok : bool_expr -> Prop :=
  | zero_ok : be_ok Zero
  | one_ok : be_ok One
  | var_ok : forall x : BDDvar, vf x = true -> be_ok (Var x)
  | neg_ok : forall be : bool_expr, be_ok be -> be_ok (Neg be)
  | or_ok :
      forall be1 be2 : bool_expr,
      be_ok be1 -> be_ok be2 -> be_ok (Or be1 be2)
  | and_ok :
      forall be1 be2 : bool_expr,
      be_ok be1 -> be_ok be2 -> be_ok (ANd be1 be2)
  | impl_ok :
      forall be1 be2 : bool_expr,
      be_ok be1 -> be_ok be2 -> be_ok (Impl be1 be2)
  | iff_ok :
      forall be1 be2 : bool_expr,
      be_ok be1 -> be_ok be2 -> be_ok (Iff be1 be2).

Lemma var_ok_inv : forall x : BDDvar, be_ok (Var x) -> vf x = true.
Proof.
  intros.  inversion H.  assumption.
Qed.

Lemma neg_ok_inv : forall be : bool_expr, be_ok (Neg be) -> be_ok be.
Proof.
  intros.  inversion H.  assumption.
Qed.

Lemma or_ok_inv :
 forall be1 be2 : bool_expr, be_ok (Or be1 be2) -> be_ok be1 /\ be_ok be2.
Proof.
  intros.  inversion H.  auto.
Qed.

Lemma and_ok_inv :
 forall be1 be2 : bool_expr, be_ok (ANd be1 be2) -> be_ok be1 /\ be_ok be2.
Proof.
  intros.  inversion H.  auto.
Qed.
Lemma impl_ok_inv :
 forall be1 be2 : bool_expr, be_ok (Impl be1 be2) -> be_ok be1 /\ be_ok be2.
Proof.
  intros.  inversion H.  auto.
Qed.

Lemma iff_ok_inv :
 forall be1 be2 : bool_expr, be_ok (Iff be1 be2) -> be_ok be1 /\ be_ok be2.
Proof.
  intros.  inversion H.  auto.
Qed.

Lemma be_x_free_be_ok :
 forall be : bool_expr,
 (forall x : BDDvar, be_x_free x be = true -> vf x = true) -> be_ok be.
Proof.
  simple induction be.  intros.  apply zero_ok.  intros.  apply one_ok.  simpl in |- *.
  intros.  apply var_ok.  apply H.  apply Neqb_correct.  simpl in |- *.  intros.
  apply neg_ok.  apply H.  assumption.  simpl in |- *.  intros.  apply or_ok.  apply H.
  intros.  apply H1.  rewrite H2.  reflexivity.  apply H0.  intros.  apply H1.
  rewrite H2.  elim (be_x_free x b); reflexivity.  simpl in |- *.  intros.
  apply and_ok.  apply H.  intros.  apply H1.  rewrite H2.  reflexivity.
  apply H0.  intros.  apply H1.  rewrite H2.  elim (be_x_free x b); reflexivity.
  simpl in |- *.  intros.  apply impl_ok.  apply H.  intros.  apply H1.  rewrite H2.
  reflexivity.  apply H0.  intros.  apply H1.  rewrite H2.
  elim (be_x_free x b); reflexivity.  simpl in |- *.  intros.  apply iff_ok.  apply H.
  intros.  apply H1.  rewrite H2.  reflexivity.  apply H0.  intros.  apply H1.
  rewrite H2.  elim (be_x_free x b); reflexivity.
Qed.

Lemma be_ok_be_x_free :
 forall be : bool_expr,
 be_ok be -> forall x : BDDvar, be_x_free x be = true -> vf x = true.
Proof.
  simple induction be.  simpl in |- *.  intros.  discriminate.  simpl in |- *.  intros.  discriminate.
  simpl in |- *.  intros.  rewrite (Neqb_complete _ _ H0).  inversion H.  assumption.
  simpl in |- *.  intros.  inversion H0.  apply H.  assumption.  assumption.  simpl in |- *.
  intros.  inversion H1.  elim (orb_prop _ _ H2).  intro.  apply H.  assumption.
  assumption.  intro.  apply H0.  assumption.  assumption.  simpl in |- *.  intros.
  inversion H1.  elim (orb_prop _ _ H2).  intro.  apply H.  assumption.
  assumption.  intro.  apply H0.  assumption.  assumption.  simpl in |- *.  intros.
  inversion H1.  elim (orb_prop _ _ H2).  intro.  apply H.  assumption.
  assumption.  intro.  apply H0.  assumption.  assumption.  simpl in |- *.  intros.
  inversion H1.  elim (orb_prop _ _ H2).  intro.  apply H.  assumption.
  assumption.  intro.  apply H0.  assumption.  assumption.
Qed.

End Be_ok.
