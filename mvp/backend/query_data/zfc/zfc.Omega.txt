

Require Import Sets.
(* Sets:
Global Set Asymmetric Patterns.

Inductive Ens : Type :=
    sup : forall A : Type, (A -> Ens) -> Ens.

Inductive EXType (P : Type) (Q : P -> Prop) : Prop :=
    EXTypei : forall x : P, Q x -> EXType P Q.

Inductive prod_t (A B : Type) : Type :=
    pair_t : A -> B -> prod_t A B.

Inductive depprod (A : Type) (P : A -> Type) : Type :=
    dep_i : forall x : A, P x -> depprod A P.

Definition EQ : Ens -> Ens -> Prop.

Definition IN (E1 E2 : Ens) : Prop :=
  match E2 with
  | sup A f => EXType _ (fun y : A => EQ E1 (f y))
  end.

Definition INC : Ens -> Ens -> Prop.

Theorem EQ_refl : forall E : Ens, EQ E E.

Theorem EQ_tran : forall E1 E2 E3 : Ens, EQ E1 E2 -> EQ E2 E3 -> EQ E1 E3.

Theorem EQ_sym : forall E1 E2 : Ens, EQ E1 E2 -> EQ E2 E1.

Theorem EQ_INC : forall E E' : Ens, EQ E E' -> INC E E'.

Hint Resolve EQ_sym EQ_refl EQ_INC: zfc.

Theorem INC_EQ : forall E E' : Ens, INC E E' -> INC E' E -> EQ E E'.

Hint Resolve INC_EQ: zfc.

Theorem IN_sound_left :
 forall E E' E'' : Ens, EQ E E' -> IN E E'' -> IN E' E''.

Theorem IN_sound_right :
 forall E E' E'' : Ens, EQ E' E'' -> IN E E' -> IN E E''.

Theorem INC_refl : forall E : Ens, INC E E.

Theorem INC_tran : forall E E' E'' : Ens, INC E E' -> INC E' E'' -> INC E E''.

Theorem INC_sound_left :
 forall E E' E'' : Ens, EQ E E' -> INC E E'' -> INC E' E''.

Theorem INC_sound_right :
 forall E E' E'' : Ens, EQ E' E'' -> INC E E' -> INC E E''. *)

Require Import Axioms.
(* Axioms:
Require Import Sets.

Inductive Un : Set :=
    void : Un.

Inductive F : Set :=.

Definition Vide : Ens := sup F (fun f : F => match f return Ens with
                                             end).

Theorem Vide_est_vide : forall E : Ens, IN E Vide -> F.

Theorem tout_vide_est_Vide :
 forall E : Ens, (forall E' : Ens, IN E' E -> F) -> EQ E Vide.

Definition Paire : forall E E' : Ens, Ens.

Theorem Paire_sound_left :
 forall A A' B : Ens, EQ A A' -> EQ (Paire A B) (Paire A' B).

Theorem Paire_sound_right :
 forall A B B' : Ens, EQ B B' -> EQ (Paire A B) (Paire A B').

Hint Resolve Paire_sound_right Paire_sound_left: zfc.

Theorem IN_Paire_left : forall E E' : Ens, IN E (Paire E E').

Theorem IN_Paire_right : forall E E' : Ens, IN E' (Paire E E').

Theorem Paire_IN :
 forall E E' A : Ens, IN A (Paire E E') -> EQ A E \/ EQ A E'.

Hint Resolve IN_Paire_left IN_Paire_right Vide_est_vide: zfc.

Definition Sing (E : Ens) := Paire E E.

Theorem IN_Sing : forall E : Ens, IN E (Sing E).

Theorem IN_Sing_EQ : forall E E' : Ens, IN E (Sing E') -> EQ E E'.

Hint Resolve IN_Sing IN_Sing_EQ: zfc.

Theorem Sing_sound : forall A A' : Ens, EQ A A' -> EQ (Sing A) (Sing A').

Hint Resolve Sing_sound: zfc.

Theorem EQ_Sing_EQ : forall E1 E2 : Ens, EQ (Sing E1) (Sing E2) -> EQ E1 E2.

Hint Resolve EQ_Sing_EQ: zfc.

Inductive sig (A : Type) (P : A -> Prop) : Type :=
    exist : forall x : A, P x -> sig A P.

Definition Comp : Ens -> (Ens -> Prop) -> Ens.

Theorem Comp_INC : forall (E : Ens) (P : Ens -> Prop), INC (Comp E P) E.

Theorem IN_Comp_P :
 forall (E A : Ens) (P : Ens -> Prop),
 (forall w1 w2 : Ens, P w1 -> EQ w1 w2 -> P w2) -> IN A (Comp E P) -> P A.

Theorem IN_P_Comp :
 forall (E A : Ens) (P : Ens -> Prop),
 (forall w1 w2 : Ens, P w1 -> EQ w1 w2 -> P w2) ->
 IN A E -> P A -> IN A (Comp E P).

Definition pi1 : Ens -> Type.

Definition pi2 : forall E : Ens, pi1 E -> Ens.

Definition Union : forall E : Ens, Ens.

Theorem EQ_EXType :
 forall E E' : Ens,
 EQ E E' ->
 forall a : pi1 E,
 EXType (pi1 E') (fun b : pi1 E' => EQ (pi2 E a) (pi2 E' b)).

Theorem IN_EXType :
 forall E E' : Ens,
 IN E' E -> EXType (pi1 E) (fun a : pi1 E => EQ E' (pi2 E a)).

Theorem IN_Union :
 forall E E' E'' : Ens, IN E' E -> IN E'' E' -> IN E'' (Union E).

Theorem IN_INC_Union : forall E E' : Ens, IN E' E -> INC E' (Union E).

Theorem Union_IN :
 forall E E' : Ens,
 IN E' (Union E) -> EXType _ (fun E1 : Ens => IN E1 E /\ IN E' E1).

Theorem Union_sound : forall E E' : Ens, EQ E E' -> EQ (Union E) (Union E').

Theorem Union_mon : forall E E' : Ens, INC E E' -> INC (Union E) (Union E').

Definition Inter (E : Ens) : Ens :=
  match E with
  | sup A f =>
      sup _
        (fun
           c : depprod _
                 (fun a : A =>
                  depprod _
                    (fun b : pi1 (f a) =>
                     forall x : A, IN (pi2 (f a) b) (f x))) =>
         match c with
         | dep_i a (dep_i b p) => pi2 (f a) b
         end)
  end.

Theorem IN_Inter_all :
 forall E E' : Ens,
 IN E' (Inter E) -> forall E'' : Ens, IN E'' E -> IN E' E''.

Theorem all_IN_Inter :
 forall E E' E'' : Ens,
 IN E'' E -> (forall E'' : Ens, IN E'' E -> IN E' E'') -> IN E' (Inter E).

Definition Inter' (E : Ens) : Ens :=
  Comp (Union E) (fun e : Ens => forall a : Ens, IN a E -> IN e a).

Theorem IN_Inter'_all :
 forall E E' : Ens,
 IN E' (Inter' E) -> forall E'' : Ens, IN E'' E -> IN E' E''.

Theorem all_IN_Inter' :
 forall E E' E'' : Ens,
 IN E'' E -> (forall E'' : Ens, IN E'' E -> IN E' E'') -> IN E' (Inter' E).

Definition Power (E : Ens) : Ens :=
  match E with
  | sup A f =>
      sup _
        (fun P : A -> Prop =>
         sup _
           (fun c : depprod A (fun a : A => P a) =>
            match c with
            | dep_i a p => f a
            end))
  end.

Theorem IN_Power_INC : forall E E' : Ens, IN E' (Power E) -> INC E' E.

Theorem INC_IN_Power : forall E E' : Ens, INC E' E -> IN E' (Power E).

Theorem Power_mon : forall E E' : Ens, INC E E' -> INC (Power E) (Power E').

Theorem Power_sound : forall E E' : Ens, EQ E E' -> EQ (Power E) (Power E').

Theorem not_EQ_Sing_Vide : forall E : Ens, EQ (Sing E) Vide -> F.

Theorem not_EQ_Vide_Sing : forall E : Ens, EQ Vide (Sing E) -> F. *)



Definition Class_succ (E : Ens) := Union (Paire E (Sing E)).



Definition Nat : nat -> Ens.

simple induction 1; intros.

exact Vide.

exact (Class_succ X).

Defined.



Definition Omega : Ens := sup nat Nat.



Theorem IN_Class_succ : forall E : Ens, IN E (Class_succ E).

intros E; unfold Class_succ in |- *; unfold Sing in |- *;

 apply IN_Union with (Paire E E); auto with zfc.

Qed.



Theorem INC_Class_succ : forall E : Ens, INC E (Class_succ E).

unfold INC in |- *; unfold Class_succ in |- *.

intros.

apply IN_Union with E; auto with zfc.

Qed.



Hint Resolve IN_Class_succ INC_Class_succ: zfc.



Theorem IN_Class_succ_or :

 forall E E' : Ens, IN E' (Class_succ E) -> EQ E E' \/ IN E' E.

intros E E' i.

unfold Class_succ in i.

elim (Union_IN (Paire E (Sing E)) E' i).

intros E1; simple induction 1; intros i1 i2.

elim (Paire_IN E (Sing E) E1 i1).

intros; right; apply IN_sound_right with E1; auto with zfc.

intros; left; cut (IN E' (Sing E)).

auto with zfc.

apply IN_sound_right with E1; auto with zfc.



Qed.



Theorem E_not_IN_E : forall E : Ens, IN E E -> F.

simple induction E; intros A f r i.

cut False.

simple induction 1.

elim (IN_EXType (sup A f) (sup A f) i); intros a e.



simpl in a.

change (EQ (sup A f) (f a)) in e.

elim (r a).

apply IN_sound_right with (sup A f); auto with zfc.

exists a; auto with zfc.

Qed.



Theorem Nat_IN_Omega : forall n : nat, IN (Nat n) Omega.

intros; simpl in |- *; exists n; auto with zfc.

Qed.

Hint Resolve Nat_IN_Omega: zfc.



Theorem IN_Omega_EXType :

 forall E : Ens, IN E Omega -> EXType _ (fun n : nat => EQ (Nat n) E).

simpl in |- *; simple induction 1.

intros n e.

exists n; auto with zfc.

Qed.



Theorem IN_Nat_EXType :

 forall (n : nat) (E : Ens),

 IN E (Nat n) -> EXType _ (fun p : nat => EQ E (Nat p)).

simple induction n.

simpl in |- *.

simple induction 1.

simple induction x.



intros.

change (IN E (Class_succ (Nat n0))) in H0.

elim (IN_Class_succ_or (Nat n0) E H0).

intros; exists n0.

auto with zfc.



intros.

elim (H E); auto with zfc.

Qed.



Theorem Omega_EQ_Union : EQ Omega (Union Omega).

apply INC_EQ; unfold INC in |- *.

intros.

elim (IN_Omega_EXType E H); intros n e.

apply IN_Union with (Nat (S n)).

auto with zfc.



apply IN_sound_left with (Nat n).

auto with zfc.



auto with zfc.

change (IN (Nat n) (Class_succ (Nat n))) in |- *; auto with zfc.



intros.

elim (Union_IN Omega E H).

intros e h.

elim h.

intros i1 i2.

elim (IN_Omega_EXType e i1).

intros n e1.

cut (IN E (Nat n)).

intros.

elim (IN_Nat_EXType n E H0); intros.

apply IN_sound_left with (Nat x); auto with zfc.



apply IN_sound_right with e; auto with zfc.

Qed.



Fixpoint Vee (E : Ens) : Ens :=

  match E with

  | sup A f => Union (sup A (fun a : A => Power (Vee (f a))))

  end.



