

Require Import Decidable DecidableTypeEx MSetFacts Setoid.



Module WDecide_fun (E : DecidableType)(Import M : WSetsOn E).

 Module F :=  MSetFacts.WFactsOn E M.



  Module FSetLogicalFacts.

    Export Decidable.

    Export Setoid.



    Tactic Notation "fold" "any" "not" :=

      repeat (

        match goal with

        | H: context [?P -> False] |- _ =>

          fold (~ P) in H

        | |- context [?P -> False] =>

          fold (~ P)

        end).



    Ltac or_not_l_iff P Q tac :=

      (rewrite (or_not_l_iff_1 P Q) by tac) ||

      (rewrite (or_not_l_iff_2 P Q) by tac).



    Ltac or_not_r_iff P Q tac :=

      (rewrite (or_not_r_iff_1 P Q) by tac) ||

      (rewrite (or_not_r_iff_2 P Q) by tac).



    Ltac or_not_l_iff_in P Q H tac :=

      (rewrite (or_not_l_iff_1 P Q) in H by tac) ||

      (rewrite (or_not_l_iff_2 P Q) in H by tac).



    Ltac or_not_r_iff_in P Q H tac :=

      (rewrite (or_not_r_iff_1 P Q) in H by tac) ||

      (rewrite (or_not_r_iff_2 P Q) in H by tac).



    Tactic Notation "push" "not" "using" ident(db) :=

      let dec := solve_decidable using db in

      unfold not, iff;

      repeat (

        match goal with

        | |- context [True -> False] => rewrite not_true_iff

        | |- context [False -> False] => rewrite not_false_iff

        | |- context [(?P -> False) -> False] => rewrite (not_not_iff P) by dec

        | |- context [(?P -> False) -> (?Q -> False)] =>

            rewrite (contrapositive P Q) by dec

        | |- context [(?P -> False) \/ ?Q] => or_not_l_iff P Q dec

        | |- context [?P \/ (?Q -> False)] => or_not_r_iff P Q dec

        | |- context [(?P -> False) -> ?Q] => rewrite (imp_not_l P Q) by dec

        | |- context [?P \/ ?Q -> False] => rewrite (not_or_iff P Q)

        | |- context [?P /\ ?Q -> False] => rewrite (not_and_iff P Q)

        | |- context [(?P -> ?Q) -> False] => rewrite (not_imp_iff P Q) by dec

        end);

      fold any not.



    Tactic Notation "push" "not" :=

      push not using core.



    Tactic Notation

      "push" "not" "in" "*" "|-" "using" ident(db) :=

      let dec := solve_decidable using db in

      unfold not, iff in * |-;

      repeat (

        match goal with

        | H: context [True -> False] |- _ => rewrite not_true_iff in H

        | H: context [False -> False] |- _ => rewrite not_false_iff in H

        | H: context [(?P -> False) -> False] |- _ =>

          rewrite (not_not_iff P) in H by dec

        | H: context [(?P -> False) -> (?Q -> False)] |- _ =>

          rewrite (contrapositive P Q) in H by dec

        | H: context [(?P -> False) \/ ?Q] |- _ => or_not_l_iff_in P Q H dec

        | H: context [?P \/ (?Q -> False)] |- _ => or_not_r_iff_in P Q H dec

        | H: context [(?P -> False) -> ?Q] |- _ =>

          rewrite (imp_not_l P Q) in H by dec

        | H: context [?P \/ ?Q -> False] |- _ => rewrite (not_or_iff P Q) in H

        | H: context [?P /\ ?Q -> False] |- _ => rewrite (not_and_iff P Q) in H

        | H: context [(?P -> ?Q) -> False] |- _ =>

          rewrite (not_imp_iff P Q) in H by dec

        end);

      fold any not.



    Tactic Notation "push" "not" "in" "*" "|-"  :=

      push not in * |- using core.



    Tactic Notation "push" "not" "in" "*" "using" ident(db) :=

      push not using db; push not in * |- using db.

    Tactic Notation "push" "not" "in" "*" :=

      push not in * using core.



    Lemma test_push : forall P Q R : Prop,

      decidable P ->

      decidable Q ->

      (~ True) ->

      (~ False) ->

      (~ ~ P) ->

      (~ (P /\ Q) -> ~ R) ->

      ((P /\ Q) \/ ~ R) ->

      (~ (P /\ Q) \/ R) ->

      (R \/ ~ (P /\ Q)) ->

      (~ R \/ (P /\ Q)) ->

      (~ P -> R) ->

      (~ ((R -> P) \/ (Q -> R))) ->

      (~ (P /\ R)) ->

      (~ (P -> R)) ->

      True.

    Proof.

      intros. push not in *.

       

      tauto.

    Qed.



    Tactic Notation "pull" "not" "using" ident(db) :=

      let dec := solve_decidable using db in

      unfold not, iff;

      repeat (

        match goal with

        | |- context [True -> False] => rewrite not_true_iff

        | |- context [False -> False] => rewrite not_false_iff

        | |- context [(?P -> False) -> False] => rewrite (not_not_iff P) by dec

        | |- context [(?P -> False) -> (?Q -> False)] =>

          rewrite (contrapositive P Q) by dec

        | |- context [(?P -> False) \/ ?Q] => or_not_l_iff P Q dec

        | |- context [?P \/ (?Q -> False)] => or_not_r_iff P Q dec

        | |- context [(?P -> False) -> ?Q] => rewrite (imp_not_l P Q) by dec

        | |- context [(?P -> False) /\ (?Q -> False)] =>

          rewrite <- (not_or_iff P Q)

        | |- context [?P -> ?Q -> False] => rewrite <- (not_and_iff P Q)

        | |- context [?P /\ (?Q -> False)] => rewrite <- (not_imp_iff P Q) by dec

        | |- context [(?Q -> False) /\ ?P] =>

          rewrite <- (not_imp_rev_iff P Q) by dec

        end);

      fold any not.



    Tactic Notation "pull" "not" :=

      pull not using core.



    Tactic Notation

      "pull" "not" "in" "*" "|-" "using" ident(db) :=

      let dec := solve_decidable using db in

      unfold not, iff in * |-;

      repeat (

        match goal with

        | H: context [True -> False] |- _ => rewrite not_true_iff in H

        | H: context [False -> False] |- _ => rewrite not_false_iff in H

        | H: context [(?P -> False) -> False] |- _ =>

          rewrite (not_not_iff P) in H by dec

        | H: context [(?P -> False) -> (?Q -> False)] |- _ =>

          rewrite (contrapositive P Q) in H by dec

        | H: context [(?P -> False) \/ ?Q] |- _ => or_not_l_iff_in P Q H dec

        | H: context [?P \/ (?Q -> False)] |- _ => or_not_r_iff_in P Q H dec

        | H: context [(?P -> False) -> ?Q] |- _ =>

          rewrite (imp_not_l P Q) in H by dec

        | H: context [(?P -> False) /\ (?Q -> False)] |- _ =>

          rewrite <- (not_or_iff P Q) in H

        | H: context [?P -> ?Q -> False] |- _ =>

          rewrite <- (not_and_iff P Q) in H

        | H: context [?P /\ (?Q -> False)] |- _ =>

          rewrite <- (not_imp_iff P Q) in H by dec

        | H: context [(?Q -> False) /\ ?P] |- _ =>

          rewrite <- (not_imp_rev_iff P Q) in H by dec

        end);

      fold any not.



    Tactic Notation "pull" "not" "in" "*" "|-"  :=

      pull not in * |- using core.



    Tactic Notation "pull" "not" "in" "*" "using" ident(db) :=

      pull not using db; pull not in * |- using db.

    Tactic Notation "pull" "not" "in" "*" :=

      pull not in * using core.



    Lemma test_pull : forall P Q R : Prop,

      decidable P ->

      decidable Q ->

      (~ True) ->

      (~ False) ->

      (~ ~ P) ->

      (~ (P /\ Q) -> ~ R) ->

      ((P /\ Q) \/ ~ R) ->

      (~ (P /\ Q) \/ R) ->

      (R \/ ~ (P /\ Q)) ->

      (~ R \/ (P /\ Q)) ->

      (~ P -> R) ->

      (~ (R -> P) /\ ~ (Q -> R)) ->

      (~ P \/ ~ R) ->

      (P /\ ~ R) ->

      (~ R /\ P) ->

      True.

    Proof.

      intros. pull not in *. tauto.

    Qed.



  End FSetLogicalFacts.

  Import FSetLogicalFacts.



  Module FSetDecideAuxiliary.



    Tactic Notation

      "if" tactic(t)

      "then" tactic(t1)

      "else" tactic(t2) :=

      first [ t; first [ t1 | fail 2 ] | t2 ].



    Tactic Notation "prop" constr(P) "holds" "by" tactic(t) :=

      let H := fresh in

      assert P as H by t;

      clear H.



    Tactic Notation "assert" "new" constr(e) "by" tactic(t) :=

      match goal with

      | H: e |- _ => fail 1

      | _ => assert e by t

      end.



    Tactic Notation "subst" "++" :=

      repeat (

        match goal with

        | x : _ |- _ => subst x

        end);

      cbv zeta beta in *.



    Tactic Notation "decompose" "records" :=

      repeat (

        match goal with

        | H: _ |- _ => progress (decompose record H); clear H

        end).



    Inductive FSet_elt_Prop : Prop -> Prop :=

    | eq_Prop : forall (S : Type) (x y : S),

        FSet_elt_Prop (x = y)

    | eq_elt_prop : forall x y,

        FSet_elt_Prop (E.eq x y)

    | In_elt_prop : forall x s,

        FSet_elt_Prop (In x s)

    | True_elt_prop :

        FSet_elt_Prop True

    | False_elt_prop :

        FSet_elt_Prop False

    | conj_elt_prop : forall P Q,

        FSet_elt_Prop P ->

        FSet_elt_Prop Q ->

        FSet_elt_Prop (P /\ Q)

    | disj_elt_prop : forall P Q,

        FSet_elt_Prop P ->

        FSet_elt_Prop Q ->

        FSet_elt_Prop (P \/ Q)

    | impl_elt_prop : forall P Q,

        FSet_elt_Prop P ->

        FSet_elt_Prop Q ->

        FSet_elt_Prop (P -> Q)

    | not_elt_prop : forall P,

        FSet_elt_Prop P ->

        FSet_elt_Prop (~ P).



    Inductive FSet_Prop : Prop -> Prop :=

    | elt_FSet_Prop : forall P,

        FSet_elt_Prop P ->

        FSet_Prop P

    | Empty_FSet_Prop : forall s,

        FSet_Prop (Empty s)

    | Subset_FSet_Prop : forall s1 s2,

        FSet_Prop (Subset s1 s2)

    | Equal_FSet_Prop : forall s1 s2,

        FSet_Prop (Equal s1 s2).



    Hint Constructors FSet_elt_Prop FSet_Prop : FSet_Prop.

    Ltac discard_nonFSet :=

      repeat (

        match goal with

        | H : ?P |- _ =>

          if prop (FSet_Prop P) holds by

            (auto 100 with FSet_Prop)

          then fail

          else clear H

        end).



    Hint Rewrite

      F.empty_iff F.singleton_iff F.add_iff F.remove_iff

      F.union_iff F.inter_iff F.diff_iff

    : set_simpl.



    Lemma dec_In : forall x s,

      decidable (In x s).

    Proof.

      red; intros; generalize (F.mem_iff s x); case (mem x s); intuition.

    Qed.



    Lemma dec_eq : forall (x y : E.t),

      decidable (E.eq x y).

    Proof.

      red; intros x y; destruct (E.eq_dec x y); auto.

    Qed.



    Hint Resolve dec_In dec_eq : FSet_decidability.



    Ltac change_to_E_t :=

      repeat (

        match goal with

        | H : ?T |- _ =>

          progress (change T with E.t in H);

          repeat (

            match goal with

            | J : _ |- _ => progress (change T with E.t in J)

            | |- _ => progress (change T with E.t)

            end )

        | H : forall x : ?T, _ |- _ =>

          progress (change T with E.t in H);

          repeat (

            match goal with

            | J : _ |- _ => progress (change T with E.t in J)

            | |- _ => progress (change T with E.t)

            end )

       end).



    Ltac Logic_eq_to_E_eq :=

      repeat (

        match goal with

        | H: _ |- _ =>

          progress (change (@Logic.eq E.t) with E.eq in H)

        | |- _ =>

          progress (change (@Logic.eq E.t) with E.eq)

        end).



    Ltac E_eq_to_Logic_eq :=

      repeat (

        match goal with

        | H: _ |- _ =>

          progress (change E.eq with (@Logic.eq E.t) in H)

        | |- _ =>

          progress (change E.eq with (@Logic.eq E.t))

        end).



    Ltac substFSet :=

      repeat (

        match goal with

        | H: E.eq ?x ?y |- _ => rewrite H in *; clear H

        end).



    Ltac assert_decidability :=

      
      repeat (

        match goal with

        | H: context [~ E.eq ?x ?y] |- _ =>

          assert new (E.eq x y \/ ~ E.eq x y) by (apply dec_eq)

        | H: context [~ In ?x ?s] |- _ =>

          assert new (In x s \/ ~ In x s) by (apply dec_In)

        | |- context [~ E.eq ?x ?y] =>

          assert new (E.eq x y \/ ~ E.eq x y) by (apply dec_eq)

        | |- context [~ In ?x ?s] =>

          assert new (In x s \/ ~ In x s) by (apply dec_In)

        end);

      
      repeat (

        match goal with

        | _: ~ ?P, H : ?P \/ ~ ?P |- _ => clear H

        end).



    Ltac inst_FSet_hypotheses :=

      repeat (

        match goal with

        | H : forall a : E.t, _,

          _ : context [ In ?x _ ] |- _ =>

          let P := type of (H x) in

          assert new P by (exact (H x))

        | H : forall a : E.t, _

          |- context [ In ?x _ ] =>

          let P := type of (H x) in

          assert new P by (exact (H x))

        | H : forall a : E.t, _,

          _ : context [ E.eq ?x _ ] |- _ =>

          let P := type of (H x) in

          assert new P by (exact (H x))

        | H : forall a : E.t, _

          |- context [ E.eq ?x _ ] =>

          let P := type of (H x) in

          assert new P by (exact (H x))

        | H : forall a : E.t, _,

          _ : context [ E.eq _ ?x ] |- _ =>

          let P := type of (H x) in

          assert new P by (exact (H x))

        | H : forall a : E.t, _

          |- context [ E.eq _ ?x ] =>

          let P := type of (H x) in

          assert new P by (exact (H x))

        end);

      repeat (

        match goal with

        | H : forall a : E.t, _ |- _ =>

          clear H

        end).



    Hint Resolve (E.eq_equiv.(@Equivalence_Reflexive _ _)) : FSet_Auto.

    Ltac fsetdec_rec :=

      auto with FSet_Auto;

      subst++;

      try (match goal with

      | H: E.eq ?x ?x -> False |- _ => destruct H

      end);

      (reflexivity ||

      contradiction ||

      (progress substFSet; intuition fsetdec_rec)).



    Ltac fsetdec_body :=

      inst_FSet_hypotheses;

      autorewrite with set_simpl in *;

      push not in * using FSet_decidability;

      substFSet;

      assert_decidability;

      auto with FSet_Auto;

      (intuition fsetdec_rec) ||

      fail 1

        "because the goal is beyond the scope of this tactic".



  End FSetDecideAuxiliary.

  Import FSetDecideAuxiliary.



  Ltac fsetdec :=

    

    unfold iff in *;

    
    fold any not; intros;

    
    decompose records;

    discard_nonFSet;

    
    unfold Empty, Subset, Equal in *; intros;



    autorewrite with set_simpl in *;



    change_to_E_t; E_eq_to_Logic_eq; subst++; Logic_eq_to_E_eq;

    
    pull not using FSet_decidability;

    unfold not in *;

    match goal with

    | H: (In ?x ?r) -> False |- (In ?x ?s) -> False =>

      contradict H; fsetdec_body

    | H: (In ?x ?r) -> False |- (E.eq ?x ?y) -> False =>

      contradict H; fsetdec_body

    | H: (In ?x ?r) -> False |- (E.eq ?y ?x) -> False =>

      contradict H; fsetdec_body

    | H: ?P -> False |- ?Q -> False =>

      if prop (FSet_elt_Prop P) holds by

        (auto 100 with FSet_Prop)

      then (contradict H; fsetdec_body)

      else fsetdec_body

    | |- _ =>

      fsetdec_body

    end.



  Module FSetDecideTestCases.



    Lemma test_eq_trans_1 : forall x y z s,

      E.eq x y ->

      ~ ~ E.eq z y ->

      In x s ->

      In z s.

    Proof. fsetdec. Qed.



    Lemma test_eq_trans_2 : forall x y z r s,

      In x (singleton y) ->

      ~ In z r ->

      ~ ~ In z (add y r) ->

      In x s ->

      In z s.

    Proof. fsetdec. Qed.



    Lemma test_eq_neq_trans_1 : forall w x y z s,

      E.eq x w ->

      ~ ~ E.eq x y ->

      ~ E.eq y z ->

      In w s ->

      In w (remove z s).

    Proof. fsetdec. Qed.



    Lemma test_eq_neq_trans_2 : forall w x y z r1 r2 s,

      In x (singleton w) ->

      ~ In x r1 ->

      In x (add y r1) ->

      In y r2 ->

      In y (remove z r2) ->

      In w s ->

      In w (remove z s).

    Proof. fsetdec. Qed.



    Lemma test_In_singleton : forall x,

      In x (singleton x).

    Proof. fsetdec. Qed.



    Lemma test_add_In : forall x y s,

      In x (add y s) ->

      ~ E.eq x y ->

      In x s.

    Proof. fsetdec. Qed.



    Lemma test_Subset_add_remove : forall x s,

      s [<=] (add x (remove x s)).

    Proof. fsetdec. Qed.



    Lemma test_eq_disjunction : forall w x y z,

      In w (add x (add y (singleton z))) ->

      E.eq w x \/ E.eq w y \/ E.eq w z.

    Proof. fsetdec. Qed.



    Lemma test_not_In_disj : forall x y s1 s2 s3 s4,

      ~ In x (union s1 (union s2 (union s3 (add y s4)))) ->

      ~ (In x s1 \/ In x s4 \/ E.eq y x).

    Proof. fsetdec. Qed.



    Lemma test_not_In_conj : forall x y s1 s2 s3 s4,

      ~ In x (union s1 (union s2 (union s3 (add y s4)))) ->

      ~ In x s1 /\ ~ In x s4 /\ ~ E.eq y x.

    Proof. fsetdec. Qed.



    Lemma test_iff_conj : forall a x s s',

    (In a s' <-> E.eq x a \/ In a s) ->

    (In a s' <-> In a (add x s)).

    Proof. fsetdec. Qed.



    Lemma test_set_ops_1 : forall x q r s,

      (singleton x) [<=] s ->

      Empty (union q r) ->

      Empty (inter (diff s q) (diff s r)) ->

      ~ In x s.

    Proof. fsetdec. Qed.



    Lemma eq_chain_test : forall x1 x2 x3 x4 s1 s2 s3 s4,

      Empty s1 ->

      In x2 (add x1 s1) ->

      In x3 s2 ->

      ~ In x3 (remove x2 s2) ->

      ~ In x4 s3 ->

      In x4 (add x3 s3) ->

      In x1 s4 ->

      Subset (add x4 s4) s4.

    Proof. fsetdec. Qed.



    Lemma test_too_complex : forall x y z r s,

      E.eq x y ->

      (In x (singleton y) -> r [<=] s) ->

      In z r ->

      In z s.

    Proof.

      

      intros until s; intros Heq H Hr; lapply H; fsetdec.

    Qed.



    Lemma function_test_1 :

      forall (f : t -> t),

      forall (g : elt -> elt),

      forall (s1 s2 : t),

      forall (x1 x2 : elt),

      Equal s1 (f s2) ->

      E.eq x1 (g (g x2)) ->

      In x1 s1 ->

      In (g (g x2)) (f s2).

    Proof. fsetdec. Qed.



    Lemma function_test_2 :

      forall (f : t -> t),

      forall (g : elt -> elt),

      forall (s1 s2 : t),

      forall (x1 x2 : elt),

      Equal s1 (f s2) ->

      E.eq x1 (g x2) ->

      In x1 s1 ->

      g x2 = g (g x2) ->

      In (g (g x2)) (f s2).

    Proof.

      

      intros until 3. intros g_eq. rewrite <- g_eq. fsetdec.

    Qed.



    Lemma test_baydemir :

      forall (f : t -> t),

      forall (s : t),

      forall (x y : elt),

      In x (add y (f s)) ->

      ~ E.eq x y ->

      In x (f s).

    Proof.

      fsetdec.

    Qed.



    Lemma test_baydemir_2 :

      forall (x : elt) (s : t),

      Subset (inter (singleton x) s) empty ->

      ~ In x s.

    Proof. fsetdec. Qed.



    Lemma test_baydemir_3 :

      forall (x y : elt) (s : t),

      ~ In x (add y s) ->

      x = y ->

      False.

    Proof. fsetdec. Qed.



    Lemma test_baydemir_4 :

      forall (x : elt) (s : t),

      Equal (inter (add x empty) s) empty ->

      ~ In x s.

    Proof. fsetdec. Qed.



    Lemma test_sweirich :

      forall (x : elt) (s : t),

        In x s -> Subset (singleton x) s.

    Proof. fsetdec. Qed.



  End FSetDecideTestCases.



End WDecide_fun.



Require Import CoqMSetInterface.
(* CoqMSetInterface:
Require Export Bool SetoidList RelationClasses Morphisms
 RelationPairs Equalities Orders OrdersFacts.
Set Implicit Arguments.
Unset Strict Implicit.

Module Type TypElt.
 Parameters t elt : Type.
End TypElt.

Module Type HasWOps (Import T:TypElt).

  Parameter empty : t.
  
  Parameter is_empty : t -> bool.
  
  Parameter mem : T.elt -> t -> bool.
  
  Parameter add : T.elt -> t -> t.
    Parameter singleton : T.elt -> t.
  
  Parameter remove : T.elt -> t -> t.
    Parameter union : t -> t -> t.
  
  Parameter inter : t -> t -> t.
  
  Parameter diff : t -> t -> t.
  
  Parameter equal : t -> t -> bool.
    Parameter subset : t -> t -> bool.
    Parameter fold : forall A : Type, (T.elt -> A -> A) -> t -> A -> A.
    Parameter for_all : (T.elt -> bool) -> t -> bool.
    Parameter exists_ : (T.elt -> bool) -> t -> bool.
    Parameter filter : (T.elt -> bool) -> t -> t.
    Parameter partition : (T.elt -> bool) -> t -> t * t.
    Parameter cardinal : t -> nat.
  
  Parameter elements : t -> list T.elt.
  
  Parameter choose : t -> option T.elt.
  End HasWOps.

Module Type WOps (E : DecidableType).
  Definition elt := E.t.
  Parameter t : Type. 
  Include HasWOps.
End WOps.

Module Type WSetsOn (E : DecidableType).
  
  Include WOps E.

  Parameter In : elt -> t -> Prop.
  Declare Instance In_compat : Proper (E.eq==>eq==>iff) In.

  Definition Equal s s' := forall a : elt, In a s <-> In a s'.
  Definition Subset s s' := forall a : elt, In a s -> In a s'.
  Definition Empty s := forall a : elt, ~ In a s.
  Definition For_all (P : elt -> Prop) s := forall x, In x s -> P x.
  Definition Exists (P : elt -> Prop) s := exists x, In x s /\ P x.

  Notation "s  [=]  t" := (Equal s t) (at level 70, no associativity).
  Notation "s  [<=]  t" := (Subset s t) (at level 70, no associativity).

  Definition eq : t -> t -> Prop := Equal.
  Include IsEq. 
  Include HasEqDec.

  Section Spec.
  Variable s s': t.
  Variable x y : elt.
  Variable f : elt -> bool.
  Notation compatb := (Proper (E.eq==>Logic.eq)) (only parsing).

  Parameter mem_spec : mem x s = true <-> In x s.
  Parameter equal_spec : equal s s' = true <-> s[=]s'.
  Parameter subset_spec : subset s s' = true <-> s[<=]s'.
  Parameter empty_spec : Empty empty.
  Parameter is_empty_spec : is_empty s = true <-> Empty s.
  Parameter add_spec : In y (add x s) <-> E.eq y x \/ In y s.
  Parameter remove_spec : In y (remove x s) <-> In y s /\ ~E.eq y x.
  Parameter singleton_spec : In y (singleton x) <-> E.eq y x.
  Parameter union_spec : In x (union s s') <-> In x s \/ In x s'.
  Parameter inter_spec : In x (inter s s') <-> In x s /\ In x s'.
  Parameter diff_spec : In x (diff s s') <-> In x s /\ ~In x s'.
  Parameter fold_spec : forall (A : Type) (i : A) (f : elt -> A -> A),
    fold f s i = fold_left (flip f) (elements s) i.
  Parameter cardinal_spec : cardinal s = length (elements s).
  Parameter filter_spec : compatb f ->
    (In x (filter f s) <-> In x s /\ f x = true).
  Parameter for_all_spec : compatb f ->
    (for_all f s = true <-> For_all (fun x => f x = true) s).
  Parameter exists_spec : compatb f ->
    (exists_ f s = true <-> Exists (fun x => f x = true) s).
  Parameter partition_spec1 : compatb f ->
    fst (partition f s) [=] filter f s.
  Parameter partition_spec2 : compatb f ->
    snd (partition f s) [=] filter (fun x => negb (f x)) s.
  Parameter elements_spec1 : InA E.eq x (elements s) <-> In x s.
    Parameter elements_spec2w : NoDupA E.eq (elements s).
  Parameter choose_spec1 : choose s = Some x -> In x s.
  Parameter choose_spec2 : choose s = None -> Empty s.

  End Spec.

End WSetsOn.

Module Type WSets.
  Declare Module E : DecidableType.
  Include WSetsOn E.
End WSets.

Module Type HasOrdOps (Import T:TypElt).

  Parameter compare : t -> t -> comparison.
    Parameter min_elt : t -> option elt.
    Parameter max_elt : t -> option elt.
  End HasOrdOps.

Module Type Ops (E : OrderedType) := WOps E <+ HasOrdOps.

Module Type SetsOn (E : OrderedType).
  Include WSetsOn E <+ HasOrdOps <+ HasLt <+ IsStrOrder.

  Section Spec.
  Variable s s': t.
  Variable x y : elt.

  Parameter compare_spec : CompSpec eq lt s s' (compare s s').

  Parameter elements_spec2 : sort E.lt (elements s).

  Parameter min_elt_spec1 : min_elt s = Some x -> In x s.
  Parameter min_elt_spec2 : min_elt s = Some x -> In y s -> ~ E.lt y x.
  Parameter min_elt_spec3 : min_elt s = None -> Empty s.

  Parameter max_elt_spec1 : max_elt s = Some x -> In x s.
  Parameter max_elt_spec2 : max_elt s = Some x -> In y s -> ~ E.lt x y.
  Parameter max_elt_spec3 : max_elt s = None -> Empty s.

  Parameter choose_spec3 : choose s = Some x -> choose s' = Some y ->
    Equal s s' -> E.eq x y.

  End Spec.

End SetsOn.

Module Type Sets.
  Declare Module E : OrderedType.
  Include SetsOn E.
End Sets.

Module Type S := Sets.

Module Type WRawSets (E : DecidableType).
  
  Include WOps E.

  Parameter IsOk : t -> Prop.
  Class Ok (s:t) : Prop := ok : IsOk s.

  Parameter isok : t -> bool.
    Declare Instance isok_Ok s `(isok s = true) : Ok s | 10.

  Parameter In : elt -> t -> Prop.
  Declare Instance In_compat : Proper (E.eq==>eq==>iff) In.

  Definition Equal s s' := forall a : elt, In a s <-> In a s'.
  Definition Subset s s' := forall a : elt, In a s -> In a s'.
  Definition Empty s := forall a : elt, ~ In a s.
  Definition For_all (P : elt -> Prop) s := forall x, In x s -> P x.
  Definition Exists (P : elt -> Prop) s := exists x, In x s /\ P x.

  Notation "s  [=]  t" := (Equal s t) (at level 70, no associativity).
  Notation "s  [<=]  t" := (Subset s t) (at level 70, no associativity).

  Definition eq : t -> t -> Prop := Equal.
  Declare Instance eq_equiv : Equivalence eq.

  Declare Instance empty_ok : Ok empty.
  Declare Instance add_ok s x `(Ok s) : Ok (add x s).
  Declare Instance remove_ok s x `(Ok s) : Ok (remove x s).
  Declare Instance singleton_ok x : Ok (singleton x).
  Declare Instance union_ok s s' `(Ok s, Ok s') : Ok (union s s').
  Declare Instance inter_ok s s' `(Ok s, Ok s') : Ok (inter s s').
  Declare Instance diff_ok s s' `(Ok s, Ok s') : Ok (diff s s').
  Declare Instance filter_ok s f `(Ok s) : Ok (filter f s).
  Declare Instance partition_ok1 s f `(Ok s) : Ok (fst (partition f s)).
  Declare Instance partition_ok2 s f `(Ok s) : Ok (snd (partition f s)).

  Section Spec.
  Variable s s': t.
  Variable x y : elt.
  Variable f : elt -> bool.
  Notation compatb := (Proper (E.eq==>Logic.eq)) (only parsing).

  Parameter mem_spec : forall `{Ok s}, mem x s = true <-> In x s.
  Parameter equal_spec : forall `{Ok s, Ok s'},
    equal s s' = true <-> s[=]s'.
  Parameter subset_spec : forall `{Ok s, Ok s'},
    subset s s' = true <-> s[<=]s'.
  Parameter empty_spec : Empty empty.
  Parameter is_empty_spec : is_empty s = true <-> Empty s.
  Parameter add_spec : forall `{Ok s},
    In y (add x s) <-> E.eq y x \/ In y s.
  Parameter remove_spec : forall `{Ok s},
    In y (remove x s) <-> In y s /\ ~E.eq y x.
  Parameter singleton_spec : In y (singleton x) <-> E.eq y x.
  Parameter union_spec : forall `{Ok s, Ok s'},
    In x (union s s') <-> In x s \/ In x s'.
  Parameter inter_spec : forall `{Ok s, Ok s'},
    In x (inter s s') <-> In x s /\ In x s'.
  Parameter diff_spec : forall `{Ok s, Ok s'},
    In x (diff s s') <-> In x s /\ ~In x s'.
  Parameter fold_spec : forall (A : Type) (i : A) (f : elt -> A -> A),
    fold f s i = fold_left (flip f) (elements s) i.
  Parameter cardinal_spec : forall `{Ok s},
    cardinal s = length (elements s).
  Parameter filter_spec : compatb f ->
    (In x (filter f s) <-> In x s /\ f x = true).
  Parameter for_all_spec : compatb f ->
    (for_all f s = true <-> For_all (fun x => f x = true) s).
  Parameter exists_spec : compatb f ->
    (exists_ f s = true <-> Exists (fun x => f x = true) s).
  Parameter partition_spec1 : compatb f ->
    fst (partition f s) [=] filter f s.
  Parameter partition_spec2 : compatb f ->
    snd (partition f s) [=] filter (fun x => negb (f x)) s.
  Parameter elements_spec1 : InA E.eq x (elements s) <-> In x s.
  Parameter elements_spec2w : forall `{Ok s}, NoDupA E.eq (elements s).
  Parameter choose_spec1 : choose s = Some x -> In x s.
  Parameter choose_spec2 : choose s = None -> Empty s.

  End Spec.

End WRawSets.

Module WRaw2SetsOn (E:DecidableType)(M:WRawSets E) <: WSetsOn E.

 Local Unset Elimination Schemes.

 Definition elt := E.t.

 Record t_ := Mkt {this :> M.t; is_ok : M.Ok this}.
 Definition t := t_.
 Arguments Mkt this {is_ok}.
 Hint Resolve is_ok : typeclass_instances.

 Definition In (x : elt)(s : t) := M.In x s.(this).
 Definition Equal (s s' : t) := forall a : elt, In a s <-> In a s'.
 Definition Subset (s s' : t) := forall a : elt, In a s -> In a s'.
 Definition Empty (s : t) := forall a : elt, ~ In a s.
 Definition For_all (P : elt -> Prop)(s : t) := forall x, In x s -> P x.
 Definition Exists (P : elt -> Prop)(s : t) := exists x, In x s /\ P x.

 Definition mem (x : elt)(s : t) := M.mem x s.
 Definition add (x : elt)(s : t) : t := Mkt (M.add x s).
 Definition remove (x : elt)(s : t) : t := Mkt (M.remove x s).
 Definition singleton (x : elt) : t := Mkt (M.singleton x).
 Definition union (s s' : t) : t := Mkt (M.union s s').
 Definition inter (s s' : t) : t := Mkt (M.inter s s').
 Definition diff (s s' : t) : t := Mkt (M.diff s s').
 Definition equal (s s' : t) := M.equal s s'.
 Definition subset (s s' : t) := M.subset s s'.
 Definition empty : t := Mkt M.empty.
 Definition is_empty (s : t) := M.is_empty s.
 Definition elements (s : t) : list elt := M.elements s.
 Definition choose (s : t) : option elt := M.choose s.
 Definition fold (A : Type)(f : elt -> A -> A)(s : t) : A -> A := M.fold f s.
 Definition cardinal (s : t) := M.cardinal s.
 Definition filter (f : elt -> bool)(s : t) : t := Mkt (M.filter f s).
 Definition for_all (f : elt -> bool)(s : t) := M.for_all f s.
 Definition exists_ (f : elt -> bool)(s : t) := M.exists_ f s.
 Definition partition (f : elt -> bool)(s : t) : t * t :=
   let p := M.partition f s in (Mkt (fst p), Mkt (snd p)).

 Definition eq : t -> t -> Prop := Equal.

 Definition eq_dec : forall (s s':t), { eq s s' }+{ ~eq s s' }.

 Section Spec.
  Variable s s' : t.
  Variable x y : elt.
  Variable f : elt -> bool.
  Notation compatb := (Proper (E.eq==>Logic.eq)) (only parsing).

  Lemma mem_spec : mem x s = true <-> In x s.
  Lemma equal_spec : equal s s' = true <-> Equal s s'.
  Lemma subset_spec : subset s s' = true <-> Subset s s'.
  Lemma empty_spec : Empty empty.
  Lemma is_empty_spec : is_empty s = true <-> Empty s.
  Lemma add_spec : In y (add x s) <-> E.eq y x \/ In y s.
  Lemma remove_spec : In y (remove x s) <-> In y s /\ ~E.eq y x.
  Lemma singleton_spec : In y (singleton x) <-> E.eq y x.
  Lemma union_spec : In x (union s s') <-> In x s \/ In x s'.
  Lemma inter_spec : In x (inter s s') <-> In x s /\ In x s'.
  Lemma diff_spec : In x (diff s s') <-> In x s /\ ~In x s'.
  Lemma fold_spec : forall (A : Type) (i : A) (f : elt -> A -> A),
      fold f s i = fold_left (fun a e => f e a) (elements s) i.
  Lemma cardinal_spec : cardinal s = length (elements s).
  Lemma filter_spec : compatb f ->
    (In x (filter f s) <-> In x s /\ f x = true).
  Lemma for_all_spec : compatb f ->
    (for_all f s = true <-> For_all (fun x => f x = true) s).
  Lemma exists_spec : compatb f ->
    (exists_ f s = true <-> Exists (fun x => f x = true) s).
  Lemma partition_spec1 : compatb f -> Equal (fst (partition f s)) (filter f s).
  Lemma partition_spec2 : compatb f ->
      Equal (snd (partition f s)) (filter (fun x => negb (f x)) s).
  Lemma elements_spec1 : InA E.eq x (elements s) <-> In x s.
  Lemma elements_spec2w : NoDupA E.eq (elements s).
  Lemma choose_spec1 : choose s = Some x -> In x s.
  Lemma choose_spec2 : choose s = None -> Empty s.

 End Spec.

End WRaw2SetsOn.

Module WRaw2Sets (D:DecidableType)(M:WRawSets D) <: WSets with Module E := D.
  Module E := D.
  Include WRaw2SetsOn D M.
End WRaw2Sets.

Module Type RawSets (E : OrderedType).
  Include WRawSets E <+ HasOrdOps <+ HasLt <+ IsStrOrder.

  Section Spec.
  Variable s s': t.
  Variable x y : elt.

  Parameter compare_spec : forall `{Ok s, Ok s'}, CompSpec eq lt s s' (compare s s').

  Parameter elements_spec2 : forall `{Ok s}, sort E.lt (elements s).

  Parameter min_elt_spec1 : min_elt s = Some x -> In x s.
  Parameter min_elt_spec2 : forall `{Ok s}, min_elt s = Some x -> In y s -> ~ E.lt y x.
  Parameter min_elt_spec3 : min_elt s = None -> Empty s.

  Parameter max_elt_spec1 : max_elt s = Some x -> In x s.
  Parameter max_elt_spec2 : forall `{Ok s}, max_elt s = Some x -> In y s -> ~ E.lt x y.
  Parameter max_elt_spec3 : max_elt s = None -> Empty s.

  Parameter choose_spec3 : forall `{Ok s, Ok s'},
    choose s = Some x -> choose s' = Some y -> Equal s s' -> E.eq x y.

  End Spec.

End RawSets.

Module Raw2SetsOn (O:OrderedType)(M:RawSets O) <: SetsOn O.
  Include WRaw2SetsOn O M.

  Definition compare (s s':t) := M.compare s s'.
  Definition min_elt (s:t) : option elt := M.min_elt s.
  Definition max_elt (s:t) : option elt := M.max_elt s.
  Definition lt (s s':t) := M.lt s s'.

  Section Spec.
  Variable s s' s'' : t.
  Variable x y : elt.

  Lemma compare_spec : CompSpec eq lt s s' (compare s s').

  Lemma elements_spec2 : sort O.lt (elements s).

  Lemma min_elt_spec1 : min_elt s = Some x -> In x s.
  Lemma min_elt_spec2 : min_elt s = Some x -> In y s -> ~ O.lt y x.
  Lemma min_elt_spec3 : min_elt s = None -> Empty s.

  Lemma max_elt_spec1 : max_elt s = Some x -> In x s.
  Lemma max_elt_spec2 : max_elt s = Some x -> In y s -> ~ O.lt x y.
  Lemma max_elt_spec3 : max_elt s = None -> Empty s.

  Lemma choose_spec3 :
    choose s = Some x -> choose s' = Some y -> Equal s s' -> O.eq x y.

  End Spec.

End Raw2SetsOn.

Module Raw2Sets (O:OrderedType)(M:RawSets O) <: Sets with Module E := O.
  Module E := O.
  Include Raw2SetsOn O M.
End Raw2Sets.

Module Type IN (O:OrderedType).
 Parameter Inline t : Type.
 Parameter Inline In : O.t -> t -> Prop.
 Declare Instance In_compat : Proper (O.eq==>eq==>iff) In.
 Definition Equal s s' := forall x, In x s <-> In x s'.
 Definition Empty s := forall x, ~In x s.
End IN.

Module MakeSetOrdering (O:OrderedType)(Import M:IN O).
 Module Import MO := OrderedTypeFacts O.

 Definition eq : t -> t -> Prop := Equal.

 Definition Below x s := forall y, In y s -> O.lt y x.
 Definition Above x s := forall y, In y s -> O.lt x y.

 Definition EquivBefore x s s' :=
   forall y, O.lt y x -> (In y s <-> In y s').

 Definition EmptyBetween x y s :=
   forall z, In z s -> O.lt z y -> O.lt z x.

 Definition lt s s' := exists x, EquivBefore x s s' /\
   ((In x s' /\ Below x s) \/
    (In x s  /\ exists y, In y s' /\ O.lt x y /\ EmptyBetween x y s')).

 Lemma lt_empty_r : forall s s', Empty s' -> ~ lt s s'.

 Definition Add x s s' := forall y, In y s' <-> O.eq x y \/ In y s.

 Lemma lt_empty_l : forall x s1 s2 s2',
  Empty s1 -> Above x s2 -> Add x s2 s2' -> lt s1 s2'.

 Lemma lt_add_lt : forall x1 x2 s1 s1' s2 s2',
   Above x1 s1 -> Above x2 s2 -> Add x1 s1 s1' -> Add x2 s2 s2' ->
   O.lt x1 x2 -> lt s1' s2'.

  Lemma lt_add_eq : forall x1 x2 s1 s1' s2 s2',
   Above x1 s1 -> Above x2 s2 -> Add x1 s1 s1' -> Add x2 s2 s2' ->
   O.eq x1 x2 -> lt s1 s2 -> lt s1' s2'.

End MakeSetOrdering.

Module MakeListOrdering (O:OrderedType).
 Module MO:=OrderedTypeFacts O.

 Local Notation t := (list O.t).
 Local Notation In := (InA O.eq).

 Definition eq s s' := forall x, In x s <-> In x s'.

 Instance eq_equiv : Equivalence eq := _.

 Inductive lt_list : t -> t -> Prop :=
    | lt_nil : forall x s, lt_list nil (x :: s)
    | lt_cons_lt : forall x y s s',
        O.lt x y -> lt_list (x :: s) (y :: s')
    | lt_cons_eq : forall x y s s',
        O.eq x y -> lt_list s s' -> lt_list (x :: s) (y :: s').
 Hint Constructors lt_list.

 Definition lt := lt_list.

 Lemma eq_cons :
  forall l1 l2 x y,
  O.eq x y -> eq l1 l2 -> eq (x :: l1) (y :: l2).
 Hint Resolve eq_cons.

 Lemma cons_CompSpec : forall c x1 x2 l1 l2, O.eq x1 x2 ->
 Hint Resolve cons_CompSpec.

End MakeListOrdering. *)



Module WDecide (M:WSets) := !WDecide_fun M.E M.

Module Decide := WDecide.

