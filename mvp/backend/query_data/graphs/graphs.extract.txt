

Require Import ZArith.

From IntMap Require Import Map.

Require Import zcgraph.
(* zcgraph:
Require Import cgraph.
Require Import ZArith.
Require Import NArith.
From IntMap Require Import Map.

Inductive ZCGForm : Set :=
  | ZCGle : ad -> ad -> ZCGForm 
  | ZCGge : ad -> ad -> ZCGForm 
  | ZCGlt : ad -> ad -> ZCGForm 
  | ZCGgt : ad -> ad -> ZCGForm 
  | ZCGlep : ad -> ad -> Z -> ZCGForm 
  | ZCGgep : ad -> ad -> Z -> ZCGForm 
  | ZCGltp : ad -> ad -> Z -> ZCGForm 
  | ZCGgtp : ad -> ad -> Z -> ZCGForm 
  | ZCGlem : ad -> ad -> Z -> ZCGForm 
  | ZCGgem : ad -> ad -> Z -> ZCGForm 
  | ZCGltm : ad -> ad -> Z -> ZCGForm 
  | ZCGgtm : ad -> ad -> Z -> ZCGForm 
  | ZCGlepm : ad -> ad -> Z -> Z -> ZCGForm 
  | ZCGgepm : ad -> ad -> Z -> Z -> ZCGForm 
  | ZCGltpm : ad -> ad -> Z -> Z -> ZCGForm 
  | ZCGgtpm : ad -> ad -> Z -> Z -> ZCGForm 
  | ZCGeq : ad -> ad -> ZCGForm 
  | ZCGeqp : ad -> ad -> Z -> ZCGForm 
  | ZCGeqm : ad -> ad -> Z -> ZCGForm 
  | ZCGeqpm : ad -> ad -> Z -> Z -> ZCGForm 
  | ZCGzylem : ad -> Z -> ZCGForm 
  | ZCGzygem : ad -> Z -> ZCGForm 
  | ZCGzyltm : ad -> Z -> ZCGForm 
  | ZCGzygtm : ad -> Z -> ZCGForm 
  | ZCGzylepm : ad -> Z -> Z -> ZCGForm 
  | ZCGzygepm : ad -> Z -> Z -> ZCGForm 
  | ZCGzyltpm : ad -> Z -> Z -> ZCGForm 
  | ZCGzygtpm : ad -> Z -> Z -> ZCGForm 
  | ZCGzyeqm : ad -> Z -> ZCGForm 
  | ZCGzyeqpm : ad -> Z -> Z -> ZCGForm 
  | ZCGxzlep : ad -> Z -> ZCGForm 
  | ZCGxzgep : ad -> Z -> ZCGForm 
  | ZCGxzltp : ad -> Z -> ZCGForm 
  | ZCGxzgtp : ad -> Z -> ZCGForm 
  | ZCGxzlepm : ad -> Z -> Z -> ZCGForm 
  | ZCGxzgepm : ad -> Z -> Z -> ZCGForm 
  | ZCGxzltpm : ad -> Z -> Z -> ZCGForm 
  | ZCGxzgtpm : ad -> Z -> Z -> ZCGForm 
  | ZCGxzeqp : ad -> Z -> ZCGForm 
  | ZCGxzeqpm : ad -> Z -> Z -> ZCGForm 
  | ZCGzzlep : Z -> Z -> ZCGForm 
  | ZCGzzltp : Z -> Z -> ZCGForm 
  | ZCGzzgep : Z -> Z -> ZCGForm 
  | ZCGzzgtp : Z -> Z -> ZCGForm 
  | ZCGzzeq : Z -> Z -> ZCGForm 
  | ZCGand : ZCGForm -> ZCGForm -> ZCGForm
  | ZCGor : ZCGForm -> ZCGForm -> ZCGForm
  | ZCGimp : ZCGForm -> ZCGForm -> ZCGForm
  | ZCGnot : ZCGForm -> ZCGForm
  | ZCGiff : ZCGForm -> ZCGForm -> ZCGForm.

Definition ZCG_eval := CGeval Z Zplus Zle_bool.

Fixpoint ZCGtranslate (f : ZCGForm) : CGForm Z :=
  match f with
  | ZCGle x y => CGleq Z x y 0%Z
  | ZCGge x y => CGleq Z y x 0%Z
  | ZCGlt x y => CGleq Z x y (-1)%Z
  | ZCGgt x y => CGleq Z y x (-1)%Z
  | ZCGlep x y k => CGleq Z x y k
  | ZCGgep x y k => CGleq Z y x (- k)%Z
  | ZCGltp x y k => CGleq Z x y (k - 1)%Z
  | ZCGgtp x y k => CGleq Z y x (- (k + 1))%Z
  | ZCGlem x y k => CGleq Z x y (- k)%Z
  | ZCGgem x y k => CGleq Z y x k
  | ZCGltm x y k => CGleq Z x y (- (k + 1))%Z
  | ZCGgtm x y k => CGleq Z y x (k - 1)%Z
  | ZCGlepm x y k k' => CGleq Z x y (k' - k)%Z
  | ZCGgepm x y k k' => CGleq Z y x (k - k')%Z
  | ZCGltpm x y k k' => CGleq Z x y (k' - k - 1)%Z
  | ZCGgtpm x y k k' => CGleq Z y x (k - k' - 1)%Z
  | ZCGeq x y => CGeq Z x y 0%Z
  | ZCGeqp x y k => CGeq Z x y k
  | ZCGeqm x y k => CGeq Z y x k
  | ZCGeqpm x y k k' => CGeq Z x y (k' - k)%Z
  | ZCGzylem y k => CGleq Z N0 y (- k)%Z
  | ZCGzygem y k => CGleq Z y N0 k
  | ZCGzyltm y k => CGleq Z N0 y (- (k + 1))%Z
  | ZCGzygtm y k => CGleq Z y N0 (k - 1)%Z
  | ZCGzylepm y k k' => CGleq Z N0 y (k' - k)%Z
  | ZCGzygepm y k k' => CGleq Z y N0 (k - k')%Z
  | ZCGzyltpm y k k' => CGleq Z N0 y (k' - k - 1)%Z
  | ZCGzygtpm y k k' => CGleq Z y N0 (k - k' - 1)%Z
  | ZCGzyeqm y k => CGeq Z y N0 k
  | ZCGzyeqpm y k k' => CGeq Z y N0 (k - k')%Z
  | ZCGxzlep x k => CGleq Z x N0 k
  | ZCGxzgep x k => CGleq Z N0 x (- k)%Z
  | ZCGxzltp x k => CGleq Z x N0 (k - 1)%Z
  | ZCGxzgtp x k => CGleq Z N0 x (- (k + 1))%Z
  | ZCGxzlepm x k k' => CGleq Z x N0 (k' - k)%Z
  | ZCGxzgepm x k k' => CGleq Z N0 x (k - k')%Z
  | ZCGxzltpm x k k' => CGleq Z x N0 (k' - k - 1)%Z
  | ZCGxzgtpm x k k' => CGleq Z N0 x (k - k' - 1)%Z
  | ZCGxzeqp x k => CGeq Z x N0 k
  | ZCGxzeqpm x k k' => CGeq Z x N0 (k' - k)%Z
  | ZCGzzlep k k' => CGleq Z N0 N0 (k' - k)%Z
  | ZCGzzltp k k' => CGleq Z N0 N0 (k' - k - 1)%Z
  | ZCGzzgep k k' => CGleq Z N0 N0 (k - k')%Z
  | ZCGzzgtp k k' => CGleq Z N0 N0 (k - k' - 1)%Z
  | ZCGzzeq k k' => CGeq Z N0 N0 (k - k')%Z
  | ZCGand f0 f1 => CGand Z (ZCGtranslate f0) (ZCGtranslate f1)
  | ZCGor f0 f1 => CGor Z (ZCGtranslate f0) (ZCGtranslate f1)
  | ZCGimp f0 f1 => CGimp Z (ZCGtranslate f0) (ZCGtranslate f1)
  | ZCGnot f0 => CGnot Z (ZCGtranslate f0)
  | ZCGiff f0 f1 =>
      CGand Z (CGimp Z (ZCGtranslate f0) (ZCGtranslate f1))
        (CGimp Z (ZCGtranslate f1) (ZCGtranslate f0))
  end.

Section ZCGevalDef.

  Variable rho : ad -> Z.

Fixpoint ZCGeval (f : ZCGForm) : Prop :=
  match f with
  | ZCGle x y => (rho x <= rho y)%Z
  | ZCGge x y => (rho x >= rho y)%Z
  | ZCGlt x y => (rho x < rho y)%Z
  | ZCGgt x y => (rho x > rho y)%Z
  | ZCGlep x y k => (rho x <= rho y + k)%Z
  | ZCGgep x y k => (rho x >= rho y + k)%Z
  | ZCGltp x y k => (rho x < rho y + k)%Z
  | ZCGgtp x y k => (rho x > rho y + k)%Z
  | ZCGlem x y k => (rho x + k <= rho y)%Z
  | ZCGgem x y k => (rho x + k >= rho y)%Z
  | ZCGltm x y k => (rho x + k < rho y)%Z
  | ZCGgtm x y k => (rho x + k > rho y)%Z
  | ZCGlepm x y k k' => (rho x + k <= rho y + k')%Z
  | ZCGgepm x y k k' => (rho x + k >= rho y + k')%Z
  | ZCGltpm x y k k' => (rho x + k < rho y + k')%Z
  | ZCGgtpm x y k k' => (rho x + k > rho y + k')%Z
  | ZCGeq x y => rho x = rho y
  | ZCGeqp x y k => rho x = (rho y + k)%Z
  | ZCGeqm x y k => (rho x + k)%Z = rho y
  | ZCGeqpm x y k k' => (rho x + k)%Z = (rho y + k')%Z
  | ZCGzylem y k => (k <= rho y)%Z
  | ZCGzygem y k => (k >= rho y)%Z
  | ZCGzyltm y k => (k < rho y)%Z
  | ZCGzygtm y k => (k > rho y)%Z
  | ZCGzylepm y k k' => (k <= rho y + k')%Z
  | ZCGzygepm y k k' => (k >= rho y + k')%Z
  | ZCGzyltpm y k k' => (k < rho y + k')%Z
  | ZCGzygtpm y k k' => (k > rho y + k')%Z
  | ZCGzyeqm y k => k = rho y
  | ZCGzyeqpm y k k' => k = (rho y + k')%Z
  | ZCGxzlep x k => (rho x <= k)%Z
  | ZCGxzgep x k => (rho x >= k)%Z
  | ZCGxzltp x k => (rho x < k)%Z
  | ZCGxzgtp x k => (rho x > k)%Z
  | ZCGxzlepm x k k' => (rho x + k <= k')%Z
  | ZCGxzgepm x k k' => (rho x + k >= k')%Z
  | ZCGxzltpm x k k' => (rho x + k < k')%Z
  | ZCGxzgtpm x k k' => (rho x + k > k')%Z
  | ZCGxzeqp x k => rho x = k
  | ZCGxzeqpm x k k' => (rho x + k)%Z = k'
  | ZCGzzlep k k' => (k <= k')%Z
  | ZCGzzltp k k' => (k < k')%Z
  | ZCGzzgep k k' => (k >= k')%Z
  | ZCGzzgtp k k' => (k > k')%Z
  | ZCGzzeq k k' => k = k'
  | ZCGand f0 f1 => ZCGeval f0 /\ ZCGeval f1
  | ZCGor f0 f1 => ZCGeval f0 \/ ZCGeval f1
  | ZCGimp f0 f1 => ZCGeval f0 -> ZCGeval f1
  | ZCGnot f0 => ~ ZCGeval f0
  | ZCGiff f0 f1 => ZCGeval f0 <-> ZCGeval f1
  end.

  Variable Zrho_zero : rho N0 = 0%Z.

Lemma ZCGeval_correct :
 forall f : ZCGForm, ZCGeval f <-> ZCG_eval rho (ZCGtranslate f).

End ZCGevalDef.

Definition ZCG_solve (f : ZCGForm) :=
  CG_solve Z 0%Z Zplus Zopp Zle_bool 1%Z (ZCGtranslate f).

Theorem ZCG_solve_correct :
 forall f : ZCGForm,
 ZCG_solve f = true -> {rho : ad -> Z | ZCGeval rho f /\ rho N0 = 0%Z}.

Theorem ZCG_solve_complete :
 forall (f : ZCGForm) (rho : ad -> Z),
 ZCGeval rho f -> rho N0 = 0%Z -> ZCG_solve f = true.

Definition ZCG_prove (f : ZCGForm) :=
  CG_prove Z 0%Z Zplus Zopp Zle_bool 1%Z (ZCGtranslate f).

Theorem ZCG_prove_correct :
 forall f : ZCGForm,
 ZCG_prove f = true -> forall rho : ad -> Z, rho N0 = 0%Z -> ZCGeval rho f.

Theorem ZCG_prove_complete :
 forall f : ZCGForm,
 (forall rho : ad -> Z, rho N0 = 0%Z -> ZCGeval rho f) ->
 ZCG_prove f = true. *)

Require Extraction.



Axiom int : Set.

Axiom i2p : int -> positive.

Axiom i2a : int -> ad.

Axiom i2z : int -> Z.



Extract Inductive option => option [ Some None ].



Extract Inlined Constant int => "int".



Extract Constant i2p =>

 "

  let rec i2p = function 

    1 -> XH 

  | n -> let n' = i2p (n/2) in if (n mod 2)=0 then XO n' else XI n'

  in i2p

".



Extract Constant i2a => " function 

    0 -> N0

  | n -> Npos (i2p n)

".



Extract Constant i2z =>

   " function

    0 -> Z0

  | n -> if n < 0 then Zneg (i2p (-n)) else Zpos (i2p n)

".



Extraction "checker.ml" ZCG_prove i2p i2a i2z.

