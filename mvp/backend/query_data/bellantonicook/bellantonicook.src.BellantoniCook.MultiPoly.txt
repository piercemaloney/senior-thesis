
Require Import Arith List.
Require Import BellantoniCook.Lib.
(* BellantoniCook.Lib:
Require Import Bool Arith Div2 List Permutation.
Require Export Omega.

Global Obligation Tactic := idtac.

Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) .. ).

Lemma length_nil : forall A (l : list A),
  length l = 0 -> l = nil.

Lemma length_tail A l : length (@tail A l) = length l - 1.

Lemma hd_nth_0 A (l : list A) d :
  hd d l = nth 0 l d.

Lemma hd_nth_1 A (l : list A) d :
  hd d (tl l) = nth 1 l d.

Lemma In_hd (A : Type)(d:A)(l : list A)(n : nat)(H : length l = S n) :
  In (hd d l) l.

Lemma map_hd : forall A B (f:A->B) d l, f (hd d l) = hd (f d) (map f l).

Lemma map_tl : forall A B (f:A->B) l, map f (tl l) = tl (map f l).

Lemma map_eq_hd :
  forall A B (f:A->B) d l1 l2,
  map f l1 = map f l2 -> f (hd d l1) = f (hd d l2).

Lemma firstn_nil {A} n : firstn n (@nil A) = nil.

Lemma skipn_nil : forall {A} n (x : list A),
  length x <= n -> skipn n x = nil.

Lemma nth_firstn : forall A i j (l:list A) d,
  i < j -> nth i (firstn j l) d = nth i l d.

Lemma nth_skipn A i j (l:list A) d : 
  nth i (skipn j l) d = nth (j+i) l d.

Lemma length_skipn : forall A n (y : list A),
  length (skipn n y) = length y - n.

Lemma skipn_length : forall {A} n (l:list A), 
  length (skipn n l) = length l - n.

Lemma cons_skipn :
  forall A d i (l:list A),
  i < length l ->
  nth i l d :: skipn (S i) l = skipn i l.

Lemma skipn_plus :
  forall A j i (l:list A), skipn (i+j) l = skipn i (skipn j l).

Lemma skipn_hd : forall {A} n y (d:A), 
  n < length y -> 
  skipn n y = nth n y d :: skipn (S n) y.

Lemma firstn_app {A} (l l' : list A) : 
  firstn (length l) (l ++ l') = l.

Lemma skipn_app {A} (l l' : list A) : 
  skipn (length l) (l ++ l') = l'.

Lemma map_cons : forall A B (f:A->B) a l, map f (a::l) = f a :: map f l.

Lemma map_firstn : forall A B (f:A->B) n l,
  map f (firstn n l) = firstn n (map f l).

Lemma map_skipn : forall A B (f:A->B) n l,
  map f (skipn n l) = skipn n (map f l).

Lemma map_nth_seq : forall A (l:list A) len n d,
  length l = len + n ->
  map (fun x : nat => nth x l d) (seq n len) = (skipn n l).

Lemma skipn_nil_length : forall A n (l : list A),
  skipn n l = nil -> length l <= n.

Lemma firstn_map_nth :
  forall A d n m (l:list A),
  m+n <= length l ->
  firstn n (skipn m l) = map (fun i => nth i l d) (seq m n).

Lemma firstn_seq n start len :
  firstn n (seq start len) = seq start (min n len).

Lemma skipn_seq n start len :
  skipn n (seq start len) = seq (start+n) (len-n).

Lemma in_seq_iff : forall x len start,
  In x (seq start len) <-> start <= x < start+len.

Lemma nth_map_cst :
  forall {A B} (l:list A) n (d:B), nth n (map (fun _ => d) l) d = d.

Lemma nth_S_tl A (l : list A) d n :
  nth n (tl l) d = nth (S n) l d.

Lemma map_ext2 : forall {A B} (f g : A -> B) l,
  (forall a : A, In a l -> f a = g a) -> map f l = map g l.

Lemma map_nth2
  (A B : Type) (f : A -> B) (l : list A) b d n :
  (f d) = b ->
  nth n (map f l) b = f (nth n l d).

Lemma length_plus_ex {A} n1 n2 (l : list A):
  length l = n1 + n2 ->
  exists l1, exists l2,
    length l1 = n1 /\ length l2 = n2 /\ l = l1 ++ l2.

Lemma tl_app : forall A (l1 l2 : list A),
  l1 <> nil ->
  tl (l1 ++ l2) = tl l1 ++ l2.

Lemma map_seq_nth : forall A B (l : list A) (g : A -> B) d, 
 map (fun n => g (nth n l d)) (seq 0 (length l)) = map g l.

Lemma map_seq_shift : forall A m (f : nat -> A) n,
n <> 0 ->
map f (seq 0 m) = map (fun x => f (x - n)%nat) (seq n m).

Lemma map_seq_nth_safe : forall A B (l : list A) (g : A -> B) d m, 
 map (fun n => g (nth (n - m) l d)) (seq m (length l)) = map g l.

Lemma seq_app : forall x y z,
  seq x y ++ seq (x + y) z = seq x (y + z).

Definition andl {A} (P:A->Prop)(l:list A) : Prop :=
  fold_right (fun a res => P a /\ res) True l.

Lemma forall_andl A (P:A->Prop) l :
  (forall x, In x l -> P x) <-> andl P l.

Fixpoint fun_power {A:Type}(n:nat)(f:A->A)(x:A) : A :=
  match n with
  | 0 => x
  | S n' => f (fun_power n' f x)
  end.

Lemma fun_power_minus_S : forall A (f:A->A) x m n,
  m < n -> f (fun_power (n - S m) f x) = fun_power (n - m) f x.

Definition mod2 (n : nat) : nat :=
  n - 2 * div2 n.

Fixpoint power (m n:nat) : nat :=
 match n with
 | 0 => 1
 | S n' => m * power m n'
 end.

Lemma power_le_l : forall a b n, a <= b -> power a n <= power b n.

Definition plusl (l:list nat) : nat :=
  fold_right plus 0 l.

Lemma plusl_cons : forall x l, plusl (x :: l) = x + plusl l.

Lemma plusl_app l1 l2 :
  plusl (l1++l2) = plusl l1 + plusl l2.

Lemma plusl_compat : forall A (l : list A) f g,
  (forall x, In x l -> f x <= g x) ->
  plusl (map f l) <= plusl (map g l).

Definition multl (l:list nat) : nat :=
  fold_right mult 1 l.

Lemma multl_app l1 l2 :
  multl (l1++l2) = multl l1 * multl l2.

Lemma multl_plus_distr_l n l :
  n * plusl l = plusl (map (fun m => n * m) l).

Fixpoint maxl l := 
  match l with
    | nil => 0
    | a :: l' => max a (maxl l')
  end.

Lemma in_le_maxl x l : In x l -> x <= maxl l.

Lemma maxl_map A l (f : A -> nat) n :
  (forall x, In x l -> f x = n) ->
  maxl (map f l) <= n.

Lemma maxl_le l e :
  maxl l <= e ->
  (forall x, In x l -> x <= e).

Lemma maxl_eq_le l e :
  maxl l = e ->
  (forall x, In x l -> x <= e).

Lemma maxl_eq_le3 e1 e2 e3 e :
  maxl [e1; e2; e3] = e ->
  e1 <= e /\ e2 <= e /\ e3 <= e.

Lemma maxl_le3 e1 e2 e3 e :
  maxl [e1; e2; e3] <= e ->
  e1 <= e /\ e2 <= e /\ e3 <= e.

Lemma maxl_bound e1 e2 e3 e :
  e1 <= e -> e2 <= e -> e3 <= e ->
  maxl [e1; e2; e3] <= e.

Lemma maxl_bound_in l e :
  (forall e', In e' l -> e' <= e) -> maxl l <= e.

Lemma maxl_cons l n : n <= maxl (n :: l).

Lemma le_maxl_cons l m n :
 n <= maxl l -> n <= maxl (m :: l).

Lemma nth_maxl_bound : forall A (l : list A) (m:A->nat) d i,
  m d = 0 -> m (nth i l d) <= maxl (map m l).

Lemma length_hd_app A (l1 l2 : list (list A)) :
  length (hd nil l1) <= length (hd nil (l1 ++ l2)).

Lemma length_nth_app A (l1 l2 : list (list A)) i :
  length (nth i l1 nil) <= length (nth i (l1 ++ l2) nil).

Lemma maxl_nth l :
  exists i, maxl l = nth i l 0.

Lemma maxl_map_0 A l (f : A -> nat)  :
  (forall x, In x l -> (f x) = 0) ->
  maxl (map f l) = 0.

Lemma maxl_le_plusl : forall l, maxl l <= plusl l.

Lemma forallb_forall_conv :
  forall A f (l:list A), forallb f l = false <-> (exists x, In x l /\ f x = false).

Lemma forallb_nth : forall A (l : list A) (p : A -> bool) n d,
  p d = true ->
  forallb p l = true ->
  p (nth n l d) = true.

Lemma forallb_hd : forall A (l : list A) (p : A -> bool) d,
  forallb p l = true ->
  p d = true ->
  p (hd d l) = true.

Lemma forallb_tl : forall A (l : list A) (p : A -> bool),
  forallb p l = true ->
  forallb p (tail l) = true.

Lemma forallb_map : forall A B (l : list A) (p : B -> bool) (f : A -> B),
  (forall x, In x l -> p (f x) = true) ->
  forallb p (map f l) = true.

Fixpoint repeat {A:Type}(n:nat)(x:A) : list A :=
  match n with
  | 0 => nil
  | S n' => x :: repeat n' x
  end.

Lemma firstn_repeat_le :
  forall A (x:A) m n,
  m <= n ->
  firstn m (repeat n x) = repeat m x.

Lemma in_repeat_eq : forall A (x y:A) n, In x (repeat n y) -> x=y.

Lemma map_repeat : forall A B (f:A->B) n x, map f (repeat n x) = repeat n (f x).

Lemma multl_repeat_power : forall n x, multl (repeat n x) = power x n.

Lemma length_repeat : forall A n (x:A), length (repeat n x) = n.

Lemma nth_repeat :
  forall A n (x:A) d i, i < n ->
  nth i (repeat n x) d = x.

Definition move_forward {A}(i j:nat)(l:list A)(d:A) : list A :=
  firstn i l ++ firstn j (skipn (S i) l) ++ (nth i l d :: skipn (S (i+j)) l).

Lemma move_forward_map A B d1 d2 i j (f:A->B) l :
  f d1 = d2 ->
  move_forward i j (map f l) d2 = map f (move_forward i j l d1).

Lemma length_move_forward :
  forall A i j (l:list A) d, i+j < length l -> length (move_forward i j l d) = length l.

Lemma in_move_forward_iff :
  forall A x i j d (l:list A), i < length l -> (In x (move_forward i j l d) <-> In x l).

Lemma firstn_simpl : forall A B (l : list A) (l2 : list B),
 length l2 = length l ->
 firstn (length l2) l = l.

Lemma firstn_app2 : forall (A : Type) (l l' : list A) n, 
 length l = n -> firstn n (l ++ l') = l .

Lemma firstn_firstn : forall A n (l : list A),
 firstn n (firstn n l) = firstn n l.

Lemma In_firstn : forall A n a (l : list A),
  In a (firstn n l) -> In a l. *)

Definition pow : Type := (nat*nat)%type.
Definition mon : Type := (nat * list pow)%type.
Definition pol : Type := (nat * list mon)%type.

Definition peval_pow (xn:pow)(l:list nat) : nat :=
  power (nth (fst xn) l 0) (snd xn).

Definition peval_mon (m:mon)(l:list nat) : nat :=
  (fst m) * multl (map (fun x => peval_pow x l) (snd m)).

Definition peval (p:pol)(l:list nat) :=
  plusl (map (fun m => peval_mon m l) (snd p)).

Lemma peval_parity : forall ar p l,
  peval (ar, snd p) l = peval p l.
Proof. intros ar [ar0 ml] l; simpl; trivial. Qed.

Lemma peval_pow_monotonic : forall xn l1 l2, 
  (forall i, nth i l1 0 <= nth i l2 0) ->
  peval_pow xn l1 <= peval_pow xn l2.
Proof.
 intros [x n] l1 l2 H; simpl.
 apply power_le_l; trivial.
Qed.

Lemma peval_mon_monotonic : forall m l1 l2, 
  (forall i, nth i l1 0 <= nth i l2 0) ->
  peval_mon m l1 <= peval_mon m l2.
Proof.
 unfold peval_mon; intros [a xl] l1 l2 H.
 induction xl; simpl; trivial.
 rewrite !mult_assoc, !(mult_comm a), <- !mult_assoc.
 apply mult_le_compat; trivial.
 apply peval_pow_monotonic; trivial.
Qed.

Lemma peval_monotonic : forall p l1 l2, 
  (forall i, nth i l1 0 <= nth i l2 0) ->
  peval p l1 <= peval p l2.
Proof.
 unfold peval; intros [ar ml] l1 l2 H.
 induction ml; simpl; trivial.
 apply plus_le_compat; trivial.
 apply peval_mon_monotonic; trivial.
Qed.

Lemma peval_nth i pl p l :
  peval (nth i pl p) l =
  nth i (map (fun p => peval p l) pl) (peval p l).
Proof.
 intros; revert i.
 induction pl; intros [ | i]; simpl; intros; trivial.
Qed.

Notation parity := (@fst nat (list mon)).

Definition pWF_pow (ar:nat)(xn:pow) : Prop :=
  fst xn < ar.

Definition pWF_mon (ar:nat)(m:mon) : Prop :=
  andl (pWF_pow ar) (snd m).

Definition pWF' (ar:nat)(ml:list mon) : Prop :=
  andl (pWF_mon ar) ml.

Definition pWF (p:pol) : Prop :=
  pWF' (fst p) (snd p).

Lemma pWF_mon_le : forall ar1 ar2 m,
  ar1 <= ar2 -> 
  pWF_mon ar1 m -> pWF_mon ar2 m.
Proof.
 unfold pWF_mon, pWF_pow; intros ar1 ar2 [a xl].
 induction xl as [ | xn xl' IH]; simpl; intros; trivial.
 destruct xn as [x n]; simpl in *.
 split;[ omega | tauto].
Qed.

Lemma pWF'_le ar1 ar2 ml :
  ar1 <= ar2 -> pWF' ar1 ml -> pWF' ar2 ml.
Proof.
 induction ml; simpl; intros; trivial.
 split;[ | tauto].
 apply pWF_mon_le with ar1; trivial; tauto.
Qed.

Lemma pWF_mon_app : forall ar a1 xl1 a2 xl2,
  pWF_mon ar (a1, xl1) -> pWF_mon ar (a2, xl2) ->
  pWF_mon ar (a1*a2, xl1++xl2).
Proof.
 unfold pWF_mon, pWF_pow.
 induction xl1 as [ | [x n] xl1' IH]; simpl; intros; trivial.
 split;[ tauto | ].
 apply IH with a1; tauto.
Qed.

Lemma pWF'_app ar ml1 ml2 :
  pWF' ar ml1 -> pWF' ar ml2 -> pWF' ar (ml1++ml2).
Proof.
 induction ml1 as [ | m1 ml1' IH]; simpl; intros; trivial.
 split;[ tauto | ].
 apply IH; tauto.
Qed.

Lemma pWF_nth i pl p0 :
  andl pWF pl -> pWF p0 -> pWF (nth i pl p0).
Proof.
 intros; revert i.
 induction pl; simpl in *; intros; case i; intros; trivial.
 tauto.
 apply IHpl; tauto.
Qed.

Lemma parity_mon_correct : forall ar m l l1 l2,
  pWF_mon ar m -> length l = ar -> peval_mon m (l++l1) = peval_mon m (l++l2).
Proof.
 unfold peval_mon, peval_pow, pWF_mon, pWF_pow.
 intros ar [a xl] l l1 l2 H1 H2; simpl in *; f_equal; f_equal.
 induction xl as [ | [x n] xl' IH]; simpl in *; trivial.
 f_equal;[ | tauto].
 f_equal; rewrite !app_nth1; trivial; omega.
Qed.

Lemma parity_correct : forall p l l1 l2,
  pWF p -> length l = parity p -> peval p (l++l1) = peval p (l++l2).
Proof.
 unfold peval, peval_mon, peval_pow, pWF, pWF_mon, pWF_pow.
 intros [ar ml] l l1 l2 H1 H2; simpl in *; f_equal.
 induction ml as [ | m ml' IH]; simpl in *; trivial.
 f_equal;[ | tauto].
 apply parity_mon_correct with ar; tauto.
Qed.

Definition pcst (ar a:nat) : pol :=
  (ar, [(a,nil)]).

Lemma parity_pcst ar a :
  parity (pcst ar a) = ar.
Proof. trivial. Qed.

Lemma pWF_pcst ar a : pWF (pcst ar a).
Proof. compute; intros; tauto. Qed.

Lemma pcst_correct : forall ar k l, peval (pcst ar k) l = k.
Proof. unfold peval, peval_mon, peval_pow; simpl; intros; omega. Qed.

Definition pproj (ar i:nat) : pol :=
  (ar,[(1,[(i,1)])]).

Lemma parity_pproj n i :
  parity (pproj n i) = n.
Proof. trivial. Qed.

Lemma pWF_pproj ar i : i < ar -> pWF (pproj ar i).
Proof. compute; intros; tauto. Qed.

Lemma pproj_correct : forall ar i l,
 peval (pproj ar i) l = nth i l 0.
Proof. unfold peval, peval_mon, peval_pow; simpl; intros; omega. Qed.

Definition pscalar_mon (n:nat)(m:mon) : mon :=
  (n * fst m, snd m).

Definition pscalar (n:nat)(p:pol) : pol :=
  (fst p, map (pscalar_mon n) (snd p)).

Lemma parity_pscalar n p :
  parity (pscalar n p) = parity p.
Proof. trivial. Qed.

Lemma pWF_pscalar : forall n p,
  pWF p -> pWF (pscalar n p).
Proof.
 unfold pWF, pWF_mon, pWF_pow; intros n [ar ml] H.
 induction ml; simpl in *; trivial; tauto.
Qed.

Lemma pscalar_mon_correct : forall n m l,
  peval_mon (pscalar_mon n m) l = n * peval_mon m l.
Proof. unfold peval_mon; intros n [a xl] l; simpl; ring. Qed.

Lemma map_pscalar_mon n ml l :
  plusl (map (fun m => peval_mon (pscalar_mon n m) l) ml) =
  n * plusl (map (fun m => peval_mon m l) ml).
Proof.
 induction ml; simpl; trivial.
 rewrite pscalar_mon_correct, IHml; ring.
Qed.

Lemma pscalar_correct : forall n p l,
  peval (pscalar n p) l = n * peval p l.
Proof.
 unfold peval, pscalar; intros n [ar pl] l.
 induction pl; simpl in *; trivial.
 rewrite map_map in *.
 rewrite pscalar_mon_correct; simpl in IHpl.
 rewrite IHpl; ring.
Qed.

Definition pplus (p1 p2:pol) : pol :=
  (max (fst p1) (fst p2), snd p1 ++ snd p2).

Lemma parity_pplus : forall p1 p2,
  parity (pplus p1 p2) = max (parity p1) (parity p2).
Proof.
 intros [ar1 ml1] [ar2 ml2]; trivial.
Qed.

Lemma pWF_pplus : forall p1 p2,
  pWF p1 -> pWF p2 -> pWF (pplus p1 p2).
Proof.
 unfold pWF, pWF_mon, pWF_pow.
 intros [ar1 ml1] [ar2 ml2] H1 H2; simpl in *.
 induction ml1 as [ | m1 ml1' IH]; simpl in *.
 apply pWF'_le with ar2; auto with arith.
 split;[ | tauto ].
 apply pWF_mon_le with ar1; auto with arith; tauto.
Qed.

Lemma pplus_correct : forall p1 p2 l,
 peval (pplus p1 p2) l = peval p1 l + peval p2 l.
Proof.
 unfold peval, peval_mon, peval_pow.
 intros [ar1 ml1] [ar2 ml2] l.
 induction ml1 as [ | m1 ml1' IH]; simpl in *; trivial.
 unfold peval, pplus in IH; rewrite IH; ring.
Qed.

Definition pplusl (pl:list pol) : pol :=
  fold_right pplus (pcst 0 0) pl.

Lemma parity_pplusl : forall pl,
  parity (pplusl pl) = maxl (map parity pl).
Proof.
 induction pl; trivial; simpl pplusl.
 rewrite parity_pplus, IHpl; trivial.
Qed.

Definition pWF_pplusl : forall pl,
  andl pWF pl -> pWF (pplusl pl).
Proof.
 unfold pWF, pWF_mon, pWF_pow.
 induction pl; intros;[ simpl; tauto |].
 apply pWF_pplus; simpl in *; tauto.
Qed.

Lemma pplusl_correct : forall pl l,
  peval (pplusl pl) l = plusl (map (fun p => peval p l) pl).
Proof.
 induction pl; simpl; intros; trivial.
 rewrite pplus_correct, IHpl; trivial.
Qed.

Lemma peval_nth_pplus : forall pl l i n,
  peval (nth i pl (pcst n 0)) l <=
  peval (pplusl pl) l.
Proof.
 induction pl; simpl; intros; case i; trivial; rewrite pplus_correct; [ omega | ].
 intros; eapply le_trans;[ apply IHpl | ].
 omega.
Qed.

Definition pmult_mon (m12:mon*mon) : mon :=
  (fst (fst m12) * fst (snd m12), snd (fst m12) ++  snd (snd m12)).

Definition pmult (p1 p2:pol) : pol :=
  (max (fst p1) (fst p2), map pmult_mon (list_prod (snd p1) (snd p2))).

Lemma parity_pmult : forall p1 p2,
  parity (pmult p1 p2) = max (parity p1) (parity p2).
Proof. intros [ar1 ml1] [ar2 ml2]; trivial. Qed.

Lemma pWF_pmult_mon : forall ar1 m1 ar2 m2,
  pWF_mon ar1 m1 -> pWF_mon ar2 m2 ->
  pWF_mon (max ar1 ar2) (pmult_mon (m1, m2)).
Proof.
 intros ar1 [a1 xl1] ar2 [a2 xl2]; simpl pmult_mon; intros.
 apply pWF_mon_app.
 apply pWF_mon_le with ar1; auto with arith.
 apply pWF_mon_le with ar2; auto with arith.
Qed.

Lemma pWF_pmult : forall p1 p2,
  pWF p1 -> pWF p2 -> pWF (pmult p1 p2).
Proof.
 unfold pWF, pWF_mon, pWF_pow.
 intros [ar1 ml1] [ar2 ml2] H1 H2; simpl in *.
 induction ml1 as [ | m1 ml1' IH1]; simpl in *; intros; trivial.
 rewrite map_app, map_map.
 apply pWF'_app;[ | tauto ].
 clear IH1.
 induction ml2 as [ | m2 ml2' IH2]; simpl in *; intros; trivial.
 split;[ | tauto ].
 apply pWF_pmult_mon; tauto.
Qed.

Lemma pmult_mon_correct : forall m12 l,
  peval_mon (pmult_mon m12) l =
  peval_mon (fst m12) l * peval_mon (snd m12) l.
Proof.
 unfold peval_mon, peval_pow.
 intros [[a1 xl1] [a2 xl2]] l; simpl.
 induction xl1 as [ | x1 xl1' IH]; simpl;[ ring | ring [IH] ].
Qed.

Lemma map_pmult_mon : forall m1 ml2 l,
 map (fun m2 => peval_mon (pmult_mon (m1, m2)) l) ml2 =
 map (fun m2 => peval_mon m1 l * peval_mon m2 l) ml2.
Proof.
 unfold peval_mon, peval_pow.
 intros [a1 xl1] ml2 l; simpl.
 induction ml2 as [ | [a2 xl2] ml2' IH]; simpl; trivial.
 rewrite IH, map_app, multl_app; f_equal; ring.
Qed.

Lemma pmult_correct : forall p1 p2 l,
 peval (pmult p1 p2) l = peval p1 l * peval p2 l.
Proof.
 unfold peval; intros [ar1 ml1] [ar2 ml2] l; simpl.
 induction ml1 as [ | m1 ml1' IH]; simpl; trivial.
 rewrite !map_app, !map_map, map_pmult_mon, plusl_app.
 rewrite map_map in IH; rewrite IH.
 rewrite mult_plus_distr_r.
 f_equal.
 rewrite multl_plus_distr_l, map_map; trivial.
Qed.

Definition pmultl (pl:list pol) : pol :=
  fold_right pmult (pcst 0 1) pl.

Lemma parity_pmultl pl :
  parity (pmultl pl) = maxl (map parity pl).
Proof.
 induction pl; simpl pmultl; trivial.
 rewrite parity_pmult, IHpl; trivial.
Qed.

Definition pWF_pmultl pl :
  andl pWF pl -> pWF (pmultl pl).
Proof.
 induction pl; simpl pmultl; intros.
 apply pWF_pcst.
 apply pWF_pmult; simpl in *; tauto.
Qed.

Lemma pmultl_correct pl l :
  peval (pmultl pl) l = multl (map (fun p => peval p l) pl).
Proof.
 induction pl; simpl; intros; trivial.
 rewrite pmult_correct, IHpl; trivial.
Qed.

Fixpoint ppower (p:pol)(n:nat) : pol :=
  match n with
  | 0 => pcst (fst p) 1
  | S n' => pmult p (ppower p n')
  end.

Lemma parity_ppower p n :
  parity (ppower p n) = parity p.
Proof.
 induction n; simpl ppower; trivial.
 rewrite parity_pmult, IHn; auto with arith.
Qed.

Lemma pWF_ppower p n :
  pWF p -> pWF (ppower p n).
Proof.
 induction n; simpl ppower; intros.
 apply pWF_pcst.
 apply pWF_pmult; tauto.
Qed.

Lemma ppower_correct p n l :
  peval (ppower p n) l = power (peval p l) n.
Proof.
 induction n; simpl; intros; trivial.
 rewrite pmult_correct, IHn;trivial.
Qed.

Definition pcomp_pow' (xn:pow)(pl:list pol) : pol :=
  ppower (nth (fst xn) pl (pcst 0 0)) (snd xn).

Definition pcomp_pow (xn:pow)(pl:list pol) : pol :=
  (maxl (map parity pl), snd (pcomp_pow' xn pl)).

Definition pcomp_mon' (m:mon)(pl:list pol) : pol :=
  pscalar (fst m) (pmultl (map (fun xn => pcomp_pow xn pl) (snd m))).

Definition pcomp_mon (m:mon)(pl:list pol) : pol :=
  (maxl (map parity pl), snd (pcomp_mon' m pl)).

Definition pcomp' (p:pol)(pl:list pol) : pol :=
  pplusl (map (fun m => pcomp_mon m pl) (snd p)).

Definition pcomp (p:pol)(pl:list pol) : pol :=
  (maxl (map parity pl), snd (pcomp' p pl)).

Lemma parity_pcomp_pow : forall xn pl,
  parity (pcomp_pow xn pl) = maxl (map parity pl).
Proof.
 unfold pcomp_pow; intros [x n] pl; simpl.
 case_eq (ppower (nth x pl (pcst 0 0)) n); trivial.
Qed.

Lemma map_parity_pcomp_pow xl pl :
  map (fun xn => parity (pcomp_pow xn pl)) xl = map (fun _ => maxl (map parity pl)) xl.
Proof. destruct xl; simpl; trivial. Qed.

Lemma parity_pcomp_mon' : forall m pl,
  parity (pcomp_mon' m pl) <= maxl (map parity pl).
Proof.
 intros [a xl] pl; simpl.
 rewrite parity_pmultl.
 induction xl; simpl.
 omega.
 apply Nat.max_lub; trivial.
Qed.

Lemma parity_pcomp_mon : forall m pl,
  parity (pcomp_mon m pl) = maxl (map parity pl).
Proof.
 unfold pcomp_mon; intros [a xl] pl; simpl; trivial.
Qed.

Lemma parity_pcomp p pl :
  parity (pcomp p pl) = maxl (map parity pl).
Proof.
 unfold pcomp; intros.
 case (pcomp' p pl); trivial.
Qed.

Lemma pWF_pcomp_pow' : forall xn pl,
  andl pWF pl -> pWF (pcomp_pow' xn pl).
Proof.
 intros [x n] pl H; simpl.
 apply pWF_ppower.
 apply pWF_nth; trivial.
 apply pWF_pcst.
Qed.

Lemma pWF_pcomp_pow : forall xn pl,
  andl pWF pl -> pWF (pcomp_pow xn pl).
Proof.
 intros [x n] pl H.
 apply pWF'_le with (ar1 := fst (pcomp_pow' (x, n) pl)).
 rewrite parity_pcomp_pow.
 unfold pcomp_pow'.
 rewrite parity_ppower.
 destruct (le_lt_dec (length pl) x).
 rewrite nth_overflow; auto with arith.
 apply in_le_maxl.
 apply in_map.
 apply nth_In; trivial.
 apply pWF_pcomp_pow'; trivial.
Qed.

Lemma pWF_pcomp_mon' : forall m pl,
  andl pWF pl -> pWF (pcomp_mon' m pl).
Proof.
 unfold pWF, pWF', pWF_mon, pWF_pow.
 intros [a xl] pl H.
 induction xl as [ | [x n]  xl' IH].
 simpl; tauto.
 apply pWF_pscalar.
 apply pWF_pmultl.
 clear IH.
 induction xl'; simpl in *.
 split; trivial.
 apply pWF_pcomp_pow; trivial.
 split;[ tauto | split ].
 apply pWF_pcomp_pow; trivial.
 apply IHxl'.
Qed.

Lemma pWF_pcomp_mon : forall m pl,
  andl pWF pl -> pWF (pcomp_mon m pl).
Proof.
 intros [a xl] pl H.
 apply pWF'_le with (ar1 := fst (pcomp_mon' (a, xl) pl)).
 apply parity_pcomp_mon'.
 apply pWF_pcomp_mon'; trivial.
Qed.

Lemma pWF_pcomp' : forall p pl,
  andl pWF pl -> pWF (pcomp' p pl).
Proof.
 intros [ar ml] pl H; simpl.
 apply pWF_pplusl.
 induction ml; simpl in *; trivial.
 split; trivial.
 apply pWF_pcomp_mon; trivial.
Qed.

Lemma pWF_pcomp : forall p pl,
  andl pWF pl -> pWF (pcomp p pl).
Proof.
 intros [ar ml] pl H.
 apply pWF'_le with (ar1 := fst (pcomp' (ar, ml) pl)).
 rewrite parity_pcomp; unfold pcomp'.
 rewrite parity_pplusl, map_map.
 induction ml; simpl.
 omega.
 apply Nat.max_lub; trivial.
 apply pWF_pcomp'; trivial.
Qed.

Lemma pcomp_pow'_correct : forall xn pl l,
  peval (pcomp_pow' xn pl) l =
  power (peval (nth (fst xn) pl (pcst 0 0)) l) (snd xn).
Proof. intros [x n] pl l; simpl; apply ppower_correct. Qed.

Lemma pcomp_pow_correct xn pl l :
  peval (pcomp_pow xn pl) l =
  power (peval (nth (fst xn) pl (pcst 0 0)) l) (snd xn).
Proof.
 intros; unfold pcomp_pow; apply pcomp_pow'_correct.
Qed.

Lemma pcomp_mon'_correct : forall m pl l,
  peval (pcomp_mon' m pl) l = peval_mon m (map (fun p => peval p l) pl).
Proof.
 intros [a xl] pl l; induction xl.
 unfold peval, peval_mon.
 simpl; ring.
 unfold pcomp_mon' in *; simpl in *.
 rewrite pscalar_correct, pmult_correct, pmultl_correct in *.
 rewrite mult_assoc, (mult_comm a), <- mult_assoc, IHxl, pcomp_pow_correct, peval_nth.
 destruct a0 as [x n].
 unfold peval_mon, peval_pow.
 rewrite pcst_correct; simpl; ring.
Qed.

Lemma pcomp_mon_correct : forall m pl l,
  peval (pcomp_mon m pl) l = peval_mon m (map (fun p => peval p l) pl).
Proof.
 intros [a xl] pl l; unfold pcomp_mon.
 rewrite peval_parity.
 apply pcomp_mon'_correct.
Qed.

Lemma pcomp'_correct : forall p pl l,
  peval (pcomp' p pl) l = peval p (map (fun p' => peval p' l) pl).
Proof.
 unfold pcomp'; intros [ar ml] pl l.
 induction ml; simpl in *; trivial.
 rewrite pplus_correct, pcomp_mon_correct, IHml; trivial.
Qed.

Lemma pcomp_correct p pl l :
  peval (pcomp p pl) l = peval p (map (fun p => peval p l) pl).
Proof.
 intros; unfold pcomp; rewrite peval_parity.
 apply pcomp'_correct.
Qed.

Definition pshift_pow (xn:pow) : pow :=
  (S (fst xn), snd xn).

Definition pshift_mon (m:mon) : mon :=
  (fst m, map pshift_pow (snd m)).

Definition pshift (p:pol) : pol :=
  (S (fst p), map pshift_mon (snd p)).

Lemma parity_pshift : forall p,
  parity (pshift p) = S (parity p).
Proof. intros [ar ml]; trivial. Qed.

Lemma pWF_pshift_mon : forall ar m,
  pWF_mon ar m -> pWF_mon (S ar) (pshift_mon m).
Proof.
 unfold pWF_mon, pWF_pow.
 intros ar [a xl] H; simpl.
 induction xl as [ | [x n]  xl' IH]; simpl in *; trivial.
 split; [ omega | tauto ].
Qed.

Lemma pWF_pshift : forall p, pWF p -> pWF (pshift p).
Proof.
 unfold pWF; intros [ar ml] H; simpl.
 induction ml; simpl in *; trivial.
 split;[ | tauto].
 apply pWF_pshift_mon; tauto.
Qed.

Lemma pshift_pow_correct : forall xn l,
  peval_pow (pshift_pow xn) l = peval_pow xn (tl l).
Proof.
 unfold peval_pow; intros [x n] l; simpl; f_equal.
 rewrite nth_S_tl; trivial.
Qed.

Lemma pshift_mon_correct : forall m l,
  peval_mon (pshift_mon m) l = peval_mon m (tl l).
Proof.
 unfold peval_mon; intros [a xl] l.
 induction xl; simpl in * ;trivial.
 rewrite mult_assoc, (mult_comm a), <- mult_assoc, pshift_pow_correct, IHxl; ring.
Qed.

Lemma pshift_correct : forall p l,
  peval (pshift p) l = peval p (tl l).
Proof.
 unfold peval; intros [ar ml] l.
 induction ml; simpl in *; trivial.
 rewrite pshift_mon_correct, IHml; trivial.
Qed.

Definition psum (start len : nat) : pol :=
  pplus (pcst (start+len) 0) (pplusl (map (pproj (start+len)) (seq start len))).

Lemma psum_correct start len l :
  peval (psum start len) l = 
  plusl (map (fun i => nth i l 0) (seq start len)).
Proof.
 intros; unfold psum.
 rewrite pplus_correct, pcst_correct, pplusl_correct; simpl; f_equal.
 induction (seq start len); simpl; intros; trivial.
 rewrite pproj_correct; congruence.
Qed.

Lemma pWF_psum start len : pWF (psum start len).
Proof.
 intros;unfold psum.
 apply pWF_pplus.
 apply pWF_pcst.
 apply pWF_pplusl.
 rewrite <- forall_andl; intros.
 rewrite in_map_iff in H.
 destruct H as (y & H1 & H2); subst.
 apply pWF_pproj.
 rewrite in_seq_iff in H2.
 tauto.
Qed.

Lemma parity_psum start len : 
  parity (psum start len) = start + len.
Proof.
 intros; unfold psum.
 rewrite parity_pplus, parity_pcst, parity_pplusl, max_l; trivial.
 apply maxl_map.
 intros p H.
 rewrite in_map_iff in H.
 destruct H as (x & H & _).
 subst; trivial.
Qed.

Ltac pWF :=
  match goal with
  | |- pWF (pcst _ _) => apply pWF_pcst
  | |- pWF (pproj _ _) => apply pWF_pproj; try omega
  | |- pWF (pscalar _ _) => apply pWF_pscalar; pWF
  | |- pWF (pplus _ _) => apply pWF_pplus; pWF
  | |- pWF (pplusl _) => apply pWF_pplusl; rewrite <- forall_andl; intros; pWF
  | |- pWF (pmult _ _) => apply pWF_pmult; pWF
  | |- pWF (pmultl _) => apply pWF_pmultl; rewrite <- forall_andl; intros; pWF
  | |- pWF (ppower _ _) => apply pWF_ppower; pWF
  | |- pWF (pcomp _ _) => apply pWF_pcomp; rewrite <- forall_andl; intros; pWF
  | |- pWF (pshift _) => apply pWF_pshift; pWF
  | |- pWF (psum _ _) => apply pWF_psum
  | |- _ => idtac
  end.

Definition deg_mon (m:mon) : nat :=
  plusl (map (@snd _ _) (snd m)).

Definition deg (p:pol) : nat :=
  maxl (map deg_mon (snd p)).
