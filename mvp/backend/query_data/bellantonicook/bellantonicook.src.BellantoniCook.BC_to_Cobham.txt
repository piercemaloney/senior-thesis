Require Import Bool Arith List.

Require Import BellantoniCook.Lib BellantoniCook.MultiPoly BellantoniCook.Cobham BellantoniCook.CobhamLib BellantoniCook.CobhamUnary BellantoniCook.BC.
(* BellantoniCook.Lib:
Require Import Bool Arith Div2 List Permutation.
Require Export Omega.

Global Obligation Tactic := idtac.

Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) .. ).

Lemma length_nil : forall A (l : list A),
  length l = 0 -> l = nil.

Lemma length_tail A l : length (@tail A l) = length l - 1.

Lemma hd_nth_0 A (l : list A) d :
  hd d l = nth 0 l d.

Lemma hd_nth_1 A (l : list A) d :
  hd d (tl l) = nth 1 l d.

Lemma In_hd (A : Type)(d:A)(l : list A)(n : nat)(H : length l = S n) :
  In (hd d l) l.

Lemma map_hd : forall A B (f:A->B) d l, f (hd d l) = hd (f d) (map f l).

Lemma map_tl : forall A B (f:A->B) l, map f (tl l) = tl (map f l).

Lemma map_eq_hd :
  forall A B (f:A->B) d l1 l2,
  map f l1 = map f l2 -> f (hd d l1) = f (hd d l2).

Lemma firstn_nil {A} n : firstn n (@nil A) = nil.

Lemma skipn_nil : forall {A} n (x : list A),
  length x <= n -> skipn n x = nil.

Lemma nth_firstn : forall A i j (l:list A) d,
  i < j -> nth i (firstn j l) d = nth i l d.

Lemma nth_skipn A i j (l:list A) d : 
  nth i (skipn j l) d = nth (j+i) l d.

Lemma length_skipn : forall A n (y : list A),
  length (skipn n y) = length y - n.

Lemma skipn_length : forall {A} n (l:list A), 
  length (skipn n l) = length l - n.

Lemma cons_skipn :
  forall A d i (l:list A),
  i < length l ->
  nth i l d :: skipn (S i) l = skipn i l.

Lemma skipn_plus :
  forall A j i (l:list A), skipn (i+j) l = skipn i (skipn j l).

Lemma skipn_hd : forall {A} n y (d:A), 
  n < length y -> 
  skipn n y = nth n y d :: skipn (S n) y.

Lemma firstn_app {A} (l l' : list A) : 
  firstn (length l) (l ++ l') = l.

Lemma skipn_app {A} (l l' : list A) : 
  skipn (length l) (l ++ l') = l'.

Lemma map_cons : forall A B (f:A->B) a l, map f (a::l) = f a :: map f l.

Lemma map_firstn : forall A B (f:A->B) n l,
  map f (firstn n l) = firstn n (map f l).

Lemma map_skipn : forall A B (f:A->B) n l,
  map f (skipn n l) = skipn n (map f l).

Lemma map_nth_seq : forall A (l:list A) len n d,
  length l = len + n ->
  map (fun x : nat => nth x l d) (seq n len) = (skipn n l).

Lemma skipn_nil_length : forall A n (l : list A),
  skipn n l = nil -> length l <= n.

Lemma firstn_map_nth :
  forall A d n m (l:list A),
  m+n <= length l ->
  firstn n (skipn m l) = map (fun i => nth i l d) (seq m n).

Lemma firstn_seq n start len :
  firstn n (seq start len) = seq start (min n len).

Lemma skipn_seq n start len :
  skipn n (seq start len) = seq (start+n) (len-n).

Lemma in_seq_iff : forall x len start,
  In x (seq start len) <-> start <= x < start+len.

Lemma nth_map_cst :
  forall {A B} (l:list A) n (d:B), nth n (map (fun _ => d) l) d = d.

Lemma nth_S_tl A (l : list A) d n :
  nth n (tl l) d = nth (S n) l d.

Lemma map_ext2 : forall {A B} (f g : A -> B) l,
  (forall a : A, In a l -> f a = g a) -> map f l = map g l.

Lemma map_nth2
  (A B : Type) (f : A -> B) (l : list A) b d n :
  (f d) = b ->
  nth n (map f l) b = f (nth n l d).

Lemma length_plus_ex {A} n1 n2 (l : list A):
  length l = n1 + n2 ->
  exists l1, exists l2,
    length l1 = n1 /\ length l2 = n2 /\ l = l1 ++ l2.

Lemma tl_app : forall A (l1 l2 : list A),
  l1 <> nil ->
  tl (l1 ++ l2) = tl l1 ++ l2.

Lemma map_seq_nth : forall A B (l : list A) (g : A -> B) d, 
 map (fun n => g (nth n l d)) (seq 0 (length l)) = map g l.

Lemma map_seq_shift : forall A m (f : nat -> A) n,
n <> 0 ->
map f (seq 0 m) = map (fun x => f (x - n)%nat) (seq n m).

Lemma map_seq_nth_safe : forall A B (l : list A) (g : A -> B) d m, 
 map (fun n => g (nth (n - m) l d)) (seq m (length l)) = map g l.

Lemma seq_app : forall x y z,
  seq x y ++ seq (x + y) z = seq x (y + z).

Definition andl {A} (P:A->Prop)(l:list A) : Prop :=
  fold_right (fun a res => P a /\ res) True l.

Lemma forall_andl A (P:A->Prop) l :
  (forall x, In x l -> P x) <-> andl P l.

Fixpoint fun_power {A:Type}(n:nat)(f:A->A)(x:A) : A :=
  match n with
  | 0 => x
  | S n' => f (fun_power n' f x)
  end.

Lemma fun_power_minus_S : forall A (f:A->A) x m n,
  m < n -> f (fun_power (n - S m) f x) = fun_power (n - m) f x.

Definition mod2 (n : nat) : nat :=
  n - 2 * div2 n.

Fixpoint power (m n:nat) : nat :=
 match n with
 | 0 => 1
 | S n' => m * power m n'
 end.

Lemma power_le_l : forall a b n, a <= b -> power a n <= power b n.

Definition plusl (l:list nat) : nat :=
  fold_right plus 0 l.

Lemma plusl_cons : forall x l, plusl (x :: l) = x + plusl l.

Lemma plusl_app l1 l2 :
  plusl (l1++l2) = plusl l1 + plusl l2.

Lemma plusl_compat : forall A (l : list A) f g,
  (forall x, In x l -> f x <= g x) ->
  plusl (map f l) <= plusl (map g l).

Definition multl (l:list nat) : nat :=
  fold_right mult 1 l.

Lemma multl_app l1 l2 :
  multl (l1++l2) = multl l1 * multl l2.

Lemma multl_plus_distr_l n l :
  n * plusl l = plusl (map (fun m => n * m) l).

Fixpoint maxl l := 
  match l with
    | nil => 0
    | a :: l' => max a (maxl l')
  end.

Lemma in_le_maxl x l : In x l -> x <= maxl l.

Lemma maxl_map A l (f : A -> nat) n :
  (forall x, In x l -> f x = n) ->
  maxl (map f l) <= n.

Lemma maxl_le l e :
  maxl l <= e ->
  (forall x, In x l -> x <= e).

Lemma maxl_eq_le l e :
  maxl l = e ->
  (forall x, In x l -> x <= e).

Lemma maxl_eq_le3 e1 e2 e3 e :
  maxl [e1; e2; e3] = e ->
  e1 <= e /\ e2 <= e /\ e3 <= e.

Lemma maxl_le3 e1 e2 e3 e :
  maxl [e1; e2; e3] <= e ->
  e1 <= e /\ e2 <= e /\ e3 <= e.

Lemma maxl_bound e1 e2 e3 e :
  e1 <= e -> e2 <= e -> e3 <= e ->
  maxl [e1; e2; e3] <= e.

Lemma maxl_bound_in l e :
  (forall e', In e' l -> e' <= e) -> maxl l <= e.

Lemma maxl_cons l n : n <= maxl (n :: l).

Lemma le_maxl_cons l m n :
 n <= maxl l -> n <= maxl (m :: l).

Lemma nth_maxl_bound : forall A (l : list A) (m:A->nat) d i,
  m d = 0 -> m (nth i l d) <= maxl (map m l).

Lemma length_hd_app A (l1 l2 : list (list A)) :
  length (hd nil l1) <= length (hd nil (l1 ++ l2)).

Lemma length_nth_app A (l1 l2 : list (list A)) i :
  length (nth i l1 nil) <= length (nth i (l1 ++ l2) nil).

Lemma maxl_nth l :
  exists i, maxl l = nth i l 0.

Lemma maxl_map_0 A l (f : A -> nat)  :
  (forall x, In x l -> (f x) = 0) ->
  maxl (map f l) = 0.

Lemma maxl_le_plusl : forall l, maxl l <= plusl l.

Lemma forallb_forall_conv :
  forall A f (l:list A), forallb f l = false <-> (exists x, In x l /\ f x = false).

Lemma forallb_nth : forall A (l : list A) (p : A -> bool) n d,
  p d = true ->
  forallb p l = true ->
  p (nth n l d) = true.

Lemma forallb_hd : forall A (l : list A) (p : A -> bool) d,
  forallb p l = true ->
  p d = true ->
  p (hd d l) = true.

Lemma forallb_tl : forall A (l : list A) (p : A -> bool),
  forallb p l = true ->
  forallb p (tail l) = true.

Lemma forallb_map : forall A B (l : list A) (p : B -> bool) (f : A -> B),
  (forall x, In x l -> p (f x) = true) ->
  forallb p (map f l) = true.

Fixpoint repeat {A:Type}(n:nat)(x:A) : list A :=
  match n with
  | 0 => nil
  | S n' => x :: repeat n' x
  end.

Lemma firstn_repeat_le :
  forall A (x:A) m n,
  m <= n ->
  firstn m (repeat n x) = repeat m x.

Lemma in_repeat_eq : forall A (x y:A) n, In x (repeat n y) -> x=y.

Lemma map_repeat : forall A B (f:A->B) n x, map f (repeat n x) = repeat n (f x).

Lemma multl_repeat_power : forall n x, multl (repeat n x) = power x n.

Lemma length_repeat : forall A n (x:A), length (repeat n x) = n.

Lemma nth_repeat :
  forall A n (x:A) d i, i < n ->
  nth i (repeat n x) d = x.

Definition move_forward {A}(i j:nat)(l:list A)(d:A) : list A :=
  firstn i l ++ firstn j (skipn (S i) l) ++ (nth i l d :: skipn (S (i+j)) l).

Lemma move_forward_map A B d1 d2 i j (f:A->B) l :
  f d1 = d2 ->
  move_forward i j (map f l) d2 = map f (move_forward i j l d1).

Lemma length_move_forward :
  forall A i j (l:list A) d, i+j < length l -> length (move_forward i j l d) = length l.

Lemma in_move_forward_iff :
  forall A x i j d (l:list A), i < length l -> (In x (move_forward i j l d) <-> In x l).

Lemma firstn_simpl : forall A B (l : list A) (l2 : list B),
 length l2 = length l ->
 firstn (length l2) l = l.

Lemma firstn_app2 : forall (A : Type) (l l' : list A) n, 
 length l = n -> firstn n (l ++ l') = l .

Lemma firstn_firstn : forall A n (l : list A),
 firstn n (firstn n l) = firstn n l.

Lemma In_firstn : forall A n a (l : list A),
  In a (firstn n l) -> In a l. *)
(* BellantoniCook.MultiPoly:
Require Import Arith List.
Require Import BellantoniCook.Lib.

Definition pow : Type := (nat*nat)%type.
Definition mon : Type := (nat * list pow)%type.
Definition pol : Type := (nat * list mon)%type.

Definition peval_pow (xn:pow)(l:list nat) : nat :=
  power (nth (fst xn) l 0) (snd xn).

Definition peval_mon (m:mon)(l:list nat) : nat :=
  (fst m) * multl (map (fun x => peval_pow x l) (snd m)).

Definition peval (p:pol)(l:list nat) :=
  plusl (map (fun m => peval_mon m l) (snd p)).

Lemma peval_parity : forall ar p l,
  peval (ar, snd p) l = peval p l.

Lemma peval_pow_monotonic : forall xn l1 l2, 
  (forall i, nth i l1 0 <= nth i l2 0) ->
  peval_pow xn l1 <= peval_pow xn l2.

Lemma peval_mon_monotonic : forall m l1 l2, 
  (forall i, nth i l1 0 <= nth i l2 0) ->
  peval_mon m l1 <= peval_mon m l2.

Lemma peval_monotonic : forall p l1 l2, 
  (forall i, nth i l1 0 <= nth i l2 0) ->
  peval p l1 <= peval p l2.

Lemma peval_nth i pl p l :
  peval (nth i pl p) l =
  nth i (map (fun p => peval p l) pl) (peval p l).

Notation parity := (@fst nat (list mon)).

Definition pWF_pow (ar:nat)(xn:pow) : Prop :=
  fst xn < ar.

Definition pWF_mon (ar:nat)(m:mon) : Prop :=
  andl (pWF_pow ar) (snd m).

Definition pWF' (ar:nat)(ml:list mon) : Prop :=
  andl (pWF_mon ar) ml.

Definition pWF (p:pol) : Prop :=
  pWF' (fst p) (snd p).

Lemma pWF_mon_le : forall ar1 ar2 m,
  ar1 <= ar2 -> 
  pWF_mon ar1 m -> pWF_mon ar2 m.

Lemma pWF'_le ar1 ar2 ml :
  ar1 <= ar2 -> pWF' ar1 ml -> pWF' ar2 ml.

Lemma pWF_mon_app : forall ar a1 xl1 a2 xl2,
  pWF_mon ar (a1, xl1) -> pWF_mon ar (a2, xl2) ->
  pWF_mon ar (a1*a2, xl1++xl2).

Lemma pWF'_app ar ml1 ml2 :
  pWF' ar ml1 -> pWF' ar ml2 -> pWF' ar (ml1++ml2).

Lemma pWF_nth i pl p0 :
  andl pWF pl -> pWF p0 -> pWF (nth i pl p0).

Lemma parity_mon_correct : forall ar m l l1 l2,
  pWF_mon ar m -> length l = ar -> peval_mon m (l++l1) = peval_mon m (l++l2).

Lemma parity_correct : forall p l l1 l2,
  pWF p -> length l = parity p -> peval p (l++l1) = peval p (l++l2).

Definition pcst (ar a:nat) : pol :=
  (ar, [(a,nil)]).

Lemma parity_pcst ar a :
  parity (pcst ar a) = ar.

Lemma pWF_pcst ar a : pWF (pcst ar a).

Lemma pcst_correct : forall ar k l, peval (pcst ar k) l = k.

Definition pproj (ar i:nat) : pol :=
  (ar,[(1,[(i,1)])]).

Lemma parity_pproj n i :
  parity (pproj n i) = n.

Lemma pWF_pproj ar i : i < ar -> pWF (pproj ar i).

Lemma pproj_correct : forall ar i l,
 peval (pproj ar i) l = nth i l 0.

Definition pscalar_mon (n:nat)(m:mon) : mon :=
  (n * fst m, snd m).

Definition pscalar (n:nat)(p:pol) : pol :=
  (fst p, map (pscalar_mon n) (snd p)).

Lemma parity_pscalar n p :
  parity (pscalar n p) = parity p.

Lemma pWF_pscalar : forall n p,
  pWF p -> pWF (pscalar n p).

Lemma pscalar_mon_correct : forall n m l,
  peval_mon (pscalar_mon n m) l = n * peval_mon m l.

Lemma map_pscalar_mon n ml l :
  plusl (map (fun m => peval_mon (pscalar_mon n m) l) ml) =
  n * plusl (map (fun m => peval_mon m l) ml).

Lemma pscalar_correct : forall n p l,
  peval (pscalar n p) l = n * peval p l.

Definition pplus (p1 p2:pol) : pol :=
  (max (fst p1) (fst p2), snd p1 ++ snd p2).

Lemma parity_pplus : forall p1 p2,
  parity (pplus p1 p2) = max (parity p1) (parity p2).

Lemma pWF_pplus : forall p1 p2,
  pWF p1 -> pWF p2 -> pWF (pplus p1 p2).

Lemma pplus_correct : forall p1 p2 l,
 peval (pplus p1 p2) l = peval p1 l + peval p2 l.

Definition pplusl (pl:list pol) : pol :=
  fold_right pplus (pcst 0 0) pl.

Lemma parity_pplusl : forall pl,
  parity (pplusl pl) = maxl (map parity pl).

Definition pWF_pplusl : forall pl,
  andl pWF pl -> pWF (pplusl pl).

Lemma pplusl_correct : forall pl l,
  peval (pplusl pl) l = plusl (map (fun p => peval p l) pl).

Lemma peval_nth_pplus : forall pl l i n,
  peval (nth i pl (pcst n 0)) l <=
  peval (pplusl pl) l.

Definition pmult_mon (m12:mon*mon) : mon :=
  (fst (fst m12) * fst (snd m12), snd (fst m12) ++  snd (snd m12)).

Definition pmult (p1 p2:pol) : pol :=
  (max (fst p1) (fst p2), map pmult_mon (list_prod (snd p1) (snd p2))).

Lemma parity_pmult : forall p1 p2,
  parity (pmult p1 p2) = max (parity p1) (parity p2).

Lemma pWF_pmult_mon : forall ar1 m1 ar2 m2,
  pWF_mon ar1 m1 -> pWF_mon ar2 m2 ->
  pWF_mon (max ar1 ar2) (pmult_mon (m1, m2)).

Lemma pWF_pmult : forall p1 p2,
  pWF p1 -> pWF p2 -> pWF (pmult p1 p2).

Lemma pmult_mon_correct : forall m12 l,
  peval_mon (pmult_mon m12) l =
  peval_mon (fst m12) l * peval_mon (snd m12) l.

Lemma map_pmult_mon : forall m1 ml2 l,
 map (fun m2 => peval_mon (pmult_mon (m1, m2)) l) ml2 =
 map (fun m2 => peval_mon m1 l * peval_mon m2 l) ml2.

Lemma pmult_correct : forall p1 p2 l,
 peval (pmult p1 p2) l = peval p1 l * peval p2 l.

Definition pmultl (pl:list pol) : pol :=
  fold_right pmult (pcst 0 1) pl.

Lemma parity_pmultl pl :
  parity (pmultl pl) = maxl (map parity pl).

Definition pWF_pmultl pl :
  andl pWF pl -> pWF (pmultl pl).

Lemma pmultl_correct pl l :
  peval (pmultl pl) l = multl (map (fun p => peval p l) pl).

Fixpoint ppower (p:pol)(n:nat) : pol :=
  match n with
  | 0 => pcst (fst p) 1
  | S n' => pmult p (ppower p n')
  end.

Lemma parity_ppower p n :
  parity (ppower p n) = parity p.

Lemma pWF_ppower p n :
  pWF p -> pWF (ppower p n).

Lemma ppower_correct p n l :
  peval (ppower p n) l = power (peval p l) n.

Definition pcomp_pow' (xn:pow)(pl:list pol) : pol :=
  ppower (nth (fst xn) pl (pcst 0 0)) (snd xn).

Definition pcomp_pow (xn:pow)(pl:list pol) : pol :=
  (maxl (map parity pl), snd (pcomp_pow' xn pl)).

Definition pcomp_mon' (m:mon)(pl:list pol) : pol :=
  pscalar (fst m) (pmultl (map (fun xn => pcomp_pow xn pl) (snd m))).

Definition pcomp_mon (m:mon)(pl:list pol) : pol :=
  (maxl (map parity pl), snd (pcomp_mon' m pl)).

Definition pcomp' (p:pol)(pl:list pol) : pol :=
  pplusl (map (fun m => pcomp_mon m pl) (snd p)).

Definition pcomp (p:pol)(pl:list pol) : pol :=
  (maxl (map parity pl), snd (pcomp' p pl)).

Lemma parity_pcomp_pow : forall xn pl,
  parity (pcomp_pow xn pl) = maxl (map parity pl).

Lemma map_parity_pcomp_pow xl pl :
  map (fun xn => parity (pcomp_pow xn pl)) xl = map (fun _ => maxl (map parity pl)) xl.

Lemma parity_pcomp_mon' : forall m pl,
  parity (pcomp_mon' m pl) <= maxl (map parity pl).

Lemma parity_pcomp_mon : forall m pl,
  parity (pcomp_mon m pl) = maxl (map parity pl).

Lemma parity_pcomp p pl :
  parity (pcomp p pl) = maxl (map parity pl).

Lemma pWF_pcomp_pow' : forall xn pl,
  andl pWF pl -> pWF (pcomp_pow' xn pl).

Lemma pWF_pcomp_pow : forall xn pl,
  andl pWF pl -> pWF (pcomp_pow xn pl).

Lemma pWF_pcomp_mon' : forall m pl,
  andl pWF pl -> pWF (pcomp_mon' m pl).

Lemma pWF_pcomp_mon : forall m pl,
  andl pWF pl -> pWF (pcomp_mon m pl).

Lemma pWF_pcomp' : forall p pl,
  andl pWF pl -> pWF (pcomp' p pl).

Lemma pWF_pcomp : forall p pl,
  andl pWF pl -> pWF (pcomp p pl).

Lemma pcomp_pow'_correct : forall xn pl l,
  peval (pcomp_pow' xn pl) l =
  power (peval (nth (fst xn) pl (pcst 0 0)) l) (snd xn).

Lemma pcomp_pow_correct xn pl l :
  peval (pcomp_pow xn pl) l =
  power (peval (nth (fst xn) pl (pcst 0 0)) l) (snd xn).

Lemma pcomp_mon'_correct : forall m pl l,
  peval (pcomp_mon' m pl) l = peval_mon m (map (fun p => peval p l) pl).

Lemma pcomp_mon_correct : forall m pl l,
  peval (pcomp_mon m pl) l = peval_mon m (map (fun p => peval p l) pl).

Lemma pcomp'_correct : forall p pl l,
  peval (pcomp' p pl) l = peval p (map (fun p' => peval p' l) pl).

Lemma pcomp_correct p pl l :
  peval (pcomp p pl) l = peval p (map (fun p => peval p l) pl).

Definition pshift_pow (xn:pow) : pow :=
  (S (fst xn), snd xn).

Definition pshift_mon (m:mon) : mon :=
  (fst m, map pshift_pow (snd m)).

Definition pshift (p:pol) : pol :=
  (S (fst p), map pshift_mon (snd p)).

Lemma parity_pshift : forall p,
  parity (pshift p) = S (parity p).

Lemma pWF_pshift_mon : forall ar m,
  pWF_mon ar m -> pWF_mon (S ar) (pshift_mon m).

Lemma pWF_pshift : forall p, pWF p -> pWF (pshift p).

Lemma pshift_pow_correct : forall xn l,
  peval_pow (pshift_pow xn) l = peval_pow xn (tl l).

Lemma pshift_mon_correct : forall m l,
  peval_mon (pshift_mon m) l = peval_mon m (tl l).

Lemma pshift_correct : forall p l,
  peval (pshift p) l = peval p (tl l).

Definition psum (start len : nat) : pol :=
  pplus (pcst (start+len) 0) (pplusl (map (pproj (start+len)) (seq start len))).

Lemma psum_correct start len l :
  peval (psum start len) l = 
  plusl (map (fun i => nth i l 0) (seq start len)).

Lemma pWF_psum start len : pWF (psum start len).

Lemma parity_psum start len : 
  parity (psum start len) = start + len.

Ltac pWF :=
  match goal with
  | |- pWF (pcst _ _) => apply pWF_pcst
  | |- pWF (pproj _ _) => apply pWF_pproj; try omega
  | |- pWF (pscalar _ _) => apply pWF_pscalar; pWF
  | |- pWF (pplus _ _) => apply pWF_pplus; pWF
  | |- pWF (pplusl _) => apply pWF_pplusl; rewrite <- forall_andl; intros; pWF
  | |- pWF (pmult _ _) => apply pWF_pmult; pWF
  | |- pWF (pmultl _) => apply pWF_pmultl; rewrite <- forall_andl; intros; pWF
  | |- pWF (ppower _ _) => apply pWF_ppower; pWF
  | |- pWF (pcomp _ _) => apply pWF_pcomp; rewrite <- forall_andl; intros; pWF
  | |- pWF (pshift _) => apply pWF_pshift; pWF
  | |- pWF (psum _ _) => apply pWF_psum
  | |- _ => idtac
  end.

Definition deg_mon (m:mon) : nat :=
  plusl (map (@snd _ _) (snd m)).

Definition deg (p:pol) : nat :=
  maxl (map deg_mon (snd p)). *)
(* BellantoniCook.Cobham:
Require Import Bool Arith List.
Require Import BellantoniCook.Lib BellantoniCook.Bitstring BellantoniCook.MultiPoly.

Inductive Cobham : Type :=
| Zero : Cobham
| Proj : nat -> nat -> Cobham
| Succ : bool -> Cobham
| Smash : Cobham
| Rec  : Cobham -> Cobham -> Cobham -> Cobham -> Cobham
| Comp : nat -> Cobham -> list Cobham -> Cobham.

Definition Rec2 g h j := Rec g h h j.

Lemma Cobham_ind2' :
  forall P : Cobham -> Prop,
  forall Q : list Cobham -> Prop,
  Q nil ->
  (forall e l, P e -> Q l -> Q (e :: l)) ->
  P Zero ->
  (forall n i, P (Proj n i)) ->
  (forall b, P (Succ b)) ->
  P Smash ->
  (forall j g h0 h1, P j -> P g -> P h0 -> P h1 -> P (Rec j g h0 h1)) ->
  (forall n h l, P h -> Q l -> P (Comp n h l)) ->
  forall e, P e.

Lemma Cobham_ind2 :
  forall P : Cobham -> Prop,
  P Zero ->
  (forall n i, P (Proj n i)) ->
  (forall b, P (Succ b)) ->
  P Smash ->
  (forall j g h0 h1, P j -> P g -> P h0 -> P h1 -> P (Rec j g h0 h1)) ->
  (forall n h l, P h -> (forall e, In e l -> P e) ->
    P (Comp n h l)) ->
  forall e, P e.

Inductive Arity : Set :=
| error_Rec : Arity -> Arity -> Arity -> Arity -> Arity
| error_Comp : Arity -> list Arity -> Arity
| error_Proj : nat -> nat -> Arity
| ok_arity : nat -> Arity.

Definition arity_eq (a1 a2 : Arity) :=
  match a1, a2 with
    | ok_arity n1, ok_arity n2 => beq_nat n1 n2
    | _, _ => false
  end.

Lemma arity_eq_true x1 x2 :
  arity_eq x1 x2 = true -> x1 = x2.

Lemma arity_eq_refl : forall n, arity_eq (ok_arity n) (ok_arity n) = true.

Fixpoint arity (e : Cobham) : Arity :=
  match e with
    | Zero => ok_arity 0
    | Proj n j => if leb (S j) n 
      then ok_arity n else error_Proj n j 
    | Succ _ => ok_arity 1
    | Smash => ok_arity 2
    | Rec g h0 h1 j => 
      match arity g, arity h0, arity h1, arity j with
        | ok_arity gn, ok_arity h0n, ok_arity h1n, ok_arity jn =>
          if beq_nat (S (S gn)) h0n && 
             beq_nat h1n h0n &&
             beq_nat (S jn) h1n 
            then ok_arity jn 
            else error_Rec (ok_arity gn) (ok_arity h0n) 
              (ok_arity h1n) (ok_arity jn)
        | ag, ah0, ah1, aj => error_Rec ag ah0 ah1 aj 
      end
    | Comp n h l => 
      match arity h, map arity l with
        | ok_arity nh, al => 
          if beq_nat nh (length l) &&
            forallb (fun e => arity_eq e (ok_arity n)) al then
              ok_arity n else error_Comp (ok_arity nh) al
        | e , le => error_Comp e le 
      end
  end.

Lemma Cobham_ind_inf' :
  forall (P : nat -> Cobham -> Prop),
  forall Q : nat -> list Cobham -> Prop,
  (forall n, Q n nil) ->
  (forall e n l, P n e -> Q n l -> Q n (e :: l)) ->
  P 0 Zero ->
  (forall n i, i < n  ->  P n (Proj n i)) ->
  (forall b, P 1 (Succ b)) ->
  (P 2 Smash) ->
  (forall n g h0 h1 j, 
    arity g = ok_arity n ->
    arity h0 = ok_arity (S (S n)) ->
    arity h1 = ok_arity (S (S n)) ->
    arity j = ok_arity (S n) ->
    P n g -> 
    P (S (S n)) h0 -> 
    P (S (S n)) h1 -> 
    P (S n) j -> 
    P (S n) (Rec g h0 h1 j)) ->
  (forall n h rl, 
    arity h = ok_arity (length rl)  ->
    (forall e, In e rl -> arity e = ok_arity n) ->
    P (length rl)  h -> 
    Q n rl ->
    P n (Comp n h rl)) ->
  forall e n , arity e = ok_arity n -> P n e.

Lemma Cobham_ind_inf :
  forall (P : nat -> Cobham -> Prop),
  P 0 Zero ->
  (forall n i, i < n  ->  P n (Proj n i)) ->
  (forall b, P 1 (Succ b)) ->
  (P 2 Smash) ->
  (forall n g h0 h1 j, 
    arity g = ok_arity n ->
    arity h0 = ok_arity (S (S n)) ->
    arity h1 = ok_arity (S (S n)) ->
    arity j = ok_arity (S n) ->
    P n g -> 
    P (S (S n)) h0 -> 
    P (S (S n)) h1 -> 
    P (S n) j ->
    P (S n) (Rec g h0 h1 j)) ->
  (forall n h rl, 
    arity h = ok_arity (length rl)  ->
    (forall e, In e rl -> arity e = ok_arity n) ->
    P (length rl) h -> 
    (forall r, In r rl -> P n r) ->
    P n (Comp n h rl)) ->
  forall e n , arity e = ok_arity n -> P n e.

Fixpoint sem_Rec (sem_g sem_h0 sem_h1 : list bs -> bs) (v : bs) (vl : list bs) : bs :=
  match v with
    | nil => sem_g vl
    | b::v' => if b then 
      sem_h1 (v' :: (sem_Rec sem_g sem_h0 sem_h1 v' vl) :: vl)
      else sem_h0 (v' :: (sem_Rec sem_g sem_h0 sem_h1 v' vl) :: vl)
  end.

Fixpoint smash' (x y : bs) :=
  match x with 
    | nil => y
    | _ :: x' => false :: smash' x' y
  end.

Lemma length_smash' x y :
  length (smash' x y) = length x + length y.

Fixpoint smash_bs (x y : bs) : bs :=
  match x with
    | nil => true :: nil
    | _ :: x' => smash' y (smash_bs x' y)
  end.

Lemma length_smash x y :
  length (smash_bs x y) = 1 + length x * length y.

Fixpoint Sem (e: Cobham) (vl:list bs) : bs :=
  match e with
  | Zero => nil
  | Proj n j => nth j vl nil
  | Succ b => b :: hd nil vl
  | Smash => smash_bs (hd nil vl) (hd nil (tl vl))
  | Rec g h0 h1 j =>  
    sem_Rec (Sem g) (Sem h0) (Sem h1) (hd nil vl) (tail vl)
  | Comp _ h l => Sem h (List.map (fun e => Sem e vl) l)
  end.

Lemma simpl_Rec : forall g h0 h1 j l,
  Sem (Rec g h0 h1 j) l = sem_Rec (Sem g) (Sem h0) (Sem h1) (hd nil l) (tl l).

Lemma Sem_add_zero : forall e n,
  arity e = ok_arity n ->
  forall l,
  length l <= n ->
  Sem e l = Sem e (l ++ (map (fun e => nil) (seq 0 (n - length l)))).

Lemma Sem_remove_zero : forall e n,
  arity e = ok_arity n ->
  forall l l',  n = length l ->
    Sem e l = Sem e (l ++ l').

Fixpoint rec_bounded' (e : Cobham) : Prop :=
  match e with
    | Rec g h0 h1 j =>
      rec_bounded' j  /\ 
      rec_bounded' g /\ 
      rec_bounded' h0 /\ 
      rec_bounded' h1 /\
      (match (arity e) with
         | ok_arity n => forall l, length l = n ->
           length (Sem e l) <= length (Sem j l)
        | _ => True 
       end)
    | Comp n h l => rec_bounded' h /\
        andl rec_bounded' l
    | _ => True
  end.

Fixpoint rec_bounded (e : Cobham) : Prop :=
  match e with
    | Rec g h0 h1 j =>
      rec_bounded j  /\ 
      rec_bounded g /\ 
      rec_bounded h0 /\ 
      rec_bounded h1 /\
      (forall l, 
        length (Sem e l) <= length (Sem j l))
    | Comp n h l => rec_bounded h /\
        andl rec_bounded l
    | _ => True
  end.

Lemma rec_bounded_spec (e : Cobham) :
  rec_bounded e -> rec_bounded' e.

Lemma rec_bounded'_spec : forall (e : Cobham) n,
  arity e = ok_arity n ->
  rec_bounded' e -> 
  rec_bounded e.

Fixpoint poly_Cobham (e : Cobham) :=
  match e with
    | Zero => pcst 0 0
    | Proj n i => pproj n i
    | Succ b => pplus (pcst 0 1) (pproj 1 0)
    | Smash => pplus (pcst 0 1) (pmult (pproj 2 0) (pproj 2 1))
    | Rec g h0 h1 j => poly_Cobham j
    | Comp n h l => 
      pplus (pcst n 0) 
      (pcomp (poly_Cobham h) (map poly_Cobham l))
  end.

Lemma parity_poly_Cobham : forall (e : Cobham) n,
  arity e = ok_arity n ->
  parity (poly_Cobham e) = n.

Lemma pWF_poly_Cobham : forall (e : Cobham) n,
  arity e = ok_arity n ->
  pWF (poly_Cobham e).

Lemma poly_Cobham_correct : forall (e : Cobham) xl,
  rec_bounded e ->  
  length (Sem e xl) <= 
  peval (poly_Cobham e) (map (@length _) xl). *)
(* BellantoniCook.CobhamLib:
Require Import Arith List.
Require Import BellantoniCook.Lib BellantoniCook.Cobham.

Definition Zero_e (n:nat) : Cobham :=
  Comp n Zero nil.

Lemma arity_Zero n : arity (Zero_e n) = ok_arity n.

Lemma rec_bounded_Zero n : 
  rec_bounded (Zero_e n).

Definition One_e (n:nat) : Cobham :=
  Comp n (Comp 0 (Succ true) [Zero]) nil.

Lemma arity_One n : arity (One_e n) = ok_arity n.

Lemma rec_bounded_One n :
  rec_bounded (One_e n).

Definition App_e : Cobham :=
  Rec (Proj 1 0)
  (Comp 3 (Succ false) [Proj 3 1])
  (Comp 3 (Succ true) [Proj 3 1])
  (Comp 2 Smash [Comp 2 (Succ true) [Proj 2 0]; Comp 2 (Succ true) [Proj 2 1] ]).

Lemma arity_App : arity App_e = ok_arity 2.

Lemma rec_bounded_App : rec_bounded App_e.

Lemma App_correct : forall l,
  Sem App_e l = hd nil l ++ hd nil (tl l).

Opaque App_e.

Definition Rev_e : Cobham :=
  Rec
    Zero
    (Comp 2 App_e [Proj 2 1; Comp 2 (Succ false) [Zero_e 2]])
    (Comp 2 App_e [Proj 2 1; Comp 2 (Succ true) [Zero_e 2]])
    (Proj 1 0).

Lemma arity_Rev : 
  arity Rev_e = ok_arity 1.

Lemma rec_bounded_Rev :
  rec_bounded Rev_e.

Lemma Rev_correct l :
  Sem Rev_e l = List.rev (hd nil l).

Definition RemoveLSZ_e : Cobham :=
  Rec
    Zero
    (Proj 2 1)
    (Comp 2 (Succ true) [Proj 2 0])
    (Proj 1 0).

Lemma arity_RemoveLSZ : 
  arity RemoveLSZ_e = ok_arity 1.

Lemma rec_bounded_RemoveLSZ :
  rec_bounded RemoveLSZ_e.

Lemma RemoveLSZ_app u v l :
  Sem RemoveLSZ_e ((u++v)::l) =
  match Sem RemoveLSZ_e (u::l) with
  | nil => Sem RemoveLSZ_e (v::l)
  | u' => u'++v
  end.

Definition Cond : Cobham :=
  Rec (Proj 3 0) (Proj 5 4) (Proj 5 3) (
    Comp 4 Smash [
      Comp 4 (Succ true) [Proj 4 1];
      Comp 4 Smash [
        Comp 4 (Succ true) [Proj 4 2];
        Comp 4 (Succ true) [Proj 4 3]
      ]
    ]
  ).

Lemma arity_Cond : arity Cond = ok_arity 4.

Lemma rec_bounded_Cond : rec_bounded' Cond.

Lemma Cond_correct : forall l,
  Sem Cond l =
  match hd nil l with
  | nil => hd nil (tl l)
  | true::_ => hd nil (tl (tl l))
  | false::_ => hd nil (tl (tl (tl l)))
  end. *)
(* BellantoniCook.CobhamUnary:
Require Import Arith List.
Require Import BellantoniCook.Lib BellantoniCook.MultiPoly BellantoniCook.Cobham BellantoniCook.CobhamLib.

Lemma Zero_correct n l: 
  length (Sem (Zero_e n) l) = 0.

Lemma One_correct n l: 
  length (Sem (One_e n) l) = 1.

Definition Succ_e : Cobham :=
  Comp 1 (Succ true) [Proj 1 0].

Lemma arity_Succ : arity Succ_e = ok_arity 1.

Lemma rec_bounded_Succ :
  rec_bounded Succ_e.

Lemma Succ_correct l : 
  length (Sem Succ_e l) = S (length (Sem (Proj 1 0) l)).

Opaque Succ_e.

Fixpoint Nat_e (n:nat) : Cobham :=
  match n with
    | 0 => Zero
    | S n' => Comp 0 Succ_e [Nat_e n']
  end.

Lemma arity_Nat n : arity (Nat_e n) = ok_arity 0.

Lemma rec_bounded_Nat n :
  rec_bounded (Nat_e n).

Lemma Nat_correct : forall n l,
  length (Sem (Nat_e n) l) = n.

Notation Plus_e := App_e.

Notation arity_Plus := arity_App.

Notation rec_bounded_Plus := rec_bounded_App.

Lemma Plus_correct : forall l,
  length (Sem Plus_e l) = length (hd nil l) + length (hd nil (tl l)).

Opaque Plus_e.

Fixpoint Plusl_e (ar:nat)(el:list Cobham) : Cobham :=
  match el with
    | nil => Zero_e ar
    | e' :: el' => Comp ar Plus_e [e'; Plusl_e ar el']
  end. 

Lemma arity_Plusl ar el : 
  andl (fun e => arity e = ok_arity ar) el ->
  arity (Plusl_e ar el) = ok_arity ar.

Lemma rec_bounded_Plusl ar el :
  andl rec_bounded el -> rec_bounded (Plusl_e ar el).

Lemma Plusl_correct : forall ar el l,
  length (Sem (Plusl_e ar el) l) = plusl (map (fun e => length (Sem e l)) el).

Opaque Plusl_e.

Definition Mult_e : Cobham :=
  Rec2
  (Zero_e 1)
  (Comp 3 Plus_e [Proj 3 1; Proj 3 2])
  (Comp 2 Smash [
    One_e 2;
    Comp 2 Smash [Comp 2 (Succ true) [Proj 2 0]; Comp 2 (Succ true) [Proj 2 1] ] ] ).

Lemma arity_Mult : arity Mult_e = ok_arity 2.

Lemma rec_bounded_Mult : rec_bounded Mult_e.

Lemma Mult_correct : forall l,
  length (Sem Mult_e l) = length (hd nil l) * length (hd nil (tl l)).

Opaque Mult_e.

Fixpoint Multl_e (ar:nat)(el:list Cobham) : Cobham :=
  match el with
    | nil => One_e ar
    | e' :: el' => Comp ar Mult_e [e'; Multl_e ar el']
  end. 

Lemma arity_Multl ar el : 
  andl (fun e => arity e = ok_arity ar) el ->
  arity (Multl_e ar el) = ok_arity ar.

Lemma rec_bounded_Multl ar el :
  andl rec_bounded el -> rec_bounded (Multl_e ar el).

Lemma Multl_correct : forall ar el l,
  length (Sem (Multl_e ar el) l) = 
  multl (map (fun e => length (Sem e l)) el).

Fixpoint Power_e (n:nat) : Cobham :=
  match n with
    | 0 => One_e 1
    | S n' => Comp 1 Mult_e [Proj 1 0; Power_e n']
  end.

Lemma arity_Power n : arity (Power_e n) = ok_arity 1.

Lemma rec_bounded_Power n : rec_bounded (Power_e n).

Lemma Power_correct : forall n l,
  length (Sem (Power_e n) l) = power (length (hd nil l)) n.

Definition Poly_pow (ar:nat) (xn:pow) : Cobham :=
  Comp ar (Power_e (snd xn)) [Proj ar (fst xn)].

Lemma arity_Poly_pow : forall ar xn,
  pWF_pow ar xn -> arity (Poly_pow ar xn) = ok_arity ar.

Lemma rec_bounded_Poly_pow : forall ar xn,
  rec_bounded (Poly_pow ar xn).

Lemma Poly_pow_correct : forall ar xn l,
  length (Sem (Poly_pow ar xn) l) = peval_pow xn (map (@length _) l).

Opaque Poly_pow.

Definition Poly_mon (ar:nat)(m:mon) : Cobham :=
  Comp ar Mult_e [Comp ar (Nat_e (fst m)) nil; Multl_e ar (map (Poly_pow ar) (snd m))].

Lemma arity_Poly_mon : forall ar m,
  pWF_mon ar m ->
  arity (Poly_mon ar m) = ok_arity ar.

Lemma rec_bounded_Poly_mon : forall ar m,
  rec_bounded (Poly_mon ar m).

Lemma Poly_mon_correct : forall ar m l,
  length (Sem (Poly_mon ar m) l) = peval_mon m (map (@length _) l).

Opaque Poly_mon.

Definition Poly (p : pol) : Cobham :=
  Plusl_e (fst p) (map (Poly_mon (fst p)) (snd p)).

Lemma arity_Poly : forall p,
  pWF p ->
  arity (Poly p) = ok_arity (parity p).

Lemma rec_bounded_Poly : forall p,
  rec_bounded (Poly p).

Lemma Poly_correct : forall p l,
  length (Sem (Poly p) l) = peval p (map (@length _) l).

Opaque Poly. *)
(* BellantoniCook.BC:
Require Import Bool Arith List.
Require Import BellantoniCook.Lib BellantoniCook.Bitstring BellantoniCook.MultiPoly.

Inductive BC : Set :=
| zero : BC
| proj : nat -> nat -> nat -> BC
| succ : bool -> BC
| pred : BC
| cond : BC
| rec : BC -> BC -> BC -> BC
| comp : nat -> nat -> BC -> list BC -> list BC -> BC.  

Lemma BC_ind2' :
  forall P : BC -> Prop,
  forall Q : list BC -> Prop,
  Q nil ->
  (forall e l, P e -> Q l -> Q (e :: l)) ->
  P zero ->
  (forall n s i, P (proj n s i)) ->
  (forall b, P (succ b)) ->
  P pred ->
  P cond ->
  (forall g h0 h1, P g -> P h0 -> P h1 -> P (rec g h0 h1)) ->
  (forall n s h rl tl, P h -> Q rl -> Q tl ->
    P (comp n s h rl tl)) ->
  forall e, P e.

Lemma BC_ind2 :
  forall P : BC -> Prop,
  P zero ->
  (forall n s i, P (proj n s i)) ->
  (forall b, P (succ b)) ->
  P pred ->
  P cond ->
  (forall g h0 h1, P g -> P h0 -> P h1 -> P (rec g h0 h1)) ->
  (forall n s h rl tl, P h -> (forall r, In r rl -> P r) -> 
    (forall s, In s tl -> P s) ->
    P (comp n s h rl tl)) ->
  forall e, P e.

Inductive Arities : Set :=
| error_rec : Arities -> Arities -> Arities -> Arities
| error_comp : Arities -> list Arities -> list Arities -> Arities
| error_proj : nat -> nat -> nat -> Arities
| ok_arities : nat -> nat -> Arities.

Definition aeq (x y:Arities) : bool :=
  match x, y with
  | ok_arities xn xs, ok_arities yn ys => beq_nat xn yn && beq_nat xs ys
  | _, _ => false
  end.

Lemma aeq_eq (x y : Arities) :
  aeq x y = true -> x = y.

Lemma aeq_eq_conv xn yn xs ys :
  aeq (ok_arities xn xs) (ok_arities yn ys) = false -> xn <> yn \/ xs <> ys.

Fixpoint arities (e:BC) : Arities :=
  match e with
  | zero => ok_arities 0 0
  | proj n s i => 
    if leb (S i) (n + s) then ok_arities n s
      else error_proj n s i
  | succ _ => ok_arities 0 1
  | pred => ok_arities 0 1
  | cond => ok_arities 0 4
  | rec g h0 h1 =>
      match arities g, arities h0, arities h1 
        with | ok_arities gn gs, ok_arities h0n h0s, ok_arities h1n h1s =>
          if beq_nat (S gn) h0n && beq_nat h0n h1n &&
            beq_nat (S gs) h0s && beq_nat h0s h1s 
          then ok_arities h0n gs 
            else error_rec (ok_arities gn gs) (ok_arities h0n h0s) (ok_arities h1n h1s)
        | e1, e2, e3 => error_rec e1 e2 e3
      end
    | comp n s h nl sl =>
      match arities h, map arities nl, map arities sl with
      | ok_arities hn hs, anl, asl =>
        if beq_nat hn (length nl) && beq_nat hs (length sl) && 
          forallb (fun ne => aeq (arities ne) (ok_arities n 0)) nl &&
          forallb (fun se => aeq (arities se) (ok_arities n s)) sl
          then ok_arities n s
          else error_comp (ok_arities hn hs) anl asl 
      | e , anl, asl => error_comp e anl asl
      end
  end.

Definition arities2 e :=
  match arities e with
    | ok_arities n s => (n, s)
    | _ => (0, 0)
  end.

Lemma proj_arities : forall n s i, 
  i < n+s -> 
  arities (proj n s i) = ok_arities n s.

Lemma comp_arities : forall n s e nel sel,
  arities e = ok_arities (length nel) (length sel) ->
  andl (fun ne => arities ne = ok_arities n 0) nel ->
  andl (fun se => arities se = ok_arities n s) sel ->
  arities (comp n s e nel sel) = ok_arities n s.

Lemma arities_nth :
  forall l i e n s,
  (forall e, In e l -> arities e = ok_arities n s) ->
  arities e = ok_arities n s ->
  arities (nth i l e) = ok_arities n s.

Lemma BC_ind_inf' :
  forall (P : nat -> nat -> BC -> Prop),
  forall Q : nat -> nat -> list BC -> Prop,
  (forall n s, Q n s nil) ->
  (forall e n s l, P n s e -> Q n s l -> Q n s (e :: l)) ->
  P 0 0 zero ->
  (forall n s i, i < n + s ->  P n s (proj n s i)) ->
  (forall b, P 0 1 (succ b)) ->
  P 0 1 pred ->
  P 0 4 cond ->
  (forall n s g h0 h1, 
    arities g = ok_arities n s ->
    arities h0 = ok_arities (S n) (S s) ->
    arities h1 = ok_arities (S n) (S s) ->
    P n s g -> 
    P (S n) (S s) h0 -> 
    P (S n) (S s) h1 -> 
    P (S n) s (rec g h0 h1)) ->
  (forall n s h rl tl, 
    arities h = ok_arities (length rl) (length tl) ->
    (forall e, In e rl -> arities e = ok_arities n 0) ->
    (forall e, In e tl -> arities e = ok_arities n s) ->
    P (length rl) (length tl) h -> 
    Q n 0 rl -> 
    Q n s tl ->
    P n s (comp n s h rl tl)) ->
  forall e n s , arities e = ok_arities n s -> P n s e.

Lemma BC_ind_inf :
  forall (P : nat -> nat -> BC -> Prop),
  P 0 0 zero ->
  (forall n s i, i < n + s ->  P n s (proj n s i)) ->
  (forall b, P 0 1 (succ b)) ->
  P 0 1 pred ->
  P 0 4 cond ->
  (forall n s g h0 h1, 
    arities g = ok_arities n s ->
    arities h0 = ok_arities (S n) (S s) ->
    arities h1 = ok_arities (S n) (S s) ->
    P n s g -> 
    P (S n) (S s) h0 -> 
    P (S n) (S s) h1 -> 
    P (S n) s (rec g h0 h1)) ->
  (forall n s h rl tl, 
    arities h = ok_arities (length rl) (length tl) ->
    (forall e, In e rl -> arities e = ok_arities n 0) ->
    (forall e, In e tl -> arities e = ok_arities n s) ->
    P (length rl) (length tl) h -> 
    (forall r, In r rl -> P n 0 r) ->
    (forall r, In r tl -> P n s r) ->
    P n s (comp n s h rl tl)) ->
  forall e n s , arities e = ok_arities n s -> P n s e.

Fixpoint sem_rec (sem_g sem_h0 sem_h1:list bs->list bs->bs)(v:bs)(vnl vsl:list bs) :=
  match v with
    | nil => sem_g vnl vsl
    | b::v' =>
      if b then sem_h1 (v'::vnl) (sem_rec sem_g sem_h0 sem_h1 v' vnl vsl :: vsl)
      else sem_h0 (v'::vnl) (sem_rec sem_g sem_h0 sem_h1 v' vnl vsl :: vsl)
  end.

Fixpoint sem (e:BC)(vnl vsl:list bs) : bs :=
  match e with
  | zero => nil
  | proj n s j => 
    if leb (S j) n then
      nth j vnl nil
      else nth (j-n) vsl nil
  | succ b => b :: hd nil vsl
  | pred => tail (hd nil vsl)
  | cond =>
      match vsl with
      | a :: b :: c :: d :: _ => 
        match a with 
          | nil => b
          | true :: _ => c
          | false :: _ => d
        end
      | a :: b :: c :: _ => 
        match a with 
          | nil => b
          | true :: _ => c
          | false :: _ => nil
        end
      | a :: b :: _ => 
        match a with 
          | nil => b
          | _ => nil
        end
      | _ => nil
      end
  | rec g h0 h1 => sem_rec (sem g) (sem h0) (sem h1) (hd nil vnl) (tail vnl) vsl
  | comp _ _ h nl sl => 
    sem h (List.map (fun ne => sem ne vnl nil) nl) 
          (List.map (fun se => sem se vnl vsl) sl)
  end.

Lemma sem_comp :
  forall n s f nel sel nl sl, 
  sem (comp n s f nel sel) nl sl =
  sem f (map (fun ne => sem ne nl nil) nel) (map (fun se => sem se nl sl) sel).

Lemma cond_simpl_nil n s fn fc ff ft l1 l2 :
  sem fc l1 l2 = nil ->
  sem (comp n s cond nil [fc; fn; ft; ff]) l1 l2 = sem fn l1 l2.

Lemma cond_simpl_notnil n s fn fc ft ff l1 l2 :
  sem fc l1 l2 <> nil ->
  sem (comp n s cond nil [fc; fn; ft; ff]) l1 l2 = 
  match sem fc l1 l2 with
    | nil => nil 
    | true :: _ => sem ft l1 l2 
    | false :: _ => sem ff l1 l2
  end.

Lemma cond_simpl_true n s fn fc ff ft l1 l2 :
  hd false (sem fc l1 l2) = true ->
  sem (comp n s cond nil [fc; fn; ft; ff]) l1 l2 = sem ft l1 l2.

Lemma cond_simpl_false n s fn fc ff ft l1 l2 l :
  sem fc l1 l2 = false :: l ->
  sem (comp n s cond nil [fc; fn; ft; ff]) l1 l2 = sem ff l1 l2.

Lemma sem_nth :
  forall i start len f d vnl vsl,
  0 <= i < len ->
  sem (nth i (map f (seq start len)) d) vnl vsl = sem (f (i+start)) vnl vsl.

Lemma map_sem_nth :
  forall i f1 f2 vnl vsl d,
  map (fun f => sem f vnl vsl) f1 = map (fun f => sem f vnl vsl) f2 ->
  sem (nth i f1 d) vnl vsl = sem (nth i f2 d) vnl vsl.

Lemma sem_proj_S_normal :
  forall n s i f vsl vnl,
  i < n ->
  sem (proj (S n) s (S i)) (f::vnl) vsl =
  sem (proj n s i) vnl vsl.

Lemma sem_proj_S_safe :
  forall n s i f vsl vnl,
  n <= i ->
  sem (proj n (S s) (S i)) vnl (f::vsl) =
  sem (proj n s i) vnl vsl.

Lemma sem_firstn_safe :
  forall f n s vnl vsl,
  arities f = ok_arities n s ->
  sem f vnl vsl = sem f vnl (firstn s vsl).

Lemma sem_firstn_normal :
  forall f n s vnl vsl,
  arities f = ok_arities n s ->
  sem f vnl vsl = sem f (firstn n vnl) vsl.

Lemma sem_firstn :
  forall f n s vnl vsl,
  arities f = ok_arities n s ->
  sem f vnl vsl = sem f (firstn n vnl) (firstn s vsl).

Lemma sem_repeat :
  forall f vnl vsl n s,
  arities f = ok_arities n s ->
  sem f vnl vsl = sem f (vnl ++ repeat (n - length vnl) nil) (vsl ++ repeat (s - length vsl) nil).

Lemma map_sem_repeat :
  forall fl vnl vsl n s,
  (forall f, In f fl -> arities f = ok_arities n s) ->
  map (fun f => sem f vnl vsl) fl =
  map (
    fun f =>
      sem f
        (vnl ++ repeat (n - length vnl) nil)
        (vsl ++ repeat (s - length vsl) nil)
  ) fl.

Lemma map_proj_seq_normal_gen :
  forall n i vnl,
  n+i <= length vnl ->
  map (fun f : BC => sem f vnl nil) (map (proj (n+i) 0) (seq i n)) =
  firstn n (skipn i vnl).

Lemma map_proj_seq_normal :
  forall n vnl,
  map (fun f : BC => sem f vnl nil) (map (proj n 0) (seq 0 n)) =
  firstn n vnl ++ repeat (n - length vnl) nil.

Lemma map_proj_seq_safe_gen :
  forall n s i vnl vsl,
  s+i <= length vsl ->
  map (fun f : BC => sem f vnl vsl) (map (proj n (s+i)) (seq (n+i) s)) =
  firstn s (skipn i vsl).

Lemma map_proj_seq_safe :
  forall n s vnl vsl,
  map (fun f : BC => sem f vnl vsl) (map (proj n s) (seq n s)) =
  firstn s vsl ++ repeat (s - length vsl) nil.

Definition zero_e (n s:nat) : BC :=
  comp n s zero nil nil.

Lemma sem_comp_proj_normal : forall n1 n2 f1 vnl i,
n2 <> 0 -> i < n2 ->
sem (comp n1 0 (proj n2 0 i) f1 nil) vnl nil =
sem (nth i f1 (zero_e n1 0)) vnl nil.

Lemma sem_comp_proj_safe : forall n1 s1 n2 s2 f1 f2 vnl vsl i,
n2 <= i ->
sem (comp n1 s1 (proj n2 s2 i) f1 f2) vnl vsl =
sem (nth (i - n2) f2 (zero_e n1 s1)) vnl vsl.

Fixpoint poly_BC n (e : BC) : pol :=
  match e with 
    | zero => pcst 0 0
    | proj n s i => if (leb (S i) n) then pproj n i else (pcst n 0)
    | succ b => pcst 0 1
    | pred => pcst 0 0
    | cond => pcst 0 0
    | rec g h0 h1 =>
        pplus (pshift (poly_BC (n - 1) g)) 
        (pmult (pproj n 0) (pplus (poly_BC n h0) (poly_BC n h1)))
    | comp n s h rl tl =>
      (pplus (pcst n 0)
        (pplus (pcomp (poly_BC (length rl) h) (map (poly_BC n) rl ))
          (pplusl (map (poly_BC n) tl))))
  end.

Lemma arity_poly_BC : forall e n s,
  arities e = ok_arities n s ->
  parity (poly_BC n e) = n.

Lemma pWF_poly_BC : forall e n s,
  arities e = ok_arities n s -> pWF (poly_BC n e).
  
Lemma polymax_bounding : forall (e : BC) xl yl n s,
  arities e = ok_arities n s ->
  length (sem e xl yl) <= 
  peval (poly_BC n e) (map (@length _) xl) + maxl (map (@length _) yl).

Lemma proj_seq_shift_safe : forall n m ln ls d,
 map (fun x : BC => sem x ln (d :: ls)) (map (proj n (S m)) (seq (S n) m)) =
 map (fun x : BC => sem x ln ls) (map (proj n m) (seq n m)).

Lemma proj_seq_shift_normal : forall n ln ls d,
 map (fun x : BC => sem x (d :: ln) ls) (map (proj (S n) 0) (seq 1 n)) =
 map (fun x : BC => sem x ln ls) (map (proj n 0) (seq 0 n)).

Section TIME.

  Variable ptime_zero_cost ptime_succ_cost ptime_pred_cost ptime_cond_cost: nat.
  Variable ptime_proj_cost : nat -> nat -> nat -> nat.

  Fixpoint sem_cost_rec (sem_g sem_h0 sem_h1:list bs->list bs->bs*nat)(v:bs)(vnl vsl:list bs) :
    bs * nat :=
    match v with
      | nil => sem_g vnl vsl
      | b::v' =>
        if b
          then
            let sem_cost := sem_cost_rec sem_g sem_h0 sem_h1 v' vnl vsl in
              let sem_cost_h := sem_h1 (v'::vnl) (fst sem_cost :: vsl) in
                (fst sem_cost_h, snd sem_cost + snd sem_cost_h)
          else
            let sem_cost := sem_cost_rec sem_g sem_h0 sem_h1 v' vnl vsl in
              let sem_cost_h := sem_h0 (v'::vnl) (fst sem_cost :: vsl) in
                (fst sem_cost_h, snd sem_cost + snd sem_cost_h)
    end.

Fixpoint sem_cost (e:BC)(vnl vsl:list bs) : bs*nat :=
 match e with
 | zero => (nil, ptime_zero_cost)
 | proj n s j => (
   if leb (S j) n then
     nth j vnl nil
     else nth (j-n) vsl nil, ptime_proj_cost n s j
   )
 | succ b => (b :: hd nil vsl, ptime_succ_cost)
 | pred => (tail (hd nil vsl), ptime_pred_cost)
 | cond => (
     match vsl with
     | a :: b :: c :: d :: _ =>
       match a with
         | nil => b
         | true :: _ => c
         | false :: _ => d
       end
     | a :: b :: c :: _ =>
       match a with
         | nil => b
         | true :: _ => c
         | false :: _ => nil
       end
     | a :: b :: _ =>
       match a with
         | nil => b
         | _ => nil
       end
     | _ => nil
     end, ptime_cond_cost
   )
 | rec g h0 h1 =>
     sem_cost_rec (sem_cost g) (sem_cost h0) (sem_cost h1) (hd nil vnl) (tail vnl) vsl
 | comp _ _ h nl sl =>
   let sem_cost_nl := List.map (fun ne => sem_cost ne vnl nil) nl in
   let sem_cost_sl := List.map (fun se => sem_cost se vnl vsl) sl in
   let sem_nl := List.map (@fst _ _) sem_cost_nl in
   let sem_sl := List.map (@fst _ _) sem_cost_sl in
   let cost_nl := List.map (@snd _ _) sem_cost_nl in
   let cost_sl := List.map (@snd _ _) sem_cost_sl in
   let sem_cost_h := sem_cost h sem_nl sem_sl in
   (fst sem_cost_h, snd sem_cost_h + plusl cost_nl + plusl cost_sl)
 end.

Lemma sem_cost_correct :
 forall e n s,
 arities e = ok_arities n s ->
 forall vnl vsl,
 fst (sem_cost e vnl vsl) = sem e vnl vsl.

  Variable ptime_zero ptime_succ ptime_pred ptime_cond: pol.
  Variable ptime_proj : nat -> nat -> nat -> pol.

  Hypothesis ptime_zero_spec : 
    snd (sem_cost zero nil nil) <= peval ptime_zero nil.

  Hypothesis ptime_zero_wf : pWF ptime_zero.

  Hypothesis ptime_zero_arity : parity ptime_zero = 0.

  Hypothesis ptime_succ_spec : forall b,
    snd (sem_cost (succ b) nil nil) <= peval ptime_succ nil.

  Hypothesis ptime_succ_wf : pWF ptime_succ.

  Hypothesis ptime_succ_arity : parity ptime_succ = 0.

  Hypothesis ptime_proj_spec : forall n s i l,
    length l = n ->
    snd (sem_cost (proj n s i) l nil) <= peval (ptime_proj n s i) (map (@length _) l).

  Hypothesis ptime_proj_wf : forall n s i, pWF (ptime_proj n s i).

  Hypothesis ptime_proj_arity : forall n s i, parity (ptime_proj n s i) = n.

  Hypothesis ptime_cond_spec : 
    snd (sem_cost cond nil nil) <= peval ptime_cond nil.

  Hypothesis ptime_cond_wf : pWF ptime_cond.

  Hypothesis ptime_cond_arity : parity ptime_cond = 0.

  Hypothesis ptime_pred_spec : 
    snd (sem_cost pred nil nil) <= peval ptime_pred nil.

  Hypothesis ptime_pred_wf : pWF ptime_pred.

  Hypothesis ptime_pred_arity : parity ptime_pred = 0.

Fixpoint poly_time n (e:BC) : pol :=
  match e with
    | zero => ptime_zero
    | succ _ => ptime_succ
    | pred => ptime_pred
    | cond  => ptime_cond
    | proj n s i => ptime_proj n s i
    | rec g h0 h1 => 
      pplus (pshift (poly_time (n - 1) g))
      (pmult (pproj n 0) (pplus (poly_time n h0) (poly_time n h1)))
    | comp n0 s h rl tl =>
      pplus (pplus (pcst n0 0) (pcomp (poly_time (length rl) h) (map (poly_BC n0) rl)))
      (pplus (pplusl (map (poly_time n0) rl)) (pplusl (map (poly_time n0) tl)))
  end.
 
Lemma poly_time_WF : forall e n s, arities e = ok_arities n s -> pWF (poly_time n e).

Lemma arity_poly_time : forall e n s,
  arities e = ok_arities n s ->
  parity (poly_time n e) = n.

Lemma sem_cost_bounded : forall e n s,
 arities e = ok_arities n s ->
 (forall vnl vsl,
   length vnl = n -> 
   length vsl = s -> 
   snd (sem_cost e vnl vsl) <=
   peval (poly_time n e) (List.map (@length _) vnl)).

End TIME. *)



Definition Pred : Cobham :=

  Rec Zero (Proj 2 0) (Proj 2 0) (Proj 1 0).



Lemma rec_bounded_Pred : rec_bounded' Pred.

Proof.

  simpl; repeat (split; auto); intros.

  rewrite <- hd_nth_0.

  induction (hd nil l); simpl; try (case a); omega.

Qed.



Lemma Pred_correct l :

  sem pred nil l = Sem Pred l.

Proof.

  intros; simpl.

  case (hd nil l); simpl; trivial.

  intros; case b; trivial.

Qed.



Lemma cond'_correct l :

  sem cond nil l = Sem Cond l.

Proof.

  intros; simpl.

  destruct l; simpl; trivial; intros.

  destruct l; simpl; trivial; intros.

  destruct l0; simpl; trivial; intros.

  destruct l0; simpl; trivial; intros.

  destruct l1; simpl; trivial; intros.

  destruct l0; simpl; trivial; intros.

  destruct b; simpl; trivial; intros.

  destruct l1; simpl; trivial; intros.

  destruct b; simpl; trivial; intros.

  destruct l2; simpl; trivial; intros.

Qed.



Definition move_arg (n i j:nat) (e:Cobham) : Cobham :=

  Comp n e (move_forward i j 

    (map (Proj n) (seq 0 n)) (Proj n 0)).



Lemma move_arg_inf n i j e :

  i+j < n -> arity e = ok_arity n ->

  arity (move_arg n i j e) = ok_arity n.

Proof.

  simpl; intros.

  rewrite H0, length_move_forward, map_length, seq_length, <- beq_nat_refl; simpl.

  case_eq (forallb (fun e0 : Arity => arity_eq e0 (ok_arity n))

      (map arity (move_forward i j (map (Proj n) (seq 0 n)) (Proj n 0)))); trivial.

  intros Hall.

  rewrite forallb_forall_conv in Hall.

  destruct Hall as [n' [H1 H2] ].

  rewrite in_map_iff in H1.

  destruct H1 as [e' [H3 H4] ].

  rewrite move_forward_map with (d1:=0) in H4 by trivial.

  rewrite in_map_iff in H4.

  destruct H4 as [n'' [H5 H6] ]; subst.

  rewrite in_move_forward_iff in H6.

  rewrite in_seq_iff in H6.

  replace (arity (Proj n n'')) with (ok_arity n) in H2.

  contradict H2.

  rewrite arity_eq_refl.

  congruence.

  simpl.

  destruct n.

  contradict H2.

  omega.

  rewrite leb_correct by omega; trivial.

  rewrite seq_length.

  omega.

  rewrite map_length, seq_length; trivial.

Qed.



Lemma rec_bounded_move_arg : forall n i j e,

  rec_bounded' e ->

  rec_bounded' (move_arg n i j e).

Proof.

  intros n i j e H; simpl; split; trivial.

  rewrite <- forall_andl.

  intros e' H'.

  rewrite move_forward_map with (d1:=0), in_map_iff in H' by trivial.

  destruct H' as [m [H1 _] ]; subst; simpl; trivial.

Qed.



Lemma move_arg_correct n i j e l :

  length l = n ->

  Sem (move_arg n i j e) l = 

  Sem e (move_forward i j l (Sem (Proj n 0) l)).

Proof.

  simpl; intros.

  f_equal.

  rewrite <- move_forward_map with (d2:= Sem (Proj n 0) l); trivial.

  rewrite map_map; simpl.

  f_equal; apply map_nth_seq; omega.

Qed.



Definition dummies (n m : nat)(e : Cobham) : Cobham :=

  Comp (n+m) e (map (Proj (n+m)) (seq 0 n)).



Lemma arity_dummies e n n' :

  arity e = ok_arity n' ->

  arity (dummies n' n e) = ok_arity (n + n').

Proof.

destruct n' as [ | n']; intro H; simpl; rewrite H; simpl.

rewrite plus_0_r.

trivial.

rewrite map_length, seq_length, <- beq_nat_refl, <- beq_nat_refl.

simpl.

case_eq (forallb (fun e0 : Arity => arity_eq e0 (ok_arity (S (n' + n))))

      (map arity (map (Proj (S (n' + n))) (seq 1 n')))); intro Hall.

f_equal.

ring.

rewrite <- not_true_iff_false in Hall.

contradict Hall.

rewrite forallb_forall.

intros m H0.

rewrite in_map_iff in H0.

destruct H0 as [e0 [H1 H2] ].

rewrite in_map_iff in H2.

destruct H2 as [p [H3 H4] ].

rewrite in_seq_iff in H4.

subst e0 m.

simpl.

rewrite leb_correct by omega.

apply arity_eq_refl.

Qed.



Lemma rec_bounded_dummies : forall e n m,

  rec_bounded' e ->

  rec_bounded' (dummies n m e). 

Proof.

intros e n m H; simpl; split; trivial.

rewrite <- forall_andl.

intros e0 H0.

rewrite in_map_iff in H0.

destruct H0 as [p [H1 _] ].

subst e0.

simpl; trivial.

Qed.



Lemma dummies_correct e n m l:

  n <= length l ->

  Sem (dummies n m e) l = Sem e (firstn n l). 

Proof.

unfold dummies; intros; simpl.

rewrite map_map; simpl.

f_equal.

rewrite <- firstn_map_nth; trivial.

Qed.



Fixpoint BC_to_Cobham n s (e : BC) : Cobham :=

  match e with

    | zero => Zero

    | proj n s i => Proj (n + s) i

    | succ b => Succ b

    | pred => Pred

    | cond => Cond

    | rec g h0 h1 =>

        Rec (BC_to_Cobham (n - 1) s g)

        (move_arg (S (n+s)) 1 (n-1) (BC_to_Cobham n (S s) h0) )

        (move_arg (S (n+s)) 1 (n-1) (BC_to_Cobham n (S s) h1) )

        (Poly (pplus (psum n s) (poly_BC n e)))

    | comp n s h rl tl =>

      Comp (n + s) (BC_to_Cobham (length rl) (length tl) h)

      (map (fun e => (dummies n s (BC_to_Cobham n 0 e))) rl ++ 

        map (BC_to_Cobham n s) tl)

  end.



Opaque Poly.



Lemma arity_BC_to_Cobham : forall (e : BC) n s,

  arities e = ok_arities n s ->

  arity (BC_to_Cobham n s e) = ok_arity (n + s).

Proof.

  refine (BC_ind_inf _ _ _ _ _ _ _ _ ); simpl; intros; auto.

  destruct (n + s).

  contradict H; omega.

  case_eq (leb i n0); intros; trivial.

  apply leb_complete_conv in H0.

  contradict H0; omega.

  Opaque move_arg.

  Opaque psum.

  rewrite <- minus_n_O, H2, H3, H4; auto; simpl.

  cutrewrite (length

    (firstn n (map (Proj (S (S (n + s)))) (seq 2 (n + s))) ++

      Proj (S (S (n + s))) 1

      :: skipn n (map (Proj (S (S (n + s)))) (seq 2 (n + s)))) = n + S s).

  repeat rewrite <- beq_nat_refl; simpl.

  case_eq (forallb (fun e : Arity => arity_eq e (ok_arity (S (S (n + s)))))

           (map arity

              (firstn n (map (Proj (S (S (n + s)))) (seq 2 (n + s))) ++

               Proj (S (S (n + s))) 1

               :: skipn n (map (Proj (S (S (n + s)))) (seq 2 (n + s)))))); intros; simpl.

  rewrite arity_Poly, <- beq_nat_refl; simpl.

  rewrite parity_psum.

  erewrite arity_poly_BC; eauto.

  erewrite arity_poly_BC; eauto.

  erewrite arity_poly_BC; eauto.

  repeat rewrite Nat.max_idempotent.

  rewrite max_l; [ | omega].

  rewrite <- beq_nat_refl; simpl; trivial.

  pWF; eapply pWF_poly_BC; eauto.



  elimtype False.

  apply eq_true_false_abs in H5; trivial; clear H5.

  apply forallb_forall; intros.

  apply in_map_iff in H5.

  destruct H5 as (? & ? & ?); subst.

  apply in_app_or in H6; destruct H6.

  rewrite <- map_firstn in H5.

  apply in_map_iff in H5.

  destruct H5 as (? & ? & ?); subst.

  rewrite firstn_seq in H6.

  apply in_seq_iff in H6; simpl.

  rewrite leb_correct; simpl.

  rewrite <- beq_nat_refl; trivial.

  rewrite Min.min_l in H6; omega.

  simpl in H5.

  destruct H5; subst; simpl.

  rewrite <- beq_nat_refl; trivial.

  rewrite <- map_skipn in H5.

  apply in_map_iff in H5.

  destruct H5 as (? & ? & ?); subst.

  rewrite skipn_seq in H6.

  apply in_seq_iff in H6; simpl.

  rewrite leb_correct; simpl.

  rewrite <- beq_nat_refl; trivial.

  omega.

  rewrite app_length, firstn_length, map_length, seq_length; simpl.

  rewrite skipn_length, map_length, seq_length; simpl.

  rewrite Min.min_l; omega.

  

  rewrite H2.

  rewrite app_length.

  repeat rewrite map_length.

  rewrite <- beq_nat_refl; simpl.

  case_eq ( forallb 

    (fun e : Arity => arity_eq e (ok_arity (n + s)))

    (map arity

      (map (fun e : BC => dummies n s (BC_to_Cobham n 0 e)) rl ++

        map (BC_to_Cobham n s) tl))); intros; trivial.

  elimtype False.

  apply eq_true_false_abs in H5; trivial.

  eapply forallb_forall; intros.

  apply in_map_iff in H6.

  destruct H6 as [c [Hc1 Hc2]].

  apply in_app_or in Hc2.

  destruct Hc2.



  subst.

  apply in_map_iff in H6.

  destruct H6 as [bc [Hbc1 Hbc2]].

  subst.

  erewrite arity_dummies.

  simpl.

  rewrite plus_comm, <- beq_nat_refl; trivial.

  rewrite (plus_n_O n) at 2.

  apply H3; trivial.

  apply in_map_iff in H6.

  destruct H6 as [bc [Hbc1 Hbc2]].

  subst.

  rewrite H4; trivial.

  simpl; rewrite <- beq_nat_refl; trivial.

Qed.



Lemma BC_to_Cobham_correct : forall (e : BC) n s,

  arities e = ok_arities n s ->

  (forall xl yl,

  n = length xl ->

  s = length yl ->

  sem e xl yl = Sem (BC_to_Cobham n s e) (xl ++ yl)).

Proof.

  refine (BC_ind_inf _ _ _ _ _ _ _ _); simpl; intros; auto.

  destruct n.

  rewrite (length_nil _ xl); simpl; auto.

  f_equal; omega.

  case_eq (leb i n); intros.

  apply leb_complete in H2.

  rewrite app_nth1; trivial; omega.

  apply leb_complete_conv in H2.

  rewrite app_nth2, H0; trivial; omega.

  rewrite (length_nil _ xl); simpl; auto.

  rewrite (length_nil _ xl); simpl; auto.

  destruct (hd nil yl); simpl; trivial; case b; trivial.

  rewrite (length_nil _ xl); simpl; auto.

  destruct yl; simpl; trivial.

  destruct yl; simpl; trivial.

  destruct l; simpl; trivial; case b; trivial.

  destruct yl; simpl; trivial.

  destruct l; simpl; trivial; case b; trivial.

  destruct yl; simpl; trivial.

  destruct l; simpl; trivial; case b; trivial.

  destruct l; simpl; trivial; case b; trivial.

  rewrite <- minus_n_O.

  destruct xl; simpl in *.

  discriminate.

  induction l; simpl.

  apply H2; auto.

  rewrite <- IHl.

  rewrite H3, H4; simpl; auto.  

  injection H5; intros; subst.

  repeat rewrite move_arg_correct.

  set (r := sem_rec (sem g) (sem h0) (sem h1) l xl yl).

  assert (l :: xl ++ r :: yl = move_forward 1 (length xl) (l :: r :: xl ++ yl) l) as Hmf.

  unfold move_forward; simpl; f_equal.

  rewrite firstn_app, skipn_app; trivial.

  rewrite Hmf.

  case a; f_equal; simpl.

  simpl; rewrite app_length; trivial.

  simpl; rewrite app_length; trivial.

  rewrite map_app.

  do 2 rewrite map_map.

  assert (HA : map (fun ne : BC => sem ne xl nil) rl = 

    map (fun x : BC => Sem (dummies (length xl) (length yl) 

      (BC_to_Cobham (length xl) 0 x)) (xl ++ yl)) rl).

  apply map_ext2.

  intros.

  rewrite dummies_correct.

  erewrite H3; eauto.

  f_equal; subst; trivial.

  rewrite firstn_app.

  apply app_nil_r.

  rewrite app_length; omega.

  assert (map (fun se : BC => sem se xl yl) tl =

    map (fun x : BC => Sem (BC_to_Cobham (length xl) (length yl) x) (xl ++ yl)) tl).

  apply map_ext2; intros; subst.

  eapply H4; trivial.

  rewrite H2, HA, H7; subst; trivial.

  rewrite map_length; trivial.

  rewrite map_length; trivial.

Qed.



Lemma app_prop : forall {A} (l2 l1 : list A) (P : A -> Prop),

  (fix f (l : list A) : Prop :=

  match l with

    | nil => True

    | e :: l' => P e /\ f l'

  end) l1  ->

  (fix f (l : list A) : Prop :=

  match l with

    | nil => True

    | e :: l' => P e /\ f l' 

  end) l2  ->  

  (fix f (l : list A) : Prop :=

  match l with

    | nil => True

    | e :: l' => P e /\ f l'

  end) (l1 ++ l2).

Proof.

 induction l2; intros; simpl; auto.

 simpl_list; auto.

 replace (l1 ++ a :: l2) with ((l1 ++ [a]) ++ l2).

 apply IHl2 with (P := P) (l1 := (l1 ++ [a])).

 induction l1; simpl.

 tauto.

 tauto.

 tauto.

 apply app_ass.

Qed.



Lemma plusl_monotonic : forall l (f1 f2 : nat -> nat),

  (forall x, f1 x <= f2 x) ->

  plusl (map f1 l) <= plusl (map f2 l).

Proof.

 induction l; simpl; intros.

 trivial.

 apply plus_le_compat.

 apply H.

 apply IHl.

 trivial.

Qed.



Lemma BC_to_Cobham_bounded : forall (e : BC) n s,

  arities e = ok_arities n s ->

  rec_bounded' (BC_to_Cobham n s e).

Proof.

  apply BC_ind_inf; simpl BC_to_Cobham; intros.

  simpl; trivial.

  simpl; trivial.  

  simpl; trivial.

  apply rec_bounded_Pred.

  apply rec_bounded_Cond.

  

  simpl; rewrite <- minus_n_O.



  split.

  apply rec_bounded_spec.

  apply rec_bounded_Poly.

  split; trivial.

  split.

  apply rec_bounded_move_arg; trivial.

  split.

  apply rec_bounded_move_arg; trivial.



  erewrite arity_BC_to_Cobham; eauto.

  rewrite move_arg_inf; try omega.

  rewrite move_arg_inf; try omega.

  rewrite arity_Poly.

  simpl.

  repeat rewrite <- beq_nat_refl; simpl.

  erewrite arity_poly_BC; eauto.

  erewrite arity_poly_BC; eauto.

  simpl.

  erewrite arity_poly_BC; eauto.

  repeat rewrite Nat.max_idempotent.

  rewrite parity_psum.

  rewrite max_l; [ | omega].

  rewrite plus_Sn_m.

  rewrite <- beq_nat_refl; trivial.



  intros.

  rewrite Poly_correct.



  rewrite pplus_correct, pplus_correct, pmult_correct, pplus_correct.

  rewrite pproj_correct, pshift_correct.



  assert (length (hd nil l) = nth 0 (map (@length _) l) 0).

  rewrite <- hd_nth_0.

  change 0 with (@length bool nil).

  apply map_hd.

  rewrite <- H6.

  clear H6.



  rewrite <- plus_Sn_m in H5.

  apply length_plus_ex in H5.

  destruct H5 as [l1 [l2 [Hl1 [Hl2 Hl]]]].

  rewrite Hl.



  change (S n) with (1 + n) in Hl1.

  apply length_plus_ex in Hl1.

  destruct Hl1 as [l1a [l1b [Hl1a [Hl1b Hl1]]]].

  destruct l1a.

  simpl in Hl1a; discriminate.  



  rewrite Hl1.

  simpl hd.

  simpl tl.



  assert (l1a = nil).

  destruct l1a; trivial.

  simpl in Hl1a; discriminate.

  clear Hl1a.



  assert (tl (l1 ++ l2) = tl l1 ++ l2).

  apply tl_app.

  intro; subst; simpl in *; discriminate.

  

  assert (tl l1 = l1b).

  rewrite Hl1, H5; simpl; trivial.

  clear Hl1.



  induction l0; simpl.



  rewrite H5 in *; simpl in *.



  erewrite <- BC_to_Cobham_correct; eauto.

  eapply le_trans.

  eapply polymax_bounding; eauto.

  rewrite plus_comm.

  apply plus_le_compat.

  rewrite psum_correct.

  eapply le_trans.

  apply maxl_le_plusl.

  rewrite map_nth_seq.

  simpl.

  rewrite <- map_skipn.

  rewrite <- Hl1b; simpl.

  rewrite skipn_app.

  trivial.

  simpl.

  rewrite map_length.

  rewrite app_length.

  rewrite Hl1b, Hl2; omega.

  rewrite plus_0_r.

  rewrite <- (app_nil_r (map (@length _) l1b)) at 1.

  rewrite map_app.

  erewrite parity_correct.

  apply le_refl.

  eapply pWF_poly_BC; eauto.

  erewrite arity_poly_BC; eauto.

  rewrite map_length; trivial.



  remember ( sem_Rec (Sem (BC_to_Cobham n s g))

    (Sem (move_arg (S (S (n + s))) 1 n (BC_to_Cobham (S n) (S s) h0)))

    (Sem (move_arg (S (S (n + s))) 1 n (BC_to_Cobham (S n) (S s) h1))) l0 

    ((l1a ++ l1b) ++ l2)) as r.



  repeat rewrite move_arg_correct; simpl.



  assert (move_forward 1 n (l0 :: r :: (l1a ++ l1b) ++ l2) l0 = ((l0 :: (l1a ++ l1b)) ++ (r :: l2))).

  unfold move_forward; simpl.

  f_equal.

  rewrite H5; simpl.

  rewrite <- Hl1b, firstn_app, skipn_app; trivial.

  rewrite H8; clear H8.



  assert ( maxl (map (@length _) (r :: l2)) <= 

    peval (psum (S n) s) (S (length l0) :: map (@length _) ((l1a ++ l1b) ++ l2)) +

    (peval (poly_BC n g) (map (@length _) ((l1a ++ l1b) ++ l2)) +

      length l0 *

      (peval (poly_BC (S n) h0) (S (length l0) :: map (@length _) ((l1a ++ l1b) ++ l2)) +

        peval (poly_BC (S n) h1) (S (length l0) :: map (@length _) ((l1a ++ l1b) ++ l2))))).

  simpl.



  apply Nat.max_lub.



  eapply le_trans.

  eapply IHl0.

  rewrite psum_correct.

  rewrite psum_correct.

  apply plus_le_compat.

  apply plusl_monotonic.

  intros; simpl.

  destruct x; trivial.

  omega.

  apply plus_le_compat_l.

  apply mult_le_compat_l.

  apply plus_le_compat.

  apply peval_monotonic; intros; simpl.

  destruct i; omega.

  apply peval_monotonic; intros; simpl.

  destruct i; omega.



  apply le_plus_trans.

  rewrite psum_correct.

  eapply le_trans.

  apply maxl_le_plusl.

  rewrite map_nth_seq.

  simpl.

  rewrite H5, <- Hl1b; simpl.

  rewrite map_app.

  erewrite <- map_length.

  rewrite skipn_app.

  trivial.

  simpl.

  rewrite map_length.

  rewrite H5, <- Hl1b, <- Hl2; simpl.

  rewrite app_length; ring. 



  case a.



  erewrite <- BC_to_Cobham_correct; simpl; eauto.

  eapply le_trans.

  eapply polymax_bounding; eauto.

  assert ( peval (poly_BC (S n) h1) (map (@length _) (l0 :: l1a ++ l1b)) <=  

    peval (poly_BC (S n) h1)  (S (length l0) :: map (@length _) ((l1a ++ l1b) ++ l2))).

  apply peval_monotonic.

  intros.

  simpl.

  destruct i.

  omega.

  rewrite H5; simpl.

  repeat rewrite map_nth2 with (d := nil); simpl; trivial.

  apply length_nth_app.

  omega.

  rewrite <- Hl1b, H5; simpl; trivial.



  erewrite <- BC_to_Cobham_correct; simpl; eauto.

  eapply le_trans.

  eapply polymax_bounding; eauto.

  assert ( peval (poly_BC (S n) h0) (map (@length _) (l0 :: l1a ++ l1b)) <=  

    peval (poly_BC (S n) h0)  (S (length l0) :: map (@length _) ((l1a ++ l1b) ++ l2))).

  apply peval_monotonic.

  intros.

  simpl.

  destruct i.

  omega.

  rewrite H5; simpl.

  repeat rewrite map_nth2 with (d := nil); simpl; trivial.

  apply length_nth_app.

  omega.

  rewrite <- Hl1b, H5; simpl; trivial.



  rewrite <- Hl1b, <- Hl2, H5, app_length; simpl; trivial.

  rewrite <- Hl1b, <- Hl2, H5, app_length; simpl; trivial.



  pWF; eapply pWF_poly_BC; eauto.



  erewrite arity_BC_to_Cobham; eauto; f_equal; omega.

  erewrite arity_BC_to_Cobham; eauto; f_equal; omega.



  simpl in *.



  split; trivial.

  clear H H2.

  apply app_prop with 

  (l1 := (map (fun e0 : BC => dummies n s (BC_to_Cobham n 0 e0)) rl))

  (l2 := map (BC_to_Cobham n s) tl)

  (P := rec_bounded').

  induction rl; simpl; auto.

  split.

  apply rec_bounded_dummies.

  apply H3; simpl; auto.

  apply IHrl; intros.

  apply H0; simpl; auto.

  apply H3; simpl; auto.

  induction tl; simpl; auto.

  split.

  apply H4; simpl; auto.

  apply IHtl; intros.

  apply H1; simpl; auto.

  apply H4; simpl; auto.

Qed.

