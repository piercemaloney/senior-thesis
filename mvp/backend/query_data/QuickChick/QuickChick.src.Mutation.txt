From Coq Require Extraction.
From Coq Require Import String.

From SimpleIO Require Import SimpleIO.

Module Magic.

Definition section_name : Type := ocaml_string.
Definition mutation_id : Type := ocaml_string.

Parameter loc : Type.
Parameter HERE : loc.
Parameter serialize_loc : section_name -> loc -> mutation_id.
Parameter serialize_name_ :
  section_name -> ocaml_string -> mutation_id.

Definition serialize_name : section_name -> string -> mutation_id :=
  fun section name => serialize_name_ section (to_ostring name).

Extract Constant loc => "string * int * int * int".

Extract Inlined Constant HERE => "__POS__".

Extract Constant serialize_loc => "fun section (locf,locl,locc,_) ->
     Printf.sprintf ""%s:%s:%d:%d"" section locf locl locc".

Extract Constant serialize_name_ => "fun section name ->
     Printf.sprintf ""%s:%s"" section name".

Definition mutation : mutation_id -> bool := fun _ => false.

Definition mutate : forall a,
    (unit -> a) -> (unit -> a) -> mutation_id -> a :=
  fun _ f g l => if mutation l then g tt else f tt.

Extract Constant mutation =>
  "match try Some (Sys.getenv ""QC_MUTANT"") with Not_found -> None with
   | None -> fun _ -> false
   | Some ""DISCOVERY"" ->
     let mutant_log = open_out ""qc-out/qc-mutants"" in
     let mutants = Hashtbl.create 10 in
     fun mid ->
        begin try ignore (Hashtbl.find mutants mid) with
        | Not_found ->
            Hashtbl.add mutants mid ();
            output_string mutant_log mid;
            output_char mutant_log '\n';
            flush mutant_log
        end; false
   | Some this_mutant ->
     (* print_string this_mutant; *) (* Debugging *)
     fun mid -> mid = this_mutant".

End Magic.

Module Mutant.
Export String.

Class section : Type := current_section_ : string.

Definition current_section `{section} : ocaml_string :=
  to_ostring current_section_.

Instance default_section : section | 9 := ""%string.

End Mutant.

Notation MAGIC_LOC :=
  (Magic.serialize_loc Mutant.current_section Magic.HERE).

Notation MAGIC_NAME name :=
  (Magic.serialize_name Mutant.current_section name).

Notation "a 'mutant!' b" :=
  (Magic.mutate _ (fun _ => a) (fun _ => b) MAGIC_LOC)
(at level 98, left associativity).

Notation "a 'mutant:' name b" :=
  (Magic.mutate _ (fun _ => a) (fun _ => b) (MAGIC_NAME name))
(at level 98, name at level 0, left associativity).
