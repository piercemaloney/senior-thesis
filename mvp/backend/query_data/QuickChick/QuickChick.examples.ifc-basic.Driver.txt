From QuickChick Require Import QuickChick.

Import GenLow GenHigh.



Require Import List. Import ListNotations.



From QuickChick.ifcbasic Require Import Machine Printing Generation Indist DerivedGen.

From QuickChick.ifcbasic Require GenExec.



Require Import Coq.Strings.String.

Local Open Scope string.

Definition SSNI (t : table) (v : @Variation State) : Checker  :=

  let '(V st1 st2) := v in

  let '(St _ _ _ (_@l1)) := st1 in

  let '(St _ _ _ (_@l2)) := st2 in

  match lookupInstr st1 with

    | Some i =>     collect (show i) (  

  if indist st1 st2 then

    match l1, l2 with

      | L,L  =>

        match exec t st1, exec t st2 with

          | Some st1', Some st2' =>



             (checker (indist st1' st2'))

          | _, _ =>  checker rejected

        end

      | H, H =>

        match exec t st1, exec t st2 with

          | Some st1', Some st2' =>

            if is_atom_low (st_pc st1') && is_atom_low (st_pc st2') then

              
               (checker (indist st1' st2') )

            else if is_atom_low (st_pc st1') then

                   

               (checker (indist st2 st2'))

            else



               (checker (indist st1 st1'))

          | _, _ => checker rejected

        end

      | H,_ =>

        match exec t st1 with

          | Some st1' =>



                       (checker (indist st1 st1'))

          | _ =>  checker rejected

        end

      | _,H =>

        match exec t st2 with

          | Some st2' =>



                       (checker (indist st2 st2'))

          | _ =>  checker rejected

        end

    end

  else   checker rejected

               )

    | _ => checker rejected

  end.



Definition prop_SSNI t : Checker :=

  forAllShrink gen_variation_state (fun _ => nil)

   (SSNI t : Variation -> G QProp).



Definition prop_SSNI_derived t : Checker :=

  forAllShrink gen_variation_state_derived (fun _ => nil)

               (fun mv => 

                  match mv with 

                  | Some v => SSNI t v

                  | _ => checker tt

                  end).



Definition prop_gen_indist :=

  forAllShrink gen_variation_state (fun _ => nil)

               (fun v => let '(V st1 st2) := v in indist st1 st2).



Definition prop_gen_indist_derived :=

  forAllShrink (gen_variation_state_derived) (fun _ => nil)

               (fun mv => 

                  match mv with 

                  | Some (V st1 st2) => indist st1 st2 

                  | _ => true

                  end).



Extract Constant defNumDiscards => "30000".

QuickCheck (prop_SSNI default_table).

QuickCheck (prop_SSNI_derived default_table).



Axiom numTests : nat.

Extract Constant numTests => "10000".



Fixpoint MSNI (fuel : nat) (t : table) (v : @Variation State) : Checker  :=

  let '(V st1 st2) := v in

  let '(St _ _ _ (_@l1)) := st1 in

  let '(St _ _ _ (_@l2)) := st2 in

  match fuel with

  | O => checker true

  | S fuel' => 

  match lookupInstr st1 with

    | Some i =>     collect (show i) (  

  if indist st1 st2 then

    match l1, l2 with

      | L,L  =>

        match exec t st1, exec t st2 with

          | Some st1', Some st2' =>



            if indist st1' st2' then

              MSNI fuel' t (V st1' st2')

            else

              checker false

          | _, _ =>  checker true

        end

      | H, H =>

        match exec t st1, exec t st2 with

          | Some st1', Some st2' =>

            if is_atom_low (st_pc st1') && is_atom_low (st_pc st2') then

              
              if indist st1' st2' then

                MSNI fuel' t (V st1' st2')

              else

                checker false

            else if is_atom_low (st_pc st1') then

                   

              if indist st2 st2' then

                

                MSNI fuel' t (V st1 st2') 

              else checker false

            else

              if indist st1 st1' then

                MSNI fuel' t (V st1' st2)

              else checker false

              

          | _, _ => checker true

        end

      | H,_ =>

        match exec t st1 with

        | Some st1' =>

          if indist st1 st1' then

            MSNI fuel' t (V st1' st2)

          else

            checker false

          | _ =>  checker true

        end

      | _,H =>

        match exec t st2 with

        | Some st2' =>

          if indist st2 st2' then

            MSNI fuel' t (V st1 st2')

          else checker false

        | _ =>  checker true

        end

    end

  else checker rejected



    )         

    | _ => checker rejected

  end

  end.



Definition prop_MSNI t : Checker :=

  forAllShrink GenExec.gen_variation_state' (fun _ => nil)

   (MSNI 20 t : Variation -> G QProp).



QuickCheck (prop_MSNI default_table).



Definition myArgs : Args :=

  let '(MkArgs rp mSuc md mSh mSz c) := stdArgs in

  MkArgs rp numTests md mSh mSz c.



From QuickChick Require Import Mutate MutateCheck.



Instance mutateable_table : Mutateable table :=

{|

  mutate := mutate_table

|}.



Require Import ZArith.



Definition testMutantX n :=

  match nth (mutate_table default_table) n with

    | Some t => prop_SSNI t

    | _ => checker tt 

  end.



MutateCheckWith myArgs default_table

    (fun t => (forAllShrinkShow

      gen_variation_state (fun _ => nil) (fun _ => "")

      (SSNI t ))).



MutateCheckWith myArgs default_table

    (fun t => (forAllShrinkShow

      GenExec.gen_variation_state' (fun _ => nil) (fun _ => "")

      (MSNI 20 t ))).



MutateCheckWith myArgs default_table

    (fun t => (forAllShrinkShow

      (gen_variation_state_derived) (fun _ => nil) (fun _ => "")

      (fun mv => 

         match mv with 

         | Some v => SSNI t v 

         | None => checker tt

         end

    ))).



