
Set Warnings "-extraction-opaque-accessed,-extraction".
Set Warnings "-notation-overridden,-parsing".

Require Import String List. Open Scope string.

From QuickChick Require Import QuickChick Tactics.
From mathcomp Require Import ssreflect ssrfun ssrbool ssrnat eqtype seq.
Import QcDefaultNotation. Open Scope qc_scope.

Set Bullet Behavior "Strict Subproofs".

Inductive day : Type :=
  | monday : day
  | tuesday : day
  | wednesday : day
  | thursday : day
  | friday : day
  | saturday : day
  | sunday : day.

Derive (Arbitrary, Show) for day.
Derive (Sized, CanonicalSized) for day.
Derive SizeMonotonic for day using genSday.
Derive SizedMonotonic for day.
Derive SizedCorrect for day using genSday and SizeMonotonicday.

Definition next_weekday (d:day) : day :=
  match d with
  | monday    => tuesday
  | tuesday   => wednesday
  | wednesday => thursday
  | thursday  => friday
  | friday    => monday
  | saturday  => monday
  | sunday    => monday
  end.

Module BoolPlayground.
Inductive bool : Type :=
  | true : bool
  | false : bool.

Derive (Arbitrary, Show) for bool.
Derive (Sized, CanonicalSized) for bool.
Derive SizeMonotonic for bool using genSbool.
Derive SizedMonotonic for bool.
Derive SizedCorrect for bool using genSbool and SizeMonotonicbool.

Definition negb (b:bool) : bool :=
  match b with
  | true => false
  | false => true
  end.

Definition andb (b1:bool) (b2:bool) : bool :=
  match b1 with
  | true => b2
  | false => false
  end.

Definition orb (b1:bool) (b2:bool) : bool :=
  match b1 with
  | true => true
  | false => b2
  end.
End BoolPlayground.

Module NatPlayground.

Derive (Arbitrary, Show) for nat.
Derive (Sized, CanonicalSized) for nat.

Inductive nat' : Type :=
  | stop : nat'
  | tick : nat' -> nat'.

Derive (Arbitrary, Show) for nat'.
Derive (Sized, CanonicalSized) for nat'.
Derive SizeMonotonic for nat' using genSnat'.
Derive SizedMonotonic for nat'.
Derive SizedCorrect for nat' using genSnat' and SizeMonotonicnat'.

End NatPlayground.

Definition pred (n : nat) : nat :=
  match n with
    | O => O
    | S n' => n'
  end.

Definition minustwo (n : nat) : nat :=
  match n with
    | O => O
    | S O => O
    | S (S n') => n'
  end.

Fixpoint evenb (n:nat) : bool :=
  match n with
  | O        => true
  | S O      => false
  | S (S n') => evenb n'
  end.

Definition oddb (n:nat) : bool   :=   negb (evenb n).

Module NatPlayground2.

Fixpoint plus (n : nat) (m : nat) : nat :=
  match n with
    | O => m
    | S n' => S (plus n' m)
  end.

Fixpoint mult (n m : nat) : nat :=
  match n with
    | O => O
    | S n' => plus m (mult n' m)
  end.

Fixpoint minus (n m:nat) : nat :=
  match n, m with
  | O   , _    => O
  | S _ , O    => n
  | S n', S m' => minus n' m'
  end.

End NatPlayground2.

Fixpoint beq_nat (n m : nat) : bool :=
  match n with
  | O => match m with
         | O => true
         | S m' => false
         end
  | S n' => match m with
            | O => false
            | S m' => beq_nat n' m'
            end
  end.

Fixpoint leb (n m : nat) : bool :=
  match n with
  | O => true
  | S n' =>
      match m with
      | O => false
      | S m' => leb n' m'
      end
  end.

Theorem plus_O_n : forall n : nat, 0 + n = n.
Admitted. 

Theorem plus_O_n' : forall n : nat, 0 + n = n.
Admitted. 

Theorem plus_1_l : forall n:nat, 1 + n = S n.
Admitted. 

Theorem mult_0_l : forall n:nat, 0 * n = 0.
Admitted. 

Theorem plus_0_example: forall n, n = 17 -> n = 42.
Admitted. 

Conjecture plus_id_example : forall n m : nat, n = m -> n + n = m + 0.
QuickChick plus_id_example.

Theorem plus_id_exercise : forall n m o : nat,
  n = m -> m = o -> n + m = m + o.
Admitted.  QuickChick plus_id_exercise.

Theorem mult_0_plus : forall n m : nat,
  (0 + n) * m = n * m. Admitted. 

Theorem mult_S_1 : forall n m : nat,
  m = S n ->
  m * (1 + n) = m * m.
Admitted. 

Theorem plus_1_neq_0_firsttry : forall n : nat,
  beq_nat (n + 1) 0 = false.
Admitted. 

Theorem negb_involutive : forall b : bool,
  negb (negb b) = b. Admitted. 

Theorem andb_commutative : forall b c, andb b c = andb c b.
Admitted. 

Theorem andb_true_elim2 : forall b c : bool,
  andb b c = true -> c = true.
Admitted. 

Theorem zero_nbeq_plus_1 : forall n : nat,
  beq_nat 0 (n + 1) = false. 
Admitted. 

Theorem identity_fn_applied_twice :
  forall (f : bool -> bool),
  (forall (x : bool), f x = x) ->
  forall (b : bool), f (f b) = b.
Admitted. 

Theorem andb_eq_orb :
  forall (b c : bool),
  (andb b c = orb b c) ->
  b = c.
Admitted. 
