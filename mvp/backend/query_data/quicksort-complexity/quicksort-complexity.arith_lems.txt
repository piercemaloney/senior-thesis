Set Implicit Arguments.

Unset Standard Proposition Elimination Names.



Require Import util.
(* util:
Set Implicit Arguments.
Global Set Asymmetric Patterns.

Require Import Relations.
Require Export Basics.
Require Import Setoid.

Arguments eq {A}.
Arguments fst {A B}.

Hint Unfold compose.

Definition proj1_conj (A B: Prop) (c: A /\ B): A :=
  match c with conj x _ => x end.

Definition proj2_conj (A B: Prop) (c: A /\ B): B :=
  match c with conj _ x => x end.

Lemma eq_trans (X: Set) (a b c: X): a = b -> b = c -> a = c.

Definition cmp_cmp (x y: comparison): { x = y } + { x <> y } :=
  
  match x, y return { x = y } + { x <> y } with
  | Lt, Lt | Gt, Gt | Eq, Eq => left _ (refl_equal _)
  | a, b => right _ (
      match a, b
      return match a, b with Lt, Lt | Gt, Gt | Eq, Eq => True | _, _ => ~(a = b) end with
      | Lt, Lt | Gt, Gt | Eq, Eq => I
      | Lt, _ => fun q => match q in _ = Lt with refl_equal => I end
      | Gt, _ => fun q => match q in _ = Gt with refl_equal => I end
      | Eq, _ => fun q => match q in _ = Eq with refl_equal => I end
      end
    )
  end. 

Fixpoint nat_cmp (x y: nat) {struct x}: comparison :=
  match x, y with
  | 0, 0 => Eq
  | 0, S _ => Lt
  | S _, 0 => Gt
  | S x', S y' => nat_cmp x' y'
  end.

Ltac cset e := let v := fresh in set (v := e); clearbody v.
Ltac cset' e := let v := fresh in set (v := e) in *; clearbody v.

Ltac extro x := generalize x; clear x.

Definition unsum_bool (A B: Prop) (sb: sumbool A B): bool := if sb then true else false.

Definition decision (P: Prop): Set := { P } + { ~ P }.
Definition predDecider (T: Set) (P: T -> Prop): Type := forall t, decision (P t).

Lemma negb_inv (b b': bool): negb b = negb b' -> b = b'.

Lemma negb_negb (b: bool): negb (negb b) = b.

Definition id {X} (x: X): X := x.

Definition ext_eq {A B: Type} (f g: A -> B): Prop := forall x, f x = g x.

Lemma ext_eq_trans: forall A B, transitive _ (@ext_eq A B).

Lemma ext_eq_refl: forall A B, reflexive _ (@ext_eq A B).

Lemma ext_eq_sym: forall A B, symmetric _ (@ext_eq A B).

Add Parametric Relation X Y: (X -> Y) (@ext_eq X Y)
  reflexivity proved by (@ext_eq_refl X Y)
  symmetry proved by (@ext_eq_sym X Y)
  transitivity proved by (@ext_eq_trans X Y)
    as ext_eq_rel.

Lemma ext_eq_rw (A B: Type) (f g: A -> B): ext_eq f g -> forall x, f x = g x.

Notation " g ∘ f " := (compose g f) (at level 40, left associativity).

Lemma comp_apply (A B C: Set) (f: B -> C) (g: A -> B) (x: A): (f ∘ g) x = f (g x).

Lemma comp_ass (A B C D: Set) (f: A -> B) (g: B -> C) (h: C -> D): h ∘ (g ∘ f) = (h ∘ g) ∘ f.

Definition compose_lunit A B (f: A -> B): ext_eq (@id B ∘ f) f.

Definition compose_runit A B (f: A -> B): ext_eq (f ∘ @id A) f.

Definition map_snd (A B: Set) (f: A -> B) (C: Set) (p: C * A): C * B := (fst p, f (snd p)).

Lemma fst_map_snd (A B: Set) (f: A -> B) (C: Set) (p: C * A): fst (map_snd f p) = fst p.

Definition on {A B: Type} {C: B -> B -> Type} (g: A -> B) (f: forall b b', C b b') (x y: A): C (g x) (g y) := f (g x) (g y).

Definition unsumbool {A B}: { A } + { B } -> bool := fun x => if x then true else false.

Definition dep_flip {A B: Type} {C: A -> B -> Type} (f: forall a b, C a b) (b: B) (a: A): C a b := f a b.

Definition uncurry A B C (f: A -> B -> C) (ab: A * B): C := f (fst ab) (snd ab).

Section well_founded_pairs.

  Variables (A B: Type)
    (Ra: relation A) (Rb: relation B).

  Inductive pair_rel: relation (A * B) :=
    | pair_rel_l a a' b: Ra a a' -> pair_rel (a, b) (a', b)
    | pair_rel_r a b b': Rb b b' -> pair_rel (a, b) (a, b').

  Fixpoint acc_pairs a (Aa: Acc Ra a) {struct Aa}: forall b (Ab: Acc Rb b), Acc pair_rel (a, b) :=
    fix G b (Ab: Acc Rb b) {struct Ab}: Acc pair_rel _ := @Acc_intro _ pair_rel _
      match Aa, Ab with
      | Acc_intro x, Acc_intro y =>  fun z (za: pair_rel z (a, b)) =>
          match za in pair_rel z ab return
            (forall (p: A) (q: Ra p (fst ab)), Acc pair_rel (p, (snd ab))) -> (forall p, Rb p (snd ab) -> Acc pair_rel (fst ab, p)) -> Acc pair_rel z with
          | pair_rel_l v w c d => fun fr gr => fr _ d
          | pair_rel_r v w c d => fun fr gr => gr _ d
          end
          (fun (p: A) (q: Ra p (fst (a, b))) => @acc_pairs p (x p q) b Ab : Acc pair_rel (p, b))
          (fun (p: B) (q: Rb p (snd (a, b))) => @G p (y p q): Acc pair_rel (a, p))
      end.

   Lemma well_founded_pairs (Wa: well_founded Ra) (Wb: well_founded Rb): well_founded pair_rel.

End well_founded_pairs. *)

Require Import Le.

Require Import Lt.

Require Import Rbase.

Require Import Plus.

Require Import Mult.

Require Import Arith.

Require Import Omega.

Require Import Div2.

Require Import Recdef.

Require Import Rbase.

Require Import Morphisms.



Definition ltb (x y: nat): bool := negb (leb y x).

Definition geb (x y: nat): bool := leb y x.



Ltac subst_tac x y z := 

  match z with

  | x => y

  | ?l + ?r =>

      let l' := subst_tac x y l in

      let r' := subst_tac x y r in

        constr: (l' + r')

  | ?l * ?r =>

      let l' := subst_tac x y l in

      let r' := subst_tac x y r in

        constr: (l' * r')

  | _ => z

  end.



Ltac deep_le_trans h :=

  match type of h with

  | ?n <= ?u =>

    match goal with

    | |- ?l <= _ =>

      let q := subst_tac n u l

      in apply le_trans with q

    end

  end.



Instance Transitive_le: Transitive le := le_trans.



Lemma minus_plus_same (y x: nat): x <= x - y + y.

Proof. intros. omega. Qed.



Lemma ltb_complete m n: ltb m n = true -> m < n.

Proof with auto.

  unfold ltb.

  intros.

  apply leb_complete_conv.

  apply negb_inv...

Qed.



Lemma ltb_complete_conv m n: ltb m n = false -> n <= m.

Proof. unfold ltb. intros. apply leb_complete. apply negb_inv; auto. Qed.



Lemma lt_0_mult x y: 0 < x -> 0 < y -> 0 < x * y.

Proof with auto.

  destruct x.

    intros.

    inversion H.

  simpl.

  intros.

  apply lt_plus_trans...

Qed.



Lemma mult_ne_0 a b: (a <> 0 -> b <> 0 -> mult a b <> 0)%nat.

Proof with auto with arith.

  destruct a... destruct b...

  intros. simpl. discriminate.

Qed.



Lemma weak_lt_S_n n m: S n < m -> n < m.

Proof with auto with arith.

  intros.

  apply lt_S_n.

  apply lt_trans with m...

Qed.



Lemma le_exists_plus (x y: nat) (p: x <= y): exists d, y = x + d.

Proof with auto.

  induction p.

    exists 0...

  destruct IHp.

  exists (S x0).

  subst...

Qed.



Lemma lt_exists_plus (x y: nat) (p: x < y): exists d, y = S (x + d).

Proof.

  unfold lt in p.

  destruct (le_exists_plus p).

  exists x0.

  assumption.

Qed.



Lemma n_lt_n_plus_Sm n m: n < n + S m.

Proof. intros. omega. Qed.



Lemma ne_le_impl_lt x y: x <> y -> x <= y -> x < y.

Proof. auto with *. Qed.



Hint Rewrite plus_0_r : arith_norm.

Hint Rewrite mult_plus_distr_r mult_plus_distr_l plus_assoc : arith_norm.



Lemma beq_nat_false x y: x <> y -> beq_nat x y = false.

Proof with auto.

  intros.

  case_eq (beq_nat x y)...

  intros.

  elimtype False.

  apply H.

  apply beq_nat_eq...

Qed.



Lemma minus_lt_compat_l x y z: (y <= x -> z < y -> x - y < x - z)%nat.

Proof with auto.

  intros.

  omega.

Qed.



Lemma minus_eq_inv_r d x y: (x <= d -> y <= d -> (d - x = d - y) -> x = y)%nat.

Proof with auto with arith.

  revert x y.

  induction d.

    simpl.

    intros.

    destruct x...

    inversion H.

  simpl.

  intros.

  destruct x.

    destruct y...

    elimtype False.

    apply le_Sn_n with d...

    rewrite H1.

    apply le_minus.

  destruct y.

    elimtype False.

    apply le_Sn_n with d.

    rewrite <- H1.

    apply le_minus.

  apply eq_S.

  apply IHd...

Qed.



Lemma le_ne_lt x y: x <= y -> x <> y -> x < y.

Proof. intros. omega. Qed.



Lemma ne_nlt_lt x y: x <> y -> ~ x < y -> y < x.

Proof with auto.

  intros.

  destruct (le_gt_dec x y)...

  destruct (le_lt_eq_dec _ _ l)...

    elimtype False...

  elimtype False...

Qed.



Lemma lt_not_eq x y: (x < y -> x <> y)%nat.

Proof. intros. omega. Qed.



Lemma lt_not_eq_sym x y: (y < x -> x <> y)%nat.

Proof. intros. omega. Qed.



Hint Resolve lt_not_eq.

Hint Resolve lt_not_eq_sym.



Definition sqrd n := n * n.



Lemma sqrd_S n: sqrd (S n) = sqrd n + n + n + 1.

Proof with auto with arith.

  induction n...

  rewrite IHn.

  clear IHn.

  unfold sqrd.

  ring.

Qed.



Lemma sqrd_plus x y: sqrd x + sqrd y <= sqrd (x + y).

Proof with auto with arith.

  intros.

  unfold sqrd.

  autorewrite with arith_norm...

Qed.



Lemma sqrd_le x y: x <= y -> sqrd x <= sqrd y.

  intros.

  unfold sqrd.

  apply mult_le_compat; auto.

Qed.



Hint Resolve sqrd_plus sqrd_le.



Lemma div2_preserves_le x y: x <= y -> div2 x <= div2 y.

Proof.

  rewrite !Nat.div2_div. now apply Nat.div_le_mono.

Qed.



Lemma Sdiv2_eq_div2SS x: S (div2 x) = div2 (S (S x)).

Proof. reflexivity. Qed.



Lemma div2S_le_Sdiv2 x: div2 (S x) <= S (div2 x).

Proof with auto with arith.

  destruct x...

  rewrite <- Sdiv2_eq_div2SS.

  apply -> Nat.succ_le_mono. apply div2_preserves_le...

Qed.



Lemma div2_x_plus_Sx b: div2 (b + S b) = b.

Proof with auto with arith.

  induction b...

  rewrite plus_Sn_m.

  rewrite <- plus_Snm_nSm.

  rewrite plus_Sn_m.

  simpl...

Qed.



Lemma div2_x_plus_2y a b: div2 (a + 2 * b) = div2 a + b.

Proof.

  rewrite !Nat.div2_div, Nat.mul_comm. now apply Nat.div_add.

Qed.



Lemma div2_sqrdSn n: div2 (sqrd n) + n <= div2 (sqrd (S n)).

Proof with auto with arith.

  intros.

  unfold sqrd.

  replace (S n * S n) with (n * n + 2 * n + 1) by ring.

  replace (div2 (n * n) + n) with (div2 (n * n + 2 * n)).

    apply div2_preserves_le...

  rewrite div2_x_plus_2y...

Qed.



Lemma le_div2 n: div2 n <= n.

Proof. apply Nat.div2_decr; auto with arith. Qed.



Lemma div2_lt_inv0 x y: div2 x < div2 y -> x < y.

Proof.

  rewrite !Nat.lt_nge. intros H H'. contradict H. now apply div2_preserves_le.

Qed.



Lemma div2_lt_inv x y: div2 x < div2 y -> x <= y.

Proof.

  intros. now apply Nat.lt_le_incl, div2_lt_inv0.

Qed.



Lemma div2_le_div2_inv x y: div2 x <= div2 y -> x <= S y.

Proof with auto with arith.

 destruct x as [|[|x]]...

 simpl. intros H. apply div2_lt_inv0 in H...

Qed.



Lemma div2_cancel n: div2 (2 * n) = n.

Proof with auto.

  induction n...

  simpl mult.

  rewrite <- plus_n_Sm.

  simpl in *...

Qed.



Lemma div2_le_inv x n: div2 x <= n -> x <= S (2 * n).

Proof. intros. rewrite <- (div2_cancel n) in H. apply (div2_le_div2_inv _ _ H). Qed.



Fixpoint pow (b e: nat) {struct e}: nat :=

  match e with

  | 0 => 1

  | S e' => b * pow b e'

  end.



Lemma pow_S x y: pow x (S y) = x * pow x y.

Proof. auto. Qed.



Lemma pow_min x: x <> 0%nat -> forall y, 0 < pow x y.

Proof with auto with arith.

  intros H.

  induction y...

  simpl.

  apply lt_0_mult...

  destruct x...

Qed.



Function ceil_log2_S (n: nat) {wf lt n}: nat :=

  match n with

  | 0 => 0

  | S _ => S (ceil_log2_S (div2 n))

  end.

Proof.

  intros.

  apply lt_div2; auto with arith.

  apply lt_wf.

Defined.



Lemma ceil_log2_S_def n: ceil_log2_S n =

  match n with

  | 0 => 0

  | S _ => S (ceil_log2_S (div2 n))

  end.

Proof. functional induction (ceil_log2_S n); auto. Qed.



Definition log2ceil (n: nat): nat :=

  match n with

  | 0 => 0

  | S n' => ceil_log2_S n'

  end.



Function floor_log2_S (n: nat) {wf lt n}: nat :=

  match n with

  | 0 => 0

  | S n' => S (floor_log2_S (div2 n'))

  end.

Proof.

  intros.

  apply le_lt_trans with n'; auto with arith.

  apply le_div2.

  apply lt_wf.

Defined.



Lemma pow2_ceil_log2: forall n, S n <= pow 2 (ceil_log2_S n).

Proof with auto.

  intro.

  functional induction (ceil_log2_S n).

    simpl...

  rewrite pow_S.

  cset' (pow 2 (ceil_log2_S (div2 (S _x)))).

  destruct H.

    inversion IHn0.

  cset (le_S_n _ _ IHn0).

  cset (div2_le_inv (S _x) H0).

  omega.

Qed.



Lemma ceil_log2_Sn_le_n: forall n, ceil_log2_S n <= n.

Proof with auto with arith.

  intro.

  functional induction (ceil_log2_S n)...

  apply le_n_S.

  apply le_trans with (div2 (S _x))...

  apply lt_n_Sm_le.

  apply lt_div2...

Qed.



Lemma log2ceil_lt: forall n, 0 < n -> log2ceil n < n.

Proof with auto.

  destruct n...

  simpl.

  unfold lt.

  intros.

  apply le_n_S.

  apply ceil_log2_Sn_le_n.

Qed.



Lemma log2ceil_le: forall n, log2ceil n <= n.

Proof with auto with arith.

  destruct n...

  apply lt_le_weak.

  apply log2ceil_lt...

Qed.



Lemma log2ceil_S_preserves_le x y: x <= y -> ceil_log2_S x <= ceil_log2_S y.

Proof with auto with arith.

  revert y.

  functional induction (ceil_log2_S x)...

  intros.

  destruct y.

    inversion H.

  apply le_trans with (S (ceil_log2_S (div2 (S y)))).

    apply le_n_S...

    apply IHn.

    apply div2_preserves_le...

  rewrite (ceil_log2_S_def (S y))...

Qed.



Lemma log2ceil_preserves_le x y: x <= y -> log2ceil x <= log2ceil y.

Proof with auto with arith.

  destruct x.

    destruct y...

  destruct y.

    intros.

    inversion H.

  simpl.

  intros.

  apply log2ceil_S_preserves_le...

Qed.



Lemma INR_S_ne_0 n: INR (S n) <> 0%R.

Proof. apply not_O_INR. discriminate. Qed.



Hint Resolve INR_S_ne_0.



Lemma O_le_inv_INR_S n: (0 <= / INR (S n))%R.

Proof. intros. apply Rlt_le. apply Rinv_0_lt_compat. apply lt_INR_0. auto with arith. Qed.



Hint Resolve O_le_inv_INR_S.



Lemma INR_0_inv n: INR n = 0%R -> n = 0.

Proof with auto.

  destruct n...

  intros.

  elimtype False.

  apply (INR_S_ne_0 _ H).

Qed.



Lemma O_lt_INR_S n: (0 < INR (S n))%R.

Proof. intros. apply lt_INR_0. auto with arith. Qed.



Hint Resolve O_lt_INR_S.



Require Import Fourier.



Ltac deep_Rle_trans h :=

  match type of h with

  | ?n <= ?u =>

    match goal with

    | |- (?l <= _)%R =>

      let q := subst_tac n u l

      in apply Rle_trans with q

    | _ => assert (False)

    end

  end.



Lemma Rmult_eq_compat_r (r r1 r2: R): (r1 = r2 -> r1 * r = r2 * r)%R.

Proof. intros. subst. reflexivity. Qed.



Lemma Rle_eq_trans x y z: (x <= y -> y = z -> x <= z)%R.

Proof. intros. fourier. Qed.



Lemma Req_ne_dec (x y: R): { x = y } + { x <> y }.

Proof with auto.

  intros.

  destruct (Rlt_le_dec x y).

    right. intro. subst. apply (Rlt_irrefl y)...

  destruct (Rle_lt_or_eq_dec _ _ r); [right | left]...

  intro. subst. apply (Rlt_irrefl y)...

Qed.



Lemma Rmult_0_inv (a b: R): (a * b)%R = 0%R -> (a = 0%R \/ b = 0%R).

Proof with auto with real.

  intros.

  destruct (Req_ne_dec a 0%R)...

    destruct (Req_ne_dec b 0%R).

    right...

  elimtype False.

  apply (prod_neq_R0 a b)...

Qed.



Lemma Req_le_trans x y z: x = y -> y <= z -> x <= z.

Proof. intros. subst. assumption. Qed.



Lemma Rle_plus_trans_l r a b c: a <= r -> r + b <= c -> a + b <= c.

Proof. intros. apply Rle_trans with (r + b); auto with real. Qed.



Lemma Rne_nlt_lt x y: x <> y -> ~ x < y -> y < x.

Proof with auto with real.

  intros.

  destruct (Rlt_le_dec x y)...

    elimtype False...

  destruct (Rle_lt_or_eq_dec y x r)...

  elimtype False...

Qed.



Lemma Rdiv_le_1 a b: 0 < a -> a <= b -> 1 <= b / a.

Proof with auto with real.

  intros.

  unfold Rdiv.

  rewrite <- (Rinv_r a)...

Qed.



Lemma Rdiv_lt_1 n m: 0 <= n -> n < m -> n / m < 1.

Proof with auto with real.

  unfold Rdiv.

  intros.

  rewrite <- (Rinv_r m)...

    apply Rmult_lt_compat_r...

    apply Rinv_0_lt_compat...

    fourier.

  intro.

  subst.

  apply (Rlt_not_le _ _ H0 H).

Qed.



Lemma zero_le_2_div_Sn n: 0 <= (2 * / INR (S n))%R.

Proof with auto with real.

  intros.

  unfold Rdiv...

  apply Rle_mult_inv_pos...

Qed.



Hint Resolve zero_le_2_div_Sn.



Definition bigO (f g: nat -> R): Prop := exists c, exists n, forall x, (n <= x)%nat -> f x <= c * g x.



Definition measured_bigO (X: Set) (m: X -> nat) (f: X -> R) (g: nat -> R): Prop

  := exists c, exists n, forall x, (n <= m x)%nat -> f x <= c * g (m x).



Notation "'over' m , f =O( g )" := (measured_bigO m f g).

