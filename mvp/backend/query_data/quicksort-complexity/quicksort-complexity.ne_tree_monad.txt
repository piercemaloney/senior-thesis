Set Implicit Arguments.

Require Import monads.
(* monads:
Global Set Automatic Coercions Import.
Set Implicit Arguments.

Require Import List.
Require Import list_utils.
Require Import util.

Record Monad: Type :=
  { mon:> Set -> Set
  ; bind: forall a b, mon a -> (a -> mon b) -> mon b
  ; ret: forall (a: Set), a -> mon a
  
  ; mon_lunit: forall (a b: Set) (x: a) (f: a -> mon b), bind (ret x) f = f x
      
  ; mon_runit: forall (a: Set) (f: mon a), bind f (@ret a) = f
      
  ; mon_assoc: forall a b c (n: mon a) (f: a -> mon b) (g: b -> mon c),
      bind (bind n f) g =
      bind n (fun x => bind (f x) g)
      
  }.

Arguments bind [m a b].
Arguments ret {m a}.

Notation "x >>= y" := (bind x y) (at level 55).
Notation "x >> y" := (bind x (fun _ => y)) (at level 30, right associativity).
Notation "x <- y ; z" := (bind y (fun x : _ => z)) (at level 30, right associativity).

Record Functor: Type :=
  { func: Set -> Set
  ; func_map: forall (a b: Set) (f: a -> b), func a -> func b
  
  ; func_id: forall (X: Set), func_map (fun (x: X) => x) = (fun (x: func X) => x)
        
  ; func_assoc: forall (a b c: Set) (x: func a) (f: b -> c) (g: a -> b),
      func_map (f ∘ g) x = func_map f (func_map g x)
        
  }.

Arguments func_map [f a b].

Definition extMonad (M: Monad): Prop := forall (A B: Set) (f g: A -> M B), ext_eq f g -> forall x, bind x f = bind x g.

Lemma bind_eqq (M: Monad) (e: extMonad M) (A B: Set) (m n: M A) (f g: A -> M B):
  m = n -> ext_eq f g -> (m >>= f) = (n >>= g).

Definition extFlipped (M: Monad): extMonad M -> forall A (x: M A) (B: Set) (f g: A -> M B), ext_eq f g -> bind x f = bind x g.

Lemma mon_lunit_under_bind (M: Monad) (A B C: Set) (a: M A) (b: A -> B) (f: A -> B -> M C):
  extMonad M -> (x <- a ; (ret (b x) >>= f x)) = (x <- a ; f x (b x)).

Section MonadFunctor. 

  Variable M: Monad.

  Definition bind_map (a b: Set) (f: a -> b) (x: M a): M b :=
    xv <- x ;
    ret (f xv).

  Hypothesis f_ext_eq: forall A B (f g: A -> B), (forall x, f x = g x) -> f = g.

  Lemma eta A B (f: A -> B): (fun x => f x) = f.

  Definition MonadFunctor: Functor.

  Definition a_monad_isa_functor T (x: M T): func MonadFunctor T := x.
    End MonadFunctor.

Module IdMonad.

  Definition C (s: Set): Set := s. 

  Definition bind A B (x: C A) (y: A -> C B): C B := y x.
  Definition ret (A: Set) (x: A): C A := x.

  Definition M: Monad.

  Coercion id_isa_monad A (a: C A): M A := a.

  Lemma ext: extMonad M.

End IdMonad.

Unset Elimination Schemes.

Inductive Tree (A: Set): Set :=
  | Leaf: A -> Tree A
  | Node: list (Tree A) -> Tree A.

Set Elimination Schemes.

Definition Tree_ind
  : forall (A: Set) (P : Tree A -> Prop),
    (forall n : A, P (Leaf n)) ->
    (forall l : list (Tree A), (forall t, In t l -> P t) -> P (Node l)) ->
  forall t, P t.

Section MonadToys.

  Definition liftM (A B: Set) (f: A -> B) (M: Monad) (x: M A): M B :=
    xv <- x ; ret (f xv).

  Definition liftM2 (A B C: Set) (f: A -> B -> C) (M: Monad) (x: M A) (y: M B): M C :=
    xv <- x ; yv <- y ; ret (f xv yv).

  Fixpoint foldlM {A B: Set} {M: Monad} (f: A -> B -> M A) (x: A) (l: list B) {struct l}: M A :=
    match l with
    | nil => ret x
    | h :: t => fax <- f x h ; foldlM f fax t
    end. 

  Fixpoint foldrM {A B: Set} {M: Monad} (f: B -> A -> M A) (x: A) (l: list B) {struct l}: M A :=
    match l with
    | nil => ret x
    | h :: t => t' <- foldrM f x t; f h t'
    end. 

  Lemma foldlM_cons (A B: Set) (M: Monad) (f: A -> B -> M A) (x: A) (h: B) (t: list B):
    foldlM f x (h :: t) = fax <- f x h ; foldlM f fax t.

  Fixpoint filterM {A: Set} {M: Monad} (p: A -> M bool) (l: list A): M (list A) :=
    match l with
    | nil => ret nil
    | h :: t =>
      b <- p h ;
      t' <- filterM p t ;
      ret (if b then h :: t' else t')
    end. 

  Lemma filterM_id (A: Set) (p: A -> IdMonad.M bool) (l: list A): filter p l = filterM p l.

End MonadToys.

Arguments liftM [A B] _ [M].

Record MonadTrans: Type :=
  { transMonad: forall (m: Monad), extMonad m -> Monad
  ; lift: forall (m: Monad) (e: extMonad m) (A: Set), m A -> transMonad e A
  }. *)

Require ne_tree.
Require Import util.
(* util:
Set Implicit Arguments.
Global Set Asymmetric Patterns.

Require Import Relations.
Require Export Basics.
Require Import Setoid.

Arguments eq {A}.
Arguments fst {A B}.

Hint Unfold compose.

Definition proj1_conj (A B: Prop) (c: A /\ B): A :=
  match c with conj x _ => x end.

Definition proj2_conj (A B: Prop) (c: A /\ B): B :=
  match c with conj _ x => x end.

Lemma eq_trans (X: Set) (a b c: X): a = b -> b = c -> a = c.

Definition cmp_cmp (x y: comparison): { x = y } + { x <> y } :=
  
  match x, y return { x = y } + { x <> y } with
  | Lt, Lt | Gt, Gt | Eq, Eq => left _ (refl_equal _)
  | a, b => right _ (
      match a, b
      return match a, b with Lt, Lt | Gt, Gt | Eq, Eq => True | _, _ => ~(a = b) end with
      | Lt, Lt | Gt, Gt | Eq, Eq => I
      | Lt, _ => fun q => match q in _ = Lt with refl_equal => I end
      | Gt, _ => fun q => match q in _ = Gt with refl_equal => I end
      | Eq, _ => fun q => match q in _ = Eq with refl_equal => I end
      end
    )
  end. 

Fixpoint nat_cmp (x y: nat) {struct x}: comparison :=
  match x, y with
  | 0, 0 => Eq
  | 0, S _ => Lt
  | S _, 0 => Gt
  | S x', S y' => nat_cmp x' y'
  end.

Ltac cset e := let v := fresh in set (v := e); clearbody v.
Ltac cset' e := let v := fresh in set (v := e) in *; clearbody v.

Ltac extro x := generalize x; clear x.

Definition unsum_bool (A B: Prop) (sb: sumbool A B): bool := if sb then true else false.

Definition decision (P: Prop): Set := { P } + { ~ P }.
Definition predDecider (T: Set) (P: T -> Prop): Type := forall t, decision (P t).

Lemma negb_inv (b b': bool): negb b = negb b' -> b = b'.

Lemma negb_negb (b: bool): negb (negb b) = b.

Definition id {X} (x: X): X := x.

Definition ext_eq {A B: Type} (f g: A -> B): Prop := forall x, f x = g x.

Lemma ext_eq_trans: forall A B, transitive _ (@ext_eq A B).

Lemma ext_eq_refl: forall A B, reflexive _ (@ext_eq A B).

Lemma ext_eq_sym: forall A B, symmetric _ (@ext_eq A B).

Add Parametric Relation X Y: (X -> Y) (@ext_eq X Y)
  reflexivity proved by (@ext_eq_refl X Y)
  symmetry proved by (@ext_eq_sym X Y)
  transitivity proved by (@ext_eq_trans X Y)
    as ext_eq_rel.

Lemma ext_eq_rw (A B: Type) (f g: A -> B): ext_eq f g -> forall x, f x = g x.

Notation " g ∘ f " := (compose g f) (at level 40, left associativity).

Lemma comp_apply (A B C: Set) (f: B -> C) (g: A -> B) (x: A): (f ∘ g) x = f (g x).

Lemma comp_ass (A B C D: Set) (f: A -> B) (g: B -> C) (h: C -> D): h ∘ (g ∘ f) = (h ∘ g) ∘ f.

Definition compose_lunit A B (f: A -> B): ext_eq (@id B ∘ f) f.

Definition compose_runit A B (f: A -> B): ext_eq (f ∘ @id A) f.

Definition map_snd (A B: Set) (f: A -> B) (C: Set) (p: C * A): C * B := (fst p, f (snd p)).

Lemma fst_map_snd (A B: Set) (f: A -> B) (C: Set) (p: C * A): fst (map_snd f p) = fst p.

Definition on {A B: Type} {C: B -> B -> Type} (g: A -> B) (f: forall b b', C b b') (x y: A): C (g x) (g y) := f (g x) (g y).

Definition unsumbool {A B}: { A } + { B } -> bool := fun x => if x then true else false.

Definition dep_flip {A B: Type} {C: A -> B -> Type} (f: forall a b, C a b) (b: B) (a: A): C a b := f a b.

Definition uncurry A B C (f: A -> B -> C) (ab: A * B): C := f (fst ab) (snd ab).

Section well_founded_pairs.

  Variables (A B: Type)
    (Ra: relation A) (Rb: relation B).

  Inductive pair_rel: relation (A * B) :=
    | pair_rel_l a a' b: Ra a a' -> pair_rel (a, b) (a', b)
    | pair_rel_r a b b': Rb b b' -> pair_rel (a, b) (a, b').

  Fixpoint acc_pairs a (Aa: Acc Ra a) {struct Aa}: forall b (Ab: Acc Rb b), Acc pair_rel (a, b) :=
    fix G b (Ab: Acc Rb b) {struct Ab}: Acc pair_rel _ := @Acc_intro _ pair_rel _
      match Aa, Ab with
      | Acc_intro x, Acc_intro y =>  fun z (za: pair_rel z (a, b)) =>
          match za in pair_rel z ab return
            (forall (p: A) (q: Ra p (fst ab)), Acc pair_rel (p, (snd ab))) -> (forall p, Rb p (snd ab) -> Acc pair_rel (fst ab, p)) -> Acc pair_rel z with
          | pair_rel_l v w c d => fun fr gr => fr _ d
          | pair_rel_r v w c d => fun fr gr => gr _ d
          end
          (fun (p: A) (q: Ra p (fst (a, b))) => @acc_pairs p (x p q) b Ab : Acc pair_rel (p, b))
          (fun (p: B) (q: Rb p (snd (a, b))) => @G p (y p q): Acc pair_rel (a, p))
      end.

   Lemma well_founded_pairs (Wa: well_founded Ra) (Wb: well_founded Rb): well_founded pair_rel.

End well_founded_pairs. *)

Definition C := ne_tree.T.

Definition ret {A: Set}: A -> C A := @ne_tree.Leaf A.

Fixpoint bind (A B: Set) (m: C A) (k: A -> C B): C B :=
  match m with
  | ne_tree.Leaf a => k a
  | ne_tree.Node ts => ne_tree.Node (ne_list.map (fun x => bind x k) ts)
  end.

Let runit (a b: Set) (x: a) (f: a -> C b): bind (ret x) f = f x.
Proof. auto. Qed.

Fixpoint lunit A (f: C A) {struct f}: bind f ret = f :=
  match f return bind f ret = f with
  | ne_tree.Leaf x => refl_equal
  | ne_tree.Node l =>
    eq_ind_r (fun l0 => ne_tree.Node l0 = ne_tree.Node l) refl_equal
      ((fix F (l: ne_list.L (C A)) :=
        match l return ne_list.map (fun u => bind u ret) l = l with
        | ne_list.one x => eq_ind_r (fun c => ne_list.one c = ne_list.one x) refl_equal (lunit x)
        | ne_list.cons x y => eq_ind_r (fun c => ne_list.cons c (ne_list.map (fun x => bind x ret) y) = ne_list.cons x y) (eq_ind_r (fun l => ne_list.cons x l = ne_list.cons x y) refl_equal (F y)) (lunit x)
        end) l)
  end.

Let assoc (a b c: Set) (n: C a) (f: a -> C b) (g: b -> C c):
  bind (bind n f) g = bind n (fun x: a => bind (f x) g).
Proof with auto.
  intros.
  generalize n. clear n.
  apply (ne_tree.alt_rect2 (fun n => bind (bind n f) g = bind n (fun x: a => bind (f x) g)) (fun l => ne_list.map (fun x => bind (bind x f) g) l = ne_list.map (fun x => bind x (fun x0 => bind (f x0) g)) l)); intros; simpl...
      rewrite ne_list.map_map.
      unfold compose.
      rewrite H...
    rewrite H...
  rewrite H.
  rewrite H0...
Qed.

Definition M: Monad := Build_Monad C bind (@ret) runit lunit assoc.

Lemma ext: extMonad M.
Proof with auto.
  unfold extMonad.
  induction x using ne_tree.alt_ind; simpl...
  replace (ne_list.map (fun x: C A => bind x f) l) with (ne_list.map (fun x: C A => bind x g) l)...
  generalize H0. clear H0.
  induction l; simpl; intros; rewrite H0...
  rewrite IHl...
Qed.

Lemma bind_Leaf (A B: Set) (x: A) (f: A -> M B): bind (ne_tree.Leaf x) f = f x.
Proof. auto. Qed.

Lemma bind_Node (A B: Set) (x: ne_list.L (ne_tree.T A)) (f: A -> M B):
  bind (ne_tree.Node x) f = ne_tree.Node (ne_list.map (fun x0: C A => bind x0 f) x).
Proof. auto. Qed.

Lemma bind_Node_one (X Y: Set) (t: M X) (g: X -> M Y):
  bind (ne_tree.Node (ne_list.one t)) g = ne_tree.Node (ne_list.one (t >>= g)).
Proof. auto. Qed.

Lemma bind_Node_cons (X Y: Set) (t: M X) (l: ne_list.L (M X)) (g: X -> M Y):
  bind (ne_tree.Node (ne_list.cons t l)) g = ne_tree.Node (ne_list.cons (bind t g) (ne_list.map (fun x => bind x g) l)).
Proof. auto. Qed.

Lemma bind_map (X Y: Set) (f: X -> Y) (x: M X): bind x (ret ∘ f) = ne_tree.map f x.
Proof with try reflexivity.
  induction x...
    simpl.
    rewrite IHx...
  simpl.
  rewrite IHx.
  f_equal.
  simpl in IHx0.
  inversion_clear IHx0...
Qed.

Definition deterministic (X: Set) (x: M X) (v: X): Prop := x = ne_tree.Leaf v.

Lemma deterministic_ret (A: Set) (a: A): deterministic (ret a) a.
Proof. unfold deterministic. auto. Qed.

Lemma ex_deterministic_ret (X: Set) (x: X): exists u, deterministic (ret x) u.
Proof. intros. exists x. apply deterministic_ret. Qed.

Lemma deterministic_bind:
  forall (A: Set) (a: M A) (z: A), deterministic a z ->
  forall (B: Set) (b: A -> M B) (v: B), deterministic (b z) v ->
    exists w, deterministic (a >>= b) w.
Proof with auto. unfold deterministic. intros. subst. simpl. exists v... Qed.

Lemma deterministic_bind_weak:
  forall (A: Set) (a: M A) (z: A), deterministic a z ->
  forall (B: Set) (b: A -> M B), (forall q, exists v, deterministic (b q) v) ->
  exists w, deterministic (a >>= b) w.
Proof with auto. intros. destruct (H0 z). apply (deterministic_bind H _ H1). Qed.

Lemma ex_deterministic_bind:
  forall (A: Set) (a: M A) (z: A), deterministic a z ->
  forall (B: Set) (b: A -> M B), (exists v, deterministic (b z) v) ->
    exists w, deterministic (a >>= b) w.
Proof. intros. destruct H0. apply (deterministic_bind H _ H0). Qed.

Lemma ex_deterministic_bind_weak:
  forall (A: Set) (a: M A) (z: A), deterministic a z ->
  forall (B: Set) (b: A -> M B), (forall q, exists v, deterministic (b q) v) ->
    exists w, deterministic (a >>= b) w.
Proof. intros. apply (deterministic_bind_weak H). assumption. Qed.

Definition pick T: ne_list.L T -> M T := @ne_tree.Node T ∘ ne_list.map (@ne_tree.Leaf T).

Lemma In_bind_inv (X Y: Set) (f: X -> M Y) (x: M X) r:
  ne_tree.In r (bind x f) -> exists z, ne_tree.In z x /\ ne_tree.In r (f z).
Proof with eauto.
  induction x in r |- *...
    simpl.
    intros.
    inversion_clear H.
    inversion_clear H0.
    destruct (IHx r H).
    destruct H0...
  intros.
  inversion_clear H.
  inversion_clear H0.
    destruct (IHx r H).
    destruct H0...
  destruct (IHx0 r (ne_tree.InNode H)).
  destruct H0.
  inversion_clear H0...
Qed.

Lemma bind_eq (X X' Y XM: Set)
  (f: X -> M Y) (f': X' -> M Y)
  (xm: X -> XM) (xm': X' -> XM):
  (forall p q, xm p = xm' q -> f p = f' q) ->
  forall (x: M X) (x': M X'),
  ne_tree.map xm x = ne_tree.map xm' x' ->
    bind x f = bind x' f'.
Proof with auto.
  induction x; simpl; destruct x'; simpl; intros; try discriminate.
      apply H.
      inversion_clear H0...
    destruct l; simpl; intros.
      simpl.
      intros.
      rewrite (IHx t)...
      inversion_clear H0...
    discriminate.
  destruct l0.
    discriminate.
  simpl in H0.
  simpl.
  inversion H0.
  clear H0.
  f_equal.
  replace (bind x f) with (bind t f').
    Focus 2.
    symmetry.
    apply IHx...
  replace (ne_list.map (fun x0: C X => bind x0 f) l) with (ne_list.map (fun x0: C X' => bind x0 f') l0)...
  assert (ne_tree.map xm (ne_tree.Node l) = ne_tree.map xm' (ne_tree.Node l0)).
    simpl.
    rewrite H3...
  cset (IHx0 (ne_tree.Node l0) H0).
  inversion_clear H1...
Qed.

Lemma map_bind (X Y Z: Set) (f: Y -> Z) (g: X -> M Y) (x: M X):
  ne_tree.map f (bind x g) =
  bind x (fun xx => ne_tree.map f (g xx)).
Proof with auto.
  induction x...
    simpl.
    rewrite IHx...
  simpl.
  rewrite IHx.
  f_equal.
  simpl in IHx0.
  inversion IHx0...
Qed.

Coercion ne_tree_isa_monad (A: Set) (a: ne_tree.T A): M A := a.
