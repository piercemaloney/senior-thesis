Require Export A2_Orientation.
(* A2_Orientation:
Require Export A1_Plan.

Section CLOCKWISE.

Parameter Clockwise : Point -> Point -> Point -> Prop.

Definition HalfPlane (A B : Point) : Figure := Clockwise A B.

Definition EquiOriented (A B C D: Point) : Prop  := 
	SubFigure (HalfPlane A B) (HalfPlane C D).

Definition EquiDirected := fun A B C D : Point =>
	EquiOriented A B C D \/ EquiOriented A B D C \/
	EquiOriented B A C D \/ EquiOriented B A D C \/
	EquiOriented C D A B \/ EquiOriented C D B A \/
	EquiOriented D C A B \/ EquiOriented D C B A.

Definition HalfLine (A B : Point) : Figure  := 
	fun C : Point => EquiOriented A B A C.

Definition Collinear (A B C : Point) := ~Clockwise A B C /\ ~Clockwise B A C.

Definition Between (A B C : Point) :=
	A <> B /\ EquiOriented A B B C.

Axiom ClockwiseAntisym : forall A B C, ~Clockwise A B C \/ ~Clockwise B A C.

Axiom ClockwisePerm : forall A B C, Clockwise A B C -> Clockwise B C A.

Axiom FourCases : forall A B C,
	Clockwise A B C \/ Clockwise B A C \/ HalfLine A B C \/ HalfLine B A C.

Axiom FourthPoint : forall A B C D,
	Clockwise A B C ->
	Clockwise A B D \/ Clockwise A D C \/ Clockwise D B C.

Axiom ChangeSense : forall A B C,
	EquiOriented A B A C ->
	EquiOriented B A C A.

Axiom ChangeSide : forall A B C D,
	EquiOriented A B C D ->
	A <> B ->
	EquiOriented D C B A.

End CLOCKWISE.

Ltac simplClockwise := 
	unfold Between, EquiDirected, HalfLine, EquiOriented, HalfPlane, SubFigure, Included, In, Collinear in *.

Ltac canonize := 
	simplClockwise; dintuition.

Ltac writeChangeSense :=
	match goal with 
		| H: forall E : Point, Clockwise ?A ?B E -> Clockwise ?A ?C E |- _ => 
			generalize (ChangeSense A B C H); generalize H; clear H; writeChangeSense
		| _ => idtac
	end.

Ltac generalizeChangeSense :=
	canonize; writeChangeSense; canonize.

Ltac writeChangeSide :=
	match goal with 
		| H: forall E : Point, Clockwise ?A ?B E -> Clockwise ?C ?D E |- _ => 
			generalize (ChangeSide A B C D H); generalize H; clear H; writeChangeSide
		| _ => idtac
	end.

Ltac generalizeChangeSide :=
	canonize; writeChangeSide; canonize.

Ltac generalizeChange :=
	canonize; writeChangeSense; simplClockwise; intros; writeChangeSide; canonize. *)

Section LENGTH_SET.

Parameter LS : Set.

Parameter LSplus : LS -> LS -> LS.

Parameter LSlt : LS -> LS -> Prop.

Definition TriangleSpec := fun x y z : LS =>
	(LSlt x (LSplus y z)) /\ (LSlt y (LSplus z x)) /\ (LSlt z (LSplus x y)).

End LENGTH_SET.

Section METRIC.

Parameter  Distance : Point -> Point -> LS.

Definition Equidistant := fun A B C D => 
	Distance A B = Distance C D.

Fixpoint DistTimesn (n : nat) (A B : Point) {struct n}: LS :=
match n with
	| O => Distance A A
	| S p => LSplus (Distance A B) (DistTimesn p A B)
end.

Axiom Archimedian : forall A B C : Point,
	A <> B -> exists n : nat, LSlt (Distance A C) (DistTimesn n A B).

Axiom DistAA : forall A B : Point,
	Distance A A = Distance B B.

Axiom DistSym : forall  A B, 
	Distance A B = Distance B A.

Axiom Chasles : forall A B C, 
	HalfLine A B C -> 
	HalfLine C B A -> 
	LSplus (Distance A B) (Distance B C) = Distance A C.

Axiom ChaslesRec : forall A B C, 
	LSplus (Distance A B) (Distance B C) = Distance A C ->
	(HalfLine A B C) /\ (HalfLine C B A).

Axiom OrderLSlt : forall A B C, 
	B <> C ->
	EquiOriented A B B C -> 
	LSlt (Distance A B) (Distance A C).

Axiom LSltOrder : forall A B C, 
	HalfLine A B C \/ HalfLine A C B ->
	LSlt (Distance A B) (Distance A C) ->
	(EquiOriented A B B C) /\ (B <> C).

Axiom TriangularIneq : forall A B C,
	Clockwise A B C ->
	LSlt (Distance A C) (LSplus (Distance A B) (Distance B C)).

End METRIC.

Section ANGLES.

Parameter AS : Set.

Parameter Angle : Point -> Point -> Point  -> AS.

Axiom CongruentItself : forall A B C D E : Point, 
	A <> B ->
	A <> C ->
	HalfLine A B D -> 
	HalfLine A C E ->
	Angle B A C = Angle E A D.

Axiom CongruentSAS : forall A B C D E F : Point, 
	A <> B ->
	A <> C ->
	Distance A B = Distance D E ->
	Distance A C = Distance D F ->
	Angle B A C = Angle E D F ->
	Distance B C  = Distance E F.

Axiom CongruentSSS : forall A B C D E F : Point, 
	A <> B ->
	A <> C ->
	Distance A B = Distance D E ->
	Distance A C = Distance D F ->
	Distance B C = Distance E F ->
	Angle B A C = Angle E D F.

Axiom SumAngles : forall A B C D E : Point,
	Clockwise A B C ->
	Clockwise A C D ->
	Clockwise A D E ->
	Angle B A C = Angle A C D ->
	Angle D A E = Angle A D C ->
	Between B A E.

End ANGLES.
