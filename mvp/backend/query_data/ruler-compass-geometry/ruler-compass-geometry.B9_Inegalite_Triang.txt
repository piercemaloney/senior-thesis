Require Export B8_Point_Def.
(* B8_Point_Def:
Require Export B7_Triangle_Equilateral.

Section POINT_PROPERTIES.

Lemma ExistsHalfLineEquidistant : forall A B C D : Point,
	A <> B ->
	C <> D ->
	{E : Point |
		HalfLine A B E /\
		Distance A E = Distance C D}.

Lemma HalfLineEquidistantEqual : forall A B C : Point,
	A <> B ->
	HalfLine A B C ->
	Distance A B = Distance A C ->
	B = C.

Lemma ExistsBetweenEquidistant : forall A B C D : Point,
	A <> B ->
	C <> D ->
	{E : Point |
		Between E A B /\
		Distance A E = Distance C D}.

Lemma ExistsEquidistantBetween : forall A B C D : Point,
	A <> B ->
	C <> D ->
	{E : Point |
		Between A B E  /\
		Distance B E = Distance C D}.

Lemma CentralSymetPoint : forall A B : Point,
	A <> B ->
	{C : Point | Distance A B = Distance B C /\ Between A B C}.

Lemma CoordinatePoint : forall A B : Point,
	A <> B ->
	{C : Point | HalfLine Oo Uu C /\ Distance Oo C = Distance A B}.

End POINT_PROPERTIES. *)

Section TRIANGLE_SPECIFICATION.

Lemma TriangleSpecPerm : forall A B C : Point,
	TriangleSpec (Distance A B) (Distance B C) (Distance C A) ->
	TriangleSpec (Distance B C) (Distance C A) (Distance A B) .
Proof.
	unfold TriangleSpec in |- *; intuition.
Qed.

Lemma ClockwiseTriangleSpec : forall A B C : Point,
	Clockwise A B C ->
	TriangleSpec (Distance A B) (Distance B C) (Distance C A).
Proof.
	unfold TriangleSpec in |- *; intuition.
	 rewrite (DistSym A B); apply TriangularIneq.
	   apply ClockwiseBCA; auto.
	 rewrite (DistSym B C); apply TriangularIneq.
	   apply ClockwiseCAB; auto.
	 rewrite (DistSym C A); apply TriangularIneq; auto.
Qed.

End TRIANGLE_SPECIFICATION.
