Require Export C2_Entre_Prop.
(* C2_Entre_Prop:
Require Export C1_DemiDroite_Prop.

Section BETWEEN_PROPERTIES.

Lemma BetweenDistinctBC : forall A B C, Between A B C -> B <> C.

Lemma BetweenSym : forall A B C,
	Between A B C -> Between C B A.

Lemma BetweenCollinear : forall A B C,
	Between A B C -> Collinear A B C.

Lemma BetweenDistinctCA : forall A B C, 
	Between A B C -> C <> A.

Lemma HalfLineBetween : forall A B C,
	A <> B ->
	B <> C ->
	HalfLine A B C -> 
	HalfLine C B A -> 
	Between A B C.

Lemma BetweenAssocLeft : forall A B C D : Point,
	Between A B C ->
	Between B C D ->
	Between A B D.

Lemma BetweenAssocRight : forall A B C D : Point,
	Between A B C ->
	Between B C D ->
	Between A C D.

Lemma EquiOrientedCollinear : forall A B C,
	EquiOriented A B C A -> Collinear A B C.

Lemma HalfLineEquiOrientedHalfLine : forall A B C D : Point,
	A <> B ->
	HalfLine A B C ->
	EquiOriented A B C D ->
	HalfLine A B D.

Lemma ClockwiseBetweenClockwise : forall A B C D E : Point,
	Clockwise A B C ->
	Between A D B ->
	Between A E C ->
	Clockwise A D E.

Lemma NotCollinearBetweenNotCollinear : forall A B C D E : Point,
	~Collinear A B C ->
	Between A D B ->
	Between A E C ->
	~Collinear A D E.

Lemma NotCollinearBetweenDistinct : forall A B C D E : Point,
	~Collinear A B C ->
	Between A D B ->
	Between A E C ->
	D <> E.

Lemma BetweenNotBetween : forall A B C : Point,
	Between A B C -> ~Between A C B.

Lemma ChaslesBetween : forall A B C : Point,
	Between A B C ->
	LSplus (Distance A B) (Distance B C) = Distance A C.

Lemma HalfLineEquidistantEqualPoints : forall A B C D E : Point, forall d : LS,
	HalfLine A C B ->
	Distance A C = d ->
	HalfLine A B D ->
	A <> C ->	
	Distance A D = LSplus (Distance A B) d ->
	Between A C E ->
	Distance C E = Distance A B ->
 	E = D.

End BETWEEN_PROPERTIES. *)

Section CONGRUENT_TRIANGLES.

Definition CongruentTriangles (A B C A' B' C' : Point) :=
	Distance A B = Distance A' B' /\
	Distance B C = Distance  B' C' /\
	Distance C A = Distance C' A'.

Lemma CongruentTrianglesSym : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	CongruentTriangles A' B' C' A B C.
Proof.
	unfold CongruentTriangles in |- *; intuition.
Qed.

Lemma CongruentTrianglesBAC : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	CongruentTriangles B A C B' A' C'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
	 rewrite DistSym; rewrite H0; apply DistSym.
	 rewrite DistSym; rewrite H2; apply DistSym.
	 rewrite DistSym; rewrite H; apply DistSym.
Qed.

Lemma CongruentTrianglesACB : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	CongruentTriangles A C B A' C' B'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
	 rewrite DistSym; rewrite H2; apply DistSym.
	 rewrite DistSym; rewrite H; apply DistSym.
	 rewrite DistSym; rewrite H0; apply DistSym.
Qed.

Lemma CongruentTrianglesCBA : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	CongruentTriangles C B A C' B' A'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
	 rewrite DistSym; rewrite H; apply DistSym.
	 rewrite DistSym; rewrite H0; apply DistSym.
	 rewrite DistSym; rewrite H2; apply DistSym.
Qed.

Lemma CongruentTrianglesBCA : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	CongruentTriangles B C A B' C' A'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
Qed.

Lemma CongruentTrianglesCAB : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	CongruentTriangles C A B C' A' B'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
Qed.

Lemma CongruentTrianglesAB : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	Distance A B = Distance A' B'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
Qed.

Lemma CongruentTrianglesBC : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	Distance B C = Distance B' C'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
Qed.

Lemma CongruentTrianglesCA : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	Distance C A = Distance C' A'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
Qed.

Lemma CongruentTrianglesA : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	A <> B ->
	A <> C ->
	Angle B A C = Angle B' A' C'.
Proof.
	unfold CongruentTriangles in |- *; intros.
	apply CongruentSSS; intuition.
	rewrite (DistSym A C); rewrite (DistSym A' C'); trivial.
Qed.

Lemma CongruentTrianglesB : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	B <> A ->
	B <> C ->
	Angle A B C = Angle A' B' C'.
Proof.
	unfold CongruentTriangles in |- *; intros.
	apply CongruentSSS; intuition.
	 rewrite DistSym; rewrite H2; apply DistSym.
	 rewrite DistSym; rewrite H4; apply DistSym.
Qed.

Lemma CongruentTrianglesC : forall A B C A' B' C' : Point,
	CongruentTriangles A B C A' B' C' ->
	C <> A ->
	C <> B ->
	Angle A C B = Angle A' C' B'.
Proof.
	unfold CongruentTriangles in |- *; intros.
	apply CongruentSSS; intuition.
	rewrite DistSym; rewrite H; apply DistSym.
Qed.

Lemma CongruentTrianglesSASA : forall A B C A' B' C' : Point,
	Distance A B = Distance A' B' ->
	Distance A C = Distance  A' C' ->
	Angle B A C = Angle B' A'  C' ->
	A <> B ->
	A <> C ->
	CongruentTriangles A B C A' B' C'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
	 apply (CongruentSAS A B C A' B' C'); intuition.
	 rewrite DistSym; rewrite H0; apply DistSym.
Qed.

Lemma CongruentTrianglesSASB : forall A B C A' B' C' : Point,
	Distance B A = Distance B' A' ->
	Distance B C = Distance  B' C' ->
	Angle A B C = Angle A' B' C' ->
	B <> A ->
	B <> C ->
	CongruentTriangles A B C A' B' C'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
	 rewrite DistSym; rewrite H; apply DistSym.
	 rewrite (DistSym C A); rewrite (DistSym C' A').
	   apply (CongruentSAS B A C B' A' C'); intuition.
Qed.

Lemma CongruentTrianglesSASC : forall A B C A' B' C' : Point,
	Distance C A = Distance C' A'  ->
	Distance C B = Distance  C' B'  ->
	Angle A C B = Angle A' C' B' ->
	C <> A ->
	C <> B ->
	CongruentTriangles A B C A' B' C'.
Proof.
	unfold CongruentTriangles in |- *; intuition.
	 apply (CongruentSAS C A B C' A' B'); intuition.
	 rewrite DistSym; rewrite H0; apply DistSym.
Qed.

End CONGRUENT_TRIANGLES.
