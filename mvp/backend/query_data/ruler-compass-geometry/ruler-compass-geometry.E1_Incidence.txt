Require Export D7_NonParalleles_Secantes.
(* D7_NonParalleles_Secantes:
Require Export D6_SumAnglesProp.

Require Export Omega.

Section DISTINCT_PARALLEL.

Lemma ThreeEmbeddedTriangles : forall A B C D E F G : Point,
	Clockwise A B C ->
	HalfLine A B D ->
	HalfLine A C E ->
	Angle A B C = Angle A D E ->
	Angle A C B = Angle A E D ->
	Between A D F ->
	Between A E G ->
	Distance D F = Distance A B ->
	Distance E G = Distance A C ->
	Angle A B C = Angle A F G /\ Angle A C B = Angle A G F.
Proof.
	intros.
	assert (H8 : Clockwise E D F).
	 generalizeChangeSense.
	   apply ClockwiseCAB; apply H9; apply H0.
	   apply ClockwiseBCA; apply H11; autoClockwise.
	 destruct (ExistsDParallelogramm _ _ _ H8) as (I, H9).
	   assert (CongruentStrictTriangles A B C E I G).
	  apply CongruentStrictTrianglesSASA.
	   assert (H10 := ParallelogrammCongruentTrianglesAC _ _ _ _ (ParallelogrammPermut _ _ _ _ H9)).
	     rewrite (DistSym E I); rewrite <- (CongruentStrictTrianglesAB _ _ _ _ _ _ H10); auto.
	   auto.
	   apply sym_eq; apply (SumAnglesCorollary E A D I G B C A).

Lemma EmbeddedSimilarTriangles : forall A B C : Point, forall n : nat,
	Clockwise A B C ->
	n > 0 ->
	forall D E : Point,
		HalfLine A B D ->
		HalfLine A C E ->
		Distance A D = DistTimesn n A B ->
		Distance A E = DistTimesn n A C ->
		Angle A B C = Angle A D E /\ Angle A C B = Angle A E D.
	
Lemma ExistsClockwiseParallelogramm : forall A B C D E : Point,
	Parallelogramm A B C D ->
	Between D E A ->
	exists F : Point, Collinear C E F /\ Clockwise B A F.

Lemma ExistsClockwiseParallelogrammSym : forall A B C D E : Point,
	Parallelogramm A B C D ->
	Between A E C ->
	exists F : Point, Collinear D E F /\ Clockwise B A F.

Lemma SecantParallelogrammSecant : forall A B : Point, forall F F' : Figure, forall D : Line F, forall D' : Line F',
	Parallelogramm (LineA F D) (LineB F D) A B ->
	F' A ->
	~F' B ->
	SecantLines F F' D D'.

Lemma ParallelogrammSuperimposed : forall A B C E : Point, forall F : Figure, forall D : Line F,
	Parallelogramm A B C E ->
	EquiDirected A B (LineA F D) (LineB F D) ->
	F C ->
	Superimposed F (Collinear C E).

End DISTINCT_PARALLEL. *)

Section INCIDENCE.

Lemma I1 : forall A B : Point, exists L : Figure, exists D : Line L, L A /\ L B.
Proof.
	intros; destruct (Apart Oo Uu A DistinctOoUu).
	 decompose [or] (ThreeCases Oo A B).
	  setLine A B (ClockwiseDistinctBC Oo A B H0) L D.
	    exists L; exists D; unfold L in |- *; split.
	   apply CollinearABA.
	   apply CollinearABB.
	  setLine B A (ClockwiseDistinctCA A Oo B H1) L D.
	    exists L; exists D; unfold L in |- *; split.
	   apply CollinearABB.
	   apply CollinearABA.
	  setLine Oo A H L D.
	    exists L; exists D; unfold L in |- *; split.
	   apply CollinearABB.
	   trivial.
	 decompose [or] (ThreeCases Uu A B).
	  setLine A B (ClockwiseDistinctBC Uu A B H0) L D.
	    exists L; exists D; unfold L in |- *; split.
	   apply CollinearABA.
	   apply CollinearABB.
	  setLine B A (ClockwiseDistinctCA A Uu B H1) L D.
	    exists L; exists D; unfold L in |- *; split.
	   apply CollinearABB.
	   apply CollinearABA.
	  setLine Uu A H L D.
	    exists L; exists D; unfold L in |- *; split.
	   apply CollinearABB.
	   trivial.
Qed.

Lemma I1' : forall A B : Point, forall F1 F2 : Figure, forall D1 : Line F1, forall D2 : Line F2, 
	A <> B ->
	F1 A ->
	F1 B ->
	F2 A ->
	F2 B ->
	Superimposed F1 F2.
Proof.
	intros; apply SuperimposedTrans with (F2 := Collinear A B).
	 apply LineAB; auto.
	 apply SuperimposedSym; apply LineAB; auto.
Qed.

Lemma I2 : forall F : Figure, forall D : Line F, exists A : Point, exists B : Point, A <> B /\ F A /\ F B.
Proof.
	intros.
	exists (LineA F D); exists (LineB F D); split.
	 exact (LineH F D).
	 split.
	  apply FLineA.
	  apply FLineB.
Qed.

Lemma I3 : exists A : Point, exists B : Point, exists C : Point, forall F : Figure, forall D : Line F, ~(F A /\ F B /\ F C).
Proof.
	exists Oo; exists Uu; exists Vv; intros F D (Ha, (Hb, Hc)).
	assert (HD := LineAB Oo Uu F D DistinctOoUu Ha Hb).
	destruct HD as (H1, H2).
	elim (ClockwiseNotCollinear _ _ _ ClockwiseUuOoVv).
	apply CollinearBAC; apply (H1 Vv Hc).
Qed.

End INCIDENCE.

