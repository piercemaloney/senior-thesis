{
    "json_file_path": "data/fermat4/Descent.json",
    "query_context_path": "/app/query_data/fermat4/fermat4.Descent.txt",
    "state": "SUCCESS",
    "model": "llemma-v4-finetuned",
    "eval_model": "gpt-4",
    "eval_strategy": "SELECTION_INSTRUCT",
    "search_strategy": "GREEDY",
    "num_generate_queries": 3,
    "num_evaluate_queries": 2,
    "tree": {
        "tactic": "Proof.",
        "fg_goals": [
            "@well_founded (prod nat nat) R_noet"
        ],
        "bg_goals": [],
        "eval_score": 0.0,
        "cost": 0.0,
        "f_score": 0.0,
        "children": [
            {
                "tactic": "unfold R_noet, f.",
                "fg_goals": [
                    "@well_founded (prod nat nat) (fun x y : prod nat nat => lt (Init.Nat.add (@fst nat nat x) (@snd nat nat x)) (Init.Nat.add (@fst nat nat y) (@snd nat nat y)))"
                ],
                "bg_goals": [],
                "eval_score": 0.0,
                "cost": 0.0,
                "f_score": 0.0,
                "children": [
                    {
                        "tactic": "Aborted: 1 subgoals, subgoal 1 (ID 10) :  well_founded (fun x y : prod nat nat => lt (Init.",
                        "fg_goals": [],
                        "bg_goals": [],
                        "eval_score": -Infinity,
                        "cost": 0.0,
                        "f_score": 0.0,
                        "children": []
                    },
                    {
                        "tactic": "apply well_founded_lt_compat with (f := f).",
                        "fg_goals": [
                            "forall (x y : prod nat nat) (_ : lt (Init.Nat.add (@fst nat nat x) (@snd nat nat x)) (Init.Nat.add (@fst nat nat y) (@snd nat nat y))), lt (f x) (f y)"
                        ],
                        "bg_goals": [],
                        "eval_score": 0.0,
                        "cost": 0.0,
                        "f_score": 0.0,
                        "children": [
                            {
                                "tactic": "intros x y H.",
                                "fg_goals": [
                                    "lt (f x) (f y)"
                                ],
                                "bg_goals": [],
                                "eval_score": 0.0,
                                "cost": 0.0,
                                "f_score": 0.0,
                                "children": []
                            },
                            {
                                "tactic": "intros x y H; inversion H; auto.",
                                "fg_goals": [],
                                "bg_goals": [],
                                "eval_score": Infinity,
                                "cost": 0.0,
                                "f_score": 0.0,
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "tactic": "unfold R_noet.",
                "fg_goals": [
                    "@well_founded (prod nat nat) (fun x y : prod nat nat => lt (Init.Nat.add (@fst nat nat x) (@snd nat nat x)) (Init.Nat.add (@fst nat nat y) (@snd nat nat y)))"
                ],
                "bg_goals": [],
                "eval_score": 0.0,
                "cost": 0.0,
                "f_score": 0.0,
                "children": []
            }
        ]
    },
    "successful_tactic_path": [
        "Proof.",
        "unfold R_noet, f.",
        "apply well_founded_lt_compat with (f := f).",
        "intros x y H; inversion H; auto."
    ]
}