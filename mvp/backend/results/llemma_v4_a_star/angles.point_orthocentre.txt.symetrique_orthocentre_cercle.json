{
    "json_file_path": "data/angles/point_orthocentre.json",
    "query_context_path": "/app/query_data/angles/angles.point_orthocentre.txt",
    "state": "TIMEOUT",
    "model": "llemma-v4-finetuned",
    "eval_model": "gpt-4",
    "eval_strategy": "ZERO_TO_ONE_INSTRUCT",
    "search_strategy": "A_STAR",
    "num_generate_queries": 12,
    "num_evaluate_queries": 22,
    "tree": {
        "tactic": "Proof.",
        "fg_goals": [
            "forall (H' : PO) (_ : R (cons (vec H' B) (vec B C)) (cons (vec B C) (vec H B))) (_ : R (cons (vec H' C) (vec B C)) (cons (vec B C) (vec H C))), sont_cocycliques A B C H'"
        ],
        "bg_goals": [],
        "eval_score": 0.0,
        "cost": 0.0,
        "f_score": 0.0,
        "children": [
            {
                "tactic": "intros H' H1 H2.",
                "fg_goals": [
                    "sont_cocycliques A B C H'"
                ],
                "bg_goals": [],
                "eval_score": 0.0,
                "cost": 0.2,
                "f_score": 1.2,
                "children": [
                    {
                        "tactic": "unfold sont_cocycliques; intros O O' [H3 [H4 H5]]; exists O; exists O'.",
                        "fg_goals": [],
                        "bg_goals": [],
                        "eval_score": -Infinity,
                        "cost": 0.0,
                        "f_score": 0.0,
                        "children": []
                    },
                    {
                        "tactic": "unfold sont_cocycliques.",
                        "fg_goals": [
                            "@ex PO (fun O : PO => @ex PO (fun O' : PO => and (and (circonscrit A B C O) (circonscrit H' B C O')) (and (colineaire (vec O B) (vec O' B)) (colineaire (vec O C) (vec O' C)))))"
                        ],
                        "bg_goals": [],
                        "eval_score": 0.0,
                        "cost": 0.4,
                        "f_score": 1.4,
                        "children": [
                            {
                                "tactic": "exists H; exists H'.",
                                "fg_goals": [
                                    "and (and (circonscrit A B C H) (circonscrit H' B C H')) (and (colineaire (vec H B) (vec H' B)) (colineaire (vec H C) (vec H' C)))"
                                ],
                                "bg_goals": [],
                                "eval_score": 0.0,
                                "cost": 0.6000000000000001,
                                "f_score": 1.6,
                                "children": [
                                    {
                                        "tactic": "unfold circonscrit.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": []
                                    },
                                    {
                                        "tactic": "apply conj.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": [
                                            {
                                                "tactic": "apply conj; auto.",
                                                "fg_goals": [],
                                                "bg_goals": [],
                                                "eval_score": 0.0,
                                                "cost": 1.0,
                                                "f_score": 2.0,
                                                "children": []
                                            },
                                            {
                                                "tactic": "apply conj.",
                                                "fg_goals": [],
                                                "bg_goals": [],
                                                "eval_score": 0.0,
                                                "cost": 1.0,
                                                "f_score": 2.0,
                                                "children": []
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "tactic": "exists H.",
                                "fg_goals": [
                                    "@ex PO (fun O' : PO => and (and (circonscrit A B C H) (circonscrit H' B C O')) (and (colineaire (vec H B) (vec O' B)) (colineaire (vec H C) (vec O' C))))"
                                ],
                                "bg_goals": [],
                                "eval_score": 0.0,
                                "cost": 0.6000000000000001,
                                "f_score": 1.6,
                                "children": [
                                    {
                                        "tactic": "exists H.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": [
                                            {
                                                "tactic": "split; auto.",
                                                "fg_goals": [],
                                                "bg_goals": [],
                                                "eval_score": 0.0,
                                                "cost": 1.0,
                                                "f_score": 2.0,
                                                "children": []
                                            },
                                            {
                                                "tactic": "split.",
                                                "fg_goals": [],
                                                "bg_goals": [],
                                                "eval_score": 0.0,
                                                "cost": 1.0,
                                                "f_score": 2.0,
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "tactic": "exists H'.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                "tactic": "intros H' H0 H1.",
                "fg_goals": [
                    "sont_cocycliques A B C H'"
                ],
                "bg_goals": [],
                "eval_score": 0.0,
                "cost": 0.2,
                "f_score": 1.2,
                "children": [
                    {
                        "tactic": "unfold sont_cocycliques.",
                        "fg_goals": [
                            "@ex PO (fun O : PO => @ex PO (fun O' : PO => and (and (circonscrit A B C O) (circonscrit H' B C O')) (and (colineaire (vec O B) (vec O' B)) (colineaire (vec O C) (vec O' C)))))"
                        ],
                        "bg_goals": [],
                        "eval_score": 0.0,
                        "cost": 0.4,
                        "f_score": 1.4,
                        "children": [
                            {
                                "tactic": "unfold circonscrit.",
                                "fg_goals": [],
                                "bg_goals": [],
                                "eval_score": 0.0,
                                "cost": 0.6000000000000001,
                                "f_score": 1.6,
                                "children": [
                                    {
                                        "tactic": "elim triangle; intros H2 H3; elim H3; intros H4 H5; elim H5; intros H6 H7; elim H7; intros H8 H9; elim H9; intros H10 H11; elim H11; intros H12 H13; elim H13; intros H14 H",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": []
                                    },
                                    {
                                        "tactic": "unfold isocele.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": []
                                    }
                                ]
                            },
                            {
                                "tactic": "exists H; exists H'; split; auto.",
                                "fg_goals": [],
                                "bg_goals": [],
                                "eval_score": 0.0,
                                "cost": 0.6000000000000001,
                                "f_score": 1.6,
                                "children": [
                                    {
                                        "tactic": "apply symetrique_orthocentre_circonscrit; auto.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": [
                                            {
                                                "tactic": "Qed # How to calculate the number of possible combinations? [closed] [duplicate] (combinatorics) [closed] (combinatorics) (combinatorics) (combinatorics) (combinatorics) (combinatorics) (combinatorics) (combinatorics) (combinator",
                                                "fg_goals": [],
                                                "bg_goals": [],
                                                "eval_score": 0.0,
                                                "cost": 1.0,
                                                "f_score": 2.0,
                                                "children": []
                                            },
                                            {
                                                "tactic": "Qed.",
                                                "fg_goals": [],
                                                "bg_goals": [],
                                                "eval_score": 0.0,
                                                "cost": 1.0,
                                                "f_score": 2.0,
                                                "children": []
                                            }
                                        ]
                                    },
                                    {
                                        "tactic": "apply transitive with (double (cons (vec H' C) (vec H' B))); auto.",
                                        "fg_goals": [],
                                        "bg_goals": [],
                                        "eval_score": 0.0,
                                        "cost": 0.8,
                                        "f_score": 1.8,
                                        "children": []
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "tactic": "unfold sont_cocycliques; intros O O' H2 H3 H4 H5 H6.",
                        "fg_goals": [],
                        "bg_goals": [],
                        "eval_score": -Infinity,
                        "cost": 0.0,
                        "f_score": 0.0,
                        "children": []
                    }
                ]
            }
        ]
    },
    "successful_tactic_path": null
}