

Require Import Arith.

Require Import Test.



Inductive lambda : Set :=

  | Ref : nat -> lambda

  | Abs : lambda -> lambda

  | App : lambda -> lambda -> lambda.



Definition relocate (i k n : nat) :=

  match test k i with

  

       | left _ => n + i

    | _ => i

  end.



Fixpoint lift_rec (L : lambda) : nat -> nat -> lambda :=

  fun k n : nat =>

  match L with

  | Ref i => Ref (relocate i k n)

  | Abs M => Abs (lift_rec M (S k) n)

  | App M N => App (lift_rec M k n) (lift_rec N k n)

  end.



Definition lift (n : nat) (N : lambda) := lift_rec N 0 n.



Definition insert_Ref (N : lambda) (i k : nat) :=

  match compare k i with

  

       | inleft (left _) => Ref (pred i)

    | inleft _ => lift k N

    | _ => Ref i

  end.



Fixpoint subst_rec (L : lambda) : lambda -> nat -> lambda :=

  fun (N : lambda) (k : nat) =>

  match L with

  | Ref i => insert_Ref N i k

  | Abs M => Abs (subst_rec M N (S k))

  | App M M' => App (subst_rec M N k) (subst_rec M' N k)

  end.



Definition subst (N M : lambda) := subst_rec M N 0.



