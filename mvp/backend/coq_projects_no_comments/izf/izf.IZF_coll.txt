
Require Import IZF_logic.
Require Import IZF_base.

Axiom Code : Typ1.  

Axiom eps : (Typ1 -> Prop) -> Code -> Typ1.

Axiom
  choice : forall P : Typ1 -> Prop, exT P -> ex Code (fun c => P (eps P c)).

Definition foo (X Y : Typ1) (Z : X -> Y -> Typ1) : Typ1 :=
  (forall (x : X) (y : Y), Rel (Z x y) -> Z x y -> Prop) -> Prop.

Definition foo_in (X Y : Typ1) (Z : X -> Y -> Typ1) 
  (x : X) (y : Y) (R : Rel (Z x y)) (z : Z x y) : foo X Y Z :=
  fun f => f x y R z.

Definition foo_rt (X Y : Typ1) (Z : X -> Y -> Typ1) : 
  foo X Y Z := fun _ => bot.

Lemma eq_foo_in_rt :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x : X) (y : Y) 
   (R : Rel (Z x y)) (z : Z x y),
 eq (foo X Y Z) (foo_in X Y Z x y R z) (foo_rt X Y Z) -> bot.

Proof fun X Y Z x y R z e => e (fun u => u (fun _ _ _ _ => top)) top_intro.

Lemma eq_foo_rt_in :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x : X) (y : Y) 
   (R : Rel (Z x y)) (z : Z x y),
 eq (foo X Y Z) (foo_rt X Y Z) (foo_in X Y Z x y R z) -> bot.

Proof
  fun X Y Z x y R z e =>
  e (fun u => u (fun _ _ _ _ => top) -> bot) (fun p => p) top_intro.

Lemma eq_foo_in_in :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x1 x2 : X) 
   (y1 y2 : Y) (R1 : Rel (Z x1 y1)) (R2 : Rel (Z x2 y2)) 
   (z1 : Z x1 y1) (z2 : Z x2 y2),
 
 eq (foo X Y Z) (foo_in X Y Z x1 y1 R1 z1) (foo_in X Y Z x2 y2 R2 z2)
 
  ->
 forall P : forall (x : X) (y : Y), Rel (Z x y) -> Z x y -> Prop,
 P x1 y1 R1 z1 -> P x2 y2 R2 z2.

Proof fun X Y Z x1 x2 y1 y2 R1 R2 z1 z2 H P p => H (fun f => f P) p.

Definition FOO (X Y : Typ1) (Z : X -> Y -> Typ1) (u' u : foo X Y Z) : Prop :=
  forall E : Prop,
  (forall (x : X) (y : Y) (R : Rel (Z x y)) (z' z : Z x y),
   eq (foo X Y Z) u' (foo_in X Y Z x y R z') ->
   eq (foo X Y Z) u (foo_in X Y Z x y R z) -> R z' z -> E) ->
  (forall (x : X) (y : Y) (R : Rel (Z x y)) (z' : Z x y),
   eq (foo X Y Z) u' (foo_in X Y Z x y R z') ->
   eq (foo X Y Z) u (foo_rt X Y Z) -> E) -> E.

Lemma FOO_in :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x : X) (y : Y) 
   (R : Rel (Z x y)) (z' z : Z x y),
 R z' z -> FOO X Y Z (foo_in X Y Z x y R z') (foo_in X Y Z x y R z).

Proof
  fun X Y Z x y R z' z H E H1 H2 =>
  H1 x y R z' z (eq_refl (foo X Y Z) (foo_in X Y Z x y R z'))
    (eq_refl (foo X Y Z) (foo_in X Y Z x y R z)) H.

Lemma FOO_rt :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x : X) (y : Y) 
   (R : Rel (Z x y)) (z' : Z x y),
 FOO X Y Z (foo_in X Y Z x y R z') (foo_rt X Y Z).

Proof
  fun X Y Z x y R z' E H1 H2 =>
  H2 x y R z' (eq_refl (foo X Y Z) (foo_in X Y Z x y R z'))
    (eq_refl (foo X Y Z) (foo_rt X Y Z)).

Lemma FOO_deloc :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x : X) (y : Y) (R : Rel (Z x y)),
 deloc (Z x y) R (foo X Y Z) (FOO X Y Z) (foo_in X Y Z x y R).

Proof.
intros X Y Z x y R; unfold deloc in |- *; apply and_intro.

intros; apply FOO_in; assumption.

intros z f' H; apply H; clear H.

intros x0 y0 R0 z0' z0 H2 H3 H4; apply (eq_sym _ _ _ H2).
generalize z0' H4; clear H2 H4 f' z0'.

apply (eq_foo_in_in X Y Z x x0 y y0 R R0 z z0 H3).
intros z' H4; apply ex2_intro with z'.
assumption. apply eq_refl.

intros x0 y0 R0 z0' H1 H2; apply (eq_foo_in_rt _ _ _ _ _ _ _ H2).
Qed.

Lemma FOO_eqv :
 forall (X Y : Typ1) (Z : X -> Y -> Typ1) (x : X) (y : Y) 
   (R : Rel (Z x y)) (z : Z x y),
 EQV (Z x y) R z (foo X Y Z) (FOO X Y Z) (foo_in X Y Z x y R z).

Proof.
intros; apply EQV_deloc; apply FOO_deloc.
Qed.

Lemma FOO_elt :
 forall (X Y : Typ1) (Z : X -> Y -> Prop) (x : X) (y : Y) 
   (R : Rel (Z x y)) (z : Z x y),
 ELT (Z x y) R z (foo X Y Z) (FOO X Y Z) (foo_rt X Y Z).

Proof.
intros X Y Z x y R z.
apply ELT_intro with (foo_in X Y Z x y R z).
apply FOO_rt.  apply FOO_eqv.
Qed.

Definition REL : Typ2 :=
  forall X : Typ1, Rel X -> X -> forall Y : Typ1, Rel Y -> Y -> Prop.

Definition LCOMPAT (R : REL) : Prop :=
  forall (X : Typ1) (A : Rel X) (a : X) (Y : Typ1) 
    (B : Rel Y) (b : Y) (Z : Typ1) (C : Rel Z) (c : Z),
  EQV X A a Y B b -> R Y B b Z C c -> R X A a Z C c.

Definition RCOMPAT (R : REL) : Prop :=
  forall (X : Typ1) (A : Rel X) (a : X) (Y : Typ1) 
    (B : Rel Y) (b : Y) (Z : Typ1) (C : Rel Z) (c : Z),
  R X A a Y B b -> EQV Y B b Z C c -> R X A a Z C c.

Definition exG_rel (X : Typ1) (A : Rel X) (a : X)
  (P : forall Y : Typ1, Rel Y -> Y -> Prop) :=
  forall E : Prop,
  (forall (Y : Typ1) (B : Rel Y) (b : Y), ELT Y B b X A a -> P Y B b -> E) ->
  E.

Lemma exG_rel_intro :
 forall (X : Typ1) (A : Rel X) (a : X)
   (P : forall Y : Typ1, Rel Y -> Y -> Prop) (Y : Typ1) 
   (B : Rel Y) (b : Y), ELT Y B b X A a -> P Y B b -> exG_rel X A a P.

Proof fun X A a P Y B b H1 H2 E f => f Y B b H1 H2.

Definition coll_fam (X : Typ1) (A : Rel X) (a : X) 
  (R : REL) (x : X) : Code -> Typ1 :=
  eps (fun Y => ex (Rel Y) (fun B => ex Y (fun b => R X A x Y B b))).

Definition coll (X : Typ1) (A : Rel X) (a : X) (R : REL) : Typ1 :=
  foo X Code (coll_fam X A a R).

Definition COLL (X : Typ1) (A : Rel X) (a : X) (R : REL) :
  Rel (coll X A a R) := FOO X Code (coll_fam X A a R).

Definition coll_rt (X : Typ1) (A : Rel X) (a : X) (R : REL) : 
  coll X A a R := foo_rt X Code (coll_fam X A a R).

Theorem collection :
 forall (X : Typ1) (A : Rel X) (a : X) (R : REL),
 LCOMPAT R ->
 RCOMPAT R ->
 (forall (X' : Typ1) (A' : Rel X') (a' : X'),
  ELT X' A' a' X A a -> exG (fun Y' B' b' => R X' A' a' Y' B' b')) ->
 forall (X' : Typ1) (A' : Rel X') (a' : X'),
 ELT X' A' a' X A a ->
 exG_rel (coll X A a R) (COLL X A a R) (coll_rt X A a R)
   (fun Y' B' b' => R X' A' a' Y' B' b').

Proof.
intros X A a R HL HR H0 X' A' a' H1.
apply H1; clear H1; intros x H1 H2.

cut (exT (fun Y => ex (Rel Y) (fun B => ex Y (fun b => R X A x Y B b)))).

intro H; apply (choice _ H); clear H; intros c H.
apply H; clear H; intros B H; change (Rel (coll_fam X A a R x c)) in B.
apply H; clear H; intros b H3; change (coll_fam X A a R x c) in b.
change (R X A x (coll_fam X A a R x c) B b) in H3.
apply exG_rel_intro with (coll_fam X A a R x c) B b.
apply ELT_intro with (foo_in X Code (coll_fam X A a R) x c B b).
unfold COLL, coll_rt in |- *; apply FOO_rt.
unfold coll, COLL in |- *; apply FOO_eqv.
apply HL with X A x; assumption.

apply (H0 X A x (ELT_direct X A a x H1)); intros Y B b H3.
apply exT_intro with Y.
apply ex_intro with B.
apply ex_intro with b.
assumption.
Qed.

Theorem collection2 :
 forall (X : Typ1) (A : Rel X) (a : X) (R : REL),
 LCOMPAT R ->
 RCOMPAT R ->
 forall (X' : Typ1) (A' : Rel X') (a' : X'),
 ELT X' A' a' X A a ->
 exG (fun Y' B' b' => R X' A' a' Y' B' b') ->
 exG_rel (coll X A a R) (COLL X A a R) (coll_rt X A a R)
   (fun Y' B' b' => R X' A' a' Y' B' b').

Proof.
intros X A a R HL HR X' A' a' H H1.
apply H; clear H; intros x H2 H3.

cut (exT (fun Y => ex (Rel Y) (fun B => ex Y (fun b => R X A x Y B b)))).

intro H; apply (choice _ H); clear H; intros c H.
apply H; clear H; intros B H; change (Rel (coll_fam X A a R x c)) in B.
apply H; clear H; intros b H4; change (coll_fam X A a R x c) in b.
change (R X A x (coll_fam X A a R x c) B b) in H4.
apply exG_rel_intro with (coll_fam X A a R x c) B b.
apply ELT_intro with (foo_in X Code (coll_fam X A a R) x c B b).
unfold COLL, coll_rt in |- *; apply FOO_rt.
unfold coll, COLL in |- *; apply FOO_eqv.
apply HL with X A x; assumption.

apply H1; clear H1; intros Y B b H1.
apply exT_intro with Y.
apply ex_intro with B.
apply ex_intro with b.
apply HL with X' A' a'.
apply EQV_sym; assumption. 
assumption.
Qed.
