

Require Import Coqlib Maps AST Registers Op RTL Conventions.



Fixpoint is_return (n: nat) (f: function) (pc: node) (rret: reg)

                   {struct n}: bool :=

  match n with

  | O => false

  | S n' =>

      match f.(fn_code)!pc with

      | Some(Ireturn None) => true

      | Some(Ireturn (Some r)) => Reg.eq r rret

      | Some(Inop s) => is_return n' f s rret

      | Some(Iop op args dst s) =>

          match is_move_operation op args with

          | None => false

          | Some src =>

              if Reg.eq rret src

              then is_return n' f s dst

              else false

          end

      | _ => false

      end

  end.



Definition niter := 5%nat.



Definition transf_instr (f: function) (pc: node) (instr: instruction) :=

  match instr with

  | Icall sig ros args res s =>

      if is_return niter f s res

      && tailcall_is_possible sig

      && opt_typ_eq sig.(sig_res) f.(fn_sig).(sig_res)

      then Itailcall sig ros args

      else instr

  | _ => instr

  end.



Definition transf_function (f: function) : function :=

  if zeq f.(fn_stacksize) 0

  then RTL.transf_function (transf_instr f) f

  else f.



Definition transf_fundef (fd: fundef) : fundef :=

  AST.transf_fundef transf_function fd.



Definition transf_program (p: program) : program :=

  transform_program transf_fundef p.

