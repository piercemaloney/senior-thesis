

Set Nested Proofs Allowed.

Require Import nat_trees.

Require Import More_on_Lists.

Require Import search_trees.

Require Import Adding.



Theorem list2trees :

 forall l : list nat,

 {t : nat_tree | search t /\ (forall p : nat, In p l <-> occ t p)}.



Proof.



 Lemma list2trees_aux :

  forall (l : list nat) (t : nat_tree),

  search t ->

  {t' : nat_tree |

  search t' /\ (forall p : nat, In p l \/ occ t p <-> occ t' p)}.

 Proof.

simple induction l;

 [ intros t s; exists t

 | intros hd tl hr t H; elim (insert hd t H); intros x i; elim (hr x);

    [ intros n a; exists n | idtac ] ].



  split; auto with searchtrees datatypes.

  intro p; unfold iff in |- *; split; intros H0.

  elim H0; auto with searchtrees datatypes.

  intro; absurd (In p nil); auto with searchtrees datatypes.

  auto with searchtrees datatypes.



2: elim i; auto with searchtrees datatypes.

  

  split; elim a; auto with searchtrees datatypes.

  

  intros; unfold iff in |- *; split; intros.

  elim H2; intros.

  inversion_clear H3.

  rewrite <- H4.

  elim (H1 hd); intros.

  apply H3. 

  right; elim i; auto with searchtrees datatypes.

  elim (H1 p); auto with searchtrees datatypes.

  elim (H1 p); intros.

  apply H4.

  right; elim i; auto with searchtrees datatypes.

  elim (H1 p); intros.

  elim (H4 H2); intros. 

  auto with searchtrees datatypes.

  elim i; intros.

  elim (H8 p).

  auto with searchtrees datatypes.

  simple induction 1; auto with searchtrees datatypes.

  auto with searchtrees datatypes.

 Defined.



 intros l; elim (list2trees_aux l NIL); [ intros x a; exists x | idtac ].

 

 elim a; split; [ auto with searchtrees datatypes | idtac ].

 intro p0; unfold iff in |- *; split; intros.

 elim (H0 p0); intros.

 auto with searchtrees datatypes.

 elim (H0 p0); intros. 

 elim (H3 H1); auto with searchtrees datatypes.

 intro; absurd (occ NIL p0); auto with searchtrees datatypes.

 auto with searchtrees datatypes.

Defined.



