

Require Import Ensf_types.

Require Import Ensf_dans.

Require Import Ensf_union.

Require Import Ensf_inclus.



Fixpoint map (f : Elt -> Elt) (e : Ensf) {struct e} : Ensf :=

  match e with

  | empty => empty

  | add y e => add (f y) (map f e)

  end.



Lemma dans_map :

 forall (f : Elt -> Elt) (a : Ensf) (x : Elt),

 dans x (map f a) -> exists y : Elt, dans y a /\ x = f y.

intros f.

simple induction a.

simpl in |- *.

intros x H.

absurd (dans x empty); auto.



intros a0 b H x.

simpl in |- *.

intro.

cut (f a0 = x :>Elt \/ dans x (map f b)).

2: apply dans_add; auto.

intro H1; elim H1; clear H1.

intro; exists a0; auto.

intro.

cut (exists y : Elt, dans y b /\ x = f y).

intro H2; elim H2; clear H2.

2: auto.

intros x0 H2; elim H2; clear H2.

intros.

exists x0.

split; auto.

Qed.

Hint Resolve dans_map.



Lemma dans_map_inv :

 forall (f : Elt -> Elt) (x : Elt) (a : Ensf),

 dans x a -> dans (f x) (map f a).

intros f x.

simple induction a.

intro.

apply (dans_empty_imp_P x); auto.



intros a0 b H.

simpl in |- *.

intro H1.

cut (a0 = x :>Elt \/ dans x b).

2: apply dans_add; auto.

intro H2; elim H2; clear H2.

intro.

rewrite H0; auto.

auto.

Qed.

Hint Resolve dans_map_inv.



Lemma map_union :

 forall (f : Elt -> Elt) (a b : Ensf),

 union (map f a) (map f b) = map f (union a b) :>Ensf.

intro f.

simple induction a; simpl in |- *; auto.

Qed.

Hint Resolve map_union.



Lemma dans_map_trans :

 forall (x : Elt) (f : Elt -> Elt) (a b : Ensf),

 dans x (map f a) -> inclus a b -> dans x (map f b).

intros.

cut (exists y : Elt, dans y a /\ x = f y :>Elt).

2: apply dans_map; auto. 

intro Ht; elim Ht; clear Ht.

intros y Ht; elim Ht; clear Ht.

intros.

cut (dans y b).

2: apply dans_trans with a; auto.

intro.

rewrite H2.

apply dans_map_inv; auto.

Qed.



Lemma map_egal :

 forall (f g : Elt -> Elt) (E : Ensf),

 (forall x : Elt, dans x E -> f x = g x :>Elt) -> map f E = map g E :>Ensf.

intros f g.

simple induction E; simpl in |- *; auto.

Qed.



Lemma map_inclus :

 forall (a b : Ensf) (f : Elt -> Elt),

 inclus a b -> inclus (map f a) (map f b).

unfold inclus in |- *.

intros.

cut (exists y : Elt, dans y a /\ x = f y :>Elt).

2: apply dans_map; auto.

intro Ht; elim Ht; clear Ht; intros y Ht; elim Ht; clear Ht; intros.

cut (dans y b); auto.

intro.

replace x with (f y); auto.

Qed.
