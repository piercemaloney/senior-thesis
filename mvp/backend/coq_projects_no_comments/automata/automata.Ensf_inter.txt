
Require Import Ensf_types.
Require Import Ensf_dans.
Require Import Ensf_union.
Require Import Ensf_inclus.

Definition inter (A B C : Ensf) : Prop :=
  inclus C A /\
  inclus C B /\ (forall x : Elt, dans x A -> dans x B -> dans x C).

Lemma union_inter :
 forall a b c : Ensf,
 inter a b empty -> inter a c empty -> inter a (union b c) empty.
unfold inter in |- *.
intros.
elim H0; clear H0.
intros H0 H1; elim H1; clear H1; intros H1 H2.
elim H; clear H.
intros H3 H4; elim H4; clear H4; intros H4 H5.
split; auto.
split.
apply empty_inclus.
intros.
cut (dans x b \/ dans x c); auto.
intro H7; elim H7; auto.
Qed.

Lemma inter_union :
 forall A B C : Ensf,
 inter A C empty -> inter B C empty -> inter (union A B) C empty.
unfold inter in |- *.
intros.
elim H0; clear H0.
intros H0 H1; elim H1; clear H1; intros H1 H2.
elim H; clear H.
intros H3 H4; elim H4; clear H4; intros H4 H5.
split; auto.
split; auto.
intros.
cut (dans x A \/ dans x B); auto.
intro H7; elim H7; auto.
Qed.

Lemma inter_dans :
 forall (A B : Ensf) (x : Elt), inter A B empty -> dans x A -> ~ dans x B.
unfold inter in |- *.
intros.
elim H; clear H; intros H Ht; elim Ht; clear Ht; intros H1 H2.
red in |- *; intro.
cut (dans x empty); auto.
intro.
apply dans_empty_imp_P with x; auto.
Qed.

Lemma sym_inter : forall A B C : Ensf, inter A B C -> inter B A C.
unfold inter in |- *.
intros.
elim H; clear H; intros H Ht; elim Ht; clear Ht; intros H0 H1.
auto.
Qed.