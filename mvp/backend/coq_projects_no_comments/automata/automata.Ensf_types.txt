
Inductive Ensf : Set :=
  | empty : Ensf
  | add : Elt -> Ensf -> Ensf
with Elt : Set :=
  | natural : nat -> Elt
  | couple : Elt -> Elt -> Elt
  | up : Ensf -> Elt
  | word : Word -> Elt
with Word : Set :=
  | nil : Word
  | cons : Elt -> Word -> Word.

Definition natural_inv (e : Elt) : nat :=
  match e with
  | natural n => n
  | _ => 0
  end.

Lemma nat_invol : forall n : nat, natural_inv (natural n) = n.
auto.
Qed.

Definition word_inv (e : Elt) : Word :=
  match e with
  | word w => w
  | _ => nil
  end.

Lemma add_add :
 forall (a b : Elt) (c d : Ensf), a = b -> c = d -> add a c = add b d.
intros.
rewrite H.
rewrite H0.
trivial.
Qed.
Hint Resolve add_add.

Lemma couple_couple :
 forall a b c d : Elt, a = b -> c = d -> couple a c = couple b d.
intros.
rewrite H.
rewrite H0.
trivial.
Qed.

Lemma word_word : forall a b : Word, a = b -> word a = word b.
intros.
apply (f_equal (A:=Word) (B:=Elt)); auto.
Qed.
Hint Resolve word_word.
 
Lemma word_word_inv : forall a b : Word, word a = word b -> a = b.
intros a b H.
injection H.
trivial.
Qed.

Definition zero : Elt := natural 0.
Definition un : Elt := natural 1.
Definition singleton (e : Elt) : Ensf := add e empty.

Lemma False_imp_P : forall P : Prop, False -> P.
intros.
elimtype False.
assumption.
Qed.

Lemma equal_add : forall (a b : Ensf) (e : Elt), a = b -> add e a = add e b.
intros.
apply (f_equal (A:=Ensf) (B:=Ensf)); auto.
Qed.