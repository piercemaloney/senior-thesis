
Require Import monoid.
Require Import machine.
Require Import Constants.

Inductive Call : Set :=
  | Call_M : nat -> Call
  | Call_C : nat -> nat -> Call
  | Call_K : nat -> nat -> Call.
 
Definition conform (c : Call) : Prop :=
  match c return Prop with
  | Call_M n =>
        0 < n
       
  | Call_C n p => 1 < p /\ p < n
       
  | Call_K n p => 0 < p /\ p < n
  end.

Inductive Spec : Call -> Code -> Prop :=
  | m_spec :
      forall (n : nat) (c : Code),
      (forall (M : Set) (MO : monoid M) (a : M) (s : Stack M),
       Exec M MO c (config M a s) = config M (power M MO a n) s) ->
      Spec (Call_M n) c
  | c_spec :
      forall (p q : nat) (c : Code),
      (forall (M : Set) (MO : monoid M) (a : M) (s : Stack M),
       Exec M MO c (config M a s) = config M (power M MO a p) s) ->
      Spec (Call_C p q) c
  | k_spec :
      forall (p q : nat) (c : Code),
      (forall (M : Set) (MO : monoid M) (a : M) (s : Stack M),
       Exec M MO c (config M a s) =
       config M (power M MO a p) (push M (power M MO a q) s)) ->
      Spec (Call_K p q) c.

Inductive gencode (c : Call) : Set :=
    gencode_intro : forall co : Code, Spec c co -> gencode c.

Inductive addchain_spec (n : nat) : Set :=
    addchain_spec_intro : gencode (Call_M n) -> addchain_spec n.

