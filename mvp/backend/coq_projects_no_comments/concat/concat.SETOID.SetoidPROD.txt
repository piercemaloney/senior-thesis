
Require Export Map.

Set Implicit Arguments.
Unset Strict Implicit.

Section s_prod.

Variable A B : Setoid.

Structure Sprod : Type :=  {Sprod_l : A; Sprod_r : B}.

Definition Equal_Sprod (a1xb1 a2xb2 : Sprod) :=
  Sprod_l a1xb1 =_S Sprod_l a2xb2 /\ Sprod_r a1xb1 =_S Sprod_r a2xb2.

Lemma Equal_Sprod_equiv : Equivalence Equal_Sprod.
Proof.
apply Build_Equivalence.
unfold Reflexive in |- *; simple induction x; intros a b;
 unfold Equal_Sprod in |- *; simpl in |- *.
split.
apply Refl.
apply Refl.
apply Build_Partial_equivalence.
unfold Transitive in |- *.
simple induction x; intros a b; simple induction y; intros a' b';
 simple induction z; intros a'' b''.
unfold Equal_Sprod in |- *; simpl in |- *.
intros H H0; elim H; intros H1 H2; elim H0; intros H3 H4.
split.
apply Trans with a'; trivial.
apply Trans with b'; trivial.
unfold Symmetric in |- *; simple induction x; intros a b; simple induction y;
 intros a' b'.
unfold Equal_Sprod in |- *; simpl in |- *.
intros H; elim H; intros H1 H2.
split.
apply Sym; trivial.
apply Sym; trivial.
Qed.

Canonical Structure SPROD : Setoid := Equal_Sprod_equiv.

Lemma Proj1_SPROD_map_law : Map_law (Sprod_l:SPROD -> A).
Proof.
unfold Map_law in |- *; simpl in |- *.
simple induction x; intros a b; simple induction y; intros a' b'.
simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.
simple induction 1; trivial.
Qed.

Canonical Structure Proj1_SPROD : Map SPROD A := Proj1_SPROD_map_law.

Lemma Proj2_SPROD_map_law : Map_law (Sprod_r:SPROD -> B).
Proof.
unfold Map_law in |- *; simpl in |- *.
simple induction x; intros a b; simple induction y; intros a' b'.
simpl in |- *; unfold Equal_Sprod in |- *; simpl in |- *.
simple induction 1; trivial.
Qed.

Canonical Structure Proj2_SPROD : Map SPROD B := Proj2_SPROD_map_law.

End s_prod.
