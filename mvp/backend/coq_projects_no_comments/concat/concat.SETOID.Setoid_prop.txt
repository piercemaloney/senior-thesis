

Require Export Map.



Set Implicit Arguments.

Unset Strict Implicit.



Section sub_setoid.



Variable U : Setoid.



Definition Reg_law (A : U -> Prop) := forall x y : U, x =_S y -> A x -> A y.



Structure > Setoid_pred : Type := 

  {Pred :> U -> Prop; Prf_reg :> Reg_law Pred}.



Variable A : Setoid_pred.



Structure SubType : Type :=  {Elt_sub : U; Prf_constr : A Elt_sub}.



Definition Equal_SubType (a b : SubType) := Elt_sub a =_S Elt_sub b.



Lemma Equal_SubType_equiv : Equivalence Equal_SubType.

Proof.

apply Build_Equivalence.

unfold Reflexive in |- *; intro x; exact (Refl (Elt_sub x)).

apply Build_Partial_equivalence.

unfold Transitive in |- *; intros a b c H1 H2; unfold Equal_SubType in |- *.

apply Trans with (Elt_sub b); auto.

unfold Symmetric in |- *; intros a b H; unfold Equal_SubType in |- *.

apply Sym; auto.

Qed.



Canonical Structure SubSetoid : Setoid := Equal_SubType_equiv.



End sub_setoid.



Section restricted_map.



Variables (A B : Setoid) (f : Map A B) (P : Setoid_pred A).



Definition Restricted_fun (a : SubSetoid P) := f (Elt_sub a).



Lemma Restricted_map_law : Map_law Restricted_fun.

Proof.

unfold Map_law in |- *; simpl in |- *.

unfold Equal_SubType in |- *; intros a1 a2 H.

unfold Restricted_fun in |- *; apply Pres1; trivial.

Qed.



Canonical Structure RestrictedMap := Build_Map Restricted_map_law.



End restricted_map.



