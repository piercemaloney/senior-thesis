
Require Export SET.
Require Export Functor.
Require Export Dual.

Set Implicit Arguments.
Unset Strict Implicit.

Section funset.

Variables (C : Category) (a : C).

Definition FunSET_ob (b : C) := a --> b.

 Section funset_map_def.

 Variable b c : C.

  Section funset_mor_def.

  Variable f : b --> c.
 
  Definition FunSET_mor1 (g : a --> b) := g o f.

  Lemma FunSET_map_law1 : Map_law FunSET_mor1.
  Proof.
  unfold Map_law, FunSET_mor1 in |- *.
  intros g h H.
  apply Comp_r; assumption.
  Qed.

  Canonical Structure FunSET_mor : Map (FunSET_ob b) (FunSET_ob c) :=
    FunSET_map_law1.

  End funset_mor_def.

 Lemma FunSET_map_law : Map_law FunSET_mor.
 Proof.
 unfold Map_law in |- *; simpl in |- *.
 unfold Ext in |- *; simpl in |- *.
 unfold FunSET_mor1, FunSET_ob in |- *.
 intros f g H h.
 apply Comp_l; assumption.
 Qed.

 Canonical Structure FunSET_map := Build_Map FunSET_map_law.

 End funset_map_def.

Lemma Fun_comp_law : Fcomp_law FunSET_map.
Proof.
unfold Fcomp_law in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *.
unfold Comp_fun in |- *; simpl in |- *.
unfold FunSET_mor1, FunSET_ob in |- *.
intros b c d f g h.
apply Ass.
Qed.

Lemma Fun_id_law : Fid_law FunSET_map.
Proof.
unfold Fid_law in |- *; simpl in |- *.
unfold Ext in |- *; simpl in |- *.
unfold Id_fun in |- *.
unfold FunSET_mor1, FunSET_ob in |- *.
intros b f; apply Idr1.
Qed.

Canonical Structure FunSET := Build_Functor Fun_comp_law Fun_id_law.

End funset.

