
Require Import Bool.
Require Import Words.
Require Import Alternate.
Require Import Opposite.
Require Import Paired.
Require Import Shuffle.

Section Context.

Variable x : word.
Hypothesis Even_x : even x.
Variable b : bool. 
Hypothesis A : alt b x.
Variable u v : word.
Hypothesis C : conc u v x.
Variable w : word.
Hypothesis S : shuffle u v w.

Lemma Alt_u : alt b u.
Proof.
apply alt_conc_l with v x.
apply C.
apply A.
Qed.

Section Case1_.
Hypothesis Odd_u : odd u.

Lemma Not_even_u : ~ even u.
Proof.
red in |- *; intro.
elim not_odd_and_even with u; trivial.
Qed.

Lemma Odd_v : odd v.
Proof.
elim even_conc with u v x.
intro H; elim H; trivial.
intro H; elim H; intro; elim Not_even_u; trivial.
apply C.
apply Even_x.
Qed.

Remark Alt_v_neg : alt (negb b) v.
Proof.
elim alt_conc_r with u v x b.
intro H; elim H; trivial.
intro H; elim H; intro; elim Not_even_u; trivial.
apply C.
apply A.
Qed.

Lemma Opp_uv : opposite u v.
Proof.
apply alt_neg_opp with b.
apply Odd_u.
apply Alt_u.
apply Odd_v.
apply Alt_v_neg.
Qed.

Lemma Case1 : paired w.
Proof.
elim Shuffling with u v w b.
simple induction 1; simple induction 2; simple induction 1;
 simple induction 2; intros P1 P2.
apply P1.
apply Alt_v_neg.
elim not_odd_and_even with v; trivial.
apply Odd_v.
simple induction 1; intro; elim Not_even_u; trivial.
apply S.
apply Alt_u.
Qed.
End Case1_.

Section Case2_.
Hypothesis Even_u : even u.

Lemma Not_odd_u : ~ odd u.
Proof.
red in |- *; intro; elim not_odd_and_even with u; trivial.
Qed.

Lemma Even_v : even v.
Proof.
elim even_conc with u v x.
intro H; elim H; intro; elim Not_odd_u; trivial.
intro H; elim H; trivial.
apply C.
apply Even_x.
Qed.

Remark Alt_v : alt b v.
Proof.
elim alt_conc_r with u v x b.
intro H; elim H; intro; elim Not_odd_u; trivial.
intro H; elim H; trivial.
apply C.
apply A.
Qed.

Lemma Not_opp_uv : ~ opposite u v.
Proof.
apply alt_not_opp with b.
apply Alt_u.
apply Alt_v.
Qed.

Lemma Case2 : paired (rotate w).
Proof.
apply paired_rotate with b.
elim Shuffling with u v w b.
simple induction 1; intro; elim Not_odd_u; trivial.
simple induction 1; simple induction 2.
simple induction 1; intros; elim not_odd_and_even with v; trivial.
apply Even_v.
simple induction 1; simple induction 2; intros P1 P2.
apply P1.
apply Alt_v.
apply S.
apply Alt_u.
Qed.

End Case2_.

Lemma Main : IF opposite u v then paired w else paired (rotate w).
Proof.
unfold IF_then_else in |- *; elim odd_or_even with u; intros.

left; split.
apply Opp_uv; trivial.
apply Case1; trivial.

right; split.
apply Not_opp_uv; trivial.
apply Case2; trivial.
Qed.

End Context.

Theorem Gilbreath :
 forall x : word,
 even x ->
 alternate x ->
 forall u v : word,
 conc u v x ->
 forall w : word,
 shuffle u v w -> IF opposite u v then paired w else paired (rotate w).

Proof.
simple induction 2; intros. 
apply Main with x b; trivial.
Qed.
