

Require Import Bool.

Require Import Words.

Require Import Alternate.



Inductive opposite : word -> word -> Prop :=

    opp : forall (u v : word) (b : bool), opposite (bit b u) (bit (negb b) v).



Hint Resolve opp.



Lemma not_opp_empty_r : forall u : word, ~ opposite u empty.

Proof.

unfold not in |- *; intros u op.

inversion op.

Qed.



Lemma not_opp_empty_l : forall u : word, ~ opposite empty u.

Proof.

unfold not in |- *; intros u op.

inversion op.

Qed.



Lemma not_opp_same :

 forall (u v : word) (b : bool), ~ opposite (bit b u) (bit b v).

Proof.

unfold not in |- *; intros u v b op.

inversion op.

apply (no_fixpoint_negb b); trivial.

Qed.



Lemma alt_neg_opp :

 forall (u v : word) (b : bool),

 odd u -> alt b u -> odd v -> alt (negb b) v -> opposite u v.

Proof.

simple induction u.

intros v b odd_empty; absurd (odd empty); trivial.

intros b u' H v; elim v.

intros b' H1 H2 odd_empty.

absurd (odd empty); trivial.

intros b' v' H' b'' H1 H2 H3 H4.

elim (alt_eq (negb b'') b' v'); trivial.

elim (alt_eq b'' b u'); trivial.

Qed.



Lemma alt_not_opp :

 forall (u v : word) (b : bool), alt b u -> alt b v -> ~ opposite u v.

Proof.

simple induction u.

intros; apply not_opp_empty_l.

intros b u' H v; elim v.

intros; apply not_opp_empty_r.

intros b' v' H1 b'' H2 H3.

elim (alt_eq b'' b' v'); trivial.

elim (alt_eq b'' b u'); trivial.

apply not_opp_same.

Qed.

