
Require Export GeoCoq.Meta_theory.Continuity.elementary_continuity_props.
Require Export GeoCoq.Tarski_dev.Ch16_coordinates_with_functions.

Section Book_1_prop_1_euclidean.

Context `{T2D:Tarski_2D}.
Context `{TE:@Tarski_euclidean Tn TnEQD}.

Lemma prop_1_euclidean :
  forall A B, exists C, Cong A B A C /\ Cong A B B C.
Proof.
  destruct exists_grid_spec as [SS [U1 [U2 Hgrid]]].
  apply (exists_equilateral_triangle SS U1 U2 Hgrid).
Qed.

End Book_1_prop_1_euclidean.

Section Book_1_prop_1_circle_circle.

Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.

Lemma prop_1_circle_circle : circle_circle ->
  forall A B, exists C, Cong A B A C /\ Cong A B B C.
Proof.
  intros cc A B.
  apply circle_circle__circle_circle_bis in cc.
  destruct (cc A B B A A B) as [C [HC1 HC2]]; Circle.
  exists C.
  split;Cong.
Qed.

End Book_1_prop_1_circle_circle.

Section Book_1_part_2.

Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.
	    Lemma prop_2 : forall A B C, exists L, Cong A L B C.
Proof.
  intros.
  apply segment_construction_0.
Qed.

Lemma prop_3 : forall A B C1 C2, Le C1 C2 A B -> exists E, Bet A E B /\ Cong C1 C2 A E.
Proof.
  auto.
Qed.

Lemma prop_4 : forall A B C D E F, CongA C A B F D E -> Cong A C D F -> Cong A B D E ->
  Cong C B F E /\ (C <> B -> CongA A C B D F E /\ CongA A B C D E F).
Proof.
  intros A B C D E F.
  apply l11_49.
Qed.

Lemma prop_5_1 : forall A B C, A <> B -> B <> C -> Cong A B A C -> CongA A B C A C B.
Proof.
  intros.
  apply l11_44_1_a; auto.
Qed.

Lemma prop_5_2 : forall A B C F G, A <> B -> B <> C -> Cong A B A C ->
  Bet A B F -> B <> F -> Bet A C G -> C <> G ->
  CongA F B C G C B.
Proof.
  intros A B C F G.
  intros.
  apply l11_13 with A A; auto.
  apply l11_44_1_a; auto.
Qed.

Lemma prop_6 : forall A B C, ~ Col A B C -> CongA A B C A C B -> Cong A B A C.
Proof.
  intros A B C H.
  apply l11_44_1_b; Col.
Qed.

Lemma prop_7 : forall A B C C', Cong A C A C' -> Cong B C B C' -> OS A B C C' -> C = C'.
Proof.
  intros A B C C' HCongA HCongB HOS.
  assert (HNCol := one_side_not_col123 A B C C' HOS).
  assert_diffs.
  destruct (l11_51 A B C A B C') as [HCongAA [HCongAB HCongAC]]; Cong.
  assert (HCop := os__coplanar A B C C' HOS).
  apply l9_9_bis in HOS.
  destruct (conga_cop__or_out_ts B A C C') as [HOutA|Habs]; Cop; [|exfalso; apply HOS; Side].
  destruct (conga_cop__or_out_ts A B C C' HCop HCongAB) as [HOutB|Habs].
    apply (l6_21 A C B C); Col.
  exfalso; apply HOS, Habs.
Qed.

Lemma prop_8 : forall A B C D E F, A <> B -> A <> C -> B <> C ->
       Cong A B D E -> Cong A C D F -> Cong B C E F ->
       CongA B A C E D F /\ CongA A B C D E F /\ CongA B C A E F D.
Proof.
  apply l11_51.
Qed.

Lemma prop_9 : forall A B C, A <> B -> A <> C ->
  exists F, InAngle F B A C /\ CongA F A B F A C.
Proof.
  intros.
  apply angle_bisector; auto.
Qed.

Lemma prop_10 : forall A B, exists D, Midpoint D A B.
Proof.
  apply midpoint_existence.
Qed.

Lemma prop_11 : forall A B C, A <> B -> Col A B C -> exists F, Perp C F A B.
Proof.
  intros.
  apply perp_exists; assumption.
Qed.

Lemma prop_12 : forall A B C, ~ Col A B C -> exists H, Col A B H /\ Perp A B C H.
Proof.
  apply l8_18_existence.
Qed.

Lemma prop_13 : forall A B C D P Q R, A <> B -> B <> C -> B <> D -> Bet C B D ->
  P <> Q -> Q <> R -> Per P Q R ->
  SumA C B A A B D C B D /\ SumA P Q R P Q R C B D.
Proof.
  intros.
  split.
  - apply bet__suma; auto.
  - apply bet_per2__suma; auto.
Qed.

Lemma prop_14 : forall A B C D P Q R S T U, TS A B C D -> Per P Q R ->
  SumA A B C A B D S T U -> SumA P Q R P Q R S T U -> Bet C B D.
Proof.
  intros A B C D P Q R S T U HTS HP HSuma1 HSuma2.
  apply (bet_conga__bet S T U).
    apply (per2_suma__bet P Q R P Q R); assumption.
  apply (suma2__conga A B C A B D).
    assumption.
  apply suma_left_comm, ts__suma, HTS.
Qed.

Lemma prop_15 : forall A B C D E, Bet A E B -> A <> E -> B <> E ->
  Bet C E D -> C <> E -> D <> E ->
  CongA A E C B E D.
Proof.
  intros.
  apply l11_14; auto.
Qed.

Lemma prop_16 : forall A B C D, ~ Col A B C -> Bet B C D -> C <> D ->
  LtA C A B A C D /\ LtA C B A A C D.
Proof.
  intros.
  apply l11_41; Col.
Qed.

Lemma prop_17 : forall A B C P Q R, ~ Col A B C -> SumA A B C B C A P Q R -> 
  SAMS A B C B C A /\ ~ Bet P Q R.
Proof.
  intros A B C P Q R HNCol HSuma.
  split.
  - assert_diffs.
    apply sams123231; auto.
  - intro HBet.
    apply HNCol, col_suma__col with P Q R; Col.
Qed.

Lemma prop_18 : forall A B C, ~ Col A B C -> Lt A B A C -> Lt B C A C ->
  LtA B C A A B C /\ LtA C A B A B C.
Proof.
  intros.
  split.
  - apply lta_left_comm, l11_44_2_a; Col.
  - apply lta_right_comm, l11_44_2_a.
      Col.
    apply lt_comm; assumption.
Qed.

Lemma prop_19 : forall A B C, ~ Col A B C -> LtA B C A A B C -> LtA C A B A B C ->
  Lt A B A C /\ Lt B C A C.
Proof.
  intros.
  split.
  - apply l11_44_2_b.
      Col.
    apply lta_left_comm; assumption.
  - apply lt_comm, l11_44_2_b.
      Col.
    apply lta_right_comm; assumption.
Qed.

Lemma prop_20 : forall A B C P Q, ~ Bet B A C -> SumS A B A C P Q -> Lt B C P Q.
Proof.
  intros A B C P Q HNBet HSum.
  destruct (segment_construction B A A C) as [D [HBet HCong]].
  apply (cong2_lt__lt B C B D); Cong.
    apply triangle_strict_inequality with A; Cong.
  apply (sums2__cong56 A B A C); trivial.
  exists B, A, D; repeat split; Cong.
Qed.

Lemma prop_21_1 : forall A B C D, OS A B C D -> OS B C A D -> OS A C B D -> LtA B A C B D C.
Proof.
  apply os3__lta.
Qed.

Lemma prop_21_2 : forall A B C D A1 A2 D1 D2, OS A B C D -> OS B C A D -> OS A C B D ->
  SumS A B A C A1 A2 -> SumS D B D C D1 D2 -> Lt D1 D2 A1 A2.
Proof.
  intros A B C D A1 A2 D1 D2; intros.
  assert (HNCol : ~ Col A B C) by (apply one_side_not_col123 with D; assumption).
  destruct (os2__inangle A B C D) as [HAB [HCB [HDB [E [HBet [Heq|HOut]]]]]]; Side.
    subst; exfalso; apply HNCol; ColR.
  assert_diffs.
  assert (A <> E) by (intro; subst E; apply (one_side_not_col124 A B C D); Col).
  assert (C <> E) by (intro; subst E; apply (one_side_not_col124 B C A D); Col).
  assert (D <> E) by (intro; subst E; apply (one_side_not_col124 A C B D); Col).
  assert (Bet B D E).
    apply out2__bet; [apply l6_6, HOut|].
    apply col_one_side_out with A; Col.
    apply invert_one_side, col_one_side with C; Col.
  destruct (ex_sums E B E C) as [P [Q]].
  apply lt_transitivity with P Q.
  - destruct (ex_sums E C E D) as [R [S]].
    apply le_lt34_sums2__lt with D B D C D B R S; Le.
      apply prop_20 with E; Sums.
      intro; apply HNCol; ColR.
    apply sums_assoc_1 with E D E C E B; Sums.
  - destruct (ex_sums A B A E) as [R [S]].
    apply le_lt12_sums2__lt with E B E C R S E C; Le.
      apply prop_20 with A; Sums.
      intro; apply HNCol; ColR.
    apply sums_assoc_2 with A B A E A C; Sums.
Qed.

Lemma prop_22 : circle_circle -> forall A1 A2 B1 B2 C1 C2 A1' A2' B1' B2' C1' C2',
  SumS A1 A2 B1 B2 C1' C2' -> SumS A1 A2 C1 C2 B1' B2' -> SumS B1 B2 C1 C2 A1' A2' ->
  Le C1 C2 C1' C2' -> Le B1 B2 B1' B2' -> Le A1 A2 A1' A2' ->
  exists F G K, Cong F G A1 A2 /\ Cong F K B1 B2 /\ Cong G K C1 C2.
Proof.
  intro cc.
  apply circle_circle__circle_circle_bis in cc.
  apply (circle_circle_bis__euclid_22 cc).
Qed.

Lemma prop_23 : forall A B C D E, A <> B -> C <> D -> C <> E ->
  exists F, CongA D C E B A F.
Proof.
  intros.
  apply angle_construction_3; auto.
Qed.

Lemma prop_24 : forall A B C D E F, Cong A B D E -> Cong A C D F -> LtA F D E C A B ->
  Lt E F B C.
Proof.
  apply t18_18.
Qed.

Lemma prop_25 : forall A B C D E F, A <> B -> A <> C ->
  Cong A B D E -> Cong A C D F -> Lt E F B C ->
  LtA F D E C A B.
Proof.
  apply t18_19.
Qed.

Lemma prop_26_1 : forall A B C D E F, ~ Col A B C ->
       CongA B A C E D F -> CongA A B C D E F -> Cong A B D E ->
       Cong A C D F /\ Cong B C E F /\ CongA A C B D F E.
Proof.
  apply l11_50_1.
Qed.

Lemma prop_26_2 : forall A B C D E F, ~ Col A B C ->
       CongA B C A E F D -> CongA A B C D E F -> Cong A B D E ->
       Cong A C D F /\ Cong B C E F /\ CongA C A B F D E.
Proof.
  apply l11_50_2.
Qed.

Lemma prop_27 : forall A D E F, TS E F A D -> CongA A E F D F E -> Par E A F D.
Proof.
  intros A D E F.
  apply l12_21_b.
Qed.

Lemma prop_28_1 : forall B D E G H, Out E G H -> OS E G B D -> CongA B G E D H E ->
  Par G B H D.
Proof.
  intros B D E G H.
  apply l12_22_b.
Qed.

Lemma prop_28_2 : forall A C G H P Q R, OS G H A C -> SumA A G H G H C P Q R -> Bet P Q R ->
  Par A G C H.
Proof.
  intros A C G H P Q R HOS HSumA HBet.
  destruct (segment_construction C H C H) as [D [HBet1 HCong]].
  apply par_comm.
  assert_diffs.
  apply par_col_par with D; Col.
  apply l12_21_b.
  - apply l9_8_2 with C; Side.
    assert (HNCol := one_side_not_col124 G H A C HOS).
    repeat split; Col.
      intro; apply HNCol; ColR.
    exists H; Col.
  - apply suppa2__conga123 with G H C.
      apply bet_suma__suppa with P Q R; assumption.
      split; auto; exists C; split; [Between|CongA].
Qed.

End Book_1_part_2.

Section Book_1_part_3.

Context `{T2D:Tarski_2D}.
Context `{TE:@Tarski_euclidean Tn TnEQD}.

Lemma prop_29_1 : forall A D G H, TS G H A D -> Par G A H D -> CongA A G H D H G.
Proof.
  intros A D G H.
  apply l12_21_a.
Qed.

Lemma prop_29_2 : forall B D E G H, Out E G H -> OS E G B D -> Par G B H D ->
  CongA B G E D H E.
Proof.
  intros B D E G H.
  apply l12_22_a.
Qed.

Lemma prop_29_3 : forall A C G H P Q R, OS G H A C -> Par A G H C -> SumA A G H G H C P Q R ->
  Bet P Q R.
Proof.
  intros A C G H P Q R HOS HPar.
  apply (suma_suppa__bet).
  apply alternate_interior__consecutive_interior; trivial.
  unfold alternate_interior_angles_postulate.
  apply l12_21_a.
Qed.

Lemma prop_30 : forall A B C D E F, Par A B C D -> Par C D E F ->
   Par A B E F.
Proof.
  apply par_trans.
Qed.

End Book_1_part_3.

Section Book_1_part_4.
	    Context `{TnEQD:Tarski_neutral_dimensionless_with_decidable_point_equality}.

Lemma prop_31 : forall A B C, B <> C -> exists E, Par B C A E.
Proof.
  intros A B C.
  apply parallel_existence1.
Qed.

End Book_1_part_4.

Section Book_1_part_5.

Context `{T2D:Tarski_2D}.
Context `{TE:@Tarski_euclidean Tn TnEQD}.
	    Lemma prop_32_1 : forall A B C D E F, TriSumA A B C D E F -> Bet D E F.
Proof.
  apply alternate_interior__triangle.
  unfold alternate_interior_angles_postulate.
  apply l12_21_a.
Qed.

Lemma prop_32_2 : forall A B C D, A <> B -> B <> C -> A <> C -> Bet B C D -> C <> D ->
  SumA C A B A B C A C D.
Proof.
  intros A B C D HAB HBC HAC HBet HAD.
  destruct (ex_trisuma C A B) as [P [Q [R HTri]]]; auto.
  assert (Bet P Q R) by (apply (prop_32_1 C A B), HTri).
  destruct HTri as [S [T [U [HSuma1 HSumA2]]]].
  apply conga3_suma__suma with C A B A B C S T U; try (apply conga_refl); auto.
  assert_diffs.
  assert (HCongA : CongA B C D P Q R) by (apply conga_line; auto).
  assert (HSumA' : SumA A C D B C A P Q R).
    apply conga3_suma__suma with A C D B C A B C D; CongA.
    apply suma_sym, bet__suma; auto.
  apply sams2_suma2__conga123 with B C A P Q R; trivial;
    apply bet_suma__sams with P Q R; assumption.
Qed.

Lemma prop_33 : forall A B C D,
 TS B C A D -> Par A B C D -> Cong A B C D ->
 Cong A C B D /\ Par A C B D.
Proof.
  intros A B C D HTS HPAR HC.
  assert (HPara:Parallelogram B A C D) by (unfold Parallelogram;left;unfold Parallelogram_strict;finish).
  destruct (plg_cong B A C D HPara).
  assert_diffs.
  destruct (plg_par B A C D); auto.
  split; finish.
Qed.

Lemma prop_34_1 : forall A B D C,
  A <> B /\ A <> D /\ B <> D ->
  Parallelogram A B D C -> (CongA A B D D C A /\ CongA B D C C A B) /\ (Cong A B D C /\ Cong A C B D).
Proof.
  intros; split.
  - apply plg_conga; auto.
  - apply plg_cong; auto.
Qed.

Lemma prop_46 : forall A B, A<>B -> exists E D, Square A B E D.
Proof.
  exact exists_square.
Qed.

Lemma prop_47 :
     forall O E E' A B C AC BC AB AC2 BC2 AB2,
       O <> E ->
       Per B A C ->
       Length O E E' A B AB ->
       Length O E E' A C AC ->
       Length O E E' B C BC ->
       Prod O E E' AC AC AC2 ->
       Prod O E E' BC BC BC2 ->
       Prod O E E' AB AB AB2 ->
       Sum O E E' AB2 AC2 BC2.
Proof.
  intros O E E' A B C AC BC AB AC2 BC2 AB2.
  intros.
  apply pythagoras with B C A AB AC BC; trivial; apply length_sym; assumption.
Qed.

End Book_1_part_5.