

Set Implicit Arguments.

Unset Strict Implicit.

Require Export empty.

Require Export conshdtl.



Section list_seq.



Inductive SList (A : Setoid) : Type :=

  | Snil : SList A

  | Scons : A -> SList A -> SList A.



Fixpoint Length (A : Setoid) (L : SList A) {struct L} : nat :=

  match L with

  | Snil => 0

  | Scons _ L' => S (Length L')

  end.



Fixpoint SList2fun (A : Setoid) (L : SList A) {struct L} :

 seq (Length L) A :=

  match L return (seq (Length L) A:Type) with

  | Snil => empty_seq A

  | Scons a L' => a;; SList2fun L'

  end.



Definition SList2seq : forall (A : Setoid) (L : SList A), seq (Length L) A.

intros.

red in |- *.

apply (Build_Map (Ap:=SList2fun L)).

red in |- *.

intros k k'.

elim k.

simple induction index.

elim k'.

simple induction index0.

intros.

apply Ap_comp; auto with algebra.

intros.

inversion H0.

elim k'.

simple induction index0.

simpl in |- *.

intros.

inversion H0.

intros.

apply Ap_comp; auto with algebra.

Defined.



Fixpoint Seq2SList (A : Setoid) (n : nat) {struct n} : 

 seq n A -> SList A :=

  match n return (seq n A -> SList A) with

  | O => fun b : seq 0 A => Snil A

  | S m =>

      fun b : seq (S m) A =>

      Scons (b (Build_finiteT (le_lt_n_Sm _ _ (le_O_n m))))

        (Seq2SList (Seqtl b))

  end.

End list_seq.



Section other.



Definition reverse_seq : forall n : nat, seq n (fin n).

simple induction n.



apply (Build_Map (Ap:=fun nonexistent_thingy : fin 0 => nonexistent_thingy)).

red in |- *.

auto with algebra.



intros.



apply

 (Build_Map

    (Ap:=fun finelt : fin (S n0) =>

         match finelt return (fin (S n0)) with

         | Build_finiteT x x0 =>

             match x as x1 return (x1 < S n0 -> fin (S n0)) with

             | O => fun _ : 0 < S n0 => Build_finiteT (lt_n_Sn n0)

             | S m =>

                 fun HSm : S m < S n0 =>

                 Build_finiteT

                   (lt_S (index (X (Build_finiteT (lt_S_n m n0 HSm)))) n0

                      (in_range_prf (X (Build_finiteT (lt_S_n m n0 HSm)))))

             end x0

         end)).

red in |- *.



intro x.

case x.

intro x0.

case x0.

intros l y.

case y.

intro x1.

case x1. 



simpl in |- *.

tauto.

simpl in |- *.

intros.

inversion H.

simpl in |- *.

intros n1 l y.

case y.

intro x1.

case x1.

intros.

inversion H.



intros.

inversion H.

elim X.

intros.

simpl in |- *.

red in Map_compatible_prf.

simpl in Map_compatible_prf.

apply Map_compatible_prf; auto with algebra.

Defined.



Definition reverse (n : nat) (X : Setoid) (f : seq n X) :=

  comp_map_map f (reverse_seq n):seq n X.



Definition consr :

  forall (X : Setoid) (n : nat) (x : X) (f : seq n X), seq (S n) X.

intros.

exact (reverse (x;; reverse f)).

Defined.

End other.
