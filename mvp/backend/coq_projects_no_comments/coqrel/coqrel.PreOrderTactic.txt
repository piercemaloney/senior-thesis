Require Import RelDefinitions.



Definition rgraph_done {A B} (R: rel A B) a b := R a b.



Inductive rgraph_queue {A} (R: rel A A) (m: A) :=

  | rgraph_queue_nil:

      rgraph_queue R m

  | rgraph_queue_cons x:

      (forall y, R x y -> R m y) ->

      rgraph_queue R m ->

      rgraph_queue R m.



Ltac rgraph :=

  lazymatch goal with

    | |- ?R ?m ?n =>

      not_evar R;

      not_evar m;

      not_evar n;

      first

        [ assert (Transitive R) by typeclasses eauto

        | fail 1 R "is not declared transitive" ];

      try assert (Symmetric R) by typeclasses eauto;

      let rec step q :=

        lazymatch q with

          | rgraph_queue_cons _ _ ?t ?Ht ?tail =>

            gather tail t Ht

        end

      with gather q t Ht :=

        let push u Htu :=

          let Hu := constr:(fun x Hux => transitivity (z:=x) (Ht u Htu) Hux) in

          gather (rgraph_queue_cons R m u Hu q) t Ht in

        lazymatch goal with

          | Htn : R t n |- _ =>

            exact (Ht n Htn)

          | Hnt : R n t, HRsym: Symmetric R |- _ =>

            exact (Ht n (symmetry (Symmetric := HRsym) Hnt))

          | Htu: R t ?u |- _ =>

            change (rgraph_done R t u) in Htu;

            push u Htu

          | Hut: R ?u t, HRsym: Symmetric R |- _ =>

            change (rgraph_done R u t) in Hut;

            push u (symmetry (Symmetric := HRsym) Hut)

          | _ =>

            step q

        end in

      first

        [ gather (rgraph_queue_nil R m) m (fun x (H: R m x) => H)

        | fail 1 n "not reachable from" m "using hypotheses from the context" ]

    | _ =>

      fail "the goal is not an applied relation"

  end.



Hint Extern 30 (RStep ?P (_ _ _)) =>

  solve [ try unify P True; intro; rgraph ] : typeclass_instances.

