Require Import VST.floyd.proofauto. 

Require Import VST.progs.sumarray. 



Instance CompSpecs : compspecs. make_compspecs prog. Defined.

Definition Vprog : varspecs.  mk_varspecs prog. Defined.



Definition sum_Z : list Z -> Z := fold_right Z.add 0.



Lemma sum_Z_app:

  forall a b, sum_Z (a++b) =  sum_Z a + sum_Z b.

Proof.

  intros. induction a; simpl; omega.

Qed.



Definition sumarray_spec : ident * funspec :=

 DECLARE _sumarray

  WITH a: val, sh : share, contents : list Z, size: Z

  PRE [ _a OF (tptr tuint), _n OF tint ]

          PROP  (readable_share sh; 0 <= size <= Int.max_signed;

          Forall (fun x => 0 <= x <= Int.max_unsigned) contents)

          LOCAL (temp _a a; temp _n (Vint (Int.repr size)))

          SEP   (data_at sh (tarray tuint size) (map Vint (map Int.repr contents)) a)

  POST [ tuint ]

        PROP () LOCAL(temp ret_temp  (Vint (Int.repr (sum_Z contents))))

           SEP (data_at sh (tarray tuint size) (map Vint (map Int.repr contents)) a).



Definition main_spec :=

 DECLARE _main

  WITH gv : globals

  PRE  [] main_pre prog nil gv

  POST [ tint ]  

     PROP() 

     LOCAL (temp ret_temp (Vint (Int.repr (1+2+3+4)))) 

     SEP(TT).



Definition Gprog : funspecs :=

        ltac:(with_library prog [sumarray_spec; main_spec]).



Lemma body_sumarray: semax_body Vprog Gprog f_sumarray sumarray_spec.

Proof.

start_function. 



forward.  

forward.  



forward_while

 (EX i: Z,

   PROP  (0 <= i <= size)

   LOCAL (temp _a a;

          temp _i (Vint (Int.repr i));

          temp _n (Vint (Int.repr size));

          temp _s (Vint (Int.repr (sum_Z (sublist 0 i contents)))))

   SEP   (data_at sh (tarray tuint size) (map Vint (map Int.repr contents)) a)).



* 

Exists 0.   

entailer!.  


* 

entailer!.  

* 



assert_PROP (Zlength contents = size). {

  entailer!. do 2 rewrite Zlength_map. reflexivity.

}

forward. 

forward. 

forward.  

 
 Exists (i+1).

 entailer!. simpl.

 f_equal.

 rewrite (sublist_split 0 i (i+1)) by omega.

 rewrite sum_Z_app. rewrite (sublist_one i) by omega.

 autorewrite with sublist. normalize.

 simpl. rewrite Z.add_0_r. reflexivity.

* 

forward.  

 
entailer!.

autorewrite with sublist in *.

autorewrite with sublist.

reflexivity.

Qed.



Definition four_contents := [1; 2; 3; 4].



Lemma body_main:  semax_body Vprog Gprog f_main main_spec.

Proof.

start_function.

forward_call 

  (gv _four, Ews,four_contents,4).

 split3. auto. computable. repeat constructor; computable.

forward. 

Qed.



Existing Instance NullExtension.Espec.



Lemma prog_correct:

  semax_prog prog Vprog Gprog.

Proof.

prove_semax_prog.

semax_func_cons body_sumarray.

semax_func_cons body_main.

Qed.



