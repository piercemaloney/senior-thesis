Require Import language.
Require Import msl.msl_direct.
Require Import msl.env.

Import EnvSA EnvSL.
Opaque env_mapsto.  

Definition stack := env var adr.
Definition heap := env adr adr.

Instance Join_stack : Join stack := Join_equiv _.
Instance Join_heap : Join heap := Join_env.
Definition world := (stack * heap)%type.

Instance Join_world: Join world := Join_prod _ Join_stack _ Join_heap.
Instance Perm_world : Perm_alg world := _.
Instance Sep_world : Perm_alg world := _.
Instance Canc_world : Perm_alg world := _.
Instance Disj_world : Perm_alg world := _.

Fixpoint den_env {key}{A}{KE: EqDec key} (rho: table key A)  : env key A :=
  match rho with
  | (x,v)::xs => env_set x v (den_env xs)
  | nil => empty_env
  end.

Definition den (s: state) : world := (den_env (fst s), den_env (snd s)).

Definition defined (y: var) : pred world :=
   fun w => exists v, env_get (fst w) y = Some v.

Definition subst (x y: var) (P: pred world) : pred world :=
   fun w => P (env_set_sh x (env_get (fst w) y) (fst w), snd w).

Definition mapsto (x: var) (sh: share) (y: var) : pred world :=
 fun w =>
    exists ax, env_get (fst w) x = Some (pfullshare, ax) /\
    exists ay, env_get (fst w) y = Some (pfullshare, ay) /\
    env_mapsto ax sh ay (snd w).

Definition equal (x y: var) : pred world :=
            fun w => env_get (fst w) x = env_get (fst w) y.

Inductive modvars : command -> var -> Prop :=
| mod_assign: forall x y, modvars (Assign x y) x
| mod_load: forall x y, modvars (Load x y) x
| mod_seq1: forall x c1 c2, modvars c1 x -> modvars (Seq c1 c2) x
| mod_seq2: forall x c1 c2, modvars c2 x -> modvars (Seq c1 c2) x.

Definition nonfreevars (P: pred world) (x: var) : Prop :=
  forall stk hp v, P (stk,hp) -> P (env_set x v stk, hp).

Definition subset (S1 S2: var -> Prop) :=
  forall x, S1 x -> S2 x.

