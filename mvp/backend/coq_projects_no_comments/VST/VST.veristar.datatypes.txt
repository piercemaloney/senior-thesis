Require Import ZArith List.

Require Import veristar.variables.



Definition var : Type := Ident.t.



Inductive expr := Nil | Var : var -> expr.



Inductive pn_atom := Equ : expr -> expr -> pn_atom | Nequ : expr -> expr -> pn_atom.



Inductive space_atom :=

| Next : expr -> expr -> space_atom

| Lseg : expr -> expr -> space_atom.



Inductive assertion : Type :=

  Assertion : forall (pi : list pn_atom) (sigma : list space_atom), assertion.



Inductive entailment : Type :=

  Entailment : assertion -> assertion -> entailment.



Definition subst_var (i: var) (t: expr) (j: var) :=

  if Ident.eq_dec i j then t else Var j.



Definition subst_expr (i: var) (t: expr) (t': expr) :=

  match t' with

    | Nil => Nil

    | Var j => if Ident.eq_dec i j then t else t'

  end.



Definition subst_pn (i: var) (t: expr) (a: pn_atom) :=

 match a with

   | Equ t1 t2 => Equ (subst_expr i t t1) (subst_expr i t t2)

   | Nequ t1 t2 => Nequ (subst_expr i t t1) (subst_expr i t t2)

 end.



Definition subst_pns (i: var) (t: expr) (pa: list pn_atom)

  : list pn_atom := map (subst_pn i t) pa.



Definition subst_space (i: var) (t: expr) (a: space_atom) :=

  match a with

    | Next t1 t2 => Next (subst_expr i t t1) (subst_expr i t t2)

    | Lseg t1 t2 => Lseg (subst_expr i t t1) (subst_expr i t t2)

  end.



Definition subst_spaces (i: var) (t: expr)

  : list space_atom -> list space_atom := map (subst_space i t).



Definition subst_assertion (i: var) (e: expr) (a: assertion) :=

 match a with Assertion pi sigma =>

   Assertion (subst_pns i e pi) (subst_spaces i e sigma)

 end.

