Set Warnings "-extraction-opaque-accessed,-extraction".

Set Warnings "-notation-overridden,-parsing".



Require Import String List.



From mathcomp Require Import ssreflect ssrfun ssrbool ssrnat eqtype seq.



Require Import GenLow GenHigh Tactics Sets Classes.

Import GenLow GenHigh.

Import ListNotations.

Import QcDefaultNotation.



Open Scope qc_scope.

Local Open Scope string.



Set Bullet Behavior "Strict Subproofs".



Class SizedProofEqs {A : Type} (P : A -> Prop) :=

  { iter : nat -> set A;

    mon : forall n1 n2, n1 <= n2 -> iter n1 \subset iter n2;

    spec : \bigcup_(n : nat) iter n <--> P}.



Class SizedSuchThatCorrect {A : Type} (P : A -> Prop) `{SizedProofEqs A P} (g : nat -> G (option A)) :=

  { sizedSTCorrect : forall s, isSome :&: semGen (g s) <--> Some @: (iter s) }.



Class SuchThatCorrect {A : Type} (P : A -> Prop) (g : G (option A)) :=

  { STCorrect : isSome :&: semGen g <-->  Some @: [set x : A | P x ] }.



Class GenSizedSuchThat (A : Type) (P : A -> Prop) := { arbitrarySizeST : nat -> G (option A) }.



Class GenSizedSuchThatMonotonic (A : Type)

      `{GenSizedSuchThat A} `{forall s, SizeMonotonic (arbitrarySizeST s)}.



Class GenSizedSuchThatMonotonicOpt (A : Type)

      `{GenSizedSuchThat A} `{forall s, SizeMonotonicOpt (arbitrarySizeST s)}.



Class GenSizedSuchThatSizeMonotonic (A : Type)

      `{GenSizedSuchThat A} `{SizedMonotonic _ arbitrarySizeST}.



Class GenSizedSuchThatSizeMonotonicOpt (A : Type)

      `{GenSizedSuchThat A} `{SizedMonotonicOpt _ arbitrarySizeST}.



Class GenSizedSuchThatCorrect (A : Type) (P : A -> Prop)

      `{GenSizedSuchThat A P}

      `{SizedSuchThatCorrect A P arbitrarySizeST}.



Class GenSuchThat (A : Type) (P : A -> Prop) := { arbitraryST : G (option A) }.



Notation "'genST' x" := (@arbitraryST _ x _) (at level 70).



Class GenSuchThatMonotonic (A : Type) (P : A -> Prop) `{GenSuchThat A P}

      `{@SizeMonotonic _ arbitraryST}.



Class GenSuchThatMonotonicOpt (A : Type) (P : A -> Prop) `{GenSuchThat A P}

      `{@SizeMonotonicOpt _ arbitraryST}.



Class GenSuchThatCorrect {A : Type} (P : A -> Prop) 

      `{GenSuchThat A P}

      `{SuchThatCorrect A P arbitraryST}.



Class GenSuchThatMonotonicCorrect (A : Type) (P : A -> Prop)

      `{GenSuchThat A P}

      `{@SizeMonotonicOpt _ arbitraryST}

      `{SuchThatCorrect A P arbitraryST}.



Instance GenSizedSuchThatMonotonicOptOfSizeMonotonic

         (A : Type) (P : A -> Prop) (Hgen : GenSizedSuchThat A P)

         (Hmon : forall s : nat, SizeMonotonicOpt (arbitrarySizeST s))

: @GenSizedSuchThatMonotonicOpt A _ Hgen Hmon.



Instance GenSizedSuchThatSizeMonotonicOptOfSizedMonotonic

         (A : Type) (P : A -> Prop) (Hgen : GenSizedSuchThat A P)

         (Hmon : SizedMonotonicOpt arbitrarySizeST)

: @GenSizedSuchThatSizeMonotonicOpt A _ Hgen Hmon.



Instance GenSizedSuchThatCorrectOptOfSizedSuchThatCorrect

         (A : Type) (P : A -> Prop) (H : GenSizedSuchThat A P)

         (Heqs : SizedProofEqs P)

         (Hcorr : SizedSuchThatCorrect P arbitrarySizeST)

: @GenSizedSuchThatCorrect A P H Heqs Hcorr.



Instance GenSuchThatMonotonicOptOfSizeMonotonic

         (A : Type) (P : A -> Prop) (Hgen : GenSuchThat A P)

         (Hmon : SizeMonotonicOpt arbitraryST)

: @GenSuchThatMonotonicOpt A _ Hgen Hmon.



Instance GenSuchThatCorrectOptOfSuchThatCorrect

         (A : Type) (P : A -> Prop) (H : GenSuchThat A P)

         (Hcorr : SuchThatCorrect P (genST P))

: @GenSuchThatCorrect A P H Hcorr.



Instance SizeMonotonicOptofSizeMonotonic {A} (g : G (option A))

         {H : SizeMonotonic g} : SizeMonotonicOpt g.

Proof.

  intros s1 s2 Hs a.

  eapply monotonic; eauto.

Qed.



Instance GenSuchThatOfBounded (A : Type) (P : A -> Prop) (H : GenSizedSuchThat A P)

: GenSuchThat A P := { arbitraryST := sized arbitrarySizeST }.



Generalizable Variables PSized PMon PSMon PCorr.



Instance GenSuchThatMonotonicOfSized (A : Type) (P : A -> Prop)

         {H : GenSizedSuchThat A P}

         `{@GenSizedSuchThatMonotonic A P H PMon}

         `{@GenSizedSuchThatSizeMonotonic A P H PSMon}

: GenSuchThatMonotonic A P.



Instance SizeMonotonicOptOfBounded' (A : Type) (P : A -> Prop)

         {H : GenSizedSuchThat A P}

         `{@GenSizedSuchThatMonotonicOpt A P H PMon}

         `{@GenSizedSuchThatSizeMonotonicOpt A P H PSMon}

: SizeMonotonicOpt (genST P).

Proof.

  unfold arbitraryST, GenSuchThatOfBounded.

Admitted. 



Instance SizeMonotonicOptOfBounded (A : Type) (P : A -> Prop)

         (H1 : GenSizedSuchThat A P)

         (H2 : SizedProofEqs P) 

         (H2 : forall s : nat, SizeMonotonicOpt (arbitrarySizeST s))

         (H3 : SizedMonotonicOpt arbitrarySizeST) 

: SizeMonotonicOpt (genST P).



Proof.

  eapply SizeMonotonicOptOfBounded'.

  constructor; eauto.

  constructor; eauto.

Qed.



Instance GenSuchThatMonotonicOptOfSized' (A : Type) (P : A -> Prop)

         {H : GenSizedSuchThat A P}

         `{@GenSizedSuchThatMonotonicOpt A P H PMon}

         `{@GenSizedSuchThatSizeMonotonicOpt A P H PSMon}

: GenSuchThatMonotonicOpt A P.



Instance SuchThatCorrectOfBounded' (A : Type) (P : A -> Prop)

         {H : GenSizedSuchThat A P}

         `{@GenSizedSuchThatMonotonicOpt A P H PMon}

         `{@GenSizedSuchThatSizeMonotonicOpt A P H PSMon}

         `{@GenSizedSuchThatCorrect A P H PSized PCorr}

: SuchThatCorrect P arbitraryST.

Proof.

  constructor; unfold arbitraryST, GenSuchThatOfBounded.

  rewrite semSized_opt; eauto.

  split.

  - intros [H3 H4]. destruct a; try discriminate.

    eexists. split; [| reflexivity ].

    eapply spec.

    destruct H4 as [n [_ Hsem]]. 

    exists n. split. now constructor.

    assert (Ha : (isSome :&: semGen (arbitrarySizeST n)) (Some a)).

    { split; eauto. }

    eapply PCorr in Ha. destruct Ha as [a' [Hit Heq]]. inv Heq. eassumption.

  - intros [y [HP Heq]]. inv Heq.

    eapply spec in HP. destruct HP as [n [_ Hit]].

    split; eauto. exists n. split; [ now constructor |].

    eapply PCorr. eexists; split; eauto.

Qed.



Instance SuchThatCorrectOfBounded (A : Type) (P : A -> Prop)

         (H1 : GenSizedSuchThat A P)

         (H2 : SizedProofEqs P) 

         (H3 : forall s : nat, SizeMonotonicOpt (arbitrarySizeST s))

         (H4 : SizedMonotonicOpt arbitrarySizeST) 

         (H5 : SizedSuchThatCorrect P arbitrarySizeST)

: SuchThatCorrect P arbitraryST.



Proof.

  eapply SuchThatCorrectOfBounded'; eauto.

  constructor; eauto.

  constructor; eauto.

  constructor; eauto.

Qed.



