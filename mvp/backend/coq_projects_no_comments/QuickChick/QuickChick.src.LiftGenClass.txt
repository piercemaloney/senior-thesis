Require Import QuickChick.

Class liftable (A B : Type) :=
  {
    lift_m : A -> B 
  }.

Instance lift0 {A} : liftable (G A) (G A) :=
  { 
    lift_m := id 
  }.

Instance liftN {A B R} `(liftable (G B) R) : liftable (G (A -> B)) (G A -> R):=
   { 
     lift_m f ga := 
       lift_m (liftGen2 id f ga) 
   }.

Definition liftM {A B R} `{liftable (G B) R} (f : A -> B) (g : G A) : R :=
  lift_m (fmap f g).

Definition ex1 : G nat := liftM (fun x => x + 3) (returnGen 0).
Definition ex2 : G nat := liftM (fun x y => x + y) (returnGen 0) (returnGen 1).
Definition ex3 : G nat := liftM (fun x y z => x + y + z)
                                (returnGen 0) (returnGen 1) (returnGen 2).

Eval cbv -[plus] in ex1.

Eval cbv -[plus] in ex2.

Eval cbv -[plus] in ex3.

Check (liftM (fun x y => x + y + y) (returnGen 0) (returnGen 1) (returnGen 2)
  : G nat).

Eval simpl in (liftM (fun x => x + 1) (returnGen 0) 0 0 : G nat).

