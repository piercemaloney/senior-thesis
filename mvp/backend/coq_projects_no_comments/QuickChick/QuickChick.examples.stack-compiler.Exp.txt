Set Warnings "-extraction-opaque-accessed,-extraction".

Set Warnings "-notation-overridden,-parsing".



From QuickChick Require Import QuickChick.



Inductive exp : Type :=

  | ANum : nat -> exp

  | APlus : exp -> exp -> exp

  | AMinus : exp -> exp -> exp

  | AMult : exp -> exp -> exp.



Derive Show for exp.



Derive Arbitrary for exp.



Fixpoint eval (e : exp) : nat :=

  match e with

  | ANum n => n

  | APlus e1 e2  => (eval e1) + (eval e2)

  | AMinus e1 e2 => (eval e1) - (eval e2)

  | AMult e1 e2  => (eval e1) * (eval e2)

  end.



Fixpoint optimize (e : exp) : exp :=

  match e with

  | ANum n => ANum n

  | APlus e (ANum 0)  => optimize e

  

  | _ => ANum 0

  end.



Definition optimize_correct_prop (e : exp) := eval (optimize e) = eval e?.



