

From mathcomp

Require Import ssreflect ssrbool ssrnat eqtype.

From LemmaOverloading

Require Import heaps.

Set Implicit Arguments.

Unset Strict Implicit.

Unset Printing Implicit Defensive.



Structure tagged_heap := Tag {untag :> heap}.



Definition right_tag := Tag.

Definition left_tag := right_tag.

Canonical Structure found_tag h := left_tag h.



Definition invariant x (h : tagged_heap) :=

  def (untag h) -> x \in dom (untag h).



Structure find (x : ptr) :=

  Form { heap_of :> tagged_heap;

         _ : invariant x heap_of }.



Lemma found_pf A x (v : A) : invariant x (found_tag (x :-> v)).

Proof. by rewrite /invariant defPt domPt inE /= eq_refl. Qed.



Canonical Structure ptr_found A x (v : A) :=

  @Form x (found_tag (x :-> v)) (@found_pf A x v).



Lemma left_pf x (h : heap) (f : find x) :

        invariant x (left_tag (untag (heap_of f) :+ h)).

Proof.

case:f=>[[i]]; rewrite /invariant /= => H D.

by rewrite domUn !inE /= D (H (defUnl D)).

Qed.



Canonical Structure search_left x (h : heap) (f : find x) :=

  @Form x (left_tag (untag (heap_of f) :+ h)) (@left_pf x h f).



Lemma right_pf x (h : heap) (f : find x) :

        invariant x (right_tag (h :+ untag (heap_of f))).

Proof.

case: f=>[[i]]; rewrite /invariant /= => H D.

by rewrite domUn !inE /= D (H (defUnr D)) orbT.

Qed.



Canonical Structure search_right x (h : heap) (f : find x) :=

  @Form x (right_tag (h :+ untag (heap_of f))) (@right_pf x h f).



Lemma indom (x : ptr) (f : find x) : def f -> x \in dom f.

Proof. by case: f=>[[i]]; apply. Qed.



Example ex1 A (x1 x2 : ptr) (v1 v2 : A) (h1 h2 : heap) :

          def (h1 :+ x1 :-> 1 :+ (x2 :-> 3 :+ empty)) ->

          if x2 \in dom (h1 :+ x1 :-> 1 :+ (x2 :-> 3 :+ empty))

            then 1 == 1

            else 1 == 0.

Proof.

move=>D.

by rewrite indom.

Qed.



Example ex2 A (x1 x2 : ptr) (v1 v2 : A) (h1 h2 : heap) :

          def (h1 :+ x1 :-> 1 :+ (x2 :-> 3 :+ empty)) ->

          if x2 \in dom (h1 :+ x1 :-> 1 :+ (x2 :-> 3 :+ empty))

            then 1 == 1

            else 1 == 0.

Proof.

set H := _ :+ _ :+ (_ :+ _).

move=>D.

by rewrite indom.

Qed.

