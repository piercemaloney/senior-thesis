

Require Import Coq.FSets.FSets.

Require Import Coq.Lists.List.

Require Import Coq.Logic.Decidable.



Require Import CoqFSetDecide.

Require Import CoqListFacts.

Require Import LibTactics.



Inductive general_asn (key A B : Type) : Type :=

  | VarAsn : key -> A -> general_asn key A B

  | AltAsn : B -> general_asn key A B.



Implicit Arguments VarAsn [key A].

Implicit Arguments AltAsn [B].



Module Make

  (X : UsualDecidableType)

  (Import KeySet : FSetInterface.WSfun X).



Module Import D := CoqFSetDecide.WDecide_fun X KeySet.

Module KeySetProperties := FSetProperties.WProperties_fun X KeySet.

Module KeySetFacts := FSetFacts.WFacts_fun X KeySet.



Set Implicit Arguments.



Local Notation asn := (general_asn X.t).



Definition one (C : Type) (item : C) : list C := cons item nil.



Notation "x ~ a :> B" :=

  (one (VarAsn B x a))

  (at level 50, a at next level)

  : list_scope.



Notation "x ~ a" :=

  (one (VarAsn _ x a))

  (at level 50)

  : list_scope.



Arguments Scope app [ type_scope list_scope list_scope ].



Open Scope list_scope.



End Make.



