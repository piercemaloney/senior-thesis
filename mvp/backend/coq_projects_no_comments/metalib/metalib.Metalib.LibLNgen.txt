

Require Export Metalib.LibDefaultSimp.

Require Import Metalib.Metatheory.

Require Import Omega.



Definition lt_ge_dec (n m : nat) : {n < m} + {n >= m} :=

  match Compare_dec.le_gt_dec m n with

    | left pf => right pf

    | right pf => left pf

  end.



Ltac generalize_wrt x :=

  repeat (progress (match goal with

    | J : _ |- _ => move J after x; generalize dependent J

    end)).



Ltac apply_mutual_ind ind :=

  let H := fresh in

  first [ 
 intros H; induction H using ind

        | intros ? H; induction H using ind

        | intros ? ? H; induction H using ind

        | intros ? ? ? H; induction H using ind

        | intros ? ? ? ? H; induction H using ind

        | intros ? ? ? ? ? H; induction H using ind

        | intros ? ? ? ? ? ? H; induction H using ind

        | intros ? ? ? ? ? ? ? H; induction H using ind

        | intros ? ? ? ? ? ? ? ? H; induction H using ind

        ].



Ltac rename_last_into H :=

  match goal with

    | J : _ |- _ => rename J into H

  end.



Ltac specialize_all x :=

  repeat (match goal with

            | H : _ |- _ => specialize (H x)

          end).



Lemma remove_union_distrib : forall (s1 s2 : atoms) (x : atom),

  remove x (union s1 s2) [=] union (remove x s1) (remove x s2).

Proof. fsetdec. Qed.



Lemma Equal_union_compat : forall (s1 s2 s3 s4 : atoms),

  s1 [=] s3 ->

  s2 [=] s4 ->

  union s1 s2 [=] union s3 s4.

Proof. fsetdec. Qed.



Lemma Subset_refl : forall (s : atoms),

  s [<=] s.

Proof. fsetdec. Qed.



Lemma Subset_empty_any : forall (s : atoms),

  empty [<=] s.

Proof. fsetdec. Qed.



Lemma Subset_union_compat : forall (s1 s2 s3 s4 : atoms),

  s1 [<=] s3 ->

  s2 [<=] s4 ->

  union s1 s2 [<=] union s3 s4.

Proof. fsetdec. Qed.



Lemma Subset_union_left : forall (s1 s2 s3 : atoms),

  s1 [<=] s2 ->

  s1 [<=] union s2 s3.

Proof. fsetdec. Qed.



Lemma Subset_union_right : forall (s1 s2 s3 : atoms),

  s1 [<=] s3 ->

  s1 [<=] union s2 s3.

Proof. fsetdec. Qed.



Lemma Subset_union_lngen_open_upper :

  forall (s1 s2 s3 s4 s5 : atoms),

  s1 [<=] union s3 s4 ->

  s2 [<=] union s3 s5 ->

  union s1 s2 [<=] union s3 (union s4 s5).

Proof. fsetdec. Qed.



Hint Resolve sym_eq : brute_force.



Hint Extern 5 (_ = _ :> nat) => omega : brute_force.

Hint Extern 5 (_ < _)        => omega : brute_force.

Hint Extern 5 (_ <= _)       => omega : brute_force.



Hint Rewrite @remove_union_distrib : lngen.



Hint Resolve @Equal_union_compat : lngen.

Hint Resolve @Subset_refl : lngen.

Hint Resolve @Subset_empty_any : lngen.

Hint Resolve @Subset_union_compat : lngen.

Hint Resolve @Subset_union_left : lngen.

Hint Resolve @Subset_union_right : lngen.

Hint Resolve @Subset_union_lngen_open_upper : lngen.

