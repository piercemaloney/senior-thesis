

Require Import Coq.MSets.MSets.

Require Import CoqMSetInterface.



Module Type WSfun (X : DecidableType).



  Include CoqMSetInterface.WSetsOn X.



  Definition disjoint E F := inter E F [=] empty.



  Definition notin x L := ~ In x L.



  Fixpoint fresh_list

      (L : t) (n : nat) (xs : list X.t) {struct xs} : Prop :=

    match xs, n with

      | nil, O =>

        True

      | cons x xs', S n' =>

        notin x L /\ fresh_list (union L (singleton x)) n' xs'

      | _, _ =>

        False

    end.



End WSfun.



Module Make (X : DecidableType) <: WSfun X.



  Include Coq.MSets.MSetWeakList.Make X.



  Definition disjoint E F := Equal (inter E F) empty.



  Definition notin x L := ~ In x L.



  Fixpoint fresh_list

      (L : t) (n : nat) (xs : list X.t) {struct xs} : Prop :=

    match xs, n with

      | nil, O =>

        True

      | cons x xs', S n' =>

        notin x L /\ fresh_list (union L (singleton x)) n' xs'

      | _, _ =>

        False

    end.



End Make.

