  Inductive seq : nat -> Set :=
  | niln : seq 0
  | consn : forall n : nat, nat -> seq n -> seq (S n).

  Fixpoint length (n : nat) (s : seq n) {struct s} : nat := 
    match s with
    | niln => 0
    | consn i _ s' => S (length i s')
    end.

  Theorem length_corr : forall (n : nat) (s : seq n), length n s = n.
{Goals:

--------------------------------------------------
forall (n : nat) (s : seq n), length n s = n
--------------------------------------------------

Bullet: None}

  Proof.
{Goals:

--------------------------------------------------
forall (n : nat) (s : seq n), length n s = n
--------------------------------------------------

Bullet: None}

    intros n s.
{Goals:

--------------------------------------------------
n: nat
s: seq n

length n s = n
--------------------------------------------------

Bullet: None}


    (* reasoning by induction over s. Then, we have two new goals
       corresponding on the case analysis about s (either it is 
       niln or some consn *)
    induction s.
{Goals:

--------------------------------------------------
length 0 niln = 0
--------------------------------------------------
--------------------------------------------------
n, n0: nat
s: seq n
IHs: length n s = n

length (S n) (consn n n0 s) = S n
--------------------------------------------------

Bullet: None}


      (* We are in the case where s is void. We can reduce the 
         term: length 0 niln *)
      simpl.
{Goals:

--------------------------------------------------
0 = 0
--------------------------------------------------
--------------------------------------------------
n, n0: nat
s: seq n
IHs: length n s = n

length (S n) (consn n n0 s) = S n
--------------------------------------------------

Bullet: None}
 

      (* We obtain the goal 0 = 0. *)
      trivial.
{Goals:

--------------------------------------------------
n, n0: nat
s: seq n
IHs: length n s = n

length (S n) (consn n n0 s) = S n
--------------------------------------------------

Bullet: None}


      (* now, we treat the case s = consn n e s with induction 
         hypothesis IHs *)
      simpl.
{Goals:

--------------------------------------------------
n, n0: nat
s: seq n
IHs: length n s = n

S (length n s) = S n
--------------------------------------------------

Bullet: None}
 

      (* The induction hypothesis has type length n s = n. 
         So we can use it to perform some rewriting in the goal: *)
      rewrite IHs.
{Goals:

--------------------------------------------------
n, n0: nat
s: seq n
IHs: length n s = n

S n = S n
--------------------------------------------------

Bullet: None}
 

      (* Now the goal is the trivial equality: S n = S n *)
      trivial.
{No more goals.

Bullet: None}


    (* Now all sub cases are closed, we perform the ultimate
       step: typing the term built using tactics and save it as
       a witness of the theorem. *)
  Qed.