Set Asymmetric Patterns.
Require Import Arith.
Section Domain.
Variable Dom : Set.
Inductive tree : Set :=
  | leaf : Dom -> tree
  | cons : tree -> tree -> tree.
End Domain.
Definition nat_tree := tree nat.
Definition nat_cons := cons nat.
Definition nat_leaf := leaf nat.
Fixpoint leavemult (t : nat_tree) : nat :=
  match t return nat with
  | leaf n1 => 
        n1
  | cons t1 t2 => leavemult t1 * leavemult t2
  end.
Definition SPECIF (t : nat_tree) := {n : nat | n = leavemult t}.
Theorem trivialalgo : forall t : nat_tree, SPECIF t.
Fixpoint Has_Zero (t : nat_tree) : Prop :=
  match t return Prop with
  | leaf n1 =>
       n1 = 0
  | cons t1 t2 => Has_Zero t1 \/ Has_Zero t2
  end.
Lemma zero_occ : forall t : nat_tree, Has_Zero t -> leavemult t = 0.
Let subtree_ersatz (t' t : nat_tree) := Has_Zero t' -> Has_Zero t.
Let kappa (t t' : nat_tree) := forall n' : nat, n' = leavemult t' -> SPECIF t.
Theorem cpsalgo : forall t : nat_tree, SPECIF t.
Require Extraction.
Extraction "leavemult.ml" SPECIF kappa trivialalgo cpsalgo.